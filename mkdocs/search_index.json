{
    "docs": [
        {
            "location": "/",
            "text": "Welcome Developers!\n\n\nAllJoyn\n is a collaborative open-source software framework that makes\nit easy for devices and apps to discover and communicate with each\nother. It supports many language bindings and can be easily integrated\ninto platforms small and large. The AllJoyn framework defines a common way for\ndevices and apps to communicate with one another ushering a new\nwave of interoperable devices to make the Internet of Things a\nreality.\n\n\nUse above navigation to \nlearn\n more about AllJoyn concepts and\narchitecture, to learn more about \ndeveloping\n for AllJoyn, and\nopen-source project.",
            "title": "Home"
        },
        {
            "location": "/#welcome-developers",
            "text": "AllJoyn  is a collaborative open-source software framework that makes\nit easy for devices and apps to discover and communicate with each\nother. It supports many language bindings and can be easily integrated\ninto platforms small and large. The AllJoyn framework defines a common way for\ndevices and apps to communicate with one another ushering a new\nwave of interoperable devices to make the Internet of Things a\nreality.  Use above navigation to  learn  more about AllJoyn concepts and\narchitecture, to learn more about  developing  for AllJoyn, and\nopen-source project.",
            "title": "Welcome Developers!"
        },
        {
            "location": "/ambassadors/",
            "text": "Ambassadors",
            "title": "Home"
        },
        {
            "location": "/ambassadors/#ambassadors",
            "text": "",
            "title": "Ambassadors"
        },
        {
            "location": "/develop/",
            "text": "Develop\n\n\nThis will contain information about developing for the AllJoyn\n framework.\n\n\n\n\nBuilding\n\n\nRunning Sample Applications\n\n\nAPI Usage Guide\n\n\nAPI Reference Guide\n\n\nTutorial\n\n\nDebug\n\n\nAsk Forum",
            "title": "Home"
        },
        {
            "location": "/develop/#develop",
            "text": "This will contain information about developing for the AllJoyn  framework.   Building  Running Sample Applications  API Usage Guide  API Reference Guide  Tutorial  Debug  Ask Forum",
            "title": "Develop"
        },
        {
            "location": "/develop/api-guide/",
            "text": "API Guide\n\n\n\n\n\n\n\n\nGuide\n\n\nJava\n\n\nC++\n\n\nObjective-C\n\n\nC (Thin Core)\n\n\n\n\n\n\n\n\n\n\nCore\n\n\nJava\n\n\n\n\nObjective-C\n\n\n\n\n\n\n\n\nAbout\n\n\nJava\n\n\nC++\n\n\nObjective-C\n\n\nC (Thin Core)\n\n\n\n\n\n\nOnboarding\n\n\nJava\n\n\n\n\nObjective-C\n\n\n\n\n\n\n\n\nConfiguration\n\n\nJava\n\n\nC++\n\n\nObjective-C\n\n\nC (Thin Core)\n\n\n\n\n\n\nNotification\n\n\nJava\n\n\nC++\n\n\nObjective-C\n\n\nC (Thin Core)\n\n\n\n\n\n\nControl Panel\n\n\nJava\n\n\nC++\n\n\nObjective-C\n\n\nC (Thin Core)\n\n\n\n\n\n\nAudio Streaming\n\n\n\n\nC++\n\n\n\n\n\n\n\n\n\n\nEvents And Actions",
            "title": "Home"
        },
        {
            "location": "/develop/api-guide/#api-guide",
            "text": "Guide  Java  C++  Objective-C  C (Thin Core)      Core  Java   Objective-C     About  Java  C++  Objective-C  C (Thin Core)    Onboarding  Java   Objective-C     Configuration  Java  C++  Objective-C  C (Thin Core)    Notification  Java  C++  Objective-C  C (Thin Core)    Control Panel  Java  C++  Objective-C  C (Thin Core)    Audio Streaming   C++      Events And Actions",
            "title": "API Guide"
        },
        {
            "location": "/develop/api-guide/about/c-thin/",
            "text": "About API Guide - C (Thin Core)\n\n\nObtain the About feature\n\n\nThe source code for this feature can be found on the \nAllSeen\nAlliance gerrit page\n\nas a git project. In addition, the \najtcl\n\nproject is needed to compile this feature.\n\n\nIf the target platform already supports the AllJoyn\n\nThin Library framework, refer to the target platform documentation\nfor detailed setup and download instructions.\n\n\nIf the target platform does not support the AllJoyn Thin\nLibrary framework, porting work is required to support this\ntarget. See the \nIntroduction to AllJoyn Thin Library\n\nfor more information about the AllJoyn Thin Library framework.\n\n\nReference code\n\n\nThe reference code consists of a module implementing the\nAbout Server layer that allows for Announcements to be\ncomposed and sent, and provides remote access to AboutData.\nIt also has an AboutService-specific sample code for integrating\nwith the ServerSample application code.\n\n\nAbout feature modules\n\n\n\n\n\n\n\n\nModule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutIcon\n\n\nAboutIcon code\n\n\n\n\n\n\nAboutSample\n\n\nThis module is responsible for the general flow of the About sample application including initialization and shutdown of the AboutService and AboutIcon modules, and performing any AboutService and AboutIcon-related business logic when the application's message loop is idling.\n\n\n\n\n\n\nAboutService\n\n\nAbout feature code\n\n\n\n\n\n\nApplicationProvisioning\n\n\nApplication provisioning code for all services. This module is part of the ServerSample.\n\n\n\n\n\n\nPropertyStore\n\n\nPropertyStore implementation code. This supports all core services. This module is part of the AppsCommon.\n\n\n\n\n\n\n\n\nBuild an About Server\n\n\nThe following steps provide the high-level process to build an\nAbout Server. See the \nBuild an Application using the\nThin Library section\n for instructions.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nImplement the PropertyStore and provision its values.\n\n\n\n\nImplementing an About Server\n\n\nCreate the base for the AllJoyn application\n\n\nSee the \nBuild an Application using the Thin Library section\n for instructions.\n\n\nProvision the PropertyStore for the About feature\n\n\nA PropertyStore structure is required by the AboutService to\nstore the provisioned values for the data fields listed in\n\nAboutData fields\n. See the \nAbout Interface Definition\n for more information.\n\n\nAboutData fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nAnnounced\n\n\nType\n\n\n\n\n\n\n\n\n\n\nAppId\n\n\nyes\n\n\nyes\n\n\nay\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceName\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceId\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nAppName\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nManufacturer\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nModelNumber\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nSupportedLanguages\n\n\nyes\n\n\nno\n\n\nas\n\n\n\n\n\n\nDescription\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nDateofManufacture\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSoftwareVersion\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nAJSoftwareVersion\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nHardwareVersion\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSupportUrl\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\n\n\nPropertyStore implementation\n\n\nThe code in PropertyStore.c file is an example PropertyStore\nimplementation that supports the requirements of the\nAboutService and is included as part of the ServerSample code.\nThe PropertyStore uses the provisioning structures that are\ndefined in the PropertyStoreOEMProvisioning.h file in the AppsCommon.\nA provisioning example is provided in the ServerSample code and\nexplained in the \nBuild an Application using the Thin Library section\n.\n\n\nAdding custom field definition and values\n\n\nComplete the following steps to add your own custom fields\nto extend AboutData.\n\n\n\n\nDecide to which subset the field belongs (persisted keys\nor all keys) and add it to the enumeration \nAJSVC_PropertyStoreFieldIndices\n\naccordingly.\n\n\nAdd a new field entry at the respective index to the\n\npropertyStoreProperties\n.\n\n\nDecide whether the field is publicly accessible from\nremote clients. If the field is public then set the\n\nmode7Public\n bit to 1.\n\n\nDecide whether the field is to be included in the\nAnnouncement. If the field is announced then set the\n\nmode1Announce\n bit to 1.\n   \nNOTE:\n It is recommended to limit the inclusion of a field\n   in the Announcement according to its immediate relevance\n   to the appropriate service framework's discovery.Only the\n   value associated with the current DefaultLanguage will be\n   sent in the Announcement.\n\n\nDecide whether the field is multi-language and add the\nrelevant values for the provisioned languages. If the field\nis multi-language then set the \nmode2MultiLng\n bit to 1.\n\n\nDecide whether the field is to be provisioned dynamically\nin code and persisted during first-time (or post-factory reset)\ndevice startup. If the field is to be initialized once, then\nset the \nmode3Init\n bit to 1 and add the relevant code to initialize it.\nRefer to \nPropertyStore_Init()\n and \nInitMandatoryPropertiesInRAM()\n\nin PropertyStore.c file for an example setup for the DeviceId and\nAppId fields.\n   \nNOTE:\n  If you set this bit, the field's index must be included\n   in the Persisted keys subset.\n\n\nAdd an entry in the corresponding index of \npropertyStoreDefaultValues\n\nto provision default value(s).\n\n\nAdd an entry in the corresponding index of \npropertyStoreRuntimeValues\n\nto provision for runtime value(s) buffer(s).\n\n\n\n\nNOTES\n\n\n\n\nThis is required if the field was defined as runtime initialized,\ni.e., the \nmode3Init\n bit to 1 in the corresponding entry in \npropertyStoreProperties\n.\n\n\nThe example implementation of PropertyStore supports properties\nwith value of type String ('s') only. If your property must be\nof a different type, you must provision the default value as a\nString and perform the relevant de/serialization on the client side.\n\n\n\n\nAbout icon\n\n\nIn addition to AboutData, the About feature supports the\npublication of an icon. The icon is published directly as a\nbyte array or a reference URL. The provisioinbg is done by\nthe application and passed to \nAJ_AboutIcon_Start()\n in AboutSample.c.\n\n\nAn example provisioning is provided in the ServerSample's ServerSample.c:\n\n\n/**\n* Mime type of the About Device icon\n*/\nconst char* aboutIconMimetype = { \nimage/png\n };\n/**\n* Content of the About Device icon\n*/\nconst uint8_t aboutIconContent[] =\n{ 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, ... , 0x60, 0x82, 0x82 };\n/**\n* Size of the About Device icon\n*/\nconst size_t aboutIconContentSize = sizeof(aboutIconContent);\n/**\n* url of the icon About Device icon\n*/\nconst char* aboutIconUrl = { \n https://www.allseemalliance.org/sites/all/themes/at_alljoyn/images/img-alljoyn-logo.png \n\n};\n\n\n\n\nStart the About Server\n\n\nFor the About Server to be initiated properly, the application\nrequires to pass it the relevant settings and callbacks.\nThe application achieves this by calling \nAJ_About_Start()\n\nand optionally \nAJ_AboutIcon_Start()\n.\n\n\nAn example is in About_Init() of AboutSample.c.\n\n\nAJ_Status About_Init(AJ_Object* announceObjects, const char* aboutIconMimetype,\n   const uint8_t* aboutIconContent, const size_t aboutIconContentSize,\n   const char* aboutIconUrl) {\nAJ_Status status = AJ_About_Start(AJ_ABOUT_SERVICE_PORT, announceObjects);\nif (status == AJ_OK) {\nstatus = AJ_AboutIcon_Start(aboutIconMimetype, aboutIconContent,\n   aboutIconContentSize, aboutIconUrl);\n}\nreturn status;\n}\n\n\n\n\nCompile the code\n\n\nThe process to compile varies depending on the host and target\nplatform. Each host and platform needs may require a specific\ndirectory and file layout, build toolchains, procedures, and\nsupported AllJoyn service frameworks. Refer to the target\nplatform documentation that contains instructions on how to\norganize and set up the build process to incorporate the\nnecessary files to compile your Thin Library application.\n\n\nFor more details on how to combine this AllJoyn feature with\nother AllJoyn service framework software, see the\n\nBuild an Application Using Thin Library section\n.",
            "title": "C thin"
        },
        {
            "location": "/develop/api-guide/about/c-thin/#about-api-guide-c-thin-core",
            "text": "",
            "title": "About API Guide - C (Thin Core)"
        },
        {
            "location": "/develop/api-guide/about/c-thin/#obtain-the-about-feature",
            "text": "The source code for this feature can be found on the  AllSeen\nAlliance gerrit page \nas a git project. In addition, the  ajtcl \nproject is needed to compile this feature.  If the target platform already supports the AllJoyn \nThin Library framework, refer to the target platform documentation\nfor detailed setup and download instructions.  If the target platform does not support the AllJoyn Thin\nLibrary framework, porting work is required to support this\ntarget. See the  Introduction to AllJoyn Thin Library \nfor more information about the AllJoyn Thin Library framework.",
            "title": "Obtain the About feature"
        },
        {
            "location": "/develop/api-guide/about/c-thin/#reference-code",
            "text": "The reference code consists of a module implementing the\nAbout Server layer that allows for Announcements to be\ncomposed and sent, and provides remote access to AboutData.\nIt also has an AboutService-specific sample code for integrating\nwith the ServerSample application code.  About feature modules     Module  Description      AboutIcon  AboutIcon code    AboutSample  This module is responsible for the general flow of the About sample application including initialization and shutdown of the AboutService and AboutIcon modules, and performing any AboutService and AboutIcon-related business logic when the application's message loop is idling.    AboutService  About feature code    ApplicationProvisioning  Application provisioning code for all services. This module is part of the ServerSample.    PropertyStore  PropertyStore implementation code. This supports all core services. This module is part of the AppsCommon.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/about/c-thin/#build-an-about-server",
            "text": "The following steps provide the high-level process to build an\nAbout Server. See the  Build an Application using the\nThin Library section  for instructions.   Create the base for the AllJoyn application.  Implement the PropertyStore and provision its values.",
            "title": "Build an About Server"
        },
        {
            "location": "/develop/api-guide/about/c-thin/#implementing-an-about-server",
            "text": "Create the base for the AllJoyn application  See the  Build an Application using the Thin Library section  for instructions.  Provision the PropertyStore for the About feature  A PropertyStore structure is required by the AboutService to\nstore the provisioned values for the data fields listed in AboutData fields . See the  About Interface Definition  for more information.  AboutData fields     Field name  Required  Announced  Type      AppId  yes  yes  ay    DefaultLanguage  yes  yes  s    DeviceName  yes  yes  s    DeviceId  yes  yes  s    AppName  yes  yes  s    Manufacturer  yes  yes  s    ModelNumber  yes  yes  s    SupportedLanguages  yes  no  as    Description  yes  no  s    DateofManufacture  no  no  s    SoftwareVersion  yes  no  s    AJSoftwareVersion  yes  no  s    HardwareVersion  no  no  s    SupportUrl  no  no  s     PropertyStore implementation  The code in PropertyStore.c file is an example PropertyStore\nimplementation that supports the requirements of the\nAboutService and is included as part of the ServerSample code.\nThe PropertyStore uses the provisioning structures that are\ndefined in the PropertyStoreOEMProvisioning.h file in the AppsCommon.\nA provisioning example is provided in the ServerSample code and\nexplained in the  Build an Application using the Thin Library section .  Adding custom field definition and values  Complete the following steps to add your own custom fields\nto extend AboutData.   Decide to which subset the field belongs (persisted keys\nor all keys) and add it to the enumeration  AJSVC_PropertyStoreFieldIndices \naccordingly.  Add a new field entry at the respective index to the propertyStoreProperties .  Decide whether the field is publicly accessible from\nremote clients. If the field is public then set the mode7Public  bit to 1.  Decide whether the field is to be included in the\nAnnouncement. If the field is announced then set the mode1Announce  bit to 1.\n    NOTE:  It is recommended to limit the inclusion of a field\n   in the Announcement according to its immediate relevance\n   to the appropriate service framework's discovery.Only the\n   value associated with the current DefaultLanguage will be\n   sent in the Announcement.  Decide whether the field is multi-language and add the\nrelevant values for the provisioned languages. If the field\nis multi-language then set the  mode2MultiLng  bit to 1.  Decide whether the field is to be provisioned dynamically\nin code and persisted during first-time (or post-factory reset)\ndevice startup. If the field is to be initialized once, then\nset the  mode3Init  bit to 1 and add the relevant code to initialize it.\nRefer to  PropertyStore_Init()  and  InitMandatoryPropertiesInRAM() \nin PropertyStore.c file for an example setup for the DeviceId and\nAppId fields.\n    NOTE:   If you set this bit, the field's index must be included\n   in the Persisted keys subset.  Add an entry in the corresponding index of  propertyStoreDefaultValues \nto provision default value(s).  Add an entry in the corresponding index of  propertyStoreRuntimeValues \nto provision for runtime value(s) buffer(s).   NOTES   This is required if the field was defined as runtime initialized,\ni.e., the  mode3Init  bit to 1 in the corresponding entry in  propertyStoreProperties .  The example implementation of PropertyStore supports properties\nwith value of type String ('s') only. If your property must be\nof a different type, you must provision the default value as a\nString and perform the relevant de/serialization on the client side.   About icon  In addition to AboutData, the About feature supports the\npublication of an icon. The icon is published directly as a\nbyte array or a reference URL. The provisioinbg is done by\nthe application and passed to  AJ_AboutIcon_Start()  in AboutSample.c.  An example provisioning is provided in the ServerSample's ServerSample.c:  /**\n* Mime type of the About Device icon\n*/\nconst char* aboutIconMimetype = {  image/png  };\n/**\n* Content of the About Device icon\n*/\nconst uint8_t aboutIconContent[] =\n{ 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, ... , 0x60, 0x82, 0x82 };\n/**\n* Size of the About Device icon\n*/\nconst size_t aboutIconContentSize = sizeof(aboutIconContent);\n/**\n* url of the icon About Device icon\n*/\nconst char* aboutIconUrl = {   https://www.allseemalliance.org/sites/all/themes/at_alljoyn/images/img-alljoyn-logo.png  \n};  Start the About Server  For the About Server to be initiated properly, the application\nrequires to pass it the relevant settings and callbacks.\nThe application achieves this by calling  AJ_About_Start() \nand optionally  AJ_AboutIcon_Start() .  An example is in About_Init() of AboutSample.c.  AJ_Status About_Init(AJ_Object* announceObjects, const char* aboutIconMimetype,\n   const uint8_t* aboutIconContent, const size_t aboutIconContentSize,\n   const char* aboutIconUrl) {\nAJ_Status status = AJ_About_Start(AJ_ABOUT_SERVICE_PORT, announceObjects);\nif (status == AJ_OK) {\nstatus = AJ_AboutIcon_Start(aboutIconMimetype, aboutIconContent,\n   aboutIconContentSize, aboutIconUrl);\n}\nreturn status;\n}  Compile the code  The process to compile varies depending on the host and target\nplatform. Each host and platform needs may require a specific\ndirectory and file layout, build toolchains, procedures, and\nsupported AllJoyn service frameworks. Refer to the target\nplatform documentation that contains instructions on how to\norganize and set up the build process to incorporate the\nnecessary files to compile your Thin Library application.  For more details on how to combine this AllJoyn feature with\nother AllJoyn service framework software, see the Build an Application Using Thin Library section .",
            "title": "Implementing an About Server"
        },
        {
            "location": "/develop/api-guide/about/cpp-legacy/",
            "text": "About API Guide - C++\n\n\nThe About Feature was integrated with the core library with the\nAllJoyn\n 14.12 release.  The reference code found in this document refers\nto the About Feature code developed before the the About Feature integration.\n\n\nAs a developer you are encouraged to discontinue use of these APIs and move to\nthe newer About Feature API.\n\n\nCurrent About API C++ Guide\n\n\nReference code\n\n\nClasses used to send AboutData\n\n\n\n\n\n\n\n\nServer class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutService\n\n\nClass that implements the org.alljoynAbout interface.\n\n\n\n\n\n\nAboutIconService\n\n\nClass that implements the org.alljoynIcon interface.\n\n\n\n\n\n\nPropertyStore\n\n\nInterface that supplies the list of properties required for Announce signal payload and GetAboutData().\n\n\n\n\n\n\n\n\nClasses used to receive AboutData\n\n\n\n\n\n\n\n\nClient class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutClient\n\n\nHelper class for discovering AboutServer that provides access to the Announcements and to the AboutService. It listens for Announcements sent using the org.alljoyn.About interface.\n\n\n\n\n\n\nAboutIconClient\n\n\nHelper class that provides access to the AboutIconService.\n\n\n\n\n\n\n\n\nReference C++ application code\n\n\n\n\n\n\n\n\nApplication class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutServerMain\n\n\nCommand line application that announces the About and DeviceIcon AllJoyn\n interfaces and handles remote access to these interfaces by registering an instance of AboutService and AboutIconService the AllJoyn bus.\n\n\n\n\n\n\nAboutClientMain\n\n\nCommand line application that uses AboutClient to discover About servers and exercise their interfaces.\n\n\n\n\n\n\n\n\nBuild an application that uses AboutService\n\n\nThe following steps provide the high-level process to build an\napplication that will broadcast AboutData.\n\n\n\n\nImplement PropertyStore to produce an AboutStore.\n(See \nCreate a PropertyStore implementation\n.)\n\n\nInstantiate an AboutStore.\n\n\nCreate and register the AboutService, providing it with the AboutStore.\n\n\n\n\nBuild an application that uses AboutClient\n\n\nThe following steps provide the high-level process to build an\napplication that will receive AboutData.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nCreate a new AboutClient.\n\n\nRegister the AnnounceListener.\n\n\nRegister the AboutClient.\n\n\n\n\nSetting Up the AllJoyn Framework\n\n\nCreate instance of BusAttachment\n\n\nTo use the About feature, an AllJoyn object call the BusAttachment\nis needed that is used internally by the service to leverage\nthe AllJoyn API calls.\n\n\nBusAttachment* msgBus = new BusAttachment(\nAboutService\n, true);\n\n\n\n\nCreate password for the bundled router\n\n\nNOTE: Thin libraries at AllSeen Alliance version 14.06 or\nhigher do not require this step.\n\n\nTo allow thin libraries to connect to the bundled router,\nthe router requires a password.\n\n\nPasswordManager::SetCredentials(\nALLJOYN_PIN_KEYX\n, PassCode);\n}\n\n\n\n\nStart and connect the BusAttachment\n\n\nOnce created, the BusAttachment must be connected to the\nAllJoyn framework.\n\n\nQStatus status = msgBus-\nStart();\nif( status == ER_OK ) {\n   status = msgBus-\nConnect(NULL);\n}\n\n\n\n\nImplementing an Application that Uses AboutService\n\n\nImplementing an AboutServer requires creating and registering\nan instance of the AboutService class.\n\n\nNOTE: Verify the BusAttachment has been created, started and\nconnected before implementing the AboutService. See \nSetting\nUp the AllJoyn Framework\n for the\ncode snippets. Code in this section references a variable\n\nmsgBus\n (the BusAttachment variable name).\n\n\nDeclare listener class\n\n\nDeclare a listener class to receive the SessionPortListener callback.\n\n\nTypically, an AcceptSessionJoiner callback in SessionPortListener\nhas a check to allow or disallow access. Since the AboutService\nrequires access to any application using AboutClient, return\ntrue when this callback is triggered. Use the SessionJoined\nhandler to set the session timeout to 20 seconds.\n\n\nclass MyListener : public SessionPortListener {\n   private:\n      BusAttachment *mMsgBus;\n\n   public:\n      MyListener( BusAttachment *msgBus ) {\n         mMsgBus = msgBus;\n   }\n\n      bool AcceptSessionJoiner( SessionPort sessionPort, const\n         char* joiner, const SessionOpts\n opts ) {\n\n         printf(\nAccepting join session request from %s (opts.proximity=%x,\n            opts.traffic=%x, opts.transports=%x)\\n\n,\n               joiner, opts.proximity, opts.traffic, opts.transports);\n\n         return true;\n      }\n\n      void SessionJoined( SessionPort sessionPort, SessionId id, const char*\njoiner ) {\n         printf(\nSessionJoined with %s (id=%d)\\n\n, joiner, id);\n         mMsgBus-\nEnableConcurrentCallbacks();\n         uint32_t timeout = 20;\n         QStatus status = mMsgBus-\nSetLinkTimeout(id, timeout);\n         if( status == ER_OK ) {\n            printf(\nLink timeout has been set to %ds\\n\n, timeout);\n\n         } else {\n            printf(\nSetLinkTimeout(%d) failed\\n\n, timeout);\n         }\n      }\n};\n\n\n\n\nBind session port\n\n\nTo allow incoming connections, the formation of a session is\nneeded. The AllJoyn framework must be told that connections\nare allowed.\n\n\nSessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false,\n    SessionOpts::PROXIMITY_ANY, TRANSPORT_ANY);\nSessionPort sPort = SERVICES_PORT;\nif( status == ER_OK )\n    status = msgBus-\nBindSessionPort(sPort, opts, *busListener);\n\n\n\n\nCreate a PropertyStore implementation\n\n\nThe PropertyStore interface is required by the AboutService to\nstore the provisioned values for the About interface data fields.\nSee the \nAbout Interface Definition\n for more information.\n\n\nAbout interface data fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nAnnounced\n\n\nSignature\n\n\n\n\n\n\n\n\n\n\nAppId\n\n\nyes\n\n\nyes\n\n\nay\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceName\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceId\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nAppName\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nManufacturer\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nModelNumber\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nSupportedLanguages\n\n\nyes\n\n\nno\n\n\nas\n\n\n\n\n\n\nDescription\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nDateofManufacture\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSoftwareVersion\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nAJSoftwareVersion\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nHardwareVersion\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSupportUrl\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\n\n\nAn example PropertyStore implementation (AboutPropertyStoreImp)\nis provided. All fields above can easily be set by calling the\nappropriate setter function.\n\n\naboutStore = new AboutPropertyStoreImpl();\naboutStore -\nsetDeviceId(\n1231232145667745675477\n);\naboutStore -\nsetDeviceName(\nMyDeviceName\n, \nen\n);\naboutStore -\nsetDeviceName(\nNombreDeMiDispositivo\n, \nes\n);\naboutStore -\nsetDeviceName(\nNomDispositif\n, \nfr\n);\naboutStore -\nsetAppId(\n000102030405060708090A0B0C0D0E0C\n);\naboutStore -\nsetDefaultLang(\nen\n);\n\naboutStore -\nsetAppName(\nAboutConfig\n, \nen\n);\naboutStore -\nsetAppName(\nAboutConfig\n, \nes\n);\naboutStore -\nsetAppName(\nAboutConfig\n, \nfr\n);\naboutStore -\nsetModelNumber(\nWxfy388i\n);\naboutStore -\nsetDateOfManufacture(\n10/1/2199\n);\naboutStore -\nsetSoftwareVersion(\n12.20.44 build 44454\n);\naboutStore -\nsetAjSoftwareVersion(ajn::GetVersion());\naboutStore -\nsetHardwareVersion(\n355.499. b\n);\n\nstd::vector\nqcc::String\n languages(3);\nlanguages[0] = \nen\n;\nlanguages[1] = \nes\n;\nlanguages[2] = \nfr\n;\naboutStore -\nsetSupportedLangs(languages);\n\naboutStore -\nsetDescription(\nThis is an AllJoyn application\n, \nen\n);\naboutStore -\nsetDescription(\nEsta es una AllJoyn aplicacion\n, \nes\n);\naboutStore -\nsetDescription(\nC'est une AllJoyn application\n, \nfr\n);\n\naboutStore -\nsetManufacturer(\nCompany\n, \nen\n);\naboutStore -\nsetManufacturer(\nEmpresa\n, \nes\n);\naboutStore -\nsetManufacturer(\nEntreprise\n, \nfr\n);\n\naboutStore -\nsetSupportUrl(\nhttp://www.allseenalliance.org\n);\n\n\n\n\nCreate the AboutService object\n\n\nFor an application to send AboutData, it requires an instance\nof the AboutService class. AboutService is an implementation\nwrapper around AllJoyn native calls that handle the interactions\nbetween AboutServer and AboutClient.\n\n\nAboutService* aboutService = NULL;\naboutService = aboutService = new AboutService(msgBus,aboutStore);\naboutService-\nRegister(SERVICES_PORT);\nmsgBus-\nRegisterBusObject(*aboutService);\n\n\n\n\nAdd interfaces to Announcement\n\n\nstd::vector\nqcc::String\n interfaces;\ninterfaces.push_back(\norg.alljoyn.About\n);\naboutService-\nAddObjectDescription(\n/About\n, interfaces);\n\n\n\n\nRegister AboutService object with BusAttachment\n\n\nRegister the AboutService with the obtained session port.\n\n\naboutService-\nRegister(sPort);\nmsgBus-\nRegisterBusObject(*aboutService);\n\n\n\n\nAdd an AboutIconService (optional)\n\n\nAn applicaton that sends AboutData can be extended to\nbroadcast a device icon using an instance of the AboutIconService\nclass. AboutIconService is an implementation wrapper around\nAllJoyn native calls that handle the interactions between\napplications that use the AboutIconClient class.\n\n\nProvision for the Icon content and URL\n\n\nAn Icon is published directly as a byte array or a reference\nURL, and must be provisioned as follows:\n\n\nuint8_t aboutIconContent[] = { 0x89, 0x50, 0x4E, 0x47, 0x0D /* Add relevant data here */ };\nqcc::String mimeType(\nimage/png\n); /* This should correspond to the content */\nqcc::String url(\nhttp://myurl\n); /* An alternate access to the Icon */\n\n\n\n\nAddDeviceIcon object and interfaces to Announcement\n\n\nstd::vector\nqcc::String\n interfaces;\ninterfaces.push_back(\norg.alljoyn.Icon\n);\naboutService-\nAddObjectDescription(\n/About/DeviceIcon\n, interfaces);\n\n\n\n\nCreate and register DeviceIcon object\n\n\nAboutIconService* aboutIconService = NULL;\naboutIconService = new AboutIconService(msgBus, mimeType, url,\n   aboutIconContent, sizeof(aboutIconContent) / sizeof (*aboutIconContent));\naboutIconService-\nRegister();\nmsgBus-\nRegisterBusObject(*aboutIconService);\n\n\n\n\nAdvertise name\n\n\nif( status == ER_OK )\n   status = msgBus-\nAdvertiseName(msgBus-\nGetUniqueName().c_str(),\n      opts.transports);\n\n\n\n\nAnnounce name\n\n\nif( status == ER_OK )\nstatus = aboutService-\nAnnounce();\n\n\n\n\nUnregister and delete AboutService, AboutStore, and AboutIconService\n\n\nWhen your process is done with the AboutService and no\nlonger wishes to send announcements, unregister the process\nfrom the AllJoyn bus and then delete variables used.\n\n\nif( aboutService != NULL ) {\n   msgBus-\nUnregisterBusObject(*aboutService);\n   delete aboutService;\n}\nif( aboutStore != NULL ) {\n   delete aboutStore;\n}\nif( aboutIconService != NULL ) {\n   msgBus-\nUnregisterBusObject(*aboutIconService);\n   delete aboutIconService;\n}\n\n\n\n\nImplementing an Application that Uses AboutClient\n\n\nTo implement an application to receive AboutData, use the\nAboutClient class. By using the AboutClient class, your\napplication is notified when AboutServer instances send\nannouncements.\n\n\nNOTE: Verify the BusAttachment has been created, started\nand connected before using an AboutClient. See \nSetting Up\nthe AllJoyn Framework\n for the code\nsnippets. Code in this section references a variable msgBus\n(the BusAttachment variable name).\n\n\nSetup to receive the Announce signal\n\n\nIn order to receive the Announce signal, implement a class\nthat inherits from the\nAnnounceHandler base class.\n\n\nCreate class to implement AnnounceHandler\n\n\nThis declaration of a class will allow for the signals to be\nreceived. It needs to implement pure virtual function Announce.\n\n\nclass AnnounceHandlerImpl : public ajn::services::AnnounceHandler (){\n   void Announce(unsigned short version, unsigned short port,\n      const char* busName, const ObjectDescriptions\n objectDescs,\n         const AboutData\n aboutData);\n}\n\n\n\n\nImplement the Announce method that handles the Announce signal\n\n\nWith everything linked up using the AllJoyn framework, the\nmethod registered with the AllJoyn framework will be executed\nupon receipt of an Announce signal.\n\n\nBecause every application is different, as a developer you\nwill need to process the\nAboutData and determine the following:\n\n\n\n\nHow in the UI it should be rendered\n\n\nWhen to request the data that is not contained in the Announce signal\n\n\nAny logic that is needed\n\n\n\n\nRegister the announceHandler using the AnnouncementRegistrar class\n\n\nWhen registering an announcement listener, specify which\ninterfaces the application is interested in. The code below\nshows a listener registered to receive Announce signals that\ninclude an object implementing the INTERFACE_NAME interface.\n\n\nAnnounceHandlerImpl* announceHandlerImpl = new AnnounceHandlerImpl();\nconst char* interfaces[] = { INTERFACE_NAME };\nAnnouncementRegistrar::RegisterAnnounceHandler(*busAttachment,\n   *announceHandlerImpl, interfaces, 1);\n\n\n\n\nUsing Ping to determine presence\n\n\nThe BusAttachment Ping member function can be used to determine\nif a device is responsive. Contents of an Announce signal can\nbe stale so it is recommended to ping the device to see if it\nis still present and responsive before attempting to form a connection.\n\n\nNOTE: The BusAttachment.Ping method makes a bus call. If \nPing\n\nis called inside an AllJoyn callback, \nBusAttachment.EnableConcurrentCallbacks\n\nmust be called first.\n\n\n// when pinging a remote bus wait a max of 5 seconds\n#define PING_WAIT_TIME  5000\nmsgBus-\nEnableConcurrentCallbacks();\n   QStatus status = msgBus-\nPing(busName.c_str(), PING_WAIT_TIME);\n   if( ER_OK == status) {\n   ...\n}\n\n\n\n\nRequest non-announced data\n\n\nIf there is a need to request information that is not contained\nin the announcement, perform the following steps.\n\n\n\n\nJoin the session\n\n\n\n\nCreate a session with the application by using the\n   BusAttachment JoinSession API.\n\n\nNOTE: The variables name and port are set from the AboutData\n   from the Announce method.\n\n\ncpp\n   SessionId sessionId;\n      SessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false,\n         SessionOpts::PROXIMITY_ANY, TRANSPORT_ANY);\n      QStatus status = msgBus-\nJoinSession(name, port, NULL, sessionId, opts);\n      if (status == ER_OK) {\n         QCC_DbgTrace((\"JoinSession SUCCESS (Session id=%d)\", sessionId));\n      } else {\n         QCC_LogError(status, (\"JoinSession failed\"));\n      }\n\n\n\n\nCreate AboutClient\n\n\n\n\nGenerate an AboutProxyBusObject from the org.alljoyn.About\n   Introspection XML and create an instance passing ButAttachment\n   and sessionId.\n\n\ncpp\n   AboutProxyBusObject * aboutClient = new AboutProxyBusObject\n      (msgBus, sender_name,\"\\About\", sessionId);\n   aboutClient-\nGetAboutData(\"\");\n\n\n\n\nCreate AboutIconClient\n\n\n\n\nGenerate an IconProxyBusObject from the org.alljoyn.Icon\n   Introspection XML and create an instance passing\n   ButAttachment, port, and sessionId.\n\n\ncpp\n   IconProxyBusObject * aboutIconClient = new IconProxyBusObject\n      (msgBus, sender_name, \"About\\DeviceIcon\", sessionId);\n   aboutIconClient-\nGetUrl();\n\n\nShutdown\n\n\nOnce you are done using the About feature and the AllJoyn\nframework, free the variables used in the application.\n\n\nNOTE: The AboutClient object must be deleted before the\nBusAttachment object.\n\n\ndelete aboutClient;\ndelete aboutIconClient;\ndelete msgBus;",
            "title": "Cpp legacy"
        },
        {
            "location": "/develop/api-guide/about/cpp-legacy/#about-api-guide-c",
            "text": "The About Feature was integrated with the core library with the\nAllJoyn  14.12 release.  The reference code found in this document refers\nto the About Feature code developed before the the About Feature integration.  As a developer you are encouraged to discontinue use of these APIs and move to\nthe newer About Feature API.  Current About API C++ Guide",
            "title": "About API Guide - C++"
        },
        {
            "location": "/develop/api-guide/about/cpp-legacy/#reference-code",
            "text": "Classes used to send AboutData     Server class  Description      AboutService  Class that implements the org.alljoynAbout interface.    AboutIconService  Class that implements the org.alljoynIcon interface.    PropertyStore  Interface that supplies the list of properties required for Announce signal payload and GetAboutData().     Classes used to receive AboutData     Client class  Description      AboutClient  Helper class for discovering AboutServer that provides access to the Announcements and to the AboutService. It listens for Announcements sent using the org.alljoyn.About interface.    AboutIconClient  Helper class that provides access to the AboutIconService.     Reference C++ application code     Application class  Description      AboutServerMain  Command line application that announces the About and DeviceIcon AllJoyn  interfaces and handles remote access to these interfaces by registering an instance of AboutService and AboutIconService the AllJoyn bus.    AboutClientMain  Command line application that uses AboutClient to discover About servers and exercise their interfaces.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/about/cpp-legacy/#build-an-application-that-uses-aboutservice",
            "text": "The following steps provide the high-level process to build an\napplication that will broadcast AboutData.   Implement PropertyStore to produce an AboutStore.\n(See  Create a PropertyStore implementation .)  Instantiate an AboutStore.  Create and register the AboutService, providing it with the AboutStore.",
            "title": "Build an application that uses AboutService"
        },
        {
            "location": "/develop/api-guide/about/cpp-legacy/#build-an-application-that-uses-aboutclient",
            "text": "The following steps provide the high-level process to build an\napplication that will receive AboutData.   Create the base for the AllJoyn application.  Create a new AboutClient.  Register the AnnounceListener.  Register the AboutClient.",
            "title": "Build an application that uses AboutClient"
        },
        {
            "location": "/develop/api-guide/about/cpp-legacy/#setting-up-the-alljoyn-framework",
            "text": "Create instance of BusAttachment  To use the About feature, an AllJoyn object call the BusAttachment\nis needed that is used internally by the service to leverage\nthe AllJoyn API calls.  BusAttachment* msgBus = new BusAttachment( AboutService , true);  Create password for the bundled router  NOTE: Thin libraries at AllSeen Alliance version 14.06 or\nhigher do not require this step.  To allow thin libraries to connect to the bundled router,\nthe router requires a password.  PasswordManager::SetCredentials( ALLJOYN_PIN_KEYX , PassCode);\n}  Start and connect the BusAttachment  Once created, the BusAttachment must be connected to the\nAllJoyn framework.  QStatus status = msgBus- Start();\nif( status == ER_OK ) {\n   status = msgBus- Connect(NULL);\n}",
            "title": "Setting Up the AllJoyn Framework"
        },
        {
            "location": "/develop/api-guide/about/cpp-legacy/#implementing-an-application-that-uses-aboutservice",
            "text": "Implementing an AboutServer requires creating and registering\nan instance of the AboutService class.  NOTE: Verify the BusAttachment has been created, started and\nconnected before implementing the AboutService. See  Setting\nUp the AllJoyn Framework  for the\ncode snippets. Code in this section references a variable msgBus  (the BusAttachment variable name).  Declare listener class  Declare a listener class to receive the SessionPortListener callback.  Typically, an AcceptSessionJoiner callback in SessionPortListener\nhas a check to allow or disallow access. Since the AboutService\nrequires access to any application using AboutClient, return\ntrue when this callback is triggered. Use the SessionJoined\nhandler to set the session timeout to 20 seconds.  class MyListener : public SessionPortListener {\n   private:\n      BusAttachment *mMsgBus;\n\n   public:\n      MyListener( BusAttachment *msgBus ) {\n         mMsgBus = msgBus;\n   }\n\n      bool AcceptSessionJoiner( SessionPort sessionPort, const\n         char* joiner, const SessionOpts  opts ) {\n\n         printf( Accepting join session request from %s (opts.proximity=%x,\n            opts.traffic=%x, opts.transports=%x)\\n ,\n               joiner, opts.proximity, opts.traffic, opts.transports);\n\n         return true;\n      }\n\n      void SessionJoined( SessionPort sessionPort, SessionId id, const char*\njoiner ) {\n         printf( SessionJoined with %s (id=%d)\\n , joiner, id);\n         mMsgBus- EnableConcurrentCallbacks();\n         uint32_t timeout = 20;\n         QStatus status = mMsgBus- SetLinkTimeout(id, timeout);\n         if( status == ER_OK ) {\n            printf( Link timeout has been set to %ds\\n , timeout);\n\n         } else {\n            printf( SetLinkTimeout(%d) failed\\n , timeout);\n         }\n      }\n};  Bind session port  To allow incoming connections, the formation of a session is\nneeded. The AllJoyn framework must be told that connections\nare allowed.  SessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false,\n    SessionOpts::PROXIMITY_ANY, TRANSPORT_ANY);\nSessionPort sPort = SERVICES_PORT;\nif( status == ER_OK )\n    status = msgBus- BindSessionPort(sPort, opts, *busListener);  Create a PropertyStore implementation  The PropertyStore interface is required by the AboutService to\nstore the provisioned values for the About interface data fields.\nSee the  About Interface Definition  for more information.  About interface data fields     Field name  Required  Announced  Signature      AppId  yes  yes  ay    DefaultLanguage  yes  yes  s    DeviceName  yes  yes  s    DeviceId  yes  yes  s    AppName  yes  yes  s    Manufacturer  yes  yes  s    ModelNumber  yes  yes  s    SupportedLanguages  yes  no  as    Description  yes  no  s    DateofManufacture  no  no  s    SoftwareVersion  yes  no  s    AJSoftwareVersion  yes  no  s    HardwareVersion  no  no  s    SupportUrl  no  no  s     An example PropertyStore implementation (AboutPropertyStoreImp)\nis provided. All fields above can easily be set by calling the\nappropriate setter function.  aboutStore = new AboutPropertyStoreImpl();\naboutStore - setDeviceId( 1231232145667745675477 );\naboutStore - setDeviceName( MyDeviceName ,  en );\naboutStore - setDeviceName( NombreDeMiDispositivo ,  es );\naboutStore - setDeviceName( NomDispositif ,  fr );\naboutStore - setAppId( 000102030405060708090A0B0C0D0E0C );\naboutStore - setDefaultLang( en );\n\naboutStore - setAppName( AboutConfig ,  en );\naboutStore - setAppName( AboutConfig ,  es );\naboutStore - setAppName( AboutConfig ,  fr );\naboutStore - setModelNumber( Wxfy388i );\naboutStore - setDateOfManufacture( 10/1/2199 );\naboutStore - setSoftwareVersion( 12.20.44 build 44454 );\naboutStore - setAjSoftwareVersion(ajn::GetVersion());\naboutStore - setHardwareVersion( 355.499. b );\n\nstd::vector qcc::String  languages(3);\nlanguages[0] =  en ;\nlanguages[1] =  es ;\nlanguages[2] =  fr ;\naboutStore - setSupportedLangs(languages);\n\naboutStore - setDescription( This is an AllJoyn application ,  en );\naboutStore - setDescription( Esta es una AllJoyn aplicacion ,  es );\naboutStore - setDescription( C'est une AllJoyn application ,  fr );\n\naboutStore - setManufacturer( Company ,  en );\naboutStore - setManufacturer( Empresa ,  es );\naboutStore - setManufacturer( Entreprise ,  fr );\n\naboutStore - setSupportUrl( http://www.allseenalliance.org );  Create the AboutService object  For an application to send AboutData, it requires an instance\nof the AboutService class. AboutService is an implementation\nwrapper around AllJoyn native calls that handle the interactions\nbetween AboutServer and AboutClient.  AboutService* aboutService = NULL;\naboutService = aboutService = new AboutService(msgBus,aboutStore);\naboutService- Register(SERVICES_PORT);\nmsgBus- RegisterBusObject(*aboutService);  Add interfaces to Announcement  std::vector qcc::String  interfaces;\ninterfaces.push_back( org.alljoyn.About );\naboutService- AddObjectDescription( /About , interfaces);  Register AboutService object with BusAttachment  Register the AboutService with the obtained session port.  aboutService- Register(sPort);\nmsgBus- RegisterBusObject(*aboutService);  Add an AboutIconService (optional)  An applicaton that sends AboutData can be extended to\nbroadcast a device icon using an instance of the AboutIconService\nclass. AboutIconService is an implementation wrapper around\nAllJoyn native calls that handle the interactions between\napplications that use the AboutIconClient class.  Provision for the Icon content and URL  An Icon is published directly as a byte array or a reference\nURL, and must be provisioned as follows:  uint8_t aboutIconContent[] = { 0x89, 0x50, 0x4E, 0x47, 0x0D /* Add relevant data here */ };\nqcc::String mimeType( image/png ); /* This should correspond to the content */\nqcc::String url( http://myurl ); /* An alternate access to the Icon */  AddDeviceIcon object and interfaces to Announcement  std::vector qcc::String  interfaces;\ninterfaces.push_back( org.alljoyn.Icon );\naboutService- AddObjectDescription( /About/DeviceIcon , interfaces);  Create and register DeviceIcon object  AboutIconService* aboutIconService = NULL;\naboutIconService = new AboutIconService(msgBus, mimeType, url,\n   aboutIconContent, sizeof(aboutIconContent) / sizeof (*aboutIconContent));\naboutIconService- Register();\nmsgBus- RegisterBusObject(*aboutIconService);  Advertise name  if( status == ER_OK )\n   status = msgBus- AdvertiseName(msgBus- GetUniqueName().c_str(),\n      opts.transports);  Announce name  if( status == ER_OK )\nstatus = aboutService- Announce();  Unregister and delete AboutService, AboutStore, and AboutIconService  When your process is done with the AboutService and no\nlonger wishes to send announcements, unregister the process\nfrom the AllJoyn bus and then delete variables used.  if( aboutService != NULL ) {\n   msgBus- UnregisterBusObject(*aboutService);\n   delete aboutService;\n}\nif( aboutStore != NULL ) {\n   delete aboutStore;\n}\nif( aboutIconService != NULL ) {\n   msgBus- UnregisterBusObject(*aboutIconService);\n   delete aboutIconService;\n}",
            "title": "Implementing an Application that Uses AboutService"
        },
        {
            "location": "/develop/api-guide/about/cpp-legacy/#implementing-an-application-that-uses-aboutclient",
            "text": "To implement an application to receive AboutData, use the\nAboutClient class. By using the AboutClient class, your\napplication is notified when AboutServer instances send\nannouncements.  NOTE: Verify the BusAttachment has been created, started\nand connected before using an AboutClient. See  Setting Up\nthe AllJoyn Framework  for the code\nsnippets. Code in this section references a variable msgBus\n(the BusAttachment variable name).  Setup to receive the Announce signal  In order to receive the Announce signal, implement a class\nthat inherits from the\nAnnounceHandler base class.  Create class to implement AnnounceHandler  This declaration of a class will allow for the signals to be\nreceived. It needs to implement pure virtual function Announce.  class AnnounceHandlerImpl : public ajn::services::AnnounceHandler (){\n   void Announce(unsigned short version, unsigned short port,\n      const char* busName, const ObjectDescriptions  objectDescs,\n         const AboutData  aboutData);\n}  Implement the Announce method that handles the Announce signal  With everything linked up using the AllJoyn framework, the\nmethod registered with the AllJoyn framework will be executed\nupon receipt of an Announce signal.  Because every application is different, as a developer you\nwill need to process the\nAboutData and determine the following:   How in the UI it should be rendered  When to request the data that is not contained in the Announce signal  Any logic that is needed   Register the announceHandler using the AnnouncementRegistrar class  When registering an announcement listener, specify which\ninterfaces the application is interested in. The code below\nshows a listener registered to receive Announce signals that\ninclude an object implementing the INTERFACE_NAME interface.  AnnounceHandlerImpl* announceHandlerImpl = new AnnounceHandlerImpl();\nconst char* interfaces[] = { INTERFACE_NAME };\nAnnouncementRegistrar::RegisterAnnounceHandler(*busAttachment,\n   *announceHandlerImpl, interfaces, 1);  Using Ping to determine presence  The BusAttachment Ping member function can be used to determine\nif a device is responsive. Contents of an Announce signal can\nbe stale so it is recommended to ping the device to see if it\nis still present and responsive before attempting to form a connection.  NOTE: The BusAttachment.Ping method makes a bus call. If  Ping \nis called inside an AllJoyn callback,  BusAttachment.EnableConcurrentCallbacks \nmust be called first.  // when pinging a remote bus wait a max of 5 seconds\n#define PING_WAIT_TIME  5000\nmsgBus- EnableConcurrentCallbacks();\n   QStatus status = msgBus- Ping(busName.c_str(), PING_WAIT_TIME);\n   if( ER_OK == status) {\n   ...\n}  Request non-announced data  If there is a need to request information that is not contained\nin the announcement, perform the following steps.   Join the session   Create a session with the application by using the\n   BusAttachment JoinSession API.  NOTE: The variables name and port are set from the AboutData\n   from the Announce method.  cpp\n   SessionId sessionId;\n      SessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false,\n         SessionOpts::PROXIMITY_ANY, TRANSPORT_ANY);\n      QStatus status = msgBus- JoinSession(name, port, NULL, sessionId, opts);\n      if (status == ER_OK) {\n         QCC_DbgTrace((\"JoinSession SUCCESS (Session id=%d)\", sessionId));\n      } else {\n         QCC_LogError(status, (\"JoinSession failed\"));\n      }   Create AboutClient   Generate an AboutProxyBusObject from the org.alljoyn.About\n   Introspection XML and create an instance passing ButAttachment\n   and sessionId.  cpp\n   AboutProxyBusObject * aboutClient = new AboutProxyBusObject\n      (msgBus, sender_name,\"\\About\", sessionId);\n   aboutClient- GetAboutData(\"\");   Create AboutIconClient   Generate an IconProxyBusObject from the org.alljoyn.Icon\n   Introspection XML and create an instance passing\n   ButAttachment, port, and sessionId.  cpp\n   IconProxyBusObject * aboutIconClient = new IconProxyBusObject\n      (msgBus, sender_name, \"About\\DeviceIcon\", sessionId);\n   aboutIconClient- GetUrl();  Shutdown  Once you are done using the About feature and the AllJoyn\nframework, free the variables used in the application.  NOTE: The AboutClient object must be deleted before the\nBusAttachment object.  delete aboutClient;\ndelete aboutIconClient;\ndelete msgBus;",
            "title": "Implementing an Application that Uses AboutClient"
        },
        {
            "location": "/develop/api-guide/about/cpp/",
            "text": "About API Guide - C++\n\n\n\n\n\nThese APIs were added to AllJoyn\n 14.12 release for using the About Feature in an\nolder release please see: \nLegay C++ About API Guide\n\n\nReference code\n\n\nClasses used to send AboutData\n\n\n\n\n\n\n\n\nClass\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutObj\n\n\nClass that implements the \norg.alljoyn.About\n interface as a \nBusObject\n.\n\n\n\n\n\n\nAboutIconObj\n\n\nClass that implements the \norg.alljoyn.Icon\n interface as a \nBusObject\n.\n\n\n\n\n\n\nAboutDataListener\n\n\nInterface that supplies the MsgArg containing the AboutData fields required for the  \nAnnounce\n signal payload and \nGetAboutData()\n.\n\n\n\n\n\n\nAboutData\n\n\nA default implementation of the \nAboutDataListener\n interface. For most developers this implementation will be sufficient.\n\n\n\n\n\n\nAboutIcon\n\n\nA container class that holds the icon sent by the \nAboutIconObj\n\n\n\n\n\n\n\n\nClasses used to receive AboutData\n\n\n\n\n\n\n\n\nClass\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutProxy\n\n\nClass used to get proxy access to the AboutObj.\n\n\n\n\n\n\nAboutIconProxy\n\n\nClass used to get proxy access to the AboutIconObj.\n\n\n\n\n\n\nAboutListener\n\n\nAbstract base class implemented by AllJoyn users to receive About interface related events\n\n\n\n\n\n\nAboutData\n\n\nA default implementation of the \nAboutDataListener\n interface. This class can be used to read the contents of an \norg.alljoyn.About.Announce\n signal\n\n\n\n\n\n\nAboutObjectDescription\n\n\nA helper class for accessing the fields of the ObjectDescription MsgArg that is sent as part of the \norg.alljoyn.About.Announce\n signal\n\n\n\n\n\n\nBusAttachment\n\n\nUsed to register \nAboutListener\ns and specify interfaces of interest\n\n\n\n\n\n\n\n\nSetting Up an application to send an \nAnnounce\n signal\n\n\nThe following is the high-level process to build an application that will\nbroadcast an \nAnnounce\n signal. Steps marked with a * are unique to\napplications using the About Feature.\n\n\n\n\nCreate a \nBusAttachment\n\n\nStart\n\n\nConnect\n\n\nBind session port\n\n\nOther setup for security etc\n\n\nCreate interfaces\n\n\nCreate \nBusObject\ns for interfaces\n\n\nWhen Adding interfaces to the \nBusObject\n mark it as \nANNOUNCED\n*\n\n\nRegister the \nBusObject\ns with the \nBusAttachment\n\n\nFill in your \nAboutData\n*\n\n\nCreate an \nAboutObj\n*\n\n\nCall \nAboutObj::Announce(sessionPort, aboutData)\n*\n\n\n\n\nSetting Up the AllJoyn Framework to receive an \nAnnounce\n signal\n\n\nThe following is the high-level process to build an application that will\nreceive an \nAnnounce\n signal. Steps marked with a * are unique to applications\nusing the About Feature.\n\n\n\n\nCreate a \nBusAttachment\n\n\nStart\n\n\nConnect\n\n\nOther setup for security etc\n\n\nCreate an \nAboutListener\n*\n\n\nRegister the new \nAboutListener\n*\n\n\ncall \nBusAttachment::WhoImplements\n member function to specify interfaces your\n  application is interested in.*\n\n\n\n\nSample code for sending an \nAnnounce\n signal\n\n\nCreate a \nBusAttachment\n\n\nCreate a new BusAttachment.\n\n\nBusAttachment bus(\nAbout Service Example\n);\n\n\n\n\nStart the BusAttachment and Connect to the routing node.\n\n\nstatus = bus.Start();\nif (ER_OK != status) {\n    printf(\nFAILED to start BusAttachment (%s)\\n\n, QCC_StatusText(status));\n    exit(1);\n}\n\nstatus = bus.Connect();\nif (ER_OK != status) {\n    printf(\nFAILED to connect to router node (%s)\\n\n, QCC_StatusText(status));\n    exit(1);\n}\n\n\n\n\nBind a session port that will be used to communicate. the value for\n\nASSIGNED_SESSION_PORT\n is chosen by the developer.  The value itself is\nunimportant.  What is important is that the session port bound to is part of the\n\nAnnounce\n signal.\n\n\nSessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false, SessionOpts::PROXIMITY_ANY, TRANSPORT_ANY);\nSessionPort sessionPort = ASSIGNED_SESSION_PORT;\nMySessionPortListener sessionPortListener;\nbus.BindSessionPort(sessionPort, opts, sessionPortListener);\nif (ER_OK != status) {\n    printf(\nFailed to BindSessionPort (%s)\n, QCC_StatusText(status));\n}\n\n\n\n\nCreate interfaces\n\n\nThe interface is a collection methods, signals, and properties. The interface\ncan be specified in code or using xml notation.\n\n\nFor this sample the following xml interface was used.\n\n\ninterface name='com.example.about.feature.interface.sample' \n\n  \nmethod name='Echo'\n\n    \narg name='out_arg' type='s' direction='in' /\n\n    \narg name='return_arg' type='s' direction='out' /\n\n  \n/method\n\n\n/interface\n\n\n\n\n\nC++ code showing adding the interface to the BusAttachment using xml. The\n\nINTERFACE_NAME\n is coded to be the string\n\ncom.example.about.feature.interface.sample\n.\n\n\nqcc::String interface = \nnode\n\n                        \ninterface name='\n + qcc::String(INTERFACE_NAME) + \n'\n\n                        \n  \nmethod name='Echo'\n\n                        \n    \narg name='out_arg' type='s' direction='in' /\n\n                        \n    \narg name='return_arg' type='s' direction='out' /\n\n                        \n  \n/method\n\n                        \n/interface\n\n                        \n/node\n;\n\nstatus = bus.CreateInterfacesFromXml(interface.c_str());\nif (ER_OK != status) {\n    printf(\nFailed to parse the xml interface definition (%s)\n, QCC_StatusText(status));\n    exit(1);\n}\n\n\n\n\nAlternative C++ code showing adding the interface with out using xml notation.\n\n\n/* Add org.alljoyn.Bus.method_sample interface */\nInterfaceDescription* intf = NULL;\nstatus = bus.CreateInterface(INTERFACE_NAME, intf);\n\nif (status == ER_OK) {\n    printf(\nInterface created.\\n\n);\n    intf-\nAddMethod(\nEcho\n, \ns\n,  \ns\n, \nout_arg,return_arg\n, 0);\n    intf-\nActivate();\n} else {\n    printf(\nFailed to create interface '%s'.\\n\n, INTERFACE_NAME);\n}\n\n\n\n\nCreate \nBusObject\ns for interfaces\n\n\nSample implementation of a BusObject that announces the interface defined above.\nWhen adding the interface to the BusObject you can specify if that interface is\nannounced by adding the \nANNOUNCED\n value to the \nAddInterface()\n member\nfunction.\n\n\nNOTE:\n The BusObject adds method handlers for methods specified in the\n\ncom.example.about.feature.interface.sample\n interface. If it contained any\nproperties it would also be responsible for add Get/Set handler functions for\nthe properties as well. The code lets the object path be passed in at\nruntime. The path could have also been hard coded into the BusObject.\n\n\nclass MyBusObject : public BusObject {\n  public:\n    MyBusObject(BusAttachment\n bus, const char* path)\n        : BusObject(path) {\n        QStatus status;\n        const InterfaceDescription* iface = bus.GetInterface(INTERFACE_NAME);\n        assert(iface != NULL);\n\n        // Here the value ANNOUNCED tells AllJoyn that this interface\n        // should be announced\n        status = AddInterface(*iface, ANNOUNCED);\n        if (status != ER_OK) {\n            printf(\nFailed to add %s interface to the BusObject\\n\n, INTERFACE_NAME);\n        }\n\n        /* Register the method handlers with the object */\n        const MethodEntry methodEntries[] = {\n            { iface-\nGetMember(\nEcho\n), static_cast\nMessageReceiver::MethodHandler\n(\nMyBusObject::Echo) }\n        };\n        AddMethodHandlers(methodEntries, sizeof(methodEntries) / sizeof(methodEntries[0]));\n    }\n\n    // Respond to remote method call `Echo` by returning the string back to the\n    // sender.\n    void Echo(const InterfaceDescription::Member* member, Message\n msg) {\n        printf(\nEcho method called: %s\n, msg-\nGetArg(0)-\nv_string.str);\n        const MsgArg* arg((msg-\nGetArg(0)));\n        QStatus status = MethodReply(msg, arg, 1);\n        if (status != ER_OK) {\n            printf(\nFailed to created MethodReply.\\n\n);\n        }\n    }\n};\n\n\n\n\nRegister the \nBusObjects\n with the \nBusAttachment\n\n\nMyBusObject busObject(bus, \n/example/path\n);\nstatus = bus.RegisterBusObject(busObject);\nif (ER_OK != status) {\n    printf(\nFailed to register BusObject (%s)\n, QCC_StatusText(status));\n    exit(1);\n}\n\n\n\n\nAboutData fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nAnnounced\n\n\nLocalized\n\n\nSignature\n\n\n\n\n\n\n\n\n\n\nAppId\n\n\nyes\n\n\nyes\n\n\nno\n\n\nay\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nDeviceName\n\n\nno\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceId\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nAppName\n\n\nyes\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nManufacturer\n\n\nyes\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nModelNumber\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nSupportedLanguages\n\n\nyes\n\n\nno\n\n\nno\n\n\nas\n\n\n\n\n\n\nDescription\n\n\nyes\n\n\nno\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDateofManufacture\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSoftwareVersion\n\n\nyes\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nAJSoftwareVersion\n\n\nyes\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nHardwareVersion\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSupportUrl\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\n\n\nFields marked as Announced are part of the \nAnnounce\n signal.  If a value is not\nannounced then you must use the \norg.alljoyn.About.GetAboutData\n method to\naccess those values.\n\n\nFields marked as Required must all be supplied to send an \nAnnounce\n signal.\nThey are required even if the value is not part of the \nAnnounce\n signal.\n\n\nFields marked as Localized should supply localization values for every language\nlisted in the \nSupportedLanguages\n\n\nAppId\n is a 128-bit UUID (16-bytes) as specified in RFC 4122.\n\n\nFill in your \nAboutData\n\n\nThe \nAboutData\n is an instance of the \nAboutDataListener\n interface. For most\ndevelopers, the \nAboutData\n will provide the \nAboutDataListener\n dictionary of\nkey/value pairs (\na{sv}\n). This is needed to send an `Announce signal.\n\n\n// Setup the about data\n// The default language is specified in the constructor. If the default language\n// is not specified any Field that should be localized will return an error\nAboutData aboutData(\nen\n);\n//AppId is a 128bit uuid\nuint8_t appId[] = { 0x01, 0xB3, 0xBA, 0x14,\n                    0x1E, 0x82, 0x11, 0xE4,\n                    0x86, 0x51, 0xD1, 0x56,\n                    0x1D, 0x5D, 0x46, 0xB0 };\naboutData.SetAppId(appId, 16);\naboutData.SetDeviceName(\nMy Device Name\n);\n//DeviceId is a string encoded 128bit UUIDf\naboutData.SetDeviceId(\n93c06771-c725-48c2-b1ff-6a2a59d445b8\n);\naboutData.SetAppName(\nApplication\n);\naboutData.SetManufacturer(\nManufacturer\n);\naboutData.SetModelNumber(\n123456\n);\naboutData.SetDescription(\nA poetic description of this application\n);\naboutData.SetDateOfManufacture(\n2014-03-24\n);\naboutData.SetSoftwareVersion(\n0.1.2\n);\naboutData.SetHardwareVersion(\n0.0.1\n);\naboutData.SetSupportUrl(\nhttp://www.example.org\n);\n\n\n\n\nLocalized values like \nDeviceName\n, \nAppName\n, etc are automatically set to the\ndefault language specified in the constructor unless a different language tag\nis passed in when setting the values.  For example,  to add the Spanish language\nto the \nAboutData\n the following would be done. All strings must be UTF-8\nencoded.\n\n\naboutData.SetDeviceName(\nMi dispositivo Nombre\n, \nes\n);\naboutData.SetAppName(\naplicaci\u00f3n\n, \nes\n);\naboutData.SetManufacturer(\nfabricante\n, \nes\n);\naboutData.SetDescription(\nUna descripci\u00f3n po\u00e9tica de esta aplicaci\u00f3n\n, \nes\n);\n\n\n\n\nAny new language specified, including the default language, is automatically\nadded to the \nSupportedLanguages\n by the \nAboutData\n implementation.\n\n\nThe \nAJSoftwareVersion\n is also automatically filled in by the \nAboutData\n\nimplementation.\n\n\nCreate an \nAboutObj\n and \nAnnounce\n\n\nAboutObj aboutObj(bus);\nstatus = aboutObj.Announce(sessionPort, aboutData);\nif (ER_OK != status) {\n    printf(\nAboutObj Announce failed (%s)\\n\n, QCC_StatusText(status));\n    exit(1);\n}\n\n\n\n\nThe ObjectDesciprition part of the announced signal is found automatically by\nintrospectin the the \nBusObjects\n that were registered with the \nBusAttachment\n.\n\n\nAny time a new interface is added or the AboutData is changed the \nAnnounce\n\nmember function should be called again.\n\n\nSample code for receiving an \nAnnounce\n signal\n\n\nCode that receives an \nAnnounce\n signal will need to create, start, and connect\na \nBusAttachment\n the same as the code that sent the \nAnnounce\n signal. The\napplication that receives the \nAnnounce\n signal does not need to bind a session\nport. See \ncreate a \nBusAttachment\n\n\ncreate an \nAboutListener\n\n\nThe AboutListener interface is responsible for responding to \nAnnounce\n signals.\n\n\nclass MyAboutListener : public AboutListener {\n    void Announced(const char* busName, uint16_t version, SessionPort port,\n                   const MsgArg\n objectDescriptionArg, const MsgArg\n aboutDataArg) {\n        // Place code here to handle Announce signal.\n    }\n};\n\n\n\n\nThe \nAboutListener\n is called by the AllJoyn routing node when an \nAnnounce\n\nsignal is found.  The \nAnnounced\n call back contains all the information\ncontained in the received \nAnnounce\n signal as well as the unique BusName of the\n\nBusAttachment\n that emitted the \nAnnounce\n signal. This information can be used\nto form a session with the remote device; and Make a \nProxyBus\n object based on\nthe interfaces reported in the \nobjectDescriptionArg\n.\n\n\nRegister the new \nAboutListener\n and call \nWhoImplements\n\n\nMyAboutListener aboutListener;\nbus.RegisterAboutListener(aboutListener);\n\nconst char* interfaces[] = { INTERFACE_NAME };\nstatus = bus.WhoImplements(interfaces, sizeof(interfaces) / sizeof(interfaces[0]));\nif (ER_OK != status) {\n    printf(\nWhoImplements call FAILED with status %s\\n\n, QCC_StatusText(status));\n    exit(1);\n}\n\n\n\n\nAlthough it is possible to register multiple \nAboutListener\ns it is unlikely\nthat a program will need more than one \nAboutListener\n.\n\n\nThe \nWhoImplements\n member function\n\n\nThe \nWhoImplements\n member function is used to declare your interest in one or\nmore specific interfaces. If a remote device is announcing the interface(s)\nthen all Registered \nAboutListeners\n will be called.\n\n\nFor example, if you need both \ncom.example.Audio\n \nand\n\n\ncom.example.Video\n interfaces then do the following.\n\n\nRegisterAboutListener once:\n\n\nconst char* interfaces[] = {\ncom.example.Audio\n, \ncom.example.Video\n};\nRegisterAboutListener(aboutListener);\nWhoImplements(interfaces, sizeof(interfaces) / sizeof(interfaces[0]));\n\n\n\n\nIf the AboutListener should be called if \ncom.example.Audio\n \nor\n\n\ncom.example.Video\n interfaces are found then call \nWhoImplements\n multiple\ntimes:\n\n\nRegisterAboutListener(aboutListener);\nconst char* audioInterface[] = {\ncom.example.Audio\n};\nWhoImplements(audioInterface, sizeof(audioInterface) / sizeof(audioInterface[0]));\nconst char* videoInterface[] = {\ncom.example.Video\n};\nWhoImplements(videoInterface, sizeof(videoInterface) / sizeof(videoInterface[0]));\n\n\n\n\nThe interface name may be a prefix followed by a \n*\n.  Using this, the example\nwhere we are interested in \ncom.example.Audio\n \nor\n \ncom.example.Video\n\ninterfaces could be written as:\n\n\nconst char* exampleInterface[] = {\ncom.example.*\n};\nRegisterAboutListener(aboutListener);\nWhoImplements(exampleInterface, sizeof(exampleInterface) / sizeof(exampleInterface[0]));\n\n\n\n\nThe AboutListener will receive any announcement that implements an interface\nbeginning with the \ncom.example.\n name.\n\n\nIt is the AboutListeners responsibility to parse through the reported interfaces\nto figure out what should be done in response to the \nAnnounce\n signal.\n\n\nCalls to WhoImplements is ref counted. If WhoImplements is called with the same\nlist of interfaces multiple times then CancelWhoImplements must also be called\nmultiple times with the same list of interfaces.\n\n\nSpecifying NULL for the \nimplementsInterfaces\n parameter is allowed, however, it\ncould have significant impact on network performance and should be avoided\nunless all announcements are needed.\n\n\nAdd an AboutIcon (optional)\n\n\nAn application that sends an \nAnnounce\n signal  can be extended to broadcast a\ndevice icon using an instance of the \nAboutIconObj\n class.\n\n\nProvision for the Icon content and URL\n\n\nAn Icon is published directly as a byte array or a reference URL, and is\nprovisioned as follows:\n\n\nCreate an icon using a byte array.  An Icon size of 72 pixels x 72 pixels is\nrecommended.\n\n\nuint8_t aboutIconContent[] = { 0x89, 0x50, 0x4E, 0x47, 0x0D /* Add relevant data here */ };\nAboutIcon icon;\nstatus = icon.SetContent(\nimage/png\n, aboutIconContent, sizeof(aboutIconContent) / sizeof(aboutIconContent[0]));\n\n\n\n\nCreate an icon using a URL.\n\n\nAboutIcon icon;\nstatus = icon.SetUrl(\nimage/png\n, \nhttp://www.example.com\n);\n\n\n\n\nAs long as the MimeType of the Url and the icon content are the same. Both the\nUrl and icon content can be set.\n\n\nAboutIconObj\n\n\nThe \nAboutIconObj\n will create and register a \nBusObject\n to handle remote\nmethod calls made on the \norg.alljoyn.Icon\n interface.  The AboutIconObj is\nannounced by default.  Applications interested in the \norg.alljoyn.Icon\n\ninterface can call WhoImplements(\norg.alljoyn.Icon\n) to find applications\nthat broadcast device icon information.\n\n\nAnnounce the \norg.alljoyn.Icon\n interface:\n\n\nAboutIconObj aboutIconObj(bus, icon);\naboutObj.Announce(port, aboutData);\n\n\n\n\nDiscover the \norg.alljoyn.Icon interface\n\n\nbus.WhoImplements(org::alljoyn::Icon::InterfaceName);\n\n\n\n\nUsing Ping to determine presence\n\n\nThe \nBusAttachment\n \nPing\n member function can be used to determine\nif a device is responsive. Contents of an Announce signal can\nbe stale so it is recommended to ping the device to see if it\nis still present and responsive before attempting to form a connection.\n\n\nNOTE:\n The \nBusAttachment::Ping\n member function makes a bus call. If \nPing\n\nis called inside an AllJoyn callback, \nBusAttachment::EnableConcurrentCallbacks\n\nmust be called first.\n\n\n// when pinging a remote bus wait a max of 5 seconds\n#define PING_WAIT_TIME  5000\nbus.EnableConcurrentCallbacks();\nQStatus status = bus.Ping(busName.c_str(), PING_WAIT_TIME);\nif( ER_OK == status) {\n   ...\n}\n\n\n\n\nRequest non-announced data\n\n\nIf there is a need to request information that is not contained in the\nannouncement, perform the following steps.\n\n\n\n\nJoin the session\n\n\n\n\nCreate a session with the application by calling \nBusAttachment::JoinSession\n.\n\n\nNOTE:\n The variables name and port are obtained from the\n   AboutListener::Announced member function.\n\n\ncpp\n   SessionId sessionId;\n   SessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false,\n                    SessionOpts::PROXIMITY_ANY, TRANSPORT_ANY);\n   QStatus status = bus.JoinSession(name, port, NULL, sessionId, opts);\n   if (status == ER_OK) {\n      printf(\"JoinSession SUCCESS (Session id=%d)\", sessionId);\n   } else {\n      printf(\"JoinSession failed\");\n   }\n\n\n\n\nCreate an \nAboutProxy\n\n\n\n\nGenerate an About ProxyBusObject by passing the local \nBusAttachment\n, the\n   name of the remote \nBusAttachment\n, and the \nSessionId\n obtained from the\n   \nBusAttachment::JoinSession\n call.\n\n\ncpp\n   AboutProxy aboutProxy(bus, busName, sessionId);\n   MsgArg arg;\n   status = aboutProxy.GetAboutData(\"\", arg);\n   if(ER_OK != status) {\n       //handle error\n   }\n\n\n\n\nCreate \nAboutIconProxy\n (optional)\n\n\n\n\nGenerate an Icon ProxyBusObject by passing the local \nBusAttachment\n, the\n   name of the remote \nBusAttachment\n, and the \nSessionId\n obtained from the\n   \nBusAttachment::JoinSession\n call.\n\n\n```cpp\n   AboutIconProxy aiProxy(bus, busName, sessionId);\n\n\nAboutIcon retIcon;\n   status = aiProxy.GetIcon(retIcon);\n   if(ER_OK != status) {\n       //handle error\n   }\n   // Get the Url\n   retIcon.url\n   // Get the content size\n   retIcon.contentSize\n   // Get a pointer to the icon content\n   retIcon.content\n   // Get the MimeType\n   retIcon.mimetype\n   \n``\n\n!--QUESTION FOR GEORGE: Need to resolve TODOs--\n\n\n!--TODO add section on adding user defined values to AboutData --\n\n\n!--TODO add section on Creating child AboutData implementation --\n\n\n!--TODO add section on Making an AboutDataListener from legacy PropertyStore --\n\n\n!--TODO add section on run time adding and removing BusObjects using\nBusObject::SetAnnouceFlag` --",
            "title": "Cpp"
        },
        {
            "location": "/develop/api-guide/about/cpp/#about-api-guide-c",
            "text": "These APIs were added to AllJoyn  14.12 release for using the About Feature in an\nolder release please see:  Legay C++ About API Guide",
            "title": "About API Guide - C++"
        },
        {
            "location": "/develop/api-guide/about/cpp/#reference-code",
            "text": "Classes used to send AboutData     Class  Description      AboutObj  Class that implements the  org.alljoyn.About  interface as a  BusObject .    AboutIconObj  Class that implements the  org.alljoyn.Icon  interface as a  BusObject .    AboutDataListener  Interface that supplies the MsgArg containing the AboutData fields required for the   Announce  signal payload and  GetAboutData() .    AboutData  A default implementation of the  AboutDataListener  interface. For most developers this implementation will be sufficient.    AboutIcon  A container class that holds the icon sent by the  AboutIconObj     Classes used to receive AboutData     Class  Description      AboutProxy  Class used to get proxy access to the AboutObj.    AboutIconProxy  Class used to get proxy access to the AboutIconObj.    AboutListener  Abstract base class implemented by AllJoyn users to receive About interface related events    AboutData  A default implementation of the  AboutDataListener  interface. This class can be used to read the contents of an  org.alljoyn.About.Announce  signal    AboutObjectDescription  A helper class for accessing the fields of the ObjectDescription MsgArg that is sent as part of the  org.alljoyn.About.Announce  signal    BusAttachment  Used to register  AboutListener s and specify interfaces of interest",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/about/cpp/#setting-up-an-application-to-send-an-announce-signal",
            "text": "The following is the high-level process to build an application that will\nbroadcast an  Announce  signal. Steps marked with a * are unique to\napplications using the About Feature.   Create a  BusAttachment  Start  Connect  Bind session port  Other setup for security etc  Create interfaces  Create  BusObject s for interfaces  When Adding interfaces to the  BusObject  mark it as  ANNOUNCED *  Register the  BusObject s with the  BusAttachment  Fill in your  AboutData *  Create an  AboutObj *  Call  AboutObj::Announce(sessionPort, aboutData) *",
            "title": "Setting Up an application to send an Announce signal"
        },
        {
            "location": "/develop/api-guide/about/cpp/#setting-up-the-alljoyn-framework-to-receive-an-announce-signal",
            "text": "The following is the high-level process to build an application that will\nreceive an  Announce  signal. Steps marked with a * are unique to applications\nusing the About Feature.   Create a  BusAttachment  Start  Connect  Other setup for security etc  Create an  AboutListener *  Register the new  AboutListener *  call  BusAttachment::WhoImplements  member function to specify interfaces your\n  application is interested in.*",
            "title": "Setting Up the AllJoyn Framework to receive an Announce signal"
        },
        {
            "location": "/develop/api-guide/about/cpp/#sample-code-for-sending-an-announce-signal",
            "text": "Create a  BusAttachment  Create a new BusAttachment.  BusAttachment bus( About Service Example );  Start the BusAttachment and Connect to the routing node.  status = bus.Start();\nif (ER_OK != status) {\n    printf( FAILED to start BusAttachment (%s)\\n , QCC_StatusText(status));\n    exit(1);\n}\n\nstatus = bus.Connect();\nif (ER_OK != status) {\n    printf( FAILED to connect to router node (%s)\\n , QCC_StatusText(status));\n    exit(1);\n}  Bind a session port that will be used to communicate. the value for ASSIGNED_SESSION_PORT  is chosen by the developer.  The value itself is\nunimportant.  What is important is that the session port bound to is part of the Announce  signal.  SessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false, SessionOpts::PROXIMITY_ANY, TRANSPORT_ANY);\nSessionPort sessionPort = ASSIGNED_SESSION_PORT;\nMySessionPortListener sessionPortListener;\nbus.BindSessionPort(sessionPort, opts, sessionPortListener);\nif (ER_OK != status) {\n    printf( Failed to BindSessionPort (%s) , QCC_StatusText(status));\n}  Create interfaces  The interface is a collection methods, signals, and properties. The interface\ncan be specified in code or using xml notation.  For this sample the following xml interface was used.  interface name='com.example.about.feature.interface.sample'  \n   method name='Echo' \n     arg name='out_arg' type='s' direction='in' / \n     arg name='return_arg' type='s' direction='out' / \n   /method  /interface   C++ code showing adding the interface to the BusAttachment using xml. The INTERFACE_NAME  is coded to be the string com.example.about.feature.interface.sample .  qcc::String interface =  node \n                         interface name='  + qcc::String(INTERFACE_NAME) +  ' \n                            method name='Echo' \n                              arg name='out_arg' type='s' direction='in' / \n                              arg name='return_arg' type='s' direction='out' / \n                            /method \n                         /interface \n                         /node ;\n\nstatus = bus.CreateInterfacesFromXml(interface.c_str());\nif (ER_OK != status) {\n    printf( Failed to parse the xml interface definition (%s) , QCC_StatusText(status));\n    exit(1);\n}  Alternative C++ code showing adding the interface with out using xml notation.  /* Add org.alljoyn.Bus.method_sample interface */\nInterfaceDescription* intf = NULL;\nstatus = bus.CreateInterface(INTERFACE_NAME, intf);\n\nif (status == ER_OK) {\n    printf( Interface created.\\n );\n    intf- AddMethod( Echo ,  s ,   s ,  out_arg,return_arg , 0);\n    intf- Activate();\n} else {\n    printf( Failed to create interface '%s'.\\n , INTERFACE_NAME);\n}  Create  BusObject s for interfaces  Sample implementation of a BusObject that announces the interface defined above.\nWhen adding the interface to the BusObject you can specify if that interface is\nannounced by adding the  ANNOUNCED  value to the  AddInterface()  member\nfunction.  NOTE:  The BusObject adds method handlers for methods specified in the com.example.about.feature.interface.sample  interface. If it contained any\nproperties it would also be responsible for add Get/Set handler functions for\nthe properties as well. The code lets the object path be passed in at\nruntime. The path could have also been hard coded into the BusObject.  class MyBusObject : public BusObject {\n  public:\n    MyBusObject(BusAttachment  bus, const char* path)\n        : BusObject(path) {\n        QStatus status;\n        const InterfaceDescription* iface = bus.GetInterface(INTERFACE_NAME);\n        assert(iface != NULL);\n\n        // Here the value ANNOUNCED tells AllJoyn that this interface\n        // should be announced\n        status = AddInterface(*iface, ANNOUNCED);\n        if (status != ER_OK) {\n            printf( Failed to add %s interface to the BusObject\\n , INTERFACE_NAME);\n        }\n\n        /* Register the method handlers with the object */\n        const MethodEntry methodEntries[] = {\n            { iface- GetMember( Echo ), static_cast MessageReceiver::MethodHandler ( MyBusObject::Echo) }\n        };\n        AddMethodHandlers(methodEntries, sizeof(methodEntries) / sizeof(methodEntries[0]));\n    }\n\n    // Respond to remote method call `Echo` by returning the string back to the\n    // sender.\n    void Echo(const InterfaceDescription::Member* member, Message  msg) {\n        printf( Echo method called: %s , msg- GetArg(0)- v_string.str);\n        const MsgArg* arg((msg- GetArg(0)));\n        QStatus status = MethodReply(msg, arg, 1);\n        if (status != ER_OK) {\n            printf( Failed to created MethodReply.\\n );\n        }\n    }\n};  Register the  BusObjects  with the  BusAttachment  MyBusObject busObject(bus,  /example/path );\nstatus = bus.RegisterBusObject(busObject);\nif (ER_OK != status) {\n    printf( Failed to register BusObject (%s) , QCC_StatusText(status));\n    exit(1);\n}  AboutData fields     Field name  Required  Announced  Localized  Signature      AppId  yes  yes  no  ay    DefaultLanguage  yes  yes  no  s    DeviceName  no  yes  yes  s    DeviceId  yes  yes  no  s    AppName  yes  yes  yes  s    Manufacturer  yes  yes  yes  s    ModelNumber  yes  yes  no  s    SupportedLanguages  yes  no  no  as    Description  yes  no  yes  s    DateofManufacture  no  no  no  s    SoftwareVersion  yes  no  no  s    AJSoftwareVersion  yes  no  no  s    HardwareVersion  no  no  no  s    SupportUrl  no  no  no  s     Fields marked as Announced are part of the  Announce  signal.  If a value is not\nannounced then you must use the  org.alljoyn.About.GetAboutData  method to\naccess those values.  Fields marked as Required must all be supplied to send an  Announce  signal.\nThey are required even if the value is not part of the  Announce  signal.  Fields marked as Localized should supply localization values for every language\nlisted in the  SupportedLanguages  AppId  is a 128-bit UUID (16-bytes) as specified in RFC 4122.  Fill in your  AboutData  The  AboutData  is an instance of the  AboutDataListener  interface. For most\ndevelopers, the  AboutData  will provide the  AboutDataListener  dictionary of\nkey/value pairs ( a{sv} ). This is needed to send an `Announce signal.  // Setup the about data\n// The default language is specified in the constructor. If the default language\n// is not specified any Field that should be localized will return an error\nAboutData aboutData( en );\n//AppId is a 128bit uuid\nuint8_t appId[] = { 0x01, 0xB3, 0xBA, 0x14,\n                    0x1E, 0x82, 0x11, 0xE4,\n                    0x86, 0x51, 0xD1, 0x56,\n                    0x1D, 0x5D, 0x46, 0xB0 };\naboutData.SetAppId(appId, 16);\naboutData.SetDeviceName( My Device Name );\n//DeviceId is a string encoded 128bit UUIDf\naboutData.SetDeviceId( 93c06771-c725-48c2-b1ff-6a2a59d445b8 );\naboutData.SetAppName( Application );\naboutData.SetManufacturer( Manufacturer );\naboutData.SetModelNumber( 123456 );\naboutData.SetDescription( A poetic description of this application );\naboutData.SetDateOfManufacture( 2014-03-24 );\naboutData.SetSoftwareVersion( 0.1.2 );\naboutData.SetHardwareVersion( 0.0.1 );\naboutData.SetSupportUrl( http://www.example.org );  Localized values like  DeviceName ,  AppName , etc are automatically set to the\ndefault language specified in the constructor unless a different language tag\nis passed in when setting the values.  For example,  to add the Spanish language\nto the  AboutData  the following would be done. All strings must be UTF-8\nencoded.  aboutData.SetDeviceName( Mi dispositivo Nombre ,  es );\naboutData.SetAppName( aplicaci\u00f3n ,  es );\naboutData.SetManufacturer( fabricante ,  es );\naboutData.SetDescription( Una descripci\u00f3n po\u00e9tica de esta aplicaci\u00f3n ,  es );  Any new language specified, including the default language, is automatically\nadded to the  SupportedLanguages  by the  AboutData  implementation.  The  AJSoftwareVersion  is also automatically filled in by the  AboutData \nimplementation.  Create an  AboutObj  and  Announce  AboutObj aboutObj(bus);\nstatus = aboutObj.Announce(sessionPort, aboutData);\nif (ER_OK != status) {\n    printf( AboutObj Announce failed (%s)\\n , QCC_StatusText(status));\n    exit(1);\n}  The ObjectDesciprition part of the announced signal is found automatically by\nintrospectin the the  BusObjects  that were registered with the  BusAttachment .  Any time a new interface is added or the AboutData is changed the  Announce \nmember function should be called again.",
            "title": "Sample code for sending an Announce signal"
        },
        {
            "location": "/develop/api-guide/about/cpp/#sample-code-for-receiving-an-announce-signal",
            "text": "Code that receives an  Announce  signal will need to create, start, and connect\na  BusAttachment  the same as the code that sent the  Announce  signal. The\napplication that receives the  Announce  signal does not need to bind a session\nport. See  create a  BusAttachment  create an  AboutListener  The AboutListener interface is responsible for responding to  Announce  signals.  class MyAboutListener : public AboutListener {\n    void Announced(const char* busName, uint16_t version, SessionPort port,\n                   const MsgArg  objectDescriptionArg, const MsgArg  aboutDataArg) {\n        // Place code here to handle Announce signal.\n    }\n};  The  AboutListener  is called by the AllJoyn routing node when an  Announce \nsignal is found.  The  Announced  call back contains all the information\ncontained in the received  Announce  signal as well as the unique BusName of the BusAttachment  that emitted the  Announce  signal. This information can be used\nto form a session with the remote device; and Make a  ProxyBus  object based on\nthe interfaces reported in the  objectDescriptionArg .  Register the new  AboutListener  and call  WhoImplements  MyAboutListener aboutListener;\nbus.RegisterAboutListener(aboutListener);\n\nconst char* interfaces[] = { INTERFACE_NAME };\nstatus = bus.WhoImplements(interfaces, sizeof(interfaces) / sizeof(interfaces[0]));\nif (ER_OK != status) {\n    printf( WhoImplements call FAILED with status %s\\n , QCC_StatusText(status));\n    exit(1);\n}  Although it is possible to register multiple  AboutListener s it is unlikely\nthat a program will need more than one  AboutListener .  The  WhoImplements  member function  The  WhoImplements  member function is used to declare your interest in one or\nmore specific interfaces. If a remote device is announcing the interface(s)\nthen all Registered  AboutListeners  will be called.  For example, if you need both  com.example.Audio   and  com.example.Video  interfaces then do the following.  RegisterAboutListener once:  const char* interfaces[] = { com.example.Audio ,  com.example.Video };\nRegisterAboutListener(aboutListener);\nWhoImplements(interfaces, sizeof(interfaces) / sizeof(interfaces[0]));  If the AboutListener should be called if  com.example.Audio   or  com.example.Video  interfaces are found then call  WhoImplements  multiple\ntimes:  RegisterAboutListener(aboutListener);\nconst char* audioInterface[] = { com.example.Audio };\nWhoImplements(audioInterface, sizeof(audioInterface) / sizeof(audioInterface[0]));\nconst char* videoInterface[] = { com.example.Video };\nWhoImplements(videoInterface, sizeof(videoInterface) / sizeof(videoInterface[0]));  The interface name may be a prefix followed by a  * .  Using this, the example\nwhere we are interested in  com.example.Audio   or   com.example.Video \ninterfaces could be written as:  const char* exampleInterface[] = { com.example.* };\nRegisterAboutListener(aboutListener);\nWhoImplements(exampleInterface, sizeof(exampleInterface) / sizeof(exampleInterface[0]));  The AboutListener will receive any announcement that implements an interface\nbeginning with the  com.example.  name.  It is the AboutListeners responsibility to parse through the reported interfaces\nto figure out what should be done in response to the  Announce  signal.  Calls to WhoImplements is ref counted. If WhoImplements is called with the same\nlist of interfaces multiple times then CancelWhoImplements must also be called\nmultiple times with the same list of interfaces.  Specifying NULL for the  implementsInterfaces  parameter is allowed, however, it\ncould have significant impact on network performance and should be avoided\nunless all announcements are needed.  Add an AboutIcon (optional)  An application that sends an  Announce  signal  can be extended to broadcast a\ndevice icon using an instance of the  AboutIconObj  class.  Provision for the Icon content and URL  An Icon is published directly as a byte array or a reference URL, and is\nprovisioned as follows:  Create an icon using a byte array.  An Icon size of 72 pixels x 72 pixels is\nrecommended.  uint8_t aboutIconContent[] = { 0x89, 0x50, 0x4E, 0x47, 0x0D /* Add relevant data here */ };\nAboutIcon icon;\nstatus = icon.SetContent( image/png , aboutIconContent, sizeof(aboutIconContent) / sizeof(aboutIconContent[0]));  Create an icon using a URL.  AboutIcon icon;\nstatus = icon.SetUrl( image/png ,  http://www.example.com );  As long as the MimeType of the Url and the icon content are the same. Both the\nUrl and icon content can be set.  AboutIconObj  The  AboutIconObj  will create and register a  BusObject  to handle remote\nmethod calls made on the  org.alljoyn.Icon  interface.  The AboutIconObj is\nannounced by default.  Applications interested in the  org.alljoyn.Icon \ninterface can call WhoImplements( org.alljoyn.Icon ) to find applications\nthat broadcast device icon information.  Announce the  org.alljoyn.Icon  interface:  AboutIconObj aboutIconObj(bus, icon);\naboutObj.Announce(port, aboutData);  Discover the  org.alljoyn.Icon interface  bus.WhoImplements(org::alljoyn::Icon::InterfaceName);  Using Ping to determine presence  The  BusAttachment   Ping  member function can be used to determine\nif a device is responsive. Contents of an Announce signal can\nbe stale so it is recommended to ping the device to see if it\nis still present and responsive before attempting to form a connection.  NOTE:  The  BusAttachment::Ping  member function makes a bus call. If  Ping \nis called inside an AllJoyn callback,  BusAttachment::EnableConcurrentCallbacks \nmust be called first.  // when pinging a remote bus wait a max of 5 seconds\n#define PING_WAIT_TIME  5000\nbus.EnableConcurrentCallbacks();\nQStatus status = bus.Ping(busName.c_str(), PING_WAIT_TIME);\nif( ER_OK == status) {\n   ...\n}  Request non-announced data  If there is a need to request information that is not contained in the\nannouncement, perform the following steps.   Join the session   Create a session with the application by calling  BusAttachment::JoinSession .  NOTE:  The variables name and port are obtained from the\n   AboutListener::Announced member function.  cpp\n   SessionId sessionId;\n   SessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false,\n                    SessionOpts::PROXIMITY_ANY, TRANSPORT_ANY);\n   QStatus status = bus.JoinSession(name, port, NULL, sessionId, opts);\n   if (status == ER_OK) {\n      printf(\"JoinSession SUCCESS (Session id=%d)\", sessionId);\n   } else {\n      printf(\"JoinSession failed\");\n   }   Create an  AboutProxy   Generate an About ProxyBusObject by passing the local  BusAttachment , the\n   name of the remote  BusAttachment , and the  SessionId  obtained from the\n    BusAttachment::JoinSession  call.  cpp\n   AboutProxy aboutProxy(bus, busName, sessionId);\n   MsgArg arg;\n   status = aboutProxy.GetAboutData(\"\", arg);\n   if(ER_OK != status) {\n       //handle error\n   }   Create  AboutIconProxy  (optional)   Generate an Icon ProxyBusObject by passing the local  BusAttachment , the\n   name of the remote  BusAttachment , and the  SessionId  obtained from the\n    BusAttachment::JoinSession  call.  ```cpp\n   AboutIconProxy aiProxy(bus, busName, sessionId);  AboutIcon retIcon;\n   status = aiProxy.GetIcon(retIcon);\n   if(ER_OK != status) {\n       //handle error\n   }\n   // Get the Url\n   retIcon.url\n   // Get the content size\n   retIcon.contentSize\n   // Get a pointer to the icon content\n   retIcon.content\n   // Get the MimeType\n   retIcon.mimetype\n    `` !--QUESTION FOR GEORGE: Need to resolve TODOs--  !--TODO add section on adding user defined values to AboutData --  !--TODO add section on Creating child AboutData implementation --  !--TODO add section on Making an AboutDataListener from legacy PropertyStore --  !--TODO add section on run time adding and removing BusObjects using BusObject::SetAnnouceFlag` --",
            "title": "Sample code for receiving an Announce signal"
        },
        {
            "location": "/develop/api-guide/about/",
            "text": "About API Guide\n\n\nThe About Feature was fully integrated with the core code for the AllJoyn\n 14.12\nrelease. Many of the API names were changed to fit more closely with naming used\nin the core code. The About Feature no longer needs a separate library.  The\nAbout Feature can access more information. Making it possible to fill in some\nfields for the developer. If your application is still using the older APIs the\nlegacy API guides can be used as reference.\n\n\n\n\nJava\n\n\nC++\n\n\nObjective-C\n\n\nC (Thin Core)\n\n\n\n\nLegacy API Guides\n\n\n \nJava\n\n\n \nC++\n\n\nCommon Best Practices\n\n\nHandling BusListener::BusDisconnected\n\n\nIf you are writing an app intended for a platform that is\nrunning a standalone router (such as OpenWRT or Linux),\nit is recommended to register a Bus Listener and implement\n\nBusListener::BusDisconnected\n to support scenarios when the\nconnection between the AllJoyn\n app and the AllJoyn router is lost.\n\n\nThis can happen in the following scenarios:\n\n\n\n\nThe standalone router is restarted (manually or otherwise)\n\n\nThe Onboarding service framework forces a restart of the\n  standalone router after onboarding a device.\n\n\n\n\nAfter \nBusListener::BusDisconnected\n is invoked:\n\n Clear now-obsolete application data such as session IDs.\n\n Shut down any service frameworks being used.\n\n Create a new bus attachment.\n\n Periodically invoke \nBusAttachment::Connect\n until it returns successfully.\n\n\nAfter the AllJoyn router restarts and the new bus attachment is\nreconnected, any sessions the old bus attachment was previously\na part of must be re-established to resume proper function.\nLikewise, any service frameworks must be restarted using the\nreconnected bus attachment.\n\n\nThe process is summarized below:\n1. Verify the \nBusListener\n implements \nBusListener::BusDisconnected\n.\n2. When \nBusListener::BusDisconnected\n is invoked, make sure to:\n  1. Clear any now-obsolete application data, such as session IDs.\n  2. Shut down any service frameworks being used.\n  3. Create a new bus attachment.\n  4. Continually try to reconnect the bus attachment.\n  5. Once reconnected:\n    1. Set listeners.\n    2. Bind session ports as needed.\n    3. Restart service frameworks.\n    4. Connect to any pre-established sessions as needed.\n\n\nBest Practices (across all services)\n\n\nWhen to call the AboutService Announce() method\n\n\nWhen using the About feature, the \nAnnounce()\n method should\nbe invoked once all AllJoyn interfaces have been registered\nand whenever the data structure changes. A few scenarios\nfor calling the \nAnnounce()\n method follow:\n\n\n\n\nSome embedded devices have certain functionality enabled\nthrough the device's Settings options. After any change to\nactivate the AllJoyn interfaces, the \nAnnounce()\n method should\nbe called again.\n\n\nSome embedded devices support configuring a name or other\nvalues that a user will enter. Each time there is a change,\na call to \nAnnounce()\n should be made.\n\n\n\n\nHow the AboutProxy receives information\n\n\nThe \nBusAttachment::RegisterAboutListener\nregisters for an AllJoyn Signal and\ndoes not need to poll, creating and then registering the \nAboutListener\n\nthen calling the \nBusAttachment::WhoImplements\n method indicating the interfaces\nthe client is interested in is all that is required. The \nAboutListener\n object\nshould exist the lifetime of the application in order to receive up to date\ninformation. Once an announce signal is received by the\n\nAboutListener::Announced\n  callback an \nAboutProxy\n object can be created to\ninteract with the remote \nAboutObj\n.\n\n\nFor more information on \nAboutListener\n, refer to the About API Guide\nlisted at the top of the page for the platform you are targeting.\n\n\nGenerating a unique AppId/unique ID\n\n\nThe About feature has a mandatory \nAppId\n field that requires a unique\nvalue be set per the application using.\n\n\nThis unique ID should follow the Internet Engineering Task Force\n(IETF) RFC 4122. This means the \nAppId\n will always be 128-bits in\nlength. When setting the value, there is no need to use the \"-\" hyphen\nsymbol; use the raw hex value and store it into a byte array.\n\n\nThe generation of the \nAppId\n can occur through various online\nofferings. Perform a search for \"GUID generator\" on various\nonline search engines to aid in the generation of the \nAppId\n.\n\n\nNOTE:\nIf two or more applications use the same \nAppId\n, it does\nnot hinder the \nAboutObj\n or its ability to interact with an\n\nAboutProxy\n. If an application using the \nAboutProxy\n relies on\nthe \nAppId\n to display information, it may render incorrect results\ndue to the non-unique \nAppId\ns.\n\n\nWhen to send an Icon\n\n\nAlthough not required, the About feature can support broadcasting\nand receiving an icon. The icon can be used by the applications to\nhelp visually identify the embedded device.\n\n\nThe recommended size for this icon is 72 x 72 pixels, but can be\nlarger as long as the total number of bytes is less than the\nmaximum supported by the AllJoyn framework in a single \nBusMethod\n\ncall (\nALLJOYN_MAX_ARRAY_LEN\n, 131072 bytes). If the icon image\nsize is larger than \nALLJOY_MAX_ARRAY_LEN\n, provide a valid URL\nwhen initializing the \nAboutIconObj\n.\n\n\nIn order for the icon to correctly render, it is important to\nset the mimeType to the image type as some devices require this\nto show the icon on a display.\n\n\nPing discovered devices\n\n\nNOTE:\n The BusAttachment.Ping option is part of the\nAllSeen Alliance 14.06 release.\n\n\nIt is possible to receive an \norg.alljoyn.About.Announce\n signal with\ninformation about a bus name that is stale. Use the \nBusAttachment::Ping\n\nmethod to discover if the name is still present before trying\nto join a session with the remote bus.\n\n\nA short timeout can be specified when calling the \nBusAttachment::Ping\n\nmethod. This can make applications more responsive since they\nwill not have to wait as long for a \nJoinSession\n timeout failure.",
            "title": "Home"
        },
        {
            "location": "/develop/api-guide/about/#about-api-guide",
            "text": "The About Feature was fully integrated with the core code for the AllJoyn  14.12\nrelease. Many of the API names were changed to fit more closely with naming used\nin the core code. The About Feature no longer needs a separate library.  The\nAbout Feature can access more information. Making it possible to fill in some\nfields for the developer. If your application is still using the older APIs the\nlegacy API guides can be used as reference.   Java  C++  Objective-C  C (Thin Core)   Legacy API Guides    Java    C++",
            "title": "About API Guide"
        },
        {
            "location": "/develop/api-guide/about/#common-best-practices",
            "text": "Handling BusListener::BusDisconnected  If you are writing an app intended for a platform that is\nrunning a standalone router (such as OpenWRT or Linux),\nit is recommended to register a Bus Listener and implement BusListener::BusDisconnected  to support scenarios when the\nconnection between the AllJoyn  app and the AllJoyn router is lost.  This can happen in the following scenarios:   The standalone router is restarted (manually or otherwise)  The Onboarding service framework forces a restart of the\n  standalone router after onboarding a device.   After  BusListener::BusDisconnected  is invoked:  Clear now-obsolete application data such as session IDs.  Shut down any service frameworks being used.  Create a new bus attachment.  Periodically invoke  BusAttachment::Connect  until it returns successfully.  After the AllJoyn router restarts and the new bus attachment is\nreconnected, any sessions the old bus attachment was previously\na part of must be re-established to resume proper function.\nLikewise, any service frameworks must be restarted using the\nreconnected bus attachment.  The process is summarized below:\n1. Verify the  BusListener  implements  BusListener::BusDisconnected .\n2. When  BusListener::BusDisconnected  is invoked, make sure to:\n  1. Clear any now-obsolete application data, such as session IDs.\n  2. Shut down any service frameworks being used.\n  3. Create a new bus attachment.\n  4. Continually try to reconnect the bus attachment.\n  5. Once reconnected:\n    1. Set listeners.\n    2. Bind session ports as needed.\n    3. Restart service frameworks.\n    4. Connect to any pre-established sessions as needed.",
            "title": "Common Best Practices"
        },
        {
            "location": "/develop/api-guide/about/#best-practices-across-all-services",
            "text": "When to call the AboutService Announce() method  When using the About feature, the  Announce()  method should\nbe invoked once all AllJoyn interfaces have been registered\nand whenever the data structure changes. A few scenarios\nfor calling the  Announce()  method follow:   Some embedded devices have certain functionality enabled\nthrough the device's Settings options. After any change to\nactivate the AllJoyn interfaces, the  Announce()  method should\nbe called again.  Some embedded devices support configuring a name or other\nvalues that a user will enter. Each time there is a change,\na call to  Announce()  should be made.   How the AboutProxy receives information  The  BusAttachment::RegisterAboutListener registers for an AllJoyn Signal and\ndoes not need to poll, creating and then registering the  AboutListener \nthen calling the  BusAttachment::WhoImplements  method indicating the interfaces\nthe client is interested in is all that is required. The  AboutListener  object\nshould exist the lifetime of the application in order to receive up to date\ninformation. Once an announce signal is received by the AboutListener::Announced   callback an  AboutProxy  object can be created to\ninteract with the remote  AboutObj .  For more information on  AboutListener , refer to the About API Guide\nlisted at the top of the page for the platform you are targeting.  Generating a unique AppId/unique ID  The About feature has a mandatory  AppId  field that requires a unique\nvalue be set per the application using.  This unique ID should follow the Internet Engineering Task Force\n(IETF) RFC 4122. This means the  AppId  will always be 128-bits in\nlength. When setting the value, there is no need to use the \"-\" hyphen\nsymbol; use the raw hex value and store it into a byte array.  The generation of the  AppId  can occur through various online\nofferings. Perform a search for \"GUID generator\" on various\nonline search engines to aid in the generation of the  AppId .  NOTE: If two or more applications use the same  AppId , it does\nnot hinder the  AboutObj  or its ability to interact with an AboutProxy . If an application using the  AboutProxy  relies on\nthe  AppId  to display information, it may render incorrect results\ndue to the non-unique  AppId s.  When to send an Icon  Although not required, the About feature can support broadcasting\nand receiving an icon. The icon can be used by the applications to\nhelp visually identify the embedded device.  The recommended size for this icon is 72 x 72 pixels, but can be\nlarger as long as the total number of bytes is less than the\nmaximum supported by the AllJoyn framework in a single  BusMethod \ncall ( ALLJOYN_MAX_ARRAY_LEN , 131072 bytes). If the icon image\nsize is larger than  ALLJOY_MAX_ARRAY_LEN , provide a valid URL\nwhen initializing the  AboutIconObj .  In order for the icon to correctly render, it is important to\nset the mimeType to the image type as some devices require this\nto show the icon on a display.  Ping discovered devices  NOTE:  The BusAttachment.Ping option is part of the\nAllSeen Alliance 14.06 release.  It is possible to receive an  org.alljoyn.About.Announce  signal with\ninformation about a bus name that is stale. Use the  BusAttachment::Ping \nmethod to discover if the name is still present before trying\nto join a session with the remote bus.  A short timeout can be specified when calling the  BusAttachment::Ping \nmethod. This can make applications more responsive since they\nwill not have to wait as long for a  JoinSession  timeout failure.",
            "title": "Best Practices (across all services)"
        },
        {
            "location": "/develop/api-guide/about/java-legacy/",
            "text": "About API Guide - Java\n\n\nReference code\n\n\nClasses used to send AboutData\n\n\n\n\n\n\n\n\nServer class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutService\n\n\nClass that implements the org.alljoyn.About interface.\n\n\n\n\n\n\nAboutIconService\n\n\nClass that implements the org.alljoyn.Icon interface.\n\n\n\n\n\n\nPropertyStore\n\n\nInterface that supplies the list of properties required for Announce signal payload and GetAboutData().\n\n\n\n\n\n\n\n\nClasses used to receive AboutData\n\n\n\n\n\n\n\n\nClient class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutClient\n\n\nHelper class for discovering About Server that provides access to the Announcements and to the AboutService. It listens for Announcements sent using the org.alljoyn.About interface.\n\n\n\n\n\n\nAboutIconClient\n\n\nHelper class that provides access to the AboutIconService.\n\n\n\n\n\n\n\n\nObtain the About feature\n\n\nSee the \nBuilding Android section\n for instructions\non compiling the About feature.\n\n\nBuild an application that uses About Server\n\n\nThe following steps provide the high-level process to build an\napplication that will broadcast AboutData.\n\n\n\n\nCreate the base for the AllJoyn\n application.\n\n\nImplement PropertyStore to produce an AboutStore.\n(See \nCreate a PropertyStore implementation\n)\n\n\nInstantiate an AboutStore.\n\n\nCreate and register the AboutService, providing it with the AboutStore.\n\n\nAnnounce the AboutService.\n\n\n\n\nBuild an application that uses About Client\n\n\nThe following steps provide the high-level process to build an\napplication that will receive AboutData.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nCreate and register the AboutService.\n\n\nCreate and register the AnnounceListener.\n\n\nCreate and use the AboutClient.\n\n\n\n\nSetting Up the AllJoyn Framework\n\n\nEvery AllJoyn application requires a base set to be in\nplace before implementing specific features that include\ncreating a BusAttachment and connecting to the AllJoyn framework.\n\n\nSet up AllJoyn variables\n\n\nstatic { System.loadLibrary(\nalljoyn_java\n); }  \nprivate BusAttachment mBus;\n\n\n\n\nPrepare the AllJoyn framework\n\n\nDaemonInit.PrepareDaemon(this); // where 'this' is an android.content.Context class\n\n\n\n\nCreate a BusAttachment instance\n\n\nmBus = new BusAttachment(\nAboutApplication\n, BusAttachment.RemoteMessage.Receive);\n\n\n\n\nCreate password for the bundled router\n\n\nNOTE: Thin libraries at AllSeen Alliance version 14.06 or higher do not require this step.\n\n\nTo allow thin libraries to connect to the Android bundled router,\nthe router requires a password.\n\n\nStatus status = PasswordManager.setCredentials(ALLJOYN_PIN_KEYX, DAEMON_PWD);\nif (Status.OK != status) {\n    Log.e(TAG, \nFailed to set password for daemon, Error: \n + status);\n}\n\n\n\n\nStart and connect the BusAttachment\n\n\nOnce created, the BusAttachment must be connected to the AllJoyn framework.\n\n\nStatus status = mBus.connect();\nif (Status.OK != status) {\n    Log.e(TAG, \nFailed connect to bus, Error: '\n + status + \n'\n);;\n}\n\n\n\n\nAdvertise the daemon\n\n\nThe application should advertise the daemon so that the\nthin client can find it and connect to it.\n\n\nint flag = BusAttachment.ALLJOYN_REQUESTNAME_FLAG_DO_NOT_QUEUE;\nString daemonName = 'org.alljoyn.BusNode_' + mBus.getGlobalGUIDString();\nStatus status = mBus.requestName(daemonName, flag);\nif (Status.OK == status) {\n    status = mBus.advertiseName('quiet@' +, SessionOpts.TRANSPORT_ANY);\n    if (Status.OK != status) {\n        mBus.releaseName(daemonName);\n    }\n}\n\n\n\n\nImplementing an Application that uses About Server\n\n\nImplementing an About Server requires creating and registering\nan instance of the AboutService class.\n\n\nNOTE: Verify the BusAttachment has been created, started and\nconnected before implementing the AboutService. See \nSetting up the\nAllJoyn Framework\n for the code snippets.\nThese code snippets references a variable \nmBus\n (the BusAttachment variable name).\n\n\nDeclare listener class\n\n\nTypically, an \nAcceptSessionJoiner\n callback in SessionPortListener\nhas a check to allow or disallow access. Since the AboutService\nrequires access to any application using AboutClient, return true\nwhen this callback is triggered. Use the SessionJoined handler\nto set the session timeout to 20 seconds.\n\n\nclass MyListener implements SessionPortListener {\n    boolean acceptSessionJoiner( short sessionPort, String joiner, SessionOpts opts ) {\n        return true;\n    }\n\n    void sessionJoined( short sessionPort, int id, String joiner ) {\n        mBus.enableConcurrentCallbacks();\n        uint32_t timeout = 20;\n        Status status = mBus.SetLinkTimeout(id, timeout);\n    }\n}\n\n\n\n\nBind session port\n\n\nNOTE: This step is not mandatory if you are only sending an\nannouncement. To allow incoming connections, the formation\nof a session is needed. The AllJoyn framework must be told\nthat connections are allowed.\n\n\nfinal Mutable.ShortValue sPort = new Mutable.ShortValue((short) 0);\nSessionOpts sessionOpts = new SessionOpts();\nsessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\nsessionOpts.isMultipoint = true;\nsessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\nsessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\nStatus status = m_bus.bindSessionPort(sPort, sessionOpts,\n    new SessionPortListener() {\n        @Override\n        public boolean acceptSessionJoiner(short sessionPort, String joiner, SessionOpts sessionOpts) {\n            if (sessionPort == sPort.value) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        public void sessionJoined(short sessionPort, int id, String joiner){\n            Log.i(TAG,\n                String.format(\nSessionPortListener.sessionJoined(%d, %d, %s)\n, sessionPort, id, joiner));\n        }\n    });\n\nString logMessage =\n    String.format(\nBusAttachment.bindSessionPort(%d, %s): %s\n, sPort.value, sessionOpts.toString(), status);\nLog.d(TAG, logMessage);\n\n\n\n\nCreate a PropertyStore implementation\n\n\nThe PropertyStore interface is required by the AboutService\nto store the provisioned values for the About interface data\nfields (listed in \nAbout interface data fields\n).\nSee the \nAbout Interface Definition\n for more information.\n\n\nNOTE: It is recommended that OEMs create a shared provisioning\nfile that includes the DefaultLanguage, DeviceName, and DeviceID\nfields. This file can be used by developers to manage these fields\nin the AllJoyn services that make use of them.\n\n\nAbout interface data fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nAnnounced\n\n\nSignature\n\n\n\n\n\n\n\n\n\n\nAppID\n\n\nyes\n\n\nyes\n\n\nay\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceName\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceId\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nAppName\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nManufacturer\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nModelNumber\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nSupportedLanguages\n\n\nyes\n\n\nno\n\n\nas\n\n\n\n\n\n\nDescription\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nDateofManufacture\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSoftwareVersion\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nAJSoftwareVersion\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nHardwareVersion\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSupportUrl\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\n\n\nSample PropertyStore implementation\n\n\nAn example PropertyStore implementation (AboutStore) is provided\nbelow that specifies the following dictionary of metadata fields:\n\n\n\n\nKeys are the field names\n\n\nValues are a Map of String to Object entries, where the\nString is the language tag associated with the Object value\n\n\n\n\npublic class AboutStore implements PropertyStore\n{\n    private Set \n String \n m_AnnounceKeys = new HashSet \n String \n();\n    private Map \n String, Map \n String, Object \n \n m_DataMap = new HashMap \n String, Map \n String, Object \n \n();\n    public AboutStore(Map \n String, Map \n String, Object \n \n defaultMap)\n    {\n        // Initialize set of Announce keys m_AnnounceKeys.add(\nAppId\n);\n        m_AnnounceKeys.add(\nDefaultLanguage\n);\n        m_AnnounceKeys.add(\nDeviceName\n);\n        m_AnnounceKeys.add(\nDeviceId\n);\n        m_AnnounceKeys.add(\nAppName\n);\n        m_AnnounceKeys.add(\nManufacturer\n);\n        m_AnnounceKeys.add(\nModelNumber\n);\n        m_DataMap.putAll(defaultMap);\n    }\n\n    @Override\n    public void readAll(String languageTag, Filter filter, Map\nString, Object\n dataMap) throws PropertyStoreException {\n        languageTag = checkLanguage(languageTag);\n        for (Entry\nString, Map\nString, Object\n entry : m_DataMap.entrySet()) {\n            if (entry.getValue().containsKey(languageTag)) {\n                String lang = \n;\n                if (entry.getValue().containsKey(languageTag)) {\n                    lang = languageTag;\n                }\n                switch (filter)\n                {\n                case READ:\n                    entry.getValue().get(lang));\n                    break;\n                case ANNOUNCE:\n                    if (m_AnnounceKeys.contains(entry.getKey()))\n                    {\n                        dataMap.put(entry.getKey(),\n                        entry.getValue().get(lang));\n                    }\n                    break;\n                }\n            }\n        }\n    }\n\n    @Override\n    public void reset(String key, String languageTag) throws PropertyStoreException {}\n\n    @Override\n    public void resetAll() throws PropertyStoreException {}\n\n    @Override\n    public void update(String key, String languageTag, Object newValue) throws PropertyStoreException {}\n\n    private String checkLanguage(String languageTag) throws PropertyStoreException\n    {\n        if (languageTag == null) {\n            throw new PropertyStoreException(PropertyStoreException.INVALID_VALUE);\n        }\n        if (languageTag.isEmpty()) {\n            return (String) m_DataMap.get(\nDefaultLanguage\n).get(\n);\n        }\n        if (((Set\nString\n)m_DataMap.get(\nSupportedLanguages\n).get(\n)).contains(languageTag)) {\n            throw new PropertyStoreException(PropertyStoreException.UNSUPPORTED_LANGUAGE);\n        }\n        return languageTag;\n    }\n}\n\n\n\n\nProvision PropertyStore instance with default values\n\n\nIn the application, the PropertyStore instance you created\nwill be loaded with the default values. In the sample implementation\nabove, the AboutStore instance is provided with a default values map.\n\n\nMap\nString, Map\nString, Object\n defaultMap = new HashMap\nString, Map\nString, Object\n();\n\n// Populate map with fields names and values.\nString fieldname = \nFieldName\n;\nString languageTag = \n;\n\nMap\nString, Object\n defaultValue = new HashMap\nString, Object\n();\ndefaultValue.put(\n, \nValue\n);// An empty string means non-language specific field.\ndefaultMap.put(fieldName, defaultValue);\nPropertyStore aboutStore = new AboutStore(defaultMap);\n\n\n\n\nThe following subsections highlight provisioning fields\naccording to their data type.\n\n\nAppId field\n\n\nThe AppId field is an array of bytes. It is a globally\nunique identifier (GUID) encoded as an array of 16 bytes.\n\n\nUUID uuid = UUID.randomUUID();\nMap \nString, Object\n defaultAppId = new HashMap \nString, Object\n();\ndefaultAppId.put(\n, TransportUtil.uuidToByteArray(uuid));\ndefaultMap.put(\nAppId\n, defaultAppId);\n\n\n\n\nSupportedLanguages field\n\n\nThe SupportedLanguages field is a list of text strings.\nSome fields can have language-dependent value that must\nbe provided for each of the supported languages.\n\n\nString [] supportedLanguages = { \nen\n, \nfr\n };\nMap \nString, Object\n defaultSupportedLanguages = new HashMap \nString, Object\n();\ndefaultSupportedLanguages.put(\n, supportedLanguages);\n\n\n\n\nNon-language specific fields\n\n\nNon-language-specific fields support a single supplied\ntext string. Below is an example for the ModelNumber field\non how to insert into the PropertyStore. The code below can\nbe used with the field name being replaced by other field\nnames listed in \nAbout interface data fields\n.\n\n\nMap \nString, Object\n defaultModelNumber = new HashMap \nString, Object\n();\ndefaultModelNumber.put(\n, \nMN-123\n);\n);// An empty string means non-language specific field.\ndefaultMap.put(\nModelNumber\n, defaultModelNumber);\n\n\n\n\nLanguage-dependent fields\n\n\nLanguage-dependent fields support a single supplied text\nstring. Below is an example for the Description field on\nhow to insert into the PropertyStore. The code below can\nbe used with the field name being replaced by other field\nnames listed in \nAbout interface data fields\n.\n\n\nMap \nString, Object\n defaultDescription = new HashMap \nString, Object\n();\ndefaultDescription.put(\nen\n, \nThe description in English\n);\ndefaultDescription.put(\nfr\n, \nLa description en francais\n);\ndefaultMap.put(\nAppId\n, defaultDescription);\n\n\n\n\nCreate the AboutService object\n\n\nFor an application to send AboutData, it requires an instance\nof the AboutService class. AboutServiceImpl is an implementation\nwrapper around AllJoyn native calls that handle the interactions\nbetween About Server and About Client.\n\n\nAboutService aboutService = AboutServiceImpl.getInstance();\n\n\n\n\nStart Server mode\n\n\nRegister the relevant BusObjects and add the relevant interfaces\nto the Announcements ObjectDescription. Then invoke \nstartAboutServer\n.\n\n\naboutService.startAboutServer(mBus, sPort.value, aboutStore);\n\n\n\n\nAdd an AboutIconService (optional)\n\n\nAn application that sends AboutData can be extended to broadcast\na device. AboutServiceImpl is also an implementation wrapper\naround AllJoyn native calls that handle the interactions between\napplications that use the AboutIconClient class.\n\n\nProvision for the Icon content and URL\n\n\nAn Icon is published directly as a byte array or a reference\nURL, and must be provisioned as follows:\n\n\nbyte [] aboutIconContent = { 0x89, 0x50, 0x4E, 0x47, 0x0D /* Add relevant data here */ };\nString mimeType(\nimage/png\n); /* This should correspond to the content */\nString url(\nhttp://myurl\n); /* An alternate access to the Icon */\n\n\n\n\nRegister icon\n\n\nRegister the relevant BusObjects and add the relevant interfaces\nto the Announcements ObjectDescription. Then register the icon.\n\n\naboutService.registerIcon(mimeType, url, aboutIconContent);\n\n\n\n\nAdvertise to allow connections\n\n\nmBus.advertiseName(mBus.getUniqueName());\n\n\n\n\nSend the Announcement\n\n\naboutService.announce();\n\n\n\n\nReleasing resources\n\n\nWhen your process is done with the AboutService and no longer\nwishes to send announcements, unregister the process from the\nAllJoyn bus.\n\n\nif (null != aboutService) {\n    aboutService.unregisterIcon();\n    aboutService.stopServer();\n}\nif( null != mBus) {\n    mBus.disconnect();\n    mBus.release();\n    mBus = null;\n}\n\n\n\n\nImplementing an Application that uses About Client\n\n\nTo implement an application to receive AboutData, use the\nAboutClient class. By using the AboutClient class, your\napplication is notified when About Server instances send announcements.\n\n\nVerify the BusAttachment has been created, started and connected\nbefore implementing an About Client. See \nSetting Up the AllJoyn Framework\n for the code snippets. These codes snippets\nreference a variable \nmBus\n (the BusAttachment variable name).\n\n\nCreate the AboutService object\n\n\nFor an application to receive AboutData, it requires an instance\nof the AboutService class. AboutServiceImpl is an implementation\nwrapper around AllJoyn native calls that handle the interactions\nwith the About Server.\n\n\nAboutService aboutService = AboutServiceImpl.getInstance();\n\n\n\n\nStart Client mode\n\n\naboutService.startAboutClient(mBus);\n\n\n\n\nSet up ability to receive the Announce signal\n\n\nIn order to receive the Announce signal from an application\nusing AboutService, a few tasks must be performed.\n\n\nImplement AnnounceHandler class\n\n\nCreate a class that implements the AboutHandler. This class\nwill be triggered when an announcement arrives.\n\n\nNOTE: onDeviceLost has been deprecated. Use BusAttachment.ping\nto detect whether an application sending an Announce signal is\npresent and responding.\n\n\npublic class MyAnnouncementHandler implements AnnouncementHandler\n{\n    @Override\n    public void onAnnouncement(String peerName, short port,\n       BusObjectDescription[] interfaces, Map\nString, Variant\n aboutMap) {\n\n        Map\nString, Object\n newMap = new HashMap\nString, Object\n();\n        try {\n            newMap = TransportUtil.fromVariantMap(aboutMap);\n            String deviceId = (String) (newMap.get(AboutKeys.ABOUT_APP_ID).toString());\n            String deviceFriendlyName = (String) newMap.get(AboutKeys.ABOUT_DEVICE_NAME);\n                m_logger.debug(TAG, \nonAnnouncement received: with parameters:\n                busName:\n+deviceName+\n\\t, port:\n+port+\n\\t, deviceid\n+deviceId+ \n\\t,\n                   deviceName:\n+deviceFriendlyName);\n            // create a client instance to connect to this peer. See possible\n            // implementation of this call in \nCreate the AboutService object\n.\n            engageWithPeer(port, peerName, interfaces, newMap);\n        } catch (BusException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onDeviceLost(String serviceName) {}\n}\n\n\n\n\nRegister the class you created\n\n\nAfter starting the AboutService in \nStart Client mode\n, add\nthe following to register the class you created in \nImplement\nAnnounceHandler class\n.\n\n\nWhen registering an announcement listener, specify which interfaces\nthe application is interested in. The code below shows a listener\nregistered to receive Announce signals that include an object\nimplementing the INTERFACE_NAME interface.\n\n\nMyAnnouncementHandler announceHandler = new MyAnnouncementHandler();\naboutService.addAnnouncementHandler(announceHandler, new String[] { INTERFACE_NAME });\n\n\n\n\nUsing ping to determine presence\n\n\nThe BusAttachment ping member function can be used to determine\nif a device is responsive. Contents of an Announce signal can\nbe stale so it may be useful to ping the device to see if it\nis still present and responsive before attempting to form a connection.\n\n\nNOTE: The BusAttachment.ping method makes a bus call. If ping is\ncalled inside an AllJoyn callback, BusAttachment.enableConcurrentCallbacks\nmust be called first.\n\n\n// When pinging a remote bus name wait a max of 5 seconds\nprivate final int PING_WAIT_TIME = 5000;\nmBus.enableConcurrentCallbacks();\nStatus status = mBus.ping(peerName, PING_WAIT_TIME);\nif (Status.OK == status) {\n}\n\n\n\n\nRequest non-announced data\n\n\nIf there is a need to request information that is not contained\nin the announcement, perform the following steps.\n\n\nCreate AboutClient\n\n\nGenerate an instance of AboutClient to engage with a peer\nAbout Server whose Announcement was received in the\nonAnnouncement() implementation of your MyAnnouncementHandler instance.\n\n\nUsing the AboutClient instance you can exercise the About\nfeature API as described in the \nAbout Interface Definition\n.\n\n\nThe following is an example implementation of the call\nshown in \nImplement AnnounceHandler class\n.\n\n\nprivate void engageWithPeer(Short port, String peerName, BusObjectDescription[]\ninterfaces, Map\nString, Object\n announceMap) {\n    MyAvailabilityListener availabilityListener = new MyAvailabilityListener();\n    AboutClient aboutClient = aboutService.createAboutClient(peerName, availabilityListener, port);\n    aboutClient.connect();\n    // Use the generated AboutClient instance according to your needs.\n    // E.g. retrieve AboutData\n    Map \nString, Object\n aboutData =\n    aboutClient.getAbout((String)announceMap.get(\nDefaultLanaguge\n));\n    // E.g. retrieve ObjectDescription\n    BusObjectDescription [] od = aboutClient.getBusObjectDescription();\n}\n\n\n\n\nRequest AboutData\n\n\nAboutData is retrieved via the AboutClient. The structure that\nis returned can be iterated through to determine the contents.\nThe content definition is found in the \nAbout Interface Definition\n.\n\n\naboutClient.getAbout((String)announceMap.get(\nDefaultLanaguge\n));\n\n\n\n\nCreate AboutIconClient (optional)\n\n\nGenerate an instance of AboutIconClient to receive the DeviceIcon\nout of a peer About Server whose Announcement was received in\nthe onAnnouncement() implementation of your MyAnnouncementHandler instance.\n\n\nThe following is an example implementation of the call shown\nin \nImplement AnnounceHandler class\n.\n\n\nprivate void engageWithPeer(Short port, String peerName, BusObjectDescription[]\ninterfaces, Map\nString, Object\n announceMap) {\n    MyAvailabilityListener availabilityListener = new MyAvailabilityListener();\n    boolean hasIcon = false;\n    for (BusObjectDescription bod : objectDescriptionArray) {\n        if (bod.path.equals(\n/About/DeviceIcon\n) {\n            hasIcon = true;\n            break;\n        }\n    }\n    if (hasIcon) {\n        AboutIconClient aboutIconClient = aboutService.createAboutIconClient(peerName, availabilityListener, port);\n        aboutIconClient.connect();\n        // Use the generated AboutIconClient instance according to your needs.\n        // E.g. retrieve icon content\n        byte [] iconContent = aboutIconClient.GetContent();\n    }\n}\n\n\n\n\nRequest the icon content (optional)\n\n\nThe icon data is requested through the AboutClientIcon.\nThe structure that is returned can be iterated through\nto determine the contents. The content definition is found\nin the \nAbout Interface Definition\n.\n\n\naboutIconClient.GetContent();\n\n\n\n\nReleasing resources\n\n\nOnce you are done using the About feature and the AllJoyn\nframework, unregister listeners, disconnect and stop the\nclients, services, and the BusAttachment used in the application.\n\n\nif(aboutClient != null) {\n    aboutClient.disconnect();\n}\nif(aboutService != null) {\n    aboutService.unregisterAnnounceListener(announceListener);\n    aboutService.stopClient();\n}\nif(mBus != null) {\n    mBus.disconnect();\n    mBus.release();\n    mBus = null;\n}",
            "title": "Java legacy"
        },
        {
            "location": "/develop/api-guide/about/java-legacy/#about-api-guide-java",
            "text": "",
            "title": "About API Guide - Java"
        },
        {
            "location": "/develop/api-guide/about/java-legacy/#reference-code",
            "text": "Classes used to send AboutData     Server class  Description      AboutService  Class that implements the org.alljoyn.About interface.    AboutIconService  Class that implements the org.alljoyn.Icon interface.    PropertyStore  Interface that supplies the list of properties required for Announce signal payload and GetAboutData().     Classes used to receive AboutData     Client class  Description      AboutClient  Helper class for discovering About Server that provides access to the Announcements and to the AboutService. It listens for Announcements sent using the org.alljoyn.About interface.    AboutIconClient  Helper class that provides access to the AboutIconService.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/about/java-legacy/#obtain-the-about-feature",
            "text": "See the  Building Android section  for instructions\non compiling the About feature.",
            "title": "Obtain the About feature"
        },
        {
            "location": "/develop/api-guide/about/java-legacy/#build-an-application-that-uses-about-server",
            "text": "The following steps provide the high-level process to build an\napplication that will broadcast AboutData.   Create the base for the AllJoyn  application.  Implement PropertyStore to produce an AboutStore.\n(See  Create a PropertyStore implementation )  Instantiate an AboutStore.  Create and register the AboutService, providing it with the AboutStore.  Announce the AboutService.",
            "title": "Build an application that uses About Server"
        },
        {
            "location": "/develop/api-guide/about/java-legacy/#build-an-application-that-uses-about-client",
            "text": "The following steps provide the high-level process to build an\napplication that will receive AboutData.   Create the base for the AllJoyn application.  Create and register the AboutService.  Create and register the AnnounceListener.  Create and use the AboutClient.",
            "title": "Build an application that uses About Client"
        },
        {
            "location": "/develop/api-guide/about/java-legacy/#setting-up-the-alljoyn-framework",
            "text": "Every AllJoyn application requires a base set to be in\nplace before implementing specific features that include\ncreating a BusAttachment and connecting to the AllJoyn framework.  Set up AllJoyn variables  static { System.loadLibrary( alljoyn_java ); }  \nprivate BusAttachment mBus;  Prepare the AllJoyn framework  DaemonInit.PrepareDaemon(this); // where 'this' is an android.content.Context class  Create a BusAttachment instance  mBus = new BusAttachment( AboutApplication , BusAttachment.RemoteMessage.Receive);  Create password for the bundled router  NOTE: Thin libraries at AllSeen Alliance version 14.06 or higher do not require this step.  To allow thin libraries to connect to the Android bundled router,\nthe router requires a password.  Status status = PasswordManager.setCredentials(ALLJOYN_PIN_KEYX, DAEMON_PWD);\nif (Status.OK != status) {\n    Log.e(TAG,  Failed to set password for daemon, Error:   + status);\n}  Start and connect the BusAttachment  Once created, the BusAttachment must be connected to the AllJoyn framework.  Status status = mBus.connect();\nif (Status.OK != status) {\n    Log.e(TAG,  Failed connect to bus, Error: '  + status +  ' );;\n}  Advertise the daemon  The application should advertise the daemon so that the\nthin client can find it and connect to it.  int flag = BusAttachment.ALLJOYN_REQUESTNAME_FLAG_DO_NOT_QUEUE;\nString daemonName = 'org.alljoyn.BusNode_' + mBus.getGlobalGUIDString();\nStatus status = mBus.requestName(daemonName, flag);\nif (Status.OK == status) {\n    status = mBus.advertiseName('quiet@' +, SessionOpts.TRANSPORT_ANY);\n    if (Status.OK != status) {\n        mBus.releaseName(daemonName);\n    }\n}",
            "title": "Setting Up the AllJoyn Framework"
        },
        {
            "location": "/develop/api-guide/about/java-legacy/#implementing-an-application-that-uses-about-server",
            "text": "Implementing an About Server requires creating and registering\nan instance of the AboutService class.  NOTE: Verify the BusAttachment has been created, started and\nconnected before implementing the AboutService. See  Setting up the\nAllJoyn Framework  for the code snippets.\nThese code snippets references a variable  mBus  (the BusAttachment variable name).  Declare listener class  Typically, an  AcceptSessionJoiner  callback in SessionPortListener\nhas a check to allow or disallow access. Since the AboutService\nrequires access to any application using AboutClient, return true\nwhen this callback is triggered. Use the SessionJoined handler\nto set the session timeout to 20 seconds.  class MyListener implements SessionPortListener {\n    boolean acceptSessionJoiner( short sessionPort, String joiner, SessionOpts opts ) {\n        return true;\n    }\n\n    void sessionJoined( short sessionPort, int id, String joiner ) {\n        mBus.enableConcurrentCallbacks();\n        uint32_t timeout = 20;\n        Status status = mBus.SetLinkTimeout(id, timeout);\n    }\n}  Bind session port  NOTE: This step is not mandatory if you are only sending an\nannouncement. To allow incoming connections, the formation\nof a session is needed. The AllJoyn framework must be told\nthat connections are allowed.  final Mutable.ShortValue sPort = new Mutable.ShortValue((short) 0);\nSessionOpts sessionOpts = new SessionOpts();\nsessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\nsessionOpts.isMultipoint = true;\nsessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\nsessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\nStatus status = m_bus.bindSessionPort(sPort, sessionOpts,\n    new SessionPortListener() {\n        @Override\n        public boolean acceptSessionJoiner(short sessionPort, String joiner, SessionOpts sessionOpts) {\n            if (sessionPort == sPort.value) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        public void sessionJoined(short sessionPort, int id, String joiner){\n            Log.i(TAG,\n                String.format( SessionPortListener.sessionJoined(%d, %d, %s) , sessionPort, id, joiner));\n        }\n    });\n\nString logMessage =\n    String.format( BusAttachment.bindSessionPort(%d, %s): %s , sPort.value, sessionOpts.toString(), status);\nLog.d(TAG, logMessage);  Create a PropertyStore implementation  The PropertyStore interface is required by the AboutService\nto store the provisioned values for the About interface data\nfields (listed in  About interface data fields ).\nSee the  About Interface Definition  for more information.  NOTE: It is recommended that OEMs create a shared provisioning\nfile that includes the DefaultLanguage, DeviceName, and DeviceID\nfields. This file can be used by developers to manage these fields\nin the AllJoyn services that make use of them.  About interface data fields     Field name  Required  Announced  Signature      AppID  yes  yes  ay    DefaultLanguage  yes  yes  s    DeviceName  yes  yes  s    DeviceId  yes  yes  s    AppName  yes  yes  s    Manufacturer  yes  yes  s    ModelNumber  yes  yes  s    SupportedLanguages  yes  no  as    Description  yes  no  s    DateofManufacture  no  no  s    SoftwareVersion  yes  no  s    AJSoftwareVersion  yes  no  s    HardwareVersion  no  no  s    SupportUrl  no  no  s     Sample PropertyStore implementation  An example PropertyStore implementation (AboutStore) is provided\nbelow that specifies the following dictionary of metadata fields:   Keys are the field names  Values are a Map of String to Object entries, where the\nString is the language tag associated with the Object value   public class AboutStore implements PropertyStore\n{\n    private Set   String   m_AnnounceKeys = new HashSet   String  ();\n    private Map   String, Map   String, Object     m_DataMap = new HashMap   String, Map   String, Object    ();\n    public AboutStore(Map   String, Map   String, Object     defaultMap)\n    {\n        // Initialize set of Announce keys m_AnnounceKeys.add( AppId );\n        m_AnnounceKeys.add( DefaultLanguage );\n        m_AnnounceKeys.add( DeviceName );\n        m_AnnounceKeys.add( DeviceId );\n        m_AnnounceKeys.add( AppName );\n        m_AnnounceKeys.add( Manufacturer );\n        m_AnnounceKeys.add( ModelNumber );\n        m_DataMap.putAll(defaultMap);\n    }\n\n    @Override\n    public void readAll(String languageTag, Filter filter, Map String, Object  dataMap) throws PropertyStoreException {\n        languageTag = checkLanguage(languageTag);\n        for (Entry String, Map String, Object  entry : m_DataMap.entrySet()) {\n            if (entry.getValue().containsKey(languageTag)) {\n                String lang =  ;\n                if (entry.getValue().containsKey(languageTag)) {\n                    lang = languageTag;\n                }\n                switch (filter)\n                {\n                case READ:\n                    entry.getValue().get(lang));\n                    break;\n                case ANNOUNCE:\n                    if (m_AnnounceKeys.contains(entry.getKey()))\n                    {\n                        dataMap.put(entry.getKey(),\n                        entry.getValue().get(lang));\n                    }\n                    break;\n                }\n            }\n        }\n    }\n\n    @Override\n    public void reset(String key, String languageTag) throws PropertyStoreException {}\n\n    @Override\n    public void resetAll() throws PropertyStoreException {}\n\n    @Override\n    public void update(String key, String languageTag, Object newValue) throws PropertyStoreException {}\n\n    private String checkLanguage(String languageTag) throws PropertyStoreException\n    {\n        if (languageTag == null) {\n            throw new PropertyStoreException(PropertyStoreException.INVALID_VALUE);\n        }\n        if (languageTag.isEmpty()) {\n            return (String) m_DataMap.get( DefaultLanguage ).get( );\n        }\n        if (((Set String )m_DataMap.get( SupportedLanguages ).get( )).contains(languageTag)) {\n            throw new PropertyStoreException(PropertyStoreException.UNSUPPORTED_LANGUAGE);\n        }\n        return languageTag;\n    }\n}  Provision PropertyStore instance with default values  In the application, the PropertyStore instance you created\nwill be loaded with the default values. In the sample implementation\nabove, the AboutStore instance is provided with a default values map.  Map String, Map String, Object  defaultMap = new HashMap String, Map String, Object ();\n\n// Populate map with fields names and values.\nString fieldname =  FieldName ;\nString languageTag =  ;\n\nMap String, Object  defaultValue = new HashMap String, Object ();\ndefaultValue.put( ,  Value );// An empty string means non-language specific field.\ndefaultMap.put(fieldName, defaultValue);\nPropertyStore aboutStore = new AboutStore(defaultMap);  The following subsections highlight provisioning fields\naccording to their data type.  AppId field  The AppId field is an array of bytes. It is a globally\nunique identifier (GUID) encoded as an array of 16 bytes.  UUID uuid = UUID.randomUUID();\nMap  String, Object  defaultAppId = new HashMap  String, Object ();\ndefaultAppId.put( , TransportUtil.uuidToByteArray(uuid));\ndefaultMap.put( AppId , defaultAppId);  SupportedLanguages field  The SupportedLanguages field is a list of text strings.\nSome fields can have language-dependent value that must\nbe provided for each of the supported languages.  String [] supportedLanguages = {  en ,  fr  };\nMap  String, Object  defaultSupportedLanguages = new HashMap  String, Object ();\ndefaultSupportedLanguages.put( , supportedLanguages);  Non-language specific fields  Non-language-specific fields support a single supplied\ntext string. Below is an example for the ModelNumber field\non how to insert into the PropertyStore. The code below can\nbe used with the field name being replaced by other field\nnames listed in  About interface data fields .  Map  String, Object  defaultModelNumber = new HashMap  String, Object ();\ndefaultModelNumber.put( ,  MN-123 ); );// An empty string means non-language specific field.\ndefaultMap.put( ModelNumber , defaultModelNumber);  Language-dependent fields  Language-dependent fields support a single supplied text\nstring. Below is an example for the Description field on\nhow to insert into the PropertyStore. The code below can\nbe used with the field name being replaced by other field\nnames listed in  About interface data fields .  Map  String, Object  defaultDescription = new HashMap  String, Object ();\ndefaultDescription.put( en ,  The description in English );\ndefaultDescription.put( fr ,  La description en francais );\ndefaultMap.put( AppId , defaultDescription);  Create the AboutService object  For an application to send AboutData, it requires an instance\nof the AboutService class. AboutServiceImpl is an implementation\nwrapper around AllJoyn native calls that handle the interactions\nbetween About Server and About Client.  AboutService aboutService = AboutServiceImpl.getInstance();  Start Server mode  Register the relevant BusObjects and add the relevant interfaces\nto the Announcements ObjectDescription. Then invoke  startAboutServer .  aboutService.startAboutServer(mBus, sPort.value, aboutStore);  Add an AboutIconService (optional)  An application that sends AboutData can be extended to broadcast\na device. AboutServiceImpl is also an implementation wrapper\naround AllJoyn native calls that handle the interactions between\napplications that use the AboutIconClient class.  Provision for the Icon content and URL  An Icon is published directly as a byte array or a reference\nURL, and must be provisioned as follows:  byte [] aboutIconContent = { 0x89, 0x50, 0x4E, 0x47, 0x0D /* Add relevant data here */ };\nString mimeType( image/png ); /* This should correspond to the content */\nString url( http://myurl ); /* An alternate access to the Icon */  Register icon  Register the relevant BusObjects and add the relevant interfaces\nto the Announcements ObjectDescription. Then register the icon.  aboutService.registerIcon(mimeType, url, aboutIconContent);  Advertise to allow connections  mBus.advertiseName(mBus.getUniqueName());  Send the Announcement  aboutService.announce();  Releasing resources  When your process is done with the AboutService and no longer\nwishes to send announcements, unregister the process from the\nAllJoyn bus.  if (null != aboutService) {\n    aboutService.unregisterIcon();\n    aboutService.stopServer();\n}\nif( null != mBus) {\n    mBus.disconnect();\n    mBus.release();\n    mBus = null;\n}",
            "title": "Implementing an Application that uses About Server"
        },
        {
            "location": "/develop/api-guide/about/java-legacy/#implementing-an-application-that-uses-about-client",
            "text": "To implement an application to receive AboutData, use the\nAboutClient class. By using the AboutClient class, your\napplication is notified when About Server instances send announcements.  Verify the BusAttachment has been created, started and connected\nbefore implementing an About Client. See  Setting Up the AllJoyn Framework  for the code snippets. These codes snippets\nreference a variable  mBus  (the BusAttachment variable name).  Create the AboutService object  For an application to receive AboutData, it requires an instance\nof the AboutService class. AboutServiceImpl is an implementation\nwrapper around AllJoyn native calls that handle the interactions\nwith the About Server.  AboutService aboutService = AboutServiceImpl.getInstance();  Start Client mode  aboutService.startAboutClient(mBus);  Set up ability to receive the Announce signal  In order to receive the Announce signal from an application\nusing AboutService, a few tasks must be performed.  Implement AnnounceHandler class  Create a class that implements the AboutHandler. This class\nwill be triggered when an announcement arrives.  NOTE: onDeviceLost has been deprecated. Use BusAttachment.ping\nto detect whether an application sending an Announce signal is\npresent and responding.  public class MyAnnouncementHandler implements AnnouncementHandler\n{\n    @Override\n    public void onAnnouncement(String peerName, short port,\n       BusObjectDescription[] interfaces, Map String, Variant  aboutMap) {\n\n        Map String, Object  newMap = new HashMap String, Object ();\n        try {\n            newMap = TransportUtil.fromVariantMap(aboutMap);\n            String deviceId = (String) (newMap.get(AboutKeys.ABOUT_APP_ID).toString());\n            String deviceFriendlyName = (String) newMap.get(AboutKeys.ABOUT_DEVICE_NAME);\n                m_logger.debug(TAG,  onAnnouncement received: with parameters:\n                busName: +deviceName+ \\t, port: +port+ \\t, deviceid +deviceId+  \\t,\n                   deviceName: +deviceFriendlyName);\n            // create a client instance to connect to this peer. See possible\n            // implementation of this call in  Create the AboutService object .\n            engageWithPeer(port, peerName, interfaces, newMap);\n        } catch (BusException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onDeviceLost(String serviceName) {}\n}  Register the class you created  After starting the AboutService in  Start Client mode , add\nthe following to register the class you created in  Implement\nAnnounceHandler class .  When registering an announcement listener, specify which interfaces\nthe application is interested in. The code below shows a listener\nregistered to receive Announce signals that include an object\nimplementing the INTERFACE_NAME interface.  MyAnnouncementHandler announceHandler = new MyAnnouncementHandler();\naboutService.addAnnouncementHandler(announceHandler, new String[] { INTERFACE_NAME });  Using ping to determine presence  The BusAttachment ping member function can be used to determine\nif a device is responsive. Contents of an Announce signal can\nbe stale so it may be useful to ping the device to see if it\nis still present and responsive before attempting to form a connection.  NOTE: The BusAttachment.ping method makes a bus call. If ping is\ncalled inside an AllJoyn callback, BusAttachment.enableConcurrentCallbacks\nmust be called first.  // When pinging a remote bus name wait a max of 5 seconds\nprivate final int PING_WAIT_TIME = 5000;\nmBus.enableConcurrentCallbacks();\nStatus status = mBus.ping(peerName, PING_WAIT_TIME);\nif (Status.OK == status) {\n}  Request non-announced data  If there is a need to request information that is not contained\nin the announcement, perform the following steps.  Create AboutClient  Generate an instance of AboutClient to engage with a peer\nAbout Server whose Announcement was received in the\nonAnnouncement() implementation of your MyAnnouncementHandler instance.  Using the AboutClient instance you can exercise the About\nfeature API as described in the  About Interface Definition .  The following is an example implementation of the call\nshown in  Implement AnnounceHandler class .  private void engageWithPeer(Short port, String peerName, BusObjectDescription[]\ninterfaces, Map String, Object  announceMap) {\n    MyAvailabilityListener availabilityListener = new MyAvailabilityListener();\n    AboutClient aboutClient = aboutService.createAboutClient(peerName, availabilityListener, port);\n    aboutClient.connect();\n    // Use the generated AboutClient instance according to your needs.\n    // E.g. retrieve AboutData\n    Map  String, Object  aboutData =\n    aboutClient.getAbout((String)announceMap.get( DefaultLanaguge ));\n    // E.g. retrieve ObjectDescription\n    BusObjectDescription [] od = aboutClient.getBusObjectDescription();\n}  Request AboutData  AboutData is retrieved via the AboutClient. The structure that\nis returned can be iterated through to determine the contents.\nThe content definition is found in the  About Interface Definition .  aboutClient.getAbout((String)announceMap.get( DefaultLanaguge ));  Create AboutIconClient (optional)  Generate an instance of AboutIconClient to receive the DeviceIcon\nout of a peer About Server whose Announcement was received in\nthe onAnnouncement() implementation of your MyAnnouncementHandler instance.  The following is an example implementation of the call shown\nin  Implement AnnounceHandler class .  private void engageWithPeer(Short port, String peerName, BusObjectDescription[]\ninterfaces, Map String, Object  announceMap) {\n    MyAvailabilityListener availabilityListener = new MyAvailabilityListener();\n    boolean hasIcon = false;\n    for (BusObjectDescription bod : objectDescriptionArray) {\n        if (bod.path.equals( /About/DeviceIcon ) {\n            hasIcon = true;\n            break;\n        }\n    }\n    if (hasIcon) {\n        AboutIconClient aboutIconClient = aboutService.createAboutIconClient(peerName, availabilityListener, port);\n        aboutIconClient.connect();\n        // Use the generated AboutIconClient instance according to your needs.\n        // E.g. retrieve icon content\n        byte [] iconContent = aboutIconClient.GetContent();\n    }\n}  Request the icon content (optional)  The icon data is requested through the AboutClientIcon.\nThe structure that is returned can be iterated through\nto determine the contents. The content definition is found\nin the  About Interface Definition .  aboutIconClient.GetContent();  Releasing resources  Once you are done using the About feature and the AllJoyn\nframework, unregister listeners, disconnect and stop the\nclients, services, and the BusAttachment used in the application.  if(aboutClient != null) {\n    aboutClient.disconnect();\n}\nif(aboutService != null) {\n    aboutService.unregisterAnnounceListener(announceListener);\n    aboutService.stopClient();\n}\nif(mBus != null) {\n    mBus.disconnect();\n    mBus.release();\n    mBus = null;\n}",
            "title": "Implementing an Application that uses About Client"
        },
        {
            "location": "/develop/api-guide/about/java/",
            "text": "About Feature API Guide - Java\n\n\nReference code\n\n\nClasses and interfaces used to send About Feature announcments and data\n\n\n\n\n\n\n\n\nClass/interface\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutObj\n\n\nClass that implements the org.alljoyn.About interface.\n\n\n\n\n\n\nAboutDataListener\n\n\nInterface that supplies the list of properties required for Announce signal payload and GetAboutData().\n\n\n\n\n\n\nAboutIcon\n\n\nContainer class to hold information about an icon.\n\n\n\n\n\n\nAboutIconObj\n\n\nClass that implements the org.alljoyn.Icon interface.\n\n\n\n\n\n\n\n\nClasses and interfaces used to receive About Feature announcements and data.\n\n\n\n\n\n\n\n\nClass/interface\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutListener\n\n\nInterface implemented by AllJoyn\n users to receive About interface related events.\n\n\n\n\n\n\nAboutProxy\n\n\nGet proxy access to the \norg.alljoyn.About\n interface. This class enables the user to interact with the remote About \nBusObject\n.\n\n\n\n\n\n\nAboutIconProxy\n\n\nHelper class that provides access to the org.alljoyn.Icon interface. This class enables the user to interact with the remote AboutIcon \nBusObject\n.\n\n\n\n\n\n\n\n\nBuild an application that uses About Server\n\n\nThe following is the high-level process to build an application that will\nbroadcast an Announce signal. Lines marked with a * are unique to\napplications using the About Feature.\n\n\n\n\nCreate an interface that represents an AllJoyn\n interface using annotations.\n\n\nAdd \nannounced=\"true\"\n to the \n@BusInterface\n annotation*\n\n\nImplement the interface and the \nBusObject\n\n\nImplement an \nAboutDataListener\n*\n\n\nCreate a new \nBusAttachment\n\n\nConnect\n\n\nBind a session port\n\n\nSetup security etc.\n\n\nCreate and register the \nBusObject\n\n\nCreate \nAboutObj\n and \nannounce\n*\n\n\n\n\nBuild an application that uses About Client\n\n\nThe following is the high-level process to build an application that will\nreceive an \norg.alljoyn.About.Announce\n signal. Lines marked with a * are\nunique to applications using the About Feature. \n\n\n\n\nCreate and connect \nBusAttachment\n\n\nImplement an \nAboutListener\n*\n\n\nRegister the new \nAboutListener\n*\n\n\ncall \nBusAttachment::WhoImplements\n member function to specify interfaces your\n  application is interested in.*\n\n\n\n\nSample code for sending an \nAnnounce\n signal\n\n\nCreate an interface that represents an AllJoyn interface using annotations\n\n\nThe interface is a collection methods, signals, and properties. The interface\ncan be represented in xml notation but an annotated interface that represents\nthat interface must be created.\n\n\nFor this sample the following xml interface was used.\n\n\ninterface name='com.example.about.feature.interface.sample' \n\n  \nmethod name='Echo'\n\n    \narg name='out_arg' type='s' direction='in' /\n\n    \narg name='return_arg' type='s' direction='out' /\n\n  \n/method\n\n\n/interface\n\n\n\n\n\nAn Java interface annotated so it can be used for AllJoyn.  Note the \nannounced\n\nannotation is set to \n\"true\"\n.  The interface will not become part of the\n\nAnnounce\n signal if the \nannounced\n annotation is not added to the\n\n@BusInterface\n annotation.\n\n\n@BusInterface (name = \ncom.example.about.feature.interface.sample\n, announced=\ntrue\n)\npublic interface SampleInterface {\n\n    @BusMethod(name = \nEcho\n)\n    public String echo(String str) throws BusException;\n}\n\n\n\n\nImplement the interface and the \nBusObject\n\n\nThe implementation of the \nSampleInterface\n can be done in just a few lines of\ncode.\n\n\npublic static class SampleService implements SampleInterface, BusObject {\n    public String echo(String str) {\n        return str;\n    }\n}\n\n\n\n\nImplement an \nAboutDataListener\n\n\nThe \nAboutDataListener\n interface has two methods \ngetAboutData\n and\n\ngetAnnouncedAboutData\n.\n\n\nThe method \ngetAnnouncedAboutData\n is called by the AllJoyn framework to get a\n\nMap\n where the key is a \nString\n and the value is a \nVariant\n. The map is\nexpected to contain only the data fields that are announced.\nSee \nAbout interface data fields\n. Feilds that have\nmultiple strings in multiple langauges will always return the language specified\nin the \nDefaultLanguage\n tag for the announced data.\n\n\nThe \ngetAboutData\n method is called by the AllJoyn framework when a \nAboutProxy\n\nobject calls \nAboutProxy.getAboutData()\n method. The language \nmust\n be an\nIETF language tage specified by RFC 5646. \nImportant\n if the language parameter\nis null or an empty string the about data for the \nDefaultLanguage\n should be\nreturned. If the language specified is not supported thow an\n\nErrReplyBusException\n with the \nStatus\n \nLANGUAGE_NOT_SUPPORTED\n. If \nany\n\nrequired field is not supplied then throw an \nErrReplyBusException\n with the\n\nStatus\n \nABOUT_ABOUTDATA_MISSING_REQUIRED_FIELD\n.\n\n\nAll strings must be encoded using UTF-8 encoding.\n\n\nSample implementation of an \nAboutDataListener\n:\n\n\npublic class MyAboutData implements AboutDataListener {\n\n    @Override\n    public Map\nString, Variant\n getAboutData(String language) throws ErrorReplyBusException {\n        System.out.println(\nMyAboutData.getAboutData was called for `\n\n                + language + \n` language.\n);\n        Map\nString, Variant\n aboutData = new HashMap\nString, Variant\n();\n        // nonlocalized values\n        aboutData.put(\nAppId\n, new Variant(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}));\n        aboutData.put(\nDefaultLanguage\n, new Variant(new String(\nen\n)));\n        aboutData.put(\nDeviceId\n, new Variant(new String(\n                \n93c06771-c725-48c2-b1ff-6a2a59d445b8\n)));\n        aboutData.put(\nModelNumber\n, new Variant(new String(\nA1B2C3\n)));\n        aboutData.put(\nSupportedLanguages\n, new Variant(new String[] { \nen\n, \nes\n }));\n        aboutData.put(\nDateOfManufacture\n, new Variant(new String(\n2014-09-23\n)));\n        aboutData.put(\nSoftwareVersion\n, new Variant(new String(\n1.0\n)));\n        aboutData.put(\nAJSoftwareVersion\n, new Variant(Version.get()));\n        aboutData.put(\nHardwareVersion\n, new Variant(new String(\n0.1alpha\n)));\n        aboutData.put(\nSupportUrl\n, new Variant(new String(\n                \nhttp://www.example.com/support\n)));\n        // localized values\n        // If the language String is null or an empty string we return the default\n        // language in this case english\n        if ((language == null) || (language.length() == 0) || language.equals(\nen\n)) {\n            aboutData.put(\nDeviceName\n, new Variant(new String(\nA device name\n)));\n            aboutData.put(\nAppName\n, new Variant(new String(\nAn application name\n)));\n            aboutData.put(\nManufacturer\n, new Variant(new String(\n                    \nA mighty manufacturing company\n)));\n            aboutData.put(\nDescription\n,\n                    new Variant( new String(\nSample showing the about feature in a service application\n)));\n        } else if (language.equals(\nes\n)) { // Spanish\n            aboutData.put(\nDeviceName\n, new Variant(new String(\n                    \nUn nombre de dispositivo\n)));\n            aboutData.put(\nAppName\n, new Variant(\n                    new String(\nUn nombre de aplicaci\u00f3n\n)));\n            aboutData.put(\nManufacturer\n, new Variant(new String(\n                    \nUna empresa de fabricaci\u00f3n de poderosos\n)));\n            aboutData.put(\nDescription\n,\n                    new Variant( new String(\nMuestra que muestra la caracter\u00edstica de sobre en una aplicaci\u00f3n de servicio\n)));\n        } else {\n            throw new ErrorReplyBusException(Status.LANGUAGE_NOT_SUPPORTED);\n        }\n        return aboutData;\n    }\n\n    @Override\n    public Map\nString, Variant\n getAnnouncedAboutData() throws ErrorReplyBusException {\n        System.out.println(\nMyAboutData.getAnnouncedAboutData was called.\n);\n        Map\nString, Variant\n aboutData = new HashMap\nString, Variant\n();\n        aboutData.put(\nAppId\n, new Variant(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}));\n        aboutData.put(\nDefaultLanguage\n, new Variant(new String(\nen\n)));\n        aboutData.put(\nDeviceName\n, new Variant(new String(\nA device name\n)));\n        aboutData.put(\nDeviceId\n, new Variant(new String(\n93c06771-c725-48c2-b1ff-6a2a59d445b8\n)));\n        aboutData.put(\nAppName\n, new Variant( new String(\nAn application name\n)));\n        aboutData.put(\nManufacturer\n, new Variant(new String(\nA mighty manufacturing company\n)));\n        aboutData.put(\nModelNumber\n, new Variant(new String(\nA1B2C3\n)));\n        return aboutData;\n    }\n\n}\n\n\n\n\nAbout interface data fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nAnnounced\n\n\nLocalized\n\n\nSignature\n\n\n\n\n\n\n\n\n\n\nAppId\n\n\nyes\n\n\nyes\n\n\nno\n\n\nay\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nDeviceName\n\n\nno\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceId\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nAppName\n\n\nyes\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nManufacturer\n\n\nyes\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nModelNumber\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nSupportedLanguages\n\n\nyes\n\n\nno\n\n\nno\n\n\nas\n\n\n\n\n\n\nDescription\n\n\nyes\n\n\nno\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDateofManufacture\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSoftwareVersion\n\n\nyes\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nAJSoftwareVersion\n\n\nyes\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nHardwareVersion\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSupportUrl\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\n\n\nFields marked as Announced are part of the \nAnnounce\n signal.  If a value is not\nannounced then you must use the \norg.alljoyn.About.GetAboutData\n method to\naccess those values.\n\n\nFields marked as Required must all be supplied to send an \nAnnounce\n signal.\nThey are required even if the value is not part of the \nAnnounce\n signal.\n\n\nAppId\n is a 128-bit UUID (16-bytes) as specified in RFC 4122.\n\n\nCreate a new \nBusAttachment\n\n\nBasic setup that all AllJoyn applications must do to announce there interfaces.\nDepending on the application additional work may be needed to add in security or\napplication life-time management code.\n\n\nBusAttachment bus;\nbus = new BusAttachment(\nAppName\n, BusAttachment.RemoteMessage.Receive);\n\nStatus status;\nstatus = bus.connect();\nif (status != Status.OK) {\n\n    return;\n}\n\n// Bind a session port\nMutable.ShortValue contactPort = new Mutable.ShortValue(CONTACT_PORT);\n\nSessionOpts sessionOpts = new SessionOpts();\nsessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\nsessionOpts.isMultipoint = false;\nsessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\nsessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\nstatus = bus.bindSessionPort(contactPort, sessionOpts, new SessionPortListener() {\n    public boolean acceptSessionJoiner(short sessionPort, String joiner, SessionOpts sessionOpts) {\n        if (sessionPort == CONTACT_PORT) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n});\nif (status != Status.OK) {\n    return;\n}\n\n\n\n\nCreate and Register the \nBusObject\n\n\nSampleService mySampleService = new SampleService();\nstatus = bus.registerBusObject(mySampleService, \n/example/path\n);\nif (status != Status.OK) {\n    return;\n}\n\n\n\n\nCreate \nAboutObj\n and \nannounce\n\n\nAboutObj aboutObj = new AboutObj(bus);\nstatus = aboutObj.announce(contactPort.value, new MyAboutData());\nif (status != Status.OK) {\n    System.out.println(\nAnnounce failed \n + status.toString());\n    return;\n}\n\n\n\n\nSample code for receiving an \nAnnounce\n signal\n\n\nCode that receives an \nAnnounce\n signal will need to create, start, and connect\na \nBusAttachment\n the same as the code that sent the \nAnnounce\n signal. The\napplication that receives the \nAnnounce\n signal does not need to bind a session\nport. See \nCreate a new \nBusAttachment\n\n\nImplement an \nAboutListener\n\n\nstatic class MyAboutListener implements AboutListener {\n    public void announced(String busName, int version, short port, AboutObjectDescription[] objectDescriptions, Map\nString, Variant\n aboutData) {\n        // Place code here to handle Announce signal.\n    }\n}\n\n\n\n\nThe \nAboutListener\n is called by the AllJoyn routing node when an \nAnnounce\n\nsignal is found.  The \nAnnounced\n call back contains all the information\ncontained in the received \nAnnounce\n signal as well as the unique BusName of the\n\nBusAttachment\n that emitted the \nAnnounce\n signal. This information can be used\nto form a session with the remote device; and Make a \nProxyBus\n object based on\nthe interfaces reported in the \nobjectDescriptions\n.\n\n\nRegister the new \nAboutListener\n and call \nBusAttachment.whoImplements\n\n\n````java\nAboutListener listener = new MyAboutListener();\nbus.registerAboutListener(listener);\n\n\nString ifaces[] = {\"com.example.about.feature.interface.sample\"};\nstatus = bus.whoImplements(ifaces);\nif (status != Status.OK) {\n    return;\n}\n\n\n\n#### The whoImplements method\nThe `whoImplements` method is used to declare your interest in one or more\nspecific interfaces. If a remote device is announcing the interface(s) then\nall Registered `AboutListeners` will be called.\n\nFor example, if you need both `com.example.Audio` *and*\n`com.example.Video` interfaces then do the following.\n\nRegister `AboutListener` once:\n```java\nString ifaces[] = {\ncom.example.Audio\n, \ncom.example.Video\n};\nRegisterAboutListener(aboutListener);\nbus.whoImplements(ifaces));\n\n\n\n\nIf the \nAboutListener\n should be called if \ncom.example.Audio\n \nor\n\n\ncom.example.Video\n interfaces are found then call \nWhoImplements\n multiple\ntimes:\n\n\nRegisterAboutListener(aboutListener);\nString audioInterface[] = {\ncom.example.Audio\n};\nbus.whoImplements(audioInterface);\nString videoInterface[] = {\ncom.example.Video\n};\nbus.whoImplements(videoInterface);\n\n\n\n\nThe interface name may be a prefix followed by a \n*\n.  Using this, the example\nwhere we are interested in \ncom.example.Audio\n \nor\n \ncom.example.Video\n\ninterfaces could be written as:\n\n\nString exampleInterface[] = {\ncom.example.*\n};\nRegisterAboutListener(aboutListener);\nWhoImplements(exampleInterface);\n\n\n\n\nThe AboutListener will receive any announcement that implements an interface\nbeginning with the \ncom.example.\n name.\n\n\nIt is the AboutListeners responsibility to parse through the reported interfaces\nto figure out what should be done in response to the \nAnnounce\n signal.\n\n\nCalls to \nwhoImplements\n is ref counted. If \nwhoImplements\n is called with the same\nlist of interfaces multiple times then \ncancelWhoImplements\n must also be called\nmultiple times with the same list of interfaces.\n\n\nSpecifying \nnull\n for the \ninterfaces\n parameter is allowed, however, it\ncould have significant impact on network performance and should be avoided\nunless all announcements are needed.\n\n\nAdd an AboutIcon (optional)\n\n\nAn application that sends an \nAnnounce\n signal  can be extended to broadcast a\ndevice icon using an instance of the \nAboutIconObj\n class.\n\n\nProvision for the Icon content and URL\n\n\nAn icon is published directly as a byte array or a reference URL, and is\nprovisioned as follows:\n\n\nCreate an icon using a byte array.  An Icon size of 72 pixels x 72 pixels is\nrecommended.\n\n\nbyte[] iconContent = { (byte)0x89, 0x50, 0x4E, 0x47/* Add relevant data here */ };\nAboutIcon icon = null;\ntry {\n    icon = new AboutIcon(\nimage/png\n, iconContent);\n} catch (BusException e) {\n    System.out.println(\nAboutIcon threw a BusException when it was unexpected.\n);\n}\n\n\n\n\nCreate an icon using a URL.\n\n\nAboutIcon icon = null;\ntry {\n    icon = new AboutIcon(\nimage/png\n, \nhttp://www.example.com\n);\n} catch (BusException e) {\n    System.out.println(\nAboutIcon threw a BusException when it was unexpected.\n);\n}\n\n\n\n\nAs long as the MimeType of the Url and the icon content are the same. Both the\nUrl and icon content can be set.\n\n\nbyte[] iconContent = { (byte)0x89, 0x50, 0x4E, 0x47/* Add relevant data here */ };\nAboutIcon icon = null;\ntry {\n    icon = new AboutIcon(\nimage/png\n, \nhttp://www.example.com\n, iconContent);\n} catch (BusException e) {\n    System.out.println(\nAboutIcon threw a BusException when it was unexpected.\n);\n}\n\n\n\n\nAboutIconObj\n\n\nThe \nAboutIconObj\n will create and register a \nBusObject\n to handle remote\nmethod calls made on the \norg.alljoyn.Icon\n interface.  The AboutIconObj is\nannounced by default.  Applications interested in the \norg.alljoyn.Icon\n\ninterface can call WhoImplements(\norg.alljoyn.Icon\n) to find applications\nthat broadcast device icon information.\n\n\nAnnounce the \norg.alljoyn.Icon\n interface:\n\n\nAboutIconObj aio = new AboutIconObj(bus, icon);\nAboutObj aboutObj = new AboutObj(bus);\nstatus = aboutObj.announce(PORT_NUMBER, aboutData));\n\n\n\n\nDiscover the \norg.alljoyn.Icon interface\n\n\nstatus = clientBus.whoImplements(new String[] {org.alljoyn.bus.ifaces.Icon.INTERFACE_NAME});\n\n\n\n\nUsing Ping to determine presence\n\n\nThe \nBusAttachment\n \nPing\n method can be used to determine\nif a device is responsive. Contents of an \norg.alljoyn.About.Announce\n signal can\nbe stale so it is recommended to ping the device to see if it is still present\nand responsive before attempting to form a connection.\n\n\nNOTE:\n The \nBusAttachment.ping\n method makes a bus call. If \nBusAttachment.ping\n\nis called inside an AllJoyn callback, \nBusAttachment.enableConcurrentCallbacks\n\nmust be called first.\n\n\n// pinging a remote bus, wait a max of 5 seconds\nbus.enableConcurrentCallbacks();\nQStatus status = bus.ping(busName.c_str(), 5000);\nif( ER_OK == status) {\n   // remote device found\n   ...\n}\n\n\n\n\nRequest non-announced data\n\n\nIf there is a need to request information that is not contained in the\nannouncement, perform the following steps.\n\n\n\n\nJoin the session\n\n\n\n\nCreate a session with the application by calling \nBusAttachment.joinSession\n.\n\n\nNOTE:\n The variables name and port are obtained from the\n   AboutListener::Announced member function.\n\n\n```java\n   SessionOpts sessionOpts = new SessionOpts();\n   sessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\n   sessionOpts.isMultipoint = false;\n   sessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\n   sessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\n\nMutable.IntegerValue sessionId = new Mutable.IntegerValue();\n\n\nbus.enableConcurrentCallbacks();\n\n\nStatus status = bus.joinSession(busName, port, sessionId, sessionOpts, new SessionListener());\n   if (status != Status.OK) {\n       return;\n   }\n   ```\n\n\n\n\nCreate an \nAboutProxy\n\n\n\n\nGenerate an About ProxyBusObject by passing the local \nBusAttachment\n, the\n   name of the remote \nBusAttachment\n, and the \nSessionId\n obtained from the\n   \nBusAttachment.joinSession\n call.   \n\n\njava\n   AboutProxy aboutProxy = new AboutProxy(mBus, busName, sessionId.value);\n   try {\n        Map\nString, Variant\n aboutData;\n        aboutData = aboutProxy.getAboutData(\"en\");\n   } catch (BusException e) {\n       System.out.println(\"Unexpected BusException.\")\n   }\n\n\n\n\nCreate \nAboutIconProxy\n (optional)\n\n\n\n\nGenerate an Icon ProxyBusObject by passing the local \nBusAttachment\n, the\n   name of the remote \nBusAttachment\n, and the \nSessionId\n obtained from the\n   \nBusAttachment.joinSession\n call.\n\n\n```java\n   AboutIconProxy aiProxy = new AboutIconProxy(clientBus, aListener.remoteBusName, sessionPortlistener.sessionId);\n   AboutIcon aIcon;\n   try {\n       aIcon = aiProxy.getAboutIcon();\n   } catch (BusException e) {\n       System.out.println(\"Unexpected BusException.\");\n   }\n\n\n// Get the Url\n   String url = aIcon.getUrl();\n   // Get the content\n   byte[] content = aIcon.getContent();\n   // Get the MimeType\n   String mimeType = aIcon.getMimeType();\n   ```",
            "title": "Java"
        },
        {
            "location": "/develop/api-guide/about/java/#about-feature-api-guide-java",
            "text": "",
            "title": "About Feature API Guide - Java"
        },
        {
            "location": "/develop/api-guide/about/java/#reference-code",
            "text": "Classes and interfaces used to send About Feature announcments and data     Class/interface  Description      AboutObj  Class that implements the org.alljoyn.About interface.    AboutDataListener  Interface that supplies the list of properties required for Announce signal payload and GetAboutData().    AboutIcon  Container class to hold information about an icon.    AboutIconObj  Class that implements the org.alljoyn.Icon interface.     Classes and interfaces used to receive About Feature announcements and data.     Class/interface  Description      AboutListener  Interface implemented by AllJoyn  users to receive About interface related events.    AboutProxy  Get proxy access to the  org.alljoyn.About  interface. This class enables the user to interact with the remote About  BusObject .    AboutIconProxy  Helper class that provides access to the org.alljoyn.Icon interface. This class enables the user to interact with the remote AboutIcon  BusObject .",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/about/java/#build-an-application-that-uses-about-server",
            "text": "The following is the high-level process to build an application that will\nbroadcast an Announce signal. Lines marked with a * are unique to\napplications using the About Feature.   Create an interface that represents an AllJoyn  interface using annotations.  Add  announced=\"true\"  to the  @BusInterface  annotation*  Implement the interface and the  BusObject  Implement an  AboutDataListener *  Create a new  BusAttachment  Connect  Bind a session port  Setup security etc.  Create and register the  BusObject  Create  AboutObj  and  announce *",
            "title": "Build an application that uses About Server"
        },
        {
            "location": "/develop/api-guide/about/java/#build-an-application-that-uses-about-client",
            "text": "The following is the high-level process to build an application that will\nreceive an  org.alljoyn.About.Announce  signal. Lines marked with a * are\nunique to applications using the About Feature.    Create and connect  BusAttachment  Implement an  AboutListener *  Register the new  AboutListener *  call  BusAttachment::WhoImplements  member function to specify interfaces your\n  application is interested in.*",
            "title": "Build an application that uses About Client"
        },
        {
            "location": "/develop/api-guide/about/java/#sample-code-for-sending-an-announce-signal",
            "text": "Create an interface that represents an AllJoyn interface using annotations  The interface is a collection methods, signals, and properties. The interface\ncan be represented in xml notation but an annotated interface that represents\nthat interface must be created.  For this sample the following xml interface was used.  interface name='com.example.about.feature.interface.sample'  \n   method name='Echo' \n     arg name='out_arg' type='s' direction='in' / \n     arg name='return_arg' type='s' direction='out' / \n   /method  /interface   An Java interface annotated so it can be used for AllJoyn.  Note the  announced \nannotation is set to  \"true\" .  The interface will not become part of the Announce  signal if the  announced  annotation is not added to the @BusInterface  annotation.  @BusInterface (name =  com.example.about.feature.interface.sample , announced= true )\npublic interface SampleInterface {\n\n    @BusMethod(name =  Echo )\n    public String echo(String str) throws BusException;\n}  Implement the interface and the  BusObject  The implementation of the  SampleInterface  can be done in just a few lines of\ncode.  public static class SampleService implements SampleInterface, BusObject {\n    public String echo(String str) {\n        return str;\n    }\n}  Implement an  AboutDataListener  The  AboutDataListener  interface has two methods  getAboutData  and getAnnouncedAboutData .  The method  getAnnouncedAboutData  is called by the AllJoyn framework to get a Map  where the key is a  String  and the value is a  Variant . The map is\nexpected to contain only the data fields that are announced.\nSee  About interface data fields . Feilds that have\nmultiple strings in multiple langauges will always return the language specified\nin the  DefaultLanguage  tag for the announced data.  The  getAboutData  method is called by the AllJoyn framework when a  AboutProxy \nobject calls  AboutProxy.getAboutData()  method. The language  must  be an\nIETF language tage specified by RFC 5646.  Important  if the language parameter\nis null or an empty string the about data for the  DefaultLanguage  should be\nreturned. If the language specified is not supported thow an ErrReplyBusException  with the  Status   LANGUAGE_NOT_SUPPORTED . If  any \nrequired field is not supplied then throw an  ErrReplyBusException  with the Status   ABOUT_ABOUTDATA_MISSING_REQUIRED_FIELD .  All strings must be encoded using UTF-8 encoding.  Sample implementation of an  AboutDataListener :  public class MyAboutData implements AboutDataListener {\n\n    @Override\n    public Map String, Variant  getAboutData(String language) throws ErrorReplyBusException {\n        System.out.println( MyAboutData.getAboutData was called for ` \n                + language +  ` language. );\n        Map String, Variant  aboutData = new HashMap String, Variant ();\n        // nonlocalized values\n        aboutData.put( AppId , new Variant(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}));\n        aboutData.put( DefaultLanguage , new Variant(new String( en )));\n        aboutData.put( DeviceId , new Variant(new String(\n                 93c06771-c725-48c2-b1ff-6a2a59d445b8 )));\n        aboutData.put( ModelNumber , new Variant(new String( A1B2C3 )));\n        aboutData.put( SupportedLanguages , new Variant(new String[] {  en ,  es  }));\n        aboutData.put( DateOfManufacture , new Variant(new String( 2014-09-23 )));\n        aboutData.put( SoftwareVersion , new Variant(new String( 1.0 )));\n        aboutData.put( AJSoftwareVersion , new Variant(Version.get()));\n        aboutData.put( HardwareVersion , new Variant(new String( 0.1alpha )));\n        aboutData.put( SupportUrl , new Variant(new String(\n                 http://www.example.com/support )));\n        // localized values\n        // If the language String is null or an empty string we return the default\n        // language in this case english\n        if ((language == null) || (language.length() == 0) || language.equals( en )) {\n            aboutData.put( DeviceName , new Variant(new String( A device name )));\n            aboutData.put( AppName , new Variant(new String( An application name )));\n            aboutData.put( Manufacturer , new Variant(new String(\n                     A mighty manufacturing company )));\n            aboutData.put( Description ,\n                    new Variant( new String( Sample showing the about feature in a service application )));\n        } else if (language.equals( es )) { // Spanish\n            aboutData.put( DeviceName , new Variant(new String(\n                     Un nombre de dispositivo )));\n            aboutData.put( AppName , new Variant(\n                    new String( Un nombre de aplicaci\u00f3n )));\n            aboutData.put( Manufacturer , new Variant(new String(\n                     Una empresa de fabricaci\u00f3n de poderosos )));\n            aboutData.put( Description ,\n                    new Variant( new String( Muestra que muestra la caracter\u00edstica de sobre en una aplicaci\u00f3n de servicio )));\n        } else {\n            throw new ErrorReplyBusException(Status.LANGUAGE_NOT_SUPPORTED);\n        }\n        return aboutData;\n    }\n\n    @Override\n    public Map String, Variant  getAnnouncedAboutData() throws ErrorReplyBusException {\n        System.out.println( MyAboutData.getAnnouncedAboutData was called. );\n        Map String, Variant  aboutData = new HashMap String, Variant ();\n        aboutData.put( AppId , new Variant(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}));\n        aboutData.put( DefaultLanguage , new Variant(new String( en )));\n        aboutData.put( DeviceName , new Variant(new String( A device name )));\n        aboutData.put( DeviceId , new Variant(new String( 93c06771-c725-48c2-b1ff-6a2a59d445b8 )));\n        aboutData.put( AppName , new Variant( new String( An application name )));\n        aboutData.put( Manufacturer , new Variant(new String( A mighty manufacturing company )));\n        aboutData.put( ModelNumber , new Variant(new String( A1B2C3 )));\n        return aboutData;\n    }\n\n}  About interface data fields     Field name  Required  Announced  Localized  Signature      AppId  yes  yes  no  ay    DefaultLanguage  yes  yes  no  s    DeviceName  no  yes  yes  s    DeviceId  yes  yes  no  s    AppName  yes  yes  yes  s    Manufacturer  yes  yes  yes  s    ModelNumber  yes  yes  no  s    SupportedLanguages  yes  no  no  as    Description  yes  no  yes  s    DateofManufacture  no  no  no  s    SoftwareVersion  yes  no  no  s    AJSoftwareVersion  yes  no  no  s    HardwareVersion  no  no  no  s    SupportUrl  no  no  no  s     Fields marked as Announced are part of the  Announce  signal.  If a value is not\nannounced then you must use the  org.alljoyn.About.GetAboutData  method to\naccess those values.  Fields marked as Required must all be supplied to send an  Announce  signal.\nThey are required even if the value is not part of the  Announce  signal.  AppId  is a 128-bit UUID (16-bytes) as specified in RFC 4122.  Create a new  BusAttachment  Basic setup that all AllJoyn applications must do to announce there interfaces.\nDepending on the application additional work may be needed to add in security or\napplication life-time management code.  BusAttachment bus;\nbus = new BusAttachment( AppName , BusAttachment.RemoteMessage.Receive);\n\nStatus status;\nstatus = bus.connect();\nif (status != Status.OK) {\n\n    return;\n}\n\n// Bind a session port\nMutable.ShortValue contactPort = new Mutable.ShortValue(CONTACT_PORT);\n\nSessionOpts sessionOpts = new SessionOpts();\nsessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\nsessionOpts.isMultipoint = false;\nsessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\nsessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\nstatus = bus.bindSessionPort(contactPort, sessionOpts, new SessionPortListener() {\n    public boolean acceptSessionJoiner(short sessionPort, String joiner, SessionOpts sessionOpts) {\n        if (sessionPort == CONTACT_PORT) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n});\nif (status != Status.OK) {\n    return;\n}  Create and Register the  BusObject  SampleService mySampleService = new SampleService();\nstatus = bus.registerBusObject(mySampleService,  /example/path );\nif (status != Status.OK) {\n    return;\n}  Create  AboutObj  and  announce  AboutObj aboutObj = new AboutObj(bus);\nstatus = aboutObj.announce(contactPort.value, new MyAboutData());\nif (status != Status.OK) {\n    System.out.println( Announce failed   + status.toString());\n    return;\n}",
            "title": "Sample code for sending an Announce signal"
        },
        {
            "location": "/develop/api-guide/about/java/#sample-code-for-receiving-an-announce-signal",
            "text": "Code that receives an  Announce  signal will need to create, start, and connect\na  BusAttachment  the same as the code that sent the  Announce  signal. The\napplication that receives the  Announce  signal does not need to bind a session\nport. See  Create a new  BusAttachment  Implement an  AboutListener  static class MyAboutListener implements AboutListener {\n    public void announced(String busName, int version, short port, AboutObjectDescription[] objectDescriptions, Map String, Variant  aboutData) {\n        // Place code here to handle Announce signal.\n    }\n}  The  AboutListener  is called by the AllJoyn routing node when an  Announce \nsignal is found.  The  Announced  call back contains all the information\ncontained in the received  Announce  signal as well as the unique BusName of the BusAttachment  that emitted the  Announce  signal. This information can be used\nto form a session with the remote device; and Make a  ProxyBus  object based on\nthe interfaces reported in the  objectDescriptions .  Register the new  AboutListener  and call  BusAttachment.whoImplements  ````java\nAboutListener listener = new MyAboutListener();\nbus.registerAboutListener(listener);  String ifaces[] = {\"com.example.about.feature.interface.sample\"};\nstatus = bus.whoImplements(ifaces);\nif (status != Status.OK) {\n    return;\n}  \n#### The whoImplements method\nThe `whoImplements` method is used to declare your interest in one or more\nspecific interfaces. If a remote device is announcing the interface(s) then\nall Registered `AboutListeners` will be called.\n\nFor example, if you need both `com.example.Audio` *and*\n`com.example.Video` interfaces then do the following.\n\nRegister `AboutListener` once:\n```java\nString ifaces[] = { com.example.Audio ,  com.example.Video };\nRegisterAboutListener(aboutListener);\nbus.whoImplements(ifaces));  If the  AboutListener  should be called if  com.example.Audio   or  com.example.Video  interfaces are found then call  WhoImplements  multiple\ntimes:  RegisterAboutListener(aboutListener);\nString audioInterface[] = { com.example.Audio };\nbus.whoImplements(audioInterface);\nString videoInterface[] = { com.example.Video };\nbus.whoImplements(videoInterface);  The interface name may be a prefix followed by a  * .  Using this, the example\nwhere we are interested in  com.example.Audio   or   com.example.Video \ninterfaces could be written as:  String exampleInterface[] = { com.example.* };\nRegisterAboutListener(aboutListener);\nWhoImplements(exampleInterface);  The AboutListener will receive any announcement that implements an interface\nbeginning with the  com.example.  name.  It is the AboutListeners responsibility to parse through the reported interfaces\nto figure out what should be done in response to the  Announce  signal.  Calls to  whoImplements  is ref counted. If  whoImplements  is called with the same\nlist of interfaces multiple times then  cancelWhoImplements  must also be called\nmultiple times with the same list of interfaces.  Specifying  null  for the  interfaces  parameter is allowed, however, it\ncould have significant impact on network performance and should be avoided\nunless all announcements are needed.  Add an AboutIcon (optional)  An application that sends an  Announce  signal  can be extended to broadcast a\ndevice icon using an instance of the  AboutIconObj  class.  Provision for the Icon content and URL  An icon is published directly as a byte array or a reference URL, and is\nprovisioned as follows:  Create an icon using a byte array.  An Icon size of 72 pixels x 72 pixels is\nrecommended.  byte[] iconContent = { (byte)0x89, 0x50, 0x4E, 0x47/* Add relevant data here */ };\nAboutIcon icon = null;\ntry {\n    icon = new AboutIcon( image/png , iconContent);\n} catch (BusException e) {\n    System.out.println( AboutIcon threw a BusException when it was unexpected. );\n}  Create an icon using a URL.  AboutIcon icon = null;\ntry {\n    icon = new AboutIcon( image/png ,  http://www.example.com );\n} catch (BusException e) {\n    System.out.println( AboutIcon threw a BusException when it was unexpected. );\n}  As long as the MimeType of the Url and the icon content are the same. Both the\nUrl and icon content can be set.  byte[] iconContent = { (byte)0x89, 0x50, 0x4E, 0x47/* Add relevant data here */ };\nAboutIcon icon = null;\ntry {\n    icon = new AboutIcon( image/png ,  http://www.example.com , iconContent);\n} catch (BusException e) {\n    System.out.println( AboutIcon threw a BusException when it was unexpected. );\n}  AboutIconObj  The  AboutIconObj  will create and register a  BusObject  to handle remote\nmethod calls made on the  org.alljoyn.Icon  interface.  The AboutIconObj is\nannounced by default.  Applications interested in the  org.alljoyn.Icon \ninterface can call WhoImplements( org.alljoyn.Icon ) to find applications\nthat broadcast device icon information.  Announce the  org.alljoyn.Icon  interface:  AboutIconObj aio = new AboutIconObj(bus, icon);\nAboutObj aboutObj = new AboutObj(bus);\nstatus = aboutObj.announce(PORT_NUMBER, aboutData));  Discover the  org.alljoyn.Icon interface  status = clientBus.whoImplements(new String[] {org.alljoyn.bus.ifaces.Icon.INTERFACE_NAME});  Using Ping to determine presence  The  BusAttachment   Ping  method can be used to determine\nif a device is responsive. Contents of an  org.alljoyn.About.Announce  signal can\nbe stale so it is recommended to ping the device to see if it is still present\nand responsive before attempting to form a connection.  NOTE:  The  BusAttachment.ping  method makes a bus call. If  BusAttachment.ping \nis called inside an AllJoyn callback,  BusAttachment.enableConcurrentCallbacks \nmust be called first.  // pinging a remote bus, wait a max of 5 seconds\nbus.enableConcurrentCallbacks();\nQStatus status = bus.ping(busName.c_str(), 5000);\nif( ER_OK == status) {\n   // remote device found\n   ...\n}  Request non-announced data  If there is a need to request information that is not contained in the\nannouncement, perform the following steps.   Join the session   Create a session with the application by calling  BusAttachment.joinSession .  NOTE:  The variables name and port are obtained from the\n   AboutListener::Announced member function.  ```java\n   SessionOpts sessionOpts = new SessionOpts();\n   sessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\n   sessionOpts.isMultipoint = false;\n   sessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\n   sessionOpts.transports = SessionOpts.TRANSPORT_ANY;  Mutable.IntegerValue sessionId = new Mutable.IntegerValue();  bus.enableConcurrentCallbacks();  Status status = bus.joinSession(busName, port, sessionId, sessionOpts, new SessionListener());\n   if (status != Status.OK) {\n       return;\n   }\n   ```   Create an  AboutProxy   Generate an About ProxyBusObject by passing the local  BusAttachment , the\n   name of the remote  BusAttachment , and the  SessionId  obtained from the\n    BusAttachment.joinSession  call.     java\n   AboutProxy aboutProxy = new AboutProxy(mBus, busName, sessionId.value);\n   try {\n        Map String, Variant  aboutData;\n        aboutData = aboutProxy.getAboutData(\"en\");\n   } catch (BusException e) {\n       System.out.println(\"Unexpected BusException.\")\n   }   Create  AboutIconProxy  (optional)   Generate an Icon ProxyBusObject by passing the local  BusAttachment , the\n   name of the remote  BusAttachment , and the  SessionId  obtained from the\n    BusAttachment.joinSession  call.  ```java\n   AboutIconProxy aiProxy = new AboutIconProxy(clientBus, aListener.remoteBusName, sessionPortlistener.sessionId);\n   AboutIcon aIcon;\n   try {\n       aIcon = aiProxy.getAboutIcon();\n   } catch (BusException e) {\n       System.out.println(\"Unexpected BusException.\");\n   }  // Get the Url\n   String url = aIcon.getUrl();\n   // Get the content\n   byte[] content = aIcon.getContent();\n   // Get the MimeType\n   String mimeType = aIcon.getMimeType();\n   ```",
            "title": "Sample code for receiving an Announce signal"
        },
        {
            "location": "/develop/api-guide/about/objc-legacy/",
            "text": "About API Guide - iOS\n\n\nReference code\n\n\nThe reference code consists of service and client implementations of the About feature.\n\n\nClasses used to send AboutData\n\n\n\n\n\n\n\n\nService class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutService\n\n\nClass the implements the org.alljoyn.About interface.\n\n\n\n\n\n\nAboutIconService\n\n\nClass that implements the org.alljoyn.Icon interface.\n\n\n\n\n\n\nPropertyStore\n\n\nInterface that supplies the list of properties required for Announce signal payload and GetAboutData().\n\n\n\n\n\n\n\n\nClasses used to receive AboutData\n\n\n\n\n\n\n\n\nClient class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutClient\n\n\nHelper class for discovering About Service that provides access to the Announcements and to the AboutService. It listens for Announcements sent using the org.alljoyn.About interface.\n\n\n\n\n\n\nAboutIconClient\n\n\nHelper class that provides access to the AboutIconService.\n\n\n\n\n\n\n\n\nObtain the About feature\n\n\nSee the \nBuilding iOS/OS X section\n for \ninstructions on compiling the About feature.\n\n\nBuild an application that uses About Service\n\n\nThe following steps provide the high-level process to build an \napplication that will broadcast AboutData.\n\n\n\n\nCreate the base for the AllJoyn\n application.\n\n\nImplement PropertyStore to produce an AboutData. (See \n\nCreate a PropertyStore Implementation\n.)\n\n\nInstantiate a PropertyStore.\n\n\nCreate and register the AboutService, providing it with \nthe PropertyStore.\n\n\nAnnounce the AboutService.\n\n\n\n\nBuild an application that uses About Client\n\n\nThe following steps provide the high-level process to build an \napplication that will receive AboutData.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nCreate and register an AnnouncementReceiver providing \nit with the AnnounceListener.\n\n\nCreate and use the AboutClient.\n\n\n\n\nSetting Up the AllJoyn Framework\n\n\nEvery AllJoyn application requires a base set to be in place \nbefore implementing specific features that include creating a \nBusAttachment and connecting to the AllJoyn framework.\n\n\nCreate instance of BusAttachment\n\n\nself.clientBusAttachment = [[AJNBusAttachment alloc]\ninitWithApplicationName:APPNAME allowRemoteMessages:ALLOWREMOTEMESSAGES];\n\n\n\n\nCreate password for the bundled router\n\n\nNOTE: Thin libraries at AllSeen Alliance version 14.06 or higher \ndo not require this step.\n\n\nTo allow thin libraries to connect to the bundled router, \nthe router requires a password.\n\n\n[AJNPasswordManager setCredentialsForAuthMechanism:@\nALLJOYN_PIN_KEYX\n usingPassword:@\n000000\n];\n\n\n\n\nStart and connect the BusAttachment\n\n\nOnce created, the BusAttachment must be connected to the AllJoyn framework.\n\n\n[self.clientBusAttachment connectWithArguments:@\n];\n\n\n\n\nAdvertise the router\n\n\nThe application should advertise the router so that the thin \nlibrary can find it and connect to it.\n\n\n[self.clientBusAttachment requestWellKnownName:@\nquiet@org.alljoyn.BusNode.AboutService withFlags:kAJNBusNameFlagDoNotQueue];\n\n[clientBusAttachment advertiseName:@\nquiet@org.alljoyn.BusNode.AboutService.542e8562-e29b-89c2-b456-\n334455667788\n]\n\n\n\n\nImplementing an Application that Uses AboutService\n\n\nImplementing an About Service requires creating and registering \nan instance of the AboutService class.\n\n\nNOTE: Verify the BusAttachment has been created, started and \nconnected before implementing the AboutService. See \nSetting Up the AllJoyn Framework\n \nfor the code snippets. Code in this chapter references a \nvariable \nclientBusAttachment\n (the BusAttachment variable name).\n\n\nDeclare listener class\n\n\nTypically, a \nshouldAcceptSessionJoinerNamed:onSessionPort \nwithSessionOptions:\n callback in \nSessionPortListener\n has a \ncheck to allow or disallow access. Since the AboutService \nrequires access to any application using AboutClient with a \nspecific port, return true when this callback is triggered.\n\n\nself.aboutSessionPortListener = [[CommonBusListener alloc]\ninitWithServicePort:1000];\n\nself.serviceBusAttachment registerBusListener:self.aboutSessionPortListener];\n\n\n\n\nBind session port\n\n\nNOTE: This step is not mandatory if you are only sending an \nannouncement. To allow incoming connections, the formation \nof a session is needed. The AllJoyn framework must be told \nthat connections are allowed.\n\n\nAJNSessionOptions *opt = [[AJNSessionOptions alloc] \n   initWithTrafficType:kAJNTrafficMessages \n   supportsMultipoint:false proximity:kAJNProximityAny \n   transportMask:kAJNTransportMaskAny];\n\nserviceStatus = [self.serviceBusAttachment \n   bindSessionOnPort:1000 withOptions:opt \n   withDelegate:self.aboutSessionPortListener];\n\n\n\n\nCreate a PropertyStore implementation\n\n\nThe PropertyStore interface is required by the AboutService \nto store the provisioned values for the About interface data \nfields (listed in \nAbout interface data fields\n). \nSee the \nAbout Interface Definition\n \nfor more information.\n\n\nNOTE: It is recommended that OEMs create a shared provisioning \nfile that includes the DefaultLanguage, DeviceName, and \nDeviceID fields. This file can be used by developers to manage \nthese fields in the AllJoyn services that make use of them.\n\n\nAbout interface data fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nAnnounced\n\n\nSignature\n\n\n\n\n\n\n\n\n\n\nAppId\n\n\nyes\n\n\nyes\n\n\nay\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceName\n\n\nyes\n\n\nyes\n\n\n\n\n\n\n\n\nDeviceId\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nAppName\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nManufacturer\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nModelNumber\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nSupportedLanguages\n\n\nyes\n\n\nno\n\n\nas\n\n\n\n\n\n\nDescription\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nDateofManufacture\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSoftwareVersion\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nAJSoftwareVersion\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nHardwareVersion\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSupportUrl\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\n\n\nSample PropertyStore implementation\n\n\nAn example PropertyStore implementation is provided below \nthat specifies the following dictionary of metadata fields:\n\n\n\n\nKeys are the field names.\n\n\nValues are a Map of String to Object entries, where the \nString is the language tag associated with the Object value.\n\n\n\n\n- (QStatus)fillAboutPropertyStoreImplData\n{\n   QStatus status;\n\n   // AppId\n   status = [self.aboutPropertyStoreImpl setAppId:self.uniqueID];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   // AppName\n   status = [self.aboutPropertyStoreImpl setAppName:@\nAboutConfig\n];\n   if (status != ER_OK) {\n   return status;\n   }\n\n   // DeviceId\n   status = [self.aboutPropertyStoreImpl setDeviceId:@\n123375477\n];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   // DeviceName\n   status = [self.aboutPropertyStoreImpl setDeviceName:@\nScreen\n];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   // SupportedLangs\n   NSArray *languages = @[@\nen\n, @\nsp\n, @\nfr\n];\n   status = [self.aboutPropertyStoreImpl setSupportedLangs:languages];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   DefaultLang\n   status = [self.aboutPropertyStoreImpl setDefaultLang:@\nen\n];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   ModelNumber\n   status = [self.aboutPropertyStoreImpl setModelNumber:@\nWxfy388i\n];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   DateOfManufacture\n   status = [self.aboutPropertyStoreImpl setDateOfManufacture:@\n10/1/2199\n];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   SoftwareVersion\n   status = [self.aboutPropertyStoreImpl setSoftwareVersion:@\n12.20.44\n];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   AjSoftwareVersion\n   status = [self.aboutPropertyStoreImpl setAjSoftwareVersion:[AJNVersion versionInformation]];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   HardwareVersion\n   status = [self.aboutPropertyStoreImpl setHardwareVersion:@\n355.499. b\n];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   Description\n   status = [self.aboutPropertyStoreImpl setDescription:@\nThis is an AllJoyn Application\n \n      language:@\nen\n];\n   if (status != ER_OK) {\n      return status;\n   }\n   status = [self.aboutPropertyStoreImpl setDescription:@\nEsta es una AllJoyn\n\n   aplicaci\u00f3n\n language:@\nsp\n];\n   if (status != ER_OK) {\n      return status;\n   }\n   status = [self.aboutPropertyStoreImpl setDescription:@\nC'est une AllJoyn application\n \n      language:@\nfr\n];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   Manufacturer\n   status = [self.aboutPropertyStoreImpl setManufacturer:@\nCompany\n language:@\nen\n];\n   if (status != ER_OK) {\n      return status;\n   }\n   status = [self.aboutPropertyStoreImpl setManufacturer:@\nEmpresa\n language:@\nsp\n];\n   if (status != ER_OK) {\n      return status;\n   }\n   status = [self.aboutPropertyStoreImpl setManufacturer:@\nEntreprise\n language:@\nfr\n];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   SupportedUrl\n   status = [self.aboutPropertyStoreImpl setSupportUrl:@\nhttp://www.allseenalliance.org\n];\n   if (status != ER_OK) {\n      return status;\n   }\n      return status;\n   }\n\n\n\n\nProvision PropertyStore with default values\n\n\nIn the application, the PropertyStore instance you created will \nbe loaded with the default values. In the sample implementation \nabove, the PropertyStore instance is provided with a default values map.\n\n\nThe following subsections highlight provisioning fields \naccording to their data type.\n\n\nAppId field\n\n\nThe AppId field is an array of bytes. It is a globally unique \nidentifier (GUID) encoded as an array of 16 bytes.\n\n\nself.uniqueID = [[NSUUID UUID] UUIDString]; \n\n[self.aboutPropertyStoreImpl setAppId:self.uniqueID];\n\n\n\n\nSupportedLanguages field\n\n\nThe SupportedLanguages field is a list of text strings. \nSome fields can have a language-dependent value that must \nbe provided for each of the supported languages.\n\n\nNSArray *languages = @[@\nen\n, @\nsp\n, @\nfr\n]; \n\n[self.aboutPropertyStoreImpl setSupportedLangs:languages];\n\n\n\n\nNon-language-specific fields\n\n\nNon-language-specific fields support a single supplied text \nstring. Following is an example for the ModelNumber field on \nhow to insert into the PropertyStore. The code below can be \nused with the field name being replaced by other field names \nlisted in \nAbout data interface fields\n.\n\n\n[self.aboutPropertyStoreImpl setModelNumber:@\nWxfy388i\n];\n\n\n\n\nLanguage-dependent fields\n\n\nLanguage-dependent fields support a single supplied text string. \nBelow is an example for the Description field on how to insert \ninto the PropertyStore. The code below can be used with the \nfield name being replaced by other field names listed in \nAbout data interface fields\n.\n\n\n[self.aboutPropertyStoreImpl setDescription:@\nThis is an AllJoyn application\n language:@\nen\n];\n\n[self.aboutPropertyStoreImpl setDescription:@\nEsta es una AllJoyn aplicacion\n language:@\nsp\n];\n\n[self.aboutPropertyStoreImpl setDescription:@\nC'est une AllJoyn application\n language:@\nfr\n];\n\n\n\n\nCreate the AboutService object\n\n\nFor an application to send AboutData, it requires an instance \nof the AboutService class. AboutServiceImpl is an implementation \nwrapper around AllJoyn native calls that handle the interactions \nbetween About Service and About Client.\n\n\nAboutService aboutService = AboutServiceImpl.getInstance();\n\n\n\n\nStart Service mode\n\n\nRegister the relevant BusObjects and add the relevant interfaces \nto the Announcement's ObjectDescription.\n\n\n[self.aboutServiceApi startWithBus:self.serviceBusAttachment \n   andPropertyStore:self.aboutPropertyStoreImpl];\n\n\n\n\nAdd an AboutIconService (optional)\n\n\nAn application that sends AboutData can be extended to broadcast \na device. AboutServiceImpl is also an implementation wrapper \naround AllJoyn native calls that handle the interactions \nbetween applications that use the AboutIconClient class.\n\n\nProvision for the Icon content and URL\n\n\nAn Icon is published directly as a byte array or a reference \nURL, and must be provisioned as follows:\n\n\nuint8_t aboutIconContent[] = { 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,\n0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44,\n   0x52, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x08, 0x02, 0x00, 0x00,\n\n0x00, 0x02, 0x50, 0x58, 0xEA, 0x00,\n   0x00, 0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xAF, 0xC8, 0x37, 0x05,\n\n0x8A, 0xE9, 0x00, 0x00, 0x00, 0x19,\n   0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00,\n\n0x41, 0x64, 0x6F, 0x62, 0x65, 0x20,\n   0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65,\n\n0x3C, 0x00, 0x00, 0x00, 0x18, 0x49,\n   0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0x3F, 0x95, 0x9F, 0x01, 0x37, 0x60,\n\n0x62, 0xC0, 0x0B, 0x46, 0xAA, 0x34,\n   0x40, 0x80, 0x01, 0x00, 0x06, 0x7C, 0x01, 0xB7, 0xED, 0x4B, 0x53, 0x2C, 0x00,\n\n0x00, 0x00, 0x00, 0x49, 0x45, 0x4E,\n   0x44, 0xAE, 0x42, 0x60, 0x82 };\n\n};\n\nNSString *mimeType = @\nimage/png\n; /* This should correspond \n   to the content */ NSString *url = @\nhttp://tinyurl.com/llrqvrb\n; \n   /* An alternate access to the Icon\n*/\n\n\n\n\nCreate and register DeviceIcon object\n\n\nRegister the relevant BusObjects and add the relevant interfaces \nto the Announcement's ObjectDescription.\n\n\nself.aboutIconService = [[AJNAboutIconService alloc] initWithBus:self.serviceBusAttachment \n   mimeType:mimeType url:url content:aboutIconContent csize:csize];\n\n[self.aboutIconService registerAboutIconService];\n\n\n\n\nAdvertise to allow connections\n\n\n[self.serviceBusAttachment advertiseName:([self.serviceBusAttachment uniqueName])\nwithTransportMask:(kAJNTransportMaskAny)];\n\n\n\n\nSend the Announcement\n\n\n[self.aboutServiceApi announce];\n\n\n\n\nUnregister and delete AboutService and BusAttachment\n\n\nWhen your process is done with the AboutService and no longer \nwishes to send announcements, unregister the process from the \nAllJoyn bus and then delete variables used.\n\n\n// Stop AboutIcon\n[self.serviceBusAttachment unregisterBusObject:self.aboutIconService];\nself.aboutIconService = nil;\n\n// Delete AboutServiceApi [self.aboutServiceApi destroyInstance]; \n   self.aboutServiceApi = nil;\n\n// Delete AboutPropertyStoreImpl self.aboutPropertyStoreImpl = nil;\n\n// Bus attachment cleanup\n[self.serviceBusAttachment cancelAdvertisedName:[self.serviceBusAttachment \n   uniqueName] withTransportMask:kAJNTransportMaskAny];\n\n[self.serviceBusAttachment unbindSessionFromPort:SERVICE_PORT];\n\n// Delete AboutSessionPortListener\n[self.serviceBusAttachment unregisterBusListener:self.aboutSessionPortListener];\nself.aboutSessionPortListener = nil;\n\n// Stop bus attachment\n[self.serviceBusAttachment stop];\nself.serviceBusAttachment = nil;\n\n\n\n\nImplementing an Application that Uses AboutClient\n\n\nTo implement an application to receive AboutData, use the \nAboutClient class. By using the AboutClient class, your \napplication is notified when About Service instances \nsend announcements.\n\n\nVerify the BusAttachment has been created, started and \nconnected before implementing an About Client. See \nSetting \nUp the AllJoyn Framework\n for the \ncode snippets. Code in this chapter references a variable \n\nself.clientBusAttachment\n (the BusAttachment variable name).\n\n\nSetup to receive the Announce signal\n\n\nIn order to receive the Announce signal from an application \nusing AboutService, a class implementation of AJNAnnouncementListener \nprotocol must be created.\n\n\nCreate class to implement AJNAnnouncementListener protocol\n\n\nThis declaration of a class will allow for the signals to \nbe received. It must implement the pure virtual function Announce.\n\n\n@interface sampleClass \nAJNAnnouncementListener\n\n\n- (void)announceWithVersion:(uint16_t)version \n                       port:(uint16_t)port\n                    busName:(NSString *)busName \n         objectDescriptions:(NSMutableDictionary *)objectDescs\n                  aboutData:(NSMutableDictionary **)aboutData {\n// add your implementation here\n}\n\n\n\n\nImplement the Announce method that handles the Announce signal\n\n\nWith everything linked up using the AllJoyn framework, the \nmethod registered with the AllJoyn framework will be executed \nupon receipt of an Announce signal.\n\n\nBecause every application is different, as a developer you \nmust process the AboutData and determine the following:\n\n\n\n\nHow it should be rendered in the UI.\n\n\nWhen to request the data that is not contained in the Announce signal.\n\n\nAny logic that is needed.\n\n\n\n\nRegister the AJNAnnouncementListener\n\n\nWhen registering an announcement listener, specify which \ninterfaces the application is interested in. The code below \nshows a listener registered to receive Announce signals \nthat include an object implementing the INTERFACE_NAME interface.\n\n\nself.announcementReceiver = [[AJNAnnouncementReceiver alloc]\ninitWithAnnouncementListener:self andBus:self.clientBusAttachment];\n\nconst char* interfaces[] = { [INTERFACE_NAME UTF8String] }; \n\n[self.announcementReceiver registerAnnouncementReceiverForInterfaces:interfaces\n   withNumberOfInterfaces:1];\n\n\n\n\nUsing ping to determine presence\n\n\nThe AJNBusAttachment pingPeer member function can be used to \ndetermine if a device is responsive. Contents of an Announce \nsignal can be stale so it may be useful to ping the device to \nsee if it is still present and responsive before attempting \nto form a connection.\n\n\nNOTE: The AJNBusAttachment pingPeer method makes a bus call. \nIf pingPeer is called inside an AllJoyn callback, \nAJNBusAttachment \nenableConcurrentCallbacks\n must be called first.\n\n\n// When pinging a remote bus name wait a max of 5 seconds\n[self.clientBusAttachment enableConcurrentCallbacks];\nQStatus status = [self.clientBusAttachment pingPeer:busName \n  withTimeout:5000];\nif (ER_OK == status) {\n   ...\n}\n\n\n\n\nRequest non-announced data\n\n\nIf there is a need to request information that is not contained \nin the announcement (meaning they are not marked as announcable), \ncomplete the tasks in the following subsections.\n\n\nJoin a session\n\n\nCreate a session with the application by using the \nBusAttachment JoinSession API.\n\n\nNOTE: The variables name and port are set from the AboutData \nfrom the Announce method.\n\n\nAJNSessionOptions *opt = [[AJNSessionOptions alloc] \ninitWithTrafficType:kAJNTrafficMessages supportsMultipoint:false \nproximity:kAJNProximityAny transportMask:kAJNTransportMaskAny];\n\n\nself.sessionId = [self.clientBusAttachment \n      joinSessionWithName:[self.clientInformation.announcement busName]\n            onPort:[self.clientInformation.announcement port]\n            withDelegate:(nil) options:opt];\n\n\n\n\nCreate AboutClient\n\n\nGenerate an AJNAboutClient and create an instance passing in \nthe BusAttachment that was created in \nStart and connect the \nBusAttachment\n.\n\n\nAJNAboutClient *ajnAboutClient = [[AJNAboutClient alloc]\ninitWithBus:self.clientBusAttachment];\n\n\n\n\nCreate AJNAboutIconClient\n\n\nGenerate an AJNAboutIconClient and create an instance passing \nin the BusAttachment created in \nStart and connect the BusAttachment\n.\n\n\nself.ajnAboutIconClient = [[AJNAboutIconClient alloc]\ninitWithBus:self.clientBusAttachment];\n\n[self.ajnAboutIconClient urlFromBusName:announcementBusName url:\nurl \nsessionId:self.sessionID];\n\n\n\n\nShutdown\n\n\nOnce you are done using the About feature and the AllJoyn \nframework, free the variables used in the application.\n\n\nself.clientBusAttachment = nil;",
            "title": "Objc legacy"
        },
        {
            "location": "/develop/api-guide/about/objc-legacy/#about-api-guide-ios",
            "text": "",
            "title": "About API Guide - iOS"
        },
        {
            "location": "/develop/api-guide/about/objc-legacy/#reference-code",
            "text": "The reference code consists of service and client implementations of the About feature.  Classes used to send AboutData     Service class  Description      AboutService  Class the implements the org.alljoyn.About interface.    AboutIconService  Class that implements the org.alljoyn.Icon interface.    PropertyStore  Interface that supplies the list of properties required for Announce signal payload and GetAboutData().     Classes used to receive AboutData     Client class  Description      AboutClient  Helper class for discovering About Service that provides access to the Announcements and to the AboutService. It listens for Announcements sent using the org.alljoyn.About interface.    AboutIconClient  Helper class that provides access to the AboutIconService.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/about/objc-legacy/#obtain-the-about-feature",
            "text": "See the  Building iOS/OS X section  for \ninstructions on compiling the About feature.",
            "title": "Obtain the About feature"
        },
        {
            "location": "/develop/api-guide/about/objc-legacy/#build-an-application-that-uses-about-service",
            "text": "The following steps provide the high-level process to build an \napplication that will broadcast AboutData.   Create the base for the AllJoyn  application.  Implement PropertyStore to produce an AboutData. (See  Create a PropertyStore Implementation .)  Instantiate a PropertyStore.  Create and register the AboutService, providing it with \nthe PropertyStore.  Announce the AboutService.",
            "title": "Build an application that uses About Service"
        },
        {
            "location": "/develop/api-guide/about/objc-legacy/#build-an-application-that-uses-about-client",
            "text": "The following steps provide the high-level process to build an \napplication that will receive AboutData.   Create the base for the AllJoyn application.  Create and register an AnnouncementReceiver providing \nit with the AnnounceListener.  Create and use the AboutClient.",
            "title": "Build an application that uses About Client"
        },
        {
            "location": "/develop/api-guide/about/objc-legacy/#setting-up-the-alljoyn-framework",
            "text": "Every AllJoyn application requires a base set to be in place \nbefore implementing specific features that include creating a \nBusAttachment and connecting to the AllJoyn framework.  Create instance of BusAttachment  self.clientBusAttachment = [[AJNBusAttachment alloc]\ninitWithApplicationName:APPNAME allowRemoteMessages:ALLOWREMOTEMESSAGES];  Create password for the bundled router  NOTE: Thin libraries at AllSeen Alliance version 14.06 or higher \ndo not require this step.  To allow thin libraries to connect to the bundled router, \nthe router requires a password.  [AJNPasswordManager setCredentialsForAuthMechanism:@ ALLJOYN_PIN_KEYX  usingPassword:@ 000000 ];  Start and connect the BusAttachment  Once created, the BusAttachment must be connected to the AllJoyn framework.  [self.clientBusAttachment connectWithArguments:@ ];  Advertise the router  The application should advertise the router so that the thin \nlibrary can find it and connect to it.  [self.clientBusAttachment requestWellKnownName:@ quiet@org.alljoyn.BusNode.AboutService withFlags:kAJNBusNameFlagDoNotQueue];\n\n[clientBusAttachment advertiseName:@ quiet@org.alljoyn.BusNode.AboutService.542e8562-e29b-89c2-b456-\n334455667788 ]",
            "title": "Setting Up the AllJoyn Framework"
        },
        {
            "location": "/develop/api-guide/about/objc-legacy/#implementing-an-application-that-uses-aboutservice",
            "text": "Implementing an About Service requires creating and registering \nan instance of the AboutService class.  NOTE: Verify the BusAttachment has been created, started and \nconnected before implementing the AboutService. See  Setting Up the AllJoyn Framework  \nfor the code snippets. Code in this chapter references a \nvariable  clientBusAttachment  (the BusAttachment variable name).  Declare listener class  Typically, a  shouldAcceptSessionJoinerNamed:onSessionPort \nwithSessionOptions:  callback in  SessionPortListener  has a \ncheck to allow or disallow access. Since the AboutService \nrequires access to any application using AboutClient with a \nspecific port, return true when this callback is triggered.  self.aboutSessionPortListener = [[CommonBusListener alloc]\ninitWithServicePort:1000];\n\nself.serviceBusAttachment registerBusListener:self.aboutSessionPortListener];  Bind session port  NOTE: This step is not mandatory if you are only sending an \nannouncement. To allow incoming connections, the formation \nof a session is needed. The AllJoyn framework must be told \nthat connections are allowed.  AJNSessionOptions *opt = [[AJNSessionOptions alloc] \n   initWithTrafficType:kAJNTrafficMessages \n   supportsMultipoint:false proximity:kAJNProximityAny \n   transportMask:kAJNTransportMaskAny];\n\nserviceStatus = [self.serviceBusAttachment \n   bindSessionOnPort:1000 withOptions:opt \n   withDelegate:self.aboutSessionPortListener];  Create a PropertyStore implementation  The PropertyStore interface is required by the AboutService \nto store the provisioned values for the About interface data \nfields (listed in  About interface data fields ). \nSee the  About Interface Definition  \nfor more information.  NOTE: It is recommended that OEMs create a shared provisioning \nfile that includes the DefaultLanguage, DeviceName, and \nDeviceID fields. This file can be used by developers to manage \nthese fields in the AllJoyn services that make use of them.  About interface data fields     Field name  Required  Announced  Signature      AppId  yes  yes  ay    DefaultLanguage  yes  yes  s    DeviceName  yes  yes     DeviceId  yes  yes  s    AppName  yes  yes  s    Manufacturer  yes  yes  s    ModelNumber  yes  yes  s    SupportedLanguages  yes  no  as    Description  yes  no  s    DateofManufacture  no  no  s    SoftwareVersion  yes  no  s    AJSoftwareVersion  yes  no  s    HardwareVersion  no  no  s    SupportUrl  no  no  s     Sample PropertyStore implementation  An example PropertyStore implementation is provided below \nthat specifies the following dictionary of metadata fields:   Keys are the field names.  Values are a Map of String to Object entries, where the \nString is the language tag associated with the Object value.   - (QStatus)fillAboutPropertyStoreImplData\n{\n   QStatus status;\n\n   // AppId\n   status = [self.aboutPropertyStoreImpl setAppId:self.uniqueID];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   // AppName\n   status = [self.aboutPropertyStoreImpl setAppName:@ AboutConfig ];\n   if (status != ER_OK) {\n   return status;\n   }\n\n   // DeviceId\n   status = [self.aboutPropertyStoreImpl setDeviceId:@ 123375477 ];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   // DeviceName\n   status = [self.aboutPropertyStoreImpl setDeviceName:@ Screen ];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   // SupportedLangs\n   NSArray *languages = @[@ en , @ sp , @ fr ];\n   status = [self.aboutPropertyStoreImpl setSupportedLangs:languages];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   DefaultLang\n   status = [self.aboutPropertyStoreImpl setDefaultLang:@ en ];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   ModelNumber\n   status = [self.aboutPropertyStoreImpl setModelNumber:@ Wxfy388i ];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   DateOfManufacture\n   status = [self.aboutPropertyStoreImpl setDateOfManufacture:@ 10/1/2199 ];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   SoftwareVersion\n   status = [self.aboutPropertyStoreImpl setSoftwareVersion:@ 12.20.44 ];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   AjSoftwareVersion\n   status = [self.aboutPropertyStoreImpl setAjSoftwareVersion:[AJNVersion versionInformation]];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   HardwareVersion\n   status = [self.aboutPropertyStoreImpl setHardwareVersion:@ 355.499. b ];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   Description\n   status = [self.aboutPropertyStoreImpl setDescription:@ This is an AllJoyn Application  \n      language:@ en ];\n   if (status != ER_OK) {\n      return status;\n   }\n   status = [self.aboutPropertyStoreImpl setDescription:@ Esta es una AllJoyn\n\n   aplicaci\u00f3n  language:@ sp ];\n   if (status != ER_OK) {\n      return status;\n   }\n   status = [self.aboutPropertyStoreImpl setDescription:@ C'est une AllJoyn application  \n      language:@ fr ];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   Manufacturer\n   status = [self.aboutPropertyStoreImpl setManufacturer:@ Company  language:@ en ];\n   if (status != ER_OK) {\n      return status;\n   }\n   status = [self.aboutPropertyStoreImpl setManufacturer:@ Empresa  language:@ sp ];\n   if (status != ER_OK) {\n      return status;\n   }\n   status = [self.aboutPropertyStoreImpl setManufacturer:@ Entreprise  language:@ fr ];\n   if (status != ER_OK) {\n      return status;\n   }\n\n   //   SupportedUrl\n   status = [self.aboutPropertyStoreImpl setSupportUrl:@ http://www.allseenalliance.org ];\n   if (status != ER_OK) {\n      return status;\n   }\n      return status;\n   }  Provision PropertyStore with default values  In the application, the PropertyStore instance you created will \nbe loaded with the default values. In the sample implementation \nabove, the PropertyStore instance is provided with a default values map.  The following subsections highlight provisioning fields \naccording to their data type.  AppId field  The AppId field is an array of bytes. It is a globally unique \nidentifier (GUID) encoded as an array of 16 bytes.  self.uniqueID = [[NSUUID UUID] UUIDString]; \n\n[self.aboutPropertyStoreImpl setAppId:self.uniqueID];  SupportedLanguages field  The SupportedLanguages field is a list of text strings. \nSome fields can have a language-dependent value that must \nbe provided for each of the supported languages.  NSArray *languages = @[@ en , @ sp , @ fr ]; \n\n[self.aboutPropertyStoreImpl setSupportedLangs:languages];  Non-language-specific fields  Non-language-specific fields support a single supplied text \nstring. Following is an example for the ModelNumber field on \nhow to insert into the PropertyStore. The code below can be \nused with the field name being replaced by other field names \nlisted in  About data interface fields .  [self.aboutPropertyStoreImpl setModelNumber:@ Wxfy388i ];  Language-dependent fields  Language-dependent fields support a single supplied text string. \nBelow is an example for the Description field on how to insert \ninto the PropertyStore. The code below can be used with the \nfield name being replaced by other field names listed in  About data interface fields .  [self.aboutPropertyStoreImpl setDescription:@ This is an AllJoyn application  language:@ en ];\n\n[self.aboutPropertyStoreImpl setDescription:@ Esta es una AllJoyn aplicacion  language:@ sp ];\n\n[self.aboutPropertyStoreImpl setDescription:@ C'est une AllJoyn application  language:@ fr ];  Create the AboutService object  For an application to send AboutData, it requires an instance \nof the AboutService class. AboutServiceImpl is an implementation \nwrapper around AllJoyn native calls that handle the interactions \nbetween About Service and About Client.  AboutService aboutService = AboutServiceImpl.getInstance();  Start Service mode  Register the relevant BusObjects and add the relevant interfaces \nto the Announcement's ObjectDescription.  [self.aboutServiceApi startWithBus:self.serviceBusAttachment \n   andPropertyStore:self.aboutPropertyStoreImpl];  Add an AboutIconService (optional)  An application that sends AboutData can be extended to broadcast \na device. AboutServiceImpl is also an implementation wrapper \naround AllJoyn native calls that handle the interactions \nbetween applications that use the AboutIconClient class.  Provision for the Icon content and URL  An Icon is published directly as a byte array or a reference \nURL, and must be provisioned as follows:  uint8_t aboutIconContent[] = { 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,\n0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44,\n   0x52, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x08, 0x02, 0x00, 0x00,\n\n0x00, 0x02, 0x50, 0x58, 0xEA, 0x00,\n   0x00, 0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xAF, 0xC8, 0x37, 0x05,\n\n0x8A, 0xE9, 0x00, 0x00, 0x00, 0x19,\n   0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00,\n\n0x41, 0x64, 0x6F, 0x62, 0x65, 0x20,\n   0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65,\n\n0x3C, 0x00, 0x00, 0x00, 0x18, 0x49,\n   0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0x3F, 0x95, 0x9F, 0x01, 0x37, 0x60,\n\n0x62, 0xC0, 0x0B, 0x46, 0xAA, 0x34,\n   0x40, 0x80, 0x01, 0x00, 0x06, 0x7C, 0x01, 0xB7, 0xED, 0x4B, 0x53, 0x2C, 0x00,\n\n0x00, 0x00, 0x00, 0x49, 0x45, 0x4E,\n   0x44, 0xAE, 0x42, 0x60, 0x82 };\n\n};\n\nNSString *mimeType = @ image/png ; /* This should correspond \n   to the content */ NSString *url = @ http://tinyurl.com/llrqvrb ; \n   /* An alternate access to the Icon\n*/  Create and register DeviceIcon object  Register the relevant BusObjects and add the relevant interfaces \nto the Announcement's ObjectDescription.  self.aboutIconService = [[AJNAboutIconService alloc] initWithBus:self.serviceBusAttachment \n   mimeType:mimeType url:url content:aboutIconContent csize:csize];\n\n[self.aboutIconService registerAboutIconService];  Advertise to allow connections  [self.serviceBusAttachment advertiseName:([self.serviceBusAttachment uniqueName])\nwithTransportMask:(kAJNTransportMaskAny)];  Send the Announcement  [self.aboutServiceApi announce];  Unregister and delete AboutService and BusAttachment  When your process is done with the AboutService and no longer \nwishes to send announcements, unregister the process from the \nAllJoyn bus and then delete variables used.  // Stop AboutIcon\n[self.serviceBusAttachment unregisterBusObject:self.aboutIconService];\nself.aboutIconService = nil;\n\n// Delete AboutServiceApi [self.aboutServiceApi destroyInstance]; \n   self.aboutServiceApi = nil;\n\n// Delete AboutPropertyStoreImpl self.aboutPropertyStoreImpl = nil;\n\n// Bus attachment cleanup\n[self.serviceBusAttachment cancelAdvertisedName:[self.serviceBusAttachment \n   uniqueName] withTransportMask:kAJNTransportMaskAny];\n\n[self.serviceBusAttachment unbindSessionFromPort:SERVICE_PORT];\n\n// Delete AboutSessionPortListener\n[self.serviceBusAttachment unregisterBusListener:self.aboutSessionPortListener];\nself.aboutSessionPortListener = nil;\n\n// Stop bus attachment\n[self.serviceBusAttachment stop];\nself.serviceBusAttachment = nil;",
            "title": "Implementing an Application that Uses AboutService"
        },
        {
            "location": "/develop/api-guide/about/objc-legacy/#implementing-an-application-that-uses-aboutclient",
            "text": "To implement an application to receive AboutData, use the \nAboutClient class. By using the AboutClient class, your \napplication is notified when About Service instances \nsend announcements.  Verify the BusAttachment has been created, started and \nconnected before implementing an About Client. See  Setting \nUp the AllJoyn Framework  for the \ncode snippets. Code in this chapter references a variable  self.clientBusAttachment  (the BusAttachment variable name).  Setup to receive the Announce signal  In order to receive the Announce signal from an application \nusing AboutService, a class implementation of AJNAnnouncementListener \nprotocol must be created.  Create class to implement AJNAnnouncementListener protocol  This declaration of a class will allow for the signals to \nbe received. It must implement the pure virtual function Announce.  @interface sampleClass  AJNAnnouncementListener \n\n- (void)announceWithVersion:(uint16_t)version \n                       port:(uint16_t)port\n                    busName:(NSString *)busName \n         objectDescriptions:(NSMutableDictionary *)objectDescs\n                  aboutData:(NSMutableDictionary **)aboutData {\n// add your implementation here\n}  Implement the Announce method that handles the Announce signal  With everything linked up using the AllJoyn framework, the \nmethod registered with the AllJoyn framework will be executed \nupon receipt of an Announce signal.  Because every application is different, as a developer you \nmust process the AboutData and determine the following:   How it should be rendered in the UI.  When to request the data that is not contained in the Announce signal.  Any logic that is needed.   Register the AJNAnnouncementListener  When registering an announcement listener, specify which \ninterfaces the application is interested in. The code below \nshows a listener registered to receive Announce signals \nthat include an object implementing the INTERFACE_NAME interface.  self.announcementReceiver = [[AJNAnnouncementReceiver alloc]\ninitWithAnnouncementListener:self andBus:self.clientBusAttachment];\n\nconst char* interfaces[] = { [INTERFACE_NAME UTF8String] }; \n\n[self.announcementReceiver registerAnnouncementReceiverForInterfaces:interfaces\n   withNumberOfInterfaces:1];  Using ping to determine presence  The AJNBusAttachment pingPeer member function can be used to \ndetermine if a device is responsive. Contents of an Announce \nsignal can be stale so it may be useful to ping the device to \nsee if it is still present and responsive before attempting \nto form a connection.  NOTE: The AJNBusAttachment pingPeer method makes a bus call. \nIf pingPeer is called inside an AllJoyn callback,  AJNBusAttachment \nenableConcurrentCallbacks  must be called first.  // When pinging a remote bus name wait a max of 5 seconds\n[self.clientBusAttachment enableConcurrentCallbacks];\nQStatus status = [self.clientBusAttachment pingPeer:busName \n  withTimeout:5000];\nif (ER_OK == status) {\n   ...\n}  Request non-announced data  If there is a need to request information that is not contained \nin the announcement (meaning they are not marked as announcable), \ncomplete the tasks in the following subsections.  Join a session  Create a session with the application by using the \nBusAttachment JoinSession API.  NOTE: The variables name and port are set from the AboutData \nfrom the Announce method.  AJNSessionOptions *opt = [[AJNSessionOptions alloc] \ninitWithTrafficType:kAJNTrafficMessages supportsMultipoint:false \nproximity:kAJNProximityAny transportMask:kAJNTransportMaskAny];\n\n\nself.sessionId = [self.clientBusAttachment \n      joinSessionWithName:[self.clientInformation.announcement busName]\n            onPort:[self.clientInformation.announcement port]\n            withDelegate:(nil) options:opt];  Create AboutClient  Generate an AJNAboutClient and create an instance passing in \nthe BusAttachment that was created in  Start and connect the \nBusAttachment .  AJNAboutClient *ajnAboutClient = [[AJNAboutClient alloc]\ninitWithBus:self.clientBusAttachment];  Create AJNAboutIconClient  Generate an AJNAboutIconClient and create an instance passing \nin the BusAttachment created in  Start and connect the BusAttachment .  self.ajnAboutIconClient = [[AJNAboutIconClient alloc]\ninitWithBus:self.clientBusAttachment];\n\n[self.ajnAboutIconClient urlFromBusName:announcementBusName url: url \nsessionId:self.sessionID];  Shutdown  Once you are done using the About feature and the AllJoyn \nframework, free the variables used in the application.  self.clientBusAttachment = nil;",
            "title": "Implementing an Application that Uses AboutClient"
        },
        {
            "location": "/develop/api-guide/about/objc/",
            "text": "About API Guide - Objective-C\n\n\nReference code\n\n\nThe reference code consists of service and client implementations of the About feature.\n\n\nClasses/Interfaces used to send About feature announcements and data\n\n\n\n\n\n\n\n\nClass/Interface\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAJNAboutObject\n\n\nClass the implements the org.alljoyn.About interface.\n\n\n\n\n\n\nAJNAboutDataListener\n\n\nInterface that supplies the list of properties required for Announce payload and About Data\n\n\n\n\n\n\nAJNAboutIcon\n\n\nContainer class to hold information about an icon\n\n\n\n\n\n\nAJNAboutIconObject\n\n\nClass that implements org.alljoyn.Icon interface\n\n\n\n\n\n\n\n\nClasses/Interfaces used to receive About feature announcements and data\n\n\n\n\n\n\n\n\nClass/Interface\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAJNAboutListener\n\n\nInterface implemented by AllJoyn\n users to receive About interface related events\n\n\n\n\n\n\nAJNAboutProxy\n\n\nGet proxy access to the \norg.alljoyn.About\n interface. This class enables the user to interact with the remote About \nBusObject\n\n\n\n\n\n\nAJNIconProxy\n\n\nHelper class that provides access to the org.alljoyn.Icon interface. This class enables the user to interact with the remote AboutIcon \nBusObject\n.\n\n\n\n\n\n\n\n\nObtain the About feature\n\n\nSee the \nBuilding iOS/OS X section\n for instructions on compiling the About feature.\n\n\nBuild an application that uses About Service\n\n\nThe following is the high-level process to build an application that will broadcast an Announce signal. Steps marked with a * are unique to applications using the About feature\n\n\n\n\nUse the code generator to produce the Objective-C boiler plate code\n\n\nMark an interface as announced\n\n\nImplement an \nAJNAboutDataListener\n * (See \nCreate a PropertyStore Implementation\n.)\n\n\nCreate and register the \nBusObject\n\n\nCreate and setup a new AJNBusAttachment\n\n\nStart\n\n\nConnect\n\n\nBind\n\n\n\n\n\n\nCreate About object\n\n\nAdd an AboutIcon object (optional)\n\n\nAnnounce *\n\n\n\n\nBuild an application that uses About Client\n\n\nThe following steps provide the high-level process to build an\napplication that will receive an \norg.alljoyn.About.Announce\n signal. Steps marked with a * are unique to applications using the About feature\n\n\n\n\nCreate a new BusAttachment\n\n\nStart\n\n\nConnect\n\n\n\n\n\n\nImplement an \nAJNAboutListener\n *\n\n\nRegister the \nAJNAboutListener\n *\n\n\nCall \nAJNBusAttachment::WhoImplements\n member function to specify interfaces your application is interested in.*\n\n\n\n\nSample code for sending an \nAnnounce\n signal\n\n\nCode in this chapter references a variable \nclientBusAttachment\n (the BusAttachment variable name).\n\n\nGenerate Objective-C boiler plate code\n\n\nFollow the steps mentioned in [building-ios-osx document link] to specify an interface definition and generate the wrapper Objective-C code for your bus object\n\n\nTypically, a \nshouldAcceptSessionJoinerNamed:onSessionPort\nwithSessionOptions:\n callback in \nSessionPortListener\n has a\ncheck to allow or disallow access. Since the AboutService\nrequires access to any application using AboutClient with a\nspecific port, return true when this callback is triggered.\n\n\nself.aboutSessionPortListener = [[CommonBusListener alloc]\ninitWithServicePort:1000];\n\nself.serviceBusAttachment registerBusListener:self.aboutSessionPortListener];\n\n\n\n\nMark an interface as announced\n\n\nThere are two ways to mark an interface as announced\n- Add the flag \nANNOUNCED\n to the generated code for the bus object\n- Use AJNBusAttachment::SetAnnouceFlag\n\n\n\n\n\n[code snippet for both]\n\n\nImplement an AJNAboutDataListener and provide the values for About interface fields\n\n\nWhen a user wants to send an About announcement they would need\nto provide the implementation of two virutal functions that are\na part of the AJNAboutDataListener. The intent is to fill in the\nabout or announce data in form of a dictionary which is announced\n\n\nThe AJNAboutDataListener interface is required by the About service\napplication to store the provisioned values for the About interface\ndata fields (listed in \nAbout interface data fields\n).\nSee the \nAbout Interface Definition\n\nfor more information.\n\n\nNOTE:\n It is recommended that OEMs create a shared provisioning file\nthat includes the DefaultLanguage, DeviceName, and DeviceID fields.\nThis file can be used by developers to manage these fields in the\nAllJoyn services that make use of them.\n\n\nAJNAboutDataListener is a protocol in AllJoyn Objective-C bindings\nwhich means that it will has functions which need to be implemented\nby the class which implements the protocol\n\n\nThe interface declaration would look like:\n\n\n@interface MySampleClass \nAJNAboutDataListener\n\n\n\n\n\nThe two functions in AJNAboutDataListener that need to be implemented\nin accordance with \nAbout interface data fields\n are\n\n\n-(QStatus)getAboutDataForLanguage:(NSString *)language usingDictionary:(NSMutableDictionary **)aboutData\n{\n    .\n    .\n    .\n    *aboutData = [[NSMutableDictionary alloc] initWithCapacity:16];\n    AJNMessageArgument *appID = [[AJNMessageArgument alloc] init];\n    uint8_t originalAppId[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n    [appID setValue:@\nay\n, sizeof(originalAppId) / sizeof(originalAppId[0]), originalAppId];\n    [appID stabilize];\n    [*aboutData setValue:appID forKey:@\nAppId\n];\n\n    AJNMessageArgument *defaultLang = [[AJNMessageArgument alloc] init];\n    [defaultLang setValue:@\ns\n, \nen\n];\n    [defaultLang stabilize];\n    [*aboutData setValue:defaultLang forKey:@\nDefaultLanguage\n];\n    .\n    .\n    .\n}\n\n-(QStatus)getDefaultAnnounceData:(NSMutableDictionary **)aboutData\n{\n    .\n    .\n    .\n     *aboutData = [[NSMutableDictionary alloc] initWithCapacity:16];\n    gDefaultAboutData = [[NSMutableDictionary alloc] initWithCapacity:16];\n\n    AJNMessageArgument *appID = [[AJNMessageArgument alloc] init];\n    uint8_t originalAppId[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n    [appID setValue:@\nay\n, sizeof(originalAppId) / sizeof(originalAppId[0]), originalAppId];\n    [appID stabilize];\n    [*aboutData setValue:appID forKey:@\nAppId\n];\n\n    AJNMessageArgument *defaultLang = [[AJNMessageArgument alloc] init];\n    [defaultLang setValue:@\ns\n, \nen\n];\n    [defaultLang stabilize];\n    [*aboutData setValue:defaultLang forKey:@\nDefaultLanguage\n];\n    .\n    .\n    .\n}\n\n\n\n\nAbout interface data fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nAnnounced\n\n\nLocalized\n\n\nSignature\n\n\n\n\n\n\n\n\n\n\nAppId\n\n\nyes\n\n\nyes\n\n\nno\n\n\nay\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nDeviceName\n\n\nno\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceId\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nAppName\n\n\nyes\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nManufacturer\n\n\nyes\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nModelNumber\n\n\nyes\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nSupportedLanguages\n\n\nyes\n\n\nno\n\n\nno\n\n\nas\n\n\n\n\n\n\nDescription\n\n\nyes\n\n\nno\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDateofManufacture\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSoftwareVersion\n\n\nyes\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nAJSoftwareVersion\n\n\nyes\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nHardwareVersion\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSupportUrl\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n[code snippet showing how to fill in aboutdatalistener]\n\n\nCreate and setup a new AJNBusAttachment\n\n\nEvery AllJoyn application requires a base set to be in place\nbefore implementing specific features that include creating a\nBusAttachment and connecting to the AllJoyn framework.\n\n\nCreate instance of BusAttachment\n\n\nself.clientBusAttachment = [[AJNBusAttachment alloc]\ninitWithApplicationName:APPNAME allowRemoteMessages:ALLOWREMOTEMESSAGES];\n\n\n\n\nCreate password for the bundled router\n\n\nNOTE:\n Thin libraries at AllSeen Alliance version 14.06 or higher\ndo not require this step.\n\n\nTo allow thin libraries to connect to the bundled router,\nthe router requires a password.\n\n\n[AJNPasswordManager setCredentialsForAuthMechanism:@\nALLJOYN_PIN_KEYX\n usingPassword:@\n000000\n];\n\n\n\n\nStart Connect and Bind\n\n\nOnce created, the BusAttachment must be connected to the AllJoyn framework.\n\n\n[code for starting a bus attachment]\n\n\n[self.clientBusAttachment connectWithArguments:@\n];\n\n\n\n\nNOTE:\n This step is not mandatory if you are only sending an announcement.\nTo allow incoming connections, the formation of a session is needed.\nThe AllJoyn framework must be told that connections are allowed.\n\n\nAJNSessionOptions *opt = [[AJNSessionOptions alloc]\n   initWithTrafficType:kAJNTrafficMessages\n   supportsMultipoint:false proximity:kAJNProximityAny\n   transportMask:kAJNTransportMaskAny];\n\nserviceStatus = [self.serviceBusAttachment\n   bindSessionOnPort:1000 withOptions:opt\n   withDelegate:self.aboutSessionPortListener];\n\n\n\n\nProvision PropertyStore with default values\n\n\nIn the application, the PropertyStore instance you created will\nbe loaded with the default values. In the sample implementation\nabove, the PropertyStore instance is provided with a default values map.\n\n\nThe following subsections highlight provisioning fields\naccording to their data type.\n\n\nAppId field\n\n\nThe AppId field is an array of bytes. It is a globally unique\nidentifier (GUID) encoded as an array of 16 bytes.\n\n\nself.uniqueID = [[NSUUID UUID] UUIDString];\n\n[self.aboutPropertyStoreImpl setAppId:self.uniqueID];\n\n\n\n\nSupportedLanguages field\n\n\nThe SupportedLanguages field is a list of text strings.\nSome fields can have a language-dependent value that must\nbe provided for each of the supported languages.\n\n\nNSArray *languages = @[@\nen\n, @\nsp\n, @\nfr\n];\n\n[self.aboutPropertyStoreImpl setSupportedLangs:languages];\n\n\n\n\nNon-language-specific fields\n\n\nNon-language-specific fields support a single supplied text\nstring. Following is an example for the ModelNumber field on\nhow to insert into the PropertyStore. The code below can be\nused with the field name being replaced by other field names\nlisted in \nAbout data interface fields\n.\n\n\n[self.aboutPropertyStoreImpl setModelNumber:@\nWxfy388i\n];\n\n\n\n\nLanguage-dependent fields\n\n\nLanguage-dependent fields support a single supplied text string.\nBelow is an example for the Description field on how to insert\ninto the PropertyStore. The code below can be used with the\nfield name being replaced by other field names listed in\n\nAbout data interface fields\n.\n\n\n[self.aboutPropertyStoreImpl setDescription:@\nThis is an AllJoyn application\n language:@\nen\n];\n\n[self.aboutPropertyStoreImpl setDescription:@\nEsta es una AllJoyn aplicacion\n language:@\nsp\n];\n\n[self.aboutPropertyStoreImpl setDescription:@\nC'est une AllJoyn application\n language:@\nfr\n];\n\n\n\n\nCreate an instance About Object\n\n\nFor an application to send AboutData, it requires an instance\nof the AboutService class. AboutServiceImpl is an implementation\nwrapper around AllJoyn native calls that handle the interactions\nbetween About Service and About Client.\n\n\nAboutService aboutService = AboutServiceImpl.getInstance();\n\n\n\n\nAdd an AboutIcon Object (optional)\n\n\nProvision for the Icon content and URL\n\n\nAn Icon is published directly as a byte array or a reference\nURL, and must be provisioned as follows:\n\n\nuint8_t aboutIconContent[] = { 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,\n0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44,\n   0x52, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x08, 0x02, 0x00, 0x00,\n\n0x00, 0x02, 0x50, 0x58, 0xEA, 0x00,\n   0x00, 0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xAF, 0xC8, 0x37, 0x05,\n\n0x8A, 0xE9, 0x00, 0x00, 0x00, 0x19,\n   0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00,\n\n0x41, 0x64, 0x6F, 0x62, 0x65, 0x20,\n   0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65,\n\n0x3C, 0x00, 0x00, 0x00, 0x18, 0x49,\n   0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0x3F, 0x95, 0x9F, 0x01, 0x37, 0x60,\n\n0x62, 0xC0, 0x0B, 0x46, 0xAA, 0x34,\n   0x40, 0x80, 0x01, 0x00, 0x06, 0x7C, 0x01, 0xB7, 0xED, 0x4B, 0x53, 0x2C, 0x00,\n\n0x00, 0x00, 0x00, 0x49, 0x45, 0x4E,\n   0x44, 0xAE, 0x42, 0x60, 0x82 };\n\n};\n\nNSString *mimeType = @\nimage/png\n; /* This should correspond\n   to the content */ NSString *url = @\nhttp://tinyurl.com/llrqvrb\n;\n   /* An alternate access to the Icon\n*/\n\n\n\n\nCreate and register DeviceIcon object\n\n\nRegister the relevant BusObjects and add the relevant interfaces\nto the Announcement's ObjectDescription.\n\n\nself.aboutIconService = [[AJNAboutIconService alloc] initWithBus:self.serviceBusAttachment\n   mimeType:mimeType url:url content:aboutIconContent csize:csize];\n\n[self.aboutIconService registerAboutIconService];\n\n\n\n\nSend the Announcement\n\n\n[self.aboutServiceApi announce];\n\n\n\n\nUnregister and delete AboutService and BusAttachment\n\n\nWhen your process is done with the AboutService and no longer\nwishes to send announcements, unregister the process from the\nAllJoyn bus and then delete variables used.\n\n\n// Stop AboutIcon\n[self.serviceBusAttachment unregisterBusObject:self.aboutIconService];\nself.aboutIconService = nil;\n\n// Delete AboutServiceApi [self.aboutServiceApi destroyInstance];\n   self.aboutServiceApi = nil;\n\n// Delete AboutPropertyStoreImpl self.aboutPropertyStoreImpl = nil;\n\n// Bus attachment cleanup\n[self.serviceBusAttachment cancelAdvertisedName:[self.serviceBusAttachment\n   uniqueName] withTransportMask:kAJNTransportMaskAny];\n\n[self.serviceBusAttachment unbindSessionFromPort:SERVICE_PORT];\n\n// Delete AboutSessionPortListener\n[self.serviceBusAttachment unregisterBusListener:self.aboutSessionPortListener];\nself.aboutSessionPortListener = nil;\n\n// Stop bus attachment\n[self.serviceBusAttachment stop];\nself.serviceBusAttachment = nil;\n\n\n\n\nImplementing an Application that Uses AboutClient\n\n\nTo implement an application to receive AboutData, use the\nAboutClient class. By using the AboutClient class, your\napplication is notified when About Service instances\nsend announcements.\n\n\nVerify the BusAttachment has been created, started and\nconnected before implementing an About Client. See \nSetting\nUp the AllJoyn Framework\n for the\ncode snippets. Code in this chapter references a variable\n\nself.clientBusAttachment\n (the BusAttachment variable name).\n\n\nSetup to receive the Announce signal\n\n\nIn order to receive the Announce signal from an application\nusing AboutService, a class implementation of AJNAnnouncementListener\nprotocol must be created.\n\n\nCreate class to implement AJNAnnouncementListener protocol\n\n\nThis declaration of a class will allow for the signals to\nbe received. It must implement the pure virtual function Announce.\n\n\n@interface sampleClass \nAJNAnnouncementListener\n\n\n- (void)announceWithVersion:(uint16_t)version\n                       port:(uint16_t)port\n                    busName:(NSString *)busName\n         objectDescriptions:(NSMutableDictionary *)objectDescs\n                  aboutData:(NSMutableDictionary **)aboutData {\n// add your implementation here\n}\n\n\n\n\nImplement the Announce method that handles the Announce signal\n\n\nWith everything linked up using the AllJoyn framework, the\nmethod registered with the AllJoyn framework will be executed\nupon receipt of an Announce signal.\n\n\nBecause every application is different, as a developer you\nmust process the AboutData and determine the following:\n\n\n\n\nHow it should be rendered in the UI.\n\n\nWhen to request the data that is not contained in the Announce signal.\n\n\nAny logic that is needed.\n\n\n\n\nRegister the AJNAnnouncementListener\n\n\nWhen registering an announcement listener, specify which\ninterfaces the application is interested in. The code below\nshows a listener registered to receive Announce signals\nthat include an object implementing the INTERFACE_NAME interface.\n\n\nself.announcementReceiver = [[AJNAnnouncementReceiver alloc]\ninitWithAnnouncementListener:self andBus:self.clientBusAttachment];\n\nconst char* interfaces[] = { [INTERFACE_NAME UTF8String] };\n\n[self.announcementReceiver registerAnnouncementReceiverForInterfaces:interfaces\n   withNumberOfInterfaces:1];\n\n\n\n\nUsing ping to determine presence\n\n\nThe AJNBusAttachment pingPeer member function can be used to\ndetermine if a device is responsive. Contents of an Announce\nsignal can be stale so it may be useful to ping the device to\nsee if it is still present and responsive before attempting\nto form a connection.\n\n\nNOTE:\n The AJNBusAttachment pingPeer method makes a bus call.\nIf pingPeer is called inside an AllJoyn callback, \nAJNBusAttachment\nenableConcurrentCallbacks\n must be called first.\n\n\n// When pinging a remote bus name wait a max of 5 seconds\n[self.clientBusAttachment enableConcurrentCallbacks];\nQStatus status = [self.clientBusAttachment pingPeer:busName\n  withTimeout:5000];\nif (ER_OK == status) {\n   ...\n}\n\n\n\n\nRequest non-announced data\n\n\nIf there is a need to request information that is not contained\nin the announcement (meaning they are not marked as announcable),\ncomplete the tasks in the following subsections.\n\n\nJoin a session\n\n\nCreate a session with the application by using the\nBusAttachment JoinSession API.\n\n\nNOTE:\n The variables name and port are set from the AboutData\nfrom the Announce method.\n\n\nAJNSessionOptions *opt = [[AJNSessionOptions alloc]\ninitWithTrafficType:kAJNTrafficMessages supportsMultipoint:false\nproximity:kAJNProximityAny transportMask:kAJNTransportMaskAny];\n\n\nself.sessionId = [self.clientBusAttachment\n      joinSessionWithName:[self.clientInformation.announcement busName]\n            onPort:[self.clientInformation.announcement port]\n            withDelegate:(nil) options:opt];\n\n\n\n\nCreate AboutClient\n\n\nGenerate an AJNAboutClient and create an instance passing in\nthe BusAttachment that was created in \nStart and connect the\nBusAttachment\n.\n\n\nAJNAboutClient *ajnAboutClient = [[AJNAboutClient alloc]\ninitWithBus:self.clientBusAttachment];\n\n\n\n\nCreate AJNAboutIconClient\n\n\nGenerate an AJNAboutIconClient and create an instance passing\nin the BusAttachment created in \nStart and connect the BusAttachment\n.\n\n\nself.ajnAboutIconClient = [[AJNAboutIconClient alloc]\ninitWithBus:self.clientBusAttachment];\n\n[self.ajnAboutIconClient urlFromBusName:announcementBusName url:\nurl\nsessionId:self.sessionID];\n\n\n\n\nShutdown\n\n\nOnce you are done using the About feature and the AllJoyn\nframework, free the variables used in the application.\n\n\nself.clientBusAttachment = nil;",
            "title": "Objc"
        },
        {
            "location": "/develop/api-guide/about/objc/#about-api-guide-objective-c",
            "text": "",
            "title": "About API Guide - Objective-C"
        },
        {
            "location": "/develop/api-guide/about/objc/#reference-code",
            "text": "The reference code consists of service and client implementations of the About feature.  Classes/Interfaces used to send About feature announcements and data     Class/Interface  Description      AJNAboutObject  Class the implements the org.alljoyn.About interface.    AJNAboutDataListener  Interface that supplies the list of properties required for Announce payload and About Data    AJNAboutIcon  Container class to hold information about an icon    AJNAboutIconObject  Class that implements org.alljoyn.Icon interface     Classes/Interfaces used to receive About feature announcements and data     Class/Interface  Description      AJNAboutListener  Interface implemented by AllJoyn  users to receive About interface related events    AJNAboutProxy  Get proxy access to the  org.alljoyn.About  interface. This class enables the user to interact with the remote About  BusObject    AJNIconProxy  Helper class that provides access to the org.alljoyn.Icon interface. This class enables the user to interact with the remote AboutIcon  BusObject .",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/about/objc/#obtain-the-about-feature",
            "text": "See the  Building iOS/OS X section  for instructions on compiling the About feature.",
            "title": "Obtain the About feature"
        },
        {
            "location": "/develop/api-guide/about/objc/#build-an-application-that-uses-about-service",
            "text": "The following is the high-level process to build an application that will broadcast an Announce signal. Steps marked with a * are unique to applications using the About feature   Use the code generator to produce the Objective-C boiler plate code  Mark an interface as announced  Implement an  AJNAboutDataListener  * (See  Create a PropertyStore Implementation .)  Create and register the  BusObject  Create and setup a new AJNBusAttachment  Start  Connect  Bind    Create About object  Add an AboutIcon object (optional)  Announce *",
            "title": "Build an application that uses About Service"
        },
        {
            "location": "/develop/api-guide/about/objc/#build-an-application-that-uses-about-client",
            "text": "The following steps provide the high-level process to build an\napplication that will receive an  org.alljoyn.About.Announce  signal. Steps marked with a * are unique to applications using the About feature   Create a new BusAttachment  Start  Connect    Implement an  AJNAboutListener  *  Register the  AJNAboutListener  *  Call  AJNBusAttachment::WhoImplements  member function to specify interfaces your application is interested in.*",
            "title": "Build an application that uses About Client"
        },
        {
            "location": "/develop/api-guide/about/objc/#sample-code-for-sending-an-announce-signal",
            "text": "Code in this chapter references a variable  clientBusAttachment  (the BusAttachment variable name).  Generate Objective-C boiler plate code  Follow the steps mentioned in [building-ios-osx document link] to specify an interface definition and generate the wrapper Objective-C code for your bus object  Typically, a  shouldAcceptSessionJoinerNamed:onSessionPort\nwithSessionOptions:  callback in  SessionPortListener  has a\ncheck to allow or disallow access. Since the AboutService\nrequires access to any application using AboutClient with a\nspecific port, return true when this callback is triggered.  self.aboutSessionPortListener = [[CommonBusListener alloc]\ninitWithServicePort:1000];\n\nself.serviceBusAttachment registerBusListener:self.aboutSessionPortListener];  Mark an interface as announced  There are two ways to mark an interface as announced\n- Add the flag  ANNOUNCED  to the generated code for the bus object\n- Use AJNBusAttachment::SetAnnouceFlag   [code snippet for both]  Implement an AJNAboutDataListener and provide the values for About interface fields  When a user wants to send an About announcement they would need\nto provide the implementation of two virutal functions that are\na part of the AJNAboutDataListener. The intent is to fill in the\nabout or announce data in form of a dictionary which is announced  The AJNAboutDataListener interface is required by the About service\napplication to store the provisioned values for the About interface\ndata fields (listed in  About interface data fields ).\nSee the  About Interface Definition \nfor more information.  NOTE:  It is recommended that OEMs create a shared provisioning file\nthat includes the DefaultLanguage, DeviceName, and DeviceID fields.\nThis file can be used by developers to manage these fields in the\nAllJoyn services that make use of them.  AJNAboutDataListener is a protocol in AllJoyn Objective-C bindings\nwhich means that it will has functions which need to be implemented\nby the class which implements the protocol  The interface declaration would look like:  @interface MySampleClass  AJNAboutDataListener   The two functions in AJNAboutDataListener that need to be implemented\nin accordance with  About interface data fields  are  -(QStatus)getAboutDataForLanguage:(NSString *)language usingDictionary:(NSMutableDictionary **)aboutData\n{\n    .\n    .\n    .\n    *aboutData = [[NSMutableDictionary alloc] initWithCapacity:16];\n    AJNMessageArgument *appID = [[AJNMessageArgument alloc] init];\n    uint8_t originalAppId[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n    [appID setValue:@ ay , sizeof(originalAppId) / sizeof(originalAppId[0]), originalAppId];\n    [appID stabilize];\n    [*aboutData setValue:appID forKey:@ AppId ];\n\n    AJNMessageArgument *defaultLang = [[AJNMessageArgument alloc] init];\n    [defaultLang setValue:@ s ,  en ];\n    [defaultLang stabilize];\n    [*aboutData setValue:defaultLang forKey:@ DefaultLanguage ];\n    .\n    .\n    .\n}\n\n-(QStatus)getDefaultAnnounceData:(NSMutableDictionary **)aboutData\n{\n    .\n    .\n    .\n     *aboutData = [[NSMutableDictionary alloc] initWithCapacity:16];\n    gDefaultAboutData = [[NSMutableDictionary alloc] initWithCapacity:16];\n\n    AJNMessageArgument *appID = [[AJNMessageArgument alloc] init];\n    uint8_t originalAppId[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n    [appID setValue:@ ay , sizeof(originalAppId) / sizeof(originalAppId[0]), originalAppId];\n    [appID stabilize];\n    [*aboutData setValue:appID forKey:@ AppId ];\n\n    AJNMessageArgument *defaultLang = [[AJNMessageArgument alloc] init];\n    [defaultLang setValue:@ s ,  en ];\n    [defaultLang stabilize];\n    [*aboutData setValue:defaultLang forKey:@ DefaultLanguage ];\n    .\n    .\n    .\n}  About interface data fields     Field name  Required  Announced  Localized  Signature      AppId  yes  yes  no  ay    DefaultLanguage  yes  yes  no  s    DeviceName  no  yes  yes  s    DeviceId  yes  yes  no  s    AppName  yes  yes  yes  s    Manufacturer  yes  yes  yes  s    ModelNumber  yes  yes  yes  s    SupportedLanguages  yes  no  no  as    Description  yes  no  yes  s    DateofManufacture  no  no  no  s    SoftwareVersion  yes  no  no  s    AJSoftwareVersion  yes  no  no  s    HardwareVersion  no  no  no  s    SupportUrl  no  no  no  s      [code snippet showing how to fill in aboutdatalistener]  Create and setup a new AJNBusAttachment  Every AllJoyn application requires a base set to be in place\nbefore implementing specific features that include creating a\nBusAttachment and connecting to the AllJoyn framework.  Create instance of BusAttachment  self.clientBusAttachment = [[AJNBusAttachment alloc]\ninitWithApplicationName:APPNAME allowRemoteMessages:ALLOWREMOTEMESSAGES];  Create password for the bundled router  NOTE:  Thin libraries at AllSeen Alliance version 14.06 or higher\ndo not require this step.  To allow thin libraries to connect to the bundled router,\nthe router requires a password.  [AJNPasswordManager setCredentialsForAuthMechanism:@ ALLJOYN_PIN_KEYX  usingPassword:@ 000000 ];  Start Connect and Bind  Once created, the BusAttachment must be connected to the AllJoyn framework.  [code for starting a bus attachment]  [self.clientBusAttachment connectWithArguments:@ ];  NOTE:  This step is not mandatory if you are only sending an announcement.\nTo allow incoming connections, the formation of a session is needed.\nThe AllJoyn framework must be told that connections are allowed.  AJNSessionOptions *opt = [[AJNSessionOptions alloc]\n   initWithTrafficType:kAJNTrafficMessages\n   supportsMultipoint:false proximity:kAJNProximityAny\n   transportMask:kAJNTransportMaskAny];\n\nserviceStatus = [self.serviceBusAttachment\n   bindSessionOnPort:1000 withOptions:opt\n   withDelegate:self.aboutSessionPortListener];  Provision PropertyStore with default values  In the application, the PropertyStore instance you created will\nbe loaded with the default values. In the sample implementation\nabove, the PropertyStore instance is provided with a default values map.  The following subsections highlight provisioning fields\naccording to their data type.  AppId field  The AppId field is an array of bytes. It is a globally unique\nidentifier (GUID) encoded as an array of 16 bytes.  self.uniqueID = [[NSUUID UUID] UUIDString];\n\n[self.aboutPropertyStoreImpl setAppId:self.uniqueID];  SupportedLanguages field  The SupportedLanguages field is a list of text strings.\nSome fields can have a language-dependent value that must\nbe provided for each of the supported languages.  NSArray *languages = @[@ en , @ sp , @ fr ];\n\n[self.aboutPropertyStoreImpl setSupportedLangs:languages];  Non-language-specific fields  Non-language-specific fields support a single supplied text\nstring. Following is an example for the ModelNumber field on\nhow to insert into the PropertyStore. The code below can be\nused with the field name being replaced by other field names\nlisted in  About data interface fields .  [self.aboutPropertyStoreImpl setModelNumber:@ Wxfy388i ];  Language-dependent fields  Language-dependent fields support a single supplied text string.\nBelow is an example for the Description field on how to insert\ninto the PropertyStore. The code below can be used with the\nfield name being replaced by other field names listed in About data interface fields .  [self.aboutPropertyStoreImpl setDescription:@ This is an AllJoyn application  language:@ en ];\n\n[self.aboutPropertyStoreImpl setDescription:@ Esta es una AllJoyn aplicacion  language:@ sp ];\n\n[self.aboutPropertyStoreImpl setDescription:@ C'est une AllJoyn application  language:@ fr ];  Create an instance About Object  For an application to send AboutData, it requires an instance\nof the AboutService class. AboutServiceImpl is an implementation\nwrapper around AllJoyn native calls that handle the interactions\nbetween About Service and About Client.  AboutService aboutService = AboutServiceImpl.getInstance();  Add an AboutIcon Object (optional)  Provision for the Icon content and URL  An Icon is published directly as a byte array or a reference\nURL, and must be provisioned as follows:  uint8_t aboutIconContent[] = { 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,\n0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44,\n   0x52, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x08, 0x02, 0x00, 0x00,\n\n0x00, 0x02, 0x50, 0x58, 0xEA, 0x00,\n   0x00, 0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xAF, 0xC8, 0x37, 0x05,\n\n0x8A, 0xE9, 0x00, 0x00, 0x00, 0x19,\n   0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00,\n\n0x41, 0x64, 0x6F, 0x62, 0x65, 0x20,\n   0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65,\n\n0x3C, 0x00, 0x00, 0x00, 0x18, 0x49,\n   0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0x3F, 0x95, 0x9F, 0x01, 0x37, 0x60,\n\n0x62, 0xC0, 0x0B, 0x46, 0xAA, 0x34,\n   0x40, 0x80, 0x01, 0x00, 0x06, 0x7C, 0x01, 0xB7, 0xED, 0x4B, 0x53, 0x2C, 0x00,\n\n0x00, 0x00, 0x00, 0x49, 0x45, 0x4E,\n   0x44, 0xAE, 0x42, 0x60, 0x82 };\n\n};\n\nNSString *mimeType = @ image/png ; /* This should correspond\n   to the content */ NSString *url = @ http://tinyurl.com/llrqvrb ;\n   /* An alternate access to the Icon\n*/  Create and register DeviceIcon object  Register the relevant BusObjects and add the relevant interfaces\nto the Announcement's ObjectDescription.  self.aboutIconService = [[AJNAboutIconService alloc] initWithBus:self.serviceBusAttachment\n   mimeType:mimeType url:url content:aboutIconContent csize:csize];\n\n[self.aboutIconService registerAboutIconService];  Send the Announcement  [self.aboutServiceApi announce];  Unregister and delete AboutService and BusAttachment  When your process is done with the AboutService and no longer\nwishes to send announcements, unregister the process from the\nAllJoyn bus and then delete variables used.  // Stop AboutIcon\n[self.serviceBusAttachment unregisterBusObject:self.aboutIconService];\nself.aboutIconService = nil;\n\n// Delete AboutServiceApi [self.aboutServiceApi destroyInstance];\n   self.aboutServiceApi = nil;\n\n// Delete AboutPropertyStoreImpl self.aboutPropertyStoreImpl = nil;\n\n// Bus attachment cleanup\n[self.serviceBusAttachment cancelAdvertisedName:[self.serviceBusAttachment\n   uniqueName] withTransportMask:kAJNTransportMaskAny];\n\n[self.serviceBusAttachment unbindSessionFromPort:SERVICE_PORT];\n\n// Delete AboutSessionPortListener\n[self.serviceBusAttachment unregisterBusListener:self.aboutSessionPortListener];\nself.aboutSessionPortListener = nil;\n\n// Stop bus attachment\n[self.serviceBusAttachment stop];\nself.serviceBusAttachment = nil;",
            "title": "Sample code for sending an Announce signal"
        },
        {
            "location": "/develop/api-guide/about/objc/#implementing-an-application-that-uses-aboutclient",
            "text": "To implement an application to receive AboutData, use the\nAboutClient class. By using the AboutClient class, your\napplication is notified when About Service instances\nsend announcements.  Verify the BusAttachment has been created, started and\nconnected before implementing an About Client. See  Setting\nUp the AllJoyn Framework  for the\ncode snippets. Code in this chapter references a variable self.clientBusAttachment  (the BusAttachment variable name).  Setup to receive the Announce signal  In order to receive the Announce signal from an application\nusing AboutService, a class implementation of AJNAnnouncementListener\nprotocol must be created.  Create class to implement AJNAnnouncementListener protocol  This declaration of a class will allow for the signals to\nbe received. It must implement the pure virtual function Announce.  @interface sampleClass  AJNAnnouncementListener \n\n- (void)announceWithVersion:(uint16_t)version\n                       port:(uint16_t)port\n                    busName:(NSString *)busName\n         objectDescriptions:(NSMutableDictionary *)objectDescs\n                  aboutData:(NSMutableDictionary **)aboutData {\n// add your implementation here\n}  Implement the Announce method that handles the Announce signal  With everything linked up using the AllJoyn framework, the\nmethod registered with the AllJoyn framework will be executed\nupon receipt of an Announce signal.  Because every application is different, as a developer you\nmust process the AboutData and determine the following:   How it should be rendered in the UI.  When to request the data that is not contained in the Announce signal.  Any logic that is needed.   Register the AJNAnnouncementListener  When registering an announcement listener, specify which\ninterfaces the application is interested in. The code below\nshows a listener registered to receive Announce signals\nthat include an object implementing the INTERFACE_NAME interface.  self.announcementReceiver = [[AJNAnnouncementReceiver alloc]\ninitWithAnnouncementListener:self andBus:self.clientBusAttachment];\n\nconst char* interfaces[] = { [INTERFACE_NAME UTF8String] };\n\n[self.announcementReceiver registerAnnouncementReceiverForInterfaces:interfaces\n   withNumberOfInterfaces:1];  Using ping to determine presence  The AJNBusAttachment pingPeer member function can be used to\ndetermine if a device is responsive. Contents of an Announce\nsignal can be stale so it may be useful to ping the device to\nsee if it is still present and responsive before attempting\nto form a connection.  NOTE:  The AJNBusAttachment pingPeer method makes a bus call.\nIf pingPeer is called inside an AllJoyn callback,  AJNBusAttachment\nenableConcurrentCallbacks  must be called first.  // When pinging a remote bus name wait a max of 5 seconds\n[self.clientBusAttachment enableConcurrentCallbacks];\nQStatus status = [self.clientBusAttachment pingPeer:busName\n  withTimeout:5000];\nif (ER_OK == status) {\n   ...\n}  Request non-announced data  If there is a need to request information that is not contained\nin the announcement (meaning they are not marked as announcable),\ncomplete the tasks in the following subsections.  Join a session  Create a session with the application by using the\nBusAttachment JoinSession API.  NOTE:  The variables name and port are set from the AboutData\nfrom the Announce method.  AJNSessionOptions *opt = [[AJNSessionOptions alloc]\ninitWithTrafficType:kAJNTrafficMessages supportsMultipoint:false\nproximity:kAJNProximityAny transportMask:kAJNTransportMaskAny];\n\n\nself.sessionId = [self.clientBusAttachment\n      joinSessionWithName:[self.clientInformation.announcement busName]\n            onPort:[self.clientInformation.announcement port]\n            withDelegate:(nil) options:opt];  Create AboutClient  Generate an AJNAboutClient and create an instance passing in\nthe BusAttachment that was created in  Start and connect the\nBusAttachment .  AJNAboutClient *ajnAboutClient = [[AJNAboutClient alloc]\ninitWithBus:self.clientBusAttachment];  Create AJNAboutIconClient  Generate an AJNAboutIconClient and create an instance passing\nin the BusAttachment created in  Start and connect the BusAttachment .  self.ajnAboutIconClient = [[AJNAboutIconClient alloc]\ninitWithBus:self.clientBusAttachment];\n\n[self.ajnAboutIconClient urlFromBusName:announcementBusName url: url\nsessionId:self.sessionID];  Shutdown  Once you are done using the About feature and the AllJoyn\nframework, free the variables used in the application.  self.clientBusAttachment = nil;",
            "title": "Implementing an Application that Uses AboutClient"
        },
        {
            "location": "/develop/api-guide/audio-streaming/cpp/",
            "text": "Audio API Usage Guide - C++\n\n\nReference code\n\n\nThe reference code consists of an application that implements\nan audio sink and audio source.\n\n\nAudio.h contains definitions that are common to both audio\nsinks and sources.\n\n\nSink classes\n\n\n\n\n\n\n\n\nSink class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAudioSinkObject\n\n\nClass that implements the following AllJoyn\n interfaces:\norg.alljoyn.Stream.Port\norg.alljoyn.Stream.Port.AudioSink\norg.alljoyn.Control.Volume\n\n\n\n\n\n\nStreamObject\n\n\nClass that implements the following AllJoyn interfaces:\norg.alljoyn.Stream\norg.alljoyn.Stream.Clock\n\n\n\n\n\n\nAudioDevice\n\n\nAbstract class for implementing access to an audio device/sound card.\n\n\n\n\n\n\nALSADevice\n\n\nSubclass of AudioDevice that implements access to an audio device using the Audio Linux Sound Architecture (ALSA) API.\n\n\n\n\n\n\n\n\nSource classes\n\n\n\n\n\n\n\n\nSource class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSinkSearcher\n\n\nHelper class for discovering AudioSinks.\n\n\n\n\n\n\nSinkPlayer\n\n\nImplements streaming of DataSources to an AudioSink.\n\n\n\n\n\n\nDataSource\n\n\nAbstract class for providing data to SinkPlayer for streaming.\n\n\n\n\n\n\nWavDataSource\n\n\nSubclass of DataSource that provides data from WAV files to SinkPlayer for streaming.\n\n\n\n\n\n\n\n\nReference C++ application code\n\n\n\n\n\n\n\n\nApplication class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSinkService\n\n\nCommand line application that receives and plays streamed audio by registering an instance of StreamObject on the AllJoyn bus.\n\n\n\n\n\n\nSinkClient\n\n\nCommand line application that uses SinkSearcher to discover audio sinks and uses SinkPlayer to stream a WAV file to the sink.\n\n\n\n\n\n\n\n\nCompile the Audio service framework\n\n\n\n\nFollow the steps in the \nConfiguring the Build Environment (Linux Platform) section\n.\nStop prior to the Building AllJoyn section.\n\n\nPull down the source code:\n\n\n\n\nsh\n   $ repo init -u git clone git://git.allseenalliance/core/alljoyn.git\n\n3. Run SCons to compile the Audio service framework, test suite, and samples.\n   \nsh\n   $ cd services/audio\n\n\n\n\n\n\nFor 64-bit:\n\n\nsh\n  $ scons CPU=x86_64 ABOUT_BASE=$ALLJOYN_BASE/about/cpp\n\n\n\n\n\n\nFor 32-bit:\n\n\nsh\n  $ scons ABOUT_BASE=$ALLJOYN_BASE/about/cpp\n\n\n\n\n\n\nThe build completes, and a build folder contains the compiled files.\n\n\nBuild a Sink\n\n\nThe following steps provide the high-level process to build a Sink.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nImplement the AboutStore and use this with the AboutService API.\nSee the \nappropriate About API Guide\n for the platform\nyou are targeting for instructions.\n\n\nImplement the AudioDevice if the audio device/sound card\nused by your platform is not supported.\n\n\nCreate and register a StreamObject.\n\n\n\n\nBuild a Source\n\n\nThe following steps provide the high-level process to build a Source.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nCreate a class that extends SinkSearcher and SinkListener.\n\n\nCreate a new SinkPlayer and register the SinkListener.\n\n\nRegister the SinkSearcher.\n\n\n\n\nSetting Up the AllJoyn Framework\n\n\nEvery AllJoyn application requires a base set to be in place\nbefore implementing specific features.\n\n\n\n\nCreate BusAttachment\n\n\nConnect to the AllJoyn framework\n\n\n\n\nCreate BusAttachment\n\n\nTo use the Audio service framework, an AllJoyn object called\nthe BusAttachment is needed that is used internally by the\nservice to leverage the AllJoyn API calls.\n\n\nBusAttachment* msgBus = new BusAttachment(\nSinkService\n, true);\n\n\n\n\nStart and connect the BusAttachment\n\n\nOnce created, the BusAttachment must be connected to the AllJoyn framework.\n\n\nQStatus status = msgBus-\nStart(); if( status == ER_OK ) {\nstatus = msgBus-\nConnect(NULL);\n}\n\n\n\n\nImplementing a Sink\n\n\nImplementing a Sink to receive streaming audio requires\ncreating and registering an instance of the StreamObject class.\n\n\nNOTE:\n Verify the BusAttachment has been created, started and\nconnected before implementing the Sink. See \nSetting up the\nAllJoyn Framework\n for the code snippets.\nCode in this section references a variable \nmsgBus\n (the\nBusAttachment variable name).\n\n\nDeclare listener class\n\n\nDeclare a listener class to receive the SessionPortListener callbacks.\nTypically, an AcceptSessionJoiner callback in SessionPortListener\nhas a check to allow or disallow access. Since the Sink requires\naccess to everyone, return true when this callback is triggered.\nUse the SessionJoined handler to set the session timeout to 20 seconds.\n\n\nclass MyListener : public SessionPortListener {\n   private:\n      BusAttachment *mMsgBus;\n\n   public:\n      MyListener( BusAttachment *msgBus ) { mMsgBus = msgBus;\n      }\n\n      bool AcceptSessionJoiner( SessionPort sessionPort, const char* joiner,\nconst SessionOpts\n opts ) {\n\n         printf(\nAccepting join session request from %s (opts.proximity=%x,\nopts.traffic=%x, opts.transports=%x)\\n\n,\n            joiner, opts.proximity, opts.traffic, opts.transports);\n\n         return true;\n      }\n\n      void SessionJoined( SessionPort sessionPort, SessionId id,\nconst char* joiner ) {\n         printf(\nSessionJoined with %s (id=%d)\\n\n, joiner, id);\n         mMsgBus-\nEnableConcurrentCallbacks();\n         uint32_t timeout = 20;\n         QStatus status = mMsgBus-\nSetLinkTimeout(id, timeout);\n         if( status == ER_OK ) {\n            printf(\nLink timeout has been set to %ds\\n\n, timeout);\n         } else {\n            printf(\nSetLinkTimeout(%d) failed\\n\n, timeout);\n\n         }\n      }\n};\n\n\n\n\nUse the AboutService API to announce Sink details\n\n\n\n\nDeclare a PropertyStore class to advertise about properties.\nThe properties advertised should be customized for the device\nthe Sink is running on.\n\n\n\n\nNOTE:\n See the \nAbout API Guide\n for the\n  platform you are targeting for required and optional properties\n  that the About feature can assign. The AppId field and other\n  values below are examples and should not be reused in commercial\n  products. See the \nAbout Best Practices\n for\n  details on generating the AppId and other values.\n\n\n```cpp\n   class AboutStore : public PropertyStore {\n     public:\n         AboutStore(const char\n friendlyName)\n            { struct utsname utsname; uname(\nutsname);\n            mDeviceId = strdup(utsname.nodename);\n            mFriendlyName = strdup(friendlyName);\n         }\n         ~AboutStore() {\n            if (mDeviceId != NULL)\n               free((void\n)mDeviceId);\n            if (mFriendlyName != NULL)\n               free((void\n)mFriendlyName);\n         }\n         QStatus ReadAll(const char\n languageTag, PropertyStore::Filter\n            filter, MsgArg\n all) {\n            if (languageTag \n strcmp(languageTag, \"en\") != 0) { return ER_FAIL;\n            }\n            if (PropertyStore::WRITE == filter) {\n               return ER_NOT_IMPLEMENTED;\n            }\n\n\n        size_t numProps = (PropertyStore::READ == filter) ? 11 : 7;\n        MsgArg* props = new MsgArg[numProps];\n        static const uint8_t appId[] = { 0x5a, 0x1e, 0xff, 0xf1, 0xf7,\n           0x99, 0x4d, 0x22, 0x82, 0xc0, 0x93, 0x4d, 0x3c, 0x86, 0x16, 0xa6 };\n           props[0].Set(\"{sv}\", \"AppId\", new MsgArg(\"ay\", 16, appId));\n           props[1].Set(\"{sv}\", \"DefaultLanguage\", new MsgArg(\"s\", \"en\"));\n           props[2].Set(\"{sv}\", \"DeviceName\", new MsgArg(\"s\", mFriendlyName));\n           props[3].Set(\"{sv}\", \"DeviceId\", new MsgArg(\"s\", mDeviceId));\n           props[4].Set(\"{sv}\", \"AppName\", new MsgArg(\"s\", \"SinkService\"));\n           props[5].Set(\"{sv}\", \"Manufacturer\", new MsgArg(\"s\", \"AllJoyn\"));\n           props[6].Set(\"{sv}\", \"ModelNumber\", new MsgArg(\"s\", \"1\"));\n           if (PropertyStore::READ == filter) {\n              static const char* supportedLanguages[] = { \"en\" };\n              props[7].Set(\"{sv}\", \"SupportedLanguages\", new MsgArg(\"as\",\n\n\n\n1, supportedLanguages));\n                  props[8].Set(\"{sv}\", \"Description\", new MsgArg(\"s\", \"AllJoyn Audio Sink\"));\n                  props[9].Set(\"{sv}\", \"SoftwareVersion\", new MsgArg(\"s\", \"v0.0.1\"));\n                  props[10].Set(\"{sv}\", \"AJSoftwareVersion\", new MsgArg(\"s\", ajn::GetVersion()));\n               }\n\n\n           all.Set(\"a{sv}\", numProps, props);\n           all.SetOwnershipFlags(MsgArg::OwnsArgs, true);\n           return ER_OK;\n     }\n  private:\n     const char* mDeviceId;\n     const char* mFriendlyName;\n  };\n\n\n\n```\n\n\n\n\nCreate an instance of the new AboutStore class to provide\nto the StreamObject (see \nCreate and register StreamObject\n.)\n\n\n\n\ncpp\n      const char *friendlyName = \"Living Room\";\n      AboutStore* aboutProps = new AboutStore(friendlyName);\n\n\nBind session port\n\n\nTo allow incoming connections, the formation of a session is needed.\nThe AllJoyn framework needs to be told that connections are allowed.\n\n\nMyListener* myListener = new MyListener(msgBus);\nSessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false,\nSessionOpts::PROXIMITY_ANY, TRANSPORT_ANY);\nSessionPort sessionPort = SESSION_PORT_ANY;\n\nif( status == ER_OK )\n   status = msgBus-\nBindSessionPort(sessionPort, opts, *myListener);\n\n\n\n\nCreate an AudioDevice object\n\n\nSome platforms use different audio drivers. As such, there is an\nabstraction layer called AudioDevice that must be implemented\nfor the platform driver. The current release supports the following platforms:\n\n\n\n\nLinux:\n\n\n\n\ncpp\n  AudioDevice* audioDevice = new ALSADevice();\n\n\n\n\nAndroid:\n\n\n\n\njava\n  AudioDevice* audioDevice = new AndroidDevice();\n\n\nCreate and register StreamObject\n\n\nStreamObject is an implementation wrapper around AllJoyn\nnative calls that handle the interactions between Sink and Source.\n\n\nStreamObject *streamObj = NULL; if( status == ER_OK ) {\n   streamObj = new StreamObject(msgBus, \n/Speaker/In\n, audioDevice,\n      sessionPort, aboutProps);\n   status = streamObj-\nRegister();\n   if (status != ER_OK)\n      printf(\nFailed to register stream object (%s)\\n\n,\n         QCC_StatusText(status));\n}\n\n\n\n\nAdvertise\n\n\nTo accept connections, we need to advertise over the AllJoyn framework.\nThe unique name the AllJoyn framework provides is acceptable\nfor this purpose because the Audio service framework relies\non the AboutService API to distribute information about the device.\n\n\nNOTE:\n In most applications that use the AllJoyn framework and\ndo not use the About feature, a descriptive well-known name\nis chosen to advertise.\n\n\nString name = msgBus-\nGetUniqueName();\nif( status == ER_OK ) {\n   status = msgBus-\nAdvertiseName(name.c_str(), opts.transports);\n   if (status != ER_OK)\n      printf(\nFailed to advertise name %s (%s)\\n\n, name.c_str(),\n         QCC_StatusText(status));\n}\n\n\n\n\nUnregister and delete StreamObject\n\n\nWhen your process is done with the Sink and no longer wishes\nto receive audio input, unregister the process from the AllJoyn\nbus and then delete the StreamObject instance.\n\n\nif( streamObj != NULL ) {\n   streamObj-\nUnregister();\n   delete streamObj;\n   streamObj = NULL;\n}\ndelete aboutProps;\naboutProps = NULL;\ndelete msgBus;\n\n\nmsgBus = NULL;\ndelete myListener;\nmyListener = NULL;\n\n\n\n\nImplementing a Source\n\n\nTo implement a Source to stream to a Sink, use the SinkSearcher\nand SinkPlayer classes. By declaring a SinkSearcher subclass,\nyour application is notified when Sinks are found and lost.\nWhen a Sink is found, you can add it to a SinkPlayer instance.\nVerify the BusAttachment has been created, started and connected\nbefore implementing an AudioSource. See \nSetting up the AllJoyn Framework\n for the code snippets. Code in this\nsection references a variable msgBus (the BusAttachment variable name).\n\n\nDeclare SinkSearcher subclass\n\n\nTo interact with different Sinks, the SinkPlayer subclass\nprovides an API containing AddSink and RemoveSink methods,\nas well as check if they have already been added.\nThe following code snippet adds any new Sink that has not\nalready been added.\n\n\nNOTE:\n AddSink allows for audio to be played back on that device\nonce \nSinkAdded\n (from the SinkListener below) has been called.\nAfter \nSinkAdded\n is called, call \nOpenSink\n on each Sink that\nshould receive audio. Play and Pause commands will affect all\nopened Sinks. Refer to the API documentation for more details.\n\n\nstatic SinkPlayer *g_sinkPlayer = NULL;\nclass MySinkSearcher : public SinkSearcher {\n   virtual void SinkFound( Service *sink ) {\n      const char *name = sink-\nname.c_str();\n      const char *path = sink-\npath.c_str();\n      printf(\nFound %s objectPath=%s, sessionPort=%d\\n\n, name, path,\n         sink-\nport);\n      if( !g_sinkPlayer-\nHasSink(name) )\n         g_sinkPlayer-\nAddSink(name, sink-\nport, path);\n   }\n\n   virtual void SinkLost( Service *sink ) {\n   const char *name = sink-\nname.c_str();\n   printf(\nLost %s\\n\n, name);\n   }\n};\n\n\n\n\nDeclare SinkListener subclass\n\n\nSinkPlayer methods such as AddSink and RemoveSink are asynchronous.\nYou can create and register a SinkListener to be notified when\nthese calls have completed. The SinkRemoved handler is also called\nwhen a sink's session is lost.\n\n\nclass MySinkListener : public SinkListener {\n   void SinkAdded( const char *name ) {\n      printf(\nSinkAdded: %s\\n\n, name);\n\n      g_sinkPlayer-\nOpenSink(name);\n   }\n\n   void SinkAddFailed( const char *name ) {\n      printf(\nSinkAddFailed: %s\\n\n, name);\n   }\n\n   void SinkRemoved( const char *name, bool lost ) {\n      printf(\nSinkRemoved: %s lost=%d\\n\n, name, lost);\n   }\n\n   void MuteChanged(const char* name, bool mute) {\n      printf(\nMuteChanged: %s mute=%s\\n\n, name, mute ? \non\n : \noff\n);\n   }\n\n   void VolumeChanged(const char* name, int16_t volume) {\n      printf(\nVolumeChanged: %s volume=%d\\n\n, name, volume);\n   }\n};\n\n\n\n\nCreate and configure SinkPlayer\n\n\nThe SinkPlayer object is responsible for sending a supplied\nDataSource over the AllJoyn framework to any open sinks.\nThe DataSource can be set any time prior to calling the\n\nOpenSink()\n method.\n\n\nMySinkListener listener;\ng_sinkPlayer = new SinkPlayer(msgBus);\ng_sinkPlayer-\nAddListener(\nlistener);\n\n\n\n\nSet the preferred audio data format\n\n\nSinkPlayer\n lets you specify which format to use for streaming.\nHowever, there is no guarantee that the format you specify\nwill be used. If a Sink does not support your preferred format,\n\nSinkPlayer\n automatically defaults to raw audio.\n\n\nNOTE:\n This must be called prior to adding a Sink using \nAddSink()\n.\n\n\nTo support ALAC (Apple Lossless):\n\n\ng_sinkPlayer-\nSetPreferredFormat(MIMETYPE_AUDIO_ALAC);\n\n\n\n\nTo support RAW audio support:\n\n\ng_sinkPlayer-\nSetPreferredFormat(MIMETYPE_AUDIO_RAW);\n\n\n\n\nSet the data source\n\n\nTo best support multiple audio file formats, a DataSource\nclass is created that represents how the audio file will be\ndecoded and read. Currently, support for WAV files is provided.\nAdding support for other audio formats will require implementing\na new class derived from DataSource.\nA .WAV file example follows.\n\n\nWavDataSource dataSource;\ndataSource.Open(\n/path/to/file.wav\n); // the WAV file to stream to the sink(s)\ng_sinkPlayer-\nSetDataSource(\ndataSource);\n\n\n\n\nCreate and register SinkSearcher\n\n\nCreate an object of the class that is derived from SinkSearcher\nfrom \nDeclare SinkSearcher subclass\n\nand register it with the BusAttachment.\n\n\nMySinkSearcher searcher;\nstatus = searcher.Register(msgBus);\n\n\n\n\nStart playback once a Sink has been found\n\n\nIt is recommended that developers verify the number of connected\nSinks = 1 prior to calling the Play method to ensure audio will\nbe played remotely. The Play method will start audio on every\nsink that OpenSink() has been called on.\n\n\n// Sleep until sink is found and then play. An alternative approach would be to\n// call Play() in the SinkListener on the SinkAdded event.\nwhile( g_sinkPlayer-\nGetSinkCount() \n 1 )\n   usleep(100 * 1000);\ng_sinkPlayer-\nPlay();\n\n\n\n\nUnregister SinkSearcher and delete SinkPlayer\n\n\nOnce you are done streaming, unregister the SinkSearcher,\nremove any sinks that are still part of the SinkPlayer,\nand then delete the SinkPlayer.\n\n\nNOTE:\n The SinkPlayer object must be deleted before the BusAttachment object.\n\n\nsearcher.Unregister();\ng_sinkPlayer-\nRemoveAllSinks();\n// Wait for sinks to be removed\nwhile( g_sinkPlayer-\nGetSinkCount() \n 0 )\n   usleep(100 * 1000);\ndelete g_sinkPlayer;\n\n\n\n\nImplementing an AudioDevice\n\n\nThe reference code includes an AudioDevice subclass that uses\nthe ALSA API. If your target environment uses a different sound\ncard API, you must do the following:\n\n\n\n\nImplement a new AudioDevice subclass.\n\n\nWhen creating a StreamObject create a new instance of the AudioDevice\nand pass it into the StreamObject constructor. For example:\n\n\n\n\ncpp\n  audioDevice = new MyAudioDevice();\n  streamObj = new StreamObject(msgBus, \"/Speaker/In\", audioDevice,\n  sessionPort, aboutProps);\n\n\nThe following defines the AudioDevice methods your subclass must implement.\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOpen()\n\n\nOpen and prepare the audio device for playback, and start playing as soon as it receives data.\n\n\n\n\n\n\nClose()\n\n\nClose audio device and free any resources.\n\n\n\n\n\n\nPlay()\n\n\nStart audio device playback.\n\n\n\n\n\n\nPause()\n\n\nPause audio device playback.\n\n\n\n\n\n\nPlay()\n\n\nResume after a pause.\n\n\n\n\n\n\nRecover()\n\n\nRecover from underrun if one has occurred.\n\n\n\n\n\n\nGetDelay()\n\n\nGet audio device delay (time until new samples will be audible).\n\n\n\n\n\n\nGetFramesWanted()\n\n\nGet the number of frames the audio device wants.\n\n\n\n\n\n\nWrite()\n\n\nWrite samples to audio device.\n\n\n\n\n\n\nGetMute()\n\n\nGets the audio device mute state.\n\n\n\n\n\n\nSetMute()\n\n\nSets the audio device mute state.\n\n\n\n\n\n\nGetVolumeRange()\n\n\nGets the audio device volume range.\n\n\n\n\n\n\nGetVolume()\n\n\nGets the audio device volume.\n\n\n\n\n\n\nSetVolume()\n\n\nSet audio device volume and mute state.\n\n\n\n\n\n\nAddListener()\n\n\nAdds a listener for volume and mute events.\n\n\n\n\n\n\nRemoveListener()\n\n\nRemoves a listener for volume and mute events.\n\n\n\n\n\n\n\n\nExample \nOpen()\n implementation\n\n\nbool ALSADevice::Open( const char *format, uint32_t sampleRate,\nuint32_t numChannels, uint32_t \nbufferSize ) {\n   int err;\n   if( mAudioDeviceHandle != NULL ) { fprintf(stderr, \nOpen: already open\\n\n); return false;\n   }\n\n   uint32_t bitsPerChannel;\n   snd_pcm_format_t pcmFormat;\n\n   if( strcmp(format, \ns16le\n) == 0 ) {\n      pcmFormat = SND_PCM_FORMAT_S16_LE; bitsPerChannel = 16;\n   } else {\n      fprintf(stderr, \nUnsupported audio format: %s\\n\n, format);\n      return false;\n   }\n\n   if( (err = snd_pcm_open(\nmAudioDeviceHandle, \nplughw:0,0\n,\nSND_PCM_STREAM_PLAYBACK, 0)) \n 0 ) {\n      fprintf(stderr, \ncannot open audio device (%s)\\n\n, snd_strerror(err));\n      return false;\n   }\n\n   snd_pcm_hw_params_t *hw_params = NULL;\n      if( (err = snd_pcm_hw_params_malloc(\nhw_params)) \n 0 ) {\n         fprintf (stderr, \ncannot allocate hardware parameter structure (%s)\\n\n,\nsnd_strerror(err));\n            snd_pcm_close(mAudioDeviceHandle);\n            return false;\n      }\n\n#define AUDIO_CLEANUP() \\\nif( mAudioDeviceHandle != NULL ) { \\\n   snd_pcm_close(mAudioDeviceHandle); \\\n   mAudioDeviceHandle = NULL; \\\n} \\\nif( hw_params != NULL ) { \\\n   snd_pcm_hw_params_free(hw_params); \\\n   hw_params = NULL; \\\n}\n\n   if( (err = snd_pcm_hw_params_any(mAudioDeviceHandle, hw_params)) \n 0 ) {\n      fprintf(stderr, \ncannot initialize hardware parameter structure (%s)\\n\n,\nsnd_strerror(err));\n      AUDIO_CLEANUP();\n      return false;\n   }\n\n   if( (err = snd_pcm_hw_params_set_access(mAudioDeviceHandle, hw_params,\nSND_PCM_ACCESS_RW_INTERLEAVED)) \n 0 ) {\n   fprintf(stderr, \ncannot set access type (%s)\\n\n, snd_strerror(err));\n\n   AUDIO_CLEANUP();\n   return false;\n}\n\nif( (err = snd_pcm_hw_params_set_format(mAudioDeviceHandle, hw_params,\npcmFormat)) \n 0 ) {\n   fprintf(stderr, \ncannot set sample format (%s)\\n\n, snd_strerror(err));\n   AUDIO_CLEANUP();\n   return false;\n}\n\nif( (err = snd_pcm_hw_params_set_rate_near(mAudioDeviceHandle, hw_params,\n\nsampleRate, 0)) \n 0 ) {\n   fprintf(stderr, \ncannot set sample rate (%s)\\n\n, snd_strerror(err));\n   AUDIO_CLEANUP();\n   return false;\n}\n\nif( (err = snd_pcm_hw_params_set_channels(mAudioDeviceHandle, hw_params,\nnumChannels)) \n 0 ) {\n   fprintf(stderr, \ncannot set channel count (%s)\\n\n, snd_strerror(err));\n   AUDIO_CLEANUP();\n   return false;\n}\n\nuint32_t bytesPerFrame = (bitsPerChannel \n 3) * numChannels;\nsnd_pcm_uframes_t bs = 4096 * bytesPerFrame;\nif( (err = snd_pcm_hw_params_set_buffer_size(mAudioDeviceHandle, hw_params,\nbs)) \n 0 ) {\n   fprintf(stderr, \nsnd_pcm_hw_params_set_buffer_size failed: %s\\n\n,\n   snd_strerror(err));\n}\n\nif( (err = snd_pcm_hw_params(mAudioDeviceHandle, hw_params)) \n 0 ) {\n   fprintf(stderr, \ncannot set parameters (%s)\\n\n, snd_strerror(err));\n   AUDIO_CLEANUP();\n   return false;\n}\n\nsnd_pcm_hw_params_get_buffer_size(hw_params, \nbs);\nbufferSize = (uint32_t)bs;\n\nmHardwareCanPause = snd_pcm_hw_params_can_pause(hw_params) == 1;\nsnd_pcm_hw_params_free(hw_params);\n\nreturn true;\n}\n\n\n\n\nExample \nWrite()\n implementation\n\n\nAn important part of the write implementation is that the\ncall should be blocking until the write is complete.\n\n\nThe implementation of the audio driver presents the following options:\n\n\n\n\nIf it's buffer-based, this method should block while waiting\nfor a buffer to free up.\n\n\nIn the case of ALSA, the snd_pcm_writei method is blocking.\n\n\n\n\nbool ALSADevice::Write( const uint8_t *buffer, uint32_t bufferSizeInFrames ) {\n   snd_pcm_sframes_t err = snd_pcm_writei(mAudioDeviceHandle, buffer,\nbufferSizeInFrames);\n   if( err \n 0 )\n      err = snd_pcm_recover(mAudioDeviceHandle, err, 0);\n   if( err \n 0 )\n      fprintf(stderr, \nwrite to audio interface failed (%s)\\n\n,\nsnd_strerror(err));\n   if( err \n 0 \n err != (snd_pcm_sframes_t)bufferSizeInFrames )\n      fprintf(stderr, \nshort write (expected %u, wrote %li)\\n\n,\nbufferSizeInFrames, err);\n   return err \n 0;\n}",
            "title": "Cpp"
        },
        {
            "location": "/develop/api-guide/audio-streaming/cpp/#audio-api-usage-guide-c",
            "text": "",
            "title": "Audio API Usage Guide - C++"
        },
        {
            "location": "/develop/api-guide/audio-streaming/cpp/#reference-code",
            "text": "The reference code consists of an application that implements\nan audio sink and audio source.  Audio.h contains definitions that are common to both audio\nsinks and sources.  Sink classes     Sink class  Description      AudioSinkObject  Class that implements the following AllJoyn  interfaces: org.alljoyn.Stream.Port org.alljoyn.Stream.Port.AudioSink org.alljoyn.Control.Volume    StreamObject  Class that implements the following AllJoyn interfaces: org.alljoyn.Stream org.alljoyn.Stream.Clock    AudioDevice  Abstract class for implementing access to an audio device/sound card.    ALSADevice  Subclass of AudioDevice that implements access to an audio device using the Audio Linux Sound Architecture (ALSA) API.     Source classes     Source class  Description      SinkSearcher  Helper class for discovering AudioSinks.    SinkPlayer  Implements streaming of DataSources to an AudioSink.    DataSource  Abstract class for providing data to SinkPlayer for streaming.    WavDataSource  Subclass of DataSource that provides data from WAV files to SinkPlayer for streaming.     Reference C++ application code     Application class  Description      SinkService  Command line application that receives and plays streamed audio by registering an instance of StreamObject on the AllJoyn bus.    SinkClient  Command line application that uses SinkSearcher to discover audio sinks and uses SinkPlayer to stream a WAV file to the sink.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/audio-streaming/cpp/#compile-the-audio-service-framework",
            "text": "Follow the steps in the  Configuring the Build Environment (Linux Platform) section .\nStop prior to the Building AllJoyn section.  Pull down the source code:   sh\n   $ repo init -u git clone git://git.allseenalliance/core/alljoyn.git \n3. Run SCons to compile the Audio service framework, test suite, and samples.\n    sh\n   $ cd services/audio    For 64-bit:  sh\n  $ scons CPU=x86_64 ABOUT_BASE=$ALLJOYN_BASE/about/cpp    For 32-bit:  sh\n  $ scons ABOUT_BASE=$ALLJOYN_BASE/about/cpp    The build completes, and a build folder contains the compiled files.",
            "title": "Compile the Audio service framework"
        },
        {
            "location": "/develop/api-guide/audio-streaming/cpp/#build-a-sink",
            "text": "The following steps provide the high-level process to build a Sink.   Create the base for the AllJoyn application.  Implement the AboutStore and use this with the AboutService API.\nSee the  appropriate About API Guide  for the platform\nyou are targeting for instructions.  Implement the AudioDevice if the audio device/sound card\nused by your platform is not supported.  Create and register a StreamObject.",
            "title": "Build a Sink"
        },
        {
            "location": "/develop/api-guide/audio-streaming/cpp/#build-a-source",
            "text": "The following steps provide the high-level process to build a Source.   Create the base for the AllJoyn application.  Create a class that extends SinkSearcher and SinkListener.  Create a new SinkPlayer and register the SinkListener.  Register the SinkSearcher.",
            "title": "Build a Source"
        },
        {
            "location": "/develop/api-guide/audio-streaming/cpp/#setting-up-the-alljoyn-framework",
            "text": "Every AllJoyn application requires a base set to be in place\nbefore implementing specific features.   Create BusAttachment  Connect to the AllJoyn framework   Create BusAttachment  To use the Audio service framework, an AllJoyn object called\nthe BusAttachment is needed that is used internally by the\nservice to leverage the AllJoyn API calls.  BusAttachment* msgBus = new BusAttachment( SinkService , true);  Start and connect the BusAttachment  Once created, the BusAttachment must be connected to the AllJoyn framework.  QStatus status = msgBus- Start(); if( status == ER_OK ) {\nstatus = msgBus- Connect(NULL);\n}",
            "title": "Setting Up the AllJoyn Framework"
        },
        {
            "location": "/develop/api-guide/audio-streaming/cpp/#implementing-a-sink",
            "text": "Implementing a Sink to receive streaming audio requires\ncreating and registering an instance of the StreamObject class.  NOTE:  Verify the BusAttachment has been created, started and\nconnected before implementing the Sink. See  Setting up the\nAllJoyn Framework  for the code snippets.\nCode in this section references a variable  msgBus  (the\nBusAttachment variable name).  Declare listener class  Declare a listener class to receive the SessionPortListener callbacks.\nTypically, an AcceptSessionJoiner callback in SessionPortListener\nhas a check to allow or disallow access. Since the Sink requires\naccess to everyone, return true when this callback is triggered.\nUse the SessionJoined handler to set the session timeout to 20 seconds.  class MyListener : public SessionPortListener {\n   private:\n      BusAttachment *mMsgBus;\n\n   public:\n      MyListener( BusAttachment *msgBus ) { mMsgBus = msgBus;\n      }\n\n      bool AcceptSessionJoiner( SessionPort sessionPort, const char* joiner,\nconst SessionOpts  opts ) {\n\n         printf( Accepting join session request from %s (opts.proximity=%x,\nopts.traffic=%x, opts.transports=%x)\\n ,\n            joiner, opts.proximity, opts.traffic, opts.transports);\n\n         return true;\n      }\n\n      void SessionJoined( SessionPort sessionPort, SessionId id,\nconst char* joiner ) {\n         printf( SessionJoined with %s (id=%d)\\n , joiner, id);\n         mMsgBus- EnableConcurrentCallbacks();\n         uint32_t timeout = 20;\n         QStatus status = mMsgBus- SetLinkTimeout(id, timeout);\n         if( status == ER_OK ) {\n            printf( Link timeout has been set to %ds\\n , timeout);\n         } else {\n            printf( SetLinkTimeout(%d) failed\\n , timeout);\n\n         }\n      }\n};  Use the AboutService API to announce Sink details   Declare a PropertyStore class to advertise about properties.\nThe properties advertised should be customized for the device\nthe Sink is running on.   NOTE:  See the  About API Guide  for the\n  platform you are targeting for required and optional properties\n  that the About feature can assign. The AppId field and other\n  values below are examples and should not be reused in commercial\n  products. See the  About Best Practices  for\n  details on generating the AppId and other values.  ```cpp\n   class AboutStore : public PropertyStore {\n     public:\n         AboutStore(const char  friendlyName)\n            { struct utsname utsname; uname( utsname);\n            mDeviceId = strdup(utsname.nodename);\n            mFriendlyName = strdup(friendlyName);\n         }\n         ~AboutStore() {\n            if (mDeviceId != NULL)\n               free((void )mDeviceId);\n            if (mFriendlyName != NULL)\n               free((void )mFriendlyName);\n         }\n         QStatus ReadAll(const char  languageTag, PropertyStore::Filter\n            filter, MsgArg  all) {\n            if (languageTag   strcmp(languageTag, \"en\") != 0) { return ER_FAIL;\n            }\n            if (PropertyStore::WRITE == filter) {\n               return ER_NOT_IMPLEMENTED;\n            }          size_t numProps = (PropertyStore::READ == filter) ? 11 : 7;\n        MsgArg* props = new MsgArg[numProps];\n        static const uint8_t appId[] = { 0x5a, 0x1e, 0xff, 0xf1, 0xf7,\n           0x99, 0x4d, 0x22, 0x82, 0xc0, 0x93, 0x4d, 0x3c, 0x86, 0x16, 0xa6 };\n           props[0].Set(\"{sv}\", \"AppId\", new MsgArg(\"ay\", 16, appId));\n           props[1].Set(\"{sv}\", \"DefaultLanguage\", new MsgArg(\"s\", \"en\"));\n           props[2].Set(\"{sv}\", \"DeviceName\", new MsgArg(\"s\", mFriendlyName));\n           props[3].Set(\"{sv}\", \"DeviceId\", new MsgArg(\"s\", mDeviceId));\n           props[4].Set(\"{sv}\", \"AppName\", new MsgArg(\"s\", \"SinkService\"));\n           props[5].Set(\"{sv}\", \"Manufacturer\", new MsgArg(\"s\", \"AllJoyn\"));\n           props[6].Set(\"{sv}\", \"ModelNumber\", new MsgArg(\"s\", \"1\"));\n           if (PropertyStore::READ == filter) {\n              static const char* supportedLanguages[] = { \"en\" };\n              props[7].Set(\"{sv}\", \"SupportedLanguages\", new MsgArg(\"as\",  1, supportedLanguages));\n                  props[8].Set(\"{sv}\", \"Description\", new MsgArg(\"s\", \"AllJoyn Audio Sink\"));\n                  props[9].Set(\"{sv}\", \"SoftwareVersion\", new MsgArg(\"s\", \"v0.0.1\"));\n                  props[10].Set(\"{sv}\", \"AJSoftwareVersion\", new MsgArg(\"s\", ajn::GetVersion()));\n               }             all.Set(\"a{sv}\", numProps, props);\n           all.SetOwnershipFlags(MsgArg::OwnsArgs, true);\n           return ER_OK;\n     }\n  private:\n     const char* mDeviceId;\n     const char* mFriendlyName;\n  };  ```   Create an instance of the new AboutStore class to provide\nto the StreamObject (see  Create and register StreamObject .)   cpp\n      const char *friendlyName = \"Living Room\";\n      AboutStore* aboutProps = new AboutStore(friendlyName);  Bind session port  To allow incoming connections, the formation of a session is needed.\nThe AllJoyn framework needs to be told that connections are allowed.  MyListener* myListener = new MyListener(msgBus);\nSessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false,\nSessionOpts::PROXIMITY_ANY, TRANSPORT_ANY);\nSessionPort sessionPort = SESSION_PORT_ANY;\n\nif( status == ER_OK )\n   status = msgBus- BindSessionPort(sessionPort, opts, *myListener);  Create an AudioDevice object  Some platforms use different audio drivers. As such, there is an\nabstraction layer called AudioDevice that must be implemented\nfor the platform driver. The current release supports the following platforms:   Linux:   cpp\n  AudioDevice* audioDevice = new ALSADevice();   Android:   java\n  AudioDevice* audioDevice = new AndroidDevice();  Create and register StreamObject  StreamObject is an implementation wrapper around AllJoyn\nnative calls that handle the interactions between Sink and Source.  StreamObject *streamObj = NULL; if( status == ER_OK ) {\n   streamObj = new StreamObject(msgBus,  /Speaker/In , audioDevice,\n      sessionPort, aboutProps);\n   status = streamObj- Register();\n   if (status != ER_OK)\n      printf( Failed to register stream object (%s)\\n ,\n         QCC_StatusText(status));\n}  Advertise  To accept connections, we need to advertise over the AllJoyn framework.\nThe unique name the AllJoyn framework provides is acceptable\nfor this purpose because the Audio service framework relies\non the AboutService API to distribute information about the device.  NOTE:  In most applications that use the AllJoyn framework and\ndo not use the About feature, a descriptive well-known name\nis chosen to advertise.  String name = msgBus- GetUniqueName();\nif( status == ER_OK ) {\n   status = msgBus- AdvertiseName(name.c_str(), opts.transports);\n   if (status != ER_OK)\n      printf( Failed to advertise name %s (%s)\\n , name.c_str(),\n         QCC_StatusText(status));\n}  Unregister and delete StreamObject  When your process is done with the Sink and no longer wishes\nto receive audio input, unregister the process from the AllJoyn\nbus and then delete the StreamObject instance.  if( streamObj != NULL ) {\n   streamObj- Unregister();\n   delete streamObj;\n   streamObj = NULL;\n}\ndelete aboutProps;\naboutProps = NULL;\ndelete msgBus;\n\n\nmsgBus = NULL;\ndelete myListener;\nmyListener = NULL;",
            "title": "Implementing a Sink"
        },
        {
            "location": "/develop/api-guide/audio-streaming/cpp/#implementing-a-source",
            "text": "To implement a Source to stream to a Sink, use the SinkSearcher\nand SinkPlayer classes. By declaring a SinkSearcher subclass,\nyour application is notified when Sinks are found and lost.\nWhen a Sink is found, you can add it to a SinkPlayer instance.\nVerify the BusAttachment has been created, started and connected\nbefore implementing an AudioSource. See  Setting up the AllJoyn Framework  for the code snippets. Code in this\nsection references a variable msgBus (the BusAttachment variable name).  Declare SinkSearcher subclass  To interact with different Sinks, the SinkPlayer subclass\nprovides an API containing AddSink and RemoveSink methods,\nas well as check if they have already been added.\nThe following code snippet adds any new Sink that has not\nalready been added.  NOTE:  AddSink allows for audio to be played back on that device\nonce  SinkAdded  (from the SinkListener below) has been called.\nAfter  SinkAdded  is called, call  OpenSink  on each Sink that\nshould receive audio. Play and Pause commands will affect all\nopened Sinks. Refer to the API documentation for more details.  static SinkPlayer *g_sinkPlayer = NULL;\nclass MySinkSearcher : public SinkSearcher {\n   virtual void SinkFound( Service *sink ) {\n      const char *name = sink- name.c_str();\n      const char *path = sink- path.c_str();\n      printf( Found %s objectPath=%s, sessionPort=%d\\n , name, path,\n         sink- port);\n      if( !g_sinkPlayer- HasSink(name) )\n         g_sinkPlayer- AddSink(name, sink- port, path);\n   }\n\n   virtual void SinkLost( Service *sink ) {\n   const char *name = sink- name.c_str();\n   printf( Lost %s\\n , name);\n   }\n};  Declare SinkListener subclass  SinkPlayer methods such as AddSink and RemoveSink are asynchronous.\nYou can create and register a SinkListener to be notified when\nthese calls have completed. The SinkRemoved handler is also called\nwhen a sink's session is lost.  class MySinkListener : public SinkListener {\n   void SinkAdded( const char *name ) {\n      printf( SinkAdded: %s\\n , name);\n\n      g_sinkPlayer- OpenSink(name);\n   }\n\n   void SinkAddFailed( const char *name ) {\n      printf( SinkAddFailed: %s\\n , name);\n   }\n\n   void SinkRemoved( const char *name, bool lost ) {\n      printf( SinkRemoved: %s lost=%d\\n , name, lost);\n   }\n\n   void MuteChanged(const char* name, bool mute) {\n      printf( MuteChanged: %s mute=%s\\n , name, mute ?  on  :  off );\n   }\n\n   void VolumeChanged(const char* name, int16_t volume) {\n      printf( VolumeChanged: %s volume=%d\\n , name, volume);\n   }\n};  Create and configure SinkPlayer  The SinkPlayer object is responsible for sending a supplied\nDataSource over the AllJoyn framework to any open sinks.\nThe DataSource can be set any time prior to calling the OpenSink()  method.  MySinkListener listener;\ng_sinkPlayer = new SinkPlayer(msgBus);\ng_sinkPlayer- AddListener( listener);  Set the preferred audio data format  SinkPlayer  lets you specify which format to use for streaming.\nHowever, there is no guarantee that the format you specify\nwill be used. If a Sink does not support your preferred format, SinkPlayer  automatically defaults to raw audio.  NOTE:  This must be called prior to adding a Sink using  AddSink() .  To support ALAC (Apple Lossless):  g_sinkPlayer- SetPreferredFormat(MIMETYPE_AUDIO_ALAC);  To support RAW audio support:  g_sinkPlayer- SetPreferredFormat(MIMETYPE_AUDIO_RAW);  Set the data source  To best support multiple audio file formats, a DataSource\nclass is created that represents how the audio file will be\ndecoded and read. Currently, support for WAV files is provided.\nAdding support for other audio formats will require implementing\na new class derived from DataSource.\nA .WAV file example follows.  WavDataSource dataSource;\ndataSource.Open( /path/to/file.wav ); // the WAV file to stream to the sink(s)\ng_sinkPlayer- SetDataSource( dataSource);  Create and register SinkSearcher  Create an object of the class that is derived from SinkSearcher\nfrom  Declare SinkSearcher subclass \nand register it with the BusAttachment.  MySinkSearcher searcher;\nstatus = searcher.Register(msgBus);  Start playback once a Sink has been found  It is recommended that developers verify the number of connected\nSinks = 1 prior to calling the Play method to ensure audio will\nbe played remotely. The Play method will start audio on every\nsink that OpenSink() has been called on.  // Sleep until sink is found and then play. An alternative approach would be to\n// call Play() in the SinkListener on the SinkAdded event.\nwhile( g_sinkPlayer- GetSinkCount()   1 )\n   usleep(100 * 1000);\ng_sinkPlayer- Play();  Unregister SinkSearcher and delete SinkPlayer  Once you are done streaming, unregister the SinkSearcher,\nremove any sinks that are still part of the SinkPlayer,\nand then delete the SinkPlayer.  NOTE:  The SinkPlayer object must be deleted before the BusAttachment object.  searcher.Unregister();\ng_sinkPlayer- RemoveAllSinks();\n// Wait for sinks to be removed\nwhile( g_sinkPlayer- GetSinkCount()   0 )\n   usleep(100 * 1000);\ndelete g_sinkPlayer;",
            "title": "Implementing a Source"
        },
        {
            "location": "/develop/api-guide/audio-streaming/cpp/#implementing-an-audiodevice",
            "text": "The reference code includes an AudioDevice subclass that uses\nthe ALSA API. If your target environment uses a different sound\ncard API, you must do the following:   Implement a new AudioDevice subclass.  When creating a StreamObject create a new instance of the AudioDevice\nand pass it into the StreamObject constructor. For example:   cpp\n  audioDevice = new MyAudioDevice();\n  streamObj = new StreamObject(msgBus, \"/Speaker/In\", audioDevice,\n  sessionPort, aboutProps);  The following defines the AudioDevice methods your subclass must implement.     Method  Description      Open()  Open and prepare the audio device for playback, and start playing as soon as it receives data.    Close()  Close audio device and free any resources.    Play()  Start audio device playback.    Pause()  Pause audio device playback.    Play()  Resume after a pause.    Recover()  Recover from underrun if one has occurred.    GetDelay()  Get audio device delay (time until new samples will be audible).    GetFramesWanted()  Get the number of frames the audio device wants.    Write()  Write samples to audio device.    GetMute()  Gets the audio device mute state.    SetMute()  Sets the audio device mute state.    GetVolumeRange()  Gets the audio device volume range.    GetVolume()  Gets the audio device volume.    SetVolume()  Set audio device volume and mute state.    AddListener()  Adds a listener for volume and mute events.    RemoveListener()  Removes a listener for volume and mute events.     Example  Open()  implementation  bool ALSADevice::Open( const char *format, uint32_t sampleRate,\nuint32_t numChannels, uint32_t  bufferSize ) {\n   int err;\n   if( mAudioDeviceHandle != NULL ) { fprintf(stderr,  Open: already open\\n ); return false;\n   }\n\n   uint32_t bitsPerChannel;\n   snd_pcm_format_t pcmFormat;\n\n   if( strcmp(format,  s16le ) == 0 ) {\n      pcmFormat = SND_PCM_FORMAT_S16_LE; bitsPerChannel = 16;\n   } else {\n      fprintf(stderr,  Unsupported audio format: %s\\n , format);\n      return false;\n   }\n\n   if( (err = snd_pcm_open( mAudioDeviceHandle,  plughw:0,0 ,\nSND_PCM_STREAM_PLAYBACK, 0))   0 ) {\n      fprintf(stderr,  cannot open audio device (%s)\\n , snd_strerror(err));\n      return false;\n   }\n\n   snd_pcm_hw_params_t *hw_params = NULL;\n      if( (err = snd_pcm_hw_params_malloc( hw_params))   0 ) {\n         fprintf (stderr,  cannot allocate hardware parameter structure (%s)\\n ,\nsnd_strerror(err));\n            snd_pcm_close(mAudioDeviceHandle);\n            return false;\n      }\n\n#define AUDIO_CLEANUP() \\\nif( mAudioDeviceHandle != NULL ) { \\\n   snd_pcm_close(mAudioDeviceHandle); \\\n   mAudioDeviceHandle = NULL; \\\n} \\\nif( hw_params != NULL ) { \\\n   snd_pcm_hw_params_free(hw_params); \\\n   hw_params = NULL; \\\n}\n\n   if( (err = snd_pcm_hw_params_any(mAudioDeviceHandle, hw_params))   0 ) {\n      fprintf(stderr,  cannot initialize hardware parameter structure (%s)\\n ,\nsnd_strerror(err));\n      AUDIO_CLEANUP();\n      return false;\n   }\n\n   if( (err = snd_pcm_hw_params_set_access(mAudioDeviceHandle, hw_params,\nSND_PCM_ACCESS_RW_INTERLEAVED))   0 ) {\n   fprintf(stderr,  cannot set access type (%s)\\n , snd_strerror(err));\n\n   AUDIO_CLEANUP();\n   return false;\n}\n\nif( (err = snd_pcm_hw_params_set_format(mAudioDeviceHandle, hw_params,\npcmFormat))   0 ) {\n   fprintf(stderr,  cannot set sample format (%s)\\n , snd_strerror(err));\n   AUDIO_CLEANUP();\n   return false;\n}\n\nif( (err = snd_pcm_hw_params_set_rate_near(mAudioDeviceHandle, hw_params, sampleRate, 0))   0 ) {\n   fprintf(stderr,  cannot set sample rate (%s)\\n , snd_strerror(err));\n   AUDIO_CLEANUP();\n   return false;\n}\n\nif( (err = snd_pcm_hw_params_set_channels(mAudioDeviceHandle, hw_params,\nnumChannels))   0 ) {\n   fprintf(stderr,  cannot set channel count (%s)\\n , snd_strerror(err));\n   AUDIO_CLEANUP();\n   return false;\n}\n\nuint32_t bytesPerFrame = (bitsPerChannel   3) * numChannels;\nsnd_pcm_uframes_t bs = 4096 * bytesPerFrame;\nif( (err = snd_pcm_hw_params_set_buffer_size(mAudioDeviceHandle, hw_params,\nbs))   0 ) {\n   fprintf(stderr,  snd_pcm_hw_params_set_buffer_size failed: %s\\n ,\n   snd_strerror(err));\n}\n\nif( (err = snd_pcm_hw_params(mAudioDeviceHandle, hw_params))   0 ) {\n   fprintf(stderr,  cannot set parameters (%s)\\n , snd_strerror(err));\n   AUDIO_CLEANUP();\n   return false;\n}\n\nsnd_pcm_hw_params_get_buffer_size(hw_params,  bs);\nbufferSize = (uint32_t)bs;\n\nmHardwareCanPause = snd_pcm_hw_params_can_pause(hw_params) == 1;\nsnd_pcm_hw_params_free(hw_params);\n\nreturn true;\n}  Example  Write()  implementation  An important part of the write implementation is that the\ncall should be blocking until the write is complete.  The implementation of the audio driver presents the following options:   If it's buffer-based, this method should block while waiting\nfor a buffer to free up.  In the case of ALSA, the snd_pcm_writei method is blocking.   bool ALSADevice::Write( const uint8_t *buffer, uint32_t bufferSizeInFrames ) {\n   snd_pcm_sframes_t err = snd_pcm_writei(mAudioDeviceHandle, buffer,\nbufferSizeInFrames);\n   if( err   0 )\n      err = snd_pcm_recover(mAudioDeviceHandle, err, 0);\n   if( err   0 )\n      fprintf(stderr,  write to audio interface failed (%s)\\n ,\nsnd_strerror(err));\n   if( err   0   err != (snd_pcm_sframes_t)bufferSizeInFrames )\n      fprintf(stderr,  short write (expected %u, wrote %li)\\n ,\nbufferSizeInFrames, err);\n   return err   0;\n}",
            "title": "Implementing an AudioDevice"
        },
        {
            "location": "/develop/api-guide/audio-streaming/",
            "text": "Audio Streaming API Guide\n\n\n\n\nC++\n\n\n\n\nBest Practices\n\n\nSending audio data\n\n\nThe audio source should not use session ID 0 to broadcast the\nData signal; it should send Data signals on each AudioSink's session.\n\n\nNOTE:\n Care should be taken when specifying the amount of data\nto send in each signal so as not to interrupt the delivery of\naudio data.\n\n\nClock synchronization\n\n\nThe maximum error of the clock synchronization algorithm defined\nin the \nAudio Interface Definition\n\nis the value used in the AdjustTime step. The algorithm may be\nrepeated to bind the maximum error.\n\n\nUI considerations\n\n\nButton to list Sinks in proximity\n\n\nTo provide the best experience for a consumer using an application\nthat allows for streaming audio to applications/devices running\nthe Audio service framework, configure the application to let\nthe consumer select the Sinks to stream to. It is entirely\npossible to play audio on any Sink found, but this may not\nbe the best option for a user.\n\n\nThe Android sample includes a button that a user can select\nto list nearby Sinks. These Sinks can be selected/deselected\nas desired by the user. The list is populated via the \nSinkFound\n\ncallback. The button should only appear if there is a Sink in proximity.\n\n\nThe appearance of a button allows the user of the application\nto recognize that the application supports the Audio service framework.\n\n\nButton to refresh list of Sinks\n\n\nThere are times, due to UDP propagation delays, when a Sink\nis not displayed right away. Providing the user with a button\nto refresh the list is an easy way to empower the user with\nthe ability to start searching for Sinks again.\n\n\nWhen the Refresh button is pressed, make a call into your\nSinkSearcher object to call the \nRefresh()\n method. When doing\nthis, the list that is displayed should be cleared and, as\nthe SinkSearcher responds with SinkFound callbacks, the list\nis populated again.\n\n\nRefer to the Audio service framework APIs for more information\nabout \nSinkSearcher::Refresh()\n.\n\n\nWhen to add a Sink\n\n\nWhile it's possible to place the AddSink call when a Sink\nis found, it is not recommended. A button should be present\nto let the consumer control where the audio from the device is being sent.\n\n\nHandle losing a Sink\n\n\nIf a SinkLost callback occurs and audio is not being played,\nremove the line item representing the lost Sink. There is no\nreason to alert a consumer, and it does not impact the user experience.\n\n\nIf audio is being played on a single Sink and SinkLost or\nSinkRemoved occurs, a pop-up should appear that gives the user\nthe option to continue playing locally or refresh to find other\nsinks. See \nWhen to add a Sink\n.\n\n\nWhen playing to multiple Sinks, the audio should continue\non the other connected Sinks. A popup should appear that\ninforms the user that a Sink has disappeared and include\nthe name of the Sink. This allows the user to investigate\nthe cause. Some possible causes include:\n\n\n\n\nThe Sink has powered off.\n\n\nAnother application is now using the Sink.\n\n\nThe Sink is no longer in proximity.\n\n\n\n\nPlay multiple audio formats\n\n\nThe Audio service framework supports PCM data over the wire.\n(The current release does not support sending compressed audio.)\n\n\nTo provide the best user experience when displaying the list\nof songs on the devices, consider filtering the list in advance\nto avoid playback issues.\n\n\n\n\nIf the application is intended to run on devices running\nAndroid versions earlier than 4.0 (Ice Cream Sandwich, ICS),\nthe developer must decode the MP3 file.\n\n\nIf the application is intended to run on ICS, use the\nAndroid OpenSL ES APIs to decode audio formats into 16-bit\n44.1 kHz or 48 kHz.\n\n\n\n\nSee the \nAudio API Guide\n for instructions on\nwriting a custom DataSource implementation.",
            "title": "Home"
        },
        {
            "location": "/develop/api-guide/audio-streaming/#audio-streaming-api-guide",
            "text": "C++",
            "title": "Audio Streaming API Guide"
        },
        {
            "location": "/develop/api-guide/audio-streaming/#best-practices",
            "text": "Sending audio data  The audio source should not use session ID 0 to broadcast the\nData signal; it should send Data signals on each AudioSink's session.  NOTE:  Care should be taken when specifying the amount of data\nto send in each signal so as not to interrupt the delivery of\naudio data.  Clock synchronization  The maximum error of the clock synchronization algorithm defined\nin the  Audio Interface Definition \nis the value used in the AdjustTime step. The algorithm may be\nrepeated to bind the maximum error.  UI considerations  Button to list Sinks in proximity  To provide the best experience for a consumer using an application\nthat allows for streaming audio to applications/devices running\nthe Audio service framework, configure the application to let\nthe consumer select the Sinks to stream to. It is entirely\npossible to play audio on any Sink found, but this may not\nbe the best option for a user.  The Android sample includes a button that a user can select\nto list nearby Sinks. These Sinks can be selected/deselected\nas desired by the user. The list is populated via the  SinkFound \ncallback. The button should only appear if there is a Sink in proximity.  The appearance of a button allows the user of the application\nto recognize that the application supports the Audio service framework.  Button to refresh list of Sinks  There are times, due to UDP propagation delays, when a Sink\nis not displayed right away. Providing the user with a button\nto refresh the list is an easy way to empower the user with\nthe ability to start searching for Sinks again.  When the Refresh button is pressed, make a call into your\nSinkSearcher object to call the  Refresh()  method. When doing\nthis, the list that is displayed should be cleared and, as\nthe SinkSearcher responds with SinkFound callbacks, the list\nis populated again.  Refer to the Audio service framework APIs for more information\nabout  SinkSearcher::Refresh() .  When to add a Sink  While it's possible to place the AddSink call when a Sink\nis found, it is not recommended. A button should be present\nto let the consumer control where the audio from the device is being sent.  Handle losing a Sink  If a SinkLost callback occurs and audio is not being played,\nremove the line item representing the lost Sink. There is no\nreason to alert a consumer, and it does not impact the user experience.  If audio is being played on a single Sink and SinkLost or\nSinkRemoved occurs, a pop-up should appear that gives the user\nthe option to continue playing locally or refresh to find other\nsinks. See  When to add a Sink .  When playing to multiple Sinks, the audio should continue\non the other connected Sinks. A popup should appear that\ninforms the user that a Sink has disappeared and include\nthe name of the Sink. This allows the user to investigate\nthe cause. Some possible causes include:   The Sink has powered off.  Another application is now using the Sink.  The Sink is no longer in proximity.   Play multiple audio formats  The Audio service framework supports PCM data over the wire.\n(The current release does not support sending compressed audio.)  To provide the best user experience when displaying the list\nof songs on the devices, consider filtering the list in advance\nto avoid playback issues.   If the application is intended to run on devices running\nAndroid versions earlier than 4.0 (Ice Cream Sandwich, ICS),\nthe developer must decode the MP3 file.  If the application is intended to run on ICS, use the\nAndroid OpenSL ES APIs to decode audio formats into 16-bit\n44.1 kHz or 48 kHz.   See the  Audio API Guide  for instructions on\nwriting a custom DataSource implementation.",
            "title": "Best Practices"
        },
        {
            "location": "/develop/api-guide/config/c-thin/",
            "text": "Configuration API Guide - C (Thin Core)\n\n\nObtain the Configuration service framework\n\n\nThe source code for this service framework can be found on\nthe \nAllSeen Alliance gerrit page\n as a\ngit project. In addition, the \najtcl\n project\nis needed to compile this service framework.\n\n\nIf the target platform already supports the AllJoyn\n\nThin Library framework, follow the target platform documentation\nfor detailed setup and download instructions.\n\n\nIf the target platform does not support the AllJoyn Thin\nLibrary framework, porting work is required to support this\ntarget. See the \nIntroduction to AllJoyn Thin Library\n for\nmore information about the AllJoyn Thin Library framework.\n\n\nReference code\n\n\nThe reference code consists of a module implementing the\nConfig Server layer to provide remote access of ConfigData\nand device simple control. It also has a ConfigService-specific\nsample code for integrating with the ServerSample application code.\n\n\nConfig Server modules\n\n\n\n\n\n\n\n\nServer module\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nConfigSample\n\n\nThis module is responsible for the general flow of the Config sample application including initialization, shutdown of the ConfigService module, and performing any ConfigService-related business logic when the application's message loop is idling.\n\n\n\n\n\n\nConfigService\n\n\nConfig service core code. Implements the BusObjects and exposes the developer's API.\n\n\n\n\n\n\nPropertyStore\n\n\nPropertyStore sample implementation code. This supports all core services. This module is part of the AppsCommon.\n\n\n\n\n\n\nApplicationProvisioning\n\n\nApplication provisioning code for all services. This module is part of the sample application ServerSample or ACServerSample.\n\n\n\n\n\n\n\n\nBuild a Config Server\n\n\nThe following steps provide the high-level process to build a Config Server.\n\n\n\n\nCreate the base for the AllJoyn application. See the \nBuild an\nApplication using the Thin Library section\n\nfor instructions.\n\n\nImplement the PropertyStore and provision its values.\n\n\nImplement the remote callbacks.\n\n\n(Optional) Integrate with the AuthListener's PasswordCallback\nto provide a remotely modifiable passcode based ALLJOYN_ECDHE_PSK\nsecure connection.\n\n\n\n\nImplementing the Config Server\n\n\nCreate the base for the AllJoyn application\n\n\nSee the \nBuild an Application using the Thin Library section\n\nfor instructions.\n\n\nProvision the PropertyStore for the Configuration service framework\n\n\nA PropertyStore structure is required by the ConfigService\nto store the provisioned values for the Config interface data\nfields listed below. See the \nConfiguration Interface Definition\n for more information.\n\n\nConfig interface data fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nAnnounced\n\n\nType\n\n\n\n\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceName\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\n\n\nPropertyStore implementation\n\n\nThe PropertyStore code is an example PropertyStore implementation\nthat supports the requirements of ConfigService and is included\nin the AppsCommon code.\n\n\nThe PropertyStore uses the provisioning structures that are\ndefined in the PropertyStoreOEMProvisioning.h file in the AppsCommon.\nA provisioning example is provided in the ServerSample code and\nis explained in the \nBuild an Application using the Thin Library section\n.\n\n\nAdding custom field definition and values\n\n\nComplete the following steps to add your own custom fields.\n\n\n\n\nDecide to which subset the field belongs and add it to\nthe enumeration \nAJSVC_PropertyStoreFieldIndices\n accordingly.\n\n\nAdd a new field entry at the respective index to the\npropertyStoreProperties.\n\n\nDecide whether the field is publicly accessible from remote\nclients. If the field is public then set the \nmode7Public\n bit to 1.\n\n\nDecide whether the field is to be allowed to be configured\nremotely through the Configuration service framework. If the\nfield is updateable, then set the \nmode0Write\n bit to 1.\n   \nNOTE:\n If you set this bit, the field's index must be\n   included in the Persisted or Config keys subsets.\n\n\nDecide whether the field is to be included in the Announcement.\nIf the field is announced then set the \nmode1Announce\n bit to 1.\n   \nNOTE:\n It is recommended to limit the inclusion of a field\n   in the Announcement according to its immediate relevance to\n   the relevant service framework's discovery. Only the value\n   associated with the currentDefaultLanguage will be sent\n   in the Announcement.\n\n\nDecide whether the field is multi-language and add the\nrelevant values for the provisioned languages. If the field\nis multi-language then set the \nmode2MultiLng bit\n to 1.\n\n\nDecide whether the field is to be provisioned dynamically\nin code and persisted during first-time (or post-factory reset)\ndevice startup. If the field is to be initialized once, then\nset the \nmode3Init\n bit to 1 and add the relevant code to initialize it.\n\n\n\n\nRefer to PropertyStore.c \nPropertyStore_Init()\n and\n   \nInitMandatoryPropertiesInRAM()\n for an example setup for the\n   DeviceId and AppId fields.\n\n\nNOTE:\n If you set this bit, the field's index must be included\n   in the Persisted keys subsets.\n\n\n\n\nAdd relevant validation of updated value for your custom key\nby modifying the default implementation of \nIsValueValid()\n in\nConfigSample.c file.\n\n\n\n\nc\n   uint8_t IsValueValid(const char* key, const char* value) {return TRUE;}\n\n\n\n\nAdd entry in corresponding index of propertyStoreDefaultValues\nto provision default value(s).\n\n\nAdd entry in corresponding index of propertyStoreRuntimeValues\nto provision for runtime value(s) buffer(s).\n\n\n\n\nNOTE:\n The example implementation of PropertyStore supports\nproperties with value of type String ('s') only. If your property\nmust be of a different type, you must provision the default value\nas a String and perform the relevant de/serialization on the client side.\n\n\nImplement remote callbacks\n\n\nThe Configuration service framework has the following callbacks\nthat allow for the application writer to react to remote initiated\nevents and updating of configurable values. The prototype of\nthese are defined in ConfigService.h .\n\n\n\n\nRestart-Restart the device or at least its Wi-Fi driver.\n\n\nFactoryReset-Clear persistent values and restore any factory\ndefaults. Optionally, the application developer can mandate a\npower cycle of the device as well.\n\n\nSetPasscode-Persist new device passcode and revoke encryption\nkeys generated from the previous passcode. Optionally, restart\nthe device as well to cause current sessions to be re-established.\n\n\nIsValueValid-Validate a given value for a key and a specific language.\n\n\n\n\nThe ServerSample code provides the following in the ConfigSample module:\n\n\n\n\nRequired callbacks defined in ConfigService.h and provided\nto the service framework in the call to \nAJCFG_Start()\n.\n\n\nExample implementation of these callbacks in the ConfigSample.c file.\n\n\n\n\nStart the Config server\n\n\nThe Config server is required to be passed the provisioning\nby the application via a call to \nAJCFG_Start()\n.\n\n\nAn example is in \nConfig_Init()\n of ConfigSample.c:\n\n\n/**\n* Actions to perform when factory reset is requested.\n*/\nstatic AJ_Status FactoryReset() {...}\n/**\n* Actions to perform when a device restart is requested.\n*/\nstatic AJ_Status Restart() {...}\n/**\n* Actions to perform when a new device passcode is set.\n*/\nstatic AJ_Status SetPasscode(const char* daemonRealm, const uint8_t*\nnewPasscode, uint8_t newPasscodeLen) {...}\n/**\n* Check whether the given value is valid for the given key.\n*/\nstatic uint8_t IsValueValid(const char* key, const char* value) {...}\n\nAJ_Status Config_Init()\n{\nAJ_Status status = AJCFG_Start(\nFactoryReset, \nRestart, \nSetPasscode,\n\nIsValueValid);\nreturn status;\n}\n\n\n\n\nIntegrate the Configuration service framework with an application's AuthListener\n\n\nThe Configuration service framework and other AllJoyn service\nframework interface methods and signals require a secure AllJoyn\nconnection. The application writer may choose to use an ALLJOYN_ECDHE_PSK\nauthentication mechanism in its AuthListener implementation.\nThe Configuration service framework enables remote setting\nof a password that can be used as the secret for a key exchange\nauthentication mechanism. An example implementation that uses\nthis facility is included in the sample server application\nin the Services_Handlers.c file as shown below.\n\n\nuint32_t PasswordCallback(uint8_t* buffer, uint32_t bufLen)\n{\n   AJ_Status status = AJ_OK;\n   const char* hexPassword;\n   size_t hexPasswordLen;\n   uint32_t len = 0;\n\n   hexPassword = AJSVC_PropertyStore_GetValue(AJSVC_PROPERTY_STORE_PASSCODE);\n   if (hexPassword == NULL) { AJ_ErrPrintf((\nPassword is NULL!\\n\n)); return len;\n   }\n   AJ_InfoPrintf((\nRetrieved password=%s\\n\n, hexPassword));\n   hexPasswordLen = strlen(hexPassword);\n   len = hexPasswordLen / 2;\n   status = AJ_HexToRaw(hexPassword, hexPasswordLen, buffer, bufLen);\n   if (status == AJ_ERR_RESOURCES) {\n   len = 0;\n   }\n\n\n\n\nThe above implementation calls AJSVC_PropertyStore_GetValue\n(\nAJSVC_PROPERTY_STORE_PASSCODE\n) to retrieve the current password.\nThis implementation relies on an extension in the sample\nimplementation of the PropertyStore which was extended with\nthe Passcode field defined in the \nAJSCV_PropertyStoreFieldIndices\n\nenumeration. The field is remotely updateable via a Configuration\nservice framework session using the dedicated \nSetPasscode()\n method.\nThe stored Passcode is limited to the size of\n65 allowing for 64 characters long secret:\n\n\n#define PASSWORD_VALUE_LENGTH 65\n\n\n\n\nThis is achieved using the field definition that masks the\nfield as writable yet private, as shown in the propertyStoreProperties\ninitialization in PropertyStore.c:\n\n\n{ \nPasscode\n,   1, 0, 0, 0, 0, 0, 0, 0 }\n\n\n\n\nThe default value is provisioned in ServerSample.c as follows:\n\n\nstatic const char* DEFAULT_PASSCODES[] = { \n303030303030\n };\n// HEX encoded { '0', '0', '0', '0', '0', '0' }\n\n\n\n\nand added to propertyStoreDefaultValues.\n\n\nDEFAULT_PASSCODES,  /*Passcode*/\n\n\n\n\nSince the Passcode enumeration value is less than \nAJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS\n,\nit is also considered part of the \npropertyStoreRuntimeValues\n;\nits modified value is persisted.\n\n\nAlso, when \nSetPasscode()\n is called remotely, the \nSetPasscode()\n\ncallback is invoked with the example implementation in ConfigSample.c file shown below:\n\n\nstatic AJ_Status SetPasscode(const char* daemonRealm,\n   const uint8_t* newPasscode, uint8_t newPasscodeLen)\n{\n   AJ_Status status = AJ_OK;\n\n   char newStringPasscode[PASSWORD_VALUE_LENGTH + 1];\n   status = AJ_RawToHex(newPasscode, newPasscodeLen, newStringPasscode,\n      sizeof(newStringPasscode), FALSE);\n   if (status != AJ_OK) {\n      return status;\n   }\n   if (AJSVC_PropertyStore_SetValue(AJSVC_PROPERTY_STORE_REALM_NAME,\n      daemonRealm) \n AJSVC_PropertyStore_SetValue(AJSVC_PROPERTY_STORE_PASSCODE,\n      newStringPasscode)) {\n\n      status = AJSVC_PropertyStore_SaveAll();\n      if (status != AJ_OK) {\n         return status;\n      }\n      AJ_ClearCredentials();\n      status = AJ_ERR_READ; //Force disconnect of AJ and services\n         to refresh current sessions\n   } else {\n\n      status = AJSVC_PropertyStore_LoadAll();\n      if (status != AJ_OK) {\n         return status;\n      }\n   }\n\n   return status;\n}\n\n\n\n\nThe above implementation stores the passcode as part of the\nPropertyStore persistence:\n\n\n\n\nIt calls \nAJSVC_ PropertyStore_SetValue(Passcode,\nnewStringPasscode)\n to set the value in RAM.\n\n\nIf successful, it also calls \nAJSVC_ PropertyStore_SaveAll()\n\nto persist to NVRAM.\n\n\nFinally, \nAJ_ClearCredentials()\n is called to revoke all\ncurrent keys based on the old passcode.\n\n\n\n\nNOTES\n\n\n\n\nThe stored passcode is HEX and is limited to the size\nof 32, allowing for 16 bytes long secret:\n\n\n\n\n#define PASSWORD_VALUE_LENGTH (AJ_ADHOC_LEN * 2)\n\n\n\n\n\n\nThe default value for the Passcode field is provisioned as\n'303030303030' (the HEX encoded string value for the byte array\n{ '0', '0', '0', '0', '0', '0'}) as per the requirement outlined\nin the [Configuration Interface Definition][config-interface-definition.\n\n\nThe realm name is similarly persisted alongside the passcode\nby adding the RealmNamefield index to the \nAJSVC_PropertyStoreFieldIndices\n\nenumeration and provisioning for it in \npropertyStoreDefaultValues\n\nand \npropertyStoreRuntimeValues\n initialization.\n\n\n\n\nCompile the code\n\n\nThe process to compile varies depending on the host and\ntarget platform. Each host and platform needs may require\na specific directory and file layout, build toolchains,\nprocedures, and supported AllJoyn service frameworks. Refer\nto the target platform documentation that contains instructions\non how to organize and set up the build process to incorporate\nthe necessary files to compile your Thin Library application.\n\n\nFor more details on how to combine this AllJoyn service\nframework with other AllJoyn service framework software,\nsee the \nBuild an Application using the Thin Library section\n.",
            "title": "C thin"
        },
        {
            "location": "/develop/api-guide/config/c-thin/#configuration-api-guide-c-thin-core",
            "text": "",
            "title": "Configuration API Guide - C (Thin Core)"
        },
        {
            "location": "/develop/api-guide/config/c-thin/#obtain-the-configuration-service-framework",
            "text": "The source code for this service framework can be found on\nthe  AllSeen Alliance gerrit page  as a\ngit project. In addition, the  ajtcl  project\nis needed to compile this service framework.  If the target platform already supports the AllJoyn \nThin Library framework, follow the target platform documentation\nfor detailed setup and download instructions.  If the target platform does not support the AllJoyn Thin\nLibrary framework, porting work is required to support this\ntarget. See the  Introduction to AllJoyn Thin Library  for\nmore information about the AllJoyn Thin Library framework.",
            "title": "Obtain the Configuration service framework"
        },
        {
            "location": "/develop/api-guide/config/c-thin/#reference-code",
            "text": "The reference code consists of a module implementing the\nConfig Server layer to provide remote access of ConfigData\nand device simple control. It also has a ConfigService-specific\nsample code for integrating with the ServerSample application code.  Config Server modules     Server module  Description      ConfigSample  This module is responsible for the general flow of the Config sample application including initialization, shutdown of the ConfigService module, and performing any ConfigService-related business logic when the application's message loop is idling.    ConfigService  Config service core code. Implements the BusObjects and exposes the developer's API.    PropertyStore  PropertyStore sample implementation code. This supports all core services. This module is part of the AppsCommon.    ApplicationProvisioning  Application provisioning code for all services. This module is part of the sample application ServerSample or ACServerSample.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/config/c-thin/#build-a-config-server",
            "text": "The following steps provide the high-level process to build a Config Server.   Create the base for the AllJoyn application. See the  Build an\nApplication using the Thin Library section \nfor instructions.  Implement the PropertyStore and provision its values.  Implement the remote callbacks.  (Optional) Integrate with the AuthListener's PasswordCallback\nto provide a remotely modifiable passcode based ALLJOYN_ECDHE_PSK\nsecure connection.",
            "title": "Build a Config Server"
        },
        {
            "location": "/develop/api-guide/config/c-thin/#implementing-the-config-server",
            "text": "Create the base for the AllJoyn application  See the  Build an Application using the Thin Library section \nfor instructions.  Provision the PropertyStore for the Configuration service framework  A PropertyStore structure is required by the ConfigService\nto store the provisioned values for the Config interface data\nfields listed below. See the  Configuration Interface Definition  for more information.  Config interface data fields     Field name  Required  Announced  Type      DefaultLanguage  yes  yes  s    DeviceName  yes  yes  s     PropertyStore implementation  The PropertyStore code is an example PropertyStore implementation\nthat supports the requirements of ConfigService and is included\nin the AppsCommon code.  The PropertyStore uses the provisioning structures that are\ndefined in the PropertyStoreOEMProvisioning.h file in the AppsCommon.\nA provisioning example is provided in the ServerSample code and\nis explained in the  Build an Application using the Thin Library section .  Adding custom field definition and values  Complete the following steps to add your own custom fields.   Decide to which subset the field belongs and add it to\nthe enumeration  AJSVC_PropertyStoreFieldIndices  accordingly.  Add a new field entry at the respective index to the\npropertyStoreProperties.  Decide whether the field is publicly accessible from remote\nclients. If the field is public then set the  mode7Public  bit to 1.  Decide whether the field is to be allowed to be configured\nremotely through the Configuration service framework. If the\nfield is updateable, then set the  mode0Write  bit to 1.\n    NOTE:  If you set this bit, the field's index must be\n   included in the Persisted or Config keys subsets.  Decide whether the field is to be included in the Announcement.\nIf the field is announced then set the  mode1Announce  bit to 1.\n    NOTE:  It is recommended to limit the inclusion of a field\n   in the Announcement according to its immediate relevance to\n   the relevant service framework's discovery. Only the value\n   associated with the currentDefaultLanguage will be sent\n   in the Announcement.  Decide whether the field is multi-language and add the\nrelevant values for the provisioned languages. If the field\nis multi-language then set the  mode2MultiLng bit  to 1.  Decide whether the field is to be provisioned dynamically\nin code and persisted during first-time (or post-factory reset)\ndevice startup. If the field is to be initialized once, then\nset the  mode3Init  bit to 1 and add the relevant code to initialize it.   Refer to PropertyStore.c  PropertyStore_Init()  and\n    InitMandatoryPropertiesInRAM()  for an example setup for the\n   DeviceId and AppId fields.  NOTE:  If you set this bit, the field's index must be included\n   in the Persisted keys subsets.   Add relevant validation of updated value for your custom key\nby modifying the default implementation of  IsValueValid()  in\nConfigSample.c file.   c\n   uint8_t IsValueValid(const char* key, const char* value) {return TRUE;}   Add entry in corresponding index of propertyStoreDefaultValues\nto provision default value(s).  Add entry in corresponding index of propertyStoreRuntimeValues\nto provision for runtime value(s) buffer(s).   NOTE:  The example implementation of PropertyStore supports\nproperties with value of type String ('s') only. If your property\nmust be of a different type, you must provision the default value\nas a String and perform the relevant de/serialization on the client side.  Implement remote callbacks  The Configuration service framework has the following callbacks\nthat allow for the application writer to react to remote initiated\nevents and updating of configurable values. The prototype of\nthese are defined in ConfigService.h .   Restart-Restart the device or at least its Wi-Fi driver.  FactoryReset-Clear persistent values and restore any factory\ndefaults. Optionally, the application developer can mandate a\npower cycle of the device as well.  SetPasscode-Persist new device passcode and revoke encryption\nkeys generated from the previous passcode. Optionally, restart\nthe device as well to cause current sessions to be re-established.  IsValueValid-Validate a given value for a key and a specific language.   The ServerSample code provides the following in the ConfigSample module:   Required callbacks defined in ConfigService.h and provided\nto the service framework in the call to  AJCFG_Start() .  Example implementation of these callbacks in the ConfigSample.c file.   Start the Config server  The Config server is required to be passed the provisioning\nby the application via a call to  AJCFG_Start() .  An example is in  Config_Init()  of ConfigSample.c:  /**\n* Actions to perform when factory reset is requested.\n*/\nstatic AJ_Status FactoryReset() {...}\n/**\n* Actions to perform when a device restart is requested.\n*/\nstatic AJ_Status Restart() {...}\n/**\n* Actions to perform when a new device passcode is set.\n*/\nstatic AJ_Status SetPasscode(const char* daemonRealm, const uint8_t*\nnewPasscode, uint8_t newPasscodeLen) {...}\n/**\n* Check whether the given value is valid for the given key.\n*/\nstatic uint8_t IsValueValid(const char* key, const char* value) {...}\n\nAJ_Status Config_Init()\n{\nAJ_Status status = AJCFG_Start( FactoryReset,  Restart,  SetPasscode, IsValueValid);\nreturn status;\n}  Integrate the Configuration service framework with an application's AuthListener  The Configuration service framework and other AllJoyn service\nframework interface methods and signals require a secure AllJoyn\nconnection. The application writer may choose to use an ALLJOYN_ECDHE_PSK\nauthentication mechanism in its AuthListener implementation.\nThe Configuration service framework enables remote setting\nof a password that can be used as the secret for a key exchange\nauthentication mechanism. An example implementation that uses\nthis facility is included in the sample server application\nin the Services_Handlers.c file as shown below.  uint32_t PasswordCallback(uint8_t* buffer, uint32_t bufLen)\n{\n   AJ_Status status = AJ_OK;\n   const char* hexPassword;\n   size_t hexPasswordLen;\n   uint32_t len = 0;\n\n   hexPassword = AJSVC_PropertyStore_GetValue(AJSVC_PROPERTY_STORE_PASSCODE);\n   if (hexPassword == NULL) { AJ_ErrPrintf(( Password is NULL!\\n )); return len;\n   }\n   AJ_InfoPrintf(( Retrieved password=%s\\n , hexPassword));\n   hexPasswordLen = strlen(hexPassword);\n   len = hexPasswordLen / 2;\n   status = AJ_HexToRaw(hexPassword, hexPasswordLen, buffer, bufLen);\n   if (status == AJ_ERR_RESOURCES) {\n   len = 0;\n   }  The above implementation calls AJSVC_PropertyStore_GetValue\n( AJSVC_PROPERTY_STORE_PASSCODE ) to retrieve the current password.\nThis implementation relies on an extension in the sample\nimplementation of the PropertyStore which was extended with\nthe Passcode field defined in the  AJSCV_PropertyStoreFieldIndices \nenumeration. The field is remotely updateable via a Configuration\nservice framework session using the dedicated  SetPasscode()  method.\nThe stored Passcode is limited to the size of\n65 allowing for 64 characters long secret:  #define PASSWORD_VALUE_LENGTH 65  This is achieved using the field definition that masks the\nfield as writable yet private, as shown in the propertyStoreProperties\ninitialization in PropertyStore.c:  {  Passcode ,   1, 0, 0, 0, 0, 0, 0, 0 }  The default value is provisioned in ServerSample.c as follows:  static const char* DEFAULT_PASSCODES[] = {  303030303030  };\n// HEX encoded { '0', '0', '0', '0', '0', '0' }  and added to propertyStoreDefaultValues.  DEFAULT_PASSCODES,  /*Passcode*/  Since the Passcode enumeration value is less than  AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS ,\nit is also considered part of the  propertyStoreRuntimeValues ;\nits modified value is persisted.  Also, when  SetPasscode()  is called remotely, the  SetPasscode() \ncallback is invoked with the example implementation in ConfigSample.c file shown below:  static AJ_Status SetPasscode(const char* daemonRealm,\n   const uint8_t* newPasscode, uint8_t newPasscodeLen)\n{\n   AJ_Status status = AJ_OK;\n\n   char newStringPasscode[PASSWORD_VALUE_LENGTH + 1];\n   status = AJ_RawToHex(newPasscode, newPasscodeLen, newStringPasscode,\n      sizeof(newStringPasscode), FALSE);\n   if (status != AJ_OK) {\n      return status;\n   }\n   if (AJSVC_PropertyStore_SetValue(AJSVC_PROPERTY_STORE_REALM_NAME,\n      daemonRealm)   AJSVC_PropertyStore_SetValue(AJSVC_PROPERTY_STORE_PASSCODE,\n      newStringPasscode)) {\n\n      status = AJSVC_PropertyStore_SaveAll();\n      if (status != AJ_OK) {\n         return status;\n      }\n      AJ_ClearCredentials();\n      status = AJ_ERR_READ; //Force disconnect of AJ and services\n         to refresh current sessions\n   } else {\n\n      status = AJSVC_PropertyStore_LoadAll();\n      if (status != AJ_OK) {\n         return status;\n      }\n   }\n\n   return status;\n}  The above implementation stores the passcode as part of the\nPropertyStore persistence:   It calls  AJSVC_ PropertyStore_SetValue(Passcode,\nnewStringPasscode)  to set the value in RAM.  If successful, it also calls  AJSVC_ PropertyStore_SaveAll() \nto persist to NVRAM.  Finally,  AJ_ClearCredentials()  is called to revoke all\ncurrent keys based on the old passcode.   NOTES   The stored passcode is HEX and is limited to the size\nof 32, allowing for 16 bytes long secret:   #define PASSWORD_VALUE_LENGTH (AJ_ADHOC_LEN * 2)   The default value for the Passcode field is provisioned as\n'303030303030' (the HEX encoded string value for the byte array\n{ '0', '0', '0', '0', '0', '0'}) as per the requirement outlined\nin the [Configuration Interface Definition][config-interface-definition.  The realm name is similarly persisted alongside the passcode\nby adding the RealmNamefield index to the  AJSVC_PropertyStoreFieldIndices \nenumeration and provisioning for it in  propertyStoreDefaultValues \nand  propertyStoreRuntimeValues  initialization.   Compile the code  The process to compile varies depending on the host and\ntarget platform. Each host and platform needs may require\na specific directory and file layout, build toolchains,\nprocedures, and supported AllJoyn service frameworks. Refer\nto the target platform documentation that contains instructions\non how to organize and set up the build process to incorporate\nthe necessary files to compile your Thin Library application.  For more details on how to combine this AllJoyn service\nframework with other AllJoyn service framework software,\nsee the  Build an Application using the Thin Library section .",
            "title": "Implementing the Config Server"
        },
        {
            "location": "/develop/api-guide/config/cpp/",
            "text": "Configuration API Guide - C++\n\n\nReference code\n\n\nClasses used to provide ConfigData\n\n\n\n\n\n\n\n\nServer class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nConfigService\n\n\nClass that implements the interface org.alljoyn.Config as a service framework.\n\n\n\n\n\n\nPropertyStore\n\n\nInterface that supplies the list of properties required for ReadAll() and enables user manipulation of their values via Update(), Delete() and Reset().\n\n\n\n\n\n\n\n\nClasses used to remotely manipulate ConfigData\n\n\n\n\n\n\n\n\nClient class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nConfigClient\n\n\nClass that implements the interface org.alljoyn.Config as a client.\n\n\n\n\n\n\n\n\nObtain the Configuration service framework\n\n\nSee the \nBuilding Linux section\n\nfor instructions on compiling the Configuration service framework.\n\n\nBuild an application that uses ConfigServer\n\n\nThe following steps provide the high-level process to build an\napplication that will maintain ConfigData.\n\n\n\n\nCreate the base for the AllJoyn\n application.\n\n\nImplement the ProperyStore to produce a ConfigStore.\n\n\nInitialize the AboutService in service mode.\n\n\nInstantiate a ConfigStore.\n\n\nImplement the callbacks required by the Config Server.\n\n\nInitialize the ConfigService in server mode, providing\nit with the ConfigStore and callbacks.\n\n\n\n\nSetting up the AllJoyn framework and About feature\n\n\nThe steps required for this service framework are universal\nto all applications that use the AllJoyn framework and for\nany application using one or more AllJoyn service frameworks.\nPrior to use of the Configuration service framework as a Config\nServer or Config Client, the About feature must be implemented\nand the AllJoyn framework set up.\n\n\nComplete the procedures in the following documents to guide\nyou in this process:\n\n\n\n\nBuilding Linux section\n\n\nAbout API Guide\n\n\n\n\nImplementing an App: Config Server\n\n\nImplementing a Config Server requires creating and registering\nan instance of the ConfigService class. Any application using\nConfig Server also requires an About Server to facilitate the\ndiscovery via Announcements.\n\n\nNOTE:\n Verify the BusAttachment has been created, started and\nconnected before implementing the ConfigService. See the\n\nAbout API Guide\n for the code snippets.\nCode in this chapter references a variable \nmBus\n\n(the BusAttachment variable name).\n\n\nInitialize the AllJoyn framework\n\n\nSee the \nBuilding Linux section\n for instructions\nto set up the AllJoyn framework.\n\n\nCreate bus attachment\n\n\nbus-\nStart();\nbus-\nConnect();\n\n\n\n\nEnable peer security\n\n\nConfig Server uses peer security.\n\n\nCreate a KeyListener class that inherits from ajn::AuthListener.\nIt needs to implement two functions: RequestCredentials and\nAuthenticationComplete.\n\n\nclass SrpKeyXListener : public ajn::AuthListener {\n   public:\n      bool RequestCredentials(const char* authMechanism,\n         const char* authPeer,\n         uint16_t authCount, const char* userId,\n         uint16_t credMask, Credentials\n creds);\n      void AuthenticationComplete(const char* authMechanism, const char* authPeer,\n\n   bool success);\n};\n\n\n\n\nRequestCredentials()\n needs to set the password using Creds\nand return true.\n\n\ncreds.SetPassword(Password);\nreturn true;\n\n\n\n\nInstantiate the keylistener class and enable peer security.\n\n\nSrpKeyXListener* keyListener = new SrpKeyXListener();\nbus-\nEnablePeerSecurity(\nALLJOYN_PIN_KEYX ALLJOYN_SRP_KEYX ALLJOYN_ECDHE_PSK\n, keyListener);\n\n\n\n\nImplement PropertyStore to produce a ConfigStore\n\n\nThe PropertyStore interface is required by the AboutService\nto store the provisioned values for the About interface data\nfields. See the \nAbout Interface Definition\n for more information.\n\n\nThe ProperyStore interface is also required by the ConfigService\nto store and facilitate manipulation of some updateable fields\n(listed in \nConfig interface data fields\n).\nSee the [Configuration Interface Definition] for more information.\n\n\nConfig interface data fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nType\n\n\n\n\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceName\n\n\nyes\n\n\ns\n\n\n\n\n\n\n\n\nAn example PropertyStore implementation (ConfigStore) is\nprovided below that specifies the following dictionary of\nmetadata fields:\n\n\n\n\nKeys are the field names.\n\n\nValues are a Map of String to Object entries where the\nString is the language tag associated with the Object value.\n\n\n\n\nThis implementation extends the example AboutStore implementation\nin the \nAbout API Guide\n and is\npassed to the AboutService instead of AboutStore.\n\n\nPropertyStoreImpl::PropertyStoreImpl(const char* factoryConfigFile, const char*\nconfigFile) : m_IsInitialized(false)\n{\n   m_configFileName.assign(configFile);\n   m_factoryConfigFileName.assign(factoryConfigFile);\n}\n\nvoid PropertyStoreImpl::Initialize()\n{\n   m_IsInitialized = true; m_factoryProperties.clear();\n   m_factoryProperties.insert(m_Properties.begin(), m_Properties.end());\n\n   //m_factoryProperties - overwrite the values that are found in\nFactoryConfigService file\n   UpdateFactorySettings();\n}\n\nvoid PropertyStoreImpl::FactoryReset()\n{\n   std::ifstream factoryConfigFile(m_factoryConfigFileName.c_str(), std::ios::binary);\n   std::ofstream configFile(m_configFileName.c_str(), std::ios::binary);\n\n   if (factoryConfigFile \n configFile) {\n      configFile \n factoryConfigFile.rdbuf();\n\n      configFile.close();\n      factoryConfigFile.close();\n   } else {\n      std::cout \n \nFactory reset failed\n \n std::endl;\n   }\n\n   m_Properties.clear();\n   m_Properties.insert(m_factoryProperties.begin(), m_factoryProperties.end());\n}\n\nconst qcc::String\n PropertyStoreImpl::GetConfigFileName()\n{\n   return m_configFileName;\n}\n\nPropertyStoreImpl::~PropertyStoreImpl()\n{\n}\n\nQStatus PropertyStoreImpl::ReadAll(const char* languageTag, Filter filter, ajn::MsgArg\n all)\n{\n   if (!m_IsInitialized) {\n      return ER_FAIL;\n   }\n\n   if (filter == ANNOUNCE || filter == READ) {\n      return AboutPropertyStoreImpl::ReadAll(languageTag, filter, all);\n   }\n\n   if (filter != WRITE) {\n      return ER_FAIL;\n   }\n\n   QStatus status = ER_OK;\n   if (languageTag != NULL \n languageTag[0] != 0) { // check that the language is in the supported languages;\n      CHECK_RETURN(isLanguageSupported(languageTag))\n   } else {\n      PropertyMap::iterator it = m_Properties.find(DEFAULT_LANG);\n      if (it == m_Properties.end()) {\n\n         return ER_LANGUAGE_NOT_SUPPORTED;\n      }\n      CHECK_RETURN(it-\nsecond.getPropertyValue().Get(\ns\n, \nlanguageTag))\n   }\n\n   MsgArg* argsWriteData = new MsgArg[m_Properties.size()];\n   uint32_t writeArgCount = 0;\n   do {\n      for (PropertyMap::const_iterator it = m_Properties.begin(); it !=\nm_Properties.end(); ++it) {\n         const PropertyStoreProperty\n property = it-\nsecond;\n\n         if (!property.getIsWritable()) {\n            continue;\n         }\n\n         // check that it is from the defaultLanguage or empty. if (!(property.getLanguage().empty() ||\nproperty.getLanguage().compare(languageTag) == 0)) {\n            continue;\n         }\n\n         CHECK(argsWriteData[writeArgCount].Set(\n{sv}\n, property.getPropertyName().c_str(),\n                                          new\nMsgArg(property.getPropertyValue())))\n\n         argsWriteData[writeArgCount].SetOwnershipFlags(MsgArg::OwnsArgs,true;\n\n         writeArgCount++;\n      }\n      CHECK(all.Set(\na{sv}\n, writeArgCount, argsWriteData))\n      all.SetOwnershipFlags(MsgArg::OwnsArgs, true);\n   } while (0);\n\n   if (status != ER_OK) {\n      delete[] argsWriteData;\n   }\n\n   return status;\n}\n\nQStatus PropertyStoreImpl::Update(const char* name, const char* languageTag, const ajn::MsgArg* value)\n{\n   if (!m_IsInitialized) {\n   return ER_FAIL;\n}\n\n   PropertyStoreKey propertyKey = getPropertyStoreKeyFromName(name);\n   if (propertyKey \n= NUMBER_OF_KEYS) {\n      return ER_FEATURE_NOT_AVAILABLE;\n\n   }\n\n   // check the languageTag\n   // case languageTag == NULL: is not a valid value for the languageTag\n   // case languageTag == \n: use the default language\n   // case languageTag == string: check value, must be one of the supported languages\n   QStatus status = ER_OK;\n   if (languageTag == NULL) {\n      return ER_INVALID_VALUE;\n   } else if (languageTag[0] == 0) {\n      PropertyMap::iterator it = m_Properties.find(DEFAULT_LANG);\n      if (it == m_Properties.end()) {\n         return ER_LANGUAGE_NOT_SUPPORTED;\n      }\n      status = it-\nsecond.getPropertyValue().Get(\ns\n, \nlanguageTag);\n   } else {\n      status = isLanguageSupported(languageTag);\n      if (status != ER_OK) {\n         return status;\n      }\n   }\n\n   // Special case DEFAULT_LANG is not associated with a language in the PropertyMap and\n   // its only valid languageTag = NULL\n   // By setting it here, we to let the user follow the same language rules as any other property\n   if (propertyKey == DEFAULT_LANG) {\n      languageTag = NULL;\n   }\n\n   //validate that the value is acceptable\n   qcc::String languageString = languageTag ? languageTag : \n; status = validateValue(propertyKey, *value, languageString); if (status != ER_OK) {\n      std::cout \n \nNew Value failed validation. Will not update\n \n std::endl;\n\n      return status;\n   }\n\n   PropertyStoreProperty* temp = NULL;\n   std::pair\nPropertyMap::iterator, PropertyMap::iterator\n propertiesIter =\nm_Properties.equal_range(propertyKey);\n\n   for (PropertyMap::iterator it = propertiesIter.first; it !=\npropertiesIter.second; it++) {\n      const PropertyStoreProperty\n property = it-\nsecond;\n      if (property.getIsWritable()) {\n         if ((languageTag == NULL \n property.getLanguage().empty()) || (languageTag != NULL \n property.getLanguage().compare(languageTag)\n\n== 0)) {\n\n            temp = new PropertyStoreProperty(property.getPropertyName(),\n\n*value, property.getIsPublic(),\n\n               property.getIsAnnouncable());\n            if (languageTag) {\n\n            property.getIsWritable(),\n\n               temp-\nsetLanguage(languageTag);\n         }\n         m_Properties.erase(it);\n         break;\n      }\n   }\n}\n\nif (temp == NULL) {\n   return ER_INVALID_VALUE;\n}\n\nm_Properties.insert(PropertyPair(propertyKey, *temp));\n\nif (persistUpdate(temp-\ngetPropertyName().c_str(), value-\nv_string.str, languageTag)) {\n   AboutService* aboutService = AboutServiceApi::getInstance();\n   if (aboutService) {\n      aboutService-\nAnnounce();\n   std::cout \n \nCalling Announce after UpdateConfiguration\n \n std::endl;\n\n   }\n   delete temp;\n   return ER_OK;\n} else {\n   delete temp;\n   return ER_INVALID_VALUE;\n   }\n}\n\nQStatus PropertyStoreImpl::Delete(const char* name, const char* languageTag)\n{\n   if (!m_IsInitialized) {\n      return ER_FAIL;\n   }\n\n   PropertyStoreKey propertyKey = getPropertyStoreKeyFromName(name);\n   if (propertyKey \n= NUMBER_OF_KEYS) {\n      return ER_FEATURE_NOT_AVAILABLE;\n   }\n\n   QStatus status = ER_OK;\n   if (languageTag == NULL) {\n      return ER_INVALID_VALUE;\n   } else if (languageTag[0] == 0) {\n\n\n      PropertyMap::iterator it = m_Properties.find(DEFAULT_LANG);\n      if (it == m_Properties.end()) {\n         return ER_LANGUAGE_NOT_SUPPORTED;\n      }\n      status = it-\nsecond.getPropertyValue().Get(\ns\n, \nlanguageTag);\n      } else {\n         status = isLanguageSupported(languageTag);\n         if (status != ER_OK) {\n            return status;\n         }\n      }\n\n      if (propertyKey == DEFAULT_LANG) {\n         languageTag = NULL;\n      }\n\n      bool deleted = false;\n      std::pair\nPropertyMap::iterator, PropertyMap::iterator\n propertiesIter =\n   m_Properties.equal_range(propertyKey);\n\n      for (PropertyMap::iterator it = propertiesIter.first; it !=\n   propertiesIter.second; it++) {\n         const PropertyStoreProperty\n property = it-\nsecond;\n         if (property.getIsWritable()) {\n            if ((languageTag == NULL \n property.getLanguage().empty()) || (languageTag != NULL \n property.getLanguage().compare(languageTag)\n\n   == 0)) {\n\n               m_Properties.erase(it);\n               // insert from backup. deleted = true;\n               break;\n            }\n         }\n      }\n\n      if (!deleted) {\n         if (languageTag != NULL) {\n            return ER_LANGUAGE_NOT_SUPPORTED;\n         } else {\n            return ER_INVALID_VALUE;\n         }\n      }\n\n      propertiesIter = m_factoryProperties.equal_range(propertyKey);\n\n      for (PropertyMap::iterator it = propertiesIter.first; it !=\n   propertiesIter.second; it++) {\n         const PropertyStoreProperty\n property = it-\nsecond;\n         if (property.getIsWritable()) {\n            if ((languageTag == NULL \n property.getLanguage().empty()) || (languageTag != NULL \n property.getLanguage().compare(languageTag)\n\n   == 0)) {\n\n               m_Properties.insert(PropertyPair(it-\nfirst, it-\nsecond));\n               char* value;\n               it-\nsecond.getPropertyValue().Get(\ns\n, \nvalue);\n               if (persistUpdate(it-\nsecond.getPropertyName().c_str(), value,\n\n   languageTag)) {\n\n                  AboutService* aboutService = AboutServiceApi::getInstance();\n                  if (aboutService) {\n                     aboutService-\nAnnounce();\n                     std::cout \n \nCalling Announce after ResetConfiguration\n\n\n   \n std::endl;\n\n                 }\n                 return ER_OK;\n              }\n           }\n        }\n      }\n      return ER_INVALID_VALUE;\n   }\n\n   bool PropertyStoreImpl::persistUpdate(const char* key, const char* value, const char* languageTag)\n   {\n      std::map\nstd::string, std::string\n data;\n      std::string skey(key);\n      if (languageTag \n languageTag[0]) { skey.append(\n.\n); skey.append(languageTag);\n      }\n\n   data[skey] = value;\n   return IniParser::UpdateFile(m_configFileName.c_str(), data);\n}\n\nPropertyStoreKey PropertyStoreImpl::getPropertyStoreKeyFromName(qcc::String const\n\n   propertyStoreName)\n   {\n      for (int indx = 0; indx \n NUMBER_OF_KEYS; indx++) {\n         if (PropertyStoreName[indx].compare(propertyStoreName) == 0) {\n            return (PropertyStoreKey)indx;\n         }\n      }\n      return NUMBER_OF_KEYS;\n   }\n\n   bool PropertyStoreImpl::FillDeviceNames()\n   {\n      std::map\nstd::string, std::string\n data;\n\n      if (!IniParser::ParseFile(m_factoryConfigFileName.c_str(), data)) {\n\n      std::cerr \n \nCould not parse configFile\n \n std::endl;\n      return false;\n   }\n\n   typedef std::map\nstd::string, std::string\n::iterator it_data;\n   for (it_data iterator = data.begin(); iterator != data.end(); iterator++) {\n\n      if\n(iterator-\nfirst.find(AboutPropertyStoreImpl::getPropertyStoreName(DEVICE_NAME).c_str())\n== 0) {\n         size_t lastDotLocation = iterator-\nfirst.find(\n.\n);\n         if ((lastDotLocation ==    std::string::npos) || (lastDotLocation + 1\n\n= iterator-\nfirst.length())) {\n            continue;\n         }\n         std::string language = iterator-\nfirst.substr(lastDotLocation + 1);\n         std::string value = iterator-\nsecond;\n\n         UpdateFactoryProperty(DEVICE_NAME, language.c_str(), MsgArg(\ns\n, value.c_str()));\n      }\n   }\n\n   return true;\n}\n\nbool PropertyStoreImpl::UpdateFactorySettings()\n{\n   std::map\nstd::string, std::string\n data;\n   if (!IniParser::ParseFile(m_factoryConfigFileName.c_str(), data)) {\n      std::cerr \n \nCould not parse configFile\n \n std::endl;\n      return false;\n   }\n\n   std::map\nstd::string, std::string\n::iterator iter;\n\n   iter =\ndata.find(AboutPropertyStoreImpl::getPropertyStoreName(DEVICE_ID).c_str());\n   if (iter != data.end()) {\n      qcc::String deviceId = iter-\nsecond.c_str(); UpdateFactoryProperty(DEVICE_ID, NULL, MsgArg(\ns\n, deviceId.c_str()));\n   }\n\n   if (!FillDeviceNames()) {\n      return false;\n   }\n\n   iter = data.find(AboutPropertyStoreImpl::getPropertyStoreName(APP_ID).c_str());\n\n   if (iter != data.end()) {\n      qcc::String appGUID = iter-\nsecond.c_str();\n\n      UpdateFactoryProperty(APP_ID, NULL, MsgArg(\ns\n, appGUID.c_str()));\n   }\n\n   iter =\ndata.find(AboutPropertyStoreImpl::getPropertyStoreName(APP_NAME).c_str());\n   if (iter != data.end()) {\n      qcc::String appName = iter-\nsecond.c_str(); UpdateFactoryProperty(APP_NAME, NULL, MsgArg(\ns\n, appName.c_str()));\n   }\n\n   iter =\ndata.find(AboutPropertyStoreImpl::getPropertyStoreName(DEFAULT_LANG).c_str());\n   if (iter != data.end()) {\n      qcc::String defaultLanguage = iter-\nsecond.c_str(); UpdateFactoryProperty(DEFAULT_LANG, NULL, MsgArg(\ns\n,\ndefaultLanguage.c_str()));\n   }\n\n   return true;\n}\n\n\nvoid PropertyStoreImpl::UpdateFactoryProperty(PropertyStoreKey propertyKey, const char* languageTag,\n   const ajn::MsgArg\n value)\n{\n   PropertyStoreProperty* temp = NULL;\n   std::pair\nPropertyMap::iterator, PropertyMap::iterator\n propertiesIter =\nm_factoryProperties.equal_range(propertyKey);\n\n   for (PropertyMap::iterator it = propertiesIter.first; it !=\npropertiesIter.second; it++) {\n   const PropertyStoreProperty\n property = it-\nsecond;\n\n   if ((languageTag == NULL \n property.getLanguage().empty()) || (languageTag != NULL \n property.getLanguage().compare(languageTag)\n\n== 0)) {\n\n\n      temp = new PropertyStoreProperty(property.getPropertyName(), value,\n\nproperty.getIsPublic(),\nproperty.getIsWritable(),\nproperty.getIsAnnouncable());\n      if (languageTag) {\n\n         temp-\nsetLanguage(languageTag);\n      }\n      m_factoryProperties.erase(it);\n      break;\n   }\n}\n\n\n   if (temp == NULL) {\n      return;\n   }\n\n   m_factoryProperties.insert(PropertyPair(propertyKey, *temp));\n   delete temp;\n}\n\n\n\n\nInstantiate a ConfigStore\n\n\npropertyStore = new PropertyStoreImpl(FACTORYCONFIGFILENAME, CONFIGFILENAME);\npropertyStore-\nsetDeviceName(deviceName);\npropertyStore-\nsetAppId(appIdHex);\npropertyStore-\nsetAppName(appName);\npropertyStore-\nsetDefaultLang(defaultLanguage);\n\npropertyStore-\nsetModelNumber(\nWxfy388i\n);\npropertyStore-\nsetDateOfManufacture(\n10/1/2199\n);\npropertyStore-\nsetSoftwareVersion(\n12.20.44 build 44454\n);\npropertyStore-\nsetAjSoftwareVersion(ajn::GetVersion());\npropertyStore-\nsetHardwareVersion(\n355.499. b\n);\n\nstd::vector\nqcc::String\n languages(3);\nlanguages.push_back(\nen\n);\nlanguages.push_back(\nsp\n);\nlanguages.push_back(\nfr\n);\npropertyStore-\nsetSupportedLangs(languages);\n\nDeviceNamesType::const_iterator iter = deviceNames.find(languages[0]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(iter-\nsecond.c_str(), languages[0]));\n   } else {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(\nMy device name\n, \nen\n));\n   }\n\n   iter = deviceNames.find(languages[1]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(iter-\nsecond.c_str(), languages[1]));\n   } else {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(\nMi nombre de dispositivo\n,\n\nsp\n));\n   }\n\n   iter = deviceNames.find(languages[2]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(iter-\nsecond.c_str(), languages[2]));\n   } else {\n\n      CHECK_RETURN(propertyStore-\nsetDeviceName(\nMon nom de l'appareil\n, \nfr\n));\n\n   }\npropertyStore-\nsetDescription(\nThis is an AllJoyn application\n, \nen\n);\npropertyStore-\nsetDescription(\nEsta es una AllJoyn aplicacion\n, \nsp\n);\npropertyStore-\nsetDescription(\nC'est une Alljoyn application\n, \nfr\n);\n\npropertyStore-\nsetManufacturer(\nCompany\n, \nen\n);\npropertyStore-\nsetManufacturer(\nEmpresa\n, \nsp\n);\npropertyStore-\nsetManufacturer(\nEntreprise\n, \nfr\n);\n\npropertyStore-\nsetSupportUrl(\nhttp://www.allseenalliance.org\n);\npropertyStore-\nInitialize();\n\n\n\n\nImplement a BusListener and SessionPortListener\n\n\nIn order to bind a SessionPort and accept sessions, a new\nclass must be created that inherits from the AllJoyn\nBusListener and SessionPortListener classes.\n\n\nThe class must contain the following function:\n\n\nbool AcceptSessionJoiner(SessionPort sessionPort, const char* joiner, const\nSessionOpts\n opts)\n\n\n\n\nThe AcceptSessionJoiner function will be called any time a\njoinsession request is received; the Listener class needs\nto dictate whether the joinsession request should be accepted\nor rejected by returning true or false, respectively. These\nconsiderations are application-specific and can include any\nof the following:\n\n\n\n\nThe SessionPort the request was made on\n\n\nSpecific SessionOpts limitations\n\n\nThe number of sessions already joined\n\n\n\n\nHere is an example of a full class declaration for the listener class.\n\n\nclass CommonBusListener : public ajn::BusListener, public ajn::SessionPortListener {\n\npublic:\n   CommonBusListener();\n   ~CommonBusListener();\n   bool AcceptSessionJoiner(ajn::SessionPort sessionPort,\n      const char* joiner, const ajn::SessionOpts\n opts);\n   void setSessionPort(ajn::SessionPort sessionPort);\n      ajn::SessionPort getSessionPort();\n   private:\n      ajn::SessionPort m_SessionPort;\n};\n\n\n\n\nInitialize the AboutService in server mode\n\n\nbusListener = new CommonBusListener();\nAboutServiceApi::Init(*bus, *propertyStore);\nAboutServiceApi* aboutService = AboutServiceApi::getInstance();\nbusListener-\nsetSessionPort(port);\nbus-\nRegisterBusListener(*busListener);\nTransportMask transportMask = TRANSPORT_ANY;\nSessionPort sp = port;\nSessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false,\nSessionOpts::PROXIMITY_ANY, transportMask);\nbus-\nBindSessionPort(sp, opts, *busListener);\naboutService-\nRegister(port);\nbus-\nRegisterBusObject(*aboutService);\n\n\n\n\nFor more information about the About feature, see the\n\nAbout API Guide\n.\n\n\nImplement the callbacks required by the Config Server\n\n\nConfigServiceListenerImpl::ConfigServiceListenerImpl(PropertyStoreImpl\n store, BusAttachment\n bus) :\n   ConfigService::Listener(), m_PropertyStore(\nstore), m_Bus(\nbus)\n{\n}\n\nQStatus ConfigServiceListenerImpl::Restart()\n{\n   printf(\nRestart has been called !!!\\n\n);\n   return ER_OK;\n}\n\nQStatus ConfigServiceListenerImpl::FactoryReset()\n{\n   QStatus status = ER_OK;\n   printf(\nFactoryReset has been called!!!\\n\n); m_PropertyStore-\nFactoryReset(); printf(\nClearing Key Store\\n\n);\n   m_Bus-\nClearKeyStore();\n\n   AboutServiceApi* aboutService = AboutServiceApi::getInstance();\n   if (aboutService) {\n      status = aboutService-\nAnnounce();\n      printf(\nAnnounce for %s =%d\\n\n, m_Bus-\nGetUniqueName().c_str(), status);\n   }\n\n   return status;\n}\n\nQStatus ConfigServiceListenerImpl::SetPassphrase(const char* daemonRealm, size_t passcodeSize, const char* passcode)\n{\n   qcc::String passCodeString(passcode, passcodeSize);\n   printf(\nSetPassphrase has been called daemonRealm=%s passcode=%s passcodeLength=%lu\\n\n, daemonRealm,\npassCodeString.c_str(), passcodeSize); PersistPassword(daemonRealm, passCodeString.c_str());\n\n   printf(\nClearing Key Store\\n\n);\n   m_Bus-\nClearKeyStore();\n\n   return ER_OK;\n}\n\nConfigServiceListenerImpl::~ConfigServiceListenerImpl()\n{\n}\n\nvoid ConfigServiceListenerImpl::PersistPassword(const char* daemonRealm, const char* passcode)\n{\n   std::map\nstd::string, std::string\n data;\n   data[\ndaemonrealm\n] = daemonRealm;\n   data[\npasscode\n] = passcode;\n   IniParser::UpdateFile(m_PropertyStore-\nGetConfigFile().c_str(), data);\n}\n\n\n\n\nInitialize the ConfigService in server mode, providing it with the ConfigStore and callbacks\n\n\nconfigServiceListenerImpl = new ConfigServiceListenerImpl(*propertyStoreImpl,\n*msgBus);\nconfigService = new ConfigService(*msgBus, *propertyStoreImpl,\n*configServiceListenerImpl);\n\nstd::vector\nqcc::String\n interfaces;\ninterfaces.push_back(\norg.alljoyn.Config\n);\naboutService-\nAddObjectDescription(\n/Config\n, interfaces);\n\nconfigService-\nRegister();\nmsgBus-\nRegisterBusObject(*configService);\n\n\n\n\nAdvertise name and announce\n\n\nAdvertiseName(SERVICE_TRANSPORT_TYPE);\naboutService-\nAnnounce();\n\n\n\n\nUnregister and delete ConfigService and BusAttachment\n\n\nWhen your process is done with the ConfigService delete variables used:\n\n\nif (configService) {\n   delete configService;\n   configService = NULL;\n}\n\nif (configServiceListenerImpl) {\n   delete configServiceListenerImpl;\n   configServiceListenerImpl = NULL;\n}\n\nif (keyListener) {\n   delete keyListener;\n   keyListener = NULL;\n}\n\nif (propertyStoreImpl) {\n   delete propertyStoreImpl;\n   propertyStoreImpl = NULL;\n}\n\ndelete msgBus;\nmsgBus = NULL;\n\n\n\n\nImplementing an App: Config Client\n\n\nTo implement an application to receive and modify ConfigData,\nuse the ConfigClient class. The AboutClient class must be used\nso that your application is notified when applications with\nAbout Server and possibly Config Server instances can send announcements.\n\n\nNOTE:\n Verify the BusAttachment has been created, started and\nconnected before implementing a Config Client. See the \nAbout\nAPI Guide\n for the code snippets.\nCode in this chapter references a variable \nmBus\n\n(the BusAttachment variable name).\n\n\nInitialize the AllJoyn framework\n\n\nSee the \nBuilding Linux section\n for\ninstructions to set up the AllJoyn framework.\n\n\nCreate bus attachment\n\n\nbusAttachment -\nStart();\nbusAttachment -\nConnect();\n\n\n\n\nEnable peer security\n\n\nConfig Client uses peer security.\n\n\nCreate a KeyListener class that inherits from ajn::AuthListener.\nIt needs to implement two functions: RequestCredentials and\nAuthenticationComplete.\n\n\nclass SrpKeyXListener : public ajn::AuthListener {\n   public:\n      bool RequestCredentials(const char* authMechanism, const char* authPeer, uint16_t authCount, const char* userId,\n            uint16_t credMask, Credentials\n creds);\n      void AuthenticationComplete(const char* authMechanism, const char*\nauthPeer, bool success);\n};\n\n\n\n\nRequestCredentials needs to set the password using Creds and return true.\n\n\ncreds.SetPassword(Password);\nreturn true;\n\n\n\n\nInstantiate the keylistener class and enable peer security.\n\n\nSrpKeyXListener* keyListener = new SrpKeyXListener();\nbus-\nEnablePeerSecurity(\nALLJOYN_PIN_KEYX ALLJOYN_SRP_KEYX ALLJOYN_ECDHE_PSK\n, keyListener);\n\n\n\n\nInitialize the AboutService in client mode\n\n\nComplete the following steps.\n\n\n\n\nImplement the announce handler.\n\n\nImplement the announce method.\n\n\nRegister the announce handler, if there is a Config interface.\n\n\nJoin a session.\n\n\n\n\nFor more information about the About feature, see the \nAbout\nAPI Guide\n.\n\n\nCreate the ConfigService client object\n\n\nconfigClient = new ConfigClient(*busAttachment);\n\n\n\n\nRequest the ConfigData\n\n\nThe Configurations data structure is filled by the \nGetConfigurations()\n\nmethod call. Configurations can be iterated through to determine\nthe contents. The content definition is found in the \nConfiguration\nInterface Definition\n.\n\n\nConfigClient::Configurations configurations;\nif ((status = configClient-\nGetConfigurations(busname.c_str(),\n      \nen\n, configurations, id)) == ER_OK) {\n   for (ConfigClient::Configurations::iterator it = configurations.begin();\n      it != configurations.end(); ++it) { qcc::String key = it-\nfirst; ajn::MsgArg value = it-\nsecond;\n      if (value.typeId == ALLJOYN_STRING) {\n         printf(\nKey name=%s value=%s\\n\n, key.c_str(), value.v_string.str);\n         } else if (value.typeId == ALLJOYN_ARRAY \n\nvalue.Signature().compare(\nas\n) == 0) {\n         printf(\nKey name=%s values: \n, key.c_str());\n         const MsgArg*stringArray;\n         size_t fieldListNumElements;\n         status = value.Get(\nas\n, \nfieldListNumElements, \nstringArray);\n         for (unsigned int i = 0; i \n fieldListNumElements; i++) {\n            char* tempString; stringArray[i].Get(\ns\n, \ntempString);\n            printf(\n%s \n, tempString);\n         }\n         printf(\n\\n\n);\n      }\n   }\n\n\n\n\nUpdate the ConfigData\n\n\nThe received data can be updated through the ConfigClient\nusing the \nUpdateConfigurations()\n method call.\n\n\nconfigurations.insert(std::pair\nqcc::String, ajn::MsgArg\n(\nDeviceName\n, MsgArg(\ns\n, \nNew Device Name\n)));\nconfigClient-\nUpdateConfigurations(busname.c_str(), NULL, configurations, id);\n\n\n\n\nGet the interface version\n\n\nThe peer device/application configuration can query for the\ninterface version.\n\n\nint version;\nconfigClient-\nGetVersion(busname.c_str(), version, id);\n\n\n\n\nReset the ConfigData\n\n\nThe ConfigData can be reset to default through the ConfigClient\nusing the \nResetConfigurations()\n method call.\n\n\nstd::vector\nqcc::String\n configNames;\nconfigNames.push_back(\nDeviceName\n);\nconfigClient-\nResetConfigurations(busname.c_str(), \nen\n, configNames, id);\n\n\n\n\nReset the peer device application to factory defaults\n\n\nThe peer device/application configuration can be reset to\nfactory defaults through the ConfigClient using the\n\nFactoryReset()\n method call.\n\n\nNOTE:\n This is a no-reply call, so its success cannot be\ndetermined directly.\n\n\nconfigClient-\nFactoryReset(busname.c_str(), id);\n\n\n\n\nRestart the peer\n\n\nThe peer application can be restarted though the ConfigClient\nusing the Restart() method call.\n\n\nNOTE:\n This is a no-reply call, so its success cannot be\ndetermined directly.\n\n\nconfigClient-\nRestart(busname.c_str(), id);\n\n\n\n\nSetting a passcode on the peer\n\n\nThe peer application can be set to have a different passcode\nthough the ConfigClient using the \nSetPasscode()\n method call.\nThis revokes the current encryption keys and regenerates new\nones based on the new shared secret, namely the passcode.\n\n\nNOTE:\n The realm name is currently ignored.\n\n\nconfigClient-\nSetPasscode(busname.c_str(), \nMyDeamonRealm\n, 8, (const uint8_t*) NEW_PASSCODE, id);\n   srpKeyXListener-\nsetPassCode(NEW_PASSCODE);\n   qcc::String guid;\n   busAttachment-\nGetPeerGUID(busname.c_str(), guid);\n   busAttachment-\nClearKeys(guid);\n\n\n\n\nDelete variables and unregister listeners\n\n\nOnce you are done using the Config Service, Configuration\nservice framework, and the AllJoyn framework, free the variables\nused in the application.\n\n\nif (configClient) {\n   delete configClient;\n   configClient = NULL;\n}\nbusAttachment-\nStop();\ndelete busAttachment;",
            "title": "Cpp"
        },
        {
            "location": "/develop/api-guide/config/cpp/#configuration-api-guide-c",
            "text": "",
            "title": "Configuration API Guide - C++"
        },
        {
            "location": "/develop/api-guide/config/cpp/#reference-code",
            "text": "Classes used to provide ConfigData     Server class  Description      ConfigService  Class that implements the interface org.alljoyn.Config as a service framework.    PropertyStore  Interface that supplies the list of properties required for ReadAll() and enables user manipulation of their values via Update(), Delete() and Reset().     Classes used to remotely manipulate ConfigData     Client class  Description      ConfigClient  Class that implements the interface org.alljoyn.Config as a client.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/config/cpp/#obtain-the-configuration-service-framework",
            "text": "See the  Building Linux section \nfor instructions on compiling the Configuration service framework.",
            "title": "Obtain the Configuration service framework"
        },
        {
            "location": "/develop/api-guide/config/cpp/#build-an-application-that-uses-configserver",
            "text": "The following steps provide the high-level process to build an\napplication that will maintain ConfigData.   Create the base for the AllJoyn  application.  Implement the ProperyStore to produce a ConfigStore.  Initialize the AboutService in service mode.  Instantiate a ConfigStore.  Implement the callbacks required by the Config Server.  Initialize the ConfigService in server mode, providing\nit with the ConfigStore and callbacks.",
            "title": "Build an application that uses ConfigServer"
        },
        {
            "location": "/develop/api-guide/config/cpp/#setting-up-the-alljoyn-framework-and-about-feature",
            "text": "The steps required for this service framework are universal\nto all applications that use the AllJoyn framework and for\nany application using one or more AllJoyn service frameworks.\nPrior to use of the Configuration service framework as a Config\nServer or Config Client, the About feature must be implemented\nand the AllJoyn framework set up.  Complete the procedures in the following documents to guide\nyou in this process:   Building Linux section  About API Guide",
            "title": "Setting up the AllJoyn framework and About feature"
        },
        {
            "location": "/develop/api-guide/config/cpp/#implementing-an-app-config-server",
            "text": "Implementing a Config Server requires creating and registering\nan instance of the ConfigService class. Any application using\nConfig Server also requires an About Server to facilitate the\ndiscovery via Announcements.  NOTE:  Verify the BusAttachment has been created, started and\nconnected before implementing the ConfigService. See the About API Guide  for the code snippets.\nCode in this chapter references a variable  mBus \n(the BusAttachment variable name).  Initialize the AllJoyn framework  See the  Building Linux section  for instructions\nto set up the AllJoyn framework.  Create bus attachment  bus- Start();\nbus- Connect();  Enable peer security  Config Server uses peer security.  Create a KeyListener class that inherits from ajn::AuthListener.\nIt needs to implement two functions: RequestCredentials and\nAuthenticationComplete.  class SrpKeyXListener : public ajn::AuthListener {\n   public:\n      bool RequestCredentials(const char* authMechanism,\n         const char* authPeer,\n         uint16_t authCount, const char* userId,\n         uint16_t credMask, Credentials  creds);\n      void AuthenticationComplete(const char* authMechanism, const char* authPeer,\n\n   bool success);\n};  RequestCredentials()  needs to set the password using Creds\nand return true.  creds.SetPassword(Password);\nreturn true;  Instantiate the keylistener class and enable peer security.  SrpKeyXListener* keyListener = new SrpKeyXListener();\nbus- EnablePeerSecurity( ALLJOYN_PIN_KEYX ALLJOYN_SRP_KEYX ALLJOYN_ECDHE_PSK , keyListener);  Implement PropertyStore to produce a ConfigStore  The PropertyStore interface is required by the AboutService\nto store the provisioned values for the About interface data\nfields. See the  About Interface Definition  for more information.  The ProperyStore interface is also required by the ConfigService\nto store and facilitate manipulation of some updateable fields\n(listed in  Config interface data fields ).\nSee the [Configuration Interface Definition] for more information.  Config interface data fields     Field name  Required  Type      DefaultLanguage  yes  s    DeviceName  yes  s     An example PropertyStore implementation (ConfigStore) is\nprovided below that specifies the following dictionary of\nmetadata fields:   Keys are the field names.  Values are a Map of String to Object entries where the\nString is the language tag associated with the Object value.   This implementation extends the example AboutStore implementation\nin the  About API Guide  and is\npassed to the AboutService instead of AboutStore.  PropertyStoreImpl::PropertyStoreImpl(const char* factoryConfigFile, const char*\nconfigFile) : m_IsInitialized(false)\n{\n   m_configFileName.assign(configFile);\n   m_factoryConfigFileName.assign(factoryConfigFile);\n}\n\nvoid PropertyStoreImpl::Initialize()\n{\n   m_IsInitialized = true; m_factoryProperties.clear();\n   m_factoryProperties.insert(m_Properties.begin(), m_Properties.end());\n\n   //m_factoryProperties - overwrite the values that are found in\nFactoryConfigService file\n   UpdateFactorySettings();\n}\n\nvoid PropertyStoreImpl::FactoryReset()\n{\n   std::ifstream factoryConfigFile(m_factoryConfigFileName.c_str(), std::ios::binary);\n   std::ofstream configFile(m_configFileName.c_str(), std::ios::binary);\n\n   if (factoryConfigFile   configFile) {\n      configFile   factoryConfigFile.rdbuf();\n\n      configFile.close();\n      factoryConfigFile.close();\n   } else {\n      std::cout    Factory reset failed    std::endl;\n   }\n\n   m_Properties.clear();\n   m_Properties.insert(m_factoryProperties.begin(), m_factoryProperties.end());\n}\n\nconst qcc::String  PropertyStoreImpl::GetConfigFileName()\n{\n   return m_configFileName;\n}\n\nPropertyStoreImpl::~PropertyStoreImpl()\n{\n}\n\nQStatus PropertyStoreImpl::ReadAll(const char* languageTag, Filter filter, ajn::MsgArg  all)\n{\n   if (!m_IsInitialized) {\n      return ER_FAIL;\n   }\n\n   if (filter == ANNOUNCE || filter == READ) {\n      return AboutPropertyStoreImpl::ReadAll(languageTag, filter, all);\n   }\n\n   if (filter != WRITE) {\n      return ER_FAIL;\n   }\n\n   QStatus status = ER_OK;\n   if (languageTag != NULL   languageTag[0] != 0) { // check that the language is in the supported languages;\n      CHECK_RETURN(isLanguageSupported(languageTag))\n   } else {\n      PropertyMap::iterator it = m_Properties.find(DEFAULT_LANG);\n      if (it == m_Properties.end()) {\n\n         return ER_LANGUAGE_NOT_SUPPORTED;\n      }\n      CHECK_RETURN(it- second.getPropertyValue().Get( s ,  languageTag))\n   }\n\n   MsgArg* argsWriteData = new MsgArg[m_Properties.size()];\n   uint32_t writeArgCount = 0;\n   do {\n      for (PropertyMap::const_iterator it = m_Properties.begin(); it !=\nm_Properties.end(); ++it) {\n         const PropertyStoreProperty  property = it- second;\n\n         if (!property.getIsWritable()) {\n            continue;\n         }\n\n         // check that it is from the defaultLanguage or empty. if (!(property.getLanguage().empty() ||\nproperty.getLanguage().compare(languageTag) == 0)) {\n            continue;\n         }\n\n         CHECK(argsWriteData[writeArgCount].Set( {sv} , property.getPropertyName().c_str(),\n                                          new\nMsgArg(property.getPropertyValue())))\n\n         argsWriteData[writeArgCount].SetOwnershipFlags(MsgArg::OwnsArgs,true;\n\n         writeArgCount++;\n      }\n      CHECK(all.Set( a{sv} , writeArgCount, argsWriteData))\n      all.SetOwnershipFlags(MsgArg::OwnsArgs, true);\n   } while (0);\n\n   if (status != ER_OK) {\n      delete[] argsWriteData;\n   }\n\n   return status;\n}\n\nQStatus PropertyStoreImpl::Update(const char* name, const char* languageTag, const ajn::MsgArg* value)\n{\n   if (!m_IsInitialized) {\n   return ER_FAIL;\n}\n\n   PropertyStoreKey propertyKey = getPropertyStoreKeyFromName(name);\n   if (propertyKey  = NUMBER_OF_KEYS) {\n      return ER_FEATURE_NOT_AVAILABLE;\n\n   }\n\n   // check the languageTag\n   // case languageTag == NULL: is not a valid value for the languageTag\n   // case languageTag ==  : use the default language\n   // case languageTag == string: check value, must be one of the supported languages\n   QStatus status = ER_OK;\n   if (languageTag == NULL) {\n      return ER_INVALID_VALUE;\n   } else if (languageTag[0] == 0) {\n      PropertyMap::iterator it = m_Properties.find(DEFAULT_LANG);\n      if (it == m_Properties.end()) {\n         return ER_LANGUAGE_NOT_SUPPORTED;\n      }\n      status = it- second.getPropertyValue().Get( s ,  languageTag);\n   } else {\n      status = isLanguageSupported(languageTag);\n      if (status != ER_OK) {\n         return status;\n      }\n   }\n\n   // Special case DEFAULT_LANG is not associated with a language in the PropertyMap and\n   // its only valid languageTag = NULL\n   // By setting it here, we to let the user follow the same language rules as any other property\n   if (propertyKey == DEFAULT_LANG) {\n      languageTag = NULL;\n   }\n\n   //validate that the value is acceptable\n   qcc::String languageString = languageTag ? languageTag :  ; status = validateValue(propertyKey, *value, languageString); if (status != ER_OK) {\n      std::cout    New Value failed validation. Will not update    std::endl;\n\n      return status;\n   }\n\n   PropertyStoreProperty* temp = NULL;\n   std::pair PropertyMap::iterator, PropertyMap::iterator  propertiesIter =\nm_Properties.equal_range(propertyKey);\n\n   for (PropertyMap::iterator it = propertiesIter.first; it !=\npropertiesIter.second; it++) {\n      const PropertyStoreProperty  property = it- second;\n      if (property.getIsWritable()) {\n         if ((languageTag == NULL   property.getLanguage().empty()) || (languageTag != NULL   property.getLanguage().compare(languageTag)\n\n== 0)) {\n\n            temp = new PropertyStoreProperty(property.getPropertyName(),\n\n*value, property.getIsPublic(),\n\n               property.getIsAnnouncable());\n            if (languageTag) {\n\n            property.getIsWritable(),\n\n               temp- setLanguage(languageTag);\n         }\n         m_Properties.erase(it);\n         break;\n      }\n   }\n}\n\nif (temp == NULL) {\n   return ER_INVALID_VALUE;\n}\n\nm_Properties.insert(PropertyPair(propertyKey, *temp));\n\nif (persistUpdate(temp- getPropertyName().c_str(), value- v_string.str, languageTag)) {\n   AboutService* aboutService = AboutServiceApi::getInstance();\n   if (aboutService) {\n      aboutService- Announce();\n   std::cout    Calling Announce after UpdateConfiguration    std::endl;\n\n   }\n   delete temp;\n   return ER_OK;\n} else {\n   delete temp;\n   return ER_INVALID_VALUE;\n   }\n}\n\nQStatus PropertyStoreImpl::Delete(const char* name, const char* languageTag)\n{\n   if (!m_IsInitialized) {\n      return ER_FAIL;\n   }\n\n   PropertyStoreKey propertyKey = getPropertyStoreKeyFromName(name);\n   if (propertyKey  = NUMBER_OF_KEYS) {\n      return ER_FEATURE_NOT_AVAILABLE;\n   }\n\n   QStatus status = ER_OK;\n   if (languageTag == NULL) {\n      return ER_INVALID_VALUE;\n   } else if (languageTag[0] == 0) {\n\n\n      PropertyMap::iterator it = m_Properties.find(DEFAULT_LANG);\n      if (it == m_Properties.end()) {\n         return ER_LANGUAGE_NOT_SUPPORTED;\n      }\n      status = it- second.getPropertyValue().Get( s ,  languageTag);\n      } else {\n         status = isLanguageSupported(languageTag);\n         if (status != ER_OK) {\n            return status;\n         }\n      }\n\n      if (propertyKey == DEFAULT_LANG) {\n         languageTag = NULL;\n      }\n\n      bool deleted = false;\n      std::pair PropertyMap::iterator, PropertyMap::iterator  propertiesIter =\n   m_Properties.equal_range(propertyKey);\n\n      for (PropertyMap::iterator it = propertiesIter.first; it !=\n   propertiesIter.second; it++) {\n         const PropertyStoreProperty  property = it- second;\n         if (property.getIsWritable()) {\n            if ((languageTag == NULL   property.getLanguage().empty()) || (languageTag != NULL   property.getLanguage().compare(languageTag)\n\n   == 0)) {\n\n               m_Properties.erase(it);\n               // insert from backup. deleted = true;\n               break;\n            }\n         }\n      }\n\n      if (!deleted) {\n         if (languageTag != NULL) {\n            return ER_LANGUAGE_NOT_SUPPORTED;\n         } else {\n            return ER_INVALID_VALUE;\n         }\n      }\n\n      propertiesIter = m_factoryProperties.equal_range(propertyKey);\n\n      for (PropertyMap::iterator it = propertiesIter.first; it !=\n   propertiesIter.second; it++) {\n         const PropertyStoreProperty  property = it- second;\n         if (property.getIsWritable()) {\n            if ((languageTag == NULL   property.getLanguage().empty()) || (languageTag != NULL   property.getLanguage().compare(languageTag)\n\n   == 0)) {\n\n               m_Properties.insert(PropertyPair(it- first, it- second));\n               char* value;\n               it- second.getPropertyValue().Get( s ,  value);\n               if (persistUpdate(it- second.getPropertyName().c_str(), value,\n\n   languageTag)) {\n\n                  AboutService* aboutService = AboutServiceApi::getInstance();\n                  if (aboutService) {\n                     aboutService- Announce();\n                     std::cout    Calling Announce after ResetConfiguration \n\n     std::endl;\n\n                 }\n                 return ER_OK;\n              }\n           }\n        }\n      }\n      return ER_INVALID_VALUE;\n   }\n\n   bool PropertyStoreImpl::persistUpdate(const char* key, const char* value, const char* languageTag)\n   {\n      std::map std::string, std::string  data;\n      std::string skey(key);\n      if (languageTag   languageTag[0]) { skey.append( . ); skey.append(languageTag);\n      }\n\n   data[skey] = value;\n   return IniParser::UpdateFile(m_configFileName.c_str(), data);\n}\n\nPropertyStoreKey PropertyStoreImpl::getPropertyStoreKeyFromName(qcc::String const \n   propertyStoreName)\n   {\n      for (int indx = 0; indx   NUMBER_OF_KEYS; indx++) {\n         if (PropertyStoreName[indx].compare(propertyStoreName) == 0) {\n            return (PropertyStoreKey)indx;\n         }\n      }\n      return NUMBER_OF_KEYS;\n   }\n\n   bool PropertyStoreImpl::FillDeviceNames()\n   {\n      std::map std::string, std::string  data;\n\n      if (!IniParser::ParseFile(m_factoryConfigFileName.c_str(), data)) {\n\n      std::cerr    Could not parse configFile    std::endl;\n      return false;\n   }\n\n   typedef std::map std::string, std::string ::iterator it_data;\n   for (it_data iterator = data.begin(); iterator != data.end(); iterator++) {\n\n      if\n(iterator- first.find(AboutPropertyStoreImpl::getPropertyStoreName(DEVICE_NAME).c_str())\n== 0) {\n         size_t lastDotLocation = iterator- first.find( . );\n         if ((lastDotLocation ==    std::string::npos) || (lastDotLocation + 1 = iterator- first.length())) {\n            continue;\n         }\n         std::string language = iterator- first.substr(lastDotLocation + 1);\n         std::string value = iterator- second;\n\n         UpdateFactoryProperty(DEVICE_NAME, language.c_str(), MsgArg( s , value.c_str()));\n      }\n   }\n\n   return true;\n}\n\nbool PropertyStoreImpl::UpdateFactorySettings()\n{\n   std::map std::string, std::string  data;\n   if (!IniParser::ParseFile(m_factoryConfigFileName.c_str(), data)) {\n      std::cerr    Could not parse configFile    std::endl;\n      return false;\n   }\n\n   std::map std::string, std::string ::iterator iter;\n\n   iter =\ndata.find(AboutPropertyStoreImpl::getPropertyStoreName(DEVICE_ID).c_str());\n   if (iter != data.end()) {\n      qcc::String deviceId = iter- second.c_str(); UpdateFactoryProperty(DEVICE_ID, NULL, MsgArg( s , deviceId.c_str()));\n   }\n\n   if (!FillDeviceNames()) {\n      return false;\n   }\n\n   iter = data.find(AboutPropertyStoreImpl::getPropertyStoreName(APP_ID).c_str());\n\n   if (iter != data.end()) {\n      qcc::String appGUID = iter- second.c_str();\n\n      UpdateFactoryProperty(APP_ID, NULL, MsgArg( s , appGUID.c_str()));\n   }\n\n   iter =\ndata.find(AboutPropertyStoreImpl::getPropertyStoreName(APP_NAME).c_str());\n   if (iter != data.end()) {\n      qcc::String appName = iter- second.c_str(); UpdateFactoryProperty(APP_NAME, NULL, MsgArg( s , appName.c_str()));\n   }\n\n   iter =\ndata.find(AboutPropertyStoreImpl::getPropertyStoreName(DEFAULT_LANG).c_str());\n   if (iter != data.end()) {\n      qcc::String defaultLanguage = iter- second.c_str(); UpdateFactoryProperty(DEFAULT_LANG, NULL, MsgArg( s ,\ndefaultLanguage.c_str()));\n   }\n\n   return true;\n}\n\n\nvoid PropertyStoreImpl::UpdateFactoryProperty(PropertyStoreKey propertyKey, const char* languageTag,\n   const ajn::MsgArg  value)\n{\n   PropertyStoreProperty* temp = NULL;\n   std::pair PropertyMap::iterator, PropertyMap::iterator  propertiesIter =\nm_factoryProperties.equal_range(propertyKey);\n\n   for (PropertyMap::iterator it = propertiesIter.first; it !=\npropertiesIter.second; it++) {\n   const PropertyStoreProperty  property = it- second;\n\n   if ((languageTag == NULL   property.getLanguage().empty()) || (languageTag != NULL   property.getLanguage().compare(languageTag)\n\n== 0)) {\n\n\n      temp = new PropertyStoreProperty(property.getPropertyName(), value,\n\nproperty.getIsPublic(),\nproperty.getIsWritable(),\nproperty.getIsAnnouncable());\n      if (languageTag) {\n\n         temp- setLanguage(languageTag);\n      }\n      m_factoryProperties.erase(it);\n      break;\n   }\n}\n\n\n   if (temp == NULL) {\n      return;\n   }\n\n   m_factoryProperties.insert(PropertyPair(propertyKey, *temp));\n   delete temp;\n}  Instantiate a ConfigStore  propertyStore = new PropertyStoreImpl(FACTORYCONFIGFILENAME, CONFIGFILENAME);\npropertyStore- setDeviceName(deviceName);\npropertyStore- setAppId(appIdHex);\npropertyStore- setAppName(appName);\npropertyStore- setDefaultLang(defaultLanguage);\n\npropertyStore- setModelNumber( Wxfy388i );\npropertyStore- setDateOfManufacture( 10/1/2199 );\npropertyStore- setSoftwareVersion( 12.20.44 build 44454 );\npropertyStore- setAjSoftwareVersion(ajn::GetVersion());\npropertyStore- setHardwareVersion( 355.499. b );\n\nstd::vector qcc::String  languages(3);\nlanguages.push_back( en );\nlanguages.push_back( sp );\nlanguages.push_back( fr );\npropertyStore- setSupportedLangs(languages);\n\nDeviceNamesType::const_iterator iter = deviceNames.find(languages[0]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore- setDeviceName(iter- second.c_str(), languages[0]));\n   } else {\n      CHECK_RETURN(propertyStore- setDeviceName( My device name ,  en ));\n   }\n\n   iter = deviceNames.find(languages[1]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore- setDeviceName(iter- second.c_str(), languages[1]));\n   } else {\n      CHECK_RETURN(propertyStore- setDeviceName( Mi nombre de dispositivo , sp ));\n   }\n\n   iter = deviceNames.find(languages[2]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore- setDeviceName(iter- second.c_str(), languages[2]));\n   } else {\n\n      CHECK_RETURN(propertyStore- setDeviceName( Mon nom de l'appareil ,  fr ));\n\n   }\npropertyStore- setDescription( This is an AllJoyn application ,  en );\npropertyStore- setDescription( Esta es una AllJoyn aplicacion ,  sp );\npropertyStore- setDescription( C'est une Alljoyn application ,  fr );\n\npropertyStore- setManufacturer( Company ,  en );\npropertyStore- setManufacturer( Empresa ,  sp );\npropertyStore- setManufacturer( Entreprise ,  fr );\n\npropertyStore- setSupportUrl( http://www.allseenalliance.org );\npropertyStore- Initialize();  Implement a BusListener and SessionPortListener  In order to bind a SessionPort and accept sessions, a new\nclass must be created that inherits from the AllJoyn\nBusListener and SessionPortListener classes.  The class must contain the following function:  bool AcceptSessionJoiner(SessionPort sessionPort, const char* joiner, const\nSessionOpts  opts)  The AcceptSessionJoiner function will be called any time a\njoinsession request is received; the Listener class needs\nto dictate whether the joinsession request should be accepted\nor rejected by returning true or false, respectively. These\nconsiderations are application-specific and can include any\nof the following:   The SessionPort the request was made on  Specific SessionOpts limitations  The number of sessions already joined   Here is an example of a full class declaration for the listener class.  class CommonBusListener : public ajn::BusListener, public ajn::SessionPortListener {\n\npublic:\n   CommonBusListener();\n   ~CommonBusListener();\n   bool AcceptSessionJoiner(ajn::SessionPort sessionPort,\n      const char* joiner, const ajn::SessionOpts  opts);\n   void setSessionPort(ajn::SessionPort sessionPort);\n      ajn::SessionPort getSessionPort();\n   private:\n      ajn::SessionPort m_SessionPort;\n};  Initialize the AboutService in server mode  busListener = new CommonBusListener();\nAboutServiceApi::Init(*bus, *propertyStore);\nAboutServiceApi* aboutService = AboutServiceApi::getInstance();\nbusListener- setSessionPort(port);\nbus- RegisterBusListener(*busListener);\nTransportMask transportMask = TRANSPORT_ANY;\nSessionPort sp = port;\nSessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false,\nSessionOpts::PROXIMITY_ANY, transportMask);\nbus- BindSessionPort(sp, opts, *busListener);\naboutService- Register(port);\nbus- RegisterBusObject(*aboutService);  For more information about the About feature, see the About API Guide .  Implement the callbacks required by the Config Server  ConfigServiceListenerImpl::ConfigServiceListenerImpl(PropertyStoreImpl  store, BusAttachment  bus) :\n   ConfigService::Listener(), m_PropertyStore( store), m_Bus( bus)\n{\n}\n\nQStatus ConfigServiceListenerImpl::Restart()\n{\n   printf( Restart has been called !!!\\n );\n   return ER_OK;\n}\n\nQStatus ConfigServiceListenerImpl::FactoryReset()\n{\n   QStatus status = ER_OK;\n   printf( FactoryReset has been called!!!\\n ); m_PropertyStore- FactoryReset(); printf( Clearing Key Store\\n );\n   m_Bus- ClearKeyStore();\n\n   AboutServiceApi* aboutService = AboutServiceApi::getInstance();\n   if (aboutService) {\n      status = aboutService- Announce();\n      printf( Announce for %s =%d\\n , m_Bus- GetUniqueName().c_str(), status);\n   }\n\n   return status;\n}\n\nQStatus ConfigServiceListenerImpl::SetPassphrase(const char* daemonRealm, size_t passcodeSize, const char* passcode)\n{\n   qcc::String passCodeString(passcode, passcodeSize);\n   printf( SetPassphrase has been called daemonRealm=%s passcode=%s passcodeLength=%lu\\n , daemonRealm,\npassCodeString.c_str(), passcodeSize); PersistPassword(daemonRealm, passCodeString.c_str());\n\n   printf( Clearing Key Store\\n );\n   m_Bus- ClearKeyStore();\n\n   return ER_OK;\n}\n\nConfigServiceListenerImpl::~ConfigServiceListenerImpl()\n{\n}\n\nvoid ConfigServiceListenerImpl::PersistPassword(const char* daemonRealm, const char* passcode)\n{\n   std::map std::string, std::string  data;\n   data[ daemonrealm ] = daemonRealm;\n   data[ passcode ] = passcode;\n   IniParser::UpdateFile(m_PropertyStore- GetConfigFile().c_str(), data);\n}  Initialize the ConfigService in server mode, providing it with the ConfigStore and callbacks  configServiceListenerImpl = new ConfigServiceListenerImpl(*propertyStoreImpl,\n*msgBus);\nconfigService = new ConfigService(*msgBus, *propertyStoreImpl,\n*configServiceListenerImpl);\n\nstd::vector qcc::String  interfaces;\ninterfaces.push_back( org.alljoyn.Config );\naboutService- AddObjectDescription( /Config , interfaces);\n\nconfigService- Register();\nmsgBus- RegisterBusObject(*configService);  Advertise name and announce  AdvertiseName(SERVICE_TRANSPORT_TYPE);\naboutService- Announce();  Unregister and delete ConfigService and BusAttachment  When your process is done with the ConfigService delete variables used:  if (configService) {\n   delete configService;\n   configService = NULL;\n}\n\nif (configServiceListenerImpl) {\n   delete configServiceListenerImpl;\n   configServiceListenerImpl = NULL;\n}\n\nif (keyListener) {\n   delete keyListener;\n   keyListener = NULL;\n}\n\nif (propertyStoreImpl) {\n   delete propertyStoreImpl;\n   propertyStoreImpl = NULL;\n}\n\ndelete msgBus;\nmsgBus = NULL;",
            "title": "Implementing an App: Config Server"
        },
        {
            "location": "/develop/api-guide/config/cpp/#implementing-an-app-config-client",
            "text": "To implement an application to receive and modify ConfigData,\nuse the ConfigClient class. The AboutClient class must be used\nso that your application is notified when applications with\nAbout Server and possibly Config Server instances can send announcements.  NOTE:  Verify the BusAttachment has been created, started and\nconnected before implementing a Config Client. See the  About\nAPI Guide  for the code snippets.\nCode in this chapter references a variable  mBus \n(the BusAttachment variable name).  Initialize the AllJoyn framework  See the  Building Linux section  for\ninstructions to set up the AllJoyn framework.  Create bus attachment  busAttachment - Start();\nbusAttachment - Connect();  Enable peer security  Config Client uses peer security.  Create a KeyListener class that inherits from ajn::AuthListener.\nIt needs to implement two functions: RequestCredentials and\nAuthenticationComplete.  class SrpKeyXListener : public ajn::AuthListener {\n   public:\n      bool RequestCredentials(const char* authMechanism, const char* authPeer, uint16_t authCount, const char* userId,\n            uint16_t credMask, Credentials  creds);\n      void AuthenticationComplete(const char* authMechanism, const char*\nauthPeer, bool success);\n};  RequestCredentials needs to set the password using Creds and return true.  creds.SetPassword(Password);\nreturn true;  Instantiate the keylistener class and enable peer security.  SrpKeyXListener* keyListener = new SrpKeyXListener();\nbus- EnablePeerSecurity( ALLJOYN_PIN_KEYX ALLJOYN_SRP_KEYX ALLJOYN_ECDHE_PSK , keyListener);  Initialize the AboutService in client mode  Complete the following steps.   Implement the announce handler.  Implement the announce method.  Register the announce handler, if there is a Config interface.  Join a session.   For more information about the About feature, see the  About\nAPI Guide .  Create the ConfigService client object  configClient = new ConfigClient(*busAttachment);  Request the ConfigData  The Configurations data structure is filled by the  GetConfigurations() \nmethod call. Configurations can be iterated through to determine\nthe contents. The content definition is found in the  Configuration\nInterface Definition .  ConfigClient::Configurations configurations;\nif ((status = configClient- GetConfigurations(busname.c_str(),\n       en , configurations, id)) == ER_OK) {\n   for (ConfigClient::Configurations::iterator it = configurations.begin();\n      it != configurations.end(); ++it) { qcc::String key = it- first; ajn::MsgArg value = it- second;\n      if (value.typeId == ALLJOYN_STRING) {\n         printf( Key name=%s value=%s\\n , key.c_str(), value.v_string.str);\n         } else if (value.typeId == ALLJOYN_ARRAY  \nvalue.Signature().compare( as ) == 0) {\n         printf( Key name=%s values:  , key.c_str());\n         const MsgArg*stringArray;\n         size_t fieldListNumElements;\n         status = value.Get( as ,  fieldListNumElements,  stringArray);\n         for (unsigned int i = 0; i   fieldListNumElements; i++) {\n            char* tempString; stringArray[i].Get( s ,  tempString);\n            printf( %s  , tempString);\n         }\n         printf( \\n );\n      }\n   }  Update the ConfigData  The received data can be updated through the ConfigClient\nusing the  UpdateConfigurations()  method call.  configurations.insert(std::pair qcc::String, ajn::MsgArg ( DeviceName , MsgArg( s ,  New Device Name )));\nconfigClient- UpdateConfigurations(busname.c_str(), NULL, configurations, id);  Get the interface version  The peer device/application configuration can query for the\ninterface version.  int version;\nconfigClient- GetVersion(busname.c_str(), version, id);  Reset the ConfigData  The ConfigData can be reset to default through the ConfigClient\nusing the  ResetConfigurations()  method call.  std::vector qcc::String  configNames;\nconfigNames.push_back( DeviceName );\nconfigClient- ResetConfigurations(busname.c_str(),  en , configNames, id);  Reset the peer device application to factory defaults  The peer device/application configuration can be reset to\nfactory defaults through the ConfigClient using the FactoryReset()  method call.  NOTE:  This is a no-reply call, so its success cannot be\ndetermined directly.  configClient- FactoryReset(busname.c_str(), id);  Restart the peer  The peer application can be restarted though the ConfigClient\nusing the Restart() method call.  NOTE:  This is a no-reply call, so its success cannot be\ndetermined directly.  configClient- Restart(busname.c_str(), id);  Setting a passcode on the peer  The peer application can be set to have a different passcode\nthough the ConfigClient using the  SetPasscode()  method call.\nThis revokes the current encryption keys and regenerates new\nones based on the new shared secret, namely the passcode.  NOTE:  The realm name is currently ignored.  configClient- SetPasscode(busname.c_str(),  MyDeamonRealm , 8, (const uint8_t*) NEW_PASSCODE, id);\n   srpKeyXListener- setPassCode(NEW_PASSCODE);\n   qcc::String guid;\n   busAttachment- GetPeerGUID(busname.c_str(), guid);\n   busAttachment- ClearKeys(guid);  Delete variables and unregister listeners  Once you are done using the Config Service, Configuration\nservice framework, and the AllJoyn framework, free the variables\nused in the application.  if (configClient) {\n   delete configClient;\n   configClient = NULL;\n}\nbusAttachment- Stop();\ndelete busAttachment;",
            "title": "Implementing an App: Config Client"
        },
        {
            "location": "/develop/api-guide/config/",
            "text": "Configuration API Guide\n\n\nConfiguration\n\n\n\n\nJava\n\n\nC++\n\n\nObjective-C\n\n\nC (Thin Core)\n\n\n\n\nBest Practices\n\n\nUpdate individual configuration fields\n\n\nWhen attempting to update specific configuration data fields\nusing a Config Client, it is recommended that the developer\nperform the following steps:\n\n\n\n\nUse the GetConfigurations API call to retrieve the current\nconfiguration values for a given language.\n\n\nUpdate the desired value(s) in the retrieved object.\n\n\nUse the UpdateConfigurations API call to give the updated\nobject and the given language back to the Configuration service framework.\n\n\n\n\nSee the Configuration API Guide listed at the top of this page\nfor the platform you are targeting for specific code examples.\n\n\nThis approach will ensure that the Config Client receives the\ncurrent values for the provided language for the set of fields\nthat are actually updatable.\n\n\nMaximum size for configuration fields\n\n\nDepending on the device and implementation, there may be a\nmaximum length for string/character based configuration fields,\nsuch as the device name, on an embedded device application.\nThis maximum length is optional for an OEM to supply and\ntherefore may not always be present. A developer can check\nfor the existence of this constraint by doing the following:\n\n\n\n\nUse the getAbout API call to retrieve the object containing\nthe About values.\n\n\nCheck the About data object for a \"MaxLength\" field.\n\n\n\n\nIf the field exists, the maximum length is specified in bytes,\nnot characters. Therefore, when providing a user the option to\nmodify a Config field via a UI, the input value must first\nbe encoded as string and then checked against the maximum byte\nlength requirement.\n\n\nHow to use remote Restart API call\n\n\nA remote Restart call is propagated to the application via a\ncallback. It is up to the application developer to add the\nappropriate logic to actually perform the restart.\n\n\nHow to use remote FactoryReset API call\n\n\nA remote FactoryReset call is propagated to the application\nvia a callback. The ConfigService performs the resetting of\nthe PropertyStore by calling its \nresetAll()\n method. It is\nup to the application developer to perform other factory reset\ntasks such as clearing the device password and network configuration\n(if any), which are out of the scope of the Configuration service\nframework.\n\n\nExtending the PropertyStore implementation\n\n\nThe application writer may choose to extend the PropertyStore\nimplementation to manage the device passphrase and network\nconfigurations. This can be done by adding appropriate getters\nand setters and a flag for each property so that the PropertyStore\ninterface call \nreadAll()\n will only return interface/public fields.",
            "title": "Home"
        },
        {
            "location": "/develop/api-guide/config/#configuration-api-guide",
            "text": "",
            "title": "Configuration API Guide"
        },
        {
            "location": "/develop/api-guide/config/#configuration",
            "text": "Java  C++  Objective-C  C (Thin Core)",
            "title": "Configuration"
        },
        {
            "location": "/develop/api-guide/config/#best-practices",
            "text": "Update individual configuration fields  When attempting to update specific configuration data fields\nusing a Config Client, it is recommended that the developer\nperform the following steps:   Use the GetConfigurations API call to retrieve the current\nconfiguration values for a given language.  Update the desired value(s) in the retrieved object.  Use the UpdateConfigurations API call to give the updated\nobject and the given language back to the Configuration service framework.   See the Configuration API Guide listed at the top of this page\nfor the platform you are targeting for specific code examples.  This approach will ensure that the Config Client receives the\ncurrent values for the provided language for the set of fields\nthat are actually updatable.  Maximum size for configuration fields  Depending on the device and implementation, there may be a\nmaximum length for string/character based configuration fields,\nsuch as the device name, on an embedded device application.\nThis maximum length is optional for an OEM to supply and\ntherefore may not always be present. A developer can check\nfor the existence of this constraint by doing the following:   Use the getAbout API call to retrieve the object containing\nthe About values.  Check the About data object for a \"MaxLength\" field.   If the field exists, the maximum length is specified in bytes,\nnot characters. Therefore, when providing a user the option to\nmodify a Config field via a UI, the input value must first\nbe encoded as string and then checked against the maximum byte\nlength requirement.  How to use remote Restart API call  A remote Restart call is propagated to the application via a\ncallback. It is up to the application developer to add the\nappropriate logic to actually perform the restart.  How to use remote FactoryReset API call  A remote FactoryReset call is propagated to the application\nvia a callback. The ConfigService performs the resetting of\nthe PropertyStore by calling its  resetAll()  method. It is\nup to the application developer to perform other factory reset\ntasks such as clearing the device password and network configuration\n(if any), which are out of the scope of the Configuration service\nframework.  Extending the PropertyStore implementation  The application writer may choose to extend the PropertyStore\nimplementation to manage the device passphrase and network\nconfigurations. This can be done by adding appropriate getters\nand setters and a flag for each property so that the PropertyStore\ninterface call  readAll()  will only return interface/public fields.",
            "title": "Best Practices"
        },
        {
            "location": "/develop/api-guide/config/java/",
            "text": "Configuration API Guide - Java\n\n\nReference code\n\n\nClasses used to maintain/provide ConfigData\n\n\n\n\n\n\n\n\nServer class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nConfigService\n\n\nClass that implements the org.alljoyn.Config interface.\n\n\n\n\n\n\nPropertyStore\n\n\nInterface that supplies the list of properties required for \nGetConfigurations()\n and enables user manipulation of their values via \nUpdateConfigurations()\n and \nResetConfigurations()\n.\n\n\n\n\n\n\n\n\nClasses used to remotely manipulate ConfigData\n\n\n\n\n\n\n\n\nClient class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nConfigClient\n\n\nHelper class for discovering About Server that provides access to the Announcements and to the AboutService. It listens for Announcements sent using the org.alljoyn.About interface.\n\n\n\n\n\n\n\n\nObtain the Configuration service framework\n\n\nSee the \nBuilding Android section\n for\ninstructions on compiling the Configuration service framework.\n\n\nBuild an application that uses Config Server\n\n\nThe following steps provide the high-level process to build an\napplication that will maintain ConfigData.\n\n\n\n\nCreate the base for the AllJoyn\n application.\n\n\nImplement PropertyStore to produce a ConfigStore.\n(See \nCreate a PropertyStore implementation\n.)\n\n\nInstantiate a ConfigStore.\n\n\nInitialize the AboutService in server mode.\n\n\nImplement the callbacks required by the Config Server.\n\n\nInitialize the ConfigService in server mode, providing\nit with the ConfigStore and callbacks.\n\n\n\n\nBuild an application that uses Config Client\n\n\nThe following steps provide the high-level process to build an application\nthat will remotely manipulate ConfigData.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nInitialize the AboutService in client mode.\n\n\nInitialize the ConfigService in client mode.\n\n\nCreate a ConfigClient to interact with an announced Config Server.\n\n\n\n\nSetting up the AllJoyn framework and About feature\n\n\nThe steps required for this service framework are universal to\nall applications that use the AllJoyn framework and for any application\nusing one or more AllJoyn service framework. Prior to use of the\nConfiguration service framework as a Config Server or Config Client,\nthe About feature must be implemented and the AllJoyn framework set up.\n\n\nComplete the procedures in the following sections to guide you in this process:\n\n\n\n\nBuilding Android\n\n\nAbout API Guide\n\n\n\n\nImplementing an Application that Uses Config Server\n\n\nImplementing a Config Server requires creating and registering\nan instance of the ConfigService class. Any application using\nConfig Server also requires an About Server to facilitate the\ndiscovery via Announcements.\n\n\nNOTE:\n Verify the BusAttachment has been created, started and\nconnected before implementing the ConfigService. See the\n\nAbout API Guide\n for the code snippets.\nCode in this section references a variable \nmBus\n (the BusAttachment\nvariable name).\n\n\nDeclare listener class\n\n\nDeclare a listener class to receive the \nSessionPortListener\n callback.\n\n\nTypically, an \nAcceptSessionJoiner\n callback in \nSessionPortListener\n\nhas a check to allow or disallow access. Since the AboutService\nrequires access to any application using AboutClient, return\ntrue when this callback is triggered. Use the SessionJoined\nhandler to set the session timeout to 20 seconds.\n\n\nclass MyListener implements SessionPortListener {\n   boolean acceptSessionJoiner( short sessionPort, String joiner, SessionOpts opts ) {\n      return true;\n}\n\n   void sessionJoined( short sessionPort, int id, String joiner ) {\nmBus.enableConcurrentCallbacks();\n      uint32_t timeout = 20;\n      Status status = mBus.SetLinkTimeout(id, timeout);\n   }\n};\n\n\n\n\nBind session port\n\n\nNOTE:\n This step is not mandatory if you are only sending an announcement.\n\n\nTo allow incoming connections, the formation of a session is needed.\nThe AllJoyn framework must be told that connections are allowed.\n\n\nfinal Mutable.ShortValue sPort = new Mutable.ShortValue((short)0);\n\nSessionOpts sessionOpts = new SessionOpts();\nsessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\nsessionOpts.isMultipoint = true;\nsessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\nsessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\nStatus status = m_bus.bindSessionPort(sPort, sessionOpts, new SessionPortListener()\n   {\n      @Override\n      public boolean acceptSessionJoiner(short sessionPort, String joiner, SessionOpts sessionOpts) {\n         if (sessionPort == sPort.value) {\n            return true;\n         } else {\n            return false;\n         }\n      }\n\n         public void sessionJoined(short sessionPort, int id, String joiner){\n\n            Log.i(TAG,\nString.format(\nSessionPortListener.sessionJoined(%d, %d, %s)\n, sessionPort, id, joiner));\n         }\n      });\n\nString logMessage = String.format(\nBusAttachment.bindSessionPort(%d, %s): %s\n,\nsPort.value, sessionOpts.toString(), status);\nLog.d(TAG, logMessage);\n\n\n\n\nCreate a PropertyStore implementation\n\n\nThe PropertyStore interface is required by the AboutService to\nstore the provisioned values for the About interface data fields.\nSee the \nAbout Interface Definition\n for more information.\n\n\nThe ProperyStore interface is also required by the ConfigService\nto store and facilitate manipulation of some updateable fields\n(listed in [Config interface data fields][config-interface-data-fields.\nSee the [Configuration Interface Definition]\nconfig-interface-definition\n\nfor more information.\n\n\nConfig interface data fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nSignature\n\n\n\n\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceName\n\n\nyes\n\n\ns\n\n\n\n\n\n\n\n\nNOTE:\n Any changes made to these fields should be written to\na shared provisioning file. See the \nAbout API Guide\n\nfor more information.\n\n\nSample ConfigStore implementation\n\n\nAn example PropertyStore implementation (ConfigStore)\nis provided below that specifies the following dictionary\nof metadata fields:\n\n\n\n\nKeys are the field names\n\n\nValues are a Map of String to Object entries where the\nString is the language tag associated with the Object value\n\n\n\n\nThis implementation extends the example AboutStore implementation\nin the \nAbout API Guide\n and is passed to the\nAboutService instead of AboutStore.\n\n\npublic class ConfigStore implements PropertyStore\n{\n   private Map \n String, Map \n String, Object \n \n m_DefaultMap = new HashMap\n\n String, Map \n String, Object \n \n();\n   private Set \n String \n m_AnnounceKeys = new HashSet \n String \n();\n   private Set \n String \n   m_WriteableKeys = new HashSet \n String \n();\n   private Map \n String, Map \n String, Object \n \n m_DataMap = new HashMap \n\nString, Map \n String, Object \n \n();\n\n   public ConfigStore(Map \n String, Map \n String, Object \n \n defaultMap)\n   {\n      m_DefaultMap = defaultMap;\n\n      // Initialize set of Announce keys m_AnnounceKeys.add(\nAppId\n);\n      m_AnnounceKeys.add(\nDefaultLanguage\n);\n      m_AnnounceKeys.add(\nDeviceName\n);\n      m_AnnounceKeys.add(\nDeviceId\n);\n      m_AnnounceKeys.add(\nAppName\n);\n      m_AnnounceKeys.add(\nManufacturer\n);\n      m_AnnounceKeys.add(\nModelNumber\n);\n\n      // Initialize set of Writable keys m_WriteableKeys.add(\nDefaultLanguage\n);\n      m_WriteableKeys.add(\nDeviceName\n);\n\n      // Load default values loadDefaults();\n\n      // Load override values loadConfigurations();\n   }\n\n   @Override\n   public void readAll(String languageTag, Filter filter, Map\nString, Object\n dataMap)\n         throws PropertyStoreException {\nif (dataMap == null) {\n         throw new\nPropertyStroreException(PropertyStoreException.INVALID_VALUE);\n      }\n      languageTag = checkLanguage(languageTag);\n      for (Entry\nString, Map\nString, Object\n entry :\nm_DataMap.entrySet()) {\n         if (entry.getValue().containsKey(languageTag))\n         {\n            String lang = \n;\n            if (entry.getValue().containsKey(languageTag)) {\n               lang = languageTag;\n         }\n         switch (filter)\n         {\n         case READ:\n            {\n               dataMap.put(entry.getKey(),\nentry.getValue().get(lang));\n            }\n            break;\n         case ANNOUNCE:\n            if (m_AnnounceKeys.contains(entry.getKey()))\n            {\n               dataMap.put(entry.getKey(),\nentry.getValue().get(lang));\n            }\n            break;\n         case WRITE:\n            if (m_WriteableKeys.contains(entry.getKey()))\n            {\n               dataMap.put(entry.getKey(),\nentry.getValue().get(lang));\n            }\n            break;\n         }\n      }\n   }\n}\n\n@Override\npublic void reset(String key, String languageTag) throws\nPropertyStoreException {\n   languageTag = checkLanguage(languageTag);\n   if (!m_DataMap.containsKey(key)) {\n      throw new PropertyStoreException();\n   }\n   m_DataMap.get(key).remove(languageTag);\nsaveConfigurations();\n   }\n\n@Override\n\npublic void resetAll() throws PropertyStoreException {\n   m_DataMap.clear();\n   loadDefaults();\n}\n\n@Override\npublic void update(String key, String languageTag, Object newValue)\n   throws PropertyStoreException { languageTag = checkLanguage(languageTag);\n   if (!m_DataMap.containsKey(key))\n   {\n      throw new\nPropertyStoreException(PropertyStoreException.INVALID_VALUE);\n   }\n   m_DataMap.get(key).put(languageTag, newValue);\n   saveConfigurations();\n}\n\n   private String checkLanguage(String languageTag) throws\nPropertyStoreException\n   {\n      if (languageTag == null) {\n         throw new\nPropertyStoreException(PropertyStoreException.INVALID_VALUE);\n   }\n      if (languageTag.isEmpty()) {\n         return (String) m_DataMap.get(\nDefaultLanguage\n).get(\n);\n   }\n   if\n(((Set\nString\n)m_DataMap.get(\nSupportedLanguages\n).get(\n)).contains(languageTa g)) {\n         throw new\nPropertyStoreException(PropertyStoreException.UNSUPPORTED_LANGUAGE);\n   }\n   return languageTag;\n}\n\nprivate void loadDefaults()\n{\n   m_DataMap.putAll(m_DefaultMap);\n}\n\nprivate void loadConfigurations()\n{\n   // Implement your persistence of Config fields here\n}\n\nprivate void saveConfigurations()\n{\n   // Implement your persistence of Config fields here\n\n   }\n}\n\n\n\n\nProvision ConfigStore instance with default values\n\n\nIn the application, the ConfigStore instance which you\ncreated will be loaded with the default values. In the\nsample implementation above, the ConfigStore instance will\nbe provided with a default values map.\n\n\nMap \n String, Map \n String, Object \n defaultMap = new HashMap \n String, Map \n String, Object \n \n();\n// Populate map with fields' names and values.\nMap \n String, Object \n defaultDeviceName = new HashMap \nString, Object\n();\ndefaultValue.put(\n, \nMyDevice\n);// An empty string means non-language specific field.\ndefaultMap.put(\nDeviceName\n, defaultDeviceName);\nMap \n String, Object \n defaultLanguage = new HashMap \nString, Object\n();\ndefaultValue.put(\n, \nen\n);// An empty string means non-language specific field.\ndefaultMap.put(\nDefaultLanguage\n, defaultLanguage);\nMap \n String, Object \n deviceId = new HashMap \nString, Object\n();\ndeviceId.put(mBus. getGlobalGUIDString(), \nen\n);\n// An empty string means non- language specific field.\ndefaultMap.put(\nDeviceId\n, deviceId);\nPropertyStore aboutStore = new AboutStore(defaultMap);\n\n\n\n\nThe following subsections highlight provisioning fields\naccording to their data type.\n\n\nAppId field\n\n\nThe AppId field is an array of bytes. It is a globally\nunique identifier (GUID) encoded as an array of 16 bytes.\n\n\nUUID uuid = UUID.randomUUID();\nMap \n String, Object \n defaultAppId = new HashMap \nString, Object\n();\ndefaultAppId.put(\n, TransportUtil.uuidToByteArray(uuid));\ndefaultMap.put(\nAppId\n, defaultAppId);\n\n\n\n\nSupportedLanguages field\n\n\nThe SupportedLanguages field is a list of text strings.\nSome fields can have language-dependent value that must\nbe provided for each of the supported languages.\n\n\nString [] supportedLanguages = { \nen\n, \nfr\n };\nMap \n String, Object \n defaultSupportedLanguages = new HashMap \nString, Object\n();\ndefaultSupportedLanguages.put(\n, supportedLanguages);\n\n\n\n\nNon-language-specific fields\n\n\nNon-language-specific fields support a single supplied\ntext string. Below is an example for the ModelNumber field\non how to insert into the ConfigStore. The code below can be\nused with the field name being replaced by other field names\nlisted in \nConfig interface data fields\n.\n\n\nMap \n String, Object \n defaultModelNumber = new HashMap \nString, Object\n();\ndefaultModelNumber.put(\n, \nMN-123\n);\n);// An empty string means non-language specific field.\ndefaultMap.put(\nModelNumber\n, defaultModelNumber);\n\n\n\n\nLanguage-dependent fields\n\n\nLanguage-dependent fields support a single supplied text string.\nBelow is an example for the Description field on how to insert\ninto the PropertyStore. The code below can be used with the field\nname being replaced by other field names listed in\n\nConfig interface data fields\n.\n\n\nMap \n String, Object \n defaultDescription = new HashMap \nString, Object\n();\ndefaultDescription.put(\nen\n, \nThe description in English\n);\ndefaultDescription.put(\nfr\n, \nLa description en francais\n);\ndefaultMap.put(\nAppId\n, defaultDescription);\n\n\n\n\nEstablish the AboutService in Server mode\n\n\nFor an application to provide Config Server, it requires to\nAnnounce its interface via an About Server. AboutServiceImpl\nis an implementation wrapper around AllJoyn native calls that\nhandle the interactions between About Server and About Client.\nFor more details, see the content in \nProvision PropertyStore instance\nwith default values\n through \nSend the Announcement\n\nin the \nAbout API Guide\n.\n\n\nAboutService aboutService = AboutServiceImpl.getInstance();\naboutService.startAboutServer(sPort.value, configStore, mBus);\n\n\n\n\nCreate the ConfigService object\n\n\nFor an application to receive and modify ConfigData, it requires\nan instance of the ConfigService class. ConfigServiceImpl is an\nimplementation wrapper around AllJoyn native calls that handle\nthe interactions with the Config Server.\n\n\nConfigService configService = ConfigServiceImpl.getInstance();\n\n\n\n\nStart Server mode\n\n\nPerform the following tasks to start Server mode.\n\n\nImplement application callbacks\n\n\nBefore starting in server mode, a few application callbacks\nmust be implemented that allow reaction to changes in various\nfield values.\n\n\nConfigChangeListener configChangeListener = new ConfigChangeListener()\n{\n   @Override\n   public void onConfigChanged(Map\nString, Variant\n newConfiguration, String languageTag)\n   {\n      // Perform any action that depends on configuration value changes. E.g. propagate a changed DeviceName to other services that may consume it.\n   }\n   @Override\n   public void onResetConfiguration(String language, String[] fieldNames)\n   {\n      // Perform any action that depends on configuration value changes. E.g. propagate a reset DeviceName to other services that may consume it.\n   }\n};\nRestartHandler restartHandler = new RestartHandler()\n{\n   @Override\n   public void restart()\n   {\n      // Restart application disconnecting and reconnecting to the\nAllJoyn network.\n   }\n};\nFactoryResetHandler factoryResetHandler = new FactoryResetHandler()\n{\n   public void doFactoryReset()\n   {\n      configStore.resetAll(); // Reset the ConfigStore restoring default factory values.\n         // Perform any other reset logic related to the AllJoyn services\nplatform.\n   }\n}\nPassphraseChangedListener passphraseChangeListener = new\nPassphraseChangedListener()\n{\n   public void onPassphraseChanged(byte[] passphrase)\n   {\n      // Perform any other passphrase change logic related to the application.\n   }\n}\n\n\n\n\nStart the ConfigService in Server mode\n\n\nOnce the callbacks are initialized, the Configuration service\nframework can be started. Register the relevant BusObjects,\nadd the relevant interfaces to the Announcement's ObjectDescription\nand register the callbacks.\n\n\nconfigService.startConfigServer(aboutStore, configChangeListener,\nrestartHandler, factoryResetHandler, passphraseChangeListener, mBus);\n\n\n\n\nRegister SetPasswordHandler\n\n\nA SetPasswordHandler is required to be registered with the\nConfigService in order to handler remote calls to set a new\npassword as the secret for the key exchange encryption mechanism.\n\n\nSetPasswordHandler setPasswordHandler = new SetPasswordHandler() {\n   @Override\n   public void setPassword(String peerName, char[] password)\n   {\n      // Store new credentials\n      // Clear all current encryption keys that were generated from the current passphrase.\n      mBus.clearKeyStore();\n   }\n};\nconfigService.setSetPasswordHandler(setPasswordHandler);\n\n\n\n\nAdvertise to allow connections\n\n\nmBus.advertiseName(mBus.getUniqueName());\n\n\n\n\nSend the Announcement\n\n\naboutService.announce();\n\n\n\n\nUnregister and delete ConfigService and BusAttachment\n\n\nWhen your process is done with the ConfigService and no\nlonger wishes to send announcements, unregister the process\nfrom the AllJoyn bus and then delete variables used.\n\n\nif( configService != null ) {\n   configService.stopServer();\n}\nif( aboutService != null ) {\n   aboutService.stopServer();\n}\nif( mBus != null) {\n   mBus.disconnect();\n   mBus.release();\n   mBus = null;\n}\n\n\n\n\nImplementing an Application that Uses Config Client\n\n\nTo implement an application to receive and modify ConfigData,\nuse the ConfigClient class. The AboutClient class must be used\nso that your application is notified when applications with\nAbout Server and possibly Config Server instances can send announcements.\n\n\nVerify the BusAttachment has been created, started and connected\nbefore implementing a Config Client. See the \nAbout API Guide\n\nfor the code snippets. Code in this chapter references a\nvariable \nmBus\n (the BusAttachment variable name).\n\n\nEstablish the AboutService object\n\n\nFor an application to discover peer applications that\nare ConfigService providers, it requires an instance of\nthe AboutService class running in Client mode. AboutServiceImpl\nis an implementation wrapper around AllJoyn native calls that\nhandle the interactions with the About Server. The following\nis an aggregation of the content in \nCreate the AboutService object\n through \nSet up ability to receive the\nAnnounce signal\n of the \nAbout API Guide\n.\n\n\nAboutService aboutService = AboutServiceImpl.getInstance();\naboutService.startClient(mBus);\nMyAnnouncementHandler announceHandler = new MyAnnouncementHandler();\naboutService.addAnnouncementHandler(announceHandler, new String[]\n   { \norg.alljoyn.Config\n });\n\n\n\n\nCreate the ConfigService object\n\n\nFor an application to receive and modify ConfigData, it requires an\ninstance of the ConfigService class. ConfigServiceImpl is an implementation\nwrapper around AllJoyn native calls that handle the interactions with the\nConfig Server.\n\n\nConfigService configService = ConfigServiceImpl.getInstance();\n\n\n\n\nStart Client mode\n\n\nconfigService.startConfigClient(mBus);\n\n\n\n\nEngage with a peer ConfigService\n\n\nPerform the following tasks to engage with a peer ConfigService\nwhose Announcement was received.\n\n\nCreate ConfigClient\n\n\nGenerate an instance of ConfigClient to receive and send\nConfigData to and from a peer Config Server whose Announcement\nwas received in the \nonAnnouncement()\n implementation of your\nMyAnnouncementHandler instance. The following is an example\nimplementation of the call shown in \nImplement AnnounceHandler class\n of the \nAbout API Guide\n.\n\n\nprivate void engageWithPeer(Short port, String peerName, BusObjectDescription[]\ninterfaces, Map\nString, Object\n announceMap) {\n   MyAvailabilityListener availabilityListener = new\nMyAvailabilityListener();\n   ConfigClient configClient = configService.createFeatureConfigClient\n(peerName, availabilityListener, port);\n\n\n\n\nRequest the ConfigData\n\n\nThe updateable ConfigData is requested through the ConfigClient\nvia the GetConfigurations() method call. The structure that is\nreturned can be iterated through to determine the contents.\nThe content definition is found in the \nConfiguration Interface Definition\n.\n\n\nMap \nString, Variant\n configMap =\nconfigClient.GetConfigurations((String)announceMap.get(\nDefaultLanguage\n));\n\n\n\n\nUpdate the ConfigData\n\n\nThe received data can be updated through the ConfigClient via the\n\nUpdateConfigurations()\n method call. The structure that was\nreturned by \nGetConfigurations()\n can be iterated through to\ndetermine the contents. The content definition is found in the\n\nConfiguration Interface Definition\n.\n\n\nconfigMap.put(\nDefaultLanaguge\n, new Variant(\nfr\n, \ns\n);\nconfigClient.UpdateConfigurations((String)announceMap.get(\nDefaultLanguage\n), configMap);\n\n\n\n\nReset the ConfigData\n\n\nThe ConfigData can be reset to default through the ConfigClient\nvia the \nResetConfigurations()\n method call. The structure\nthat was returned by \nGetConfigurations()\n can be iterated\nthrough to determine the list of reset fields. The content\ndefinition is found in the \nConfiguration Interface Definition\n.\n\n\nString [] fieldsToReset = new String [] { \nDeviceName\n };\nconfigClient.ResetConfigurations((String)announceMap.get(\nDefaultLanguage\n), fieldsToReset);\n\n\n\n\nReset the peer device application to factory defaults\n\n\nThe peer device/application configuration can be reset to\nfactory defaults through the ConfigClient via the \nFactoryReset()\n method call.\n\n\nNOTE:\n This is a no-reply call, so its success cannot be determined directly.\n\n\nconfigClient.FactoryReset();\n\n\n\n\nRestart the peer\n\n\nThe peer application can be restarted though the ConfigClient\nvia the \nRestart()\n method call.\n\n\nNOTE:\n This is a no-reply call, so its success cannot be determined directly.\n\n\nconfigClient.Restart();\n\n\n\n\nSetting a passcode on the peer\n\n\nThe peer application can be set to have a different passcode\nthrough the ConfigClient via the \nSetPasscode()\n method call.\nThis revokes the current encryption keys and regenerates new\nones based on the new shared secret, namely the passcode.\n\n\nNOTE:\n The realm name is currently ignored.\n\n\nbyte [] passcode = new byte [] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 };\nconfigClient.SetPasscode(\n, passcode);\n// Revoke current encryption key that was based on the previous passcode. StringValue peerGuid = new StringValue();\nStatus status = m_Bus.getPeerGUID(m_currentPeer.deviceName, peerGuid);\nif(status.equals(Status.OK)){\n   mBus.clearKeys(peerGuid.value);\n}\n\n\n\n\nDelete variables and unregister listeners\n\n\nOnce you are done using the About feature, Configuration service\nframework, and the AllJoyn framework, free the variables used\nin the application.\n\n\nif(configClient != null) {\n   configClient.disconnect();\n}\nif(configService != null) {\n   configService.stopClient();\n}\nif(aboutService != null) {\n   aboutService.unregisterAnnounceListener(announceListener);\n   aboutService.stopClient();\n}\nif(mBus != null) {\n   mBus.disconnect();\n   mBus.release();\n   mBus = null;\n}",
            "title": "Java"
        },
        {
            "location": "/develop/api-guide/config/java/#configuration-api-guide-java",
            "text": "",
            "title": "Configuration API Guide - Java"
        },
        {
            "location": "/develop/api-guide/config/java/#reference-code",
            "text": "Classes used to maintain/provide ConfigData     Server class  Description      ConfigService  Class that implements the org.alljoyn.Config interface.    PropertyStore  Interface that supplies the list of properties required for  GetConfigurations()  and enables user manipulation of their values via  UpdateConfigurations()  and  ResetConfigurations() .     Classes used to remotely manipulate ConfigData     Client class  Description      ConfigClient  Helper class for discovering About Server that provides access to the Announcements and to the AboutService. It listens for Announcements sent using the org.alljoyn.About interface.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/config/java/#obtain-the-configuration-service-framework",
            "text": "See the  Building Android section  for\ninstructions on compiling the Configuration service framework.",
            "title": "Obtain the Configuration service framework"
        },
        {
            "location": "/develop/api-guide/config/java/#build-an-application-that-uses-config-server",
            "text": "The following steps provide the high-level process to build an\napplication that will maintain ConfigData.   Create the base for the AllJoyn  application.  Implement PropertyStore to produce a ConfigStore.\n(See  Create a PropertyStore implementation .)  Instantiate a ConfigStore.  Initialize the AboutService in server mode.  Implement the callbacks required by the Config Server.  Initialize the ConfigService in server mode, providing\nit with the ConfigStore and callbacks.   Build an application that uses Config Client  The following steps provide the high-level process to build an application\nthat will remotely manipulate ConfigData.   Create the base for the AllJoyn application.  Initialize the AboutService in client mode.  Initialize the ConfigService in client mode.  Create a ConfigClient to interact with an announced Config Server.",
            "title": "Build an application that uses Config Server"
        },
        {
            "location": "/develop/api-guide/config/java/#setting-up-the-alljoyn-framework-and-about-feature",
            "text": "The steps required for this service framework are universal to\nall applications that use the AllJoyn framework and for any application\nusing one or more AllJoyn service framework. Prior to use of the\nConfiguration service framework as a Config Server or Config Client,\nthe About feature must be implemented and the AllJoyn framework set up.  Complete the procedures in the following sections to guide you in this process:   Building Android  About API Guide",
            "title": "Setting up the AllJoyn framework and About feature"
        },
        {
            "location": "/develop/api-guide/config/java/#implementing-an-application-that-uses-config-server",
            "text": "Implementing a Config Server requires creating and registering\nan instance of the ConfigService class. Any application using\nConfig Server also requires an About Server to facilitate the\ndiscovery via Announcements.  NOTE:  Verify the BusAttachment has been created, started and\nconnected before implementing the ConfigService. See the About API Guide  for the code snippets.\nCode in this section references a variable  mBus  (the BusAttachment\nvariable name).  Declare listener class  Declare a listener class to receive the  SessionPortListener  callback.  Typically, an  AcceptSessionJoiner  callback in  SessionPortListener \nhas a check to allow or disallow access. Since the AboutService\nrequires access to any application using AboutClient, return\ntrue when this callback is triggered. Use the SessionJoined\nhandler to set the session timeout to 20 seconds.  class MyListener implements SessionPortListener {\n   boolean acceptSessionJoiner( short sessionPort, String joiner, SessionOpts opts ) {\n      return true;\n}\n\n   void sessionJoined( short sessionPort, int id, String joiner ) {\nmBus.enableConcurrentCallbacks();\n      uint32_t timeout = 20;\n      Status status = mBus.SetLinkTimeout(id, timeout);\n   }\n};  Bind session port  NOTE:  This step is not mandatory if you are only sending an announcement.  To allow incoming connections, the formation of a session is needed.\nThe AllJoyn framework must be told that connections are allowed.  final Mutable.ShortValue sPort = new Mutable.ShortValue((short)0);\n\nSessionOpts sessionOpts = new SessionOpts();\nsessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\nsessionOpts.isMultipoint = true;\nsessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\nsessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\nStatus status = m_bus.bindSessionPort(sPort, sessionOpts, new SessionPortListener()\n   {\n      @Override\n      public boolean acceptSessionJoiner(short sessionPort, String joiner, SessionOpts sessionOpts) {\n         if (sessionPort == sPort.value) {\n            return true;\n         } else {\n            return false;\n         }\n      }\n\n         public void sessionJoined(short sessionPort, int id, String joiner){\n\n            Log.i(TAG,\nString.format( SessionPortListener.sessionJoined(%d, %d, %s) , sessionPort, id, joiner));\n         }\n      });\n\nString logMessage = String.format( BusAttachment.bindSessionPort(%d, %s): %s ,\nsPort.value, sessionOpts.toString(), status);\nLog.d(TAG, logMessage);  Create a PropertyStore implementation  The PropertyStore interface is required by the AboutService to\nstore the provisioned values for the About interface data fields.\nSee the  About Interface Definition  for more information.  The ProperyStore interface is also required by the ConfigService\nto store and facilitate manipulation of some updateable fields\n(listed in [Config interface data fields][config-interface-data-fields.\nSee the [Configuration Interface Definition] config-interface-definition \nfor more information.  Config interface data fields     Field name  Required  Signature      DefaultLanguage  yes  s    DeviceName  yes  s     NOTE:  Any changes made to these fields should be written to\na shared provisioning file. See the  About API Guide \nfor more information.  Sample ConfigStore implementation  An example PropertyStore implementation (ConfigStore)\nis provided below that specifies the following dictionary\nof metadata fields:   Keys are the field names  Values are a Map of String to Object entries where the\nString is the language tag associated with the Object value   This implementation extends the example AboutStore implementation\nin the  About API Guide  and is passed to the\nAboutService instead of AboutStore.  public class ConfigStore implements PropertyStore\n{\n   private Map   String, Map   String, Object     m_DefaultMap = new HashMap  String, Map   String, Object    ();\n   private Set   String   m_AnnounceKeys = new HashSet   String  ();\n   private Set   String     m_WriteableKeys = new HashSet   String  ();\n   private Map   String, Map   String, Object     m_DataMap = new HashMap  \nString, Map   String, Object    ();\n\n   public ConfigStore(Map   String, Map   String, Object     defaultMap)\n   {\n      m_DefaultMap = defaultMap;\n\n      // Initialize set of Announce keys m_AnnounceKeys.add( AppId );\n      m_AnnounceKeys.add( DefaultLanguage );\n      m_AnnounceKeys.add( DeviceName );\n      m_AnnounceKeys.add( DeviceId );\n      m_AnnounceKeys.add( AppName );\n      m_AnnounceKeys.add( Manufacturer );\n      m_AnnounceKeys.add( ModelNumber );\n\n      // Initialize set of Writable keys m_WriteableKeys.add( DefaultLanguage );\n      m_WriteableKeys.add( DeviceName );\n\n      // Load default values loadDefaults();\n\n      // Load override values loadConfigurations();\n   }\n\n   @Override\n   public void readAll(String languageTag, Filter filter, Map String, Object  dataMap)\n         throws PropertyStoreException {\nif (dataMap == null) {\n         throw new\nPropertyStroreException(PropertyStoreException.INVALID_VALUE);\n      }\n      languageTag = checkLanguage(languageTag);\n      for (Entry String, Map String, Object  entry :\nm_DataMap.entrySet()) {\n         if (entry.getValue().containsKey(languageTag))\n         {\n            String lang =  ;\n            if (entry.getValue().containsKey(languageTag)) {\n               lang = languageTag;\n         }\n         switch (filter)\n         {\n         case READ:\n            {\n               dataMap.put(entry.getKey(),\nentry.getValue().get(lang));\n            }\n            break;\n         case ANNOUNCE:\n            if (m_AnnounceKeys.contains(entry.getKey()))\n            {\n               dataMap.put(entry.getKey(),\nentry.getValue().get(lang));\n            }\n            break;\n         case WRITE:\n            if (m_WriteableKeys.contains(entry.getKey()))\n            {\n               dataMap.put(entry.getKey(),\nentry.getValue().get(lang));\n            }\n            break;\n         }\n      }\n   }\n}\n\n@Override\npublic void reset(String key, String languageTag) throws\nPropertyStoreException {\n   languageTag = checkLanguage(languageTag);\n   if (!m_DataMap.containsKey(key)) {\n      throw new PropertyStoreException();\n   }\n   m_DataMap.get(key).remove(languageTag);\nsaveConfigurations();\n   }\n\n@Override\n\npublic void resetAll() throws PropertyStoreException {\n   m_DataMap.clear();\n   loadDefaults();\n}\n\n@Override\npublic void update(String key, String languageTag, Object newValue)\n   throws PropertyStoreException { languageTag = checkLanguage(languageTag);\n   if (!m_DataMap.containsKey(key))\n   {\n      throw new\nPropertyStoreException(PropertyStoreException.INVALID_VALUE);\n   }\n   m_DataMap.get(key).put(languageTag, newValue);\n   saveConfigurations();\n}\n\n   private String checkLanguage(String languageTag) throws\nPropertyStoreException\n   {\n      if (languageTag == null) {\n         throw new\nPropertyStoreException(PropertyStoreException.INVALID_VALUE);\n   }\n      if (languageTag.isEmpty()) {\n         return (String) m_DataMap.get( DefaultLanguage ).get( );\n   }\n   if\n(((Set String )m_DataMap.get( SupportedLanguages ).get( )).contains(languageTa g)) {\n         throw new\nPropertyStoreException(PropertyStoreException.UNSUPPORTED_LANGUAGE);\n   }\n   return languageTag;\n}\n\nprivate void loadDefaults()\n{\n   m_DataMap.putAll(m_DefaultMap);\n}\n\nprivate void loadConfigurations()\n{\n   // Implement your persistence of Config fields here\n}\n\nprivate void saveConfigurations()\n{\n   // Implement your persistence of Config fields here\n\n   }\n}  Provision ConfigStore instance with default values  In the application, the ConfigStore instance which you\ncreated will be loaded with the default values. In the\nsample implementation above, the ConfigStore instance will\nbe provided with a default values map.  Map   String, Map   String, Object   defaultMap = new HashMap   String, Map   String, Object    ();\n// Populate map with fields' names and values.\nMap   String, Object   defaultDeviceName = new HashMap  String, Object ();\ndefaultValue.put( ,  MyDevice );// An empty string means non-language specific field.\ndefaultMap.put( DeviceName , defaultDeviceName);\nMap   String, Object   defaultLanguage = new HashMap  String, Object ();\ndefaultValue.put( ,  en );// An empty string means non-language specific field.\ndefaultMap.put( DefaultLanguage , defaultLanguage);\nMap   String, Object   deviceId = new HashMap  String, Object ();\ndeviceId.put(mBus. getGlobalGUIDString(),  en );\n// An empty string means non- language specific field.\ndefaultMap.put( DeviceId , deviceId);\nPropertyStore aboutStore = new AboutStore(defaultMap);  The following subsections highlight provisioning fields\naccording to their data type.  AppId field  The AppId field is an array of bytes. It is a globally\nunique identifier (GUID) encoded as an array of 16 bytes.  UUID uuid = UUID.randomUUID();\nMap   String, Object   defaultAppId = new HashMap  String, Object ();\ndefaultAppId.put( , TransportUtil.uuidToByteArray(uuid));\ndefaultMap.put( AppId , defaultAppId);  SupportedLanguages field  The SupportedLanguages field is a list of text strings.\nSome fields can have language-dependent value that must\nbe provided for each of the supported languages.  String [] supportedLanguages = {  en ,  fr  };\nMap   String, Object   defaultSupportedLanguages = new HashMap  String, Object ();\ndefaultSupportedLanguages.put( , supportedLanguages);  Non-language-specific fields  Non-language-specific fields support a single supplied\ntext string. Below is an example for the ModelNumber field\non how to insert into the ConfigStore. The code below can be\nused with the field name being replaced by other field names\nlisted in  Config interface data fields .  Map   String, Object   defaultModelNumber = new HashMap  String, Object ();\ndefaultModelNumber.put( ,  MN-123 ); );// An empty string means non-language specific field.\ndefaultMap.put( ModelNumber , defaultModelNumber);  Language-dependent fields  Language-dependent fields support a single supplied text string.\nBelow is an example for the Description field on how to insert\ninto the PropertyStore. The code below can be used with the field\nname being replaced by other field names listed in Config interface data fields .  Map   String, Object   defaultDescription = new HashMap  String, Object ();\ndefaultDescription.put( en ,  The description in English );\ndefaultDescription.put( fr ,  La description en francais );\ndefaultMap.put( AppId , defaultDescription);  Establish the AboutService in Server mode  For an application to provide Config Server, it requires to\nAnnounce its interface via an About Server. AboutServiceImpl\nis an implementation wrapper around AllJoyn native calls that\nhandle the interactions between About Server and About Client.\nFor more details, see the content in  Provision PropertyStore instance\nwith default values  through  Send the Announcement \nin the  About API Guide .  AboutService aboutService = AboutServiceImpl.getInstance();\naboutService.startAboutServer(sPort.value, configStore, mBus);  Create the ConfigService object  For an application to receive and modify ConfigData, it requires\nan instance of the ConfigService class. ConfigServiceImpl is an\nimplementation wrapper around AllJoyn native calls that handle\nthe interactions with the Config Server.  ConfigService configService = ConfigServiceImpl.getInstance();  Start Server mode  Perform the following tasks to start Server mode.  Implement application callbacks  Before starting in server mode, a few application callbacks\nmust be implemented that allow reaction to changes in various\nfield values.  ConfigChangeListener configChangeListener = new ConfigChangeListener()\n{\n   @Override\n   public void onConfigChanged(Map String, Variant  newConfiguration, String languageTag)\n   {\n      // Perform any action that depends on configuration value changes. E.g. propagate a changed DeviceName to other services that may consume it.\n   }\n   @Override\n   public void onResetConfiguration(String language, String[] fieldNames)\n   {\n      // Perform any action that depends on configuration value changes. E.g. propagate a reset DeviceName to other services that may consume it.\n   }\n};\nRestartHandler restartHandler = new RestartHandler()\n{\n   @Override\n   public void restart()\n   {\n      // Restart application disconnecting and reconnecting to the\nAllJoyn network.\n   }\n};\nFactoryResetHandler factoryResetHandler = new FactoryResetHandler()\n{\n   public void doFactoryReset()\n   {\n      configStore.resetAll(); // Reset the ConfigStore restoring default factory values.\n         // Perform any other reset logic related to the AllJoyn services\nplatform.\n   }\n}\nPassphraseChangedListener passphraseChangeListener = new\nPassphraseChangedListener()\n{\n   public void onPassphraseChanged(byte[] passphrase)\n   {\n      // Perform any other passphrase change logic related to the application.\n   }\n}  Start the ConfigService in Server mode  Once the callbacks are initialized, the Configuration service\nframework can be started. Register the relevant BusObjects,\nadd the relevant interfaces to the Announcement's ObjectDescription\nand register the callbacks.  configService.startConfigServer(aboutStore, configChangeListener,\nrestartHandler, factoryResetHandler, passphraseChangeListener, mBus);  Register SetPasswordHandler  A SetPasswordHandler is required to be registered with the\nConfigService in order to handler remote calls to set a new\npassword as the secret for the key exchange encryption mechanism.  SetPasswordHandler setPasswordHandler = new SetPasswordHandler() {\n   @Override\n   public void setPassword(String peerName, char[] password)\n   {\n      // Store new credentials\n      // Clear all current encryption keys that were generated from the current passphrase.\n      mBus.clearKeyStore();\n   }\n};\nconfigService.setSetPasswordHandler(setPasswordHandler);  Advertise to allow connections  mBus.advertiseName(mBus.getUniqueName());  Send the Announcement  aboutService.announce();  Unregister and delete ConfigService and BusAttachment  When your process is done with the ConfigService and no\nlonger wishes to send announcements, unregister the process\nfrom the AllJoyn bus and then delete variables used.  if( configService != null ) {\n   configService.stopServer();\n}\nif( aboutService != null ) {\n   aboutService.stopServer();\n}\nif( mBus != null) {\n   mBus.disconnect();\n   mBus.release();\n   mBus = null;\n}",
            "title": "Implementing an Application that Uses Config Server"
        },
        {
            "location": "/develop/api-guide/config/java/#implementing-an-application-that-uses-config-client",
            "text": "To implement an application to receive and modify ConfigData,\nuse the ConfigClient class. The AboutClient class must be used\nso that your application is notified when applications with\nAbout Server and possibly Config Server instances can send announcements.  Verify the BusAttachment has been created, started and connected\nbefore implementing a Config Client. See the  About API Guide \nfor the code snippets. Code in this chapter references a\nvariable  mBus  (the BusAttachment variable name).  Establish the AboutService object  For an application to discover peer applications that\nare ConfigService providers, it requires an instance of\nthe AboutService class running in Client mode. AboutServiceImpl\nis an implementation wrapper around AllJoyn native calls that\nhandle the interactions with the About Server. The following\nis an aggregation of the content in  Create the AboutService object  through  Set up ability to receive the\nAnnounce signal  of the  About API Guide .  AboutService aboutService = AboutServiceImpl.getInstance();\naboutService.startClient(mBus);\nMyAnnouncementHandler announceHandler = new MyAnnouncementHandler();\naboutService.addAnnouncementHandler(announceHandler, new String[]\n   {  org.alljoyn.Config  });  Create the ConfigService object  For an application to receive and modify ConfigData, it requires an\ninstance of the ConfigService class. ConfigServiceImpl is an implementation\nwrapper around AllJoyn native calls that handle the interactions with the\nConfig Server.  ConfigService configService = ConfigServiceImpl.getInstance();  Start Client mode  configService.startConfigClient(mBus);  Engage with a peer ConfigService  Perform the following tasks to engage with a peer ConfigService\nwhose Announcement was received.  Create ConfigClient  Generate an instance of ConfigClient to receive and send\nConfigData to and from a peer Config Server whose Announcement\nwas received in the  onAnnouncement()  implementation of your\nMyAnnouncementHandler instance. The following is an example\nimplementation of the call shown in  Implement AnnounceHandler class  of the  About API Guide .  private void engageWithPeer(Short port, String peerName, BusObjectDescription[]\ninterfaces, Map String, Object  announceMap) {\n   MyAvailabilityListener availabilityListener = new\nMyAvailabilityListener();\n   ConfigClient configClient = configService.createFeatureConfigClient\n(peerName, availabilityListener, port);  Request the ConfigData  The updateable ConfigData is requested through the ConfigClient\nvia the GetConfigurations() method call. The structure that is\nreturned can be iterated through to determine the contents.\nThe content definition is found in the  Configuration Interface Definition .  Map  String, Variant  configMap =\nconfigClient.GetConfigurations((String)announceMap.get( DefaultLanguage ));  Update the ConfigData  The received data can be updated through the ConfigClient via the UpdateConfigurations()  method call. The structure that was\nreturned by  GetConfigurations()  can be iterated through to\ndetermine the contents. The content definition is found in the Configuration Interface Definition .  configMap.put( DefaultLanaguge , new Variant( fr ,  s );\nconfigClient.UpdateConfigurations((String)announceMap.get( DefaultLanguage ), configMap);  Reset the ConfigData  The ConfigData can be reset to default through the ConfigClient\nvia the  ResetConfigurations()  method call. The structure\nthat was returned by  GetConfigurations()  can be iterated\nthrough to determine the list of reset fields. The content\ndefinition is found in the  Configuration Interface Definition .  String [] fieldsToReset = new String [] {  DeviceName  };\nconfigClient.ResetConfigurations((String)announceMap.get( DefaultLanguage ), fieldsToReset);  Reset the peer device application to factory defaults  The peer device/application configuration can be reset to\nfactory defaults through the ConfigClient via the  FactoryReset()  method call.  NOTE:  This is a no-reply call, so its success cannot be determined directly.  configClient.FactoryReset();  Restart the peer  The peer application can be restarted though the ConfigClient\nvia the  Restart()  method call.  NOTE:  This is a no-reply call, so its success cannot be determined directly.  configClient.Restart();  Setting a passcode on the peer  The peer application can be set to have a different passcode\nthrough the ConfigClient via the  SetPasscode()  method call.\nThis revokes the current encryption keys and regenerates new\nones based on the new shared secret, namely the passcode.  NOTE:  The realm name is currently ignored.  byte [] passcode = new byte [] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 };\nconfigClient.SetPasscode( , passcode);\n// Revoke current encryption key that was based on the previous passcode. StringValue peerGuid = new StringValue();\nStatus status = m_Bus.getPeerGUID(m_currentPeer.deviceName, peerGuid);\nif(status.equals(Status.OK)){\n   mBus.clearKeys(peerGuid.value);\n}  Delete variables and unregister listeners  Once you are done using the About feature, Configuration service\nframework, and the AllJoyn framework, free the variables used\nin the application.  if(configClient != null) {\n   configClient.disconnect();\n}\nif(configService != null) {\n   configService.stopClient();\n}\nif(aboutService != null) {\n   aboutService.unregisterAnnounceListener(announceListener);\n   aboutService.stopClient();\n}\nif(mBus != null) {\n   mBus.disconnect();\n   mBus.release();\n   mBus = null;\n}",
            "title": "Implementing an Application that Uses Config Client"
        },
        {
            "location": "/develop/api-guide/config/objc/",
            "text": "Configuration API Guide - Objective-C\n\n\nReference code\n\n\nClasses used to remotely change ConfigData\n\n\n\n\n\n\n\n\nClient class\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nConfigClient\n\n\nHelper class for discovering About Server that provides access to the Announcements and to the AboutService. It listens for Announcements sent using the org.alljoyn.About interface.\n\n\n\n\n\n\n\n\nObtain the Configuration service framework\n\n\nSee the \nBuilding iOS/OS X section\n for \ninstructions on compiling the Configuration service framework.\n\n\nBuild an application that uses ConfigClient\n\n\nThe following steps provide the high-level process to build an\napplication that will remotely manipulate ConfigData.\n\n\n\n\nCreate the base for the AllJoyn\n application.\n\n\nInitialize the AboutService in client mode.\n\n\nInitialize the ConfigService in client mode.\n\n\nCreate a ConfigClient to interact with an announced Config Server.\n\n\n\n\nSetting up the AllJoyn framework and About feature\n\n\nThe steps required for this service framework are universal\nto all applications that use the AllJoyn framework and for any\napplication using one or more AllJoyn service frameworks.\nPrior to use of the Configuration service framework as a\nConfig Client, the About feature must be implemented and\nthe AllJoyn framework set up.\n\n\nComplete the procedures in the \nBuilding iOS/OS X section\n\nto guide you in this process.\n\n\nImplementing an Application that uses Config Client\n\n\nTo implement an application to receive and modify ConfigData,\nuse the ConfigClient class. The AboutClient class must be used\nso that your application is notified when applications with\nAbout Server and possibly Config Server instances send announcements.\n\n\nVerify the BusAttachment has been created, started and\nconnected before implementing a Config Client.\n\n\nNOTE:\n  Code in this chapter references a variable\n\nclientBusAttachment\n (the BusAttachment variable name).\n\n\nEstablish the AboutService object\n\n\nFor an application to discover peer applications that are\nConfigService providers, it requires an instance of AJNAnnouncementReceiver.\n\n\nself.announcementReceiver = [[AJNAnnouncementReceiver alloc]\ninitWithAnnouncementListener:self andBus:self.clientBusAttachment];\nconst char* interfaces[] = { \norg.alljoyn.Config\n };\n[self.announcementReceiver\nregisterAnnouncementReceiverForInterfaces:interfaces\n   withNumberOfInterfaces:1];\n\n\n\n\nCreate the ConfigService object\n\n\nFor an application to receive and modify ConfigData, it requires\nan instance of the ConfigService class. AJCFGConfigService is\nan implementation wrapper around AllJoyn native calls that\nhandle the interactions with the Config Server.\n\n\nself.configService = [[AJCFGConfigService alloc]initWithBus:self.\n   busAttachment propertyStore:self.propertyStore listener:self.configServiceListenerImpl];\n\n\n\n\nStart Client mode\n\n\n[[AJCFGConfigClient alloc] initWithBus:self.clientBusAttachment];\n\n\n\n\nEngage with a peer ConfigService\n\n\nPerform the following tasks to engage with a peer ConfigService\nwhose Announcement was received.\n\n\nCreate ConfigClient\n\n\nGenerate an instance of ConfigClient to receive and send\nConfigData to and from a peer Config Server.\n\n\nself.configClient = [[AJCFGConfigClient alloc]\ninitWithBus:self.clientBusAttachment];\n\n\n\n\nRequest the ConfigData\n\n\nThe updateable ConfigData is requested through the ConfigClient\nvia the  configurationsWithBus:languageTag:configs:sessionId\nmethod call. The structure that is returned can be iterated through\nto determine the contents. The content definition is found in\nthe \nConfiguration Interface Definition\n.\n\n\nNSMutableDictionary *configDict = [[NSMutableDictionary alloc] init];\nself.configClient configurationsWithBus:self.annBusName languageTag:@\n\nconfigs:\nconfigDict sessionId:self.sessionId];\n\n\n\n\nUpdate the ConfigData\n\n\nThe received data can be updated through the ConfigClient\nvia the UpdateConfigurations() method call. The structure\nthat was returned by GetConfigurations() can be iterated\nthrough to determine the contents. The content definition\nis found in the \nConfiguration Interface Definition\n.\n\n\nNSMutableDictionary *configElements = [[NSMutableDictionary alloc] init];\nNSString *key = [self.writableElements allKeys][textField.tag];\nAJNMessageArgument *msgArgValue = [[AJNMessageArgument alloc] init];\nconst char *char_str_value = [QASConvertUtil\nconvertNSStringToConstChar:textField.text];\n[msgArgValue setValue:@\ns\n, char_str_value];\nconfigElements[key] = msgArgValue;\nself.configClient updateConfigurationsWithBus:self.annBusName\n   languageTag:@\n configs:\nconfigElements sessionId:self.sessionId];\n\n\n\n\nReset the ConfigData\n\n\nThe ConfigData can be reset to default through the ConfigClient\nvia the ResetConfigurations() method call. The structure that\nwas returned by GetConfigurations() can be iterated through to\ndetermine the list of reset fields. The content definition is\nfound in the \nConfiguration Interface Definition\n.\n\n\nNSMutableArray *names = [[NSMutableArray alloc]\ninitWithArray:@[@\nDeviceName\n]];\n[self.configClient resetConfigurationsWithBus:self.annBusName languageTag:@\n\nconfigNames:names];\n\n\n\n\nReset the peer device application to factory defaults\n\n\nThe peer device/application configuration can be reset to\nfactory defaults through the ConfigClient via the\n\nFactoryReset()\n method call.\n\n\nNOTE:\n This is a no-reply call, so its success cannot be determined directly.\n\n\n[self.configClient factoryResetWithBus:self.annBusName\n   sessionId:self.sessionId];\n\n\n\n\nRestart the peer\n\n\nThe peer application can be restarted though the ConfigClient\nvia the Restart() method call.\n\n\nNOTE:\n  This is a no-reply call, so its success cannot be\ndetermined directly.\n\n\n[self.configClient factoryResetWithBus:self.annBusName\n   sessionId:self.sessionId];\n\n\n\n\nSetting a passcode on the peer\n\n\nThe peer application can be set to have a different passcode\nthough the ConfigClient using the SetPasscode() method call.\nThis revokes the current encryption keys and regenerates new\nones based on the new shared secret, namely the passcode.\n\n\nNOTE:\n The realm name is currently ignored.\n\n\nNSString *pass = @\n123456\n;\nNSData *passcodeData = [pass dataUsingEncoding:NSUTF8StringEncoding];\nconst void *bytes = [passcodeData bytes];\nint length = [passcodeData length];\n[self.configClient setPasscodeWithBus:self.annBusName\n   daemonRealm:self.realmBusName newPasscodeSize:length\n   newPasscode:(const uint8_t\n*)bytes sessionId:self.sessionId];\n\n\n\n\nDelete variables and unregister listeners\n\n\nOnce you are done using the About feature, Configuration\nservice framework, and the AllJoyn framework, free the\nvariables used in the application.\n\n\nThe ARC takes care of releasing some objects so no need to\ndo it explicitly.\n\n\nconst char* interfaces[] = { \norg.alljoyn.Config\n };\n   [self.announcementReceiver unRegisterAnnouncementReceiverForInterfaces:interfaces withNumberOfInterfaces:1];\nself.announcementReceiver = nil;",
            "title": "Objc"
        },
        {
            "location": "/develop/api-guide/config/objc/#configuration-api-guide-objective-c",
            "text": "",
            "title": "Configuration API Guide - Objective-C"
        },
        {
            "location": "/develop/api-guide/config/objc/#reference-code",
            "text": "Classes used to remotely change ConfigData     Client class  Description      ConfigClient  Helper class for discovering About Server that provides access to the Announcements and to the AboutService. It listens for Announcements sent using the org.alljoyn.About interface.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/config/objc/#obtain-the-configuration-service-framework",
            "text": "See the  Building iOS/OS X section  for \ninstructions on compiling the Configuration service framework.",
            "title": "Obtain the Configuration service framework"
        },
        {
            "location": "/develop/api-guide/config/objc/#build-an-application-that-uses-configclient",
            "text": "The following steps provide the high-level process to build an\napplication that will remotely manipulate ConfigData.   Create the base for the AllJoyn  application.  Initialize the AboutService in client mode.  Initialize the ConfigService in client mode.  Create a ConfigClient to interact with an announced Config Server.",
            "title": "Build an application that uses ConfigClient"
        },
        {
            "location": "/develop/api-guide/config/objc/#setting-up-the-alljoyn-framework-and-about-feature",
            "text": "The steps required for this service framework are universal\nto all applications that use the AllJoyn framework and for any\napplication using one or more AllJoyn service frameworks.\nPrior to use of the Configuration service framework as a\nConfig Client, the About feature must be implemented and\nthe AllJoyn framework set up.  Complete the procedures in the  Building iOS/OS X section \nto guide you in this process.",
            "title": "Setting up the AllJoyn framework and About feature"
        },
        {
            "location": "/develop/api-guide/config/objc/#implementing-an-application-that-uses-config-client",
            "text": "To implement an application to receive and modify ConfigData,\nuse the ConfigClient class. The AboutClient class must be used\nso that your application is notified when applications with\nAbout Server and possibly Config Server instances send announcements.  Verify the BusAttachment has been created, started and\nconnected before implementing a Config Client.  NOTE:   Code in this chapter references a variable clientBusAttachment  (the BusAttachment variable name).  Establish the AboutService object  For an application to discover peer applications that are\nConfigService providers, it requires an instance of AJNAnnouncementReceiver.  self.announcementReceiver = [[AJNAnnouncementReceiver alloc]\ninitWithAnnouncementListener:self andBus:self.clientBusAttachment];\nconst char* interfaces[] = {  org.alljoyn.Config  };\n[self.announcementReceiver\nregisterAnnouncementReceiverForInterfaces:interfaces\n   withNumberOfInterfaces:1];  Create the ConfigService object  For an application to receive and modify ConfigData, it requires\nan instance of the ConfigService class. AJCFGConfigService is\nan implementation wrapper around AllJoyn native calls that\nhandle the interactions with the Config Server.  self.configService = [[AJCFGConfigService alloc]initWithBus:self.\n   busAttachment propertyStore:self.propertyStore listener:self.configServiceListenerImpl];  Start Client mode  [[AJCFGConfigClient alloc] initWithBus:self.clientBusAttachment];  Engage with a peer ConfigService  Perform the following tasks to engage with a peer ConfigService\nwhose Announcement was received.  Create ConfigClient  Generate an instance of ConfigClient to receive and send\nConfigData to and from a peer Config Server.  self.configClient = [[AJCFGConfigClient alloc]\ninitWithBus:self.clientBusAttachment];  Request the ConfigData  The updateable ConfigData is requested through the ConfigClient\nvia the  configurationsWithBus:languageTag:configs:sessionId\nmethod call. The structure that is returned can be iterated through\nto determine the contents. The content definition is found in\nthe  Configuration Interface Definition .  NSMutableDictionary *configDict = [[NSMutableDictionary alloc] init];\nself.configClient configurationsWithBus:self.annBusName languageTag:@ \nconfigs: configDict sessionId:self.sessionId];  Update the ConfigData  The received data can be updated through the ConfigClient\nvia the UpdateConfigurations() method call. The structure\nthat was returned by GetConfigurations() can be iterated\nthrough to determine the contents. The content definition\nis found in the  Configuration Interface Definition .  NSMutableDictionary *configElements = [[NSMutableDictionary alloc] init];\nNSString *key = [self.writableElements allKeys][textField.tag];\nAJNMessageArgument *msgArgValue = [[AJNMessageArgument alloc] init];\nconst char *char_str_value = [QASConvertUtil\nconvertNSStringToConstChar:textField.text];\n[msgArgValue setValue:@ s , char_str_value];\nconfigElements[key] = msgArgValue;\nself.configClient updateConfigurationsWithBus:self.annBusName\n   languageTag:@  configs: configElements sessionId:self.sessionId];  Reset the ConfigData  The ConfigData can be reset to default through the ConfigClient\nvia the ResetConfigurations() method call. The structure that\nwas returned by GetConfigurations() can be iterated through to\ndetermine the list of reset fields. The content definition is\nfound in the  Configuration Interface Definition .  NSMutableArray *names = [[NSMutableArray alloc]\ninitWithArray:@[@ DeviceName ]];\n[self.configClient resetConfigurationsWithBus:self.annBusName languageTag:@ \nconfigNames:names];  Reset the peer device application to factory defaults  The peer device/application configuration can be reset to\nfactory defaults through the ConfigClient via the FactoryReset()  method call.  NOTE:  This is a no-reply call, so its success cannot be determined directly.  [self.configClient factoryResetWithBus:self.annBusName\n   sessionId:self.sessionId];  Restart the peer  The peer application can be restarted though the ConfigClient\nvia the Restart() method call.  NOTE:   This is a no-reply call, so its success cannot be\ndetermined directly.  [self.configClient factoryResetWithBus:self.annBusName\n   sessionId:self.sessionId];  Setting a passcode on the peer  The peer application can be set to have a different passcode\nthough the ConfigClient using the SetPasscode() method call.\nThis revokes the current encryption keys and regenerates new\nones based on the new shared secret, namely the passcode.  NOTE:  The realm name is currently ignored.  NSString *pass = @ 123456 ;\nNSData *passcodeData = [pass dataUsingEncoding:NSUTF8StringEncoding];\nconst void *bytes = [passcodeData bytes];\nint length = [passcodeData length];\n[self.configClient setPasscodeWithBus:self.annBusName\n   daemonRealm:self.realmBusName newPasscodeSize:length\n   newPasscode:(const uint8_t\n*)bytes sessionId:self.sessionId];  Delete variables and unregister listeners  Once you are done using the About feature, Configuration\nservice framework, and the AllJoyn framework, free the\nvariables used in the application.  The ARC takes care of releasing some objects so no need to\ndo it explicitly.  const char* interfaces[] = {  org.alljoyn.Config  };\n   [self.announcementReceiver unRegisterAnnouncementReceiverForInterfaces:interfaces withNumberOfInterfaces:1];\nself.announcementReceiver = nil;",
            "title": "Implementing an Application that uses Config Client"
        },
        {
            "location": "/develop/api-guide/controlpanel/c-thin/",
            "text": "Control Panel API Guide - C (Thin Core)\n\n\nObtain the Control Panel service framework\n\n\nThe source code for this service framework can be found on\nthe \nAllSeen Alliance gerrit page\n as a git project.\nIn addition, the \najtcl\n project is\nneeded to compile this service framework.\n\n\nIf the target platform already supports the AllJoyn\n\nThin Library framework, follow the target platform documentation\nfor detailed setup and download instructions.\n\n\nIf the target platform does not support the AllJoyn Thin Library\nframework, porting work is required to support this target.\nSee the \nIntroduction to AllJoyn Thin Library\n for more\ninformation about the AllJoyn Thin Library framework.\n\n\nReference code\n\n\nThe reference code consists of several components each including\none or more modules. Additionally, included in the sample component\nis a sample application that implements the Control Panel service\nframework and contains a simple control panel with one example for\neach kind of Widget.\n\n\n\n\n\n\n\n\nComponents\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nControl Panel Service\n\n\nThis includes three parts: Widgets, Common, and Main, each with their own modules which together make up the service and allow for interaction between Controllees and Controllers.\n\n\n\n\n\n\nControl Panel Provided\n\n\nCode specific to the Controllee that will handle requests from Controllers to set property values, get property values, and/or execute actions. Additionally it can initiate a refresh on the Controller by calling the Control Panel service framework's appropriate functions. This is device-specific code created by the OEM.\n\n\n\n\n\n\nControl Panel Generator\n\n\nA Generator tool that accepts an XML UI definition file, containing the Widgets and their properties that describe the specific Controllee's control panel and generate code into a Control Panel Generated code.\n\n\n\n\n\n\nControl Panel Generated\n\n\nCode generated using the Control Panel Generator. This code ties together the Control Panel Service and the Control Panel Provided code.\n\n\n\n\n\n\nControl Panel Sample\n\n\nA template for an application. This component is responsible for the general flow of the Controllee application including initialization, shutdown, and passing on incoming message to the ControlPanelService module.\n\n\n\n\n\n\n\n\nControl Panel Service component\n\n\nWidget modules\n\n\n\n\n\n\n\n\nModule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nContainerWidget\n\n\nContainer UI element. Allows grouping of widgets together. Must contain at least one child element.\n\n\n\n\n\n\nLabelWidget\n\n\nUI element that functions as a read only label of text.\n\n\n\n\n\n\nActionWidget\n\n\nUI element represented by a button that either executes code on the Controllee, or opens a Dialog Widget as a confirmation before executing.\n\n\n\n\n\n\nDialogWidget\n\n\nUI dialog element. Has a dialog message and up to 3 choices of buttons.\n\n\n\n\n\n\nPropertyWidget\n\n\nUI element used to display a value and possibly edit it.\n\n\n\n\n\n\n\n\nCommon modules\n\n\n\n\n\n\n\n\nModule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBaseWidget\n\n\nBase module used by all the Widget modules.\n\n\n\n\n\n\nConstraintList\n\n\nModule used when defining a constraint list for a property value.\n\n\n\n\n\n\nConstraintRange\n\n\nModule used when defining a constraint range for a property value.\n\n\n\n\n\n\nControlMarshalUtil\n\n\nUtility functions used to marshal control panel properties.\n\n\n\n\n\n\nDateTimeUtil\n\n\nModule that enables properties that have a Date or Time value.\n\n\n\n\n\n\nHttpControl\n\n\nModule that allows publicizing of a URL to function as a control panel for the Controllee.\n\n\n\n\n\n\n\n\nGeneral modules\n\n\n\n\n\n\n\n\nModule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nControlPanelInterface\n\n\nThe definitions of all ControlPanel Service interfaces.\n\n\n\n\n\n\nControlPanelService\n\n\nHandler of all interactions between Controllers and Controllees. The application delegates incoming messages to this module for processing and handling. The actual handling is specific to the generated code.\n\n\n\n\n\n\n\n\nControl Panel Provided component\n\n\nThis component contains the code specific to the device that\nthe Controllee application runs on. The Control Panel Generated\ncode will interact with this component to do the following:\n\n\n\n\nSet property values\n\n\nGet property values\n\n\nExecute actions\n\n\n\n\nAdditionally, it can initiate a refresh on the Controller by\ncalling the Control Panel service framework's appropriate functions.\nThe modules in this component are provided by a third party.\n\n\nFor example, think of a washing machine. The Control Panel\nProvided component would be the code that communicates with\nthe hardware to perform actions such as setting the water\ntemperature or starting the wash cycle.\n\n\nControl Panel Generator component\n\n\nControl Panel Generator modules\n\n\n\n\n\n\n\n\nModule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPreGenFiles\n\n\nFiles used as a template for the ultimately generated files.\n\n\n\n\n\n\nCp.xsd and cpvalidate\n\n\nAs part of the generation the XML undergoes two validation steps.\nValidate against an XSD to verify all tags and their content are correctly defined.\nValidate to verify that all the required fields needed to display the widgets in the XML graphically are properly defined.\n\n\n\n\n\n\nSampleXMLS\n\n\nCollection of XML files that can be viewed as samples.\n\n\n\n\n\n\nGeneratorScript\n\n\nPython scripts that generate the code. For steps on how to generate the code, see \nStart the Controllee\n.\n\n\n\n\n\n\n\n\nControl Panel Generated component\n\n\nControl Panel Generated modules\n\n\n\n\n\n\n\n\nModule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nControlPanelGenerated\n\n\nThe Generated files, created by the generator using the given XML.\n\n\n\n\n\n\n\n\nControl Panel Sample component\n\n\nControl Panel Sample modules\n\n\n\n\n\n\n\n\nModule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nControlPanelSample\n\n\nThe module responsible for the generalflow of the Controllee application including initialization and shutdown of the ControlPanelService module, and related business logic when the application's message loop is idling.\n\n\n\n\n\n\nControlPanelProvided\n\n\nThe module responsible for the business logic of the actions and changes made to the generated code. It uses the generated model interfaces and implements its callbacks.\n\n\n\n\n\n\n\n\nBuild a Controllee\n\n\nThe following steps provide the high-level process to build a Controllee.\n\n\n\n\nCreate the base for the AllJoyn application. See the\n\nBuild an Application using the Thin Library\n\nsection for instructions.\n\n\nCreate the code handlers necessary to control the device.\nThis includes getters and setters for properties and functions\nto handle execution of actions.\n\n\nCreate the XML definition of the UI. Include calls to the\ncode handlers in the appropriate places.\n\n\nUse the code generation tool provided in the SDK to generate\ncode from XML.\n\n\n\n\nImplementing a Controllee\n\n\nCreate the base for the AllJoyn application\n\n\nSee the \nBuild an Application using the Thin Library\n\nsection for instructions.\n\n\nCreate header file that declares device-specific callbacks\n\n\nCallback signature for GetCode of property\n\n\nvoid* getTemperature(PropertyWidget* thisWidget) - Returns address of the property of the\nprovided widget casted to a void*\n\n\n\n\nCallback for SetCode property\n\n\nThis signature is not determined by the Control Panel service\nframework and can be chosen based on the specific applications\nneed. The assumption is that one of the parameters will be the\nnew value the property should be set to.\n\n\nFor example:\n\n\nvoid SetTemperature(uint16 newTemperature);\n\n\n\n\nCallback for code execution of action\n\n\nThis signature is not determined by the service and can be\nchosen based on the specific application's need.\n\n\nFor example:\n\n\nvoid StartOven();\n\n\n\n\nCreate XML definition of UI\n\n\ncontrolPanelDevice xmlns=\nhttp://www.allseenalliance.org/controlpanel/gen\n\n   \nname\nMyDevice\n/name\n\n   \nheaderCode\n#include \nControlPanelProvided.h\n/headerCode\n\n   \nlanguageSet name=\nmyLanguages\n\n      \nlanguage\nen\n/language\n\n      \nlanguage\nde\n/language\n\n      \nlanguage\nfr\n/language\n\n   \n/languageSet\n\n   \ncontrolPanels\n\n      \ncontrolPanel languageSet=\nmyLanguages\n\n         \nrootContainer\n\n         //rootContainer properties and child elements go here.\n         \n/rootContainer\n\n      \n/controlPanel\n\n   \n/controlPanels\n\n\n/controlPanelDevice\n\n\n\n\n\nNaming conventions\n\n\nThe name of the unit (detailed in Add include statement(s)\nfor header file that contains device specific callbacks) and\nthe name of each individual Widget contained within a control\npanel must adhere to the following naming conventions (this\nis due to the fact that the unit name and widget name are used\nas part of the AllJoyn BusObject object paths that the Control\nPanel service framework utilizes).\n\n\n\n\nMust contain only the ASCII characters \"[A-Z][a-z][0-9]_\"\n\n\nCannot be an empty string\n\n\n\n\nSee \nXML UI Element Descriptions\n for\nsamples of names that follow these conventions.\n\n\nCreate a controlPanelDevice tag with the XML schema\n\n\ncontrolPanelDevice xmlns=\nhttp://www.allseenalliance.org/controlpanel/gen\n\n\n/controlPanelDevice\n\n\n\n\n\nDefine the name of the unit in the name tag\n\n\nDefine the name of the unit between the controlPanelDevice tags.\n\n\nname\nMyDevice\n/name\n\n\n\n\n\nAdd include statement(s) for header file that contains\n\n\ndevice specific callbacks\n\n\nAdd the include statements after the name tag. More than one\nheader file can be added. See \nCreate header file that declares\ndevice-specific callbacks\n for more information.\n\n\nheaderCode\n#include \nControlPanelProvided.h\n/headerCode\n\n\n\n\n\nDefine the language set for the control panel\n\n\nAdd this after the headerCode tag. This must include a list of\nlanguages that the control panel can display labels and\nmessages in. More than one language set can be defined.\n\n\nNOTE: For the sake of completeness and integrity of the device's\noverall user experience, it is recommended to have the textToSend\narray match the SupportedLanguages list published by the About\nfeature and provisioned for the PropertyStore in the application.\n\n\nlanguageSet name=\nmyLanguages\n\n   \nlanguage\nen\n/language\n\n   \nlanguage\nde\n/language\n\n   \nlanguage\nfr\n/language\n\n\n/languageSet\n\n\n\n\n\nSet up the control panel structure\n\n\nAdd this after the languageSets tag. Each control panel needs\nto define the preferred language set. More than one control\npanel can be defined.\n\n\ncontrolPanels\n\n   \ncontrolPanel languageSet=\nmyLanguages\n\n   \n/controlPanel\n\n   \ncontrolPanel languageSet=\nmySecondLanguageSet\n\n   \n/controlPanel\n\n\n/controlPanels\n\n\n\n\n\nDefine a root container and its child elements\n\n\nAdd the root container within the controlPanel tags. The\nrootContainer is the main ContainerWidget used to group together\nall the widgets that make up the control panel. For more information\non Container Widgets and possible child widgets, see \nWidget modules\n\nand \nXML UI Element Descriptions\n.\n\n\nrootContainer\n\n   //rootContainer properties and child elements go here.\n\n/rootContainer\n\n\n\n\n\nRun the Code Generator tool\n\n\nIn the CPSAppGenerator directory, run the generator command\nto produce the Control Panel Generated Code from the XML.\n\n\npython generateCPSApp.py [nameOfXML] [DirectoryOfApplication]\n\n\n\n\nThis Python script generates the following c and h files in\nthe application directory:\n\n\n\n\nControlPanelGenerated.c\n\n\nControlPanelGenerated.h\n\n\n\n\nThese files will be used to build the Controllee application.\n\n\nStart the Controllee\n\n\nThe Controllee is required to be passed the provisioning by\nthe application via a call to\n\nAJCPS_Start()\n.\n\n\nAn example is in \nControlee_Init()\n of ControlPanelSample.c.\nBoth the bus object list and the callbacks are implemented\nin the ControlPanelGenerated.c and are linked to the business\nlogic in ControlPanelProvided.c.\n\n\n/**\n* Message processor for the ControlPanel generated model.\n*/\nAJSVC_ServiceStatus GeneratedMessageProcessor(AJ_BusAttachment* bus,\n   AJ_Message* msg, AJ_Status* msgStatus) {...}\n/**\n* Returns the corresponding widget object attributes for the given identifier.\n*/\nvoid* IdentifyMsgOrPropId(uint32_t identifier, uint16_t* widgetType,\n   uint16_t* propType, uint16_t* language) {...}\n/**\n* Returns the corresponding property for the given identifier.\n*/\nvoid* IdentifyMsgOrPropIdForSignal(uint32_t identifier, uint8_t*\nisProperty) {...}\n/**\n* Returns the whether the given identifier is of the root object.\n*/\nuint8_t IdentifyRootMsgOrPropId(uint32_t identifier) {...}\n\n/**\n* The list of bus objects to be registered by the ControlPanel SF.\n*/\nAJ_Object controlleeObjectList[] = { AJCPS_CONTROLLEE_GENERATED_OBJECTS\n   { NULL }\n};\n\nAJ_Status Controlee_Init()\n{\n   AJ_Status status = AJCPS_Start(controlleeObjectList,\n\nGeneratedMessageProcessor,\n   \nIdentifyMsgOrPropId, \nIdentifyMsgOrPropIdForSignal,\n   \nIdentifyRootMsgOrPropId); WidgetsInit();\n   return status;\n}\n\n\n\n\nCompile the code\n\n\nThe process to compile varies depending on the host and target\nplatform. Each host and platform needs may require a specific\ndirectory and file layout, build tool chains, procedures,\nand supported AllJoyn service frameworks. Refer to the target\nplatform documentation that contains instructions on how to\norganize and set up the build process to incorporate the\nnecessary files to compile your Thin Library application.\n\n\nFor more details on how to combine this AllJoyn service\nframework with other AllJoyn service framework software,\nsee the \nBuild an Application using the Thin Library\n section.\n\n\nXML UI Element Descriptions\n\n\nThis section provides XML UI element samples for each Control\nPanel interface. See the \nControl Panel Interface Definition\n\nfor a full description of each interface.\n\n\nContainer\n\n\nSample XML for Container\n\n\ncontainer\n\n   \nname\nrootContainer\n/name\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nbgcolor\n0x200\n/bgcolor\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nMy Label of my container\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nContainer Etikett\n/value\n\n   \n/label\n\n   \nhints\n\n      \nhint\nvertical_linear\n/hint\n\n   \n/hints\n\n   \nelements\n\n      //Child elements (Action/Property/Label/Container, etc.) defined here\n   \n/elements\n\n\ncontainer\n\n\n\n\n\nContainer properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Container will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the container will be visible or not.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nLabel of the Container.\nIf code, a function pointer to receive the label.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nhints\n\n\nvertical_linear\nhorizontal_linear\n\n\nno\n\n\nContainer layout hint.\n\n\n\n\n\n\nelements\n\n\nAction\nProperty\nLabelProperty\nContainer\n\n\nyes\n\n\nChild widgets. Can be one or more within a Container.\n\n\n\n\n\n\n\n\nActions\n\n\nSample XML for Action\n\n\nThe onAction tag includes the execute code and dialog options.\nBoth options cannot be included in the same tag.\n\n\naction\n\n   \nname\novenAction\n/name\n\n   \nonAction\n\n      \nexecuteCode\nstartOven();\n/executeCode\n\n         OR\n      \ndialog\n\n      //dialog properties here\n      \n/dialog\n\n   \n/onAction\n\n   \nsecured\ntrue\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nStart Oven\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nOfen started\n/value\n\n   \n/label\n\n   \nbgcolor\n0x400\n/bgcolor\n\n   \nhints\n\n      \nhint\nactionButton\n/hint\n\n   \n/hints\n\n\n/action\n\n\n\n\n\nAction properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\nonAction\n\n\nexecuteCode\ndialog\n\n\nyes\n\n\nDetermines what happens when the actionButton is pressed.\nIf executeCode, that code will be executed.\nIf dialog, a dialog will be displayed.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Action will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Action will be visible or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nIf code, a function pointer to receive the label.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\nAction hint\n\n\nno\n\n\nCan be actionButton.\n\n\n\n\n\n\n\n\nlabelProperty\n\n\nSample XML for labelProperty\n\n\nlabelProperty\n\n   \nname\nCurrentTemp\n/name\n\n   \nenabled\ntrue\n/enabled\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nCurrent Temperature:\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nAktuelle Temperatur:\n/value\n\n   \n/label\n\n   \nbgcolor\n0x98765\n/bgcolor\n\n   \nhints\n\n      \nhint\ntextlabel\n/hint\n\n   \n/hints\n\n\n/labelProperty\n\n\n\n\n\nlabelProperty properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Label will be visible or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nIf code, a function pointer to receive the label.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\nLabel hint\n\n\nno\n\n\nCan be textLabel.\n\n\n\n\n\n\n\n\nProperty\n\n\nDepending on the signature of the value, there are different\nways to construct a property in the XML. Samples and property\ninformation for each supported signature are provided here.\n\n\n\n\nString\n\n\nBoolean\n\n\nDate\n\n\nTime\n\n\nScalar\n\n\n\n\nSample XML for stringProperty\n\n\nstringProperty\n\n   \nname\nmodeStringProperty\n/name\n\n   \ngetCode\ngetStringVar\n/getCode\n\n   \nsetCode\nsetStringVar(%s)\n/setCode\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nwritable\ntrue\n/writable\n\n   \nlabel\n\n      \nvalue type=\nconstant\n language=\nen\nHEATING_MODE_EN\n/value\n\n      \nvalue type=\nconstant\n language=\nde\nHEATING_MODE_DE\n/value\n\n   \n/label\n\n   \nbgcolor\n0x500\n/bgcolor\n\n   \nhints\n\n      \nhint\nedittext\n/hint\n\n   \n/hints\n\n   \nconstraintVals\n\n      \nconstraint\n\n      \ndisplay\n\n         \nvalue type=\nliteral\n language=\nen\nGrill Mode\n/value\n\n         \nvalue type=\nliteral\n language=\nde \nGrill Modus\n/value\n\n      \n/display\n\n         \nvalue\nGrill\n/value\n\n   \n/constraint\n\n   \nconstraint\n\n      \ndisplay\n\n         \nvalue type=\nliteral\n language=\nen\nRegular Mode\n/value\n\n         \nvalue type=\nliteral\n language=\nde\nNormal Modus\n/value\n\n      \n/display\n\n      \nvalue\nNormal\n/value\n\n      \n/constraint\n\n   \n/constraintVals\n\n\n/stringProperty\n\n\n\n\n\nstringProperty properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\nProperty\n\n\nFunction pointer\n\n\nyes\n\n\nPointer to function that returns a property's value. The signature of the function pointer needs to be \nvoid* (*functionptr)()\n.\n\n\n\n\n\n\nsetcode\n\n\nCode to execute on setProperty\n\n\nyes\n\n\nCode to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Property will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be visible or not.\n\n\n\n\n\n\nwritable\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be writable or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nText of the Property's label.\nIf code, a function pointer to receive the text.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\nswitch\nspinner\nradiobutton\ntextview\nedittext\n\n\nno\n\n\nLabel hint.\n\n\n\n\n\n\nconstraintVals\n\n\nList of constraints\n\n\nno\n\n\nConstraint Property to a list of values. Each Constraint is made up of a value and its display.\n\n\n\n\n\n\n\n\nSample XML for Boolean property\n\n\nbooleanProperty\n\n   \nname\ncheckboxProperty\n/name\n\n   \ngetCode\ngetTurboModeVar\n/getCode\n\n   \nsetCode\nsetTurboModeVar(%s)\n/setCode\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nwritable\ntrue\n/writable\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nTurbo Mode:\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nTurbo Modus:\n/value\n\n   \n/label\n\n   \nbgcolor\n0x500\n/bgcolor\n\n   \nhints\n\n      \nhint\ncheckbox\n/hint\n\n   \n/hints\n\n\n/booleanProperty\n\n\n\n\n\nbooleanProperty properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\ngetCode\n\n\nFunction pointer\n\n\nyes\n\n\nPointer to function that returns a property's value. The signature of the function pointer needs to be \nvoid* (*functionptr)()\n.\n\n\n\n\n\n\nsetcode\n\n\nCode to execute on setProperty\n\n\nyes\n\n\nCode to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Property will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be visible or not.\n\n\n\n\n\n\nwritable\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be writable or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nText of the Property's label.\nIf code, a function pointer to receive the text.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\ncheckbox\n\n\nno\n\n\nHint for how the UI should be rendered.\n\n\n\n\n\n\n\n\nSample XML for Date property\n\n\ndateProperty\n\n   \nname\nstartDateProperty\n/name\n\n   \ngetCode\ngetStartDateVar\n/getCode\n\n   \nsetCode\nsetStartDateVar(%s)\n/setCode\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nwritable\ntrue\n/writable\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nStart Date:\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nStarttermin:\n/value\n\n   \n/label\n\n   \nbgcolor\n0x500\n/bgcolor\n\n   \nhints\n\n      \nhint\ndatepicker\n/hint\n\n   \n/hints\n\n\n/dateProperty\n\n\n\n\n\ndateProperty properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\ngetCode\n\n\nFunction pointer\n\n\nyes\n\n\nPointer to function that returns a property's value. The signature of the function pointer needs to be \nvoid* (*functionptr)()\n.\n\n\n\n\n\n\nsetcode\n\n\nCode to execute on setProperty\n\n\nyes\n\n\nCode to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Property will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be visible or not.\n\n\n\n\n\n\nwritable\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be writable or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nText of the Property's label.\nIf code, a function pointer to receive the text.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\ndatepicker\n\n\nno\n\n\nHint for how the UI should be rendered.\n\n\n\n\n\n\n\n\nSample XML for Time property\n\n\ntimeProperty\n\n   \nname\nstartTimeProperty\n/name\n\n   \ngetCode\ngetStartTimeVar\n/getCode\n\n   \nsetCode\nsetStartTimeVar(%s)\n/setCode\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nwritable\ntrue\n/writable\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nStart Time:\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nStartzeit:\n/value\n\n   \n/label\n\n   \nbgcolor\n0x500\n/bgcolor\n\n   \nhints\n\n      \nhint\ntimepicker\n/hint\n\n   \n/hints\n\n\n/timeProperty\n\n\n\n\n\ntimeProperty properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\ngetCode\n\n\nFunction pointer\n\n\nyes\n\n\nPointer to function that returns a property's value. The signature of the function pointer needs to be \nvoid* (*functionptr)()\n.\n\n\n\n\n\n\nsetcode\n\n\nCode to execute on setProperty\n\n\nyes\n\n\nCode to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Property will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be visible or not.\n\n\n\n\n\n\nwritable\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be writable or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nText of the Property's label.\nIf code, a function pointer to receive the label.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\ntimepicker\n\n\nno\n\n\nHint for how the UI should be rendered.\n\n\n\n\n\n\n\n\nSample XML for Scalar property\n\n\nThe constraintDefs tag includes the value and range example.\nBoth cannot be included in the same tag.\n\n\nscalarProperty dataType=\nUINT16\n\n   \nname\nheatProperty\n/name\n\n   \ngetCode\ngetTemperatureVar\n/getCode\n\n   \nsetCode\nsetTemperatureVar(%s)\n/setCode\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nwritable\ntrue\n/writable\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nOven Temperature\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nOfentemperatur\n/value\n\n   \n/label\n\n   \nbgcolor\n0x500\n/bgcolor\n\n   \nhints\n\n      \nhint\nspinner\n/hint\n\n   \n/hints\n\n   \nconstraintDefs\n\n      \nconstraintVals\n\n         \nconstraint\n\n            \ndisplay\n\n               \nvalue type=\nliteral\n language=\nen\nRegular\n/value\n\n               \nvalue type=\nliteral\n language=\nde\nNormal\n/value\n\n            \n/display\n\n            \nvalue\n175\n/value\n\n         \n/constraint\n\n         \nconstraint\n\n            \ndisplay\n\n               \nvalue type=\nliteral\n language=\nen\nHot\n/value\n\n               \nvalue type=\nliteral\n language=\nde\nHeiss\n/value\n\n            \n/display\n\n            \nvalue\n200\n/value\n\n         \n/constraint\n\n      \n/constraintVals\n\n   OR\n      \nconstraintRange\n\n         \nmin\n0\n/min\n\n         \nmax\n400\n/max\n\n         \nincrement\n25\n/increment \n\n      \n/constraintRange\n\n   \n/constraintDefs\n\n   \nunitMeasure\n\n      \nvalue type=\nliteral\n language=\nen\nDegrees\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nGrad\n/value\n\n   \n/unitMeasure\n\n\n/scalarProperty\n\n\n\n\n\nscalarProperty properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndataType\n\n\nINT16\nUINT16\nINT32\nUINT32\nINT64\nDOUBLE\n\n\nyes\n\n\nScalar data types\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\ngetCode\n\n\nFunction pointer\n\n\nyes\n\n\nPointer to function that returns a property's value. The signature of the function pointer needs to be \nvoid* (*functionptr)()\n.\n\n\n\n\n\n\nsetcode\n\n\nCode to execute on setProperty\n\n\nyes\n\n\nCode to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Property will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be visible or not.\n\n\n\n\n\n\nwritable\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be writable or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nText of the Property's label.\nIf code, a function pointer to receive the text.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\ntimepicker\nradiobutton\nslider\nnumberpicker\nkeypad\nnumericview\n\n\nno\n\n\nHint for how the UI should be rendered.\n\n\n\n\n\n\nconstraintDefs\n\n\nconstraintList\nconstraintRange\n\n\nno\n\n\nIf constraintList, each constraint is made up of a value and its display.\nIf constraintRange, each constraint is made up of a min, max and increment value.\n\n\n\n\n\n\nunitMeasure\n\n\ncode\nvalue\n\n\nno\n\n\nUnit of measure for the Property.\nIf code, a function pointer to receive the unit measure text.\ncode\nvalue\nIf value, can be a literal or a constant.\n\n\n\n\n\n\n\n\nDialog\n\n\nSample XML for a Dialog\n\n\ndialog\n\n   \nname\nLightConfirm\n/name\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nmessage\n\n      \nvalue type=\nliteral\n language=\nen\nDo you want to turn on the light\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nWollen sie das Licht andrehen\n/value\n\n   \n/message\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nTurn on Light\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nLicht andrehen\n/value\n\n   \n/label\n\n   \nbgcolor\n0x122\n/bgcolor\n\n   \nhints\n\n      \nhint\nalertdialog\n/hint\n\n   \n/hints\n\n   \nbutton\n\n      \nlabel\n\n         \nvalue type=\nliteral\n language=\nen\nYes\n/value\n\n         \nvalue type=\nliteral\n language=\nde\nJa\n/value\n\n      \n/label\n\n\n      \nexecuteCode\nTurnOnLight(true);\n/executeCode\n\n   \n/button\n\n   \nbutton\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nNo\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nNein\n/value\n\n   \n/label\n\n\n      \nexecuteCode\nTurnOnLight(false);\n/executeCode\n\n   \n/button\n\n\n/dialog\n\n\n\n\n\nDialog properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Dialog will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Dialog will be visible or not.\n\n\n\n\n\n\nmessage\n\n\ncode\nvalue\n\n\nno\n\n\nMessage of the Dialog.\nIf code, a function pointer to receive the text.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nText of the Dialog's label.\nIf code, a function pointer to receive the text.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\nalertdialog\n\n\nno\n\n\nHint for how the UI should be rendered.\n\n\n\n\n\n\nbutton\n\n\nLabel and executeCode\n\n\nYes - can have up to 3\n\n\nEach button must contain the following:\nA Label tag that contains the text that appears on the button.\nAn executeCode tag which contains the code to be executed on the Controllee when the button is pressed.",
            "title": "C thin"
        },
        {
            "location": "/develop/api-guide/controlpanel/c-thin/#control-panel-api-guide-c-thin-core",
            "text": "",
            "title": "Control Panel API Guide - C (Thin Core)"
        },
        {
            "location": "/develop/api-guide/controlpanel/c-thin/#obtain-the-control-panel-service-framework",
            "text": "The source code for this service framework can be found on\nthe  AllSeen Alliance gerrit page  as a git project.\nIn addition, the  ajtcl  project is\nneeded to compile this service framework.  If the target platform already supports the AllJoyn \nThin Library framework, follow the target platform documentation\nfor detailed setup and download instructions.  If the target platform does not support the AllJoyn Thin Library\nframework, porting work is required to support this target.\nSee the  Introduction to AllJoyn Thin Library  for more\ninformation about the AllJoyn Thin Library framework.",
            "title": "Obtain the Control Panel service framework"
        },
        {
            "location": "/develop/api-guide/controlpanel/c-thin/#reference-code",
            "text": "The reference code consists of several components each including\none or more modules. Additionally, included in the sample component\nis a sample application that implements the Control Panel service\nframework and contains a simple control panel with one example for\neach kind of Widget.     Components  Description      Control Panel Service  This includes three parts: Widgets, Common, and Main, each with their own modules which together make up the service and allow for interaction between Controllees and Controllers.    Control Panel Provided  Code specific to the Controllee that will handle requests from Controllers to set property values, get property values, and/or execute actions. Additionally it can initiate a refresh on the Controller by calling the Control Panel service framework's appropriate functions. This is device-specific code created by the OEM.    Control Panel Generator  A Generator tool that accepts an XML UI definition file, containing the Widgets and their properties that describe the specific Controllee's control panel and generate code into a Control Panel Generated code.    Control Panel Generated  Code generated using the Control Panel Generator. This code ties together the Control Panel Service and the Control Panel Provided code.    Control Panel Sample  A template for an application. This component is responsible for the general flow of the Controllee application including initialization, shutdown, and passing on incoming message to the ControlPanelService module.     Control Panel Service component  Widget modules     Module  Description      ContainerWidget  Container UI element. Allows grouping of widgets together. Must contain at least one child element.    LabelWidget  UI element that functions as a read only label of text.    ActionWidget  UI element represented by a button that either executes code on the Controllee, or opens a Dialog Widget as a confirmation before executing.    DialogWidget  UI dialog element. Has a dialog message and up to 3 choices of buttons.    PropertyWidget  UI element used to display a value and possibly edit it.     Common modules     Module  Description      BaseWidget  Base module used by all the Widget modules.    ConstraintList  Module used when defining a constraint list for a property value.    ConstraintRange  Module used when defining a constraint range for a property value.    ControlMarshalUtil  Utility functions used to marshal control panel properties.    DateTimeUtil  Module that enables properties that have a Date or Time value.    HttpControl  Module that allows publicizing of a URL to function as a control panel for the Controllee.     General modules     Module  Description      ControlPanelInterface  The definitions of all ControlPanel Service interfaces.    ControlPanelService  Handler of all interactions between Controllers and Controllees. The application delegates incoming messages to this module for processing and handling. The actual handling is specific to the generated code.     Control Panel Provided component  This component contains the code specific to the device that\nthe Controllee application runs on. The Control Panel Generated\ncode will interact with this component to do the following:   Set property values  Get property values  Execute actions   Additionally, it can initiate a refresh on the Controller by\ncalling the Control Panel service framework's appropriate functions.\nThe modules in this component are provided by a third party.  For example, think of a washing machine. The Control Panel\nProvided component would be the code that communicates with\nthe hardware to perform actions such as setting the water\ntemperature or starting the wash cycle.  Control Panel Generator component  Control Panel Generator modules     Module  Description      PreGenFiles  Files used as a template for the ultimately generated files.    Cp.xsd and cpvalidate  As part of the generation the XML undergoes two validation steps. Validate against an XSD to verify all tags and their content are correctly defined. Validate to verify that all the required fields needed to display the widgets in the XML graphically are properly defined.    SampleXMLS  Collection of XML files that can be viewed as samples.    GeneratorScript  Python scripts that generate the code. For steps on how to generate the code, see  Start the Controllee .     Control Panel Generated component  Control Panel Generated modules     Module  Description      ControlPanelGenerated  The Generated files, created by the generator using the given XML.     Control Panel Sample component  Control Panel Sample modules     Module  Description      ControlPanelSample  The module responsible for the generalflow of the Controllee application including initialization and shutdown of the ControlPanelService module, and related business logic when the application's message loop is idling.    ControlPanelProvided  The module responsible for the business logic of the actions and changes made to the generated code. It uses the generated model interfaces and implements its callbacks.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/controlpanel/c-thin/#build-a-controllee",
            "text": "The following steps provide the high-level process to build a Controllee.   Create the base for the AllJoyn application. See the Build an Application using the Thin Library \nsection for instructions.  Create the code handlers necessary to control the device.\nThis includes getters and setters for properties and functions\nto handle execution of actions.  Create the XML definition of the UI. Include calls to the\ncode handlers in the appropriate places.  Use the code generation tool provided in the SDK to generate\ncode from XML.",
            "title": "Build a Controllee"
        },
        {
            "location": "/develop/api-guide/controlpanel/c-thin/#implementing-a-controllee",
            "text": "Create the base for the AllJoyn application  See the  Build an Application using the Thin Library \nsection for instructions.  Create header file that declares device-specific callbacks  Callback signature for GetCode of property  void* getTemperature(PropertyWidget* thisWidget) - Returns address of the property of the\nprovided widget casted to a void*  Callback for SetCode property  This signature is not determined by the Control Panel service\nframework and can be chosen based on the specific applications\nneed. The assumption is that one of the parameters will be the\nnew value the property should be set to.  For example:  void SetTemperature(uint16 newTemperature);  Callback for code execution of action  This signature is not determined by the service and can be\nchosen based on the specific application's need.  For example:  void StartOven();  Create XML definition of UI  controlPanelDevice xmlns= http://www.allseenalliance.org/controlpanel/gen \n    name MyDevice /name \n    headerCode #include  ControlPanelProvided.h /headerCode \n    languageSet name= myLanguages \n       language en /language \n       language de /language \n       language fr /language \n    /languageSet \n    controlPanels \n       controlPanel languageSet= myLanguages \n          rootContainer \n         //rootContainer properties and child elements go here.\n          /rootContainer \n       /controlPanel \n    /controlPanels  /controlPanelDevice   Naming conventions  The name of the unit (detailed in Add include statement(s)\nfor header file that contains device specific callbacks) and\nthe name of each individual Widget contained within a control\npanel must adhere to the following naming conventions (this\nis due to the fact that the unit name and widget name are used\nas part of the AllJoyn BusObject object paths that the Control\nPanel service framework utilizes).   Must contain only the ASCII characters \"[A-Z][a-z][0-9]_\"  Cannot be an empty string   See  XML UI Element Descriptions  for\nsamples of names that follow these conventions.  Create a controlPanelDevice tag with the XML schema  controlPanelDevice xmlns= http://www.allseenalliance.org/controlpanel/gen  /controlPanelDevice   Define the name of the unit in the name tag  Define the name of the unit between the controlPanelDevice tags.  name MyDevice /name   Add include statement(s) for header file that contains  device specific callbacks  Add the include statements after the name tag. More than one\nheader file can be added. See  Create header file that declares\ndevice-specific callbacks  for more information.  headerCode #include  ControlPanelProvided.h /headerCode   Define the language set for the control panel  Add this after the headerCode tag. This must include a list of\nlanguages that the control panel can display labels and\nmessages in. More than one language set can be defined.  NOTE: For the sake of completeness and integrity of the device's\noverall user experience, it is recommended to have the textToSend\narray match the SupportedLanguages list published by the About\nfeature and provisioned for the PropertyStore in the application.  languageSet name= myLanguages \n    language en /language \n    language de /language \n    language fr /language  /languageSet   Set up the control panel structure  Add this after the languageSets tag. Each control panel needs\nto define the preferred language set. More than one control\npanel can be defined.  controlPanels \n    controlPanel languageSet= myLanguages \n    /controlPanel \n    controlPanel languageSet= mySecondLanguageSet \n    /controlPanel  /controlPanels   Define a root container and its child elements  Add the root container within the controlPanel tags. The\nrootContainer is the main ContainerWidget used to group together\nall the widgets that make up the control panel. For more information\non Container Widgets and possible child widgets, see  Widget modules \nand  XML UI Element Descriptions .  rootContainer \n   //rootContainer properties and child elements go here. /rootContainer   Run the Code Generator tool  In the CPSAppGenerator directory, run the generator command\nto produce the Control Panel Generated Code from the XML.  python generateCPSApp.py [nameOfXML] [DirectoryOfApplication]  This Python script generates the following c and h files in\nthe application directory:   ControlPanelGenerated.c  ControlPanelGenerated.h   These files will be used to build the Controllee application.  Start the Controllee  The Controllee is required to be passed the provisioning by\nthe application via a call to AJCPS_Start() .  An example is in  Controlee_Init()  of ControlPanelSample.c.\nBoth the bus object list and the callbacks are implemented\nin the ControlPanelGenerated.c and are linked to the business\nlogic in ControlPanelProvided.c.  /**\n* Message processor for the ControlPanel generated model.\n*/\nAJSVC_ServiceStatus GeneratedMessageProcessor(AJ_BusAttachment* bus,\n   AJ_Message* msg, AJ_Status* msgStatus) {...}\n/**\n* Returns the corresponding widget object attributes for the given identifier.\n*/\nvoid* IdentifyMsgOrPropId(uint32_t identifier, uint16_t* widgetType,\n   uint16_t* propType, uint16_t* language) {...}\n/**\n* Returns the corresponding property for the given identifier.\n*/\nvoid* IdentifyMsgOrPropIdForSignal(uint32_t identifier, uint8_t*\nisProperty) {...}\n/**\n* Returns the whether the given identifier is of the root object.\n*/\nuint8_t IdentifyRootMsgOrPropId(uint32_t identifier) {...}\n\n/**\n* The list of bus objects to be registered by the ControlPanel SF.\n*/\nAJ_Object controlleeObjectList[] = { AJCPS_CONTROLLEE_GENERATED_OBJECTS\n   { NULL }\n};\n\nAJ_Status Controlee_Init()\n{\n   AJ_Status status = AJCPS_Start(controlleeObjectList, GeneratedMessageProcessor,\n    IdentifyMsgOrPropId,  IdentifyMsgOrPropIdForSignal,\n    IdentifyRootMsgOrPropId); WidgetsInit();\n   return status;\n}  Compile the code  The process to compile varies depending on the host and target\nplatform. Each host and platform needs may require a specific\ndirectory and file layout, build tool chains, procedures,\nand supported AllJoyn service frameworks. Refer to the target\nplatform documentation that contains instructions on how to\norganize and set up the build process to incorporate the\nnecessary files to compile your Thin Library application.  For more details on how to combine this AllJoyn service\nframework with other AllJoyn service framework software,\nsee the  Build an Application using the Thin Library  section.",
            "title": "Implementing a Controllee"
        },
        {
            "location": "/develop/api-guide/controlpanel/c-thin/#xml-ui-element-descriptions",
            "text": "This section provides XML UI element samples for each Control\nPanel interface. See the  Control Panel Interface Definition \nfor a full description of each interface.  Container  Sample XML for Container  container \n    name rootContainer /name \n    secured false /secured \n    enabled true /enabled \n    bgcolor 0x200 /bgcolor \n    label \n       value type= literal  language= en My Label of my container /value \n       value type= literal  language= de Container Etikett /value \n    /label \n    hints \n       hint vertical_linear /hint \n    /hints \n    elements \n      //Child elements (Action/Property/Label/Container, etc.) defined here\n    /elements  container   Container properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    secured  true false  yes  Determines whether the interface of the Container will be secured or not.    enabled  true false  yes  Determines whether the container will be visible or not.    bgColor  unsigned int  no  Background color expressed as RGB value.    label  code value  no  Label of the Container. If code, a function pointer to receive the label. If value, can be a literal or a constant.    hints  vertical_linear horizontal_linear  no  Container layout hint.    elements  Action Property LabelProperty Container  yes  Child widgets. Can be one or more within a Container.     Actions  Sample XML for Action  The onAction tag includes the execute code and dialog options.\nBoth options cannot be included in the same tag.  action \n    name ovenAction /name \n    onAction \n       executeCode startOven(); /executeCode \n         OR\n       dialog \n      //dialog properties here\n       /dialog \n    /onAction \n    secured true /secured \n    enabled true /enabled \n    label \n       value type= literal  language= en Start Oven /value \n       value type= literal  language= de Ofen started /value \n    /label \n    bgcolor 0x400 /bgcolor \n    hints \n       hint actionButton /hint \n    /hints  /action   Action properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    onAction  executeCode dialog  yes  Determines what happens when the actionButton is pressed. If executeCode, that code will be executed. If dialog, a dialog will be displayed.    secured  true false  yes  Determines whether the interface of the Action will be secured or not.    enabled  true false  yes  Determines whether the Action will be visible or not.    label  code value  no  If code, a function pointer to receive the label. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  Action hint  no  Can be actionButton.     labelProperty  Sample XML for labelProperty  labelProperty \n    name CurrentTemp /name \n    enabled true /enabled \n    label \n       value type= literal  language= en Current Temperature: /value \n       value type= literal  language= de Aktuelle Temperatur: /value \n    /label \n    bgcolor 0x98765 /bgcolor \n    hints \n       hint textlabel /hint \n    /hints  /labelProperty   labelProperty properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    enabled  true false  yes  Determines whether the Label will be visible or not.    label  code value  no  If code, a function pointer to receive the label. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  Label hint  no  Can be textLabel.     Property  Depending on the signature of the value, there are different\nways to construct a property in the XML. Samples and property\ninformation for each supported signature are provided here.   String  Boolean  Date  Time  Scalar   Sample XML for stringProperty  stringProperty \n    name modeStringProperty /name \n    getCode getStringVar /getCode \n    setCode setStringVar(%s) /setCode \n    secured false /secured \n    enabled true /enabled \n    writable true /writable \n    label \n       value type= constant  language= en HEATING_MODE_EN /value \n       value type= constant  language= de HEATING_MODE_DE /value \n    /label \n    bgcolor 0x500 /bgcolor \n    hints \n       hint edittext /hint \n    /hints \n    constraintVals \n       constraint \n       display \n          value type= literal  language= en Grill Mode /value \n          value type= literal  language= de  Grill Modus /value \n       /display \n          value Grill /value \n    /constraint \n    constraint \n       display \n          value type= literal  language= en Regular Mode /value \n          value type= literal  language= de Normal Modus /value \n       /display \n       value Normal /value \n       /constraint \n    /constraintVals  /stringProperty   stringProperty properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    Property  Function pointer  yes  Pointer to function that returns a property's value. The signature of the function pointer needs to be  void* (*functionptr)() .    setcode  Code to execute on setProperty  yes  Code to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.    secured  true false  yes  Determines whether the interface of the Property will be secured or not.    enabled  true false  yes  Determines whether the Property will be visible or not.    writable  true false  yes  Determines whether the Property will be writable or not.    label  code value  no  Text of the Property's label. If code, a function pointer to receive the text. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  switch spinner radiobutton textview edittext  no  Label hint.    constraintVals  List of constraints  no  Constraint Property to a list of values. Each Constraint is made up of a value and its display.     Sample XML for Boolean property  booleanProperty \n    name checkboxProperty /name \n    getCode getTurboModeVar /getCode \n    setCode setTurboModeVar(%s) /setCode \n    secured false /secured \n    enabled true /enabled \n    writable true /writable \n    label \n       value type= literal  language= en Turbo Mode: /value \n       value type= literal  language= de Turbo Modus: /value \n    /label \n    bgcolor 0x500 /bgcolor \n    hints \n       hint checkbox /hint \n    /hints  /booleanProperty   booleanProperty properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    getCode  Function pointer  yes  Pointer to function that returns a property's value. The signature of the function pointer needs to be  void* (*functionptr)() .    setcode  Code to execute on setProperty  yes  Code to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.    secured  true false  yes  Determines whether the interface of the Property will be secured or not.    enabled  true false  yes  Determines whether the Property will be visible or not.    writable  true false  yes  Determines whether the Property will be writable or not.    label  code value  no  Text of the Property's label. If code, a function pointer to receive the text. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  checkbox  no  Hint for how the UI should be rendered.     Sample XML for Date property  dateProperty \n    name startDateProperty /name \n    getCode getStartDateVar /getCode \n    setCode setStartDateVar(%s) /setCode \n    secured false /secured \n    enabled true /enabled \n    writable true /writable \n    label \n       value type= literal  language= en Start Date: /value \n       value type= literal  language= de Starttermin: /value \n    /label \n    bgcolor 0x500 /bgcolor \n    hints \n       hint datepicker /hint \n    /hints  /dateProperty   dateProperty properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    getCode  Function pointer  yes  Pointer to function that returns a property's value. The signature of the function pointer needs to be  void* (*functionptr)() .    setcode  Code to execute on setProperty  yes  Code to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.    secured  true false  yes  Determines whether the interface of the Property will be secured or not.    enabled  true false  yes  Determines whether the Property will be visible or not.    writable  true false  yes  Determines whether the Property will be writable or not.    label  code value  no  Text of the Property's label. If code, a function pointer to receive the text. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  datepicker  no  Hint for how the UI should be rendered.     Sample XML for Time property  timeProperty \n    name startTimeProperty /name \n    getCode getStartTimeVar /getCode \n    setCode setStartTimeVar(%s) /setCode \n    secured false /secured \n    enabled true /enabled \n    writable true /writable \n    label \n       value type= literal  language= en Start Time: /value \n       value type= literal  language= de Startzeit: /value \n    /label \n    bgcolor 0x500 /bgcolor \n    hints \n       hint timepicker /hint \n    /hints  /timeProperty   timeProperty properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    getCode  Function pointer  yes  Pointer to function that returns a property's value. The signature of the function pointer needs to be  void* (*functionptr)() .    setcode  Code to execute on setProperty  yes  Code to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.    secured  true false  yes  Determines whether the interface of the Property will be secured or not.    enabled  true false  yes  Determines whether the Property will be visible or not.    writable  true false  yes  Determines whether the Property will be writable or not.    label  code value  no  Text of the Property's label. If code, a function pointer to receive the label. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  timepicker  no  Hint for how the UI should be rendered.     Sample XML for Scalar property  The constraintDefs tag includes the value and range example.\nBoth cannot be included in the same tag.  scalarProperty dataType= UINT16 \n    name heatProperty /name \n    getCode getTemperatureVar /getCode \n    setCode setTemperatureVar(%s) /setCode \n    secured false /secured \n    enabled true /enabled \n    writable true /writable \n    label \n       value type= literal  language= en Oven Temperature /value \n       value type= literal  language= de Ofentemperatur /value \n    /label \n    bgcolor 0x500 /bgcolor \n    hints \n       hint spinner /hint \n    /hints \n    constraintDefs \n       constraintVals \n          constraint \n             display \n                value type= literal  language= en Regular /value \n                value type= literal  language= de Normal /value \n             /display \n             value 175 /value \n          /constraint \n          constraint \n             display \n                value type= literal  language= en Hot /value \n                value type= literal  language= de Heiss /value \n             /display \n             value 200 /value \n          /constraint \n       /constraintVals \n   OR\n       constraintRange \n          min 0 /min \n          max 400 /max \n          increment 25 /increment  \n       /constraintRange \n    /constraintDefs \n    unitMeasure \n       value type= literal  language= en Degrees /value \n       value type= literal  language= de Grad /value \n    /unitMeasure  /scalarProperty   scalarProperty properties     Property  Possible values  Required  Description      dataType  INT16 UINT16 INT32 UINT32 INT64 DOUBLE  yes  Scalar data types    name  alphanumeric  yes  Name of widget.    getCode  Function pointer  yes  Pointer to function that returns a property's value. The signature of the function pointer needs to be  void* (*functionptr)() .    setcode  Code to execute on setProperty  yes  Code to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.    secured  true false  yes  Determines whether the interface of the Property will be secured or not.    enabled  true false  yes  Determines whether the Property will be visible or not.    writable  true false  yes  Determines whether the Property will be writable or not.    label  code value  no  Text of the Property's label. If code, a function pointer to receive the text. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  timepicker radiobutton slider numberpicker keypad numericview  no  Hint for how the UI should be rendered.    constraintDefs  constraintList constraintRange  no  If constraintList, each constraint is made up of a value and its display. If constraintRange, each constraint is made up of a min, max and increment value.    unitMeasure  code value  no  Unit of measure for the Property. If code, a function pointer to receive the unit measure text. code value If value, can be a literal or a constant.     Dialog  Sample XML for a Dialog  dialog \n    name LightConfirm /name \n    secured false /secured \n    enabled true /enabled \n    message \n       value type= literal  language= en Do you want to turn on the light /value \n       value type= literal  language= de Wollen sie das Licht andrehen /value \n    /message \n    label \n       value type= literal  language= en Turn on Light /value \n       value type= literal  language= de Licht andrehen /value \n    /label \n    bgcolor 0x122 /bgcolor \n    hints \n       hint alertdialog /hint \n    /hints \n    button \n       label \n          value type= literal  language= en Yes /value \n          value type= literal  language= de Ja /value \n       /label \n\n       executeCode TurnOnLight(true); /executeCode \n    /button \n    button \n    label \n       value type= literal  language= en No /value \n       value type= literal  language= de Nein /value \n    /label \n\n       executeCode TurnOnLight(false); /executeCode \n    /button  /dialog   Dialog properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    secured  true false  yes  Determines whether the interface of the Dialog will be secured or not.    enabled  true false  yes  Determines whether the Dialog will be visible or not.    message  code value  no  Message of the Dialog. If code, a function pointer to receive the text. If value, can be a literal or a constant.    label  code value  no  Text of the Dialog's label. If code, a function pointer to receive the text. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  alertdialog  no  Hint for how the UI should be rendered.    button  Label and executeCode  Yes - can have up to 3  Each button must contain the following: A Label tag that contains the text that appears on the button. An executeCode tag which contains the code to be executed on the Controllee when the button is pressed.",
            "title": "XML UI Element Descriptions"
        },
        {
            "location": "/develop/api-guide/controlpanel/cpp/",
            "text": "Control Panel API Guide - C++\n\n\nReference code\n\n\nSource code\n\n\nRepsitories used to build a Controllee\n\n\n\n\n\n\n\n\nPackage\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nalljoyn\n\n\nThe Standard Client AllJoyn\n framework code\n\n\n\n\n\n\nAboutService\n\n\nAbout feature code\n\n\n\n\n\n\nControlPanelService\n\n\nControl Panel service framework code\n\n\n\n\n\n\nServices Common\n\n\nCode that is common to the AllJoyn service frameworks\n\n\n\n\n\n\nSample Apps\n\n\nCode that is common to the AllJoyn service frameworks sample applications\n\n\n\n\n\n\n\n\nRepositories used to build a Controllee with a Notification Producer\n\n\n\n\n\n\n\n\nPackage\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nalljoyn\n\n\nThe Standard Client AllJoyn framework code\n\n\n\n\n\n\nAboutService\n\n\nAbout feature code\n\n\n\n\n\n\nControlPanelService\n\n\nControl Panel service framework code\n\n\n\n\n\n\nNotificationService\n\n\nNotification service framework code\n\n\n\n\n\n\nServices Common\n\n\nCode that is common to the AllJoyn service frameworks\n\n\n\n\n\n\nSample Apps\n\n\nCode that is common to the AllJoyn service frameworks sample applications\n\n\n\n\n\n\n\n\nReference C++ application code\n\n\n\n\n\n\n\n\nApplication\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nControlPanelBrowser\n\n\nBasic application that allows viewing of ControlPanels\n\n\n\n\n\n\n\n\nObtain the Control Panel service framework\n\n\nSee the \nBuilding Linux\n section for\ninstructions on compiling the ControlPanel service framework.\nThe Control Panel Service is made up of several components.\n\n\nControl Panel Service components\n\n\nComponents that allow for interaction between Controllees and\nControllers are defined below. This is the service layer and\ndoes not have any application-specific code.\n\n\nWidget modules\n\n\nThe following widget modules are contained in the Control\nPanel Service component used to create a ControlPanel.\n\n\n\n\n\n\n\n\nModule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nContainer\n\n\nContainer UI element. Allows grouping of widgets together. Must contain at least one child element.\n\n\n\n\n\n\nLabel\n\n\nUI element that functions as a read only label of text.\n\n\n\n\n\n\nAction\n\n\nUI element represented by a button that either executes code on the Controllee, or opens a Dialog Widget as a confirmation before executing.\n\n\n\n\n\n\nDialog\n\n\nUI dialog element. Has a dialog message and up to 3 choices of buttons.\n\n\n\n\n\n\nProperty\n\n\nUI element used to display a value and possibly edit it.\n\n\n\n\n\n\n\n\nControl Panel Provided component\n\n\nThis component contains the code specific to the device that\nthe Controllee application runs on. The Control Panel Generated\ncode will interact with this component to do the following:\n\n\n\n\nSet property values\n\n\nGet property values\n\n\nExecute actions.\n\n\n\n\nAdditionally, it can initiate a refresh on the Controller by\ncalling the Control Panel service framework's appropriate functions.\nThe modules in this component are provided by a third party.\n\n\nFor example, think of a washing machine. The Control Panel\nProvided component would be the code that communicates with\nthe hardware to perform actions such as setting the water\ntemperature or starting the wash cycle.\n\n\nControl Panel Generator component\n\n\nA Generator tool that accepts an XML UI definition file,\ncontaining the Widgets and their properties that describe the\nspecific Controllee's control panel and generate code into a\nControl Panel Generated code. For steps on how to generate the\ncode, see \nRun the Code Generator tool\n.\n\n\nControl Panel Sample component\n\n\nThis component is a template for an application, and responsible\nfor the general flow of the Controllee application including\ninitialization and shutdown. It relies on the generated and the provided code.\n\n\nBuild a Controllee\n\n\nThe following steps provide the high-level process to build a Controllee.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nImplement the ProperyStore and use this with the AboutService\nin server mode. See the \nAbout API Guide\n for instructions.\n\n\nCreate the code handlers necessary to control the device.\nThis includes getters and setters for properties and functions\nto handle execution of actions.\n\n\nCreate the XML definition of the UI. Include calls to the\ncode handlers in the appropriate places.\n\n\nUse the code generation tool provided in the SDK to generate\ncode from XML.\n\n\nInitialize the Control Panel Service and the Controllee.\nSend an announcement to broadcast the available controlpanels.\n\n\n\n\nImplementing a Controllee\n\n\nInitialize the AllJoyn framework\n\n\nSee the \nBuilding Linux\n section for\ninstructions to set up the AllJoyn framework.\n\n\nCreate bus attachment\n\n\nBusAttachment* bus = CommonSampleUtil::prepareBusAttachment();\n\n\n\n\nStart the AboutService in server mode\n\n\nThe Control Panel service framework depends on the About feature.\n\n\nFor more information about the About feature, see the\n\nAbout API Guide\n.\n\n\nCreate a PropertyStore and fill it with the needed values\n\n\npropertyStore = new AboutPropertyStoreImpl();; propertyStore-\nsetDeviceName(deviceName); propertyStore-\nsetAppId(appIdHex); propertyStore-\nsetAppName(appName); std::vector\nqcc::String\n languages(3); languages[0] = \nen\n;\nlanguages[1] = \nsp\n;\nlanguages[2] = \nfr\n;\npropertyStore-\nsetSupportedLangs(languages);\npropertyStore-\nsetDefaultLang(defaultLanguage);\n\n   DeviceNamesType::const_iterator iter = deviceNames.find(languages[0]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(iter-\nsecond.c_str(), languages[0]));\n   } else {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(\nMy device name\n, \nen\n));\n   }\n\n   iter = deviceNames.find(languages[1]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(iter-\nsecond.c_str(), languages[1]));\n   } else {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(\nMi nombre de dispositivo\n,\n\nsp\n));\n   }\n\n   iter = deviceNames.find(languages[2]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(iter-\nsecond.c_str(), languages[2]));\n   } else {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(\nMon nom de l'appareil\n, \nfr\n));\n\n   }\n\n\n\n\nImplement a BusListener and SessionPortListener\n\n\nIn order to bind a SessionPort and accept sessions, a new\nclass must be created that inherits from the AllJoyn BusListener\nand SessionPortListener classes.\n\n\nThe class must contain the following function:\n\n\nbool AcceptSessionJoiner(SessionPort sessionPort,\n   const char* joiner, const SessionOpts\n opts)\n\n\n\n\nThe AcceptSessionJoiner function will be called any time a\njoinsession request is received; the Listener class needs\nto dictate whether the joinsession request should be accepted\nor rejected by returning true or false, respectively.\nThese considerations are application-specific and can\ninclude any of the following:\n\n\n\n\nThe SessionPort the request was made on\n\n\nSpecific SessionOpts limitations\n\n\nThe number of sessions already joined.\n\n\n\n\nHere is an example of a full class declaration for the listener class.\n\n\nclass CommonBusListener : public ajn::BusListener,\n   public ajn::SessionPortListener\n{\n\n   public: CommonBusListener();\n      ~CommonBusListener();\n      bool AcceptSessionJoiner(ajn::SessionPort sessionPort,\n         const char* joiner, const ajn::SessionOpts\n opts);\n      void setSessionPort(ajn::SessionPort sessionPort);\n      ajn::SessionPort getSessionPort();\n   private:\n      ajn::SessionPort m_SessionPort;\n};\n\n\n\n\nInstantiate a BusListener and initialize the About feature\n\n\nbusListener = new CommonBusListener();\nAboutServiceApi::Init(*bus, *propertyStore);\nAboutServiceApi* aboutService = AboutServiceApi::getInstance();\n\nbusListener-\nsetSessionPort(port);\nbus-\nRegisterBusListener(*busListener);\nTransportMask transportMask = TRANSPORT_ANY;\nSessionPort sp = port;\nSessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false,\n   SessionOpts::PROXIMITY_ANY, transportMask);\nbus-\nBindSessionPort(sp, opts, *busListener);\naboutService-\nRegister(port);\nbus-\nRegisterBusObject(*aboutService);\n\n\n\n\nInitialize the Control Panel service and the Controllee\n\n\nControlPanelService* controlPanelService = ControlPanelService::getInstance();\nControlPanelControllee* controlPanelControllee = 0;\nControlPanelGenerated::PrepareWidgets(controlPanelControllee);\ncontrolPanelService-\ninitControllee(bus, controlPanelControllee);\n\n\n\n\nSend an Announcement\n\n\nAboutServiceApi* aboutService = AboutServiceApi::getInstance();\naboutService-\nAnnounce();\n\n\n\n\nCreate header file that declares device specific callbacks\n\n\nCallback signature for GetCode of property\n\n\nuint16_t getTemperature() - Returns the property value.\ndataType is specific to the applications needs\n\n\n\n\nCallback for SetCode property\n\n\nThis signature is not determined by the Control Panel service\nframework and can be chosen based on the specific application's\nneed. The assumption is that one of the parameters will be\nthe new value the property should be set to.\n\n\nFor example:\n\n\nvoid SetTemperature(uint16 newTemperature);\n\n\n\n\nCallback for code execution of action\n\n\nThis signature is not determined by the Control Panel service\nframework and can be chosen based on the specific application's need.\n\n\nFor example:\n\n\nvoid StartOven();\n\n\n\n\nCreate XML definition of UI\n\n\ncontrolPanelDevice xmlns=\nhttp://www.allseenalliance.org/controlpanel/gen\n\n   \nname\nMyDevice\n/name\n\n   \nheaderCode\n#include \nControlPanelProvided.h\n/headerCode\n\n   \nlanguageSet name=\nmyLanguages\n\n      \nlanguage\nen\n/language\n\n      \nlanguage\nde\n/language\n\n      \nlanguage\nfr\n/language\n\n   \n/languageSet\n\n   \ncontrolPanels\n\n      \ncontrolPanel languageSet=\nmyLanguages\n\n         \nrootContainer\n\n            //rootContainer properties and child elements go here.\n         \n/rootContainer\n\n      \n/controlPanel\n\n   \n/controlPanels\n\n\n/controlPanelDevice\n\n\n\n\n\nNaming conventions\n\n\nThe name of the unit (detailed in \nAdd include statements\nfor header file that contains device-specific callbacks\n)\nand the name of each individual Widget contained within a\ncontrol panel must adhere to the following naming conventions\n(this is due to the fact that the unit name and widget name\nare used as part of the AllJoyn BusObject object paths\nthat the Control Panel service framework utilizes).\n\n\n\n\nContain only the ASCII characters \"[A-Z][a-z][0-9]_\"\n\n\nCannot be an empty string\n\n\n\n\nSee \nXML UI Element Descriptions\n for\nsamples of names that follow these conventions.\n\n\nCreate a controlPanelDevice tag with the XML schema\n\n\ncontrolPanelDevice xmlns=\nhttp://www.allseenalliance.org/controlpanel/gen\n\n\n/controlPanelDevice\n\n\n\n\n\nDefine the name of unit in the name tag\n\n\nDefine the name of the unit between the controlPanelDevice tags.\n\n\nname\nMyDevice\n/name\n\n\n\n\n\nAdd include statements for header file that contains device-specific callbacks\n\n\nAdd the include statements after the name tag. More than one\nheader file can be added. See \nInitialize the Control Panel\nservice and the Controllee\n for more information.\n\n\nheaderCode\n#include \nControlPanelProvided.h\n/headerCode\n\n\n\n\n\nDefine the language set for the control panel\n\n\nAdd this after the headerCode tag. This must include a list of\nlanguages that the control panel can display labels and messages\nin. More than one language set can be defined.\n\n\nlanguageSet name=\nmyLanguages\n\n   \nlanguage\nen\n/language\n\n   \nlanguage\nde\n/language\n\n   \nlanguage\nfr\n/language\n\n\n/languageSet\n\n\n\n\n\nSet up the control panel structure\n\n\nAdd this after the languageSets tag. Each control panel must\ndefine the preferred language set. More than one control panel can be defined.\n\n\ncontrolPanels\n\n   \ncontrolPanel languageSet=\nmyLanguages\n\n   \n/controlPanel\n\n   \ncontrolPanel languageSet=\nmySecondLanguageSet\n\n   \n/controlPanel\n\n\n/controlPanels\n\n\n\n\n\nDefine a root container and its child elements\n\n\nAdd the root container within the controlPanel tags. The\nrootContainer is the main ContainerWidget used to group together\nall the widgets that make up the control panel. For more\ninformation on Container Widgets and possible child widgets,\nsee \nWidget modules\n and \nXML UI Element Descriptions\n.\n\n\nrootContainer\n\n//rootContainer properties and child elements go here.\n\n/rootContainer\n\n\n\n\n\nRun the Code Generator tool\n\n\nIn the CPSAppGenerator directory, run the generator command\nto produce the Control Panel Generated Code from the XML.\n\n\npython generateCPSApp.py \nXML file the generate code from\n\n   -p \ndestination path for generated files\n\n\n\n\n\nThis Python script generates the following c and h files in\nthe application directory:\n\n\n\n\nControlPanelGenerated.cc\n\n\nControlPanelGenerated.h\n\n\n\n\nIn addition, it generates a class for every property and action\ndefined in the XML.\n\n\nThese files will be used to build the Controllee application.\n\n\nCompile the code\n\n\nThe process to compile varies depending on the host and target\nplatform. Each host and platform needs may require a specific\ndirectory and file layout, build toolchains, procedures, and\nsupported AllJoyn service frameworks. Refer to the target\nplatform documentation that contains instructions on how\nto organize and set up the build process to incorporate\nthe necessary files to compile your application.\n\n\nXML UI Element Descriptions\n\n\nThis section provides XML UI element samples for each Control\nPanel interface. See the \nControl Panel Interface Definition\n\nfor a full description of each interface.\n\n\nContainer\n\n\nSample XML for Container\n\n\ncontainer\n\n   \nname\nrootContainer\n/name\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nbgcolor\n0x200\n/bgcolor\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nMy Label of my container\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nContainer Etikett\n/value\n\n   \n/label\n\n   \nhints\n\n      \nhint\nvertical_linear\n/hint\n\n   \n/hints\n\n   \nelements\n\n      //Child elements (Action/Property/Label/Container, etc.) defined here\n   \n/elements\n\n\ncontainer\n\n\n\n\n\nContainer properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Container will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the container will be visible or not.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nLabel of the Container.\nIf code, a function pointer to receive the label.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nhints\n\n\nvertical_linear\nhorizontal_linear\n\n\nno\n\n\nContainer layout hint.\n\n\n\n\n\n\nelements\n\n\nAction\nProperty\nLabelProperty\nContainer\n\n\nyes\n\n\nChild widgets. Can be one or more within a Container.\n\n\n\n\n\n\n\n\nActions\n\n\nSample XML for Action\n\n\nThe onAction tag includes the execute code and dialog options.\nBoth options cannot be included in the same tag.\n\n\naction\n\n   \nname\novenAction\n/name\n\n   \nonAction\n\n      \nexecuteCode\nstartOven();\n/executeCode\n\n         OR\n      \ndialog\n\n      //dialog properties here\n      \n/dialog\n\n   \n/onAction\n\n   \nsecured\ntrue\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nStart Oven\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nOfen started\n/value\n\n   \n/label\n\n   \nbgcolor\n0x400\n/bgcolor\n\n   \nhints\n\n      \nhint\nactionButton\n/hint\n\n   \n/hints\n\n\n/action\n\n\n\n\n\nAction properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\nonAction\n\n\nexecuteCode\ndialog\n\n\nyes\n\n\nDetermines what happens when the actionButton is pressed.\nIf executeCode, that code will be executed.\nIf dialog, a dialog will be displayed.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Action will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Action will be visible or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nIf code, a function pointer to receive the label.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\nAction hint\n\n\nno\n\n\nCan be actionButton.\n\n\n\n\n\n\n\n\nlabelProperty\n\n\nSample XML for labelProperty\n\n\nlabelProperty\n\n   \nname\nCurrentTemp\n/name\n\n   \nenabled\ntrue\n/enabled\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nCurrent Temperature:\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nAktuelle Temperatur:\n/value\n\n   \n/label\n\n   \nbgcolor\n0x98765\n/bgcolor\n\n   \nhints\n\n      \nhint\ntextlabel\n/hint\n\n   \n/hints\n\n\n/labelProperty\n\n\n\n\n\nlabelProperty properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Label will be visible or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nIf code, a function pointer to receive the label.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\nLabel hint\n\n\nno\n\n\nCan be textLabel.\n\n\n\n\n\n\n\n\nProperty\n\n\nDepending on the signature of the value, there are different\nways to construct a property in the XML. Samples and property\ninformation for each supported signature are provided here.\n\n\n\n\nString\n\n\nBoolean\n\n\nDate\n\n\nTime\n\n\nScalar\n\n\n\n\nSample XML for stringProperty\n\n\nstringProperty\n\n   \nname\nmodeStringProperty\n/name\n\n   \ngetCode\ngetStringVar\n/getCode\n\n   \nsetCode\nsetStringVar(%s)\n/setCode\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nwritable\ntrue\n/writable\n\n   \nlabel\n\n      \nvalue type=\nconstant\n language=\nen\nHEATING_MODE_EN\n/value\n\n      \nvalue type=\nconstant\n language=\nde\nHEATING_MODE_DE\n/value\n\n   \n/label\n\n   \nbgcolor\n0x500\n/bgcolor\n\n   \nhints\n\n      \nhint\nedittext\n/hint\n\n   \n/hints\n\n   \nconstraintVals\n\n      \nconstraint\n\n      \ndisplay\n\n         \nvalue type=\nliteral\n language=\nen\nGrill Mode\n/value\n\n         \nvalue type=\nliteral\n language=\nde \nGrill Modus\n/value\n\n      \n/display\n\n         \nvalue\nGrill\n/value\n\n   \n/constraint\n\n   \nconstraint\n\n      \ndisplay\n\n         \nvalue type=\nliteral\n language=\nen\nRegular Mode\n/value\n\n         \nvalue type=\nliteral\n language=\nde\nNormal Modus\n/value\n\n      \n/display\n\n      \nvalue\nNormal\n/value\n\n      \n/constraint\n\n   \n/constraintVals\n\n\n/stringProperty\n\n\n\n\n\nstringProperty properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\nProperty\n\n\nFunction pointer\n\n\nyes\n\n\nPointer to function that returns a property's value. The signature of the function pointer needs to be \nvoid* (*functionptr)()\n.\n\n\n\n\n\n\nsetcode\n\n\nCode to execute on setProperty\n\n\nyes\n\n\nCode to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Property will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be visible or not.\n\n\n\n\n\n\nwritable\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be writable or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nText of the Property's label.\nIf code, a function pointer to receive the text.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\nswitch\nspinner\nradiobutton\ntextview\nedittext\n\n\nno\n\n\nLabel hint.\n\n\n\n\n\n\nconstraintVals\n\n\nList of constraints\n\n\nno\n\n\nConstraint Property to a list of values. Each Constraint is made up of a value and its display.\n\n\n\n\n\n\n\n\nSample XML for Boolean property\n\n\nbooleanProperty\n\n   \nname\ncheckboxProperty\n/name\n\n   \ngetCode\ngetTurboModeVar\n/getCode\n\n   \nsetCode\nsetTurboModeVar(%s)\n/setCode\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nwritable\ntrue\n/writable\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nTurbo Mode:\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nTurbo Modus:\n/value\n\n   \n/label\n\n   \nbgcolor\n0x500\n/bgcolor\n\n   \nhints\n\n      \nhint\ncheckbox\n/hint\n\n   \n/hints\n\n\n/booleanProperty\n\n\n\n\n\nbooleanProperty properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\ngetCode\n\n\nFunction pointer\n\n\nyes\n\n\nPointer to function that returns a property's value. The signature of the function pointer needs to be \nvoid* (*functionptr)()\n.\n\n\n\n\n\n\nsetcode\n\n\nCode to execute on setProperty\n\n\nyes\n\n\nCode to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Property will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be visible or not.\n\n\n\n\n\n\nwritable\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be writable or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nText of the Property's label.\nIf code, a function pointer to receive the text.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\ncheckbox\n\n\nno\n\n\nHint for how the UI should be rendered.\n\n\n\n\n\n\n\n\nSample XML for Date property\n\n\ndateProperty\n\n   \nname\nstartDateProperty\n/name\n\n   \ngetCode\ngetStartDateVar\n/getCode\n\n   \nsetCode\nsetStartDateVar(%s)\n/setCode\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nwritable\ntrue\n/writable\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nStart Date:\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nStarttermin:\n/value\n\n   \n/label\n\n   \nbgcolor\n0x500\n/bgcolor\n\n   \nhints\n\n      \nhint\ndatepicker\n/hint\n\n   \n/hints\n\n\n/dateProperty\n\n\n\n\n\ndateProperty properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\ngetCode\n\n\nFunction pointer\n\n\nyes\n\n\nPointer to function that returns a property's value. The signature of the function pointer needs to be \nvoid* (*functionptr)()\n.\n\n\n\n\n\n\nsetcode\n\n\nCode to execute on setProperty\n\n\nyes\n\n\nCode to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Property will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be visible or not.\n\n\n\n\n\n\nwritable\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be writable or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nText of the Property's label.\nIf code, a function pointer to receive the text.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\ndatepicker\n\n\nno\n\n\nHint for how the UI should be rendered.\n\n\n\n\n\n\n\n\nSample XML for Time property\n\n\ntimeProperty\n\n   \nname\nstartTimeProperty\n/name\n\n   \ngetCode\ngetStartTimeVar\n/getCode\n\n   \nsetCode\nsetStartTimeVar(%s)\n/setCode\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nwritable\ntrue\n/writable\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nStart Time:\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nStartzeit:\n/value\n\n   \n/label\n\n   \nbgcolor\n0x500\n/bgcolor\n\n   \nhints\n\n      \nhint\ntimepicker\n/hint\n\n   \n/hints\n\n\n/timeProperty\n\n\n\n\n\ntimeProperty properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\ngetCode\n\n\nFunction pointer\n\n\nyes\n\n\nPointer to function that returns a property's value. The signature of the function pointer needs to be \nvoid* (*functionptr)()\n.\n\n\n\n\n\n\nsetcode\n\n\nCode to execute on setProperty\n\n\nyes\n\n\nCode to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Property will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be visible or not.\n\n\n\n\n\n\nwritable\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be writable or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nText of the Property's label.\nIf code, a function pointer to receive the label.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\ntimepicker\n\n\nno\n\n\nHint for how the UI should be rendered.\n\n\n\n\n\n\n\n\nSample XML for Scalar property\n\n\nThe constraintDefs tag includes the value and range example.\nBoth cannot be included in the same tag.\n\n\nscalarProperty dataType=\nUINT16\n\n   \nname\nheatProperty\n/name\n\n   \ngetCode\ngetTemperatureVar\n/getCode\n\n   \nsetCode\nsetTemperatureVar(%s)\n/setCode\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nwritable\ntrue\n/writable\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nOven Temperature\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nOfentemperatur\n/value\n\n   \n/label\n\n   \nbgcolor\n0x500\n/bgcolor\n\n   \nhints\n\n      \nhint\nspinner\n/hint\n\n   \n/hints\n\n   \nconstraintDefs\n\n      \nconstraintVals\n\n         \nconstraint\n\n            \ndisplay\n\n               \nvalue type=\nliteral\n language=\nen\nRegular\n/value\n\n               \nvalue type=\nliteral\n language=\nde\nNormal\n/value\n\n            \n/display\n\n            \nvalue\n175\n/value\n\n         \n/constraint\n\n         \nconstraint\n\n            \ndisplay\n\n               \nvalue type=\nliteral\n language=\nen\nHot\n/value\n\n               \nvalue type=\nliteral\n language=\nde\nHeiss\n/value\n\n            \n/display\n\n            \nvalue\n200\n/value\n\n         \n/constraint\n\n      \n/constraintVals\n\n   OR\n      \nconstraintRange\n\n         \nmin\n0\n/min\n\n         \nmax\n400\n/max\n\n         \nincrement\n25\n/increment \n\n      \n/constraintRange\n\n   \n/constraintDefs\n\n   \nunitMeasure\n\n      \nvalue type=\nliteral\n language=\nen\nDegrees\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nGrad\n/value\n\n   \n/unitMeasure\n\n\n/scalarProperty\n\n\n\n\n\nscalarProperty properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndataType\n\n\nINT16\nUINT16\nINT32\nUINT32\nINT64\nDOUBLE\n\n\nyes\n\n\nScalar data types\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\ngetCode\n\n\nFunction pointer\n\n\nyes\n\n\nPointer to function that returns a property's value. The signature of the function pointer needs to be \nvoid* (*functionptr)()\n.\n\n\n\n\n\n\nsetcode\n\n\nCode to execute on setProperty\n\n\nyes\n\n\nCode to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Property will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be visible or not.\n\n\n\n\n\n\nwritable\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Property will be writable or not.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nText of the Property's label.\nIf code, a function pointer to receive the text.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\ntimepicker\nradiobutton\nslider\nnumberpicker\nkeypad\nnumericview\n\n\nno\n\n\nHint for how the UI should be rendered.\n\n\n\n\n\n\nconstraintDefs\n\n\nconstraintList\nconstraintRange\n\n\nno\n\n\nIf constraintList, each constraint is made up of a value and its display.\nIf constraintRange, each constraint is made up of a min, max and increment value.\n\n\n\n\n\n\nunitMeasure\n\n\ncode\nvalue\n\n\nno\n\n\nUnit of measure for the Property.\nIf code, a function pointer to receive the unit measure text.\ncode\nvalue\nIf value, can be a literal or a constant.\n\n\n\n\n\n\n\n\nDialog\n\n\nSample XML for a Dialog\n\n\ndialog\n\n   \nname\nLightConfirm\n/name\n\n   \nsecured\nfalse\n/secured\n\n   \nenabled\ntrue\n/enabled\n\n   \nmessage\n\n      \nvalue type=\nliteral\n language=\nen\nDo you want to turn on the light\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nWollen sie das Licht andrehen\n/value\n\n   \n/message\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nTurn on Light\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nLicht andrehen\n/value\n\n   \n/label\n\n   \nbgcolor\n0x122\n/bgcolor\n\n   \nhints\n\n      \nhint\nalertdialog\n/hint\n\n   \n/hints\n\n   \nbutton\n\n      \nlabel\n\n         \nvalue type=\nliteral\n language=\nen\nYes\n/value\n\n         \nvalue type=\nliteral\n language=\nde\nJa\n/value\n\n      \n/label\n\n\n      \nexecuteCode\nTurnOnLight(true);\n/executeCode\n\n   \n/button\n\n   \nbutton\n\n   \nlabel\n\n      \nvalue type=\nliteral\n language=\nen\nNo\n/value\n\n      \nvalue type=\nliteral\n language=\nde\nNein\n/value\n\n   \n/label\n\n\n      \nexecuteCode\nTurnOnLight(false);\n/executeCode\n\n   \n/button\n\n\n/dialog\n\n\n\n\n\nDialog properties\n\n\n\n\n\n\n\n\nProperty\n\n\nPossible values\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nalphanumeric\n\n\nyes\n\n\nName of widget.\n\n\n\n\n\n\nsecured\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the interface of the Dialog will be secured or not.\n\n\n\n\n\n\nenabled\n\n\ntrue\nfalse\n\n\nyes\n\n\nDetermines whether the Dialog will be visible or not.\n\n\n\n\n\n\nmessage\n\n\ncode\nvalue\n\n\nno\n\n\nMessage of the Dialog.\nIf code, a function pointer to receive the text.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nlabel\n\n\ncode\nvalue\n\n\nno\n\n\nText of the Dialog's label.\nIf code, a function pointer to receive the text.\nIf value, can be a literal or a constant.\n\n\n\n\n\n\nbgColor\n\n\nunsigned int\n\n\nno\n\n\nBackground color expressed as RGB value.\n\n\n\n\n\n\nhints\n\n\nalertdialog\n\n\nno\n\n\nHint for how the UI should be rendered.\n\n\n\n\n\n\nbutton\n\n\nLabel and executeCode\n\n\nYes - can have up to 3\n\n\nEach button must contain the following:\nA Label tag that contains the text that appears on the button.\nAn executeCode tag which contains the code to be executed on the Controllee when the button is pressed.",
            "title": "Cpp"
        },
        {
            "location": "/develop/api-guide/controlpanel/cpp/#control-panel-api-guide-c",
            "text": "",
            "title": "Control Panel API Guide - C++"
        },
        {
            "location": "/develop/api-guide/controlpanel/cpp/#reference-code",
            "text": "Source code  Repsitories used to build a Controllee     Package  Description      alljoyn  The Standard Client AllJoyn  framework code    AboutService  About feature code    ControlPanelService  Control Panel service framework code    Services Common  Code that is common to the AllJoyn service frameworks    Sample Apps  Code that is common to the AllJoyn service frameworks sample applications     Repositories used to build a Controllee with a Notification Producer     Package  Description      alljoyn  The Standard Client AllJoyn framework code    AboutService  About feature code    ControlPanelService  Control Panel service framework code    NotificationService  Notification service framework code    Services Common  Code that is common to the AllJoyn service frameworks    Sample Apps  Code that is common to the AllJoyn service frameworks sample applications     Reference C++ application code     Application  Description      ControlPanelBrowser  Basic application that allows viewing of ControlPanels     Obtain the Control Panel service framework  See the  Building Linux  section for\ninstructions on compiling the ControlPanel service framework.\nThe Control Panel Service is made up of several components.  Control Panel Service components  Components that allow for interaction between Controllees and\nControllers are defined below. This is the service layer and\ndoes not have any application-specific code.  Widget modules  The following widget modules are contained in the Control\nPanel Service component used to create a ControlPanel.     Module  Description      Container  Container UI element. Allows grouping of widgets together. Must contain at least one child element.    Label  UI element that functions as a read only label of text.    Action  UI element represented by a button that either executes code on the Controllee, or opens a Dialog Widget as a confirmation before executing.    Dialog  UI dialog element. Has a dialog message and up to 3 choices of buttons.    Property  UI element used to display a value and possibly edit it.     Control Panel Provided component  This component contains the code specific to the device that\nthe Controllee application runs on. The Control Panel Generated\ncode will interact with this component to do the following:   Set property values  Get property values  Execute actions.   Additionally, it can initiate a refresh on the Controller by\ncalling the Control Panel service framework's appropriate functions.\nThe modules in this component are provided by a third party.  For example, think of a washing machine. The Control Panel\nProvided component would be the code that communicates with\nthe hardware to perform actions such as setting the water\ntemperature or starting the wash cycle.  Control Panel Generator component  A Generator tool that accepts an XML UI definition file,\ncontaining the Widgets and their properties that describe the\nspecific Controllee's control panel and generate code into a\nControl Panel Generated code. For steps on how to generate the\ncode, see  Run the Code Generator tool .  Control Panel Sample component  This component is a template for an application, and responsible\nfor the general flow of the Controllee application including\ninitialization and shutdown. It relies on the generated and the provided code.  Build a Controllee  The following steps provide the high-level process to build a Controllee.   Create the base for the AllJoyn application.  Implement the ProperyStore and use this with the AboutService\nin server mode. See the  About API Guide  for instructions.  Create the code handlers necessary to control the device.\nThis includes getters and setters for properties and functions\nto handle execution of actions.  Create the XML definition of the UI. Include calls to the\ncode handlers in the appropriate places.  Use the code generation tool provided in the SDK to generate\ncode from XML.  Initialize the Control Panel Service and the Controllee.\nSend an announcement to broadcast the available controlpanels.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/controlpanel/cpp/#implementing-a-controllee",
            "text": "Initialize the AllJoyn framework  See the  Building Linux  section for\ninstructions to set up the AllJoyn framework.  Create bus attachment  BusAttachment* bus = CommonSampleUtil::prepareBusAttachment();  Start the AboutService in server mode  The Control Panel service framework depends on the About feature.  For more information about the About feature, see the About API Guide .  Create a PropertyStore and fill it with the needed values  propertyStore = new AboutPropertyStoreImpl();; propertyStore- setDeviceName(deviceName); propertyStore- setAppId(appIdHex); propertyStore- setAppName(appName); std::vector qcc::String  languages(3); languages[0] =  en ;\nlanguages[1] =  sp ;\nlanguages[2] =  fr ;\npropertyStore- setSupportedLangs(languages);\npropertyStore- setDefaultLang(defaultLanguage);\n\n   DeviceNamesType::const_iterator iter = deviceNames.find(languages[0]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore- setDeviceName(iter- second.c_str(), languages[0]));\n   } else {\n      CHECK_RETURN(propertyStore- setDeviceName( My device name ,  en ));\n   }\n\n   iter = deviceNames.find(languages[1]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore- setDeviceName(iter- second.c_str(), languages[1]));\n   } else {\n      CHECK_RETURN(propertyStore- setDeviceName( Mi nombre de dispositivo , sp ));\n   }\n\n   iter = deviceNames.find(languages[2]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore- setDeviceName(iter- second.c_str(), languages[2]));\n   } else {\n      CHECK_RETURN(propertyStore- setDeviceName( Mon nom de l'appareil ,  fr ));\n\n   }  Implement a BusListener and SessionPortListener  In order to bind a SessionPort and accept sessions, a new\nclass must be created that inherits from the AllJoyn BusListener\nand SessionPortListener classes.  The class must contain the following function:  bool AcceptSessionJoiner(SessionPort sessionPort,\n   const char* joiner, const SessionOpts  opts)  The AcceptSessionJoiner function will be called any time a\njoinsession request is received; the Listener class needs\nto dictate whether the joinsession request should be accepted\nor rejected by returning true or false, respectively.\nThese considerations are application-specific and can\ninclude any of the following:   The SessionPort the request was made on  Specific SessionOpts limitations  The number of sessions already joined.   Here is an example of a full class declaration for the listener class.  class CommonBusListener : public ajn::BusListener,\n   public ajn::SessionPortListener\n{\n\n   public: CommonBusListener();\n      ~CommonBusListener();\n      bool AcceptSessionJoiner(ajn::SessionPort sessionPort,\n         const char* joiner, const ajn::SessionOpts  opts);\n      void setSessionPort(ajn::SessionPort sessionPort);\n      ajn::SessionPort getSessionPort();\n   private:\n      ajn::SessionPort m_SessionPort;\n};  Instantiate a BusListener and initialize the About feature  busListener = new CommonBusListener();\nAboutServiceApi::Init(*bus, *propertyStore);\nAboutServiceApi* aboutService = AboutServiceApi::getInstance();\n\nbusListener- setSessionPort(port);\nbus- RegisterBusListener(*busListener);\nTransportMask transportMask = TRANSPORT_ANY;\nSessionPort sp = port;\nSessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false,\n   SessionOpts::PROXIMITY_ANY, transportMask);\nbus- BindSessionPort(sp, opts, *busListener);\naboutService- Register(port);\nbus- RegisterBusObject(*aboutService);  Initialize the Control Panel service and the Controllee  ControlPanelService* controlPanelService = ControlPanelService::getInstance();\nControlPanelControllee* controlPanelControllee = 0;\nControlPanelGenerated::PrepareWidgets(controlPanelControllee);\ncontrolPanelService- initControllee(bus, controlPanelControllee);  Send an Announcement  AboutServiceApi* aboutService = AboutServiceApi::getInstance();\naboutService- Announce();  Create header file that declares device specific callbacks  Callback signature for GetCode of property  uint16_t getTemperature() - Returns the property value.\ndataType is specific to the applications needs  Callback for SetCode property  This signature is not determined by the Control Panel service\nframework and can be chosen based on the specific application's\nneed. The assumption is that one of the parameters will be\nthe new value the property should be set to.  For example:  void SetTemperature(uint16 newTemperature);  Callback for code execution of action  This signature is not determined by the Control Panel service\nframework and can be chosen based on the specific application's need.  For example:  void StartOven();  Create XML definition of UI  controlPanelDevice xmlns= http://www.allseenalliance.org/controlpanel/gen \n    name MyDevice /name \n    headerCode #include  ControlPanelProvided.h /headerCode \n    languageSet name= myLanguages \n       language en /language \n       language de /language \n       language fr /language \n    /languageSet \n    controlPanels \n       controlPanel languageSet= myLanguages \n          rootContainer \n            //rootContainer properties and child elements go here.\n          /rootContainer \n       /controlPanel \n    /controlPanels  /controlPanelDevice   Naming conventions  The name of the unit (detailed in  Add include statements\nfor header file that contains device-specific callbacks )\nand the name of each individual Widget contained within a\ncontrol panel must adhere to the following naming conventions\n(this is due to the fact that the unit name and widget name\nare used as part of the AllJoyn BusObject object paths\nthat the Control Panel service framework utilizes).   Contain only the ASCII characters \"[A-Z][a-z][0-9]_\"  Cannot be an empty string   See  XML UI Element Descriptions  for\nsamples of names that follow these conventions.  Create a controlPanelDevice tag with the XML schema  controlPanelDevice xmlns= http://www.allseenalliance.org/controlpanel/gen  /controlPanelDevice   Define the name of unit in the name tag  Define the name of the unit between the controlPanelDevice tags.  name MyDevice /name   Add include statements for header file that contains device-specific callbacks  Add the include statements after the name tag. More than one\nheader file can be added. See  Initialize the Control Panel\nservice and the Controllee  for more information.  headerCode #include  ControlPanelProvided.h /headerCode   Define the language set for the control panel  Add this after the headerCode tag. This must include a list of\nlanguages that the control panel can display labels and messages\nin. More than one language set can be defined.  languageSet name= myLanguages \n    language en /language \n    language de /language \n    language fr /language  /languageSet   Set up the control panel structure  Add this after the languageSets tag. Each control panel must\ndefine the preferred language set. More than one control panel can be defined.  controlPanels \n    controlPanel languageSet= myLanguages \n    /controlPanel \n    controlPanel languageSet= mySecondLanguageSet \n    /controlPanel  /controlPanels   Define a root container and its child elements  Add the root container within the controlPanel tags. The\nrootContainer is the main ContainerWidget used to group together\nall the widgets that make up the control panel. For more\ninformation on Container Widgets and possible child widgets,\nsee  Widget modules  and  XML UI Element Descriptions .  rootContainer \n//rootContainer properties and child elements go here. /rootContainer   Run the Code Generator tool  In the CPSAppGenerator directory, run the generator command\nto produce the Control Panel Generated Code from the XML.  python generateCPSApp.py  XML file the generate code from \n   -p  destination path for generated files   This Python script generates the following c and h files in\nthe application directory:   ControlPanelGenerated.cc  ControlPanelGenerated.h   In addition, it generates a class for every property and action\ndefined in the XML.  These files will be used to build the Controllee application.  Compile the code  The process to compile varies depending on the host and target\nplatform. Each host and platform needs may require a specific\ndirectory and file layout, build toolchains, procedures, and\nsupported AllJoyn service frameworks. Refer to the target\nplatform documentation that contains instructions on how\nto organize and set up the build process to incorporate\nthe necessary files to compile your application.",
            "title": "Implementing a Controllee"
        },
        {
            "location": "/develop/api-guide/controlpanel/cpp/#xml-ui-element-descriptions",
            "text": "This section provides XML UI element samples for each Control\nPanel interface. See the  Control Panel Interface Definition \nfor a full description of each interface.  Container  Sample XML for Container  container \n    name rootContainer /name \n    secured false /secured \n    enabled true /enabled \n    bgcolor 0x200 /bgcolor \n    label \n       value type= literal  language= en My Label of my container /value \n       value type= literal  language= de Container Etikett /value \n    /label \n    hints \n       hint vertical_linear /hint \n    /hints \n    elements \n      //Child elements (Action/Property/Label/Container, etc.) defined here\n    /elements  container   Container properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    secured  true false  yes  Determines whether the interface of the Container will be secured or not.    enabled  true false  yes  Determines whether the container will be visible or not.    bgColor  unsigned int  no  Background color expressed as RGB value.    label  code value  no  Label of the Container. If code, a function pointer to receive the label. If value, can be a literal or a constant.    hints  vertical_linear horizontal_linear  no  Container layout hint.    elements  Action Property LabelProperty Container  yes  Child widgets. Can be one or more within a Container.     Actions  Sample XML for Action  The onAction tag includes the execute code and dialog options.\nBoth options cannot be included in the same tag.  action \n    name ovenAction /name \n    onAction \n       executeCode startOven(); /executeCode \n         OR\n       dialog \n      //dialog properties here\n       /dialog \n    /onAction \n    secured true /secured \n    enabled true /enabled \n    label \n       value type= literal  language= en Start Oven /value \n       value type= literal  language= de Ofen started /value \n    /label \n    bgcolor 0x400 /bgcolor \n    hints \n       hint actionButton /hint \n    /hints  /action   Action properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    onAction  executeCode dialog  yes  Determines what happens when the actionButton is pressed. If executeCode, that code will be executed. If dialog, a dialog will be displayed.    secured  true false  yes  Determines whether the interface of the Action will be secured or not.    enabled  true false  yes  Determines whether the Action will be visible or not.    label  code value  no  If code, a function pointer to receive the label. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  Action hint  no  Can be actionButton.     labelProperty  Sample XML for labelProperty  labelProperty \n    name CurrentTemp /name \n    enabled true /enabled \n    label \n       value type= literal  language= en Current Temperature: /value \n       value type= literal  language= de Aktuelle Temperatur: /value \n    /label \n    bgcolor 0x98765 /bgcolor \n    hints \n       hint textlabel /hint \n    /hints  /labelProperty   labelProperty properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    enabled  true false  yes  Determines whether the Label will be visible or not.    label  code value  no  If code, a function pointer to receive the label. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  Label hint  no  Can be textLabel.     Property  Depending on the signature of the value, there are different\nways to construct a property in the XML. Samples and property\ninformation for each supported signature are provided here.   String  Boolean  Date  Time  Scalar   Sample XML for stringProperty  stringProperty \n    name modeStringProperty /name \n    getCode getStringVar /getCode \n    setCode setStringVar(%s) /setCode \n    secured false /secured \n    enabled true /enabled \n    writable true /writable \n    label \n       value type= constant  language= en HEATING_MODE_EN /value \n       value type= constant  language= de HEATING_MODE_DE /value \n    /label \n    bgcolor 0x500 /bgcolor \n    hints \n       hint edittext /hint \n    /hints \n    constraintVals \n       constraint \n       display \n          value type= literal  language= en Grill Mode /value \n          value type= literal  language= de  Grill Modus /value \n       /display \n          value Grill /value \n    /constraint \n    constraint \n       display \n          value type= literal  language= en Regular Mode /value \n          value type= literal  language= de Normal Modus /value \n       /display \n       value Normal /value \n       /constraint \n    /constraintVals  /stringProperty   stringProperty properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    Property  Function pointer  yes  Pointer to function that returns a property's value. The signature of the function pointer needs to be  void* (*functionptr)() .    setcode  Code to execute on setProperty  yes  Code to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.    secured  true false  yes  Determines whether the interface of the Property will be secured or not.    enabled  true false  yes  Determines whether the Property will be visible or not.    writable  true false  yes  Determines whether the Property will be writable or not.    label  code value  no  Text of the Property's label. If code, a function pointer to receive the text. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  switch spinner radiobutton textview edittext  no  Label hint.    constraintVals  List of constraints  no  Constraint Property to a list of values. Each Constraint is made up of a value and its display.     Sample XML for Boolean property  booleanProperty \n    name checkboxProperty /name \n    getCode getTurboModeVar /getCode \n    setCode setTurboModeVar(%s) /setCode \n    secured false /secured \n    enabled true /enabled \n    writable true /writable \n    label \n       value type= literal  language= en Turbo Mode: /value \n       value type= literal  language= de Turbo Modus: /value \n    /label \n    bgcolor 0x500 /bgcolor \n    hints \n       hint checkbox /hint \n    /hints  /booleanProperty   booleanProperty properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    getCode  Function pointer  yes  Pointer to function that returns a property's value. The signature of the function pointer needs to be  void* (*functionptr)() .    setcode  Code to execute on setProperty  yes  Code to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.    secured  true false  yes  Determines whether the interface of the Property will be secured or not.    enabled  true false  yes  Determines whether the Property will be visible or not.    writable  true false  yes  Determines whether the Property will be writable or not.    label  code value  no  Text of the Property's label. If code, a function pointer to receive the text. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  checkbox  no  Hint for how the UI should be rendered.     Sample XML for Date property  dateProperty \n    name startDateProperty /name \n    getCode getStartDateVar /getCode \n    setCode setStartDateVar(%s) /setCode \n    secured false /secured \n    enabled true /enabled \n    writable true /writable \n    label \n       value type= literal  language= en Start Date: /value \n       value type= literal  language= de Starttermin: /value \n    /label \n    bgcolor 0x500 /bgcolor \n    hints \n       hint datepicker /hint \n    /hints  /dateProperty   dateProperty properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    getCode  Function pointer  yes  Pointer to function that returns a property's value. The signature of the function pointer needs to be  void* (*functionptr)() .    setcode  Code to execute on setProperty  yes  Code to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.    secured  true false  yes  Determines whether the interface of the Property will be secured or not.    enabled  true false  yes  Determines whether the Property will be visible or not.    writable  true false  yes  Determines whether the Property will be writable or not.    label  code value  no  Text of the Property's label. If code, a function pointer to receive the text. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  datepicker  no  Hint for how the UI should be rendered.     Sample XML for Time property  timeProperty \n    name startTimeProperty /name \n    getCode getStartTimeVar /getCode \n    setCode setStartTimeVar(%s) /setCode \n    secured false /secured \n    enabled true /enabled \n    writable true /writable \n    label \n       value type= literal  language= en Start Time: /value \n       value type= literal  language= de Startzeit: /value \n    /label \n    bgcolor 0x500 /bgcolor \n    hints \n       hint timepicker /hint \n    /hints  /timeProperty   timeProperty properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    getCode  Function pointer  yes  Pointer to function that returns a property's value. The signature of the function pointer needs to be  void* (*functionptr)() .    setcode  Code to execute on setProperty  yes  Code to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.    secured  true false  yes  Determines whether the interface of the Property will be secured or not.    enabled  true false  yes  Determines whether the Property will be visible or not.    writable  true false  yes  Determines whether the Property will be writable or not.    label  code value  no  Text of the Property's label. If code, a function pointer to receive the label. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  timepicker  no  Hint for how the UI should be rendered.     Sample XML for Scalar property  The constraintDefs tag includes the value and range example.\nBoth cannot be included in the same tag.  scalarProperty dataType= UINT16 \n    name heatProperty /name \n    getCode getTemperatureVar /getCode \n    setCode setTemperatureVar(%s) /setCode \n    secured false /secured \n    enabled true /enabled \n    writable true /writable \n    label \n       value type= literal  language= en Oven Temperature /value \n       value type= literal  language= de Ofentemperatur /value \n    /label \n    bgcolor 0x500 /bgcolor \n    hints \n       hint spinner /hint \n    /hints \n    constraintDefs \n       constraintVals \n          constraint \n             display \n                value type= literal  language= en Regular /value \n                value type= literal  language= de Normal /value \n             /display \n             value 175 /value \n          /constraint \n          constraint \n             display \n                value type= literal  language= en Hot /value \n                value type= literal  language= de Heiss /value \n             /display \n             value 200 /value \n          /constraint \n       /constraintVals \n   OR\n       constraintRange \n          min 0 /min \n          max 400 /max \n          increment 25 /increment  \n       /constraintRange \n    /constraintDefs \n    unitMeasure \n       value type= literal  language= en Degrees /value \n       value type= literal  language= de Grad /value \n    /unitMeasure  /scalarProperty   scalarProperty properties     Property  Possible values  Required  Description      dataType  INT16 UINT16 INT32 UINT32 INT64 DOUBLE  yes  Scalar data types    name  alphanumeric  yes  Name of widget.    getCode  Function pointer  yes  Pointer to function that returns a property's value. The signature of the function pointer needs to be  void* (*functionptr)() .    setcode  Code to execute on setProperty  yes  Code to execute when setProperty is called. Any %s in the setCode content will be replaced by the generator with the new value.    secured  true false  yes  Determines whether the interface of the Property will be secured or not.    enabled  true false  yes  Determines whether the Property will be visible or not.    writable  true false  yes  Determines whether the Property will be writable or not.    label  code value  no  Text of the Property's label. If code, a function pointer to receive the text. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  timepicker radiobutton slider numberpicker keypad numericview  no  Hint for how the UI should be rendered.    constraintDefs  constraintList constraintRange  no  If constraintList, each constraint is made up of a value and its display. If constraintRange, each constraint is made up of a min, max and increment value.    unitMeasure  code value  no  Unit of measure for the Property. If code, a function pointer to receive the unit measure text. code value If value, can be a literal or a constant.     Dialog  Sample XML for a Dialog  dialog \n    name LightConfirm /name \n    secured false /secured \n    enabled true /enabled \n    message \n       value type= literal  language= en Do you want to turn on the light /value \n       value type= literal  language= de Wollen sie das Licht andrehen /value \n    /message \n    label \n       value type= literal  language= en Turn on Light /value \n       value type= literal  language= de Licht andrehen /value \n    /label \n    bgcolor 0x122 /bgcolor \n    hints \n       hint alertdialog /hint \n    /hints \n    button \n       label \n          value type= literal  language= en Yes /value \n          value type= literal  language= de Ja /value \n       /label \n\n       executeCode TurnOnLight(true); /executeCode \n    /button \n    button \n    label \n       value type= literal  language= en No /value \n       value type= literal  language= de Nein /value \n    /label \n\n       executeCode TurnOnLight(false); /executeCode \n    /button  /dialog   Dialog properties     Property  Possible values  Required  Description      name  alphanumeric  yes  Name of widget.    secured  true false  yes  Determines whether the interface of the Dialog will be secured or not.    enabled  true false  yes  Determines whether the Dialog will be visible or not.    message  code value  no  Message of the Dialog. If code, a function pointer to receive the text. If value, can be a literal or a constant.    label  code value  no  Text of the Dialog's label. If code, a function pointer to receive the text. If value, can be a literal or a constant.    bgColor  unsigned int  no  Background color expressed as RGB value.    hints  alertdialog  no  Hint for how the UI should be rendered.    button  Label and executeCode  Yes - can have up to 3  Each button must contain the following: A Label tag that contains the text that appears on the button. An executeCode tag which contains the code to be executed on the Controllee when the button is pressed.",
            "title": "XML UI Element Descriptions"
        },
        {
            "location": "/develop/api-guide/controlpanel/",
            "text": "Control Panel API Guide\n\n\n\n\nJava\n\n\nC++\n\n\nObjective-C\n\n\nC (Thin Core)\n\n\n\n\nBest Practices\n\n\nController\n\n\nDisplaying multiple control panels\n\n\nIn some cases, a Controllee may have multiple control panels.\nA few examples follow:\n\n\n\n\nSome control panels may be for different \"units\" of an\noverall device.\n\n\nThere can be a control panel for the everyday user and\na separate control panel for a technician or repair individual.\n\n\n\n\nTherefore, a Controller application should present the\nuser with the option of selecting not only which nearby\nControllee they would like to interact with, but also which\ncontrol panel they want to interact with on that specific Controllee.\n\n\nReflecting changes to a control panel\n\n\nControl panels provided by a Controllee can change depending\non user interactions, device state, and other factors. It is\nimportant that a Controller have the appropriate listeners\nregistered for a control panel so that it will be informed\nof these changes and can update the control panel UI accordingly.\n\n\nAn example would be a user choosing an option on a control\npanel that results in other options not being valid and\ntherefore being disabled or grayed out. Another example can\ninvolve a washer/dryer combo where, depending on the state/cycle\nthat the appliance is in, varying control options are available\non the control panel.\n\n\nControlPanelExceptionHandler\n\n\nWhen an error occurs while a Controller is attempting to\nretrieve a widget from a Controllee, the Adapter throws an\nexception so that the application can handle the error and\ndecide how to display the error to the user. These errors\nare thrown for a reason, and at various states; they should\nnot be ignored.\n\n\nControllee\n\n\nControllee control panel naming conventions\n\n\nWhen designing the control panel(s) that a Controllee will\nexpose, certain naming conventions must be followed for the\nname of a unit and the name of individual widgets. Additionally,\neach unit and widget name within a control panel must be unique.\nThis is due to the fact that the unit name and widget name\nare used as part of the AllJoyn\n BusObject paths that the Control\nPanel service framework utilizes. The naming conventions are as follows:\n\n\n\n\nContain only the ASCII characters \"[A-Z][a-z][0-9]_\"\n\n\nCannot be an empty string\n\n\n\n\nControl panel structure and layout\n\n\nIt is important to keep in mind that control panels exposed by a\nControllee will often be displayed on a mobile device with a\nlimited screen size and available screen space. Therefore, the\nControl Panel service framework's Container widgets should be\nused effectively to organize and lay out the other widgets\npresented in the control panel.\n\n\nLocalization handled by Controllee\n\n\nDevelopers creating a Controllee application should not\nrely or plan on having Controller applications perform\nlocalization (such as translating or interpreting) of content.\nFor example, if a Controllee provides language support for\nboth English and Spanish control panels, then the strings\ncontained within the different widgets must have the correct\nand complete language-appropriate strings available so that a\nController application can simply display the widgets.\nAn approach, such as having a Controllee widget definition\ncontain a number or code that is then used to look up or\nconvert to a language-specific string on a Controller is unacceptable.",
            "title": "Home"
        },
        {
            "location": "/develop/api-guide/controlpanel/#control-panel-api-guide",
            "text": "Java  C++  Objective-C  C (Thin Core)",
            "title": "Control Panel API Guide"
        },
        {
            "location": "/develop/api-guide/controlpanel/#best-practices",
            "text": "Controller  Displaying multiple control panels  In some cases, a Controllee may have multiple control panels.\nA few examples follow:   Some control panels may be for different \"units\" of an\noverall device.  There can be a control panel for the everyday user and\na separate control panel for a technician or repair individual.   Therefore, a Controller application should present the\nuser with the option of selecting not only which nearby\nControllee they would like to interact with, but also which\ncontrol panel they want to interact with on that specific Controllee.  Reflecting changes to a control panel  Control panels provided by a Controllee can change depending\non user interactions, device state, and other factors. It is\nimportant that a Controller have the appropriate listeners\nregistered for a control panel so that it will be informed\nof these changes and can update the control panel UI accordingly.  An example would be a user choosing an option on a control\npanel that results in other options not being valid and\ntherefore being disabled or grayed out. Another example can\ninvolve a washer/dryer combo where, depending on the state/cycle\nthat the appliance is in, varying control options are available\non the control panel.  ControlPanelExceptionHandler  When an error occurs while a Controller is attempting to\nretrieve a widget from a Controllee, the Adapter throws an\nexception so that the application can handle the error and\ndecide how to display the error to the user. These errors\nare thrown for a reason, and at various states; they should\nnot be ignored.  Controllee  Controllee control panel naming conventions  When designing the control panel(s) that a Controllee will\nexpose, certain naming conventions must be followed for the\nname of a unit and the name of individual widgets. Additionally,\neach unit and widget name within a control panel must be unique.\nThis is due to the fact that the unit name and widget name\nare used as part of the AllJoyn  BusObject paths that the Control\nPanel service framework utilizes. The naming conventions are as follows:   Contain only the ASCII characters \"[A-Z][a-z][0-9]_\"  Cannot be an empty string   Control panel structure and layout  It is important to keep in mind that control panels exposed by a\nControllee will often be displayed on a mobile device with a\nlimited screen size and available screen space. Therefore, the\nControl Panel service framework's Container widgets should be\nused effectively to organize and lay out the other widgets\npresented in the control panel.  Localization handled by Controllee  Developers creating a Controllee application should not\nrely or plan on having Controller applications perform\nlocalization (such as translating or interpreting) of content.\nFor example, if a Controllee provides language support for\nboth English and Spanish control panels, then the strings\ncontained within the different widgets must have the correct\nand complete language-appropriate strings available so that a\nController application can simply display the widgets.\nAn approach, such as having a Controllee widget definition\ncontain a number or code that is then used to look up or\nconvert to a language-specific string on a Controller is unacceptable.",
            "title": "Best Practices"
        },
        {
            "location": "/develop/api-guide/controlpanel/java/",
            "text": "Control Panel API Guide - Java\n\n\nReference code\n\n\nControl Panel service framework packages\n\n\n\n\n\n\n\n\nPackage\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nControlPanelService.jar\n\n\nThe service layer does all the work against the AllJoyn\n framework.\n\n\n\n\n\n\nControlPanelAdapter.jar\n\n\nCreates Android-specific user interface views.\n\n\n\n\n\n\n\n\nReference Java application code\n\n\n\n\n\n\n\n\nApplication\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nControlPanelBrowser.apk\n\n\nSample application that uses the service framework and adapter APIs.\n\n\n\n\n\n\n\n\nObtain the Control Panel service framework\n\n\nSee the \nBuilding Android section\n for instructions\non obtaining the Control Panel service framework.\n\n\nBuild a Controller\n\n\nThe following steps provide the high-level process to build a Controller.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nStart the AboutClient.\n\n\nListen for the announcement to find Controllee devices on the network.\n\n\nChoose a control panel from the collection that was received\nin the announcement in your preferred language.\n\n\nEstablish a session with the Controllee device that you\nwould like to interact with.\n\n\nGet the device's control panel widgets to pass to the Adapter.\nThe Adapter converts these widgets to Android UI elements.\n\n\nGet the Android UI elements from the Adapter to be displayed\nin the application. These elements are combined to create the\ngraphical control panel that is displayed by the Controller\napplication for the end user to interact with.\n\n\n\n\nSetting up the AllJoyn framework and About feature\n\n\nThe steps required for this service are universal to all applications\nthat use the AllJoyn framework and for any application using\none or more AllJoyn services. Prior to use of the Control Panel\nservice framework, the About feature must be implemented and the\nAllJoyn framework set up.\n\n\nComplete the procedures in the following sections to guide you in this process:\n\n\n\n\nBuilding Android\n\n\nAbout API Guide\n\n\n\n\nImplementing a Controller\n\n\nInitialize the AllJoyn framework\n\n\nSee the \nAbout API Guide\n for instructions to\nset up the AllJoyn framework.\n\n\nStart the AboutService in client mode\n\n\nThe Control Panel service framework depends on the About feature.\n\n\nFor more information about the About feature, see the \nAbout API Guide\n.\n\n\nInitialize the About feature\n\n\naboutClient = AboutServiceImpl.getInstance();\naboutClient.startAboutClient(bus);\n\n\n\n\nListen for announcements from Controllee devices\n\n\nRegister an announcement handler to receive announcements\nfrom the About feature.\n\n\naboutClient.addAnnouncementHandler(announcementHandler,\nnew String[] { \norg.alljoyn.ControlPanel.*\n });\n\n\n\n\nFor each announcement that is received, check if it implements\nthe ControlPanel interface. If it does, save it as a controllable\ndevice for later use.\n\n\n@Override\npublic void onAnnouncement(String busName, short port, BusObjectDescription[]\nobjectDescriptions, Map\nString, Variant\n aboutMap) {\n   Variant varDeviceId = aboutMap.get(AboutKeys.ABOUT_DEVICE_ID);\n   String devIdSig  = VariantUtil.getSignature(varDeviceId);\n   if ( !devIdSig.equals(\ns\n) ) {\n      return;\n   }\n   deviceId = varDeviceId.getObject(String.class);\n   // get the device name from the annoucement just as the device id above\n\n   for(int i = 0; i \n objectDescriptions.length; ++i){\n      BusObjectDescription description = objectDescriptions[i];\n      String[] supportedInterfaces  = description.getInterfaces();\n      for(int j = 0; j \n supportedInterfaces.length; ++j){\n      if(supportedInterfaces[j].startsWith\n         (\norg.alljoyn.ControlPanel\n)){\n         // found a control panel interface\n         if (deviceContext == null) {\n            deviceContext = new DeviceContext\n         (deviceId, busName, deviceName);\n}    deviceContext.addObjectInterfaces\n(description.getPath(), supportedInterfaces);\n         }\n      }\n   }\n}\n\n\n\n\nGet the controllable device\n\n\nOnce a controllable device is detected via the announcement,\nget its ControllableDevice proxy object.\n\n\nThe ControllableDevice is used to later create a session\nwith the Controllee.\n\n\ncontrollableDevice = ControlPanelService.getInstance()\n   .getControllableDevice(deviceContext.deviceId, deviceContext.busName);\n\n\n\n\nStart a session with the Controllee\n\n\nTo get the control panels of a Controllee, you must create a\nsession with it. This is an asynchronous call and requires a\nDeviceEventsListener as a callback.\n\n\ncontrollableDevice.startSession(DeviceEventsListener);\n\n\n\n\nListen for a sessionEstablished event to verify the session\nwas established successfully. When a session is established,\na collection of control panel containers is received.\n\n\nNOTE:\n There may be more than one control panel container, each\nintended for a different use. For example, one for the home user\nand another for a technician. Each element of the container is a\nDeviceControlPanel and provided per language.\n\n\n@Override\npublic void sessionEstablished(ControllableDevice device,\n   Collection\nControlPanelCollection\n controlPanelContainer)\n{\n   //At this point the session was established\n}\n\n\n\n\nImplement the DeviceEventsListeners\n\n\nThere are other methods of the DeviceEventsListener\n(besides for sessionEstablished) that should be implemented\nto receive session-related events from the Control Panel\nservice framework.\n\n\npublic void sessionLost(ControllableDevice device);\n\npublic void errorOccured(ControllableDevice device, String reason);\n\n\n\n\nFor more information, refer to the API documentation.\n\n\nGet a device control panel\n\n\nGet a collection of device control panels and select the one\nwith the desired language.\n\n\nCollection\nDeviceControlPanel\n controlPanels =\n      controlPanelCollection.getControlPanels();\nfor(DeviceControlPanel controlPanel : controlPanels) {\n   String cpLanguage = controlPanel.getLanguage();\n   if (cpLanguage.equalsIgnoreCase(desired_language){\n      //found the desired device control panel\n      DeviceControlPanel deviceControlPanel = controlPanel;\n   }\n}\n\n\n\n\nGet the root container\n\n\nOnce the DeviceControlPanel is selected, get its root container element.\n\n\nThe root container element is the top-level UI element that\ncontains all the child UI elements of the selected DeviceControlPanel.\n\n\nDetect the type of the root container. It may be either a ContainerWidget\nor an AlertDialogWidget (mostly used for notification with action).\n\n\nUIElement rootContainerElement =\n   deviceControlPanel.getRootElement(ControlPanelEventsListener);\nUIElementType elementType = rootContainerElement.getElementType();\n\n\n\n\nImplement the ControlPanelEventsListener\n\n\nThe ControlPanelEventsListener interface should be implemented\nto receive changes that occurred in the control panel on the\nControllee and should be reflected on the UI accordingly.\n\n\npublic void valueChanged(DeviceControlPanel panel, UIElement uielement, Object newValue);\n\npublic void metadataChanged(DeviceControlPanel panel, UIElement uielement);\n\npublic void notificationActionDismiss(DeviceControlPanel panel);\n\npublic void errorOccured(DeviceControlPanel panel, String reason);\n\n\n\n\nFor more information, refer to the API documentation.\n\n\nBuild the Android UI elements\n\n\nThe Adapter loops through the UI elements list, received from\nthe root container, and builds a linear layout with all the\ncontained Android views.\n\n\nThe application can embed this inside an activity.\n\n\nControlPanelAdapter  controlPanelAdapter =\nnew ControlPanelAdapter(Context, ControlPanelExceptionHandler);\n\n// create an android view for the abstract container\nfinal View adapterView = controlPanelAdapter.createContainerView(container);\n\n\n\n\nControlPanelExceptionHandler\n\n\nWhen an error occurs while retrieving any of the widgets, the Adapter\nthrows an exception to the application to better handle the error.\nThe application can decide how to display this error to the user.\nA typical method is to show a toast to the user that an error occurred.\n\n\nCompile the code\n\n\nSee the \nBuilding Android\n section for instructions on how to\ncompile the application with this service framework.",
            "title": "Java"
        },
        {
            "location": "/develop/api-guide/controlpanel/java/#control-panel-api-guide-java",
            "text": "",
            "title": "Control Panel API Guide - Java"
        },
        {
            "location": "/develop/api-guide/controlpanel/java/#reference-code",
            "text": "Control Panel service framework packages     Package  Description      ControlPanelService.jar  The service layer does all the work against the AllJoyn  framework.    ControlPanelAdapter.jar  Creates Android-specific user interface views.     Reference Java application code     Application  Description      ControlPanelBrowser.apk  Sample application that uses the service framework and adapter APIs.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/controlpanel/java/#obtain-the-control-panel-service-framework",
            "text": "See the  Building Android section  for instructions\non obtaining the Control Panel service framework.  Build a Controller  The following steps provide the high-level process to build a Controller.   Create the base for the AllJoyn application.  Start the AboutClient.  Listen for the announcement to find Controllee devices on the network.  Choose a control panel from the collection that was received\nin the announcement in your preferred language.  Establish a session with the Controllee device that you\nwould like to interact with.  Get the device's control panel widgets to pass to the Adapter.\nThe Adapter converts these widgets to Android UI elements.  Get the Android UI elements from the Adapter to be displayed\nin the application. These elements are combined to create the\ngraphical control panel that is displayed by the Controller\napplication for the end user to interact with.   Setting up the AllJoyn framework and About feature  The steps required for this service are universal to all applications\nthat use the AllJoyn framework and for any application using\none or more AllJoyn services. Prior to use of the Control Panel\nservice framework, the About feature must be implemented and the\nAllJoyn framework set up.  Complete the procedures in the following sections to guide you in this process:   Building Android  About API Guide",
            "title": "Obtain the Control Panel service framework"
        },
        {
            "location": "/develop/api-guide/controlpanel/java/#implementing-a-controller",
            "text": "Initialize the AllJoyn framework  See the  About API Guide  for instructions to\nset up the AllJoyn framework.  Start the AboutService in client mode  The Control Panel service framework depends on the About feature.  For more information about the About feature, see the  About API Guide .  Initialize the About feature  aboutClient = AboutServiceImpl.getInstance();\naboutClient.startAboutClient(bus);  Listen for announcements from Controllee devices  Register an announcement handler to receive announcements\nfrom the About feature.  aboutClient.addAnnouncementHandler(announcementHandler,\nnew String[] {  org.alljoyn.ControlPanel.*  });  For each announcement that is received, check if it implements\nthe ControlPanel interface. If it does, save it as a controllable\ndevice for later use.  @Override\npublic void onAnnouncement(String busName, short port, BusObjectDescription[]\nobjectDescriptions, Map String, Variant  aboutMap) {\n   Variant varDeviceId = aboutMap.get(AboutKeys.ABOUT_DEVICE_ID);\n   String devIdSig  = VariantUtil.getSignature(varDeviceId);\n   if ( !devIdSig.equals( s ) ) {\n      return;\n   }\n   deviceId = varDeviceId.getObject(String.class);\n   // get the device name from the annoucement just as the device id above\n\n   for(int i = 0; i   objectDescriptions.length; ++i){\n      BusObjectDescription description = objectDescriptions[i];\n      String[] supportedInterfaces  = description.getInterfaces();\n      for(int j = 0; j   supportedInterfaces.length; ++j){\n      if(supportedInterfaces[j].startsWith\n         ( org.alljoyn.ControlPanel )){\n         // found a control panel interface\n         if (deviceContext == null) {\n            deviceContext = new DeviceContext\n         (deviceId, busName, deviceName);\n}    deviceContext.addObjectInterfaces\n(description.getPath(), supportedInterfaces);\n         }\n      }\n   }\n}  Get the controllable device  Once a controllable device is detected via the announcement,\nget its ControllableDevice proxy object.  The ControllableDevice is used to later create a session\nwith the Controllee.  controllableDevice = ControlPanelService.getInstance()\n   .getControllableDevice(deviceContext.deviceId, deviceContext.busName);  Start a session with the Controllee  To get the control panels of a Controllee, you must create a\nsession with it. This is an asynchronous call and requires a\nDeviceEventsListener as a callback.  controllableDevice.startSession(DeviceEventsListener);  Listen for a sessionEstablished event to verify the session\nwas established successfully. When a session is established,\na collection of control panel containers is received.  NOTE:  There may be more than one control panel container, each\nintended for a different use. For example, one for the home user\nand another for a technician. Each element of the container is a\nDeviceControlPanel and provided per language.  @Override\npublic void sessionEstablished(ControllableDevice device,\n   Collection ControlPanelCollection  controlPanelContainer)\n{\n   //At this point the session was established\n}  Implement the DeviceEventsListeners  There are other methods of the DeviceEventsListener\n(besides for sessionEstablished) that should be implemented\nto receive session-related events from the Control Panel\nservice framework.  public void sessionLost(ControllableDevice device);\n\npublic void errorOccured(ControllableDevice device, String reason);  For more information, refer to the API documentation.  Get a device control panel  Get a collection of device control panels and select the one\nwith the desired language.  Collection DeviceControlPanel  controlPanels =\n      controlPanelCollection.getControlPanels();\nfor(DeviceControlPanel controlPanel : controlPanels) {\n   String cpLanguage = controlPanel.getLanguage();\n   if (cpLanguage.equalsIgnoreCase(desired_language){\n      //found the desired device control panel\n      DeviceControlPanel deviceControlPanel = controlPanel;\n   }\n}  Get the root container  Once the DeviceControlPanel is selected, get its root container element.  The root container element is the top-level UI element that\ncontains all the child UI elements of the selected DeviceControlPanel.  Detect the type of the root container. It may be either a ContainerWidget\nor an AlertDialogWidget (mostly used for notification with action).  UIElement rootContainerElement =\n   deviceControlPanel.getRootElement(ControlPanelEventsListener);\nUIElementType elementType = rootContainerElement.getElementType();  Implement the ControlPanelEventsListener  The ControlPanelEventsListener interface should be implemented\nto receive changes that occurred in the control panel on the\nControllee and should be reflected on the UI accordingly.  public void valueChanged(DeviceControlPanel panel, UIElement uielement, Object newValue);\n\npublic void metadataChanged(DeviceControlPanel panel, UIElement uielement);\n\npublic void notificationActionDismiss(DeviceControlPanel panel);\n\npublic void errorOccured(DeviceControlPanel panel, String reason);  For more information, refer to the API documentation.  Build the Android UI elements  The Adapter loops through the UI elements list, received from\nthe root container, and builds a linear layout with all the\ncontained Android views.  The application can embed this inside an activity.  ControlPanelAdapter  controlPanelAdapter =\nnew ControlPanelAdapter(Context, ControlPanelExceptionHandler);\n\n// create an android view for the abstract container\nfinal View adapterView = controlPanelAdapter.createContainerView(container);  ControlPanelExceptionHandler  When an error occurs while retrieving any of the widgets, the Adapter\nthrows an exception to the application to better handle the error.\nThe application can decide how to display this error to the user.\nA typical method is to show a toast to the user that an error occurred.  Compile the code  See the  Building Android  section for instructions on how to\ncompile the application with this service framework.",
            "title": "Implementing a Controller"
        },
        {
            "location": "/develop/api-guide/controlpanel/objc/",
            "text": "Control Panel API Guide - Objective-C\n\n\nReference code\n\n\nSource code\n\n\n\n\n\n\n\n\nLibrary\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nalljoyn\n\n\nThe AllJoyn\n Standard Library code\n\n\n\n\n\n\nalljoyn_services_common\n\n\nThe common code for all service frameworks. This is needed from Linux (C++) and Objective-C.\n\n\n\n\n\n\nalljoyn_about\n\n\nThe About Feature library\n\n\n\n\n\n\nalljoyn_controlpanel\n\n\nThe Control Panel library\n\n\n\n\n\n\nalljoynFramework_iOS\n\n\nThe iOS binding of the AllJoyn framework\n\n\n\n\n\n\n\n\nReference iOS application code\n\n\n\n\n\n\n\n\nApplication\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsampleApp\n\n\nSample application that uses the Control Panel service framework and adapter APIs.\n\n\n\n\n\n\n\n\nObtain the Control Panel service framework\n\n\nSee the \nBuilding iOS/OS X\n section for\ninstructions on compiling the Control Panel service framework.\n\n\nBuild a Controller\n\n\nThe following steps provide the high-level process to build a Controller.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nStart the AboutClient.\n\n\nListen for announcements to find Controllee devices on the network.\n\n\nChoose a control panel from the collection that was received\nin the announcement in your preferred language.\n\n\nEstablish a session with the Controllee device that you\nwould like to interact with.\n\n\nGet the device's control panel widgets to pass to the\nAdapter. The Adapter converts these widgets to iOS UI elements.\n\n\nGet the iOS UI elements from the Adapter to be displayed\nin the application. These elements are combined to create\nthe graphical control panel that is displayed by the Controller\napplication for the end user to interact with.\n\n\n\n\nSetting up the AllJoyn framework and About feature\n\n\nThe steps required for this service are universal to all\napplications that use the AllJoyn framework and for any application\nusing one or more AllJoyn services. Prior to use of the Control\nPanel service framework, the About feature must be implemented\nand the AllJoyn framework set up.\n\n\nComplete the procedures in the following sections to guide\nyou in this process:\n\n\n\n\nBuilding iOS/OS X section\n\n\nAbout API Guide\n\n\n\n\nImplementing a Controller\n\n\nInitialize the AllJoyn framework\n\n\nSee the \nBuilding iOS/OS X\n section for\ninstructions to set up the AllJoyn framework.\n\n\nStart the AboutService in client mode\n\n\nThe Control Panel service framework depends on the About feature.\n\n\nFor more information about the About feature, see the\n\nAbout API Guide\n.\n\n\nInitialize the About feature\n\n\nCreate, start, connect, and register a Bus Attachment\n\n\nclientBusAttachment = [[AJNBusAttachment alloc] initWithApplicationName:APPNAME\nallowRemoteMessages:ALLOWREMOTEMESSAGES];\n[clientBusAttachment start];\n//Thin Libaries at AllSeen Alliance 14.06 or higher do not require this step.\n//Set a password for the router so Thin Libraries can connect to it, before you connect the bus attachment.\n[AJNPasswordManager setCredentialsForAuthMechanism:@\nALLJOYN_PIN_KEYX\n usingPassword:@\n000000\n];\n[clientBusAttachment connectWithArguments:@\n];\n[clientBusAttachment registerBusListener:self];\n\n\n\n\nRegister to receive announcements and sessionless signals\n\n\nannouncementReceiver = [[AJNAnnouncementReceiver alloc]\ninitWithAnnouncementListener:self andBus:self.clientBusAttachment];\n[announcementReceiver\nregisterAnnouncementReceiverForInterfaces:NULL\nwithNumberOfInterfaces:0];\n// Advertise the name with a quite prefix for TC to find it\n   [clientBusAttachment advertiseName:@\nquiet@org.alljoyn.BusNode.CPSService.542e8562-e29b-89c2-b456-\n334455667788\n]\n\n\n\n\nListen for announcements from Controllee devices\n\n\nOnce the client has been started, announcements will be received\nby the announcement listeners.\n\n\nImplement the AJNAnnouncementListener protocol in your class to\nrespond to new announcements.\n\n\nFor each announcement that is received, check if it implements\nthe ControlPanel interface. If it does, save it as a\ncontrollee device for later use.\n\n\n- (void)announceWithVersion:(uint16_t)version\n                       port:(uint16_t)port\n                    busName:(NSString *)busName\n         objectDescriptions:(NSMutableDictionary *)objectDescs\n                  aboutData:(NSMutableDictionary **)aboutData\n{\n// Save the announcement in a AJNAnnouncement\nAJNAnnouncement *announcement = [[AJNAnnouncement alloc]\n   initWithVersion:version port:port busName:busName objectDescriptions:objectDescs aboutData:aboutData];\n   NSMutableDictionary *announcementObjDecs = [announcement objectDescriptions];\n// See if this announcment is from a controller device for (NSString *key in announcementObjDecs.allKeys) {\n   if ([key hasPrefix: @\n/ControlPanel/\n]) {\n      for (NSString *intf in[announcementObjDecs valueForKey:key]) {\n         if ([intf isEqualToString: @\norg.alljoyn.ControlPanel.ControlPanel\n]) {\n            hascPanel = true;\n         }\n      }\n   }\n}\n\nif(hascPanel == true)\nNSLog(@\nThis announcement has control panel\n);\n\n\n\n\nLoading the controller's UI\n\n\nThe AJNAnnouncement object is used to load the controller's\ntable view when needed.\n\n\nGetControlPanelViewController *getCpanelView =\n[[GetControlPanelViewController alloc] initWithAnnouncement:announcement\n   bus:self.clientBusAttachment]; [self.navigationController\n   pushViewController:getCpanelView animated:YES];\n\n\n\n\nCompile the code\n\n\nSee the \nBuilding iOS/OS X\n section for instructions\non how to compile the application with this service framework.",
            "title": "Objc"
        },
        {
            "location": "/develop/api-guide/controlpanel/objc/#control-panel-api-guide-objective-c",
            "text": "",
            "title": "Control Panel API Guide - Objective-C"
        },
        {
            "location": "/develop/api-guide/controlpanel/objc/#reference-code",
            "text": "Source code     Library  Description      alljoyn  The AllJoyn  Standard Library code    alljoyn_services_common  The common code for all service frameworks. This is needed from Linux (C++) and Objective-C.    alljoyn_about  The About Feature library    alljoyn_controlpanel  The Control Panel library    alljoynFramework_iOS  The iOS binding of the AllJoyn framework     Reference iOS application code     Application  Description      sampleApp  Sample application that uses the Control Panel service framework and adapter APIs.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/controlpanel/objc/#obtain-the-control-panel-service-framework",
            "text": "See the  Building iOS/OS X  section for\ninstructions on compiling the Control Panel service framework.",
            "title": "Obtain the Control Panel service framework"
        },
        {
            "location": "/develop/api-guide/controlpanel/objc/#build-a-controller",
            "text": "The following steps provide the high-level process to build a Controller.   Create the base for the AllJoyn application.  Start the AboutClient.  Listen for announcements to find Controllee devices on the network.  Choose a control panel from the collection that was received\nin the announcement in your preferred language.  Establish a session with the Controllee device that you\nwould like to interact with.  Get the device's control panel widgets to pass to the\nAdapter. The Adapter converts these widgets to iOS UI elements.  Get the iOS UI elements from the Adapter to be displayed\nin the application. These elements are combined to create\nthe graphical control panel that is displayed by the Controller\napplication for the end user to interact with.",
            "title": "Build a Controller"
        },
        {
            "location": "/develop/api-guide/controlpanel/objc/#setting-up-the-alljoyn-framework-and-about-feature",
            "text": "The steps required for this service are universal to all\napplications that use the AllJoyn framework and for any application\nusing one or more AllJoyn services. Prior to use of the Control\nPanel service framework, the About feature must be implemented\nand the AllJoyn framework set up.  Complete the procedures in the following sections to guide\nyou in this process:   Building iOS/OS X section  About API Guide",
            "title": "Setting up the AllJoyn framework and About feature"
        },
        {
            "location": "/develop/api-guide/controlpanel/objc/#implementing-a-controller",
            "text": "Initialize the AllJoyn framework  See the  Building iOS/OS X  section for\ninstructions to set up the AllJoyn framework.  Start the AboutService in client mode  The Control Panel service framework depends on the About feature.  For more information about the About feature, see the About API Guide .  Initialize the About feature  Create, start, connect, and register a Bus Attachment  clientBusAttachment = [[AJNBusAttachment alloc] initWithApplicationName:APPNAME\nallowRemoteMessages:ALLOWREMOTEMESSAGES];\n[clientBusAttachment start];\n//Thin Libaries at AllSeen Alliance 14.06 or higher do not require this step.\n//Set a password for the router so Thin Libraries can connect to it, before you connect the bus attachment.\n[AJNPasswordManager setCredentialsForAuthMechanism:@ ALLJOYN_PIN_KEYX  usingPassword:@ 000000 ];\n[clientBusAttachment connectWithArguments:@ ];\n[clientBusAttachment registerBusListener:self];  Register to receive announcements and sessionless signals  announcementReceiver = [[AJNAnnouncementReceiver alloc]\ninitWithAnnouncementListener:self andBus:self.clientBusAttachment];\n[announcementReceiver\nregisterAnnouncementReceiverForInterfaces:NULL\nwithNumberOfInterfaces:0];\n// Advertise the name with a quite prefix for TC to find it\n   [clientBusAttachment advertiseName:@ quiet@org.alljoyn.BusNode.CPSService.542e8562-e29b-89c2-b456-\n334455667788 ]  Listen for announcements from Controllee devices  Once the client has been started, announcements will be received\nby the announcement listeners.  Implement the AJNAnnouncementListener protocol in your class to\nrespond to new announcements.  For each announcement that is received, check if it implements\nthe ControlPanel interface. If it does, save it as a\ncontrollee device for later use.  - (void)announceWithVersion:(uint16_t)version\n                       port:(uint16_t)port\n                    busName:(NSString *)busName\n         objectDescriptions:(NSMutableDictionary *)objectDescs\n                  aboutData:(NSMutableDictionary **)aboutData\n{\n// Save the announcement in a AJNAnnouncement\nAJNAnnouncement *announcement = [[AJNAnnouncement alloc]\n   initWithVersion:version port:port busName:busName objectDescriptions:objectDescs aboutData:aboutData];\n   NSMutableDictionary *announcementObjDecs = [announcement objectDescriptions];\n// See if this announcment is from a controller device for (NSString *key in announcementObjDecs.allKeys) {\n   if ([key hasPrefix: @ /ControlPanel/ ]) {\n      for (NSString *intf in[announcementObjDecs valueForKey:key]) {\n         if ([intf isEqualToString: @ org.alljoyn.ControlPanel.ControlPanel ]) {\n            hascPanel = true;\n         }\n      }\n   }\n}\n\nif(hascPanel == true)\nNSLog(@ This announcement has control panel );  Loading the controller's UI  The AJNAnnouncement object is used to load the controller's\ntable view when needed.  GetControlPanelViewController *getCpanelView =\n[[GetControlPanelViewController alloc] initWithAnnouncement:announcement\n   bus:self.clientBusAttachment]; [self.navigationController\n   pushViewController:getCpanelView animated:YES];  Compile the code  See the  Building iOS/OS X  section for instructions\non how to compile the application with this service framework.",
            "title": "Implementing a Controller"
        },
        {
            "location": "/develop/api-guide/core/alljoyn-transports-best-practices/",
            "text": "AllJoyn\n Transports Best Practices\n\n\nIntroduction\n\n\nTransports are based on ISO OSI layer 4 - transport layer - mechanisms.\nSuch transport mechanisms are typically optimized for some set\nof operating characteristics or network environments. The resulting\noptimizations and environments in the layer 4 transport mechanism\nwill result in different qualities being presented by AllJoyn Transports\nthat use them.\n\n\nIn order to be called an AllJoyn Transport, all Transports must provide\nthe same capabilities, however, since the underlying mechanisms provide\ndifferencing amounts of support for various functions, some layer 4\ntransports, and therefore AllJoyn Transports will be more suitable\nto some distributed applications.\n\n\nThis document discusses how to determine which AllJoyn Transports\nmight be more suitable than others to different application traffic\npatterns and requirements.\n\n\nAllJoyn Transports\n\n\nOne of the fundamental abstractions in an AllJoyn system is that\nof a Transport. An AllJoyn Transport provides an abstract\nrepresentation of a collection of underlying mechanisms\nthat provides four basic functions  :\n\n\n\n\nThe ability to discover remote AllJoyn Bus Attachments or Interfaces\n\n\nThe ability to advertise local AllJoyn Bus Attachments to\nthe greater AllJoyn system\n\n\nThe ability to establish traffic flows to other AllJoyn devices\n\n\nThe ability to move AllJoyn Messages (representing Method Calls,\nMethod Replies or Signals) between devices.\n\n\n\n\nIn the ISO OSI seven-layer model, the transport layer is\nresponsible for moving data sequences from one host to another\nand maintaining appropriate transport-specific qualities of\nservice. One measure of quality of service, for example, is\nreliable and ordered delivery of data. TCP and UDP both move\ndata sequences from one host to another, and have different\nquality of service guarantees. TCP provides reliable, ordered\nbyte streams; and UDP provides datagram services with no\nguarantee of ordering or reliable delivery. TCP and UDP are\nthus both transport layer (layer 4) protocols in the ISO OSI model.\n\n\nAllJoyn Transports make use of lower-level OS services like TCP\nor UDP in order to manage the actual movement of data sequences,\nand therefore sit above layer 4 in the OSI protocol stack.\nSince the AllJoyn Transport manages underlying connections\non behalf of the application layer (layer 7) the concept of\nAllJoyn Transport most closely matches the session layer\n(layer 5) of the ISO OSI model.\n\n\nAllJoyn Messaging\n\n\nThe AllJoyn Message layer, which is responsible for marshaling\nand unmarshaling of Signals and Method Calls, can be thought\nof as residing in the presentation layer (layer 6) of the ISO OSI model;\nand the routing functionality of the AllJoyn Routing Node\ncan be thought of as lying above AllJoyn Transports (still in layer 5),\nbut below the Message layer at layer 6.\n\n\nIn the following figure, notice that the AllJoyn Bus Attachment\ncorresponds to the application layer in the seven-layer model\nin that it provides the interface between the network stack\nand the application itself. Bus Attachments provide functionality\nrequired by the application to create, marshal and unmarshal\nAllJoyn Messages. This functionality corresponds to translating\nbetween application and network data formats and therefore\ncorresponds to the presentation layer in the seven-layer model.\n\n\n\n\nFigure:\n Mapping of AllJoyn system and OSI layer transports\n\n\nAllJoyn Messages are sent to a local Routing Node which is\nresponsible for selecting an AllJoyn Transport over which\na given Message must be sent. AllJoyn Transports are responsible\nfor controlling the dialogs between computers and therefore\ncorrespond to the session layer of the seven-layer model.\nMessages are sent to an OSI transport layer mechanism,\nfor example TCP or UDP, with suitable guarantees of service.\nThe transport layer passes byte streams or datagrams to the\nnetwork layer   and then down to the 802.11 MAC and PHY\nin the figure.\n\n\nSupported AllJoyn transports\n\n\nSince an AllJoyn Transport encapsulates the functions of\nmoving data sequences, connections, and advertisement and\ndiscovery, there are separate AllJoyn Transports for separate\nunderlying mechanisms. For example, the AllJoyn TCP Transport\nuses TCP/IP as the mechanism for moving data between Routing Nodes;\nthe AllJoyn UDP Transport uses UDP/IP as the mechanism; the\nAllJoyn Bluetooth (BT) Transport does the same for Bluetooth\nconnections, and the AllJoyn Local Transport uses UNIX domain sockets.\n\n\nOften, the name given to an AllJoyn Transport echoes the method\nused in the underlying OSI layer 4 mechanism. For example, the\nAllJoyn TCP transport uses TCP/IP to move bits from one host\nto another; the AllJoyn UDP Transport uses UDP/IP to actually move bits.\n\n\nAllJoyn applications may select the AllJoyn Transport that is\nactually used by choosing one or more TransportMask bits in\nappropriate AllJoyn APIs. The currently defined TransportMask\nbits are listed in the following table.\n\n\nAllJoyn TransportMask definition\n\n\n\n\n\n\n\n\nTransport name\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTRANSPORT_NONE\n\n\n0x0000\n\n\nNo transport.\n\n\n\n\n\n\nTRANSPORT_LOCAL\n\n\n0x0001\n\n\nThe local transport.\n\n\n\n\n\n\nTRANSPORT_BLUETOOTH\n\n\n0x0002\n\n\nBluetooth transport.\n\n\n\n\n\n\nTRANSPORT_WLAN\n\n\n0x0004\n\n\nWireless local area network transport.\n\n\n\n\n\n\nTRANSPORT_WWAN\n\n\n0x0008\n\n\nWireless wide area network transport (not supported).\n\n\n\n\n\n\nTRANSPORT_LAN\n\n\n0x0010\n\n\nWired local area network transport.\n\n\n\n\n\n\nTRANSPORT_ICE\n\n\n0x0020\n\n\nICE (Interactive Connectivity Establishment) transport (not supported).\n\n\n\n\n\n\nTRANSPORT_WFD\n\n\n0x0080\n\n\nWi-Fi Direct transport (not supported).\n\n\n\n\n\n\nTRANSPORT_ANY\n\n\n0xFFFF \n ~TRANSPORT_WFD\n\n\nAny transport except Wi-Fi Direct.\n\n\n\n\n\n\n\n\nCurrently, the AllJoyn system's WLAN and LAN transports are\nsupported by a single underlying TCP transport.\n\n\nRouting node transport\n\n\nEach transport establishes and maintains connectivity based on\nthe underlying physical transport it supports. Based on the\ntype of underlying physical transport, the actual connectivity\nbetween two routing nodes in an AllJoyn network can be either\nsingle-hop or multi-hop. An AllJoyn distributed bus is an\noverlay network whose topology does not necessarily map directly\nto the topology of the underlying network. If an application\nhas no preference, it can provide TRANSPORT_ANY and allow the\nAllJoyn system to determine which transport to use.\n\n\nThe most commonly used Routing Node-to-Routing Node transports\nin the AllJoyn system are based on the IP family of transport\nmechanisms: TCP/IP and UDP/IP. These ISO layer 3 and 4 mechanisms\nare almost universally supported across the AllJoyn platforms\nof interest. Although from a high-level perspective, they\naccomplish the same objectives, at closer examination the\ngo about things slightly differently and therefore have different\nstrengths and weaknesses.\n\n\nTCP\n\n\nTCP and UDP are fairly complementary protocols, which is why\nthey are both present in the IP stack. TCP is a relatively\ncomplicated connection-based protocol that allows applications\nto send data reliably from one side to another. If data is\nlost, it is retransmitted automatically by TCP. The transmitted\ndata is stream-based which means that it is sent and received\nas a sequence of bytes that are arbitrarily (from the point\nof view of the sender) broken up into network packets.\nIn order to operate over the wider Internet, streams of TCP data\nare flow-controlled and TCP uses congestion-avoidance mechanisms\nto prevent congestion collapse in the presence of (many) multiple streams.\n\n\nUDP\n\n\nUDP, on the other hand, is a simple, high-speed \"wrapper\" around\nthe lower-level network layer (IP) functions provided to move data.\nUDP is inherently connectionless and data is sent in so-called\ndatagrams which are discrete \"packages\". UDP is not a connection-based\nprotocol; nor does it provide any reliability guarantees. There is\nno flow control nor is there congestion avoidance functionality present in UDP.\n\n\nThese low-level transport characteristics percolate up into the\ncorresponding AllJoyn Transports which take advantage of those\ncharacteristics to more efficiently accomplish the goals of applications.\n\n\nSince underlying layer 4 mechanisms can provide very different\nqualities of service, one should infer that the choice of\nAllJoyn TransportMask, and therefore Transport, can have significant\neffects on the quality of service of an AllJoyn Message flow.\nMaking such choices effectively is the subject of the remainder\nof this document.\n\n\nTransportMask\n\n\nAs shown in \nAllJoyn TransportMask definition\n,\na number of TransportMask-related symbols are defined as of\nthis writing. It is the case (for historical reasons) that although\nthey are associated with different bits, the symbols TRANSPORT_TCP,\nTRANSPORT_WLAN, TRANSPORT_WWAN, TRANSPORT_LAN all refer to the\nAllJoyn TCP Transport. It is recommended that only the symbols\nTRANSPORT_TCP be used to refer to the AllJoyn TCP Transport in\norder to minimize confusion. TRANSPORT_NONE is simply a constant\ndefined to be none of the transports, which isn't particularly useful.\nThe Wi-Fi Direct Transport (TRANSPORT_WFD) is not currently supported.\nThe implication is that only the following TransportMask definitions\nshould be used to refer to specific AllJoyn Transports:\n\n TRANSPORT_TCP\n\n TRANSPORT_UDP\n\n\nRecommendation 1\n\n\n\n\nDo not refer specifically to transports that are present for\nhistorical reasons such as TRANSPORT_WLAN, TRANSPORT_WWAN, or\nTRANSPORT_LAN; neither refer to currently unsupported transports\nsuch as TRNSPORT_WFD. Instead, prefer currently defined transports --\nTRANSPORT_TCP or TRANSPORT_UDP.\n\n\n\n\nAs mentioned above, symbols defining groups of transports are also provided:\n\n\n\n\nTRANSPORT_IP - Describes both TRANSPORT_TCP and TRANSPORT_UDP\n\n\nTRANSPORT_ANY - Refers to all currently defined transports\nthat are not considered experimental.\n\n\nTRANSPORT_ALL - It is not recommended to use TRANSPORT_ALL\nunless there is a specific need to include all experimental\nAllJoyn Transports.\n\n\n\n\nMore typically, one would include specific experimental transports\non an as-needed basis.\n\n\nIf there is no need to select an AllJoyn Transport in order\nto take advantage of some specific quality of service, one\nwould pass TRANSPORT_ANY to all advertisement-, discovery-\nand session-related APIs. As a result, the AllJoyn Transport\nselected by an AllJoyn application is on a first-discovered\nbasis. That is, the first advertisement that happens to be\nreceived is the one that will drive the selection of transport.\nPresumably this is fine since by selecting TRANSPORT_ANY both\nthe advertising and discovering Bus Attachment are effectively\ndeclaring that \"anything I discover is fine\".\n\n\nRecommendation 2\n\n\n\n\nIf the primary concern of a distributed application is the\nability to connect, that is, when neither the client nor the\nservice side of a communicating pair of Bus Attachments has\nany particular quality of service guarantee, prefer TRANSPORT_ANY\nand simply join a Session to the Bus Attachment corresponding\nto the first advertisement received.\n\n\n\n\nDepending on the availability of AllJoyn Transport, this choice\nmay result in the selection of a very high-speed IP-based Transport\nsuch as TCP or UDP. It may also result in a communication link\nover a personal area network connection which may be relatively slow.\nSince the overriding goal is communication irrespective of\nmechanism, such choices are presumed to be appropriate.\n\n\nIn order to make any more meaningful choices, one must understand\nsome of the qualities of the existing AllJoyn Transports\nwhich might affect such a choice.\n\n\nHomogeneous Multipoint Sessions\n\n\nOne of the connectivity options in the AllJoyn system is that of a\nmultipoint Session.  This option allows clients to send AllJoyn\nMessages to multiple destinations that are members of the Session.\nIt may be desirable to ensure that all members of a multipoint\nSesion be reachable over the same kind of transport.  This is\nreferred to as a homogeneous multipoint Session.\n\n\nIt is also the case that as of this writing (release 14.12) there\nis a defect in the AllJoyn Routing Node code that causes problems\nwith heterogeneous multipoint sessions (mutipoint sessions with\nmembers reached through different Transports).  If the system\nhappens to preferentially select different advertisements on\ndifferent hosts, using TRANSPORT_ANY could cause connectivity\nproblems.\n\n\nBecause of these situations, one should specify a single transport\ntype for multipoint sessions.\n\n\nRecommendation 3\n\n\n\n\nConsider making a single explicit choice of transport when\nusing multipoint sessions to avoid different qualities of service\namong session members and to work around a code defect in release\n14.12 of the Routing Node.\n\n\n\n\nAllJoyn TCP Transport\n\n\nThe AllJoyn system  provides a Transport based on the TCP/IP protocol.\nTCP/IP is the workhorse of the current Internet, has a long history,\nand works well over a very large range of links of it rates\nand signal qualities.\n\n\nTCP, defined by RFC-793, has been used extensively in many\ndisparate environments. From this, one can infer that since\nTCP/IP is almost always a good choice for communicating over\nthe greater Internet, so the TCP Transport is almost always\na good choice for AllJoyn Transport mechanism.\n\n\nIt is worthwhile to understand, however, that while there\nare a number of things that TCP is very good at, there are\nalso some things that TCP does not do well.\n\n\nAdvantages to using TCP\n\n\nTCP/IP provides a connection-oriented, error-checked, ordered,\nreliably delivered stream of bytes between communication endpoints.\nThis kind of stream is often called a flow, and corresponds\nto the transmission mechanism underlying the concept of a\nSession in the AllJoyn system.\n\n\nThe AllJoyn system converts Messages (Method Calls, Replies, Signals, etc.)\ninto a collection of bytes and passes them to TCP. In turn,\nTCP takes the bytes that make up sequences of Messages and\nbreaks them up into whatever TCP considers to be the best-sided\n\"chunks\" of data to send. TCP calls these chunks \"segments\"\nand it is these segments that are sent to the IP layer.\nNote that there is no necessary correlation between the\ndelimitation of TCP segments and AllJoyn Messages. These chunks\nare delivered to the remote side of a connection, reorganized\ninto a stream of bytes and delivered to the AllJoyn system.\nIt is the stream of bytes that is delivered between AllJoyn\ninstances and there are no record markers inserted automatically\nby TCP - TCP provides a byte stream service.\n\n\nThe upshot of this is that TCP is very good at moving streams\nof bytes from one place to another over internetworks of\npossibly dramatically differing and somewhat typically\nasymmetric link speeds. TCP is typically configured by default\nwith quite large buffers allowing for high bandwidth-delay\nproducts over the current Internet; but also provides flow\ncontrol to prevent a fast writer from overrunning a slow reader.\nBasically, TCP is designed to be very good at transferring\nlarge amounts of data; and it accomplishes this goal very well.\nIf the traffic pattern presented by a distributed application\npresents as a sequence of very large AllJoyn Messages it\nappears to the underlying system as a byte stream to be transferred.\n\n\nRecommendation 4\n\n\n\n\nIf the primary concern of a distributed application is the\nability to transfer large amounts of data reliably, prefer the\nAllJoyn TCP Transport, and selectively join Sessions only to\nBus Attachments advertising over TRANSPORT_TCP.\n\n\n\n\nDisadvantages to using TCP (reasons to use UDP)\n\n\nIn order to accommodate the wildly varying qualities of service\nof the worldwide Internet, TCP is also quite aggressive about\ntrying to get data sent from one end to another. This means\nthat it will retry transmissions for quite a long time before\ngiving up. This can translate into a significant delay (13 minutes,\nin many cases) before a Bus Attachment is notified of a link failure.\nLink failure can happen frequently in mobile environments as\ndevices move from one access point to another, for example.\n\n\nTCP does provide a keep-alive mechanism designed to mitigate\nthis problem, but support is platform-specific and spotty.\nThe AllJoyn system provides a layer 5 mechanism called LinikTimeout to\nimplement a device independent link failure detection mechanism.\n\n\nRecommendation 5\n\n\n\n\nIf using the TCP Transport, consider using the LinkTimeout\nfeature to quickly detect link failures; or consider the UDP Transport.\n\n\n\n\nThe counterpoint to the observation about TCP trying very hard\nto get data from one side of a connection to another is\nexactly that. TCP tries many times over a long period of time\nto get data to the remote host  . Thus, if the application\nrequires such intensive retry and can tolerate long delays\nbefore links are declared down, TCP will be much more aggressive\nin trying to get data across a link.\n\n\nRecommendation 6\n\n\n\n\nIf the primary concern of a distributed application is the\nability to move data reliably, prefer the AllJoyn TCP Transport\nand do not set a LinkTimeout.\n\n\n\n\nTo avoid congestion collapse of the greater internetwork,\nTCP implements significant congestion control mechanisms\nare used in TCP. These include slow-start, which begins transfers\nslowly in order to avoid filling the internet \"pipe\" with data\nwhich might be dropped due to congestion. Because slow-start\nwill delay use of full-bandwidth capabilities of the network,\nintermittent or infrequent traffic patterns in which a device\nis idle for a time, then sends a burst of data, and then goes\nidle again may run afoul of slow-start. Since the AllJoyn\nUDP Transport is designed to run only on local subnetworks,\nit does not implement slow-start.\n\n\nRecommendation 7\n\n\n\n\nIf the traffic pattern of the distributed application\nconsists of bursts of significant amounts of data between\nfairly extended periods of idling, consider using the UDP Transport\nto avoid effects of TCP slow-start.\n\n\n\n\nThere have been several additions to TCP to accommodate call-and-response\ntraffic patterns, such as delayed ACK and the Nagle algorithm.\nNonetheless, TCP is oriented toward transferring large amounts\nof data. TCP is not very good at sending a small amount of data\nand receiving a small amount of data in return - exactly the\nkind of interactions typical of Remote Procedure Call; and the\nAllJoyn system is, at its heart, an RPC system.\n\n\nRecommendation 8\n\n\n\n\nIf the traffic pattern of the distributed application\nconsists of Remote Procedure Calls, especially with call and\nreply Messages of length less than 1480 bytes, consider using\nthe UDP Transport which is optimized for this kind of interaction.\n\n\n\n\nSince TCP is a reliable byte stream protocol, its whole reason\nfor being is to transfer all bytes from one end to another.\nThis is not always desirable. In a real-time system, it is\noften the case that out-of-date data is worthless. Such\nout-of-date data simply consumes network and host resources\nunnecessarily. Since TCP simply transfers streams of bytes\nreliably, there is no opportunity to drop worthless data once\nit has been delivered to the system. The UDP Transport has\nbeen optimized to allow AllJoyn Messages to be timestamped\nand will drop the UDP datagrams that make up an AllJoyn Message\nat any time the datagrams are found to be out of date.\n\n\nRecommendation 9\n\n\n\n\nIf the traffic pattern of the distributed application includes messages\nwith a finite Time to Live (TTL), consider using the UDP Transport\nwhich provides significantly improved support for avoiding unnecessary\ntransmission of Messages with expired TTL.\n\n\n\n\nTCP provides a three-way handshake consisting of SYN, SYN+ACK,\nand ACK segments. This TCP-specific messaging must complete\nbefore any user data may be transferred. Since the AllJoyn system\nis derived from D-Bus, and D-Bus requires a SASL authentication phase,\nThe AllJoyn system must implement a SASL exchange for D-Bus compatibility on\nTCP. The AllJoyn system also requires its own handshake consisting of the\nexchange of a BusHello Message and a HelloReply Reply message.\nThus, connection establishment using TCP requires the following:\n\n At least three packets be exchanged for TCP connection establishment\n\n Four packets for the SASL exchange and ACKs\n* Four packets for BusHello, reply and ACK.\n\n\nAdditionally, TCP requires a four-way handshake for connection termination.\n\n\nThe UDP Transport uses much simplified signaling and, since\nit is an AllJoyn-specific protocol, piggybacks AllJoyn session\nestablishment messages on top of the ARDP SYN and SYN+ACK exchanges.\nConnection termination is handled in the UDP Transport at the\nsession layer, so only one or two packets are required for\nconnection termination - four or five packets of overhead,\nas compared to eleven. At a round-trip delay of six milliseconds,\nthis can be a significant improvement.\n\n\nRecommendation 10\n\n\n\n\nIf the traffic pattern of the distributed application includes\nfrequent connection establishment and termination, consider\nusing the UDP Transport which requires significantly fewer\npackets to establish and terminate connections.\n\n\n\n\nAllJoyn UDP Transport\n\n\nOverview\n\n\nThe AllJoyn system provides a Transport based on the UDP/IP protocol.\nUDP is a very simple, datagram-oriented (packet-based) layer 4 protocol.\nEach output operation by an application will produce one\ndatagram which, modulo fragmentation, is sent to the remote\ndestination   which receives it as one input operation.\n\n\nUnlike TCP, UDP provides no guarantees of ordering or delivery.\nSince AllJoyn Message streams do provide such guarantees,\na reliability layer must be provided to use UDP in the AllJoyn system.\nThe reliability and ordering guarantees are provided by the\nAllJoyn Reliable Datagram Protocol (ARDP). Additionally,\nARDP provides the fragmentation mechanism required to send\nmaximal AllJoyn Messages (about 130 Kbytes) over UDP\nwhich has a maximum datagram size of 64 Kbytes.\n\n\nNOTE:\n For more information about UDP, review RFC 768: User\nDatagram Protocol and RFC 908: Reliable Data Protocol.\n\n\nAdvantages to using UDP\n\n\nThe goal of the UDP Transport is to address the areas of\nweakness that the TCP Transport presents when executing call\nand response traffic patterns. The UDP Transport does not do\nany kind of congestion control since it is expected to operate\nonly on directly connected subnetworks. It therefore does not\ndo slow-start and lost packets are not considered an indication\nof congestion, which is not necessarily an appropriate inference\nin wireless networks.\n\n\nRecommendation 11\n\n\n\n\nIf the environment in which applications are expected to be\ndeployed corresponds to communication over wireless physical\nlayers and communication is expected to be only on the directly\nconnected subnetwork, consider the UDP Transport.\n\n\n\n\nSince the UDP Transport is a packet-oriented transport, it is\npossible to map AllJoyn Messages directly into packets.\nThis allows for selectively dropping the constituent packets\nof a packet stream according to expired TTL. Since this selective\ndropping of AllJoyn Messages cannot be done in TCP, when the\noffered load of a network   exceeds its capabilities, the TCP Transport\ntends to \"back up\" with the in-flight segments, all consisting\nof data which will be ultimately dropped. In extreme cases,\nthe network can be completely congested with data that will\nbe discarded, the end result being no interesting (on-time)\ndata is transferred.\n\n\nRecommendation 12\n\n\n\n\nIf applications use the Time to Live (TTL) option in Messages,\nconsider the UDP Transport which provides a much improved ability\nto drop non-interesting (not on-time) data.\n\n\n\n\nSince UDP Datagrams are not associated with specific sockets in\nthe BSD Sockets API, it is possible for a single socket to\nsupport multiple ARDP connections. This corresponds to the\nability of multiple AllJoyn Sessions to run over a single socket.\nIt also turns out that File Descriptors must be allocated in\nan AllJoyn Routing Node to handle events related to a Session\nand communication endpoint management. Since both sockets,\nand more generally file descriptors, are operating system\nresources which may be limited, specifying the UDP Transport\ncan allow many more connections on a given host system.\n\n\nRecommendation 13\n\n\n\n\nIf socket or file descriptor resource usage is anticipated\nto be a problem, consider specifying the UDP Transport which\nuses fewer resources per connection than the TCP Transport.\n\n\n\n\nTuning the TCP Transport\n\n\nEach system that provides a networking subsystem and TCP/IP\nprotocol suite usually presents a number of tunable parameters\nfor those subsystems. In Linux systems, these parameters are\ntypically accessed through the sysctl interface; in Windows,\nthere will be a number of corresponding Registry entries.\nOperating system providers will initialize these various\nparameters with values that provide good tradeoffs for the\nsystems and environments involved.\n\n\nThere is a wealth of information regarding tuning these network\nand TCP parameters available on the Internet. We therefore will\nnot duplicate that information here. When tuning for the AllJoyn system,\nremember that sequences of AllJoyn Messages are converted into\nbyte streams and ultimately sent to TCP/IP by the AllJoyn TCP Transport.\nIt is the linearized AllJoyn message stream that is the traffic\npattern to be optimized for.\n\n\nIt is a testament to TCP and the selection of these various\ntuning parameters that the vast majority of system users will\nnot attempt to change the underlying TCP configuration. In most\ncases, the system is left as-shipped and it will work sufficiently well.\n\n\nWireshark can provide valuable insights into the TCP messaging\nthat occurs in AllJoyn systems. The AllJoyn system has provided\na dissector to the Wireshark project which is now included in\nthe standard Wireshark distributions.\n\n\nTuning the UDP Transport\n\n\nEach system that provides a networking subsystem and TCP/IP\nprotocol suite usually presents a number of tunable parameters.\nIn Linux systems, these parameters are typically accessed\nthrough the \nsysctl\n interface; and in Windows there will be a\nnumber of corresponding Registry entries. Operating System\nproviders will initialize these various parameters with values\nthat provide good tradeoffs for the systems and environments involved.\n\n\nThere is a wealth of information regarding tuning these network\nand UDP parameters available on the Internet. We therefore\nwill not duplicate that information here. When tuning for\nthe AllJoyn system, remember that sequences of AllJoyn Messages\nare converted into UDP Datagrams by the AllJoyn UDP Transport.\nIt is the sequence of AllJoyn messages sent as datagrams that\nforms the traffic pattern to be optimized for.\n\n\nSocket buffers\n\n\nSince the vast majority of Internet traffic is sent over TCP,\ntuning the UDP protocol has become somewhat of a second-order\nproblem. The socket buffers provided by default for UDP are\noften quite small, on the order of 128 Kbytes. While this is\nsufficient for many uses of UDP such as name services, it is\nsmall when compared to the bandwidth-delay product of modern\nWi-Fi systems.\n\n\nNOTE:\n An 802.11n system using Modulation and Coding Scheme (MCS) 11\ncan run at 300 megabits per second. Given a round-trip time of\n6 msec, this corresponds to a buffer size of 225 Kbytes.\n\n\nOne thing to keep in mind when considering buffer sizes for\nthe UDP Transport is that one socket may be shared by a number\nof Sessions. The UDP Transport actually provides additional\nbuffering on a per-connection basis in order to accommodate\nat least one maximally sized AllJoyn Message (about 130 Kbytes)\n\n\nWireshark can provide valuable insights into the UDP messaging\nthat occurs in AllJoyn systems. The AllJoyn system has provided\na dissector to the Wireshark project which is now included in\nthe standard Wireshark distributions.\n\n\nARDP configuration\n\n\nAlong with the UDP subsystem, the UDP Transport provides the\nARDP reliability layer (detailed in \nOverview\n.\nThere are a number of configurable parameters corresponding\nto ARDP, but two of those configuration items are of utmost\nimportance: SEGBMAX and SEGMAX.\n\n The SEGBMAX parameter sets the limit on how large of a\nUDP Datagram that ARDP will use when fragmenting AllJoyn Messages.\n\n The SEGMAX parameter sets the number of datagrams that can be\nin-transit at any time.\n\n\nSEGBMAX can be thought of as corresponding loosely to the\nMaximum Segment Size (MSS) of TCP and SEGMAX can be thought of\nas corresponding to the receive window size.\n\n\nTypically, the primary use case of the UDP Transport will be\nto transfer relatively small RPC Messages and the corresponding\nMessage Reply. The SEGMAX and SEGBMAX parameters are irrelevant\nif transferring messages and replies of less than 1480 bytes\nsince all data fits into one packet. However when transferring\nlarger amounts of data, it is possible to optimize ARDP in\nways that can make it significantly faster than TCP.\n\n\nTuning scenario\n\n\nWhile the level of tuning described below will be rarely needed,\nthe scenario is provided for completeness and as an illustration\nof how the UDP Transport works.\n\n\nNOTE:\n This analysis was done using the default network and\nUDP protocol settings of the Linux system on which the experiments were run.\n\n\nSEGBMAX setting\n\n\nThe following figure shows a sensitivity analysis for the\nsetting of SEGBMAX. The time measured on the y-axis is the\ntime to transfer a 10 megabyte file in maximal (130 Kbytes)\nAllJoyn Messages.\n\n\n\n\nFigure:\n SEGBMAX sensitivity analysis\n\n\nSince UDP is a user-level protocol, all acknowledgments must\nbe done at user privilege  , which implies a context switch\nfor each packet. If SEGMAX is chosen to be too small, or if\nlarge amounts of data are sent in very small datagrams, much\ntime is spent simply context switching to ACK data - the system thrashes.\nAs SEGMAX approaches one packet (1480 byte payload) and moves\nupward toward the maximum UDP Datagram size, the system spends\nless and less time having to ACK individual smaller datagrams.\nThis tendency is counteracted, however, by the fact that as\nUDP datagram size increases, the number of actual PHY packets\nthat must be resent in the presence of a datagram loss also\nincreases. These pressures tend to cancel each other out in\npractice. In the data below, there is a local minimum at\nSEGBMAX of 4400 bytes which represents the optimal choice\nfor the 54 Mbit per second Wi-Fi.\n\n\nIn the test runs shown in the SEGBMAX sensitivity analysis,\nthe combination of SEGBMAX and SEGMAX was held constant at\nthe minimal value required to accommodate a maximal AllJoyn Message.\n\n\nSEGMAX setting\n\n\nThe following figure shows a sensitivity analysis for SEGMAX\nwith SEGBMAX held constant at 4440 bytes.\n\n\n\n\nFigure:\n SEGMAX sensitivity analysis\n\n\nThe plot starts with SEGMAX at 31 and plots the time to\ntransfer a 10 megabyte file for each SEGMAX value. It can\nbe seen that there is an underlying step function that\njumps at SEGMAX values of 31, 62, and 93. These correspond\nto the values at which one, two and three maximal AllJoyn Messages\ncan be buffered in the system. There is a significant gain\nto double-buffering AllJoyn Messages at SEGMAX of 62 and\ngreater; and there is an incremental gain to triple-buffering\nAllJoyn Messages at SEGMAX of 93.\n\n\nNotice that the UDP Transport is slower than the TCP Transort\nwith single-buffering, slightly faster with double-buffering\nand significantly (15-20%) faster with triple buffering.\nSince there is no statistically significant improvement\npast triple-buffering, a good choice of SEGBMAX and SEGMAX\ncan be shown to be SEGBMAX = 4440 bytes, and SEGMAX = 93 datagrams.\nThis is in fact the choice made as the default for the ARDP configuration.\n\n\nIt is possible that different systems could have specific\ncharacteristics that change this analysis. For example, if the\nUDP Transport is run on a host device for which context switch\ntime is much higher and the network much cleaner, the tradeoff\nof context switch time versus network retransmission may be at\na different point. It is possible that different networking\nenvironments may require more datagram buffering to fill the\nin-transit data; or it may also be the case that triple-buffering\nis overkill on much slower networks.\n\n\nConclusion\n\n\nAs they are configured by default, both the UDP Transport\nand the TCP Transport provide a level of service as defined\nby the abstract notion of an AllJoyn Transport. Although\nthey both provide the same services, the characteristics of\nthe underlying transport mechanisms on which they are based percolate up.\n\n\nCharacteristics of underlying transports may be viewed as\neither advantages or disadvantages depending on the applications\nusing them and the requirements of those applications. Specific\ntraffic patterns generated by distributed applications may\nimply that the choice of one of the AllJoyn Transports can\nprovide significantly better levels of service than others.\n\n\nIt may also be the case that no specific choice of AllJoyn Transport\nis actually the best choice. In such situations, the fact that\na connection, any connection, is possible overrides the qualities\nof service possible from underlying transport mechanisms.\n\n\nIn any case, understanding the underlying traffic of a\ndistributed application and how AllJoyn Transports handle\nthat traffic allows for optimizing the distributed application behavior.",
            "title": "Alljoyn transports best practices"
        },
        {
            "location": "/develop/api-guide/core/alljoyn-transports-best-practices/#alljoyn-transports-best-practices",
            "text": "",
            "title": "AllJoyn&trade; Transports Best Practices"
        },
        {
            "location": "/develop/api-guide/core/alljoyn-transports-best-practices/#introduction",
            "text": "Transports are based on ISO OSI layer 4 - transport layer - mechanisms.\nSuch transport mechanisms are typically optimized for some set\nof operating characteristics or network environments. The resulting\noptimizations and environments in the layer 4 transport mechanism\nwill result in different qualities being presented by AllJoyn Transports\nthat use them.  In order to be called an AllJoyn Transport, all Transports must provide\nthe same capabilities, however, since the underlying mechanisms provide\ndifferencing amounts of support for various functions, some layer 4\ntransports, and therefore AllJoyn Transports will be more suitable\nto some distributed applications.  This document discusses how to determine which AllJoyn Transports\nmight be more suitable than others to different application traffic\npatterns and requirements.",
            "title": "Introduction"
        },
        {
            "location": "/develop/api-guide/core/alljoyn-transports-best-practices/#alljoyn-transports",
            "text": "One of the fundamental abstractions in an AllJoyn system is that\nof a Transport. An AllJoyn Transport provides an abstract\nrepresentation of a collection of underlying mechanisms\nthat provides four basic functions  :   The ability to discover remote AllJoyn Bus Attachments or Interfaces  The ability to advertise local AllJoyn Bus Attachments to\nthe greater AllJoyn system  The ability to establish traffic flows to other AllJoyn devices  The ability to move AllJoyn Messages (representing Method Calls,\nMethod Replies or Signals) between devices.   In the ISO OSI seven-layer model, the transport layer is\nresponsible for moving data sequences from one host to another\nand maintaining appropriate transport-specific qualities of\nservice. One measure of quality of service, for example, is\nreliable and ordered delivery of data. TCP and UDP both move\ndata sequences from one host to another, and have different\nquality of service guarantees. TCP provides reliable, ordered\nbyte streams; and UDP provides datagram services with no\nguarantee of ordering or reliable delivery. TCP and UDP are\nthus both transport layer (layer 4) protocols in the ISO OSI model.  AllJoyn Transports make use of lower-level OS services like TCP\nor UDP in order to manage the actual movement of data sequences,\nand therefore sit above layer 4 in the OSI protocol stack.\nSince the AllJoyn Transport manages underlying connections\non behalf of the application layer (layer 7) the concept of\nAllJoyn Transport most closely matches the session layer\n(layer 5) of the ISO OSI model.  AllJoyn Messaging  The AllJoyn Message layer, which is responsible for marshaling\nand unmarshaling of Signals and Method Calls, can be thought\nof as residing in the presentation layer (layer 6) of the ISO OSI model;\nand the routing functionality of the AllJoyn Routing Node\ncan be thought of as lying above AllJoyn Transports (still in layer 5),\nbut below the Message layer at layer 6.  In the following figure, notice that the AllJoyn Bus Attachment\ncorresponds to the application layer in the seven-layer model\nin that it provides the interface between the network stack\nand the application itself. Bus Attachments provide functionality\nrequired by the application to create, marshal and unmarshal\nAllJoyn Messages. This functionality corresponds to translating\nbetween application and network data formats and therefore\ncorresponds to the presentation layer in the seven-layer model.   Figure:  Mapping of AllJoyn system and OSI layer transports  AllJoyn Messages are sent to a local Routing Node which is\nresponsible for selecting an AllJoyn Transport over which\na given Message must be sent. AllJoyn Transports are responsible\nfor controlling the dialogs between computers and therefore\ncorrespond to the session layer of the seven-layer model.\nMessages are sent to an OSI transport layer mechanism,\nfor example TCP or UDP, with suitable guarantees of service.\nThe transport layer passes byte streams or datagrams to the\nnetwork layer   and then down to the 802.11 MAC and PHY\nin the figure.  Supported AllJoyn transports  Since an AllJoyn Transport encapsulates the functions of\nmoving data sequences, connections, and advertisement and\ndiscovery, there are separate AllJoyn Transports for separate\nunderlying mechanisms. For example, the AllJoyn TCP Transport\nuses TCP/IP as the mechanism for moving data between Routing Nodes;\nthe AllJoyn UDP Transport uses UDP/IP as the mechanism; the\nAllJoyn Bluetooth (BT) Transport does the same for Bluetooth\nconnections, and the AllJoyn Local Transport uses UNIX domain sockets.  Often, the name given to an AllJoyn Transport echoes the method\nused in the underlying OSI layer 4 mechanism. For example, the\nAllJoyn TCP transport uses TCP/IP to move bits from one host\nto another; the AllJoyn UDP Transport uses UDP/IP to actually move bits.  AllJoyn applications may select the AllJoyn Transport that is\nactually used by choosing one or more TransportMask bits in\nappropriate AllJoyn APIs. The currently defined TransportMask\nbits are listed in the following table.  AllJoyn TransportMask definition     Transport name  Value  Description      TRANSPORT_NONE  0x0000  No transport.    TRANSPORT_LOCAL  0x0001  The local transport.    TRANSPORT_BLUETOOTH  0x0002  Bluetooth transport.    TRANSPORT_WLAN  0x0004  Wireless local area network transport.    TRANSPORT_WWAN  0x0008  Wireless wide area network transport (not supported).    TRANSPORT_LAN  0x0010  Wired local area network transport.    TRANSPORT_ICE  0x0020  ICE (Interactive Connectivity Establishment) transport (not supported).    TRANSPORT_WFD  0x0080  Wi-Fi Direct transport (not supported).    TRANSPORT_ANY  0xFFFF   ~TRANSPORT_WFD  Any transport except Wi-Fi Direct.     Currently, the AllJoyn system's WLAN and LAN transports are\nsupported by a single underlying TCP transport.  Routing node transport  Each transport establishes and maintains connectivity based on\nthe underlying physical transport it supports. Based on the\ntype of underlying physical transport, the actual connectivity\nbetween two routing nodes in an AllJoyn network can be either\nsingle-hop or multi-hop. An AllJoyn distributed bus is an\noverlay network whose topology does not necessarily map directly\nto the topology of the underlying network. If an application\nhas no preference, it can provide TRANSPORT_ANY and allow the\nAllJoyn system to determine which transport to use.  The most commonly used Routing Node-to-Routing Node transports\nin the AllJoyn system are based on the IP family of transport\nmechanisms: TCP/IP and UDP/IP. These ISO layer 3 and 4 mechanisms\nare almost universally supported across the AllJoyn platforms\nof interest. Although from a high-level perspective, they\naccomplish the same objectives, at closer examination the\ngo about things slightly differently and therefore have different\nstrengths and weaknesses.  TCP  TCP and UDP are fairly complementary protocols, which is why\nthey are both present in the IP stack. TCP is a relatively\ncomplicated connection-based protocol that allows applications\nto send data reliably from one side to another. If data is\nlost, it is retransmitted automatically by TCP. The transmitted\ndata is stream-based which means that it is sent and received\nas a sequence of bytes that are arbitrarily (from the point\nof view of the sender) broken up into network packets.\nIn order to operate over the wider Internet, streams of TCP data\nare flow-controlled and TCP uses congestion-avoidance mechanisms\nto prevent congestion collapse in the presence of (many) multiple streams.  UDP  UDP, on the other hand, is a simple, high-speed \"wrapper\" around\nthe lower-level network layer (IP) functions provided to move data.\nUDP is inherently connectionless and data is sent in so-called\ndatagrams which are discrete \"packages\". UDP is not a connection-based\nprotocol; nor does it provide any reliability guarantees. There is\nno flow control nor is there congestion avoidance functionality present in UDP.  These low-level transport characteristics percolate up into the\ncorresponding AllJoyn Transports which take advantage of those\ncharacteristics to more efficiently accomplish the goals of applications.  Since underlying layer 4 mechanisms can provide very different\nqualities of service, one should infer that the choice of\nAllJoyn TransportMask, and therefore Transport, can have significant\neffects on the quality of service of an AllJoyn Message flow.\nMaking such choices effectively is the subject of the remainder\nof this document.  TransportMask  As shown in  AllJoyn TransportMask definition ,\na number of TransportMask-related symbols are defined as of\nthis writing. It is the case (for historical reasons) that although\nthey are associated with different bits, the symbols TRANSPORT_TCP,\nTRANSPORT_WLAN, TRANSPORT_WWAN, TRANSPORT_LAN all refer to the\nAllJoyn TCP Transport. It is recommended that only the symbols\nTRANSPORT_TCP be used to refer to the AllJoyn TCP Transport in\norder to minimize confusion. TRANSPORT_NONE is simply a constant\ndefined to be none of the transports, which isn't particularly useful.\nThe Wi-Fi Direct Transport (TRANSPORT_WFD) is not currently supported.\nThe implication is that only the following TransportMask definitions\nshould be used to refer to specific AllJoyn Transports:  TRANSPORT_TCP  TRANSPORT_UDP  Recommendation 1   Do not refer specifically to transports that are present for\nhistorical reasons such as TRANSPORT_WLAN, TRANSPORT_WWAN, or\nTRANSPORT_LAN; neither refer to currently unsupported transports\nsuch as TRNSPORT_WFD. Instead, prefer currently defined transports --\nTRANSPORT_TCP or TRANSPORT_UDP.   As mentioned above, symbols defining groups of transports are also provided:   TRANSPORT_IP - Describes both TRANSPORT_TCP and TRANSPORT_UDP  TRANSPORT_ANY - Refers to all currently defined transports\nthat are not considered experimental.  TRANSPORT_ALL - It is not recommended to use TRANSPORT_ALL\nunless there is a specific need to include all experimental\nAllJoyn Transports.   More typically, one would include specific experimental transports\non an as-needed basis.  If there is no need to select an AllJoyn Transport in order\nto take advantage of some specific quality of service, one\nwould pass TRANSPORT_ANY to all advertisement-, discovery-\nand session-related APIs. As a result, the AllJoyn Transport\nselected by an AllJoyn application is on a first-discovered\nbasis. That is, the first advertisement that happens to be\nreceived is the one that will drive the selection of transport.\nPresumably this is fine since by selecting TRANSPORT_ANY both\nthe advertising and discovering Bus Attachment are effectively\ndeclaring that \"anything I discover is fine\".  Recommendation 2   If the primary concern of a distributed application is the\nability to connect, that is, when neither the client nor the\nservice side of a communicating pair of Bus Attachments has\nany particular quality of service guarantee, prefer TRANSPORT_ANY\nand simply join a Session to the Bus Attachment corresponding\nto the first advertisement received.   Depending on the availability of AllJoyn Transport, this choice\nmay result in the selection of a very high-speed IP-based Transport\nsuch as TCP or UDP. It may also result in a communication link\nover a personal area network connection which may be relatively slow.\nSince the overriding goal is communication irrespective of\nmechanism, such choices are presumed to be appropriate.  In order to make any more meaningful choices, one must understand\nsome of the qualities of the existing AllJoyn Transports\nwhich might affect such a choice.  Homogeneous Multipoint Sessions  One of the connectivity options in the AllJoyn system is that of a\nmultipoint Session.  This option allows clients to send AllJoyn\nMessages to multiple destinations that are members of the Session.\nIt may be desirable to ensure that all members of a multipoint\nSesion be reachable over the same kind of transport.  This is\nreferred to as a homogeneous multipoint Session.  It is also the case that as of this writing (release 14.12) there\nis a defect in the AllJoyn Routing Node code that causes problems\nwith heterogeneous multipoint sessions (mutipoint sessions with\nmembers reached through different Transports).  If the system\nhappens to preferentially select different advertisements on\ndifferent hosts, using TRANSPORT_ANY could cause connectivity\nproblems.  Because of these situations, one should specify a single transport\ntype for multipoint sessions.  Recommendation 3   Consider making a single explicit choice of transport when\nusing multipoint sessions to avoid different qualities of service\namong session members and to work around a code defect in release\n14.12 of the Routing Node.",
            "title": "AllJoyn Transports"
        },
        {
            "location": "/develop/api-guide/core/alljoyn-transports-best-practices/#alljoyn-tcp-transport",
            "text": "The AllJoyn system  provides a Transport based on the TCP/IP protocol.\nTCP/IP is the workhorse of the current Internet, has a long history,\nand works well over a very large range of links of it rates\nand signal qualities.  TCP, defined by RFC-793, has been used extensively in many\ndisparate environments. From this, one can infer that since\nTCP/IP is almost always a good choice for communicating over\nthe greater Internet, so the TCP Transport is almost always\na good choice for AllJoyn Transport mechanism.  It is worthwhile to understand, however, that while there\nare a number of things that TCP is very good at, there are\nalso some things that TCP does not do well.  Advantages to using TCP  TCP/IP provides a connection-oriented, error-checked, ordered,\nreliably delivered stream of bytes between communication endpoints.\nThis kind of stream is often called a flow, and corresponds\nto the transmission mechanism underlying the concept of a\nSession in the AllJoyn system.  The AllJoyn system converts Messages (Method Calls, Replies, Signals, etc.)\ninto a collection of bytes and passes them to TCP. In turn,\nTCP takes the bytes that make up sequences of Messages and\nbreaks them up into whatever TCP considers to be the best-sided\n\"chunks\" of data to send. TCP calls these chunks \"segments\"\nand it is these segments that are sent to the IP layer.\nNote that there is no necessary correlation between the\ndelimitation of TCP segments and AllJoyn Messages. These chunks\nare delivered to the remote side of a connection, reorganized\ninto a stream of bytes and delivered to the AllJoyn system.\nIt is the stream of bytes that is delivered between AllJoyn\ninstances and there are no record markers inserted automatically\nby TCP - TCP provides a byte stream service.  The upshot of this is that TCP is very good at moving streams\nof bytes from one place to another over internetworks of\npossibly dramatically differing and somewhat typically\nasymmetric link speeds. TCP is typically configured by default\nwith quite large buffers allowing for high bandwidth-delay\nproducts over the current Internet; but also provides flow\ncontrol to prevent a fast writer from overrunning a slow reader.\nBasically, TCP is designed to be very good at transferring\nlarge amounts of data; and it accomplishes this goal very well.\nIf the traffic pattern presented by a distributed application\npresents as a sequence of very large AllJoyn Messages it\nappears to the underlying system as a byte stream to be transferred.  Recommendation 4   If the primary concern of a distributed application is the\nability to transfer large amounts of data reliably, prefer the\nAllJoyn TCP Transport, and selectively join Sessions only to\nBus Attachments advertising over TRANSPORT_TCP.   Disadvantages to using TCP (reasons to use UDP)  In order to accommodate the wildly varying qualities of service\nof the worldwide Internet, TCP is also quite aggressive about\ntrying to get data sent from one end to another. This means\nthat it will retry transmissions for quite a long time before\ngiving up. This can translate into a significant delay (13 minutes,\nin many cases) before a Bus Attachment is notified of a link failure.\nLink failure can happen frequently in mobile environments as\ndevices move from one access point to another, for example.  TCP does provide a keep-alive mechanism designed to mitigate\nthis problem, but support is platform-specific and spotty.\nThe AllJoyn system provides a layer 5 mechanism called LinikTimeout to\nimplement a device independent link failure detection mechanism.  Recommendation 5   If using the TCP Transport, consider using the LinkTimeout\nfeature to quickly detect link failures; or consider the UDP Transport.   The counterpoint to the observation about TCP trying very hard\nto get data from one side of a connection to another is\nexactly that. TCP tries many times over a long period of time\nto get data to the remote host  . Thus, if the application\nrequires such intensive retry and can tolerate long delays\nbefore links are declared down, TCP will be much more aggressive\nin trying to get data across a link.  Recommendation 6   If the primary concern of a distributed application is the\nability to move data reliably, prefer the AllJoyn TCP Transport\nand do not set a LinkTimeout.   To avoid congestion collapse of the greater internetwork,\nTCP implements significant congestion control mechanisms\nare used in TCP. These include slow-start, which begins transfers\nslowly in order to avoid filling the internet \"pipe\" with data\nwhich might be dropped due to congestion. Because slow-start\nwill delay use of full-bandwidth capabilities of the network,\nintermittent or infrequent traffic patterns in which a device\nis idle for a time, then sends a burst of data, and then goes\nidle again may run afoul of slow-start. Since the AllJoyn\nUDP Transport is designed to run only on local subnetworks,\nit does not implement slow-start.  Recommendation 7   If the traffic pattern of the distributed application\nconsists of bursts of significant amounts of data between\nfairly extended periods of idling, consider using the UDP Transport\nto avoid effects of TCP slow-start.   There have been several additions to TCP to accommodate call-and-response\ntraffic patterns, such as delayed ACK and the Nagle algorithm.\nNonetheless, TCP is oriented toward transferring large amounts\nof data. TCP is not very good at sending a small amount of data\nand receiving a small amount of data in return - exactly the\nkind of interactions typical of Remote Procedure Call; and the\nAllJoyn system is, at its heart, an RPC system.  Recommendation 8   If the traffic pattern of the distributed application\nconsists of Remote Procedure Calls, especially with call and\nreply Messages of length less than 1480 bytes, consider using\nthe UDP Transport which is optimized for this kind of interaction.   Since TCP is a reliable byte stream protocol, its whole reason\nfor being is to transfer all bytes from one end to another.\nThis is not always desirable. In a real-time system, it is\noften the case that out-of-date data is worthless. Such\nout-of-date data simply consumes network and host resources\nunnecessarily. Since TCP simply transfers streams of bytes\nreliably, there is no opportunity to drop worthless data once\nit has been delivered to the system. The UDP Transport has\nbeen optimized to allow AllJoyn Messages to be timestamped\nand will drop the UDP datagrams that make up an AllJoyn Message\nat any time the datagrams are found to be out of date.  Recommendation 9   If the traffic pattern of the distributed application includes messages\nwith a finite Time to Live (TTL), consider using the UDP Transport\nwhich provides significantly improved support for avoiding unnecessary\ntransmission of Messages with expired TTL.   TCP provides a three-way handshake consisting of SYN, SYN+ACK,\nand ACK segments. This TCP-specific messaging must complete\nbefore any user data may be transferred. Since the AllJoyn system\nis derived from D-Bus, and D-Bus requires a SASL authentication phase,\nThe AllJoyn system must implement a SASL exchange for D-Bus compatibility on\nTCP. The AllJoyn system also requires its own handshake consisting of the\nexchange of a BusHello Message and a HelloReply Reply message.\nThus, connection establishment using TCP requires the following:  At least three packets be exchanged for TCP connection establishment  Four packets for the SASL exchange and ACKs\n* Four packets for BusHello, reply and ACK.  Additionally, TCP requires a four-way handshake for connection termination.  The UDP Transport uses much simplified signaling and, since\nit is an AllJoyn-specific protocol, piggybacks AllJoyn session\nestablishment messages on top of the ARDP SYN and SYN+ACK exchanges.\nConnection termination is handled in the UDP Transport at the\nsession layer, so only one or two packets are required for\nconnection termination - four or five packets of overhead,\nas compared to eleven. At a round-trip delay of six milliseconds,\nthis can be a significant improvement.  Recommendation 10   If the traffic pattern of the distributed application includes\nfrequent connection establishment and termination, consider\nusing the UDP Transport which requires significantly fewer\npackets to establish and terminate connections.",
            "title": "AllJoyn TCP Transport"
        },
        {
            "location": "/develop/api-guide/core/alljoyn-transports-best-practices/#alljoyn-udp-transport",
            "text": "Overview  The AllJoyn system provides a Transport based on the UDP/IP protocol.\nUDP is a very simple, datagram-oriented (packet-based) layer 4 protocol.\nEach output operation by an application will produce one\ndatagram which, modulo fragmentation, is sent to the remote\ndestination   which receives it as one input operation.  Unlike TCP, UDP provides no guarantees of ordering or delivery.\nSince AllJoyn Message streams do provide such guarantees,\na reliability layer must be provided to use UDP in the AllJoyn system.\nThe reliability and ordering guarantees are provided by the\nAllJoyn Reliable Datagram Protocol (ARDP). Additionally,\nARDP provides the fragmentation mechanism required to send\nmaximal AllJoyn Messages (about 130 Kbytes) over UDP\nwhich has a maximum datagram size of 64 Kbytes.  NOTE:  For more information about UDP, review RFC 768: User\nDatagram Protocol and RFC 908: Reliable Data Protocol.  Advantages to using UDP  The goal of the UDP Transport is to address the areas of\nweakness that the TCP Transport presents when executing call\nand response traffic patterns. The UDP Transport does not do\nany kind of congestion control since it is expected to operate\nonly on directly connected subnetworks. It therefore does not\ndo slow-start and lost packets are not considered an indication\nof congestion, which is not necessarily an appropriate inference\nin wireless networks.  Recommendation 11   If the environment in which applications are expected to be\ndeployed corresponds to communication over wireless physical\nlayers and communication is expected to be only on the directly\nconnected subnetwork, consider the UDP Transport.   Since the UDP Transport is a packet-oriented transport, it is\npossible to map AllJoyn Messages directly into packets.\nThis allows for selectively dropping the constituent packets\nof a packet stream according to expired TTL. Since this selective\ndropping of AllJoyn Messages cannot be done in TCP, when the\noffered load of a network   exceeds its capabilities, the TCP Transport\ntends to \"back up\" with the in-flight segments, all consisting\nof data which will be ultimately dropped. In extreme cases,\nthe network can be completely congested with data that will\nbe discarded, the end result being no interesting (on-time)\ndata is transferred.  Recommendation 12   If applications use the Time to Live (TTL) option in Messages,\nconsider the UDP Transport which provides a much improved ability\nto drop non-interesting (not on-time) data.   Since UDP Datagrams are not associated with specific sockets in\nthe BSD Sockets API, it is possible for a single socket to\nsupport multiple ARDP connections. This corresponds to the\nability of multiple AllJoyn Sessions to run over a single socket.\nIt also turns out that File Descriptors must be allocated in\nan AllJoyn Routing Node to handle events related to a Session\nand communication endpoint management. Since both sockets,\nand more generally file descriptors, are operating system\nresources which may be limited, specifying the UDP Transport\ncan allow many more connections on a given host system.  Recommendation 13   If socket or file descriptor resource usage is anticipated\nto be a problem, consider specifying the UDP Transport which\nuses fewer resources per connection than the TCP Transport.",
            "title": "AllJoyn UDP Transport"
        },
        {
            "location": "/develop/api-guide/core/alljoyn-transports-best-practices/#tuning-the-tcp-transport",
            "text": "Each system that provides a networking subsystem and TCP/IP\nprotocol suite usually presents a number of tunable parameters\nfor those subsystems. In Linux systems, these parameters are\ntypically accessed through the sysctl interface; in Windows,\nthere will be a number of corresponding Registry entries.\nOperating system providers will initialize these various\nparameters with values that provide good tradeoffs for the\nsystems and environments involved.  There is a wealth of information regarding tuning these network\nand TCP parameters available on the Internet. We therefore will\nnot duplicate that information here. When tuning for the AllJoyn system,\nremember that sequences of AllJoyn Messages are converted into\nbyte streams and ultimately sent to TCP/IP by the AllJoyn TCP Transport.\nIt is the linearized AllJoyn message stream that is the traffic\npattern to be optimized for.  It is a testament to TCP and the selection of these various\ntuning parameters that the vast majority of system users will\nnot attempt to change the underlying TCP configuration. In most\ncases, the system is left as-shipped and it will work sufficiently well.  Wireshark can provide valuable insights into the TCP messaging\nthat occurs in AllJoyn systems. The AllJoyn system has provided\na dissector to the Wireshark project which is now included in\nthe standard Wireshark distributions.",
            "title": "Tuning the TCP Transport"
        },
        {
            "location": "/develop/api-guide/core/alljoyn-transports-best-practices/#tuning-the-udp-transport",
            "text": "Each system that provides a networking subsystem and TCP/IP\nprotocol suite usually presents a number of tunable parameters.\nIn Linux systems, these parameters are typically accessed\nthrough the  sysctl  interface; and in Windows there will be a\nnumber of corresponding Registry entries. Operating System\nproviders will initialize these various parameters with values\nthat provide good tradeoffs for the systems and environments involved.  There is a wealth of information regarding tuning these network\nand UDP parameters available on the Internet. We therefore\nwill not duplicate that information here. When tuning for\nthe AllJoyn system, remember that sequences of AllJoyn Messages\nare converted into UDP Datagrams by the AllJoyn UDP Transport.\nIt is the sequence of AllJoyn messages sent as datagrams that\nforms the traffic pattern to be optimized for.  Socket buffers  Since the vast majority of Internet traffic is sent over TCP,\ntuning the UDP protocol has become somewhat of a second-order\nproblem. The socket buffers provided by default for UDP are\noften quite small, on the order of 128 Kbytes. While this is\nsufficient for many uses of UDP such as name services, it is\nsmall when compared to the bandwidth-delay product of modern\nWi-Fi systems.  NOTE:  An 802.11n system using Modulation and Coding Scheme (MCS) 11\ncan run at 300 megabits per second. Given a round-trip time of\n6 msec, this corresponds to a buffer size of 225 Kbytes.  One thing to keep in mind when considering buffer sizes for\nthe UDP Transport is that one socket may be shared by a number\nof Sessions. The UDP Transport actually provides additional\nbuffering on a per-connection basis in order to accommodate\nat least one maximally sized AllJoyn Message (about 130 Kbytes)  Wireshark can provide valuable insights into the UDP messaging\nthat occurs in AllJoyn systems. The AllJoyn system has provided\na dissector to the Wireshark project which is now included in\nthe standard Wireshark distributions.  ARDP configuration  Along with the UDP subsystem, the UDP Transport provides the\nARDP reliability layer (detailed in  Overview .\nThere are a number of configurable parameters corresponding\nto ARDP, but two of those configuration items are of utmost\nimportance: SEGBMAX and SEGMAX.  The SEGBMAX parameter sets the limit on how large of a\nUDP Datagram that ARDP will use when fragmenting AllJoyn Messages.  The SEGMAX parameter sets the number of datagrams that can be\nin-transit at any time.  SEGBMAX can be thought of as corresponding loosely to the\nMaximum Segment Size (MSS) of TCP and SEGMAX can be thought of\nas corresponding to the receive window size.  Typically, the primary use case of the UDP Transport will be\nto transfer relatively small RPC Messages and the corresponding\nMessage Reply. The SEGMAX and SEGBMAX parameters are irrelevant\nif transferring messages and replies of less than 1480 bytes\nsince all data fits into one packet. However when transferring\nlarger amounts of data, it is possible to optimize ARDP in\nways that can make it significantly faster than TCP.  Tuning scenario  While the level of tuning described below will be rarely needed,\nthe scenario is provided for completeness and as an illustration\nof how the UDP Transport works.  NOTE:  This analysis was done using the default network and\nUDP protocol settings of the Linux system on which the experiments were run.  SEGBMAX setting  The following figure shows a sensitivity analysis for the\nsetting of SEGBMAX. The time measured on the y-axis is the\ntime to transfer a 10 megabyte file in maximal (130 Kbytes)\nAllJoyn Messages.   Figure:  SEGBMAX sensitivity analysis  Since UDP is a user-level protocol, all acknowledgments must\nbe done at user privilege  , which implies a context switch\nfor each packet. If SEGMAX is chosen to be too small, or if\nlarge amounts of data are sent in very small datagrams, much\ntime is spent simply context switching to ACK data - the system thrashes.\nAs SEGMAX approaches one packet (1480 byte payload) and moves\nupward toward the maximum UDP Datagram size, the system spends\nless and less time having to ACK individual smaller datagrams.\nThis tendency is counteracted, however, by the fact that as\nUDP datagram size increases, the number of actual PHY packets\nthat must be resent in the presence of a datagram loss also\nincreases. These pressures tend to cancel each other out in\npractice. In the data below, there is a local minimum at\nSEGBMAX of 4400 bytes which represents the optimal choice\nfor the 54 Mbit per second Wi-Fi.  In the test runs shown in the SEGBMAX sensitivity analysis,\nthe combination of SEGBMAX and SEGMAX was held constant at\nthe minimal value required to accommodate a maximal AllJoyn Message.  SEGMAX setting  The following figure shows a sensitivity analysis for SEGMAX\nwith SEGBMAX held constant at 4440 bytes.   Figure:  SEGMAX sensitivity analysis  The plot starts with SEGMAX at 31 and plots the time to\ntransfer a 10 megabyte file for each SEGMAX value. It can\nbe seen that there is an underlying step function that\njumps at SEGMAX values of 31, 62, and 93. These correspond\nto the values at which one, two and three maximal AllJoyn Messages\ncan be buffered in the system. There is a significant gain\nto double-buffering AllJoyn Messages at SEGMAX of 62 and\ngreater; and there is an incremental gain to triple-buffering\nAllJoyn Messages at SEGMAX of 93.  Notice that the UDP Transport is slower than the TCP Transort\nwith single-buffering, slightly faster with double-buffering\nand significantly (15-20%) faster with triple buffering.\nSince there is no statistically significant improvement\npast triple-buffering, a good choice of SEGBMAX and SEGMAX\ncan be shown to be SEGBMAX = 4440 bytes, and SEGMAX = 93 datagrams.\nThis is in fact the choice made as the default for the ARDP configuration.  It is possible that different systems could have specific\ncharacteristics that change this analysis. For example, if the\nUDP Transport is run on a host device for which context switch\ntime is much higher and the network much cleaner, the tradeoff\nof context switch time versus network retransmission may be at\na different point. It is possible that different networking\nenvironments may require more datagram buffering to fill the\nin-transit data; or it may also be the case that triple-buffering\nis overkill on much slower networks.",
            "title": "Tuning the UDP Transport"
        },
        {
            "location": "/develop/api-guide/core/alljoyn-transports-best-practices/#conclusion",
            "text": "As they are configured by default, both the UDP Transport\nand the TCP Transport provide a level of service as defined\nby the abstract notion of an AllJoyn Transport. Although\nthey both provide the same services, the characteristics of\nthe underlying transport mechanisms on which they are based percolate up.  Characteristics of underlying transports may be viewed as\neither advantages or disadvantages depending on the applications\nusing them and the requirements of those applications. Specific\ntraffic patterns generated by distributed applications may\nimply that the choice of one of the AllJoyn Transports can\nprovide significantly better levels of service than others.  It may also be the case that no specific choice of AllJoyn Transport\nis actually the best choice. In such situations, the fact that\na connection, any connection, is possible overrides the qualities\nof service possible from underlying transport mechanisms.  In any case, understanding the underlying traffic of a\ndistributed application and how AllJoyn Transports handle\nthat traffic allows for optimizing the distributed application behavior.",
            "title": "Conclusion"
        },
        {
            "location": "/develop/api-guide/core/",
            "text": "Core API Guide\n\n\nNo general API guide exists at this moment. Below are some links that will get you on your way. For information about the API itself, refer to the API Reference Guides.\n\n\nCore API Guides\n\n\n\n\nJava\n\n\nObjective-C\n\n\nAllJoyn Transports Best Practices\n\n\n\n\nAPI Guides for Specific Features\n\n\n\n\nAutoPinger\n: automated peer presence checking (C++ only)\n\n\nObserver\n: automated interface-based discovery, session\n  management and \nProxyBusObject\n management. (C++/C/Java/Objective-C)\n\n\nProperty Caching\n: automated caching of property values for\n  reduced network traffic and improved application responsiveness.\n  (C++/C/Java/Objective-C)",
            "title": "Home"
        },
        {
            "location": "/develop/api-guide/core/#core-api-guide",
            "text": "No general API guide exists at this moment. Below are some links that will get you on your way. For information about the API itself, refer to the API Reference Guides.",
            "title": "Core API Guide"
        },
        {
            "location": "/develop/api-guide/core/#core-api-guides",
            "text": "Java  Objective-C  AllJoyn Transports Best Practices",
            "title": "Core API Guides"
        },
        {
            "location": "/develop/api-guide/core/#api-guides-for-specific-features",
            "text": "AutoPinger : automated peer presence checking (C++ only)  Observer : automated interface-based discovery, session\n  management and  ProxyBusObject  management. (C++/C/Java/Objective-C)  Property Caching : automated caching of property values for\n  reduced network traffic and improved application responsiveness.\n  (C++/C/Java/Objective-C)",
            "title": "API Guides for Specific Features"
        },
        {
            "location": "/develop/api-guide/core/java/",
            "text": "Core API Guide - Java\n\n\nPrerequisites\n\n\n\n\n\n\nInstall dependencies for the \nWindows platform\n,\n  or for the \nLinux platform\n.\n\n\n\n\n\n\nA device running Android OS version 4.1.x (Jelly Bean) or greater and running a chip\n  based on the ARM 5 (or greater) instruction set.\n\n\n\n\n\n\nImporting Existing Java Samples into Eclipse\n\n\nThere are several samples provided as part of the AllJoyn\n framework.\nThe samples may be found in the AllJoyn SDK in the java/samples folder.\n\n\nNOTE:\n If you wish to start a new AllJoyn project instead,\nsee \nStarting a New Project for Desktop Development\n.\n\n\n\n\nStart Eclipse.\n\n\nSelect \nFile \n Import\n.\n\n\nSelect \nGeneral \n Existing Projects into Workspace\n.\n\n\nClick \nNext\n.\n\n\nClick \nBrowse\n near the Select root directory text box.\n\n\nNavigate to the samples folder and find the simple service\nsample (\n/java/samples/simple/service).\n\n\nClick \nOK\n.\n\n\nClick \nFinish\n.\n\n\n\n\nThe simple service sample should now be imported into your workspace.\nThe project may be giving you a few errors.\n\n\nTo remove the project errors:\n\n\n\n\nSet Class Compatibility to \n5.0\n.\n\n\nSelect the project in the Package Explorer window.\nPress \nAlt+Enter\n to bring up Properties for the simple service.\n\n\nSelect the \nJava Compiler\n option.\n\n\nUnder the Java Compiler options, check the \nEnable project specific settings\n option.\n\n\nSet the \nCompiler compliance level\n to \n1.5\n.\n\n\nClick \nOK\n.\n\n\n\n\nRebuild the auto-generated gen folder.\n\n\n\n\nClick \nProject \n Clean\n.\n\n\n\n\nUse the same process to import any sample of interest.\n\n\nNOTE:\n For an Android project, some versions on Eclipse require\nthe need to right-click on the project, then select\n\nAndroid Tools \n Fix Project Properties\n. If you still\nencounter an error with the Android project, right-click\non the project, then select \nProperties\n. Under this window,\nclick on \nJava Build Path\n in the left navigation, then\nselect the \nOrder and Export\n tab. Ensure that the \nAndroid Private Libraries\n\ncontains a check, then clean the project.\n\n\nStarting a New Android Project\n\n\nIn Eclipse, create a new Android project. (Open a browser\nand navigate to http://developer.android.com for instructions on how to do this.)\n\n\n\n\nGo to your workspace and find the folder that contains\nthe new Android project.\n\n\n\n\nThe project folder should contain the following (it may contain more):\n\n\n\n\nres folder\n\n\nsrc folder\n\n\n\n\nAndroidManifest.xml file\n\n\n\n\n\n\nCreate a new folder with the name \nlibs\n.\n\n\n\n\nCopy the file \n/java/jar/alljoyn.jar\n\n   to the new libs folder.\n\n\nIn the libs folder, create another folder with the name \narmeabi\n.\n\n\nCopy the \nliballjoyn_java.so\n file from the AllJoyn\n   distribution to the \narmeabi\n folder.\n   The file is in the AllJoyn distribution in the folder\n   \n/java/libs/liballjoyn_java.so.\n\n\n\n\nYou should now have a project directory structure that is\n   similar to this (only a partial view of a project).\n\n\n+\nproject name\n\n   |\\src\n   ||-\nsource code files\n\n   |\\libs\n   ||\\armeabi\n   |||-liballjoyn_java.so\n   ||-alljoyn.jar\n   |\\res\n   ||-\nproject resources\n\n   |-AndroidManifest.xml\n\n\nNOTE:\n It may be simpler to copy an already existing libs folder\nfrom one of the samples found in \n/java/samples.\n\n\n\n\nIn Eclipse, right-click on your project and select the \nProperties\n option.\n\n\nSelect the \nJava Build Path\n.\n\n\nClick \nAdd JARs\n.\n\n\nSelect the \nalljoyn.jar\n file from the \n/libs\n folder.\n\n\n\n\nIMPORTANT: Make sure the files are from the Android distribution\nof the AllJoyn framework and not the Linux distribution.\nThe files will have identical names, but the Linux distribution\nis not compiled for the Arm processor used on most Android phones;\nit is designed for the PC x86 architecture.\n\n\nStarting a New Project for Desktop Development\n\n\n\n\nCreate a new Java Project.\n\n\nIn the step where you define the Java build settings, select the \nLibraries\n tab.\n\n\nClick \nAdd External JARs...\n\n\nSelect \nalljoyn.jar\n from the \n/java/jar directory.\n\n\nClick the arrow next to the alljoyn.jar listed in your JARs,\nwhich brings up a list of Source attachment, Javadoc location,\nNative library location, and Access rules for alljoyn.jar.\n\n\nDouble-click \nNative library location\n, which brings up a dialog.\n\n\nClick the \nExternal Folder...\n button.\n\n\nSelect the directory that contains liballjoyn_java.so \n/java/lib.\n\n\nDouble-click \nJavadoc location\n.\n\n\nClick \nBrowse...\n.\n\n\nSelect the directory that contains the java docs for\nalljoyn.jar \n/java/docs.\n\n\nClick \nFinish\n.\n\n\n\n\nNOTE:\n To add the AllJoyn framework to an already existing project,\ngo to the project properties, select the 'Java Build Path' properties,\nand follow the steps listed above.\n\n\nWriting Code\n\n\nAll code snippets found in this document were taken from samples\nthat can be found in the Windows SDK in the java/samples folder,\nor on \nGerrit\n.\n\n\nIf you are programming for Android, the code snippets are still\nuseful for understanding the AllJoyn framework. The Android SDK\nhas its own collection of samples. For more information see\n\nAndroid-Specific Considerations\n, or check out the samples found\nin the AllJoyn Android SDK.\n\n\nLoading the native library\n\n\nYou must load the native system library into your code at runtime.\nTo do so, add the following lines to your code.\n\n\nCode 1. Load native library\n\n\nstatic {\n   System.loadLibrary(\nalljoyn_java\n);\n}\n\n\n\n\nCreating an AllJoyn interface\n\n\nThe AllJoyn framework enables inter-process communication\nthrough an object. The object is defined as a bus interface.\n\n\nEach interface can contain:\n\n\n\n\nMethods\n\n\nSignals\n\n\nProperties\n\n\n\n\nCode 2. Example of an interface\n\n\n@BusInterface (name = \norg.my.interface.name\n)\npublic interface MyInterface {\n\n   @BusMethod\n   public String MyMethod(String inStr) throws BusException;\n\n   @BusSignal\n   public void MySignal(String inStr) throws BusException;\n\n   @BusProperty\n   public String GetMyProperty() throws BusException;\n\n   @BusProperty\n   public void SetMyProperty(String myProperty) throws  BusException;\n\n}\n\n\n\n\nUsing @BusInterface annotation\n\n\nThe @BusInterface annotation tells the code that this\ninterface is an AllJoyn interface. All bus interfaces\nmust have a name. If you do not assign a name, a default\nname is assigned.\n\n\nThe default interface name is \n.\n.\n\n\nGenerally, you should choose your interface name and not use\nthe default. Set the interface name by specifying the name\nannotation property.\n\n\nInterface naming rules\n from http://dbus.freedesktop.org/doc/dbus-specification.html.\n\n\n\n\nInterfaces have names with type STRING, meaning that they\nmust be valid UTF-8 characters.\n\n\nThere are also some additional restrictions that apply\nto interface names, specifically:\n\n\nInterface names are composed of one or more elements\n  separated by a period (\".\") character. All elements must\n  contain at least one character.\n\n\nEach element must only contain the ASCII characters\n  [A-Z][a-z][0-9]_ and must not begin with a digit.\n\n\nInterface names must contain at least one \".\" (period)\n  character (and thus at least two elements).\n\n\nInterface names must not begin with a \".\" (period) character.\n\n\nInterface names must not exceed the maximum name length of 255 characters.\n\n\n\n\nUsing @BusMethod annotation\n\n\nThe @BusMethod annotation tells the Java compiler that\nthis is a bus method. AllJoyn methods work almost identical\nto a regular method in Java. The major difference is that\nthe AllJoyn methods execute on a different process or device.\nThe method can accept multiple arguments and reply with\nmultiple arguments. AllJoyn methods can have multiple\nreturn values, but Java methods only allow a single return\nvalue. To receive multiple return values requires a container\nthat can hold the multiple return values.\n\nMultiple return values\n explains how to do this.\n\n\nThe @BusMethod annotation has four properties: annotation, name,\nsignature, and replySignature.\n\n\nUnder normal circumstances, the values for the annotation\nproperties can be determined by the AllJoyn framework.\nHowever, there are instances in which the signature must\nbe specified; for example you need to send an unsigned integer\nin a method. Since Java does not have an unsigned integer type,\nthis must be specified in the @BusMethod annotation.\n\n\nCode 3. Specifying signature and replySignature\n\n\n@BusMethod(signature=\nu\n, replySignature=\nu\n)\npublic int MyMethod3(int unsignedArg) throws BusException;\n\n\n\n\nThe AllJoyn framework is very good at automatically assigning\na signature for the arguments specified in the method or signal.\nIf given the code shown in \nCode 4. Auto assignment of signatures\n, note that the\nsignature and replySignature are not specified as part of\nthe @BusMethod annotation. The AllJoyn framework automatically\nassigns this method a signature \"sdib\" and a replySignature of\n\"i.\" The only time you must specify the signature is when it\ncannot be obtained from the interface itself.\n\n\nCode 4. Auto assignment of signatures\n\n\n@BusMethod\npublic int MyMethod4(String sArg,\n   double dArg,\n   int iArg,\n   boolean bArg) throws BusException;\n\n\n\n\nThe valid values for the signature and replySignature are any\nvalues that are valid according to http://dbus.freedesktop.org/doc/dbus-specification.html.\n\n\nUsing @BusSignal annotation\n\n\nThe @BusSignal annotation specifies that the following code\nis an AllJoyn signal. Unlike methods, signals have no replies.\nBecause of this, signals always have a return type of void.\n\n\nLike methods, signals can take multiple arguments.\n\n\nA signal is seen only if a program has registered a signal\nhandler for that signal. See \nUsing AllJoyn signals\n\nto register and use a signal handler.\n\n\nUsing @BusProperty annotation\n\n\nThe @BusProperty annotation specifies that the following code\nis an AllJoyn property. AllJoyn properties are exactly like\nAllJoyn methods except they are specialized for get/set\ncommands of a single value.\n\n\nMore complex AllJoyn interface concepts\n\n\nMaking a secure bus interface using the @Secure annotation\n\n\nIndicating that an interface must use a secured authentication\nmechanism is as simple as adding the @Secure annotation to the interface.\n\n\nCode 5. Creating a secure interface\n\n\n@BusInterface(name = \norg.sample.SecureInterface\n)\n@Secure\npublic interface SecureInterface {\n\n   @BusMethod\n   String myMethod(String inStr) throws BusException;\n}\n\n\n\n\nThe @Secure annotation informs the bus that no method call\nor signal can be sent without authentication.\n\n\nThe server must authenticate that the client is trusted\nusing one of the built-in authentication protocols.\nAfter authentication is completed, all messages and signals\nhave the body of the message encrypted. Only the authenticated\nclient can read the message. Only the body of the message is encrypted.\nThe header is left unencrypted and any bus can read the header\nand use it to forward the message to its destination.\n\n\nThe @Secure annotation has the property \nvalue\n [AllJoyn 3.4.0].\nThe 'value' property can have one of the following values:\n\n\n\n\nrequired (default value) - Methods on the interface can\nonly be called by an authenticated peer.\n\n\noff - Authentication is never required.\n\n\ninherit - The object inherits the security of the objects\nthat implement the interface.\n\n\nIf an unknown value is specified the interface will default\nto inherit.\n\n\n\n\nNormally, \nvalue\n will not need to be explicitly specified\nunless you want the value 'off' since using @Secure without\nspecifying a value is the same as specifying \n@secure(value=\"required\")\n.\nInterfaces that omit the @Secure annotation is the same as\nspecifying \n@Secure(value=\"inherit\")\n.\n\n\nIn general, unless you are sure your interface will never\nneed authentication, it is best to avoid using `@Secure(value=\"off\")\nin your interface specification.\n\n\nFor more information on the three built-in authentication\nmechanisms, see \nAllJoyn authentication mechanisms\n.\n\n\nComplex data types using the @Position annotation\n\n\nBeyond simple data types, the AllJoyn framework can handle\ncomplex data types such as arrays, maps, and structs. In the case\nof arrays and maps, the data type can be handled by the AllJoyn code\nwith no special action. However, structs require additional annotation.\n\n\nThe AllJoyn framework must know the order of all elements of a\nstruct so that it can marshal and unmarshal (i.e., serialize)\nthe message. This is where the @Position annotation is used.\n\n\nSay that you have a structure that holds information about\na photo; the code could look something like this:\n\n\nCode 6. Example data structure using @Position annotation\n\n\npublic class ImageInfo{\n @Position(0)\n public String fileName;\n @Position(1)\n public int isoValue;\n @Position(2)\n public int dateTaken;\n}\n\n\n\n\nThe @Position annotation numbering must start from \"0\" (zero)\nand count up in increments of one. Skipping a number, like\ngoing from @Position(1) to @Position(3) without having an\n@Position(2) anywhere in the code, is a logic error.\n\n\nThe signature for all structures is \"r\" or the list of all\nthe values of the structure inside parentheses. For example,\nthe signature for the ImageInfo class would be \"(sii)\" in \nCode 6. Example data structure using @Position annotation\n.\n\n\nMultiple return values\n\n\nIf, for some reason, an interface with multiple return values\nis used, a container must be made to hold those values.\nIf you have a method called \"timer\" that returns a startTime\nand an endTime, an interface could be designed to handle\nthe two return values.\n\n\nCode 7. Method that accepts multiple return values\n\n\n@BusInterface (name = \norg.my.timerInterface\n)\npublic interface MultipleReturnValuesInterface {\n\n   public class Values {\n      @Position(0) public int startTime;\n      @Position(1) public int endTime;\n   }\n\n   @BusMethod(replySignature=\nii\n)\n\n   public Values timer() throws BusException;\n}\n\n\n\n\nNOTE:\n The replySignature has to be specified, or the AllJoyn framework\nassumes the replySignature is a struct with the replySignature \"(ii)\".\n\n\nParentheses indicate a struct, which is a single return value, while\nno parentheses indicate two separate return values.\n\n\nConnecting to the AllJoyn router\n\n\nWhen connecting with the bus, a program may act as a service,\na client, or both.\n\n\nConnecting a service\n\n\nConnecting a service consists of several steps.\n\n\n\n\nCreate a new BusAttachment.\n\n\nRegister a BusObject with a given absolute path using the BusAttachment.\n\n\nConnect the BusAttachment to the bus.\n\n\nRequest a well-known name from the bus.\n\n\n\n\nCode 8. Connecting a service to the bus (no error checking)\n\n\nmBus = new BusAttachment(\napplicationName\n);\nmBus.registerBusObject(this, \n/servicepath\n);\nmBus.connect();\nint flags = 0; //no request name flags\nmBus.requestName(\ncom.my.well.known.name\n, flags);\n\n\n\n\nThis code does not have any error handling; thus, it is a\npoor programming example. It does show what the functions are doing.\nThe functions BusAttachment.registerBusObject(...),\nBusAttachment.connect(), and DBusProxyObj.RequestName(...) all\nreturn status that should be checked.\n\n\nCode 9. Connecting a service (with error checking)\n\n\nmBus = new BusAttachment(\napplicationName\n);\nStatus status = mBus.registerBusObject(this, \n/servicepath\n);\nif (Status.OK != status) {\n   System.out.println(\nBusAttachment.registerBusObject() failed: \n + status);\n\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.connect();\n\nif (Status.OK != status) {\n   System.out.println(\nBusAttachment.connect() failed: \n + status);\n   System.exit(0);\n   return;\n}\nint flags = 0; //no request name flags\nstatus = mBus.requestName(\ncom.my.well.known.name\n, flags);\nif (status != Status.OK) {\n   System.out.println(\nBusAttachment.requestName failed: \n + status);\n   System.exit(0);\n   return;\n}\n\n\n\n\nNOTE:\n This code would have to be in a class that implements the\nBusObject. If it did not implement the BusObject, the following\nline would not work:\n\n\nmBus.registerBusObject(this, \n/servicepath\n);\n\n\n\n\nThe flags value is a bit-mask that is used to tell the bus\nhow to respond if the well-known name requested already exists\non the bus. It also tells the bus how to act if the well-known name\nis already owned and another application requests the same well-known name.\n\n\nThe flag options are:\n\n\n\n\nBusAttachment.ALLJOYN_REQUEST_NAME_ALLOW_REPLACEMENT\n\n\nBusAttachment.ALLJOYN_REQUEST_NAME_REPLACE_EXISTING\n\n\nBusAttachment.ALLJOYN_REQUEST_NAME_DO_NOT_QUEUE\n\n\n\n\nAllJoyn request name flags\n\n\n\n\n\n\n\n\nAllJoyn flag name\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nALLJOYN_REQUEST_NAME_ALLOW_REPLACEMENT\n\n\n0x1\n\n\n\n\n\n\nALLJOYN_REQUEST_NAME_REPLACE_EXISTING\n\n\n0x2\n\n\n\n\n\n\nALLJOYN_REQUEST_NAME_DO_NOT_QUEUE\n\n\n0x4\n\n\n\n\n\n\n\n\nUsing the value of 0x0 (zero) for the AllJoyn flag is a\nvalid option. It means do not use any requestName flags.\nWhen using no flags to request a well-known name from\nthe bus, if the name already exists on the bus, your\nname request is added to the queue of other applications\nthat have also requested that name.\n\n\nThe BusAttachment.requestName returns one of the following status values:\n\n\nResults from a RequestName call\n\n\n\n\n\n\n\n\nDBusProxyObj.RequestName result\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nOK\n\n\n1\n\n\n\n\n\n\nDBUS_REQUEST_NAME_REPLY_IN_QUEUE\n\n\n2\n\n\n\n\n\n\nDBUS_REQUEST_NAME_REPLY_EXISTS\n\n\n3\n\n\n\n\n\n\nDBUS_REQUEST_NAME_REPLY_ALREADY_OWNER\n\n\n4\n\n\n\n\n\n\nBUS_UNEXPECTED_DISPOSITION\n\n\n\n\n\n\n\n\nBUS_NOT_CONNECTED\n\n\n\n\n\n\n\n\n\n\nThe valid flag combinations and RequestName results are\nall specified and described at http://dbus.freedesktop.org/doc/dbus-specification.html.\n\n\nConnecting a client\n\n\nTo connect a client:\n\n\n\n\nCreate a BusAttachment.\n\n\nConnect the BusAttachment to the bus.\n\n\nMake a proxy object with the service name, absolute service path,\nand the interface of interest.\n\n\nMake a proxy connection with the specified AllJoyn interface.\n\n\n(Optional) Register signal handlers if the interface of interest\nhas any signals or if you are interested in any of the signals\nthat are part of the D-Bus or AllJoyn specification.\n\n\n\n\nCode 10. Connecting a client (with error checking)\n\n\nmBus = new BusAttachment(\napplicationName\n);\n\nStatus status = mBus.connect();\nif (Status.OK != status) {\n   System.out.println(\nBusAttachment.connect() failed:\n + status));\n   System.exit(0);\n   return;\n}\n\nmProxyObj = mBus.getProxyBusObject(\norg.my.well.known.name\n,\n   \n/servicepath\n,\n   BusAttachment.SESSION_ID_ANY\n   new Class[] { MyInterface.class });\n\nmMyInterface = mProxyObj.getInterface(MyInterface.class);\n\nstatus = mBus.registerSignalHandlers(this);\nif (status != Status.OK) {\n   System.out.println(\nBusAttachment.registerSignalHandlers() failed:\n +\nstatus));\n   System.exit(0);\n   return;\n}\n\n\n\n\nmMyInterface can now be used to call methods found on the service.\n\n\nThe given well-known name and path can have multiple interfaces.\nWhen using \ngetProxyBusObject()\n, list all of the interfaces\nyou are interested in using. There could have been multiple\ninterfaces available at the object path \"/servicepath.\"\nIf there was a second interface called MySecondInterface and\nyou also wanted to make a proxy connection to that interface,\nthen you need to list both interfaces when calling \ngetProxyBusObject()\n.\n\n\nWhen calling the \ngetInterface()\n method, you are selecting\none of the possible interfaces out of the interfaces obtained\nfrom the \ngetProxyBusObject()\n method call.\n\n\nCode 11. Multiple interfaces\n\n\nmProxyObj = mBus.getProxyBusObject(\norg.my.well.known.name\n,\n   \n/servicepath\n,\n   BusAttachment.SESSION_ID_ANY,\n   new Class[] { MyInterface.class, MySecondInterface.class });\n\nmMyInterface = mProxyObj.getInterface(MyInterface.class);\nmMySecondInterface = mProxyObj.getInterface(MySecondInterface.class);\n\n\n\n\nDiscovery and sessions\n\n\nFull user control\n\n\nWhat makes the AllJoyn framework exciting is the ability to\ndiscover remote buses and interact with the interfaces on\nthose remote buses as if they are local.\n\n\nThe AllJoyn router runs in the background. If an application\nasks the router to look for a remote interface, the router\ntries to locate the requested service. When the router is started,\nit is told which transport protocols to use (i.e., Bluetooth, TCP/IP).\nIf any device can make a connection using any of the available\ntransport protocols, its services can then be discovered and\nused by all of the devices that have been discovered in a\ndynamically-formed, peer-to-peer network.\n\n\nOnce the well-known name has been discovered, your application\ncan join a started communication session using a user-selected session port.\n\n\nNOTE:\n Valid SessionPort values range from 1 to 0xFFFF.\n\n\nHow discovery works\n\n\nFor a service and client to discover each other, they must agree upon three things:\n\n\n\n\nA well-known bus name that will be advertised\n\n\nThe object path\n\n\nThe session port number that will be used\n\n\n\n\nThe discovery sequence follows.\n\n\n\n\nTo advertise a service, start with the procedure described in \nConnecting a service\n.\n\n\nCreate a new BusAttachment with RemoteMessage.Receive.\n\n\nRegister your BusObject; the local implementation of your\n     interface with the BusAttachment.\n\n\nRegister a BusListener; a bus listener may not be needed,\n     depending on your application.\n\n\nConnect the BusAttachment with the AllJoyn router.\n\n\n\n\nBind the session port.\n\n\nAs part of binding the session port, you also need to\n create a SessionPort Listener that is used to respond\n to JoinSession requests from the client.\n\n\n\n\n\n\nRequest a well-known name from the bus.\n\n\n\n\nAdvertise the same well-known name.\n\n\nTo connect to the advertised service:\n\n\nCreate a new BusAttachment with RemoteMessage.Receive.\n\n\nRegister a BusListener; in this case it is required\n     for the foundAdvertisedName signal.\n\n\nFind the Advertised well-known name.\n\n\nWhen the foundAdvertisedName signal is received, join the session.\n\n\n\n\nIMPORTANT: Although you can advertise different names than your\nservice's well-known name, it would result in the bus not being\nable to use your service. It is an error to advertise a different name\nthan your service's own well-known name.\n\n\nSample code\n\n\nCode 12. Obtaining a well-known name/advertising the well-known name\n\n\nBusAttachment mBus;\nmBus = new BusAttachment(getClass().getName(),\nBusAttachment.RemoteMessage.Receive);\n\nStatus status = mBus.registerBusObject(myBusObject, \n/MyService\n);\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.connect();\n\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nprivate static final short CONTACT_PORT=42;\nMutable.ShortValue contactPort = new Mutable.ShortValue(CONTACT_PORT);\nSessionOpts sessionOpts = new SessionOpts();\nsessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\nsessionOpts.isMultipoint = false; sessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\nsessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\nstatus = mBus.bindSessionPort(contactPort, sessionOpts,\nnew SessionPortListener() {\n@Override\npublic boolean acceptSessionJoiner(short sessionPort,\nString joiner, SessionOpts sessionOpts) {\nif (sessionPort == CONTACT_PORT) {\nreturn true;\n} else {\nreturn false;\n}\n}\n});\n\nInt flags = 0; //do not use any request name flags\nstatus = mBus.requestName(\ncom.my.well.known.name\n, flags);\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\n/*\n * Important: the well-known name advertised should be identical\n * to the well-known name requested from the bus. Using a\n * different name is a logic error.\n */\nstatus = mBus.advertiseName(\ncom.my.well.known.name\n,\n   SessionOpts.TRANSPORT_ANY);\nif (status != Status.OK) {\n   /*\n    * If we are unable to advertise the name, release\n    * the well-known name from the local bus.\n    */\n   mBus.releaseName(\ncom.my.well.know.name\n);\n   System.exit(0);\n   return;\n}\n\nif (status != Status.OK) {\nSystem.exit(0);\nreturn;\n}\n\n\n\n\nCode 13. Find well-known name and join session\n\n\nBusAttachment mBus;\nmBus = new BusAttachment(getClass().getName(),\nBusAttachment.RemoteMessage.Receive);\nprivate static final short CONTACT_PORT=42;\n\nmBus.registerBusListener(new BusListener() {\n@Override\npublic void foundAdvertisedName(String name,\n  short transport,\n  String namePrefix) {\n  mBus.enableConcurrentCallbacks();\n  short contactPort = CONTACT_PORT;\n  SessionOpts sessionOpts = new SessionOpts();\n  Mutable.IntegerValue sessionId = new Mutable.IntegerValue();\n\n  Status status = mBus.joinSession((String) msg.obj,\ncontactPort,\nsessionId, sessionOpts,\nnew SessionListener());}\n});\n\nStatus status = mBus.connect();\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.findAdvertisedName(\ncom.my.well.known.name\n);\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\n\n\n\nUsing AllJoyn methods\n\n\nSo far, we have talked about making an interface and\nwe have talked about how to connect to the bus and discover\na remote bus using sessions. This section shows how to write\nan AllJoyn bus method that can be instantiated from a remote process.\n\n\nSuppose you have the following interface:\n\n\nCode 14. Sample interface with AllJoyn methods\n\n\n@BusInterface (name = \norg.sample.busMethods\n)\npublic interface SampleInterface {\n\n   @BusMethod\n   public String Ping(String str) throws BusException;\n\n   @BusMethod\n   public String Concatenate(String arg1, String arg2) throws BusException;\n\n   @BusMethod\n   public int Fibonacci(int arg1) throws BusException;\n}\n\n\n\n\nCode 15. Implementing the SampleInterface in the Service\n\n\nclass SampleService implements SampleInterface, BusObject {\n   public String Ping(String str){\n      return str;\n   }\n\n   public String Concatenate(String arg1, String arg2){\n      return arg1+arg2;\n   }\n\n   public int Fibonacci(int arg1){\n      int a=0,b=1;\n\n   for (int i=0;i\narg1;i++){\n      a=a+b;\n      b=a-b;\n   }\n   return a;\n\n   }\n}\n\n\n\n\nNow that the SampleInterface has an implementation, you must\nuse a SampleService object when you are registering the bus object.\n\n\nCode 16. Connecting the bus using the SampleService BusObject\n\n\nSampleService mySampleService;\nBusAttachment mBus;\nmBus = new BusAttachment(getClass().getName(),\nBusAttachment.RemoteMessage.Receive);\n\n/*\n * This line of code makes the local interface available to the bus\n */\nStatus status = mBus.registerBusObject(mySampleService, \n/MyService\n);\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.connect();\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nprivate static final short CONTACT_PORT=42;\nMutable.ShortValue contactPort = new Mutable.ShortValue(CONTACT_PORT);\nSessionOpts sessionOpts = new SessionOpts();\nsessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\nsessionOpts.isMultipoint = false;\nsessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\nsessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\nstatus = mBus.bindSessionPort(contactPort, sessionOpts,\nnew SessionPortListener() {\n@Override\npublic boolean acceptSessionJoiner(short sessionPort,\nString joiner,\nSessionOpts sessionOpts) {\nif (sessionPort == CONTACT_PORT) {\nreturn true;\n} else {\nreturn false;\n}\n\n}\n});\nif (status != Status.OK) { System.exit(0);\nreturn;\n\n}\nInt flags = 0; //do not use any request name flags\nstatus = mBus.requestName(\ncom.my.well.known.name\n, flags);\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.advertiseName(\ncom.my.well.known.name\n, SessionOpts.TRANSPORT_ANY);\nif (status != Status.OK) {\n   mBus.releaseName(\ncom.my.well.know.name\n);\n   System.exit(0);\n   return;\n}\n\n\n\n\nCode 17. Calling a remote method from the SampleInterface\n\n\nprivate BusAttachment mBus;\nmBus = new BusAttachment(getClass().getName(),\nBusAttachment.RemoteMessage.Receive);\n\nStatus status = mBus.connect();\nif (Status.OK != status) {\n   System.exit(0);\n   return;\n}\n\nprivate ProxyBusObject mProxyObj;\nprivate SampleInterface mSampleInterface;\n\nprivate static final short CONTACT_PORT=42;\n\nmBus.registerBusListener(new BusListener() {\n@Override\npublic void foundAdvertisedName(String name,\n   short transport,\n   String namePrefix) {\n      mBus.enableConcurrentCallbacks();\n      short contactPort = CONTACT_PORT;\n      SessionOpts sessionOpts = new SessionOpts();\n      sessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\n         sessionOpts.isMultipoint = false;\n         sessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\n      sessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\n      Mutable.IntegerValue sessionId = new Mutable.IntegerValue();\n\n      Status status = mBus.joinSession(name,\ncontactPort,\nsessionId,\nsessionOpts,\nnew SessionListener());\n\n   mProxyObj = mBus.getProxyBusObject(\ncom.my.well.known.name\n,\n      \n/MyService\n,\n         sessionId.value,\n            new Class[] { SampleInterface.class });\n   mSampleInterface = mProxyObj.getInterface(SampleInterface.class);\n});\n\nStatus status = mBus.connect();\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.findAdvertisedName(\ncom.my.well.known.name\n);\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\n\n\n\nNow that you have a proxy connection to the remote service\nthrough mSampleInterface, you can just call it like you would\nif the code were implemented locally.\n\n\nCode 18. Calling the remote methods\n\n\ntry {\n   // will return \nHello World\n\n   String strPing = mSampleInterface.Ping(\nHello World\n);\n   // will return \nThe Eagle has landed!\n\n   String strCat = mSampleInterface.Concatenate(\nThe Eagle \n, \nhas landed!\n);\n\n   // will return 3\n   int fib = mSampleInterface.Fibonacci(4);\n} catch (BusException e) {\n   //Handle exception here.\n}\n\n\n\n\nNot all methods need to return a value and not all methods need input arguments.\n\n\nNOTE:\n Remote methods cannot be called until we have obtained\nan interface object from the ProxyBusObject class. Trying to\ncall a remote method before obtaining the interface could result\nin your application crashing. The mSampleInterface is a null object\nuntil we have connected it to the service using the\n\nProxyBusObject.getInterface()\n method.\n\n\nUsing AllJoyn signals\n\n\nSignals, unlike methods, never return a value. Client applications\nthat are interested in receiving a signal must register for that\nsignal with the bus. The client must implement a signal handler to\nrespond to the signal for which it has registered.\n\n\nCode 19. Example interface containing signals\n\n\n@BusInterface (name = \norg.sample.busSignals\n)\npublic interface SampleInterface {\n\n   @BusSignal\n   public void buttonClicked(int id) throws BusException;\n\n   @BusSignal\n   public void playerPosition(int x, int y, int z) throws BusException;\n}\n\n\n\n\nCode 20. Create an empty class implementation\n\n\nclass SignalInterface implements SampleInterface, BusObject {\n   public void buttonClicked(int id) {/*No code needed here*/}\n   public void playerPosition(int x, int y, int z){/*No code needed here*/}\n}\n\n\n\n\nA SignalEmitter is required to emit a signal. To create a SignalEmitter,\nyou must have a BusObject. The code above creates a BusObject that\nis aware of the bus signals found in the SampleInterface. Signals do not\nneed to have any code added to transmit a signal, you just inform the\nbus that a signal with a given interface exists.\n\n\nOnce a SignalEmitter is created, an interface can be made to\nsend the actual signals. No coding is needed to emit the signals\nbeyond defining and using the interface.\n\n\nCode 21. Connect signals to the bus and emitting the signals - service\n\n\nprivate static final short CONTACT_PORT=42;\nstatic int sessionId;\nstatic String joinerName;\n\nboolean sessionEstablished = false;\n\nBusAttachment mBus;\nmBus = new BusAttachment(\nAppName\n, BusAttachment.RemoteMessage.Receive);\nSignalInterface mySignalInterface = new SignalInterface();\n\nStatus status = mBus.registerBusObject(mySignalInterface, \n/MyService/Path\n);\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.connect();\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nint flags = 0; //do not use any request name flags\nstatus = mBus.requestName(\ncom.my.well.known.name\n, flags);\nif (status != Status.OK) { System.exit(0);\nreturn;\n}\n\nstatus = mBus.advertiseName(\ncom.my.well.known.name\n,\n   SessionOpts.TRANSPORT_ANY);\nif (status != Status.OK) {\n   System.out.println(\nStatus = \n + status);\n   mBus.releaseName(\ncom.my.well.known.name\n);\n   System.exit(0);\n   return;\n}\n\nMutable.ShortValue contactPort = new Mutable.ShortValue(CONTACT_PORT);\nSessionOpts sessionOpts = new SessionOpts();\nsessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\nsessionOpts.isMultipoint = false;\nsessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\nsessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\nstatus = mBus.bindSessionPort(contactPort, sessionOpts,\n   new SessionPortListener() {\n   public boolean acceptSessionJoiner(short sessionPort, String joiner,\n      SessionOpts sessionOpts) {\n   if (sessionPort == CONTACT_PORT) {\n   return true;\n   } else {\n   return false;\n   }\n\n   }\n   public void sessionJoined(short sessionPort, int id, String joiner) {\n      sessionId = id; joinerName = joiner; sessionEstablished = true;\n   }\n});\n\ntry {\nwhile (!sessionEstablished) {\n   Thread.sleep(10);\n}\n\nSignalEmitter emitter = new SignalEmitter(mySignalInterface, joinerName,\n   sessionId,\nSignalEmitter.GlobalBroadcast.Off);\nmyInterface = emitter.getInterface(SampleInterface.class);\n// Emitting signals myInterface.buttonClicked(1);\nmyInterface.playerPosition(12, 1, -24);\n\n} catch (InterruptedException ex) {\n  System.out.println(\nInterrupted\n);\n} catch (BusException ex) {\nSystem.out.println(\nBus Exception: \n + ex.toString());\n}\n\n\n\n\nCode 22. Registering signal handlers - client\n\n\nstatus = mBus.registerSignalHandlers(this);\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\n\n\n\nWhen registering for signal handlers, you must implement a\nclass that contains a method with the @BusSignalHandler annotation.\nIn \nCode 22. Registering signal handlers - client\n, the signal\nhandler would need to be in the same class. If needed, a\ndifferent class can be used to handle the signals; just\nput that class as an argument for the registerSignalHandlers method.\n\n\nCode 23. Adding signal handlers - client\n\n\n@BusSignalHandler(iface=\norg.sample.busSignals\n, signal=\nbuttonClicked\n)\npublic void buttonClicked(int id) {\n   switch(id)\n   case 0:\n      startNewGame();\n      break;\n   case 1:\n\n      continueGame();\n      break;\n   case 2:\n      quitGame();\n      break;\n   default:\n      break;\n}\n\n@BusSignalHandler(iface=\norg.sample.busSignals\n, signal=\nplayerPosition\n)\npublic void playerPosition(int x, int y, int z) {\nupdatePlayerPosition(x,y,z);\n}\n\n\n\n\nThe important part of the BusSignalHandler is to get the\niface name and the signal arguments correct. If these are not\ncorrect, it does not catch the emitted signal. The function name\nitself is not important; it could be changed from\n\npublic void buttonClicked(int id)\n to \npublic void foo(int id)\n\nand it would still catch the \"buttonClicked\" signal.\n\n\nSessionless signals\n\n\nA signal is a way to send one-way acknowledgment data from\none peer to another or to multiple peers. However, when sending\na signal we typically need to be a part of a session.\nThere are many use cases where using a session to send a signal\nwould be unnecessary overhead. For example, when you want to\ninform a peer, who is not in session with you, of a changed state\nof information. This works two ways, with a peer specifying\nwhether he wants to receive such notifications and with the\npeer who is sending out this notification to anyone who subscribed for it.\n\n\nIt should be noted that there are performance limitations that need to be understood:\n\n\n\n\nA sessionless signal is not a replacement for using a session,\nit is a shortcut to help avoid logic of setting up a session to\ntransmit small amounts of data.\n\n\nEach sessionless signal will replace the previous one.\nIf the receiving side has not had a chance to pull the data,\nit will be lost and not transmitted to the other side.\n\n\nPer number 2, the design of a sessionless signal is not\nto be used for File Transfer or frequent game play updates.\nThe design is for static information such as device details,\na player profile, or informing another application to invite\nto a session or trigger an action.\n\n\nAll sessionless signals have an overhead of creating and\ntearing down a connection which can cause unnecessary network\nchatter if used improperly for sending frequent data.\n\n\n\n\nThe way to send sessionless signals is not much different\nthan sending a regular signal. Just set the flag specifying\nthat it is a sessionless signal and set the session id used\nto send the signal to 0 since we are not a part of a session\nwhen we send this out.\n\n\nA sessionless signal does not need a session id - thus the name.\nThe sample showing this simple feature is under \nSDK/java/samples/sessionless\n.\n\n\nAlong the lines of the above-mentioned sample, let us assume\nthat a client peer is sending out sessionless signals. A service peer\nis the one that has subscribed for these signals/notifications.\n\n\nTwo things to know in the case of a sessionless signal is that:\n\n\n\n\nIt has a session id of 0.\n\n\nIt has the sessionless flag set to indicate that it is a\nsessionless signal.\n\n\n\n\nThis case can look like the following:\n\n\nSignalEmitter emitter = new SignalEmitter(mySignalService, 0,\nSignal.GlobalBroadcast.Off);\nemitter.setSessionlessFlag(true);\n\n\n\n\nThe service side, which wants to receive these sessionless signals,\ncalls an \naddMatch()\n function and passes in the rule for\nsessionless signals. This looks like (where \"my.signal.Service\"\nbelow is the name of the interface emitting the sessionless signal):\n\n\nStatus status = mBus.addMatch(\ninterface=;my.signal.Service',sessionless='t'\n);\n\n\n\n\nThat is all we need. The service side would have the signal handler\nfor the signal sent by the client. No advertisements, no binding,\nor joining of sessions is necessary by any side.\n\n\nUsing AllJoyn properties\n\n\nAllJoyn properties may be viewed as a specialized case of AllJoyn methods.\nAn AllJoyn property must start with the word \"get\" or \"set\".\nIf it starts with the word \"get\", it must return a single value\nand take no arguments. If it starts with the word \"set\",\nit must take a single parameter and return void. The parameter\ncan be a complex data type like an array or a structure.\nThis code should closely resemble the code used for AllJoyn methods.\n\n\nCode 24. Interface using properties\n\n\n@BusInterface (name = \norg.samples.properties\n)\npublic interface PropertiesInterface {\n   @BusProperty\n   public int getTextSize() throws BusException;\n   @BusProperty\n   public void setTextSize(int size) throws BusException;\n}\n\n\n\n\nCode 25. Implementation of the PropertiesInterface - service\n\n\nclass AllJoynProperties implements PropertiesInterface, BusObject {\n   private int mTextSize;\n\n   public int getTextSize() {\n      return mTextSize;\n   }\n\n   public void setTextSize(int size) {\n      mTextSize = size;\n   }\n}\n\n\n\n\nCode 26. Connecting the Properties interface to the bus - service\n\n\nprivate BusAttachment mBus;\nmBus = new BusAttachment(getClass().getName(),\nBusAttachment.RemoteMessage.Receive);\n\nAllJoynProperties mProperties = new AllJoynProperties();\nStatus status = mBus.registerBusObject(mProperties, \n/testProperties\n);\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\n\n\n\nThe D-Bus standard provides a way to get all of the properties\nfrom an interface. The code below shows how to use the interface\nimplemented in \nCode 25. Implementation of the PropertiesInterface - service\n,\nas well as the \nGetAll method\n from the D-Bus standard to\nget the \nTextSize\n property.\n\n\nNOTE:\n The GetAll method can return multiple values into a Map.\nEach property can be accessed using the name of the property.\n\n\nCode 27. Calling the properties interface and using the GetAll method for properties\n\n\nprivate BusAttachment mBus;\nprivate ProxyBusObject mProxyObj;\nprivate PropertiesInterface mPropertiesInterface;\nprivate Properties mProperties;\nprivate static short CONTACT_PORT = 42;\n\nprivate boolean isJoined = false;\n\nmBus = new BusAttachment(getClass().getName(),\nBusAttachment.RemoteMessage.Receive);\n\nmBus.registerBusListener(new BusListener {\n   public void foundAdvertisedName(String name, short transport,\nString namePrefix) {\n\n   short contactPort = CONTACT_PORT;\n   SessionOpts sessionOpts = new SessionOpts();\n   sessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\n   sessionOpts.isMultipoint = false;\n   sessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\n   sessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\n   Mutable.IntegerValue sessionId = new Mutable.IntegerValue();\n\n   Status status = mBus.joinSession(name, contactPort, sessionId, sessionOpts,\nnew SessionListener());\n   if (status != Status.OK) {\n   System.exit(0);\n   }\n   mProxyObj =  mBus.getProxyBusObject(\ncom.my.well.known.name\n,\n      \n/testProperties\n,\n      sessionId.value,\n      new Class\n?\n[] { PropertiesInterface.class,\n         Properties.class });\n\n   mPropertiesInterface = mProxyObj.getInterface(PropertiesInterface.class);\n   mProperties = mProxyObj.getInterface({Properties.class);\n   isJoined = true;\n}\n});\nStatus status = mBus.connect();\nif (Status.OK != status) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.findAdvertisedName(\ncom.my.well.known.name\n);\nif (status != Status.OK) {\n   System.exit(0);\n}\n\nwhile(!isJoined) {\n   try { Thread.sleep(10);\n   } catch (InterruptedException e) {\n   System.out.println(\nProgram interupted\n);\n   }\n}\n\nmPropertiesInterface.setTextSize(18);\nint textSize = mPropertiesInterface.getTextSize();\n\nMap\nString, Variant\n map = mProperties.GetAll(\norg.samples.properties\n);\ntextSize = map.get(\nTextSize\n).getObject(Integer.class);\n\n\n\n\nSecurity\n\n\nWhen an interface is marked as \"secure\", it indicates that all\ndata sent via a method call or signal must be encrypted.\nOnly an authenticated client can use an interface that has\nbeen marked as secure by using the @Secure annotation\n(see [Making a secure bus interface using the @Secure annotation][make-secure-bus-interface-using-secure-annotation]).\n\n\nMarking an interface as a secure interface is as simple as\nadding the annotation @Secure when declaring the interface.\nSee \nCode 5. Creating a secure interface\n.\n\n\nIt possible to use security and authentication with interfaces\nthat do not have the @Secure annotation. This is possible using Object Security.\n\n\nObject security\n\n\nObject Security allows you to force peer authentication\neven when the interface does not have the @Secure annotation.\nIt's possible to tell the AllJoyn framework that you want\nauthentication when you register a your BusObject.\n\n\nCode 28. Registering an BusObject using Object Security\n\n\nbus.registerBusObject(myService, \n/my/object/path\n, true);\n\n\n\n\nThe ProxyBusObject should also indicate that it is using peer authentication.\n\n\nCode 29. Get a ProxyBusObject that uses Object Security\n\n\nbus.getProxyBusObject(\nmy.wellknown.name\n, \n/my/object/path\n,\nsessionId, new Class\n?\n[] {MyInterface.class}, true);\n\n\n\n\nFor both the \nregisterBusObject\n and \ngetProxyBusObject\n methods,\nan extra Boolean argument can be added to the method calls.\nIf this is 'true', then peer authentication is used.\n\n\nThe programmer is responsible for making sure that both the\nBusObject and ProxyBusObject are using Object security. .\nIf the BusObject is created as a secure object, the ProxyBusObject\nshould also be secure. If they do not agree, it is an error.\n\n\nAllJoyn authentication mechanisms\n\n\nWhen using a secure interface, an authentication listener\nmust be created to handle authentication events. The authentication\nlistener provides authentication credentials for the local application\nand, depending on the authentication mechanism, checks the credential\nof the remote application.\n\n\nThe AllJoyn framework supports the following types of authentication mechanisms:\n\n\n\n\nSecure Remote Password (SRP) anonymous key exchange\n\n\nSecure Remote Password (SRP) logon (username and password)\n\n\nRSA key exchange using X509 certificates\n\n\nPIN key exchange\n\n\nECDHE_NULL key exchange\n\n\nECDHE_PSK key exchange\n\n\nECDHE_ECDSA key exchange\n\n\n\n\nSRP key exchange uses a one-time authenticating password to\nset up an authentication key. This key is used for all subsequent\ninteractions between the client and server.\n\n\nSRP logon requires that the user give a username and password\nbefore the client and server are able to share an interface,\nunlike the SRP key exchange where the password exchange is a\none-time event. SRP logon requires the username and password\nbe supplied each time a session is established between the\nclient and server.\n\n\nRSA key exchange uses RSA public key cryptography to establish\na shared-secret passphrase. The shared-secret passphrase is\nused to establish a key. This key is then used for all subsequent\nexchanges between the given client and server using the protocol.\n\n\nPIN key exchange uses a one-time authenticating password to\nset up an authentication key. This key is used for all subsequent\ninteractions between the client and server. PIN key exchange\nis specifically designed for devices that have really stringent\nmemory constrains like MCUs (Micro Control Units). Unless you are\ncommunicating with an MCU, it is recommended that you use an\nauthentication mechanism other than PIN key exchange.\n\n\nECDHE_NULL is an Elliptic Curve Diffie-Hellman Ephemeral key\nexchange which is anonymous.\n\n\nECDHE_PSK is an Elliptic Curve Diffie-Hellman Ephemeral key\nexchange which uses a pre-shared key like a PIN, a passphrase,\nor a symmetric key.\n\n\nECDHE_ECDSA is an Elliptic Curve Diffie-Hellman Ephemeral key\nexchange which uses a key agreement authenticated with an\nasymmetric key, and validated with an Elliptic Curve Digital\nSignature Algorithm (ECDSA) signature.\n\n\nEach type of security mechanism requires that an Authentication\nListener be created that handles the specific type of security\nexchange needed. When creating the Authentication Listener, you\nspecify which type of authentication mechanism you want to use.\nEach authentication mechanism is specified by a string.\n\n\nAuthentication mechanisms and AllJoyn identifying string\n\n\n\n\n\n\n\n\nAuthentication mechanism\n\n\nString identifying the authentication mechanism\n\n\n\n\n\n\n\n\n\n\nSRP anonymous key exchange\n\n\nALLJOYN_SRP_KEYX\n\n\n\n\n\n\nSRP logon\n\n\nALLJOYN_SRP_LOGON\n\n\n\n\n\n\nRSA key exchange\n\n\nALLJOYN_RSA_KEYX\n\n\n\n\n\n\nPIN key exchange ALLJOYN_PIN_KEYX\n\n\n\n\n\n\n\n\nECDHE_NULL key exchange\n\n\nALLJOYN_ECDHE_NULL\n\n\n\n\n\n\nECDHE_PSK key exchange\n\n\nALLJOYN_ECDHE_PSK\n\n\n\n\n\n\nECDHE_ECDSA key exchange\n\n\nALLJOYN_ECDHE_ECDSA\n\n\n\n\n\n\n\n\nThe AuthListener\n\n\nThe main difference between a secure application and a\nplain application, besides the @Secure annotation of the\ninterfaces, is the required inclusion of an AuthListener.\nAn implementation of an AuthListener contains two callback methods:\n\n\n\n\nRequested\n\n\nCompleted\n\n\n\n\nAny time a method call comes in on a secure interface,\nthe AllJoyn framework checks to see if it already knows how\nto decrypt the contents of the method call. If it cannot decrypt\nthe method call, the \nrequested(...)\n method call is called.\n\n\nThe requested method call contains some or all of the following information:\n\n\n\n\nThe Authentication mechanism specified using one of the strings from\n\nAuthentication mechanisms and AllJoyn identifying string\n.\n\n\nPeerName - the well-known-name or unique name of the peer that initiated the\nAuthentication request.\n\n\nA count of the number of authentication request attempts made.\n  The count for the first Authentication request starts at 1.\n\n\nThe user name of the user making the authentication request.\n  A user name is not required for all forms of authentications\n  and may be an empty string.\n\n\nThe specific type of authentication information being requested.\n  Depending on what type of authentication mechanism is being used,\n  one or more of these requests may be made:\n\n\nCertificateRequest (RSA key exchange or ECDHE_ECDSA key exchange)\n\n\nLogonEntryRequest (SRP logon)\n\n\nPasswordRequest (SRP key exchange, SRP logon, RSA key exchange,\n    PIN key exchange, or ECDHE_PSK key exchange)\n\n\nPrivateKeyRequest (RSA key exchange or ECDHE_ECDSA key exchange)\n\n\nUserNameRequest (SRP logon)\n\n\nVerifyRequest (RSA key exchange or ECDHE_ECDSA key exchange)\n\n\n\n\nThe \nrequested(...)\n callback method may be called one or\nmore times for each authentication request. For each request,\nthe program is expected to obtain or generate the required\ninformation. The requested information can be obtained from any\nsource available including requesting information from a user.\nIf the requested information cannot be provided then returning\nfalse indicates failure.\n\n\nOnce the authentication has finished the \ncompleted(...)\n\ncallback method is called. This contains:\n\n\n\n\nThe authentication mechanism that was just completed\n\n\nThe peerName (well-known name or unique name)\n\n\nA boolean variable indicating if the authentication attempt completed successfully.\n\n\n\n\nAs we talk about each authentication method, message sequence\ncharts are provided showing method calls and callbacks used\nto set up the authenticated session. A legend for the\nMessage Sequence Chart (MSC) is provided in the following figure.\n\n\n\n\nFigure: Message Sequence Chart legend\n\n\nThe message sequence charts simplify all device-to-device\ncommunication by ignoring bus traffic. All AllJoyn bus traffic\nis compressed into a single line in the message sequence charts\nlabeled \"AllJoyn Bus.\" This shows only the callbacks and\nmethod calls that we should be interested in when setting up authentication.\n\n\nCode for SRP key exchange\n\n\nSRP key exchange works similarly to pairing Bluetooth devices.\nThe devices advertise that they want to talk with one another\nand when they discover one another a password is entered on\nthe device. This one-time password proves that the device knows\nabout the Bluetooth device. Once this one-time pairing is completed,\nthe Bluetooth device can connect with the device at any time\nwithout repeating the pairing process.\n\n\nCode 30. Registering the authentication listener\n\nsets up a client/server that uses SRP key exchange to set up\na secure connection. The code shares many similarities with\npairing a Bluetooth device.\n\n\n\n\nThere is a one-time password exchange.\n\n\nOnce the authentication is completed the client and server\ncan communicate without asking for passwords to be entered.\n\n\nEven after the program is closed and restarted, the\nauthentication is still valid.\n\n\n\n\nThe following figure shows the sequence in which the callback\nmethods are instantiated the first time a secure method call\nis made using SRP key exchange. The sequence shown only happens\nthe first time the sender tries to communicate with the receiver.\n\n\n\n\nFigure: MSC SRP key exchange\n\n\nIn \nCode 30. Registering the authentication listener\n,\nthe sender is the client and the receiver is the service.\n\n\nBefore calling connect, the \nBusAttachment.registerAuthListener()\n\nshould be called. The code snippet below shows registering an\nAuthListener with the name SrpKeyXListener. The code for the\nSrpKeyXListener is shown in \nCode 31. SRP key exchange AuthListener - service\n\nfor the service and \nCode 32. SRP key exchange AuthListener - client\n for the client.\n\n\nCode 30. Registering the authentication listener\n\n\nBusAttachment mBus;\nmBus = new BusAttachment(\nmyProgramName\n, BusAttachment.RemoteMessage.Receive);\n\nSrpKeyXListener myAuthListener;\n\nStatus status = mBus.registerAuthListener(\nALLJOYN_SRP_KEYX\n,\n   myAuthListener);\nif (status != Status.OK) {\n   finish();\n   return;\n}\n\n\n\n\nThe rest of the steps for connecting and advertising the\nservice have been covered in \nDiscovery and sessions\n\nand are unchanged for a secure interface.\n\n\nWhen registering the AuthListener, we have identified what\ntype of security the AuthListener is responsible for handling - in this case,\n\n\"ALLJOYN_SRP_KEYX\"\n.\n\n\nCode 31. SRP key exchange AuthListener - service\n\n\n/*\n* This Secure Remote Password Key Exchange listener creates a random\n* 6-digit pin code for each authentication attempt.\n*/\nprivate static class SrpKeyXListener implements AuthListener {\n   private Random mPasswordGenerator;\n   private boolean mGeneratePassword;\n\n   public SrpKeyXListener() {\n      mPasswordGenerator = new Random();\n      mGeneratePassword = true;\n   }\n\n   @Override\n   public boolean requested(String mechanism, String peerName, int count,\n      String userName, AuthRequest[] requests) {\n      if (mGeneratePassword) {\n         mGeneratePassword = false;\n      mPassword = String.format(\n%06d\n,\nmPasswordGenerator.nextInt(1000000));\n      System.out.println(\nOne Time Password : \n + mPassword);\n      }\n      for (AuthRequest request : requests) {\n         if (request instanceof PasswordRequest) {\n            ((PasswordRequest) request).setPassword(mPassword.toCharArray());\n\n         }\n      }\n      return true;\n   }\n\n   @Override\n   public void completed(String mechanism, String peerName,\nboolean authenticated) {\n      mGeneratePassword = true;\n   }\n}\n\n\n\n\nThe first time that the requested callback is called,\na six-digit random number is generated and set as the password.\nWe check to see what \ninstanceof\n AuthRequest we received.\nSince we are using SRP key exchange, we are only expecting\npassword requests. We cast the base AuthRequest type to a\n\nPasswordRequest\n and call the \nsetPassword\n method passing in a\nCharArray of the six-digit random number that was generated.\nThe code shown does not limit the number of times an application\ncan try to authenticate with this code. We can see the number\nof times the user has tried to authenticate by looking at the\ncount parameter. This code only generates a new PIN code\nat the start of an authentication attempt; as long as \ncompleted\n\nhas not been called, the same password is used.\n\n\nCode 32. SRP key exchange AuthListener - client\n\n\n/*\n* This Secure Remote Password Key eXchange listener will ask the user to\n* enter the one time password.  This password must match the six-digit\n* string randomly generated by the service's SrpKeyXListener class.\n*\n* The following code limits the user to three authentication attempts.\n*/\nstatic class SrpKeyXListener implements AuthListener {\n   public boolean requested(String authMechanism,\nString authPeer, int count, String userName,\n         AuthRequest[] requests) {\n      if (count \n= 3) {\n         System.out.println(\nPlease enter one time password:\n);\n         Scanner in = new Scanner(System.in);\n         mPassword = in.nextLine();\n         for (AuthRequest request : requests) {\n            if (request instanceof PasswordRequest) {\n               ((PasswordRequest)\nrequest).setPassword(mPassword.toCharArray());\n            }\n         }\n         return true;\n      }\n      return false;\n   }\n\n   public void completed(String authMechanism, String authPeer, boolean\nauthenticated) {\n      if (!authenticated) {\n         System.out.println(\nAuthentication failed.\n);\n      }\n   }\n}\n\n\n\n\nEach time that the \nrequested\n callback is called, the user\nis asked to provide the one-time password. The one-time password\nentered by the user must match the six-digit PIN code that was\nrandomly generated by the service. The user is given three attempts\nto provide the proper PIN code. If the user is unable to provide\nthe PIN code, the authentication attempt fails. Just like the code\nused in the service's SrpKeyXListener, we also check to see what\n\ninstanceof\n AuthRequest we have received. Since we are using\nSRP key exchange, we are only expecting password requests.\nThe base \nAuthRequest\n type is cast to a \nPasswordRequest\n\ntype and the password is set using the \nsetPassword\n method.\nUnlike the service, this code limits the number of attempts\nthe user is given to produce the proper PIN code. After three\nfailed attempts, this returns false indicating failure to\ncomplete authentication.\n\n\nCode for SRP logon\n\n\nSRP logon uses the familiar user name/password method for\nidentity verification. This should be familiar to anyone\nwho has used online shopping, email, or banking.\n\n\nUnlike SRP key exchange and RSA key exchange, SRP logon requires\nthe user to enter the user name/password every time a session\nis established. The verification only lasts for the length of\nthe session. If the program is shut down and then restarted,\nthe user is asked to re-authenticate.\n\n\n\n\nFigure: MSC SRP logon option 1\n\n\n\n\nFigure: MSC SRP logon option 2\n\n\n\n\nFigure: MSC SRP logon option 3\n\n\n\n\nFigure: MSC SRP logon option 4\n\n\nWith SRP logon, there are four possible sequence diagrams.\nWhen the sender is requested to provide a user name or password,\nthey can provide just the user name or both the user name and password.\nThe information is sent to the receiver and the receiver then\nuses the user name to look up the password or logon. If the password\nwas also supplied and matches the receiver's password or the\ncomputer logon, the authentication completes. If only the\nuser name was supplied, the receiver then requests the user name\nand password from the sender.\n\n\nWhat is the logon? The logon is a string that is computed\nusing the process described in \nRFC 5054\n.\nThis ends up being a large string that takes the form of \nN:g:s:v\n where:\n\n\n\n\nN is a large prime number\n\n\ng is the generator\n\n\ns is the salt\n\n\nv is the computed verifier\n\n\n\n\nThe logon gives all the information needed to compute the\nverifier from the user name and password. This is a strongly\nencrypted string that can be used to verify a user name and\npassword but cannot be used to obtain the user name and password.\nBecause it is a secure way to store a user name and password,\nmany databases do not actually store the password but instead\nstore the logon as defined by \nRFC 5054\n.\nComputing the logon string is beyond the scope of this document.\n\nCode 33. Registering the authentication listener for SRP logon\n\nuses plain text user name and password.\n\n\nWhen using a secure interface, an authentication listener\nmust be created that handles authentication. The authentication\nlistener decides if the connecting client is a trusted client\nand if they should be allowed to use the interface. The implementation\nof the SrpLogonListener is shown in\n\nCode 33. Registering the authentication listener for SRP logon\n.\nSee \nCode 34. SRP Logon AuthListener - service\n\nfor the service (receiver) and \nCode 34. SRP Logon AuthListener - service\n\nfor the client (sender).\n\n\nCode 33. Registering the authentication listener for SRP logon\n\n\nBusAttachment mBus;\nmBus = new BusAttachment(\nmyProgramName\n, BusAttachment.RemoteMessage.Receive);\n\nSrpLogonListener myAuthListener;\n\nStatus status = mBus.registerAuthListener(\nALLJOYN_SRP_LOGON\n, myAuthListener);\n\nif (status != Status.OK) {\n   finish();\n   return;\n}\n\n\n\n\nThe rest of the steps for connecting and advertising the service\nhave been covered in the earlier sections and are unchanged\nfor a secure interface.\n\n\nCode 34. SRP Logon AuthListener - service\n\n\nclass SrpLogonListener implements AuthListener {\n   private Map\nString, char[]\n mUserNamePassword;\n\n   /* Populate the user name and password table used by this listener. */\n   public SrpLogonListener() {\n      mUserNamePassword = new HashMap\nString, char[]\n();\n      mUserNamePassword.put(\nuser1\n, \npassword1\n.toCharArray());\n      mUserNamePassword.put(\nuser2\n, \npassword2\n.toCharArray());\n   }\n\n   /*\n    * Given the user name, look up the password. Returning true without\n    * setting the password tells the authentication engine to ask the peer\n    * for the user name again.\n    */\n   public boolean requested(String mechanism,\n      int count,\n      String userName,\n      AuthRequest[] requests) {\n   char[] password = mUserNamePassword.get(userName);\n\n   if (password != null) {\n      for (AuthRequest request : requests) {\n         if (request instanceof PasswordRequest) {\n            ((PasswordRequest) request).setPassword(password);\n         }\n      }\n   }\n   return true;\n   }\n   public void completed(String mechanism, boolean authenticated) {\n   }\n}\n\n\n\n\nWhen the \nrequested()\n method is called, it makes a \nPasswordRequest\n\nand a \nLogonEntryRequest\n. Since only passwords are provided,\nthe \nLogonEntryRequest\n has been ignored. The sample above has\ncreated a HashMap that contains two user names and two passwords.\nWhen the \nrequested()\n callback method is called, it contains\nthe user name that can be used to obtain the password from the\nHashMap. If the password matches the password provided by\nthe client, the authentication is completed. If a password\nwas not provided, the client is asked to once again provide\na user name and password. If the service is unable to obtain\nthe password from the user name, it requests the user name and password again.\n\n\nCode 35. SRP Logon AuthListener - client\n\n\nclass SrpLogonListener implements AuthListener {\n\nstatic class SrpLogonListener implements AuthListener {\n   public boolean requested(String mechanism,\n         String peerName,\n         int count,\n         String userName,\n         AuthRequest[] requests) {\n   /*\n    * Collect the requests we're interested in to simplify\n    * processing below.\n    */\n   PasswordRequest passwordRequest = null;\n   UserNameRequest userNameRequest = null;\n   for (AuthRequest request : requests) {\n      if (request instanceof PasswordRequest) {\n         passwordRequest = (PasswordRequest) request;\n      } else if (request instanceof UserNameRequest) {\n         userNameRequest = (UserNameRequest) request;\n      }\n   }\n\n   if (count \n= 3) {\n      System.out.print(\nPlease enter user name [user1]: \n);\n      Scanner in = new Scanner(System.in);\n      String user = in.nextLine();\n\n      System.out.print(\nPlease enter password [password1]: \n);\n      String password = in.nextLine();\n\n      userNameRequest.setUserName(user);\n      passwordRequest.setPassword(password.toCharArray());\n      return true;\n   }\n   return false;\n}\n\npublic void completed(String authMechanism,\n      String authPeer,\n      boolean authenticated) {\n   if (!authenticated) {\n      System.out.println(\nAuthentication failed.\n);\n   }\n}\n}\n\n\n\n\nThe \nrequested()\n method requests both the \nPasswordRequest\n\nand the \nUserNameRequest\n. Here we have asked the user to\nenter both user name and password. Since this is sample code,\nwe are also revealing the user name and password which\nnormally would not be done unless it is a guest account.\nIf the supplied user name and password match the user name\nand password at the server, the authentication completes.\nIf the user name and password do not match, the user gets\nup to three tries to enter the correct user name and password\nbefore the authentication fails.\n\n\nCode for RSA key exchange\n\n\nRSA is an encryption method that has been successfully used\nfor online commerce for years. It consists of the exchange of\nwhat is called a public key. The public key can be used to\nencrypt data but cannot be used to decrypt the data. To be able\nto decrypt the data, the receiver would use their private key.\nIf the data were encrypted using their public key, they can read\nthe data contents but no one else can. To make private keys\neven more secure, they are typically encrypted using a password.\nTo decrypt the private key, the password must be known.\n\n\nThe RSA key exchange certificate chain requires three things:\n\n\n\n\nA private key\n\n\nA password used to encrypt the private key\n\n\nAn X.509 certificate (a standard public key structure)\n\n\n\n\nThe X.509 certificate contains the public key as well as\nadditional information such as who issued the key and\nhow long the key is valid.\n\n\nIf you have the three required elements, you can provide them\nto the AuthListener when they are \nrequested()\n. If you have\nnot generated the required elements, the code can automatically\ngenerate them for you.\n\n\n\n\nFigure: MSC RSA key exchange option 1\n\n\nFor this option, both sender and receiver have all the full\nRSA certificate chain needed: their own private keys, certificates,\nand the password used for private key encryption. When the sender\ncalls the remote method call to an unverified receiver, the sender\nis asked to provide the RSA certificate chain. Once the RSA\ncertificate chain has been provided, the receiver also requests\nthe RSA certificate chain. The receiver then sends out a verify\nrequest. This gives the receiver an opportunity to inspect the\ncertificate sent from the sender. The receiver can inspect the\ncertificate and accept or reject the certificate based on\ninformation such as who issued the certificate.\n\n\n\n\nFigure: MSC RSA key exchange option 2\n\n\nFor this option the sender does not have the RSA certificate\nchain needed for RSA authentication. The code can generate a\nself-signed RSA private key and X.509 certificate for the user.\nThe user only needs to supply the password needed to encrypt the\nprivate key. If multiple authentication requests are made,\nthe sender reuses the private key and certificate generated.\nIt is important that each additional request for password\nuses the same password. If a different password is supplied,\nyou receive an error stating that you are unable to decrypt\nthe RSA private key. It is possible to find out if this is\nthe first time the password is being generated by calling\n\nAuthListener.PasswordRequest.isNewPassword()\n method.\n\n\n\n\nFigure: MSC RSA key exchange option 3\n\n\nIn this option, neither the sender nor the receiver have the\nRSA elements or they were already generated. Both sides ask\nfor their private key password. The sender and receiver can\nchoose differing passwords since the password is only used\nfor their own private key which is not shared with the other device.\n\n\n\n\nFigure 10: MSC RSA key exchange option 4\n\n\nWith this option the receiver side generates its own private key and certificate.\n\n\nWhen using a secure interface, an authentication listener must\nbe created that handles connection authentication. The authentication\nlistener decides if the connecting client is a trusted client\nand if they should be allowed to use the interface.\n\n\nCode 36. Registering the authentication listener\n\n\nBusAttachment mBus;\nmBus = new BusAttachment( \nMyAppName\n, BusAttachment.RemoteMessage.Receive);\n\nRsaKeyXListener mAuthListener;\n\nStatus status = mBus.registerAuthListener(\nALLJOYN_RSA_KEYX\n,\n   mAuthListener);\nif (status != Status.OK) {\n   finish();\n   return;\n}\n\n\n\n\nThe rest of the steps for connecting and advertising the service\nare detailed in \nDiscovery and sessions\n\nand are unchanged for a secure interface.\n\n\nCode 37. RSA key exchange AuthListener - service and client\n\ndemonstrates the auth listener for MSC RSA key exchange option 3,\nand would work for both the service and client.\n\n\nCode 37. RSA key exchange AuthListener - service and client\n\n\n/* The RSA key exchange listener uses X.509 certificates to authenticate. */\nclass RsaKeyXListener implements AuthListener {\n   public boolean requested(String mechanism,\n         String peerName,\n         int count,\n         String userName,\n         AuthRequest[] requests) {\n   /*\n    * Collect the requests we're interested in to simplify\n    * processing below.\n    */\n   PasswordRequest passwordRequest = null;\n   CertificateRequest certificateRequest = null;\n   VerifyRequest verifyRequest = null;\n\n   for (AuthRequest request : requests) {\n      if (request instanceof PasswordRequest) {\n         passwordRequest = (PasswordRequest) request;\n      } else if (request instanceof CertificateRequest) {\n         certificateRequest = (CertificateRequest) request;\n      } else if (request instanceof VerifyRequest) {\n         verifyRequest = (VerifyRequest) request;\n      }\n   }\n\n   if (verifyRequest != null) {\n      /* Verify a certificate chain supplied by the peer. */\n      return true;\n   } else if (certificateRequest != null) {\n      /*\n       * The engine is asking us for our certificate chain.\n       *\n       * If we return true and do not supply the certificate chain,\n       * then the engine will create a self-signed certificate for\n       * us. It will ask for the passphrase to use for the private\n       * key via a PasswordRequest. If we return false authentication\n       * will fail.\n       */\n      return true;\n   } else if (passwordRequest != null) {\n      /*\n       * A password request under the ALLJOYN_RSA_KEYX mechanism is\n       * for the passphrase of the private key.\n       *\n       * PasswordRequest.isNewPassword() indicates if the engine\n       * needs to create a private key for us (as part of creating a\n       * self-signed certificate).  Otherwise it is expecting the\n       * passphrase for the existing private key.\n       */\n      if (count \n= 3) {\n         if(passwordRequest.isNewPassword()){\n            System.out.print(\nEnter password to generate new \n +\n               \nprivate key and certificate : \n);\n         } else {\n         System.out.print(\nPlease enter the private key password : \n);\n\n         }\n         Scanner in = new Scanner(System.in); String password = in.nextLine();\n         passwordRequest.setPassword(password.toCharArray()); return true;\n      }\n   }\n   return false;\n   }\n\n   public void completed(String mechanism,\n      String peerName,\n      boolean authenticated) {\n   if (!authenticated) { System.out.println(\nAuthentication failed.\n);\n   } else {\n      System.out.println(\nAuthentication successful.\n);\n   }\n}\n}\n\n\n\n\nWhen an authentication request comes in, it contains a \nPrivateKeyRequest\n,\n\nCertificateRequest\n, and \nPasswordRequest\n. This code does not\nprovide the private key or the X.509 certificate but still\nreturns true for the CertificateRequest. The code tries to\nsee if it has already generated a private key and a self-signed\ncertificate. If it has generated a private key and a self-signed\ncertificate, it asks for the password that was used to generate\nthe key and certificate. If it has not generated a private key\nand self-signed certificate, it asks for a password to do so.\nIn both instances you receive a PasswordRequest. The only way\nto tell if the private key and certificate have already been\ngenerated is to check if this is a request for a new password:\n\npasswordRequest.isNewPassword()\n. It is important to remember\nthe password, because the same password is expected on each\nadditional authentication attempt. Both the client and the\nservice handle RSA authentication identically, and there is\nno difference between the service \nAuthListener\n and the\nclient \nAuthListener\n.\n\n\nIf you do not want the AllJoyn framework generating your\nprivate key and X.509 certificate for you, then you need to\nprovide the private key, the password used to encrypt the\nprivate key, and the X.509 certificate. For the following sample,\nthe private key and certificate were generated using openssl.\nFor most systems, openssl is required to run the AllJoyn framework.\nYou might already have it installed on your system (openssl is\nnot required for all installations of Windows). Many other tools\nare available to create the private key and certificate;\nif you are familiar with those tools feel free to use them.\n\n\nSee openssl's documentation for creating keys and certificates:\n\n\nhttp://www.openssl.org/docs/HOWTO/keys.txt\n\n\nhttp://www.openssl.org/docs/HOWTO/certificates.txt\n\n\nTo create a private key the following command was used:\n\n\n$ openssl genrsa -des3 -out privkey.pem 2048\n\n\n\n\nYou are asked to enter a pass phrase; the pass phrase \"pass\" was chosen.\n\n\nThis generates a private key that is 2048 bits in length.\n2048 or higher is recommended for RSA keys.\n\n\nThe private key is then used to generate the X.509 certificate\n\n\n$ openssl req -new -x509 -key privkey.pem -out cacert.pem -days 3650\n\n\n\n\nYou are asked to provide the following for the certificate:\n\n\n\n\nThe pass phrase for privkey.pem\n\n\nCountry name (2 letter code)\n\n\nState or province name (full name)\n\n\nLocality name (e.g., city)\n\n\nOrganization name\n\n\nOrganization unit name\n\n\nCommon name (e.g., YOUR name)\n\n\nEmail address\n\n\n\n\nThis certificate is valid for just under 10 years from the date\nof its creation. Inspect the contents of the certificate using openssl:\n\n\n$ openssl x509 in cacert.pem -noout -text\n\n\n\n\nCode 38. RSA Key Exchange AuthListener - service and client\n\nrepresents the sequence shown in the MSC RSA key exchange option 1 diagram.\n\n\nCode 38. RSA Key Exchange AuthListener - service and client\n\n\n/* The RSA key exchange listener uses X.509 certificates to authenticate. */\nprivate static class RsaKeyXListener implements AuthListener {\n   /* password used when generating the private key */\n   private static final String mPassword = \npass\n;\n   /* 2048 bit RSA private key */\n   private static final String mPrivateKey =\n      \n-----BEGIN RSA PRIVATE KEY-----\\n\n +\n      \nProc-Type: 4,ENCRYPTED\\n\n +\n      \nDEK-Info: DES-EDE3-CBC,61A8FD1CE34DE29B\\n\n +\n      \n\\n\n +\n\n      \nuIG/qraR9tvxhxyMPsLAP8ZimZBHMwJuMnRkAoU/fO/REnX7Zo+OLD+/ks4MnmBX\\n\n +\n      \n1ziBBP3MSRcvF47C8U5qmdHPg4ujzJgbX0F6tCMOmjdeAt+iFOjov43gfuGXY3sr\\n\n +\n      \nL/28OMUqrgyYVuaytVPBWOSFKy9BBSO/h/pCVHcQC+2C4vGXgz3aAoM4euqXgGXT\\n\n +\n      \nxVMh8wLAMfRFJHmTmb65n8LPb5j2UOLJ3MkFXXi753qwLfqMlEO7cE5UIh+C+LwA\\n\n +\n      \nKhFfehtAKMlaArnlfuJMnEuHj9vj7XfhFpdH23AXUt3CBngJvuF/xi9r0bfwEgzi\\n\n +\n      \n0Nc4wKCyj2VTr3qH22ZYat5gkSh8p8qs8FsQyZE/IE7BUp1han25fev1ycsvLaqZ\\n\n +\n      \nzxhoCNJMrX3o+B8OqKN4sJPMte6/5BcJkvap4Wih1iNv+H0Aflc0A9Wrfww16bgx\\n\n +\n      \nC3OtxfFWB8CC5d6DNxmc3Ef6M+wzbB4OW/umWThPLcqK7tjlq2hqeaOJnsW9CwXL\\n\n +\n      \no/6LoAwrRss/Tp+1sw7FRKQ+cOdKXdjWwtpu8JV3EF9zibxMG00V2OLaHHU+JrOY\\n\n +\n      \nj9Mkru2ItcJEOtH1hv5iNpfTMnZbgfDF1iEhAZNKDdvoSVM8MrcrQONLZ8whiUlN\\n\n +\n      \nLQJU9I3oCLHJEHS23T2gMIJFyU7eb+8A+dbMEPqhvm6VK2PONEQZtQAEf+O+Hgq2\\n\n +\n      \nccx94SayajiwQoPcu8uHPEeJym2rx3/IZhttymvAqxX9GzydvsPnQedRT31PjrMq\\n\n +\n      \nbZYdNMV2Y9+GLef/x6dwFMjzHZC2o8nglCJ/PYpebISPJLRsdYt/HuGr/XFAKPQv\\n\n +\n      \njN1xbUWOYSiws/1xnidb6SYQEPHvsutaerplHeZ7XQkddKeXoz0BTF9XnY3magCd\\n\n +\n      \ntWnuZtznd56pggNY4skUMF8bh/sbHtF0/MfI5SOAPmrvGsC/6+lZG/HGM1LM9u5+\\n\n +\n      \n016U1T54DjV3yDgLen1rQ4R8wZ3DLc15VVX5L4ORKqFb3073oX+RGUeS0c5x+Pqd\\n\n +\n      \n/rp9CdWN3FcyC/NXsCo1GVR3qW/5/HwimQxghLqEgho1ZELIZskMP0zzBSejcUFJ\\n\n +\n      \n5vLiusCU8C0DdcV3sfye/8kNcIalIyBeMJviA9s4AOylZsXdJyADHpHdrMsIa0R0\\n\n +\n      \nFyqZBHilUMlHDbQgd0+Nkuh+zP4iXh89MJQl7Knb8Y/aqCO8LYGNLaXv8lOFnqYr\\n\n +\n      \nmYnR9HxLHfkKoe8qoKQqwDDrzIZGRhMYBAX2RgxSXSkfUSem9ccJ+t6vm7js5ORj\\n\n +\n      \nIT8JunaRFxBYkP9popYEjV0iEKWeshyulQHpScnncca0IqkHdyNfrK+zJhoi2KhU\\n\n +\n      \neTlael/ACxP1GEZDd2pPTzwB/KdcoQQrjfi/zFovIOYmcIo1Q2eJZLgJyc3x1ne/\\n\n +\n      \n21/pYZ3FiOjr3tP9MHLg3tcdi7ZShzd81bvudFCuSI569MJpGGlLYuBn/+UvohBK\\n\n +\n      \nigOnHn/R60euBdsQdAxhDWJqzVDm1q5J0jmN5hk2RvQlfbX/L+cZvJsClhsO4ZX7\\n\n +\n      \nJoWdSxXn5gCsWAX8LZUa46tRac1QuCPSJw+q55dif6ze6/A7vnyjg3ZxDLKxcs/O\\n\n +\n      \n-----END RSA PRIVATE KEY-----\\n\n;\n   /* X.509 certificate good until Jul 9 15:11:06 2021 GMT */\n   private static final String mCert =\n      \n-----BEGIN CERTIFICATE-----\\n\n                                       +\n      \nMIIEgzCCA2ugAwIBAgIJAPij5sS8BfieMA0GCSqGSIb3DQEBBQUAMIGHMQswCQYD\\n\n +\n\n      \nVQQGEwJOQTETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHU2VhdHRsZTEN\\n\n +\n\n      \nMAsGA1UEChMEUXVJQzEQMA4GA1UECxMHQWxsSm95bjENMAsGA1UEAxMEVXNlcjEh\\n\n +\n\n      \nMB8GCSqGSIb3DQEJARYSdXNlckBzb21lcGxhY2UuY29tMB4XDTExMDcxMjE1MTEw\\n\n +\n\n      \nNloXDTIxMDcwOTE1MTEwNlowgYcxCzAJBgNVBAYTAk5BMRMwEQYDVQQIEwpXYXNo\\n\n +\n\n      \naW5ndG9uMRAwDgYDVQQHEwdTZWF0dGxlMQ0wCwYDVQQKEwRRdUlDMRAwDgYDVQQL\\n\n +\n\n      \nEwdBbGxKb3luMQ0wCwYDVQQDEwRVc2VyMSEwHwYJKoZIhvcNAQkBFhJ1c2VyQHNv\\n\n +\n\n      \nbWVwbGFjZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDliF9P\\n\n +\n\n      \n2asoGLtCJ8UXKu7aGFLXM2YpO6T7e9k0YvPMaw5WFJG5KOu0Zy9BvQZ/AuaewSH7\\n\n +\n\n      \nHcLQfM++IG2VVsrWKuL/a+q3leIpLHtXLdL0d04Sg4ZFk5MhRosOQ0L2cv9U8XeE\\n\n +\n\n      \n286JAKO+uLYw0a5c67GZMwUUh/dmU2144rlVtGWhwNGlTK+GeMsYoeusAMeOxjTp\\n\n +\n\n      \n85UdMDcWsT3aOq4t8OAAGesiCaXxHrFf/gQSvR26wvyo85v/eL5PjNuDhOU+U7+Q\\n\n +\n\n      \nRGfkiWzM4iM4qyOKP47Y2qtNQ4ZU3eJsA/jOcDY0MhZRx6vIJSsvI/BDSzMZvVWp\\n\n +\n\n      \nBXp7o9Yyjy17w00ZAgMBAAGjge8wgewwHQYDVR0OBBYEFGa2ncrgF5LrW0kN7OMj\\n\n +\n\n      \n1PVoDvmwMIG8BgNVHSMEgbQwgbGAFGa2ncrgF5LrW0kN7OMj1PVoDvmwoYGNpIGK\\n\n +\n\n      \nMIGHMQswCQYDVQQGEwJOQTETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH\\n\n +\n\n      \nU2VhdHRsZTENMAsGA1UEChMEUXVJQzEQMA4GA1UECxMHQWxsSm95bjENMAsGA1UE\\n\n +\n\n      \nAxMEVXNlcjEhMB8GCSqGSIb3DQEJARYSdXNlckBzb21lcGxhY2UuY29tggkA+KPm\\n\n +\n\n      \nxLwF+J4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQUFAAOCAQEAyZk/35YsKQba\\n\n +\n\n      \niBMkOBP4LeVutQIep9kOHVdIQZjOvsBgIDaRiNClJUd+MfsFHqLIfAC/OulUEz1D\\n\n +\n\n      \nmzaKcO15hcmTOar/nGglEZyIZtL93le3keQBeZHMPO0Dhrmhyhqj+W3lBmOQ4HPJ\\n\n +\n\n      \nCD9dTeY81suQimQwid/Tvl8cACxpQkr+GM3JiHknA7+pUpo+rMJRWn206cY00tzB\\n\n +\n\n      \nUIGMr0DQryQcHFmu2m3uxoS5B7MjlE9VwmOEKDjoxsmMQ9m/ajvj/7rT8g5/z1+m\\n\n +\n\n      \nN9Wk8yx0gDBJJqqmVCh+WYgniiMhfKMC+nCS9fjj9RJVumRndD/B38kpj0TyfyBt\\n\n +\n\n      \ne4BgMacL0w==\\n\n +\n      \n-----END CERTIFICATE-----\n;\n   public boolean requested(String mechanism, String peerName, int count,\n      String userName, AuthRequest[] requests) {\n         System.out.println(String.format(\nAuthListener.requested(%s, %s, %d,\n%s, %s);\n,\n            mechanism,\n            peerName,\n            count,\n            userName,\n            AuthRequestsToString(requests)));\n\n         /* Collect the requests we're interested in to simplify\nprocessing below. */\n      PasswordRequest passwordRequest = null;\n      PrivateKeyRequest privateKeyRequest = null;\n      CertificateRequest certificateRequest = null;\n      VerifyRequest verifyRequest = null;\n\n      for (AuthRequest request : requests) {\n         if (request instanceof PasswordRequest) {\n            passwordRequest = (PasswordRequest) request;\n         } else if (request instanceof PrivateKeyRequest) {\n            privateKeyRequest = (PrivateKeyRequest) request;\n         } else if (request instanceof CertificateRequest) {\n            certificateRequest = (CertificateRequest) request;\n         } else if (request instanceof VerifyRequest) {\n            verifyRequest = (VerifyRequest) request;\n         }\n      }\n\n      if (verifyRequest != null) {\n         /* Verify a certificate chain supplied by the peer. */\n         return true;\n      } else if (certificateRequest != null \n\n         privateKeyRequest != null \n\n         certificateRequest != null ) {\n         /*\n          * The engine is asking us for our certificate chain.\n          *\n          * We are providing the full certificate chain - the password,\n          * private key, and certificate.\n          */ passwordRequest.setPassword(mPassword.toCharArray());\n          privateKeyRequest.setPrivateKey(mPrivateKey);\n          certificateRequest.setCertificateChain(mCert);\n\n         return true;\n\n      }\n      return false;\n   }\n\n   public void completed(String mechanism, String peerName, boolean\nauthenticated) {\n      if (!authenticated) {\n         System.out.println(\nAuthentication failed.\n);\n      } else {\n         System.out.println(\nAuthentication successful.\n);\n      }\n   }\n}\n\n\n\n\nWhen the initial request for the password, private key, and\ncertificate come in this time, we are providing the information.\n\n\nThe code above simply returns true when the \nverifyRequest\n\nis received. The full process of verifying the certificate\nis beyond the scope of this document.\n\nCode 39. Obtaining the X.509 certificate for verification\n\nshows how to gain access to the certificate so that it can be verified.\n\n\nCode 39. Obtaining the X.509 certificate for verification\n\n\nprivate CertificateFactory factory;\nfactory = CertificateFactory.getInstance(\nX.509\n);\n\nprivate CertPathValidator validator;\nvalidator = CertPathValidator.getInstance(\nPKIX\n);\n\nif (request instanceof VerifyRequest) {\n   try {\n      String chain = ((VerifyRequest) request).getCertificateChain();\n\n      BufferedInputStream in =\n         new BufferedInputStream(new ByteArrayInputStream(chain.getBytes()));\n\n      List\nX509Certificate\n list = new ArrayList\nX509Certificate\n();\n      while (in.available() \n 0) {\n         list.add((X509Certificate) factory.generateCertificate(in));\n      }\n\n      CertPath path = factory.generateCertPath(list);\n\n      PKIXParameters params = new PKIXParameters(trustAnchors);\n      params.setRevocationEnabled(false);\n\n      validator.validate(path, params);\n   } catch (Exception ex) {\n      return false;\n   }\n\n   return true;\n}\n\n\n\n\nThis code obtains the certificate as part of the VerifyRequest.\nThe chain is converted to an \nX509Certificate\n that can be used\nto get the certificate path. The certificate path can be validated\nagainst a list of \ntrustedAnchors\n (not shown in this code).\nAll of our samples used self-signed certificates so there\nis no certificate path of authority. You would have to add\nyourself to the list of trusted anchors if this method of\nverification is used.\n\n\nThere are many things that could be checked in the \nVerifyRequest\n\nother than checking the certificate path of authority. For example,\nyou could reject any certificate that was not valid for more than 10 days.\n\n\nPIN key exchange\n\n\nPIN key exchange only uses a password for identity verification.\nAuthentication using PIN key exchange is very similar to\nSRP key exchange:\n\n\n\n\nThere is a one-time password exchange.\n\n\nOnce the authentication is completed the client and server\ncan communicate without asking for passwords to be entered.\n\n\nEven after the program is closed and restarted the\nauthentication is still valid.\n\n\n\n\nThe following figure shows the sequence in which the callback\nmethods are instantiated for a PIN key exchange. This message\nsequence chart is identical to the MSC SRP key exchange diagram.\n\n\n\n\nFigure: MSC PIN key exchange\n\n\nCode 40. Registering the authentication listener\n shows\nregistering an AuthListener with the name SrpKeyXListener.\nThe code for the SrpKeyXListener is shown in\n\nCode 31. SRP key exchange AuthListener - service\n for the service and\n\nCode 32. SRP key exchange AuthListener - client\n for the client.\nYes, we are re-using the SrpKeyXListener for PIN key exchange.\n\n\nCode 40. Registering the authentication listener\n\n\nBusAttachment mBus;\nmBus = new BusAttachment(\nmyProgramName\n,\nBusAttachment.RemoteMessage.Receive);\nSrpKeyXListener myAuthListener;\nStatus status = mBus.registerAuthListener(\nALLJOYN_PIN_KEYX\n,\n   myAuthListener);\nif (status !=\n   Status.OK) {\n   finish();\n   return;\n}\n\n\n\n\nWhen registering the AuthListener, here we are reusing the\nsame authentication listener that was created for the\nSRP key exchange sample above. The only change needed to\nuse PIN key exchange is that, when registering the AuthListener,\nthe type of security the AuthListener is responsible for handling\nwas changed from ALLJOYN_SRP_KEYX to ALLJOYN_PIN_KEYX.\n\n\nECDHE_NULL key exchange\n\n\nThe ECDHE_NULL keyexchange is purely anonymous. It does not\nrequire any input from the application.\n\n\nThe following figure shows the sequence in which the callback\nmethods are instantiated for an ECDHE_NULL key exchange.\n\n\n\n\nFigure: MSC ECDHE_NULL key exchange\n\n\nCode 41. ECDHE_NULL Key Exchange AuthListener - service and client\n\nshows registering an AuthListener with the name ECDHE_NULLKeyXListener.\n\n\nCode 41. ECDHE_NULL Key Exchange AuthListener - service and client\n\n\nclass ECDHE_NULLKeyXListener implements AuthListener {\n\n   public ECDHE_NULLKeyXListener() {\n   }\n\n   public String getMechanisms() {\n      return \nALLJOYN_ECDHE_NULL\n;\n   }\n\n   public boolean requested(String authMechanism, String authPeer, int count,\n\n      String userName, AuthRequest[] requests) {\n         try {\n            if (!authMechanism.equals(\nALLJOYN_ECDHE_NULL\n)) {\n               return false;\n            }\n\n            return true;\n\n         } catch (Exception ex) {\n            ex.printStackTrace();\n            return false;\n         }\n      }\n\n      public void completed(String authMechanism, String authPeer,\nboolean authenticated) {\n         if (!authenticated) {\n            System.out.println(\nAuthentication failed.\n);\n         } else {\n            System.out.println(\nAuthentication successful.\n);\n         }\n   }\n}\n\n\n\n\nCode 42. Registering the authentication listener with ECDHE_NULLKeyXListener\n\nshows registering an AuthListener with the name ECDHE_NULLKeyXListener.\n\n\nCode 42. Registering the authentication listener with ECDHE_NULLKeyXListener\n\n\nBusAttachment mBus;\nmBus = new BusAttachment(\nmyProgramName\n, BusAttachment.RemoteMessage.Receive);\n   ECDHE_NULLKeyXListener myAuthListener; Status status =\nmBus.registerAuthListener(\nALLJOYN_ECDHE_NULL\n, myAuthListener);\nif (status !=\nStatus.OK) { finish(); return;\n}\n\n\n\n\nECDHE_PSK key exchange\n\n\nECDHE_PSK key exchange uses a pre-shared secret for identity\nverification. Authentication using PSK key exchange is very\nsimilar to SRP key exchange:\n\n\n\n\nThere is a one-time pre-shared secret exchange.\n\n\nOnce the authentication is completed, the client and server\ncan communicate without asking for pre-shared secret to be entered.\n\n\nEven after the program is closed and restarted the\nauthentication is still valid.\n\n\n\n\nThe following figure shows the sequence in which the callback\nmethods are instantiated for an ECDHE_PSK key exchange.\n\n\n\n\nFigure: MSC ECDHE_PSK key exchange\n\n\nCode 43. ECDHE_PSK Key Exchange AuthListener - service and client\n\n\nclass ECDHEPSKKeyXListener implements AuthListener {\n\n   public ECDHEPSKKeyXListener() {\n   }\n   public String getMechanisms() {\n      return \nALLJOYN_ECDHE_PSK\n;\n   }\n\n   public boolean requested(String authMechanism, String authPeer, int count,\n\n      String userName, AuthRequest[] requests) {\n         try {\n            if (!authMechanism.equals(\nALLJOYN_ECDHE_PSK\n)) {\n               return false;\n            }\n\n            for (AuthRequest rqst: requests) {\n               if (rqst instanceof PasswordRequest) {\n                  /*\n                   * The ECDHE_PSK key exchange requests for the pre shared secret.\n                   * Based on the pre shared secret id given the username input variable,\n                   * the application can retrieve the pre shared secret\n                   * from storage or from the end user.\n                   * In this example, the pre shared secret is a hard coded string\n                   */\n                   PasswordRequest pskRqst = (PasswordRequest) rqst;\n                   String psk = \n123456\n;\n                   pskRqst.setPassword(psk.toCharArray());\n               }\n            }\n\n            return true;\n\n         } catch (Exception ex) {\n            ex.printStackTrace();\n         }\n         return false;\n      }\n      public void completed(String authMechanism, String authPeer,\nboolean authenticated) {\n      if (!authenticated) {\n         System.out.println(\nAuthentication failed.\n);\n      } else {\n         System.out.println(\nAuthentication successful.\n);\n      }\n\n   }\n\n}\n\n\n\n\nCode 44. Registering the authentication listener with ECDHE_PSKKeyXListener\n\nshows registering an AuthListener with the name ECDHE_PSKKeyXListener.\n\n\nCode 44. Registering the authentication listener with ECDHE_PSKKeyXListener\n\n\nBusAttachment mBus;\nmBus = new BusAttachment(\nmyProgramName\n,\nBusAttachment.RemoteMessage.Receive);\n\n   ECDHE_PSKKeyXListener myAuthListener;\n   Status status = mBus.registerAuthListener(\nALLJOYN_ECDHE_PSK\n, myAuthListener);\n   if (status !=\nStatus.OK) { finish(); return;\n}\n\n\n\n\nECDHE_ECDSA key exchange\n\n\nECDHE_ECDSA key exchange uses Elliptic Curve Cryptography\n(ECC)-based certificate for identity verification. The ECC\ncurve currently supported is the NIST P-256 curve.\n\n\n\n\nIf the application provides a private key and certificate\nchain in the PrivateKeyRequest and CertificateRequest, then\nthe AllJoyn framework will send the certificate chain to the\nother peer for validation via the VerifyRequest.\n\n\nOnce the authentication is completed, the client and server\ncan communicate without asking for the keys.\n\n\nEven after the program is closed and restarted, the\nauthentication is still valid.\n\n\n\n\nThe following figure shows the sequence in which the callback\nmethods are instantiated for an ECDHE_ECDSA key exchange.\n\n\n\n\nFigure: MSC ECDHE_ECDSA key exchange\n\n\nThe following table lists the fields included in a type of\ncertificate used by the ECDHE_ECDSA key exchange. All fields\nin the certificate are network-byte-order byte arrays.\n\n\nECDHE_ECDSA key exchange certificate fields\n\n\n\n\n\n\n\n\nField name\n\n\nData type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nversion\n\n\nUINT8[4]\n\n\nversion is 1.\nECC curve is NIST P-256\nExternal Data digest algorithm is SHA-256.\nDSA algorithm is ECC NIST P-256 DSA.\n\n\n\n\n\n\nissuer\n\n\nUINT8[76]\n\n\nThe issuer field.\n\n\n\n\n\n\nsubject\n\n\nUINT8[76]\n\n\nThe subject field.\n\n\n\n\n\n\nvalidityFrom\n\n\nUINT8[8]\n\n\nThe validity period. Subfield Valid From. It's represented in seconds since EPOCH Jan 1, 1970.\n\n\n\n\n\n\nvalidityTo\n\n\nUINT8[8]\n\n\nThe validity period. Subfield Valid To. It's represented in seconds since EPOCH Jan 1, 1970.\n\n\n\n\n\n\ndelegate\n\n\nUINT8\n\n\nThe delegate flag.\n\n\n\n\n\n\ndigest\n\n\nUINT8[32]\n\n\nThe digest of the external data. If the hash field is all 0s, then there is no external data. The hash algorithm and digest size is defined by the version number.\n\n\n\n\n\n\nsig\n\n\nUINT8[72]\n\n\nThe signature. The DSA signature is computed over the fields from subject field to digest field by the issuer. The DSA algorithm is ECC NIST P-256 DSA.\n\n\n\n\n\n\n\n\nThe code for the ECDHE_ECDSAKeyXListener is shown in\n\nCode 45. ECDHE_ECDSA Key Exchange AuthListener - service and client\n.\n\n\nCode 45. ECDHE_ECDSA Key Exchange AuthListener - service and client\n\n\nclass ECDHE_ECDSAKeyXListener implements AuthListener {\n\n   public ECDHE_ECDSAKeyXListener() {\n   }\n\n   public String getMechanisms() {\n      return \nALLJOYN_ECDHE_ECDSA\n;\n   }\n\n   /*\n    * The ECDHE key exchange can request for private key, public key, and to verify the peer\n    */\n   public boolean requested(String authMechanism, String authPeer, int count,\n\n      String userName, AuthRequest[] requests) {\n         try {\n            if (!authMechanism.equals(\nALLJOYN_ECDHE_ECDSA\n)) {\n               return false;\n            }\n\n            for (AuthRequest rqst: requests) {\n               if (rqst instanceof PrivateKeyRequest) {\n                  /*\n                   * The application may provide the DSA private key and\n                   * public key in the certificate.\n                   * AllJoyn stores the keys in the key store for future use.\n                   * If the application does not provide the private key, AllJoyn will\n                   * generate the DSA key pair.\n                   */\n                  if (sendBackKeys) {\n                     PrivateKeyRequest pkRqst = (PrivateKeyRequest) rqst;\n                     String privateKeyPEM = CLIENT_PK_PEM;\n                     pkRqst.setPrivateKey(privateKeyPEM);\n                  }\n               }\n               else if (rqst instanceof CertificateRequest) {\n                  /*\n                   * The application may provide the DSA private key and\n                   * public key in the certificate.\n                   * AllJoyn stores the keys in the key store for future use.\n                   * If the application does not provide the private key, AllJoyn will\n                   * generate the DSA key pair.\n                   */\n                  if (sendBackKeys) {\n                     String certChainPEM = CLIENT_CERT_PEM;\n                     CertificateRequest certChainRqst = (CertificateRequest) rqst;\n                     certChainRqst.setCertificateChain(certChainPEM);\n                  }\n               }\n               else if (rqst instanceof VerifyRequest) {\n                  /*\n                   * with the certificate chain from the peer for the\n                   * application to verify.\n                   * The application has to option to verify the certificate chain\n                   * If the cert chain is validated and trusted then return true;\n                   * otherwise, return false.\n                   */\n               VerifyRequest verifyRqst = (VerifyRequest) rqst;\n               String certPEM = verifyRqst.getCertificateChain();\n            }\n         }\n         return true;\n\n      } catch (Exception ex) {\n          ex.printStackTrace();\n      }\n   }\n\n   public void completed(String authMechanism, String authPeer,\nboolean authenticated) {\n      if (!authenticated) {\n         System.out.println(\nAuthentication failed.\n);\n      } else {\n         System.out.println(\nAuthentication successful.\n);\n      }\n   }\n\n   private boolean sendBackKeys = true; /* toggle the send back keys */\n   /* the followings are same data to try out the ECDHE_ECDSA key exchange */\n\n   private static final String CLIENT_PK_PEM = \n-----BEGIN\n      PRIVATE KEY-----\n +\n      \nCkzgQdvZSOQMmqOnddsw0BRneCNZhioNMyUoJwec9rMAAAAA\n +\n      \n-----END PRIVATE KEY-----\n;\n   private static final String CLIENT_CERT_PEM = \n-----BEGIN CERTIFICATE-----\n +\n      \nAAAAAZ1LKGlnpVVtV4Sa1TULsxGJR9C53Uq5AH3fxqxJjNdYAAAAAAobbdvBKaw9\\n\n +\n      \neHox7o9fNbN5usuZw8XkSPSmipikYCPJAAAAAAAAAABiToQ8L3KZLwSCetlNJwfd\\n\n +\n      \nbbxbo2x/uooeYwmvXbH2uwAAAABFQGcdlcsvhdRxgI4SVziI4hbg2d2xAMI47qVB\\n\n +\n      \nZZsqJAAAAAAAAAAAAAAAAAABYGEAAAAAAAFhjQABMa7uTLSqjDggO0t6TAgsxKNt\\n\n +\n      \n+Zhu/jc3s242BE0drNFJAiGa/u6AX5qdR+7RFxVuqm251vKPgWjfwN2AesHrAAAA\\n\n +\n      \nANsNwJl8Z1v5jbqo077qdQIT6aM1jc+pKXdgNMk6loqFAAAAAA==\\n\n +\n      \n-----END CERTIFICATE-----\n;\n}\n\n\n\n\nCode 46. Registering the authentication listener with ECDHE_ECDSAKeyXListener\n\nshows registering an AuthListener with the name ECDHE_ECDSAKeyXListener.\n\n\nCode 46. Registering the authentication listener with ECDHE_ECDSAKeyXListener\n\n\nBusAttachment mBus;\nmBus = new BusAttachment(\nmyProgramName\n, BusAttachment.RemoteMessage.Receive);\n\n   ECDHE_PSKKeyXListener myAuthListener;\n   Status status = mBus.registerAuthListener(\nALLJOYN_ECDHE_ECDSA\n,\nmyAuthListener); if (status !=\nStatus.OK) { finish(); return;\n}\n\n\n\n\nThe default keystore listener\n\n\nSo far, we have not discussed where the keys exchanged during\nthe authentication process are stored. If we register the\nAuthListener using the two-parameter method, we are using\nthe default keystore listener with its default options.\nThis uses a default location for storing the keystore.\nThe name of the keystore is the same as the application\nname that was used when creating the new BusAttachment.\nThe default location for the keystore differs depending\non the operating system that is being used. The default\nlocation chosen is a location that the user has permission\nto read and write from.\n\n\nFor Windows XP, the file is in:\n\n\nC:\\Documents and Settings\\\nuser_name\n\\.alljoyn_keystore\\\nApplication name\n\n\n\n\n\nFor Windows 7, the file is in:\n\n\nC:\\Users\\\nuser_name\n\\.alljoyn_keystore\\\nApplication name\n\n\n\n\n\nFor Linux, the file is in:\n\n\n/home/\nuser_name\n/.alljoyn_keystore/\nApplication name\n\n\n\n\n\nThe default location and name of the keystore file can be\nchanged by providing a third parameter. The third parameter\ncan be used to specify the location where the keystore is\nwritten. Note that the location provided as the third parameter\nwhen registering the AuthListener is appended to the location\nof the home folder for the OS being used. The code must\nhave read/write permissions to access that location.\n\n\nCode 47. Overriding the default file location when registering an AuthListener\n\n\nBusAttachment bus;\nbus = new BusAttachment(\nMyApp\n, BusAttachment.RemoteMessage.Receive);\nString strFilePath = File.separator + \nfoo\n + File.separator + \nfileName.ks\n;\nStatus status = mBus.registerAuthListener(\nALLJOYN_SRP_KEYX\n,\n   mAuthListener,\n   strFilePath);\n\n\n\n\nThis places the file in the users home directory in a folder\nnamed foo. The file is called fileName.ks.\n\n\n\n\nC:\\Documents and Settings\\\nuser_name\n\\foo\\fileName.ks\n (Windows XP)\n\n\nC:\\Users\\\nuser_name\n\\foo\\fileName.ks\n (Windows 7)\n\n\n/home/\nuser_name\n/foo/fileName.ks\n (Linux)\n\n\n\n\nNOTE:\n The three-parameter option should be used when registering\nan authListener in Android (see \nSecurity\n).\n\n\nMultiple applications can share a single keystore; however, the\ncode needs to know that the keystore is being shared between\nmultiple applications or it overrides changes made by other\napplications. To use a shared keystore you must specify that\nthe keystore is shared when registering the authListener.\n\n\nCode 48. Registering AuthListeners with a shared keystore\n\n\nBusAttachment bus;\nbus = new BusAttachment(\nMyApp\n, BusAttachment.RemoteMessage.Receive);\nString strFilePath = File.separator + \n.alljoyn_keystore\n + File.separator +\n\n   \nshared.ks\n;\nStatus status = mBus.registerAuthListener(\nALLJOYN_SRP_KEYX\n,\n   mAuthListener,\n   strFilePath,\n   true);\n\n\n\n\nEvery application that wants to share the same keystore should\npoint to the same keystore file and set the isShared option to\ntrue when registering an \nAuthListener\n.\n\n\nWhy would you want multiple applications to share a keystore file?\nThis allows you to set up a family of applications that authenticate\nas one. Once one of the applications has completed authentication,\nthen all of the applications can use the same set of keys.\nThis means that only one authentication request is needed,\neven though multiple applications use a secure interface.\nUnder the AllJoyn framework's default mode, authentication\nis done on an app-per-app basis, not as a family of applications.\n\n\nAllJoyn debug log output\n\n\nThe AllJoyn framework has a built-in logging system for\ninvestigating AllJoyn-related issues. Only critical log output\nis displayed when using the AllJoyn Release mode.\n\n\nTo enable AllJoyn debugging three things must be done:\n\n\n\n\nSet the OS Logging option (OS-specific).\n\n\nSet the Debug Level for the module(s) of interest (on\nthe router or the application).\n\n\nSet ER_DEBUG_* environment variable (only needed when\nlogging to \nstderr\n).\n\n\n\n\nThese can be accessed using the following method calls:\n\n\nBusAttachment.useOSLogging (Boolean useOSLog );\nBusAttachment.setDebugLevel(String module, int level);\nBusAttachment.setLogLevels(String logEnv);\nBusAttachnent.setDaemonDebug(String module, int level);\n\n\n\n\nSet OS-specific logging option\n\n\nThe \nBusAttachment.useOSLogging\n command results in different\nbehavior depending on what OS the AllJoyn code is running on,\nas shown in the following table.\n\n\nOS-specific logging behavior\n\n\n\n\n\n\n\n\nOS\n\n\nTrue\n\n\nFalse\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\nDebugger Trace Log\n\n\nstderr\n\n\n\n\n\n\nWindows RT\n\n\nWin RT Trace Log\n\n\nWin RT File Log\n\n\n\n\n\n\nLinux\n\n\nstderr\n\n\nstderr\n\n\n\n\n\n\nAndroid\n\n\nLogCat\n\n\nstderr\n\n\n\n\n\n\nMac\n\n\nstderr\n\n\nstderr\n\n\n\n\n\n\n\n\nFor \nBusAttachment.useOSLogging(true)\n on Windows and Windows RT, see:\n\n\n\n\n\n\nOutputDebugString function\n (Windows)\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/aa363362(v=vs.85).aspx\n\n\n\n\n\n\nFor \nBusAttachment.useOSLogging(false)\n on Windows RT, a file named alljoyn.log\nwill be created in the user's \nDocuments\n directory.\n\n\n\n\n\n\nSet debug level for modules\n\n\nThe AllJoyn framework has a large number of modules, with new\nmodules being added as it continues to be developed. Several module\nnames of interest are:\n\n\n\n\nALL - print all modules\n\n\nALLJOYN_JAVA - trace log for the JNI layer of the Java Bindings\n\n\nALLJOYN - trace of AllJoyn method calls\n\n\nALLJOYN_OBJ - trace of AllJoyn object to name service calls\n\n\nNS - the TCP name service\n\n\n\n\nEach module can print out four debug levels:\n\n High Level = 0b0001\n\n Debug Messages = 0b0010\n\n API Trace = 0b0100\n\n Data Dump = 0b1000\n\n\nAs a general rule, you want a debug level and all the debug\noptions below that option. For example:\n\n\n1 = \"High Level\"\n\n\n3 = \"High Level\" and \"Debug Messages\"\n\n\n7 = \"High Level\", \"Debug Messages\", and \"API trace\"\n\n\n15 = \"High Level\", \"Debug Messages\", \"API trace\", and \"Data Dump\"\n\n\nThe following code would print the High Level log for ALL\nof the AllJoyn modules and the API trace and below log\nfor the ALLJOYN module:\n\n\nBusAttachment.setDebugLevel(\nALL\n, 1);\nBusAttachment.setDebugLevel(\nALLJOYN\n, 7);\n\n\n\n\nThe same could be achieved using the following code:\n\n\nBusAttachment.setLogLevels(\nALL=1;ALLJOYN=7\n);\n\n\n\n\nIf your application is using a separate AllJoyn router\nor it is using the built-in name discovery/advertisement\nservices, the logs from this part of the AllJoyn framework\nwill not output logs unless you use the following call:\n\n\nBusAttachnent.setDaemonDebug(\nALL\n, 7);\n\n\n\n\nNOTE:\n There is an error debug level that is always printed\nand cannot be turned off.\n\n\nSet ER_DEBUG_* environment variable\n\n\nWhen logging to stderr, an environment variable must also\nbe specified to obtain the debug log. This is a consequence\nof the AllJoyn logging system being written in C++.\n\n\nNormally when using a C++ program the user would only need\nto specify the module they are interested in using environment\nvariables. For example:\n\n\nexport ER_DEBUG_ALLJOYN_OBJ=15\n\n\n\n\nWith Java you will generally use:\n* Linux\n  \nsh\n  export ER_DEBUG_ALL=15\n\n\n\n\nWindows\n\n\n\n\nbat\n  set ER_DEBUG_ALL=15\n\n\nLog output\n\n\nIf everything is set up as expected you should be log output as follows:\n\n\n````\n6710.723 DEBUG  THREAD  external    ...n\\os\\windows\\Thread.cc:352 |\n   Thread::Join() thread is dead [replyTimer]\n6710.724 HL_DBG THREAD  external    ...n\\os\\windows\\Thread.cc:185 |\n   Thread::~Thread() [replyTimer,738e6b0] started:3 running:3 stopped:0\n6710.725 DEBUG  ALLJOYN_JAVA external   ...a\\jni\\alljoyn_java.cc:3942 |\n   JBusAttachment::Connect(): Taking Bus Attachment authentication listener change lock\n6710.742 DEBUG  ALLJOYN_JAVA external   ...a\\jni\\alljoyn_java.cc:4145 |\n   JBusAttachment::EnablePeerSecurity()\n6710.743 TRACE  ALLJOYN external    ...e\\src\\BusAttachment.cc:359 |\n   BusAttachment::TryConnect to tcp:addr=127.0.0.1,port=9956\n6710.744 HL_DBG ALLJOYN external    ...ows\\ClientTransport.cc:136 |\n   ClientTransport::Connect(): tcp:addr=127.0.0.1,port=9956\nInitialized winsock\n6710.764 TRACE  NETWORK external    ...n\\os\\windows\\Socket.cc:164 |\n   Socket(addrFamily = 2, type = 1, sockfd = \n)\n6710.766 TRACE  NETWORK external    ...n\\os\\windows\\Socket.cc:188 |\n   Connect(sockfd = 612, remoteAddr = 127.0.0.1, remotePort = 9956)\n6711.827 HL_DBG ALLJOYN external    ...ows\\ClientTransport.cc:175 |\n   ClientTransport(): socket Connect() failed ER_CONN_REFUSED\n6711.828 TRACE  NETWORK external    ...n\\os\\windows\\Socket.cc:361 |\n   Close (sockfd = 612)\n6711.831 TRACE  ALLJOYN external    ...e\\src\\BusAttachment.cc:359 |\n   BusAttachment::TryConnect to null:\nUsing BundledRouter\n\n\n\nThere are five columns for each log message printed out:\n\n1. Time stamp representing when the log was printed.\n2. The debug level.\n3. The AllJoyn module the message came from.\n4. Which thread the module was running on.\n5. Which line of source code printed the message \n|\n the debug message.\n\n## Android-Specific Considerations\n\n### UI thread vs. AllJoyn bus thread\n\nWhen Android starts a new activity, a thread is created that\ndraws all of the user interface elements on the screen.\nBy default, all code that is added to the activity also runs\nin the same thread. Android always expects the user interface\n(UI) to be responsive. If a function is called that takes too\nlong to process information, the application is terminated by\nAndroid simply because the UI was unresponsive.\n\nAllJoyn applications typically conform to the client/server model;\nthe application is either providing a service or requesting something\nfrom a service. The service could be on a remote device or on\nthe same device. There are no time guarantees when calling an\nAllJoyn method. For this reason, all calls to an AllJoyn method\nor signal must be done in a thread that is independent of the\nmain UI thread.\n\nThis could be done by creating a new thread each time you call\na signal or method associated with the AllJoyn framework.\nThis can result in many threads being created including all\nthe memory usage associated with each thread. If too many\nthreads are created, the application could quickly run out\nof memory and crash. This could easily happen if signals\nwere being used to constantly update something like a game.\n\nTo avoid using a separate thread for each AllJoyn call,\nwe suggest you create a Handler on a separate thread that\nqueues AllJoyn method and signal calls.\n\n### Using Handler Looper\n\nCreate an implementation of a Handler that takes a Looper\nas its initialization parameter.\n\n#### Code 49. BusHandler class that extends the Handler class\n\n```java\nclass BusHandler extends Handler {\n   public BusHandler(Looper looper) {\n      super(looper);\n   }\n\n   @Override\n   public void handleMessage(Message msg) {\n      switch (msg.what) {\n      default:\n         break;\n      }\n   }\n}\n\n\n\n\nNow all of the AllJoyn method calls and signal calls can be\nplaced inside the switch statement found in the \nhandleMessage\n method.\n\n\nAlmost all programs that use the AllJoyn framework need to\nimplement a connect case and a disconnect case, as well as a\ncase for each AllJoyn method, property, and signal.\n\n\nTo start the BusHandler, use the following code:\n\n\nCode 50. Starting the BusHandler class\n\n\nBusHandler mBusHandler;\nHandlerThread busThread = new HandlerThread(\nBusHandler\n);\nbusThread.start();\nmBusHandler = new BusHandler(busThread.getLooper());\n\n\n\n\nThe \n/java/samples folder in the Android SDK\ncontains a large number of samples that all show how to\nuse the BusHandler.\n\n\nSecurity\n\n\nIn the AllJoyn Java API, there are two \nBusAttachment.registerAuthListener(...)\n methods.\nOne takes two arguments, and the other takes three arguments.\nWhen registering the authentication listener, the one with\nthree arguments should be used. The third argument sets the\nname of the keystore. It is recommended to always set this\nto \ngetFileStreamPath(\"alljoyn_keystore\").getAbsolutePath()\n\nfor all Android programs.\n\n\nPeer Permission Check\n\n\nIn Android's security model, each application must request\npermission to access certain system resources. For example,\n\nandroid.permission.READ_CONTACTS\n is required to access\nthe contact information on an Android device.\n\n\nIn catering to the security model of Android, the AllJoyn framework\nallows the service to impose permission requirements on\nAllJoyn method/signal calls. If the service specifies the\npermission requirements on a call, the client must acquire\nthose permissions by declaring them in the \nAndroidManifest.xml\n\nin order to invoke the call. If a client has not added the\nproper permissions to the \nAndroidManifest.xml\n, the AllJoyn\nmethod/signal call made by the client is rejected. If it is\nan AllJoyn method call, the router sends back an error message\n\n(status = ER_ALLJOYN_ACCESS_PERMISSION_ERROR)\n to the caller.\nMultiple permissions should be concatenated into a single\nstring using a semicolon (;) as the delimiter, for example:\n\n\nandroid.permission.X;android.permission.Y\n\n\n\n\nBy using the access permission in the interface, we are\npreventing a client application from accessing data without\nalso requesting the same device permission level as the service.\n\n\nIMPORTANT:\n\n   The peer permission check model only applies when\n   the service/client are on the same device. If the service\n   and client are on different devices, the peer permission\n   check will have no effect. The device-to-device trust model\n   should be based on Authentication.\n\n\nAndroid's security model does not apply to other OSs. If the\n   AllJoyn framework is used to synch contact and calendar data\n   with a desktop computer, the computer is not expected to obtain\n   permission to read and write the calendar and contacts.\n   The application installed on the Android device that is\n   communicating with the computer would still be required to\n   have Android permissions to access the information of interest.\n\n\nCode 51. Adding the @AccessPermission annotation for an AllJoyn Java interface\n\n\n@BusInterface (name = \norg.alljoyn.bus.addressbook\n)\npublic interface AddressBookInterface {\n   /*\n    * The AccessPermission annotation signifies that this function uses\n    * system resources that require system permission\n    * \nandroid.permission.READ_CONTACTS\n. Thus\n    * the application should declare the required permissions in its\n    * manifest file. If there are more than one permission item,\n    * they should be separated by ';'.\n    */\n   @BusMethod(signature = \nsi\n, replySignature = \nr\n)\n   @AccessPermission(\nandroid.permission.READ_CONTACTS\n)\n   public Contact getContact(String name, int userId) throws BusException;\n\n   /*\n    * the replySignature indicates that this BusMethod will return an\n    * array of structs.\n    */\n   @BusMethod(replySignature = \nar\n)\n   @AccessPermission(\nandroid.permission.READ_CONTACTS\n)\n   public NameId[] getAllContactNames() throws BusException;\n}\n\n\n\n\nBundled Router (Deprecated)\n\n\nIf you are using AllJoyn framework 2.6, the concept of bundled\nrouter is no longer present. A developer can still get all the\nfunctionality that was available with bundled daemon in\nAllJoyn 2.3.6 but there is no requirement to add the additional\nlibrary (bundle.jar) to the Android app or to use the extra\ncalls that were explicitly needed to use bundle router.\nHowever, the function call\n\n\norg.alljoyn.bus.alljoyn.DaemonInit.PrepareDaemon(getApplicationContext());\n\n\n\n\nis now used for an entirely different purpose as explained in\n\nUsing ICE with the AllJoyn Framework\n.\n\n\nUsing ICE with the AllJoyn Framework\n\n\nThe AllJoyn framework does what it is supposed to do; wonderfully.\nHowever, it cannot control certain things like the network setup\nover which it talks. A common example is wireless isolation.\nWhat is wireless isolation?\n\n\nImagine yourself sitting in a coffee shop and wanting to play a\ngame with your friend that uses the AllJoyn framework. In a normal\nhome setup you would be connected to your home access point and\nthis would work seamlessly. In a coffee shop or public place the\nnetwork administrators set up the access points such that two peers\ncannot talk to each other directly. Things like multicast and\nbroadcast are disabled in the coffee shop to avoid bandwidth\nproblems for other users - something that could happen if a\nyoung college student were to set up his own peer-to-peer network\nin the coffee shop with his friends or use an application\n(not using the AllJoyn framework) which floods the network\nwith multicast/broadcast packets.\n\n\nThe philosophy of the AllJoyn framework is to make it unnecessary\nfor the developer to be aware of such network complexities and\nstill achieve what the AllJoyn framework originally delivers - easy\nservice discovery and connectivity without having to change\nanything depending on the network or platform. To overcome\nthe problem of wireless isolation, we added in a parallel\ntransport in the AllJoyn framework that we call ICE.\nICE makes sure that you are able to discover services/devices\nand connect to them even if the access point you are connected\nto does not allow this to happen directly through it.\n\n\nICE is not only a way to solve the wireless isolation problem,\nit also provides another means to detect proximity with other\ndevices to aid in service discovery. To do this ICE needs to\nknow the list of access points around you. It does this by\ntalking to the Android framework from your AllJoyn app.\nFor this reason you need to specify the call:\n\n\norg.alljoyn.bus.alljoyn.DaemonInit.PrepareDaemon(getApplicationContext());\n\n\n\n\nAn ideal place to call this is just before you create a\nBusAttachment in your Android application. The application context\nis required so that the internal AllJoyn Java framework can\nget a list of access points around you by talking to the Android framework.\n\n\nPermissions to Add to your AllJoyn Android App\n\n\nUnder the hood, the AllJoyn framework does a lot of different\nthings on different platforms for device discovery without\nmaking the developer aware of the complexities involved.\nOn Android, it requires that the developer of the app grant\nthe app a set of four permissions so that the AllJoyn discovery works seamlessly.\n\n\nThe two permissions below are required because traditionally\nthe AllJoyn framework uses multicast for device discovery and\nthe Android framework requires any app that intends to use\nmulticast to have these permissions.\n\n\nuses-permission\nandroid:name=\nandroid.permission.INTERNET\n/uses-permission\n\n\n\nuses-permission\nandroid:name=\nandroid.permission.CHANGE_WIFI_MULTICAST_STATE\n/uses-permission\n\n\n\n\n\nThe two permissions below are required when you do not want\nto worry about wireless isolation that may be present on the\nnetwork to which you are connected. These two permissions let\nthe AllJoyn framework deal with it using ICE. These permissions\nenable the AllJoyn framework to look for wireless access points\naround you and use this data to detect if you are in proximity\nto any other device.\n\n\nuses-permission\nandroid:name=\nandroid.permission.ACCESS_WIFI_STATE\n/uses-permission\n\n\n\nuses-permission\nandroid:name=\nandroid.permission.CHANGE_WIFI_STATE\n/uses-permission\n\n\n\n\n\nProGuard\n\n\nProGuard is one of the tools packaged with the Android SDK.\nProGuard is used to shrink, optimize, and obfuscate code when\nproducing a release version of an .apk file. After using ProGuard,\nthe resulting .apk is smaller and more difficult to reverse engineer.\nFor more information, see http://developer.android.com/guide/developing/tools/proguard.html.\n\n\nKnowing the names of methods, interfaces, annotations, and\nclasses is important for the AllJoyn framework to operate\nproperly. If the code is passed through ProGuard the names\nwill be changed, annotations will be removed and AllJoyn code\nwill no longer function as expected. To use ProGuard, the\nproguard.cfg file must have additional options added.\n\n\nBelow is a sample proguard.cfg file that would be needed if\nwe wanted to use ProGuard with the Android Chat sample.\nThe \nproguard.cfg\n is based on the default file created\nwhen using an Android project. In the sample \nproguard.cfg\n\nfile below, the text in the #REQUIRED FOR ALLJOYN TO FUNCTION\nsection is an example of what must be added.\n\n\nCode 52. Sample proguard.cfg file\n\n\n-optimizationpasses 5\n-dontusemixedcaseclassnames\n-dontskipnonpubliclibraryclasses\n-dontpreverify\n-verbose\n-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*\n\n#REQUIRED FOR ALLJOYN TO FUNCTION WHEN USED WITH PROGUARD\n#(NOTE: could use -keep class org.alljoyn.bus** {*;} but the\n# alljoyn samples use org.alljoyn.bus.samples so if you checked the .apk\n# obfuscated code would not be seen)\n-dontwarn org.alljoyn.bus.**\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class org.alljoyn.bus.annotation.** { *; }\n-keep class org.alljoyn.bus.ifaces.** { *; }\n-keep class org.alljoyn.bus.AnnotationBusException** { *; }\n-keep class org.alljoyn.bus.AuthListener** { *; }\n-keep class org.alljoyn.bus.BusAttachment** { *; }\n-keep class org.alljoyn.bus.BusException** { *; }\n-keep class org.alljoyn.bus.BusListener** { *; }\n-keep class org.alljoyn.bus.BusObject** { *; }\n-keep class org.alljoyn.bus.BusObjectListener** { *; }\n-keep class org.alljoyn.bus.ErrorReplyBusException** { *; }\n-keep class org.alljoyn.bus.InterfaceDescription** { *; }\n-keep class org.alljoyn.bus.IntrospectionListener** { *; }\n-keep class org.alljoyn.bus.KeyStoreListener** { *; }\n-keep class org.alljoyn.bus.MarshalBusException** { *; }\n-keep class org.alljoyn.bus.MessageContext** { *; }\n-keep class org.alljoyn.bus.MsgArg** { *; }\n-keep class org.alljoyn.bus.Mutable** { *; }\n-keep class org.alljoyn.bus.OnJoinSessionListener** { *; }\n-keep class org.alljoyn.bus.ProxyBusObject** { *; }\n-keep class org.alljoyn.bus.SecurityViolationListener** { *; }\n-keep class org.alljoyn.bus.SessionListener** { *; }\n-keep class org.alljoyn.bus.SessionOpts** { *; }\n-keep class org.alljoyn.bus.SessionPortListener** { *; }\n-keep class org.alljoyn.bus.SignalEmitter** { *; }\n-keep class org.alljoyn.bus.Signature** { *; }\n-keep class org.alljoyn.bus.Status** { *; }\n-keep class org.alljoyn.bus.Variant** { *; }\n-keep class org.alljoyn.bus.VariantTypeReference** { *; }\n#Keep all BusObjects\n-keep class * implements org.alljoyn.bus.BusObject { *; }\n-keepclassmembers class * implements org.alljoyn.bus.BusObject {*;}\n#------------------------------------------------------------------------------\n#USER NEEDS TO MODIFY WITH VALUES FROM THEIR APPLICATION - CHAT USED AS AN EXAMPLE\n#Need to keep all AllJoyn interfaces and classmembers of the AllJoyn interfaces\n-keep interface org.alljoyn.bus.sample.chat.ChatInterface\n-keepclassmembers interface org.alljoyn.bus.sample.chat.ChatInterface { *; }\n#Need to keep the signal methods\n-keepclassmembers class org.alljoyn.bus.sample.chat.AllJoynService {\npublic void Chat(java.lang.String);\n}\n#------------------------------------------------------------------------------\n-keep public class * extends android.app.Activity\n-keep public class * extends android.app.Application\n-keep public class * extends android.app.Service\n-keep public class * extends android.content.BroadcastReceiver\n-keep public class * extends android.content.ContentProvider\n-keep public class * extends android.app.backup.BackupAgentHelper\n-keep public class * extends android.preference.Preference\n-keep public class com.android.vending.licensing.ILicensingService\n\n-keepclasseswithmembernames class * {\n   native \nmethods\n;\n}\n\n-keepclasseswithmembernames class * {\n   public \ninit\n(android.content.Context, android.util.AttributeSet);\n}\n\n-keepclasseswithmembernames class * {\n   public \ninit\n(android.content.Context, android.util.AttributeSet, int);\n}\n\n-keepclassmembers enum * {\n   public static **[] values();\n   public static ** valueOf(java.lang.String);\n}\n\n-keep class * implements android.os.Parcelable {\n   public static final android.os.Parcelable$Creator *;\n}\n\n\n\n\nPerformance\n\n\nHeader compression\n\n\nWhen a signal is repetitively emitted, the signal header\ncould end up being a significant portion of the data that\nis sent. This is especially true when the contents of the\nsignal are really small.\n\n\nHeader compression can be used to improve performance.\nSince setting up header compression is an expensive operation,\nit should not be used except for repetitive signals.\n\n\nAn example would be a game that wants to constantly update\nits player's positions. The same signal would be repetitively\nsent with the new player position. Header compression could\nbe used to reduce the size of the signal.\n\n\nCode 53. Header compression\n\n\n// Create the signal emitter and connect it with the SampleInterface class\nSignalEmitter emitter = new SignalEmitter(mySignalInterface,\n   SignalEmitter.GlobalBroadcast.On);\nemitter.setCompressHeader(true);\n\n\n\n\nShutting off discovery\n\n\nWhen trying to transmit large amounts of data via Bluetooth,\ndiscovery can significantly slow down the transfer speed.\nIf the transmit time is a factor, it may be beneficial to stop\ndiscovery when sending the data.\n\n\nIt is good practice to shut off discovery when an interface\nhas been found even when using TCP/IP. Leaving discovery\nrunning could have an impact on battery life and network\nperformance since the routing node continues to access the\nradio to look for remote services.\n\n\nCode 54. Shutting off Discovery\n\n\nstatus = mBus.cancelFindName(SERVICE_NAME);\nif (status != Status.OK) {\n   finish();\n   return;\n}\n\n\n\n\nSignal emitters\n\n\nWhen setting up a SignalEmitter, you can set it up to broadcast:\n\n\n\n\nGlobally to clients only on the local device\n\n\nGlobally to all clients even off device\n\n\nTo a session\n\n\nTo a single destination\n\n\n\n\nAs a general rule, it is best to avoid signal emitters that\ndo not exist in the same session. This creates a large amount\nof network traffic. If you want the signal to be received by\nmultiple devices, it is best to set up a multipoint session\nand send the signal to all the devices in the session.\nThis reduces the network traffic by sending the signal to\ndestinations that have registered",
            "title": "Java"
        },
        {
            "location": "/develop/api-guide/core/java/#core-api-guide-java",
            "text": "",
            "title": "Core API Guide - Java"
        },
        {
            "location": "/develop/api-guide/core/java/#prerequisites",
            "text": "Install dependencies for the  Windows platform ,\n  or for the  Linux platform .    A device running Android OS version 4.1.x (Jelly Bean) or greater and running a chip\n  based on the ARM 5 (or greater) instruction set.",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/api-guide/core/java/#importing-existing-java-samples-into-eclipse",
            "text": "There are several samples provided as part of the AllJoyn  framework.\nThe samples may be found in the AllJoyn SDK in the java/samples folder.  NOTE:  If you wish to start a new AllJoyn project instead,\nsee  Starting a New Project for Desktop Development .   Start Eclipse.  Select  File   Import .  Select  General   Existing Projects into Workspace .  Click  Next .  Click  Browse  near the Select root directory text box.  Navigate to the samples folder and find the simple service\nsample ( /java/samples/simple/service).  Click  OK .  Click  Finish .   The simple service sample should now be imported into your workspace.\nThe project may be giving you a few errors.  To remove the project errors:   Set Class Compatibility to  5.0 .  Select the project in the Package Explorer window.\nPress  Alt+Enter  to bring up Properties for the simple service.  Select the  Java Compiler  option.  Under the Java Compiler options, check the  Enable project specific settings  option.  Set the  Compiler compliance level  to  1.5 .  Click  OK .   Rebuild the auto-generated gen folder.   Click  Project   Clean .   Use the same process to import any sample of interest.  NOTE:  For an Android project, some versions on Eclipse require\nthe need to right-click on the project, then select Android Tools   Fix Project Properties . If you still\nencounter an error with the Android project, right-click\non the project, then select  Properties . Under this window,\nclick on  Java Build Path  in the left navigation, then\nselect the  Order and Export  tab. Ensure that the  Android Private Libraries \ncontains a check, then clean the project.",
            "title": "Importing Existing Java Samples into Eclipse"
        },
        {
            "location": "/develop/api-guide/core/java/#starting-a-new-android-project",
            "text": "In Eclipse, create a new Android project. (Open a browser\nand navigate to http://developer.android.com for instructions on how to do this.)   Go to your workspace and find the folder that contains\nthe new Android project.   The project folder should contain the following (it may contain more):   res folder  src folder   AndroidManifest.xml file    Create a new folder with the name  libs .   Copy the file  /java/jar/alljoyn.jar \n   to the new libs folder.  In the libs folder, create another folder with the name  armeabi .  Copy the  liballjoyn_java.so  file from the AllJoyn\n   distribution to the  armeabi  folder.\n   The file is in the AllJoyn distribution in the folder\n    /java/libs/liballjoyn_java.so.   You should now have a project directory structure that is\n   similar to this (only a partial view of a project).  + project name \n   |\\src\n   ||- source code files \n   |\\libs\n   ||\\armeabi\n   |||-liballjoyn_java.so\n   ||-alljoyn.jar\n   |\\res\n   ||- project resources \n   |-AndroidManifest.xml  NOTE:  It may be simpler to copy an already existing libs folder\nfrom one of the samples found in  /java/samples.   In Eclipse, right-click on your project and select the  Properties  option.  Select the  Java Build Path .  Click  Add JARs .  Select the  alljoyn.jar  file from the  /libs  folder.   IMPORTANT: Make sure the files are from the Android distribution\nof the AllJoyn framework and not the Linux distribution.\nThe files will have identical names, but the Linux distribution\nis not compiled for the Arm processor used on most Android phones;\nit is designed for the PC x86 architecture.",
            "title": "Starting a New Android Project"
        },
        {
            "location": "/develop/api-guide/core/java/#starting-a-new-project-for-desktop-development",
            "text": "Create a new Java Project.  In the step where you define the Java build settings, select the  Libraries  tab.  Click  Add External JARs...  Select  alljoyn.jar  from the  /java/jar directory.  Click the arrow next to the alljoyn.jar listed in your JARs,\nwhich brings up a list of Source attachment, Javadoc location,\nNative library location, and Access rules for alljoyn.jar.  Double-click  Native library location , which brings up a dialog.  Click the  External Folder...  button.  Select the directory that contains liballjoyn_java.so  /java/lib.  Double-click  Javadoc location .  Click  Browse... .  Select the directory that contains the java docs for\nalljoyn.jar  /java/docs.  Click  Finish .   NOTE:  To add the AllJoyn framework to an already existing project,\ngo to the project properties, select the 'Java Build Path' properties,\nand follow the steps listed above.",
            "title": "Starting a New Project for Desktop Development"
        },
        {
            "location": "/develop/api-guide/core/java/#writing-code",
            "text": "All code snippets found in this document were taken from samples\nthat can be found in the Windows SDK in the java/samples folder,\nor on  Gerrit .  If you are programming for Android, the code snippets are still\nuseful for understanding the AllJoyn framework. The Android SDK\nhas its own collection of samples. For more information see Android-Specific Considerations , or check out the samples found\nin the AllJoyn Android SDK.  Loading the native library  You must load the native system library into your code at runtime.\nTo do so, add the following lines to your code.  Code 1. Load native library  static {\n   System.loadLibrary( alljoyn_java );\n}  Creating an AllJoyn interface  The AllJoyn framework enables inter-process communication\nthrough an object. The object is defined as a bus interface.  Each interface can contain:   Methods  Signals  Properties   Code 2. Example of an interface  @BusInterface (name =  org.my.interface.name )\npublic interface MyInterface {\n\n   @BusMethod\n   public String MyMethod(String inStr) throws BusException;\n\n   @BusSignal\n   public void MySignal(String inStr) throws BusException;\n\n   @BusProperty\n   public String GetMyProperty() throws BusException;\n\n   @BusProperty\n   public void SetMyProperty(String myProperty) throws  BusException;\n\n}  Using @BusInterface annotation  The @BusInterface annotation tells the code that this\ninterface is an AllJoyn interface. All bus interfaces\nmust have a name. If you do not assign a name, a default\nname is assigned.  The default interface name is  . .  Generally, you should choose your interface name and not use\nthe default. Set the interface name by specifying the name\nannotation property.  Interface naming rules  from http://dbus.freedesktop.org/doc/dbus-specification.html.   Interfaces have names with type STRING, meaning that they\nmust be valid UTF-8 characters.  There are also some additional restrictions that apply\nto interface names, specifically:  Interface names are composed of one or more elements\n  separated by a period (\".\") character. All elements must\n  contain at least one character.  Each element must only contain the ASCII characters\n  [A-Z][a-z][0-9]_ and must not begin with a digit.  Interface names must contain at least one \".\" (period)\n  character (and thus at least two elements).  Interface names must not begin with a \".\" (period) character.  Interface names must not exceed the maximum name length of 255 characters.   Using @BusMethod annotation  The @BusMethod annotation tells the Java compiler that\nthis is a bus method. AllJoyn methods work almost identical\nto a regular method in Java. The major difference is that\nthe AllJoyn methods execute on a different process or device.\nThe method can accept multiple arguments and reply with\nmultiple arguments. AllJoyn methods can have multiple\nreturn values, but Java methods only allow a single return\nvalue. To receive multiple return values requires a container\nthat can hold the multiple return values. Multiple return values  explains how to do this.  The @BusMethod annotation has four properties: annotation, name,\nsignature, and replySignature.  Under normal circumstances, the values for the annotation\nproperties can be determined by the AllJoyn framework.\nHowever, there are instances in which the signature must\nbe specified; for example you need to send an unsigned integer\nin a method. Since Java does not have an unsigned integer type,\nthis must be specified in the @BusMethod annotation.  Code 3. Specifying signature and replySignature  @BusMethod(signature= u , replySignature= u )\npublic int MyMethod3(int unsignedArg) throws BusException;  The AllJoyn framework is very good at automatically assigning\na signature for the arguments specified in the method or signal.\nIf given the code shown in  Code 4. Auto assignment of signatures , note that the\nsignature and replySignature are not specified as part of\nthe @BusMethod annotation. The AllJoyn framework automatically\nassigns this method a signature \"sdib\" and a replySignature of\n\"i.\" The only time you must specify the signature is when it\ncannot be obtained from the interface itself.  Code 4. Auto assignment of signatures  @BusMethod\npublic int MyMethod4(String sArg,\n   double dArg,\n   int iArg,\n   boolean bArg) throws BusException;  The valid values for the signature and replySignature are any\nvalues that are valid according to http://dbus.freedesktop.org/doc/dbus-specification.html.  Using @BusSignal annotation  The @BusSignal annotation specifies that the following code\nis an AllJoyn signal. Unlike methods, signals have no replies.\nBecause of this, signals always have a return type of void.  Like methods, signals can take multiple arguments.  A signal is seen only if a program has registered a signal\nhandler for that signal. See  Using AllJoyn signals \nto register and use a signal handler.  Using @BusProperty annotation  The @BusProperty annotation specifies that the following code\nis an AllJoyn property. AllJoyn properties are exactly like\nAllJoyn methods except they are specialized for get/set\ncommands of a single value.  More complex AllJoyn interface concepts  Making a secure bus interface using the @Secure annotation  Indicating that an interface must use a secured authentication\nmechanism is as simple as adding the @Secure annotation to the interface.  Code 5. Creating a secure interface  @BusInterface(name =  org.sample.SecureInterface )\n@Secure\npublic interface SecureInterface {\n\n   @BusMethod\n   String myMethod(String inStr) throws BusException;\n}  The @Secure annotation informs the bus that no method call\nor signal can be sent without authentication.  The server must authenticate that the client is trusted\nusing one of the built-in authentication protocols.\nAfter authentication is completed, all messages and signals\nhave the body of the message encrypted. Only the authenticated\nclient can read the message. Only the body of the message is encrypted.\nThe header is left unencrypted and any bus can read the header\nand use it to forward the message to its destination.  The @Secure annotation has the property  value  [AllJoyn 3.4.0].\nThe 'value' property can have one of the following values:   required (default value) - Methods on the interface can\nonly be called by an authenticated peer.  off - Authentication is never required.  inherit - The object inherits the security of the objects\nthat implement the interface.  If an unknown value is specified the interface will default\nto inherit.   Normally,  value  will not need to be explicitly specified\nunless you want the value 'off' since using @Secure without\nspecifying a value is the same as specifying  @secure(value=\"required\") .\nInterfaces that omit the @Secure annotation is the same as\nspecifying  @Secure(value=\"inherit\") .  In general, unless you are sure your interface will never\nneed authentication, it is best to avoid using `@Secure(value=\"off\")\nin your interface specification.  For more information on the three built-in authentication\nmechanisms, see  AllJoyn authentication mechanisms .  Complex data types using the @Position annotation  Beyond simple data types, the AllJoyn framework can handle\ncomplex data types such as arrays, maps, and structs. In the case\nof arrays and maps, the data type can be handled by the AllJoyn code\nwith no special action. However, structs require additional annotation.  The AllJoyn framework must know the order of all elements of a\nstruct so that it can marshal and unmarshal (i.e., serialize)\nthe message. This is where the @Position annotation is used.  Say that you have a structure that holds information about\na photo; the code could look something like this:  Code 6. Example data structure using @Position annotation  public class ImageInfo{\n @Position(0)\n public String fileName;\n @Position(1)\n public int isoValue;\n @Position(2)\n public int dateTaken;\n}  The @Position annotation numbering must start from \"0\" (zero)\nand count up in increments of one. Skipping a number, like\ngoing from @Position(1) to @Position(3) without having an\n@Position(2) anywhere in the code, is a logic error.  The signature for all structures is \"r\" or the list of all\nthe values of the structure inside parentheses. For example,\nthe signature for the ImageInfo class would be \"(sii)\" in  Code 6. Example data structure using @Position annotation .  Multiple return values  If, for some reason, an interface with multiple return values\nis used, a container must be made to hold those values.\nIf you have a method called \"timer\" that returns a startTime\nand an endTime, an interface could be designed to handle\nthe two return values.  Code 7. Method that accepts multiple return values  @BusInterface (name =  org.my.timerInterface )\npublic interface MultipleReturnValuesInterface {\n\n   public class Values {\n      @Position(0) public int startTime;\n      @Position(1) public int endTime;\n   }\n\n   @BusMethod(replySignature= ii )\n\n   public Values timer() throws BusException;\n}  NOTE:  The replySignature has to be specified, or the AllJoyn framework\nassumes the replySignature is a struct with the replySignature \"(ii)\".  Parentheses indicate a struct, which is a single return value, while\nno parentheses indicate two separate return values.  Connecting to the AllJoyn router  When connecting with the bus, a program may act as a service,\na client, or both.  Connecting a service  Connecting a service consists of several steps.   Create a new BusAttachment.  Register a BusObject with a given absolute path using the BusAttachment.  Connect the BusAttachment to the bus.  Request a well-known name from the bus.   Code 8. Connecting a service to the bus (no error checking)  mBus = new BusAttachment( applicationName );\nmBus.registerBusObject(this,  /servicepath );\nmBus.connect();\nint flags = 0; //no request name flags\nmBus.requestName( com.my.well.known.name , flags);  This code does not have any error handling; thus, it is a\npoor programming example. It does show what the functions are doing.\nThe functions BusAttachment.registerBusObject(...),\nBusAttachment.connect(), and DBusProxyObj.RequestName(...) all\nreturn status that should be checked.  Code 9. Connecting a service (with error checking)  mBus = new BusAttachment( applicationName );\nStatus status = mBus.registerBusObject(this,  /servicepath );\nif (Status.OK != status) {\n   System.out.println( BusAttachment.registerBusObject() failed:   + status);\n\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.connect();\n\nif (Status.OK != status) {\n   System.out.println( BusAttachment.connect() failed:   + status);\n   System.exit(0);\n   return;\n}\nint flags = 0; //no request name flags\nstatus = mBus.requestName( com.my.well.known.name , flags);\nif (status != Status.OK) {\n   System.out.println( BusAttachment.requestName failed:   + status);\n   System.exit(0);\n   return;\n}  NOTE:  This code would have to be in a class that implements the\nBusObject. If it did not implement the BusObject, the following\nline would not work:  mBus.registerBusObject(this,  /servicepath );  The flags value is a bit-mask that is used to tell the bus\nhow to respond if the well-known name requested already exists\non the bus. It also tells the bus how to act if the well-known name\nis already owned and another application requests the same well-known name.  The flag options are:   BusAttachment.ALLJOYN_REQUEST_NAME_ALLOW_REPLACEMENT  BusAttachment.ALLJOYN_REQUEST_NAME_REPLACE_EXISTING  BusAttachment.ALLJOYN_REQUEST_NAME_DO_NOT_QUEUE   AllJoyn request name flags     AllJoyn flag name  Value      ALLJOYN_REQUEST_NAME_ALLOW_REPLACEMENT  0x1    ALLJOYN_REQUEST_NAME_REPLACE_EXISTING  0x2    ALLJOYN_REQUEST_NAME_DO_NOT_QUEUE  0x4     Using the value of 0x0 (zero) for the AllJoyn flag is a\nvalid option. It means do not use any requestName flags.\nWhen using no flags to request a well-known name from\nthe bus, if the name already exists on the bus, your\nname request is added to the queue of other applications\nthat have also requested that name.  The BusAttachment.requestName returns one of the following status values:  Results from a RequestName call     DBusProxyObj.RequestName result  Value      OK  1    DBUS_REQUEST_NAME_REPLY_IN_QUEUE  2    DBUS_REQUEST_NAME_REPLY_EXISTS  3    DBUS_REQUEST_NAME_REPLY_ALREADY_OWNER  4    BUS_UNEXPECTED_DISPOSITION     BUS_NOT_CONNECTED      The valid flag combinations and RequestName results are\nall specified and described at http://dbus.freedesktop.org/doc/dbus-specification.html.  Connecting a client  To connect a client:   Create a BusAttachment.  Connect the BusAttachment to the bus.  Make a proxy object with the service name, absolute service path,\nand the interface of interest.  Make a proxy connection with the specified AllJoyn interface.  (Optional) Register signal handlers if the interface of interest\nhas any signals or if you are interested in any of the signals\nthat are part of the D-Bus or AllJoyn specification.   Code 10. Connecting a client (with error checking)  mBus = new BusAttachment( applicationName );\n\nStatus status = mBus.connect();\nif (Status.OK != status) {\n   System.out.println( BusAttachment.connect() failed:  + status));\n   System.exit(0);\n   return;\n}\n\nmProxyObj = mBus.getProxyBusObject( org.my.well.known.name ,\n    /servicepath ,\n   BusAttachment.SESSION_ID_ANY\n   new Class[] { MyInterface.class });\n\nmMyInterface = mProxyObj.getInterface(MyInterface.class);\n\nstatus = mBus.registerSignalHandlers(this);\nif (status != Status.OK) {\n   System.out.println( BusAttachment.registerSignalHandlers() failed:  +\nstatus));\n   System.exit(0);\n   return;\n}  mMyInterface can now be used to call methods found on the service.  The given well-known name and path can have multiple interfaces.\nWhen using  getProxyBusObject() , list all of the interfaces\nyou are interested in using. There could have been multiple\ninterfaces available at the object path \"/servicepath.\"\nIf there was a second interface called MySecondInterface and\nyou also wanted to make a proxy connection to that interface,\nthen you need to list both interfaces when calling  getProxyBusObject() .  When calling the  getInterface()  method, you are selecting\none of the possible interfaces out of the interfaces obtained\nfrom the  getProxyBusObject()  method call.  Code 11. Multiple interfaces  mProxyObj = mBus.getProxyBusObject( org.my.well.known.name ,\n    /servicepath ,\n   BusAttachment.SESSION_ID_ANY,\n   new Class[] { MyInterface.class, MySecondInterface.class });\n\nmMyInterface = mProxyObj.getInterface(MyInterface.class);\nmMySecondInterface = mProxyObj.getInterface(MySecondInterface.class);  Discovery and sessions  Full user control  What makes the AllJoyn framework exciting is the ability to\ndiscover remote buses and interact with the interfaces on\nthose remote buses as if they are local.  The AllJoyn router runs in the background. If an application\nasks the router to look for a remote interface, the router\ntries to locate the requested service. When the router is started,\nit is told which transport protocols to use (i.e., Bluetooth, TCP/IP).\nIf any device can make a connection using any of the available\ntransport protocols, its services can then be discovered and\nused by all of the devices that have been discovered in a\ndynamically-formed, peer-to-peer network.  Once the well-known name has been discovered, your application\ncan join a started communication session using a user-selected session port.  NOTE:  Valid SessionPort values range from 1 to 0xFFFF.  How discovery works  For a service and client to discover each other, they must agree upon three things:   A well-known bus name that will be advertised  The object path  The session port number that will be used   The discovery sequence follows.   To advertise a service, start with the procedure described in  Connecting a service .  Create a new BusAttachment with RemoteMessage.Receive.  Register your BusObject; the local implementation of your\n     interface with the BusAttachment.  Register a BusListener; a bus listener may not be needed,\n     depending on your application.  Connect the BusAttachment with the AllJoyn router.   Bind the session port.  As part of binding the session port, you also need to\n create a SessionPort Listener that is used to respond\n to JoinSession requests from the client.    Request a well-known name from the bus.   Advertise the same well-known name.  To connect to the advertised service:  Create a new BusAttachment with RemoteMessage.Receive.  Register a BusListener; in this case it is required\n     for the foundAdvertisedName signal.  Find the Advertised well-known name.  When the foundAdvertisedName signal is received, join the session.   IMPORTANT: Although you can advertise different names than your\nservice's well-known name, it would result in the bus not being\nable to use your service. It is an error to advertise a different name\nthan your service's own well-known name.  Sample code  Code 12. Obtaining a well-known name/advertising the well-known name  BusAttachment mBus;\nmBus = new BusAttachment(getClass().getName(),\nBusAttachment.RemoteMessage.Receive);\n\nStatus status = mBus.registerBusObject(myBusObject,  /MyService );\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.connect();\n\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nprivate static final short CONTACT_PORT=42;\nMutable.ShortValue contactPort = new Mutable.ShortValue(CONTACT_PORT);\nSessionOpts sessionOpts = new SessionOpts();\nsessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\nsessionOpts.isMultipoint = false; sessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\nsessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\nstatus = mBus.bindSessionPort(contactPort, sessionOpts,\nnew SessionPortListener() {\n@Override\npublic boolean acceptSessionJoiner(short sessionPort,\nString joiner, SessionOpts sessionOpts) {\nif (sessionPort == CONTACT_PORT) {\nreturn true;\n} else {\nreturn false;\n}\n}\n});\n\nInt flags = 0; //do not use any request name flags\nstatus = mBus.requestName( com.my.well.known.name , flags);\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\n/*\n * Important: the well-known name advertised should be identical\n * to the well-known name requested from the bus. Using a\n * different name is a logic error.\n */\nstatus = mBus.advertiseName( com.my.well.known.name ,\n   SessionOpts.TRANSPORT_ANY);\nif (status != Status.OK) {\n   /*\n    * If we are unable to advertise the name, release\n    * the well-known name from the local bus.\n    */\n   mBus.releaseName( com.my.well.know.name );\n   System.exit(0);\n   return;\n}\n\nif (status != Status.OK) {\nSystem.exit(0);\nreturn;\n}  Code 13. Find well-known name and join session  BusAttachment mBus;\nmBus = new BusAttachment(getClass().getName(),\nBusAttachment.RemoteMessage.Receive);\nprivate static final short CONTACT_PORT=42;\n\nmBus.registerBusListener(new BusListener() {\n@Override\npublic void foundAdvertisedName(String name,\n  short transport,\n  String namePrefix) {\n  mBus.enableConcurrentCallbacks();\n  short contactPort = CONTACT_PORT;\n  SessionOpts sessionOpts = new SessionOpts();\n  Mutable.IntegerValue sessionId = new Mutable.IntegerValue();\n\n  Status status = mBus.joinSession((String) msg.obj,\ncontactPort,\nsessionId, sessionOpts,\nnew SessionListener());}\n});\n\nStatus status = mBus.connect();\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.findAdvertisedName( com.my.well.known.name );\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}  Using AllJoyn methods  So far, we have talked about making an interface and\nwe have talked about how to connect to the bus and discover\na remote bus using sessions. This section shows how to write\nan AllJoyn bus method that can be instantiated from a remote process.  Suppose you have the following interface:  Code 14. Sample interface with AllJoyn methods  @BusInterface (name =  org.sample.busMethods )\npublic interface SampleInterface {\n\n   @BusMethod\n   public String Ping(String str) throws BusException;\n\n   @BusMethod\n   public String Concatenate(String arg1, String arg2) throws BusException;\n\n   @BusMethod\n   public int Fibonacci(int arg1) throws BusException;\n}  Code 15. Implementing the SampleInterface in the Service  class SampleService implements SampleInterface, BusObject {\n   public String Ping(String str){\n      return str;\n   }\n\n   public String Concatenate(String arg1, String arg2){\n      return arg1+arg2;\n   }\n\n   public int Fibonacci(int arg1){\n      int a=0,b=1;\n\n   for (int i=0;i arg1;i++){\n      a=a+b;\n      b=a-b;\n   }\n   return a;\n\n   }\n}  Now that the SampleInterface has an implementation, you must\nuse a SampleService object when you are registering the bus object.  Code 16. Connecting the bus using the SampleService BusObject  SampleService mySampleService;\nBusAttachment mBus;\nmBus = new BusAttachment(getClass().getName(),\nBusAttachment.RemoteMessage.Receive);\n\n/*\n * This line of code makes the local interface available to the bus\n */\nStatus status = mBus.registerBusObject(mySampleService,  /MyService );\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.connect();\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nprivate static final short CONTACT_PORT=42;\nMutable.ShortValue contactPort = new Mutable.ShortValue(CONTACT_PORT);\nSessionOpts sessionOpts = new SessionOpts();\nsessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\nsessionOpts.isMultipoint = false;\nsessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\nsessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\nstatus = mBus.bindSessionPort(contactPort, sessionOpts,\nnew SessionPortListener() {\n@Override\npublic boolean acceptSessionJoiner(short sessionPort,\nString joiner,\nSessionOpts sessionOpts) {\nif (sessionPort == CONTACT_PORT) {\nreturn true;\n} else {\nreturn false;\n}\n\n}\n});\nif (status != Status.OK) { System.exit(0);\nreturn;\n\n}\nInt flags = 0; //do not use any request name flags\nstatus = mBus.requestName( com.my.well.known.name , flags);\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.advertiseName( com.my.well.known.name , SessionOpts.TRANSPORT_ANY);\nif (status != Status.OK) {\n   mBus.releaseName( com.my.well.know.name );\n   System.exit(0);\n   return;\n}  Code 17. Calling a remote method from the SampleInterface  private BusAttachment mBus;\nmBus = new BusAttachment(getClass().getName(),\nBusAttachment.RemoteMessage.Receive);\n\nStatus status = mBus.connect();\nif (Status.OK != status) {\n   System.exit(0);\n   return;\n}\n\nprivate ProxyBusObject mProxyObj;\nprivate SampleInterface mSampleInterface;\n\nprivate static final short CONTACT_PORT=42;\n\nmBus.registerBusListener(new BusListener() {\n@Override\npublic void foundAdvertisedName(String name,\n   short transport,\n   String namePrefix) {\n      mBus.enableConcurrentCallbacks();\n      short contactPort = CONTACT_PORT;\n      SessionOpts sessionOpts = new SessionOpts();\n      sessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\n         sessionOpts.isMultipoint = false;\n         sessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\n      sessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\n      Mutable.IntegerValue sessionId = new Mutable.IntegerValue();\n\n      Status status = mBus.joinSession(name,\ncontactPort,\nsessionId,\nsessionOpts,\nnew SessionListener());\n\n   mProxyObj = mBus.getProxyBusObject( com.my.well.known.name ,\n       /MyService ,\n         sessionId.value,\n            new Class[] { SampleInterface.class });\n   mSampleInterface = mProxyObj.getInterface(SampleInterface.class);\n});\n\nStatus status = mBus.connect();\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.findAdvertisedName( com.my.well.known.name );\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}  Now that you have a proxy connection to the remote service\nthrough mSampleInterface, you can just call it like you would\nif the code were implemented locally.  Code 18. Calling the remote methods  try {\n   // will return  Hello World \n   String strPing = mSampleInterface.Ping( Hello World );\n   // will return  The Eagle has landed! \n   String strCat = mSampleInterface.Concatenate( The Eagle  ,  has landed! );\n\n   // will return 3\n   int fib = mSampleInterface.Fibonacci(4);\n} catch (BusException e) {\n   //Handle exception here.\n}  Not all methods need to return a value and not all methods need input arguments.  NOTE:  Remote methods cannot be called until we have obtained\nan interface object from the ProxyBusObject class. Trying to\ncall a remote method before obtaining the interface could result\nin your application crashing. The mSampleInterface is a null object\nuntil we have connected it to the service using the ProxyBusObject.getInterface()  method.  Using AllJoyn signals  Signals, unlike methods, never return a value. Client applications\nthat are interested in receiving a signal must register for that\nsignal with the bus. The client must implement a signal handler to\nrespond to the signal for which it has registered.  Code 19. Example interface containing signals  @BusInterface (name =  org.sample.busSignals )\npublic interface SampleInterface {\n\n   @BusSignal\n   public void buttonClicked(int id) throws BusException;\n\n   @BusSignal\n   public void playerPosition(int x, int y, int z) throws BusException;\n}  Code 20. Create an empty class implementation  class SignalInterface implements SampleInterface, BusObject {\n   public void buttonClicked(int id) {/*No code needed here*/}\n   public void playerPosition(int x, int y, int z){/*No code needed here*/}\n}  A SignalEmitter is required to emit a signal. To create a SignalEmitter,\nyou must have a BusObject. The code above creates a BusObject that\nis aware of the bus signals found in the SampleInterface. Signals do not\nneed to have any code added to transmit a signal, you just inform the\nbus that a signal with a given interface exists.  Once a SignalEmitter is created, an interface can be made to\nsend the actual signals. No coding is needed to emit the signals\nbeyond defining and using the interface.  Code 21. Connect signals to the bus and emitting the signals - service  private static final short CONTACT_PORT=42;\nstatic int sessionId;\nstatic String joinerName;\n\nboolean sessionEstablished = false;\n\nBusAttachment mBus;\nmBus = new BusAttachment( AppName , BusAttachment.RemoteMessage.Receive);\nSignalInterface mySignalInterface = new SignalInterface();\n\nStatus status = mBus.registerBusObject(mySignalInterface,  /MyService/Path );\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.connect();\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}\n\nint flags = 0; //do not use any request name flags\nstatus = mBus.requestName( com.my.well.known.name , flags);\nif (status != Status.OK) { System.exit(0);\nreturn;\n}\n\nstatus = mBus.advertiseName( com.my.well.known.name ,\n   SessionOpts.TRANSPORT_ANY);\nif (status != Status.OK) {\n   System.out.println( Status =   + status);\n   mBus.releaseName( com.my.well.known.name );\n   System.exit(0);\n   return;\n}\n\nMutable.ShortValue contactPort = new Mutable.ShortValue(CONTACT_PORT);\nSessionOpts sessionOpts = new SessionOpts();\nsessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\nsessionOpts.isMultipoint = false;\nsessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\nsessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\nstatus = mBus.bindSessionPort(contactPort, sessionOpts,\n   new SessionPortListener() {\n   public boolean acceptSessionJoiner(short sessionPort, String joiner,\n      SessionOpts sessionOpts) {\n   if (sessionPort == CONTACT_PORT) {\n   return true;\n   } else {\n   return false;\n   }\n\n   }\n   public void sessionJoined(short sessionPort, int id, String joiner) {\n      sessionId = id; joinerName = joiner; sessionEstablished = true;\n   }\n});\n\ntry {\nwhile (!sessionEstablished) {\n   Thread.sleep(10);\n}\n\nSignalEmitter emitter = new SignalEmitter(mySignalInterface, joinerName,\n   sessionId,\nSignalEmitter.GlobalBroadcast.Off);\nmyInterface = emitter.getInterface(SampleInterface.class);\n// Emitting signals myInterface.buttonClicked(1);\nmyInterface.playerPosition(12, 1, -24);\n\n} catch (InterruptedException ex) {\n  System.out.println( Interrupted );\n} catch (BusException ex) {\nSystem.out.println( Bus Exception:   + ex.toString());\n}  Code 22. Registering signal handlers - client  status = mBus.registerSignalHandlers(this);\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}  When registering for signal handlers, you must implement a\nclass that contains a method with the @BusSignalHandler annotation.\nIn  Code 22. Registering signal handlers - client , the signal\nhandler would need to be in the same class. If needed, a\ndifferent class can be used to handle the signals; just\nput that class as an argument for the registerSignalHandlers method.  Code 23. Adding signal handlers - client  @BusSignalHandler(iface= org.sample.busSignals , signal= buttonClicked )\npublic void buttonClicked(int id) {\n   switch(id)\n   case 0:\n      startNewGame();\n      break;\n   case 1:\n\n      continueGame();\n      break;\n   case 2:\n      quitGame();\n      break;\n   default:\n      break;\n}\n\n@BusSignalHandler(iface= org.sample.busSignals , signal= playerPosition )\npublic void playerPosition(int x, int y, int z) {\nupdatePlayerPosition(x,y,z);\n}  The important part of the BusSignalHandler is to get the\niface name and the signal arguments correct. If these are not\ncorrect, it does not catch the emitted signal. The function name\nitself is not important; it could be changed from public void buttonClicked(int id)  to  public void foo(int id) \nand it would still catch the \"buttonClicked\" signal.  Sessionless signals  A signal is a way to send one-way acknowledgment data from\none peer to another or to multiple peers. However, when sending\na signal we typically need to be a part of a session.\nThere are many use cases where using a session to send a signal\nwould be unnecessary overhead. For example, when you want to\ninform a peer, who is not in session with you, of a changed state\nof information. This works two ways, with a peer specifying\nwhether he wants to receive such notifications and with the\npeer who is sending out this notification to anyone who subscribed for it.  It should be noted that there are performance limitations that need to be understood:   A sessionless signal is not a replacement for using a session,\nit is a shortcut to help avoid logic of setting up a session to\ntransmit small amounts of data.  Each sessionless signal will replace the previous one.\nIf the receiving side has not had a chance to pull the data,\nit will be lost and not transmitted to the other side.  Per number 2, the design of a sessionless signal is not\nto be used for File Transfer or frequent game play updates.\nThe design is for static information such as device details,\na player profile, or informing another application to invite\nto a session or trigger an action.  All sessionless signals have an overhead of creating and\ntearing down a connection which can cause unnecessary network\nchatter if used improperly for sending frequent data.   The way to send sessionless signals is not much different\nthan sending a regular signal. Just set the flag specifying\nthat it is a sessionless signal and set the session id used\nto send the signal to 0 since we are not a part of a session\nwhen we send this out.  A sessionless signal does not need a session id - thus the name.\nThe sample showing this simple feature is under  SDK/java/samples/sessionless .  Along the lines of the above-mentioned sample, let us assume\nthat a client peer is sending out sessionless signals. A service peer\nis the one that has subscribed for these signals/notifications.  Two things to know in the case of a sessionless signal is that:   It has a session id of 0.  It has the sessionless flag set to indicate that it is a\nsessionless signal.   This case can look like the following:  SignalEmitter emitter = new SignalEmitter(mySignalService, 0,\nSignal.GlobalBroadcast.Off);\nemitter.setSessionlessFlag(true);  The service side, which wants to receive these sessionless signals,\ncalls an  addMatch()  function and passes in the rule for\nsessionless signals. This looks like (where \"my.signal.Service\"\nbelow is the name of the interface emitting the sessionless signal):  Status status = mBus.addMatch( interface=;my.signal.Service',sessionless='t' );  That is all we need. The service side would have the signal handler\nfor the signal sent by the client. No advertisements, no binding,\nor joining of sessions is necessary by any side.  Using AllJoyn properties  AllJoyn properties may be viewed as a specialized case of AllJoyn methods.\nAn AllJoyn property must start with the word \"get\" or \"set\".\nIf it starts with the word \"get\", it must return a single value\nand take no arguments. If it starts with the word \"set\",\nit must take a single parameter and return void. The parameter\ncan be a complex data type like an array or a structure.\nThis code should closely resemble the code used for AllJoyn methods.  Code 24. Interface using properties  @BusInterface (name =  org.samples.properties )\npublic interface PropertiesInterface {\n   @BusProperty\n   public int getTextSize() throws BusException;\n   @BusProperty\n   public void setTextSize(int size) throws BusException;\n}  Code 25. Implementation of the PropertiesInterface - service  class AllJoynProperties implements PropertiesInterface, BusObject {\n   private int mTextSize;\n\n   public int getTextSize() {\n      return mTextSize;\n   }\n\n   public void setTextSize(int size) {\n      mTextSize = size;\n   }\n}  Code 26. Connecting the Properties interface to the bus - service  private BusAttachment mBus;\nmBus = new BusAttachment(getClass().getName(),\nBusAttachment.RemoteMessage.Receive);\n\nAllJoynProperties mProperties = new AllJoynProperties();\nStatus status = mBus.registerBusObject(mProperties,  /testProperties );\nif (status != Status.OK) {\n   System.exit(0);\n   return;\n}  The D-Bus standard provides a way to get all of the properties\nfrom an interface. The code below shows how to use the interface\nimplemented in  Code 25. Implementation of the PropertiesInterface - service ,\nas well as the  GetAll method  from the D-Bus standard to\nget the  TextSize  property.  NOTE:  The GetAll method can return multiple values into a Map.\nEach property can be accessed using the name of the property.  Code 27. Calling the properties interface and using the GetAll method for properties  private BusAttachment mBus;\nprivate ProxyBusObject mProxyObj;\nprivate PropertiesInterface mPropertiesInterface;\nprivate Properties mProperties;\nprivate static short CONTACT_PORT = 42;\n\nprivate boolean isJoined = false;\n\nmBus = new BusAttachment(getClass().getName(),\nBusAttachment.RemoteMessage.Receive);\n\nmBus.registerBusListener(new BusListener {\n   public void foundAdvertisedName(String name, short transport,\nString namePrefix) {\n\n   short contactPort = CONTACT_PORT;\n   SessionOpts sessionOpts = new SessionOpts();\n   sessionOpts.traffic = SessionOpts.TRAFFIC_MESSAGES;\n   sessionOpts.isMultipoint = false;\n   sessionOpts.proximity = SessionOpts.PROXIMITY_ANY;\n   sessionOpts.transports = SessionOpts.TRANSPORT_ANY;\n\n   Mutable.IntegerValue sessionId = new Mutable.IntegerValue();\n\n   Status status = mBus.joinSession(name, contactPort, sessionId, sessionOpts,\nnew SessionListener());\n   if (status != Status.OK) {\n   System.exit(0);\n   }\n   mProxyObj =  mBus.getProxyBusObject( com.my.well.known.name ,\n       /testProperties ,\n      sessionId.value,\n      new Class ? [] { PropertiesInterface.class,\n         Properties.class });\n\n   mPropertiesInterface = mProxyObj.getInterface(PropertiesInterface.class);\n   mProperties = mProxyObj.getInterface({Properties.class);\n   isJoined = true;\n}\n});\nStatus status = mBus.connect();\nif (Status.OK != status) {\n   System.exit(0);\n   return;\n}\n\nstatus = mBus.findAdvertisedName( com.my.well.known.name );\nif (status != Status.OK) {\n   System.exit(0);\n}\n\nwhile(!isJoined) {\n   try { Thread.sleep(10);\n   } catch (InterruptedException e) {\n   System.out.println( Program interupted );\n   }\n}\n\nmPropertiesInterface.setTextSize(18);\nint textSize = mPropertiesInterface.getTextSize();\n\nMap String, Variant  map = mProperties.GetAll( org.samples.properties );\ntextSize = map.get( TextSize ).getObject(Integer.class);  Security  When an interface is marked as \"secure\", it indicates that all\ndata sent via a method call or signal must be encrypted.\nOnly an authenticated client can use an interface that has\nbeen marked as secure by using the @Secure annotation\n(see [Making a secure bus interface using the @Secure annotation][make-secure-bus-interface-using-secure-annotation]).  Marking an interface as a secure interface is as simple as\nadding the annotation @Secure when declaring the interface.\nSee  Code 5. Creating a secure interface .  It possible to use security and authentication with interfaces\nthat do not have the @Secure annotation. This is possible using Object Security.  Object security  Object Security allows you to force peer authentication\neven when the interface does not have the @Secure annotation.\nIt's possible to tell the AllJoyn framework that you want\nauthentication when you register a your BusObject.  Code 28. Registering an BusObject using Object Security  bus.registerBusObject(myService,  /my/object/path , true);  The ProxyBusObject should also indicate that it is using peer authentication.  Code 29. Get a ProxyBusObject that uses Object Security  bus.getProxyBusObject( my.wellknown.name ,  /my/object/path ,\nsessionId, new Class ? [] {MyInterface.class}, true);  For both the  registerBusObject  and  getProxyBusObject  methods,\nan extra Boolean argument can be added to the method calls.\nIf this is 'true', then peer authentication is used.  The programmer is responsible for making sure that both the\nBusObject and ProxyBusObject are using Object security. .\nIf the BusObject is created as a secure object, the ProxyBusObject\nshould also be secure. If they do not agree, it is an error.  AllJoyn authentication mechanisms  When using a secure interface, an authentication listener\nmust be created to handle authentication events. The authentication\nlistener provides authentication credentials for the local application\nand, depending on the authentication mechanism, checks the credential\nof the remote application.  The AllJoyn framework supports the following types of authentication mechanisms:   Secure Remote Password (SRP) anonymous key exchange  Secure Remote Password (SRP) logon (username and password)  RSA key exchange using X509 certificates  PIN key exchange  ECDHE_NULL key exchange  ECDHE_PSK key exchange  ECDHE_ECDSA key exchange   SRP key exchange uses a one-time authenticating password to\nset up an authentication key. This key is used for all subsequent\ninteractions between the client and server.  SRP logon requires that the user give a username and password\nbefore the client and server are able to share an interface,\nunlike the SRP key exchange where the password exchange is a\none-time event. SRP logon requires the username and password\nbe supplied each time a session is established between the\nclient and server.  RSA key exchange uses RSA public key cryptography to establish\na shared-secret passphrase. The shared-secret passphrase is\nused to establish a key. This key is then used for all subsequent\nexchanges between the given client and server using the protocol.  PIN key exchange uses a one-time authenticating password to\nset up an authentication key. This key is used for all subsequent\ninteractions between the client and server. PIN key exchange\nis specifically designed for devices that have really stringent\nmemory constrains like MCUs (Micro Control Units). Unless you are\ncommunicating with an MCU, it is recommended that you use an\nauthentication mechanism other than PIN key exchange.  ECDHE_NULL is an Elliptic Curve Diffie-Hellman Ephemeral key\nexchange which is anonymous.  ECDHE_PSK is an Elliptic Curve Diffie-Hellman Ephemeral key\nexchange which uses a pre-shared key like a PIN, a passphrase,\nor a symmetric key.  ECDHE_ECDSA is an Elliptic Curve Diffie-Hellman Ephemeral key\nexchange which uses a key agreement authenticated with an\nasymmetric key, and validated with an Elliptic Curve Digital\nSignature Algorithm (ECDSA) signature.  Each type of security mechanism requires that an Authentication\nListener be created that handles the specific type of security\nexchange needed. When creating the Authentication Listener, you\nspecify which type of authentication mechanism you want to use.\nEach authentication mechanism is specified by a string.  Authentication mechanisms and AllJoyn identifying string     Authentication mechanism  String identifying the authentication mechanism      SRP anonymous key exchange  ALLJOYN_SRP_KEYX    SRP logon  ALLJOYN_SRP_LOGON    RSA key exchange  ALLJOYN_RSA_KEYX    PIN key exchange ALLJOYN_PIN_KEYX     ECDHE_NULL key exchange  ALLJOYN_ECDHE_NULL    ECDHE_PSK key exchange  ALLJOYN_ECDHE_PSK    ECDHE_ECDSA key exchange  ALLJOYN_ECDHE_ECDSA     The AuthListener  The main difference between a secure application and a\nplain application, besides the @Secure annotation of the\ninterfaces, is the required inclusion of an AuthListener.\nAn implementation of an AuthListener contains two callback methods:   Requested  Completed   Any time a method call comes in on a secure interface,\nthe AllJoyn framework checks to see if it already knows how\nto decrypt the contents of the method call. If it cannot decrypt\nthe method call, the  requested(...)  method call is called.  The requested method call contains some or all of the following information:   The Authentication mechanism specified using one of the strings from Authentication mechanisms and AllJoyn identifying string .  PeerName - the well-known-name or unique name of the peer that initiated the\nAuthentication request.  A count of the number of authentication request attempts made.\n  The count for the first Authentication request starts at 1.  The user name of the user making the authentication request.\n  A user name is not required for all forms of authentications\n  and may be an empty string.  The specific type of authentication information being requested.\n  Depending on what type of authentication mechanism is being used,\n  one or more of these requests may be made:  CertificateRequest (RSA key exchange or ECDHE_ECDSA key exchange)  LogonEntryRequest (SRP logon)  PasswordRequest (SRP key exchange, SRP logon, RSA key exchange,\n    PIN key exchange, or ECDHE_PSK key exchange)  PrivateKeyRequest (RSA key exchange or ECDHE_ECDSA key exchange)  UserNameRequest (SRP logon)  VerifyRequest (RSA key exchange or ECDHE_ECDSA key exchange)   The  requested(...)  callback method may be called one or\nmore times for each authentication request. For each request,\nthe program is expected to obtain or generate the required\ninformation. The requested information can be obtained from any\nsource available including requesting information from a user.\nIf the requested information cannot be provided then returning\nfalse indicates failure.  Once the authentication has finished the  completed(...) \ncallback method is called. This contains:   The authentication mechanism that was just completed  The peerName (well-known name or unique name)  A boolean variable indicating if the authentication attempt completed successfully.   As we talk about each authentication method, message sequence\ncharts are provided showing method calls and callbacks used\nto set up the authenticated session. A legend for the\nMessage Sequence Chart (MSC) is provided in the following figure.   Figure: Message Sequence Chart legend  The message sequence charts simplify all device-to-device\ncommunication by ignoring bus traffic. All AllJoyn bus traffic\nis compressed into a single line in the message sequence charts\nlabeled \"AllJoyn Bus.\" This shows only the callbacks and\nmethod calls that we should be interested in when setting up authentication.  Code for SRP key exchange  SRP key exchange works similarly to pairing Bluetooth devices.\nThe devices advertise that they want to talk with one another\nand when they discover one another a password is entered on\nthe device. This one-time password proves that the device knows\nabout the Bluetooth device. Once this one-time pairing is completed,\nthe Bluetooth device can connect with the device at any time\nwithout repeating the pairing process.  Code 30. Registering the authentication listener \nsets up a client/server that uses SRP key exchange to set up\na secure connection. The code shares many similarities with\npairing a Bluetooth device.   There is a one-time password exchange.  Once the authentication is completed the client and server\ncan communicate without asking for passwords to be entered.  Even after the program is closed and restarted, the\nauthentication is still valid.   The following figure shows the sequence in which the callback\nmethods are instantiated the first time a secure method call\nis made using SRP key exchange. The sequence shown only happens\nthe first time the sender tries to communicate with the receiver.   Figure: MSC SRP key exchange  In  Code 30. Registering the authentication listener ,\nthe sender is the client and the receiver is the service.  Before calling connect, the  BusAttachment.registerAuthListener() \nshould be called. The code snippet below shows registering an\nAuthListener with the name SrpKeyXListener. The code for the\nSrpKeyXListener is shown in  Code 31. SRP key exchange AuthListener - service \nfor the service and  Code 32. SRP key exchange AuthListener - client  for the client.  Code 30. Registering the authentication listener  BusAttachment mBus;\nmBus = new BusAttachment( myProgramName , BusAttachment.RemoteMessage.Receive);\n\nSrpKeyXListener myAuthListener;\n\nStatus status = mBus.registerAuthListener( ALLJOYN_SRP_KEYX ,\n   myAuthListener);\nif (status != Status.OK) {\n   finish();\n   return;\n}  The rest of the steps for connecting and advertising the\nservice have been covered in  Discovery and sessions \nand are unchanged for a secure interface.  When registering the AuthListener, we have identified what\ntype of security the AuthListener is responsible for handling - in this case, \"ALLJOYN_SRP_KEYX\" .  Code 31. SRP key exchange AuthListener - service  /*\n* This Secure Remote Password Key Exchange listener creates a random\n* 6-digit pin code for each authentication attempt.\n*/\nprivate static class SrpKeyXListener implements AuthListener {\n   private Random mPasswordGenerator;\n   private boolean mGeneratePassword;\n\n   public SrpKeyXListener() {\n      mPasswordGenerator = new Random();\n      mGeneratePassword = true;\n   }\n\n   @Override\n   public boolean requested(String mechanism, String peerName, int count,\n      String userName, AuthRequest[] requests) {\n      if (mGeneratePassword) {\n         mGeneratePassword = false;\n      mPassword = String.format( %06d ,\nmPasswordGenerator.nextInt(1000000));\n      System.out.println( One Time Password :   + mPassword);\n      }\n      for (AuthRequest request : requests) {\n         if (request instanceof PasswordRequest) {\n            ((PasswordRequest) request).setPassword(mPassword.toCharArray());\n\n         }\n      }\n      return true;\n   }\n\n   @Override\n   public void completed(String mechanism, String peerName,\nboolean authenticated) {\n      mGeneratePassword = true;\n   }\n}  The first time that the requested callback is called,\na six-digit random number is generated and set as the password.\nWe check to see what  instanceof  AuthRequest we received.\nSince we are using SRP key exchange, we are only expecting\npassword requests. We cast the base AuthRequest type to a PasswordRequest  and call the  setPassword  method passing in a\nCharArray of the six-digit random number that was generated.\nThe code shown does not limit the number of times an application\ncan try to authenticate with this code. We can see the number\nof times the user has tried to authenticate by looking at the\ncount parameter. This code only generates a new PIN code\nat the start of an authentication attempt; as long as  completed \nhas not been called, the same password is used.  Code 32. SRP key exchange AuthListener - client  /*\n* This Secure Remote Password Key eXchange listener will ask the user to\n* enter the one time password.  This password must match the six-digit\n* string randomly generated by the service's SrpKeyXListener class.\n*\n* The following code limits the user to three authentication attempts.\n*/\nstatic class SrpKeyXListener implements AuthListener {\n   public boolean requested(String authMechanism,\nString authPeer, int count, String userName,\n         AuthRequest[] requests) {\n      if (count  = 3) {\n         System.out.println( Please enter one time password: );\n         Scanner in = new Scanner(System.in);\n         mPassword = in.nextLine();\n         for (AuthRequest request : requests) {\n            if (request instanceof PasswordRequest) {\n               ((PasswordRequest)\nrequest).setPassword(mPassword.toCharArray());\n            }\n         }\n         return true;\n      }\n      return false;\n   }\n\n   public void completed(String authMechanism, String authPeer, boolean\nauthenticated) {\n      if (!authenticated) {\n         System.out.println( Authentication failed. );\n      }\n   }\n}  Each time that the  requested  callback is called, the user\nis asked to provide the one-time password. The one-time password\nentered by the user must match the six-digit PIN code that was\nrandomly generated by the service. The user is given three attempts\nto provide the proper PIN code. If the user is unable to provide\nthe PIN code, the authentication attempt fails. Just like the code\nused in the service's SrpKeyXListener, we also check to see what instanceof  AuthRequest we have received. Since we are using\nSRP key exchange, we are only expecting password requests.\nThe base  AuthRequest  type is cast to a  PasswordRequest \ntype and the password is set using the  setPassword  method.\nUnlike the service, this code limits the number of attempts\nthe user is given to produce the proper PIN code. After three\nfailed attempts, this returns false indicating failure to\ncomplete authentication.  Code for SRP logon  SRP logon uses the familiar user name/password method for\nidentity verification. This should be familiar to anyone\nwho has used online shopping, email, or banking.  Unlike SRP key exchange and RSA key exchange, SRP logon requires\nthe user to enter the user name/password every time a session\nis established. The verification only lasts for the length of\nthe session. If the program is shut down and then restarted,\nthe user is asked to re-authenticate.   Figure: MSC SRP logon option 1   Figure: MSC SRP logon option 2   Figure: MSC SRP logon option 3   Figure: MSC SRP logon option 4  With SRP logon, there are four possible sequence diagrams.\nWhen the sender is requested to provide a user name or password,\nthey can provide just the user name or both the user name and password.\nThe information is sent to the receiver and the receiver then\nuses the user name to look up the password or logon. If the password\nwas also supplied and matches the receiver's password or the\ncomputer logon, the authentication completes. If only the\nuser name was supplied, the receiver then requests the user name\nand password from the sender.  What is the logon? The logon is a string that is computed\nusing the process described in  RFC 5054 .\nThis ends up being a large string that takes the form of  N:g:s:v  where:   N is a large prime number  g is the generator  s is the salt  v is the computed verifier   The logon gives all the information needed to compute the\nverifier from the user name and password. This is a strongly\nencrypted string that can be used to verify a user name and\npassword but cannot be used to obtain the user name and password.\nBecause it is a secure way to store a user name and password,\nmany databases do not actually store the password but instead\nstore the logon as defined by  RFC 5054 .\nComputing the logon string is beyond the scope of this document. Code 33. Registering the authentication listener for SRP logon \nuses plain text user name and password.  When using a secure interface, an authentication listener\nmust be created that handles authentication. The authentication\nlistener decides if the connecting client is a trusted client\nand if they should be allowed to use the interface. The implementation\nof the SrpLogonListener is shown in Code 33. Registering the authentication listener for SRP logon .\nSee  Code 34. SRP Logon AuthListener - service \nfor the service (receiver) and  Code 34. SRP Logon AuthListener - service \nfor the client (sender).  Code 33. Registering the authentication listener for SRP logon  BusAttachment mBus;\nmBus = new BusAttachment( myProgramName , BusAttachment.RemoteMessage.Receive);\n\nSrpLogonListener myAuthListener;\n\nStatus status = mBus.registerAuthListener( ALLJOYN_SRP_LOGON , myAuthListener);\n\nif (status != Status.OK) {\n   finish();\n   return;\n}  The rest of the steps for connecting and advertising the service\nhave been covered in the earlier sections and are unchanged\nfor a secure interface.  Code 34. SRP Logon AuthListener - service  class SrpLogonListener implements AuthListener {\n   private Map String, char[]  mUserNamePassword;\n\n   /* Populate the user name and password table used by this listener. */\n   public SrpLogonListener() {\n      mUserNamePassword = new HashMap String, char[] ();\n      mUserNamePassword.put( user1 ,  password1 .toCharArray());\n      mUserNamePassword.put( user2 ,  password2 .toCharArray());\n   }\n\n   /*\n    * Given the user name, look up the password. Returning true without\n    * setting the password tells the authentication engine to ask the peer\n    * for the user name again.\n    */\n   public boolean requested(String mechanism,\n      int count,\n      String userName,\n      AuthRequest[] requests) {\n   char[] password = mUserNamePassword.get(userName);\n\n   if (password != null) {\n      for (AuthRequest request : requests) {\n         if (request instanceof PasswordRequest) {\n            ((PasswordRequest) request).setPassword(password);\n         }\n      }\n   }\n   return true;\n   }\n   public void completed(String mechanism, boolean authenticated) {\n   }\n}  When the  requested()  method is called, it makes a  PasswordRequest \nand a  LogonEntryRequest . Since only passwords are provided,\nthe  LogonEntryRequest  has been ignored. The sample above has\ncreated a HashMap that contains two user names and two passwords.\nWhen the  requested()  callback method is called, it contains\nthe user name that can be used to obtain the password from the\nHashMap. If the password matches the password provided by\nthe client, the authentication is completed. If a password\nwas not provided, the client is asked to once again provide\na user name and password. If the service is unable to obtain\nthe password from the user name, it requests the user name and password again.  Code 35. SRP Logon AuthListener - client  class SrpLogonListener implements AuthListener {\n\nstatic class SrpLogonListener implements AuthListener {\n   public boolean requested(String mechanism,\n         String peerName,\n         int count,\n         String userName,\n         AuthRequest[] requests) {\n   /*\n    * Collect the requests we're interested in to simplify\n    * processing below.\n    */\n   PasswordRequest passwordRequest = null;\n   UserNameRequest userNameRequest = null;\n   for (AuthRequest request : requests) {\n      if (request instanceof PasswordRequest) {\n         passwordRequest = (PasswordRequest) request;\n      } else if (request instanceof UserNameRequest) {\n         userNameRequest = (UserNameRequest) request;\n      }\n   }\n\n   if (count  = 3) {\n      System.out.print( Please enter user name [user1]:  );\n      Scanner in = new Scanner(System.in);\n      String user = in.nextLine();\n\n      System.out.print( Please enter password [password1]:  );\n      String password = in.nextLine();\n\n      userNameRequest.setUserName(user);\n      passwordRequest.setPassword(password.toCharArray());\n      return true;\n   }\n   return false;\n}\n\npublic void completed(String authMechanism,\n      String authPeer,\n      boolean authenticated) {\n   if (!authenticated) {\n      System.out.println( Authentication failed. );\n   }\n}\n}  The  requested()  method requests both the  PasswordRequest \nand the  UserNameRequest . Here we have asked the user to\nenter both user name and password. Since this is sample code,\nwe are also revealing the user name and password which\nnormally would not be done unless it is a guest account.\nIf the supplied user name and password match the user name\nand password at the server, the authentication completes.\nIf the user name and password do not match, the user gets\nup to three tries to enter the correct user name and password\nbefore the authentication fails.  Code for RSA key exchange  RSA is an encryption method that has been successfully used\nfor online commerce for years. It consists of the exchange of\nwhat is called a public key. The public key can be used to\nencrypt data but cannot be used to decrypt the data. To be able\nto decrypt the data, the receiver would use their private key.\nIf the data were encrypted using their public key, they can read\nthe data contents but no one else can. To make private keys\neven more secure, they are typically encrypted using a password.\nTo decrypt the private key, the password must be known.  The RSA key exchange certificate chain requires three things:   A private key  A password used to encrypt the private key  An X.509 certificate (a standard public key structure)   The X.509 certificate contains the public key as well as\nadditional information such as who issued the key and\nhow long the key is valid.  If you have the three required elements, you can provide them\nto the AuthListener when they are  requested() . If you have\nnot generated the required elements, the code can automatically\ngenerate them for you.   Figure: MSC RSA key exchange option 1  For this option, both sender and receiver have all the full\nRSA certificate chain needed: their own private keys, certificates,\nand the password used for private key encryption. When the sender\ncalls the remote method call to an unverified receiver, the sender\nis asked to provide the RSA certificate chain. Once the RSA\ncertificate chain has been provided, the receiver also requests\nthe RSA certificate chain. The receiver then sends out a verify\nrequest. This gives the receiver an opportunity to inspect the\ncertificate sent from the sender. The receiver can inspect the\ncertificate and accept or reject the certificate based on\ninformation such as who issued the certificate.   Figure: MSC RSA key exchange option 2  For this option the sender does not have the RSA certificate\nchain needed for RSA authentication. The code can generate a\nself-signed RSA private key and X.509 certificate for the user.\nThe user only needs to supply the password needed to encrypt the\nprivate key. If multiple authentication requests are made,\nthe sender reuses the private key and certificate generated.\nIt is important that each additional request for password\nuses the same password. If a different password is supplied,\nyou receive an error stating that you are unable to decrypt\nthe RSA private key. It is possible to find out if this is\nthe first time the password is being generated by calling AuthListener.PasswordRequest.isNewPassword()  method.   Figure: MSC RSA key exchange option 3  In this option, neither the sender nor the receiver have the\nRSA elements or they were already generated. Both sides ask\nfor their private key password. The sender and receiver can\nchoose differing passwords since the password is only used\nfor their own private key which is not shared with the other device.   Figure 10: MSC RSA key exchange option 4  With this option the receiver side generates its own private key and certificate.  When using a secure interface, an authentication listener must\nbe created that handles connection authentication. The authentication\nlistener decides if the connecting client is a trusted client\nand if they should be allowed to use the interface.  Code 36. Registering the authentication listener  BusAttachment mBus;\nmBus = new BusAttachment(  MyAppName , BusAttachment.RemoteMessage.Receive);\n\nRsaKeyXListener mAuthListener;\n\nStatus status = mBus.registerAuthListener( ALLJOYN_RSA_KEYX ,\n   mAuthListener);\nif (status != Status.OK) {\n   finish();\n   return;\n}  The rest of the steps for connecting and advertising the service\nare detailed in  Discovery and sessions \nand are unchanged for a secure interface.  Code 37. RSA key exchange AuthListener - service and client \ndemonstrates the auth listener for MSC RSA key exchange option 3,\nand would work for both the service and client.  Code 37. RSA key exchange AuthListener - service and client  /* The RSA key exchange listener uses X.509 certificates to authenticate. */\nclass RsaKeyXListener implements AuthListener {\n   public boolean requested(String mechanism,\n         String peerName,\n         int count,\n         String userName,\n         AuthRequest[] requests) {\n   /*\n    * Collect the requests we're interested in to simplify\n    * processing below.\n    */\n   PasswordRequest passwordRequest = null;\n   CertificateRequest certificateRequest = null;\n   VerifyRequest verifyRequest = null;\n\n   for (AuthRequest request : requests) {\n      if (request instanceof PasswordRequest) {\n         passwordRequest = (PasswordRequest) request;\n      } else if (request instanceof CertificateRequest) {\n         certificateRequest = (CertificateRequest) request;\n      } else if (request instanceof VerifyRequest) {\n         verifyRequest = (VerifyRequest) request;\n      }\n   }\n\n   if (verifyRequest != null) {\n      /* Verify a certificate chain supplied by the peer. */\n      return true;\n   } else if (certificateRequest != null) {\n      /*\n       * The engine is asking us for our certificate chain.\n       *\n       * If we return true and do not supply the certificate chain,\n       * then the engine will create a self-signed certificate for\n       * us. It will ask for the passphrase to use for the private\n       * key via a PasswordRequest. If we return false authentication\n       * will fail.\n       */\n      return true;\n   } else if (passwordRequest != null) {\n      /*\n       * A password request under the ALLJOYN_RSA_KEYX mechanism is\n       * for the passphrase of the private key.\n       *\n       * PasswordRequest.isNewPassword() indicates if the engine\n       * needs to create a private key for us (as part of creating a\n       * self-signed certificate).  Otherwise it is expecting the\n       * passphrase for the existing private key.\n       */\n      if (count  = 3) {\n         if(passwordRequest.isNewPassword()){\n            System.out.print( Enter password to generate new   +\n                private key and certificate :  );\n         } else {\n         System.out.print( Please enter the private key password :  );\n\n         }\n         Scanner in = new Scanner(System.in); String password = in.nextLine();\n         passwordRequest.setPassword(password.toCharArray()); return true;\n      }\n   }\n   return false;\n   }\n\n   public void completed(String mechanism,\n      String peerName,\n      boolean authenticated) {\n   if (!authenticated) { System.out.println( Authentication failed. );\n   } else {\n      System.out.println( Authentication successful. );\n   }\n}\n}  When an authentication request comes in, it contains a  PrivateKeyRequest , CertificateRequest , and  PasswordRequest . This code does not\nprovide the private key or the X.509 certificate but still\nreturns true for the CertificateRequest. The code tries to\nsee if it has already generated a private key and a self-signed\ncertificate. If it has generated a private key and a self-signed\ncertificate, it asks for the password that was used to generate\nthe key and certificate. If it has not generated a private key\nand self-signed certificate, it asks for a password to do so.\nIn both instances you receive a PasswordRequest. The only way\nto tell if the private key and certificate have already been\ngenerated is to check if this is a request for a new password: passwordRequest.isNewPassword() . It is important to remember\nthe password, because the same password is expected on each\nadditional authentication attempt. Both the client and the\nservice handle RSA authentication identically, and there is\nno difference between the service  AuthListener  and the\nclient  AuthListener .  If you do not want the AllJoyn framework generating your\nprivate key and X.509 certificate for you, then you need to\nprovide the private key, the password used to encrypt the\nprivate key, and the X.509 certificate. For the following sample,\nthe private key and certificate were generated using openssl.\nFor most systems, openssl is required to run the AllJoyn framework.\nYou might already have it installed on your system (openssl is\nnot required for all installations of Windows). Many other tools\nare available to create the private key and certificate;\nif you are familiar with those tools feel free to use them.  See openssl's documentation for creating keys and certificates:  http://www.openssl.org/docs/HOWTO/keys.txt  http://www.openssl.org/docs/HOWTO/certificates.txt  To create a private key the following command was used:  $ openssl genrsa -des3 -out privkey.pem 2048  You are asked to enter a pass phrase; the pass phrase \"pass\" was chosen.  This generates a private key that is 2048 bits in length.\n2048 or higher is recommended for RSA keys.  The private key is then used to generate the X.509 certificate  $ openssl req -new -x509 -key privkey.pem -out cacert.pem -days 3650  You are asked to provide the following for the certificate:   The pass phrase for privkey.pem  Country name (2 letter code)  State or province name (full name)  Locality name (e.g., city)  Organization name  Organization unit name  Common name (e.g., YOUR name)  Email address   This certificate is valid for just under 10 years from the date\nof its creation. Inspect the contents of the certificate using openssl:  $ openssl x509 in cacert.pem -noout -text  Code 38. RSA Key Exchange AuthListener - service and client \nrepresents the sequence shown in the MSC RSA key exchange option 1 diagram.  Code 38. RSA Key Exchange AuthListener - service and client  /* The RSA key exchange listener uses X.509 certificates to authenticate. */\nprivate static class RsaKeyXListener implements AuthListener {\n   /* password used when generating the private key */\n   private static final String mPassword =  pass ;\n   /* 2048 bit RSA private key */\n   private static final String mPrivateKey =\n       -----BEGIN RSA PRIVATE KEY-----\\n  +\n       Proc-Type: 4,ENCRYPTED\\n  +\n       DEK-Info: DES-EDE3-CBC,61A8FD1CE34DE29B\\n  +\n       \\n  +\n\n       uIG/qraR9tvxhxyMPsLAP8ZimZBHMwJuMnRkAoU/fO/REnX7Zo+OLD+/ks4MnmBX\\n  +\n       1ziBBP3MSRcvF47C8U5qmdHPg4ujzJgbX0F6tCMOmjdeAt+iFOjov43gfuGXY3sr\\n  +\n       L/28OMUqrgyYVuaytVPBWOSFKy9BBSO/h/pCVHcQC+2C4vGXgz3aAoM4euqXgGXT\\n  +\n       xVMh8wLAMfRFJHmTmb65n8LPb5j2UOLJ3MkFXXi753qwLfqMlEO7cE5UIh+C+LwA\\n  +\n       KhFfehtAKMlaArnlfuJMnEuHj9vj7XfhFpdH23AXUt3CBngJvuF/xi9r0bfwEgzi\\n  +\n       0Nc4wKCyj2VTr3qH22ZYat5gkSh8p8qs8FsQyZE/IE7BUp1han25fev1ycsvLaqZ\\n  +\n       zxhoCNJMrX3o+B8OqKN4sJPMte6/5BcJkvap4Wih1iNv+H0Aflc0A9Wrfww16bgx\\n  +\n       C3OtxfFWB8CC5d6DNxmc3Ef6M+wzbB4OW/umWThPLcqK7tjlq2hqeaOJnsW9CwXL\\n  +\n       o/6LoAwrRss/Tp+1sw7FRKQ+cOdKXdjWwtpu8JV3EF9zibxMG00V2OLaHHU+JrOY\\n  +\n       j9Mkru2ItcJEOtH1hv5iNpfTMnZbgfDF1iEhAZNKDdvoSVM8MrcrQONLZ8whiUlN\\n  +\n       LQJU9I3oCLHJEHS23T2gMIJFyU7eb+8A+dbMEPqhvm6VK2PONEQZtQAEf+O+Hgq2\\n  +\n       ccx94SayajiwQoPcu8uHPEeJym2rx3/IZhttymvAqxX9GzydvsPnQedRT31PjrMq\\n  +\n       bZYdNMV2Y9+GLef/x6dwFMjzHZC2o8nglCJ/PYpebISPJLRsdYt/HuGr/XFAKPQv\\n  +\n       jN1xbUWOYSiws/1xnidb6SYQEPHvsutaerplHeZ7XQkddKeXoz0BTF9XnY3magCd\\n  +\n       tWnuZtznd56pggNY4skUMF8bh/sbHtF0/MfI5SOAPmrvGsC/6+lZG/HGM1LM9u5+\\n  +\n       016U1T54DjV3yDgLen1rQ4R8wZ3DLc15VVX5L4ORKqFb3073oX+RGUeS0c5x+Pqd\\n  +\n       /rp9CdWN3FcyC/NXsCo1GVR3qW/5/HwimQxghLqEgho1ZELIZskMP0zzBSejcUFJ\\n  +\n       5vLiusCU8C0DdcV3sfye/8kNcIalIyBeMJviA9s4AOylZsXdJyADHpHdrMsIa0R0\\n  +\n       FyqZBHilUMlHDbQgd0+Nkuh+zP4iXh89MJQl7Knb8Y/aqCO8LYGNLaXv8lOFnqYr\\n  +\n       mYnR9HxLHfkKoe8qoKQqwDDrzIZGRhMYBAX2RgxSXSkfUSem9ccJ+t6vm7js5ORj\\n  +\n       IT8JunaRFxBYkP9popYEjV0iEKWeshyulQHpScnncca0IqkHdyNfrK+zJhoi2KhU\\n  +\n       eTlael/ACxP1GEZDd2pPTzwB/KdcoQQrjfi/zFovIOYmcIo1Q2eJZLgJyc3x1ne/\\n  +\n       21/pYZ3FiOjr3tP9MHLg3tcdi7ZShzd81bvudFCuSI569MJpGGlLYuBn/+UvohBK\\n  +\n       igOnHn/R60euBdsQdAxhDWJqzVDm1q5J0jmN5hk2RvQlfbX/L+cZvJsClhsO4ZX7\\n  +\n       JoWdSxXn5gCsWAX8LZUa46tRac1QuCPSJw+q55dif6ze6/A7vnyjg3ZxDLKxcs/O\\n  +\n       -----END RSA PRIVATE KEY-----\\n ;\n   /* X.509 certificate good until Jul 9 15:11:06 2021 GMT */\n   private static final String mCert =\n       -----BEGIN CERTIFICATE-----\\n                                        +\n       MIIEgzCCA2ugAwIBAgIJAPij5sS8BfieMA0GCSqGSIb3DQEBBQUAMIGHMQswCQYD\\n  +\n\n       VQQGEwJOQTETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHU2VhdHRsZTEN\\n  +\n\n       MAsGA1UEChMEUXVJQzEQMA4GA1UECxMHQWxsSm95bjENMAsGA1UEAxMEVXNlcjEh\\n  +\n\n       MB8GCSqGSIb3DQEJARYSdXNlckBzb21lcGxhY2UuY29tMB4XDTExMDcxMjE1MTEw\\n  +\n\n       NloXDTIxMDcwOTE1MTEwNlowgYcxCzAJBgNVBAYTAk5BMRMwEQYDVQQIEwpXYXNo\\n  +\n\n       aW5ndG9uMRAwDgYDVQQHEwdTZWF0dGxlMQ0wCwYDVQQKEwRRdUlDMRAwDgYDVQQL\\n  +\n\n       EwdBbGxKb3luMQ0wCwYDVQQDEwRVc2VyMSEwHwYJKoZIhvcNAQkBFhJ1c2VyQHNv\\n  +\n\n       bWVwbGFjZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDliF9P\\n  +\n\n       2asoGLtCJ8UXKu7aGFLXM2YpO6T7e9k0YvPMaw5WFJG5KOu0Zy9BvQZ/AuaewSH7\\n  +\n\n       HcLQfM++IG2VVsrWKuL/a+q3leIpLHtXLdL0d04Sg4ZFk5MhRosOQ0L2cv9U8XeE\\n  +\n\n       286JAKO+uLYw0a5c67GZMwUUh/dmU2144rlVtGWhwNGlTK+GeMsYoeusAMeOxjTp\\n  +\n\n       85UdMDcWsT3aOq4t8OAAGesiCaXxHrFf/gQSvR26wvyo85v/eL5PjNuDhOU+U7+Q\\n  +\n\n       RGfkiWzM4iM4qyOKP47Y2qtNQ4ZU3eJsA/jOcDY0MhZRx6vIJSsvI/BDSzMZvVWp\\n  +\n\n       BXp7o9Yyjy17w00ZAgMBAAGjge8wgewwHQYDVR0OBBYEFGa2ncrgF5LrW0kN7OMj\\n  +\n\n       1PVoDvmwMIG8BgNVHSMEgbQwgbGAFGa2ncrgF5LrW0kN7OMj1PVoDvmwoYGNpIGK\\n  +\n\n       MIGHMQswCQYDVQQGEwJOQTETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH\\n  +\n\n       U2VhdHRsZTENMAsGA1UEChMEUXVJQzEQMA4GA1UECxMHQWxsSm95bjENMAsGA1UE\\n  +\n\n       AxMEVXNlcjEhMB8GCSqGSIb3DQEJARYSdXNlckBzb21lcGxhY2UuY29tggkA+KPm\\n  +\n\n       xLwF+J4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQUFAAOCAQEAyZk/35YsKQba\\n  +\n\n       iBMkOBP4LeVutQIep9kOHVdIQZjOvsBgIDaRiNClJUd+MfsFHqLIfAC/OulUEz1D\\n  +\n\n       mzaKcO15hcmTOar/nGglEZyIZtL93le3keQBeZHMPO0Dhrmhyhqj+W3lBmOQ4HPJ\\n  +\n\n       CD9dTeY81suQimQwid/Tvl8cACxpQkr+GM3JiHknA7+pUpo+rMJRWn206cY00tzB\\n  +\n\n       UIGMr0DQryQcHFmu2m3uxoS5B7MjlE9VwmOEKDjoxsmMQ9m/ajvj/7rT8g5/z1+m\\n  +\n\n       N9Wk8yx0gDBJJqqmVCh+WYgniiMhfKMC+nCS9fjj9RJVumRndD/B38kpj0TyfyBt\\n  +\n\n       e4BgMacL0w==\\n  +\n       -----END CERTIFICATE----- ;\n   public boolean requested(String mechanism, String peerName, int count,\n      String userName, AuthRequest[] requests) {\n         System.out.println(String.format( AuthListener.requested(%s, %s, %d,\n%s, %s); ,\n            mechanism,\n            peerName,\n            count,\n            userName,\n            AuthRequestsToString(requests)));\n\n         /* Collect the requests we're interested in to simplify\nprocessing below. */\n      PasswordRequest passwordRequest = null;\n      PrivateKeyRequest privateKeyRequest = null;\n      CertificateRequest certificateRequest = null;\n      VerifyRequest verifyRequest = null;\n\n      for (AuthRequest request : requests) {\n         if (request instanceof PasswordRequest) {\n            passwordRequest = (PasswordRequest) request;\n         } else if (request instanceof PrivateKeyRequest) {\n            privateKeyRequest = (PrivateKeyRequest) request;\n         } else if (request instanceof CertificateRequest) {\n            certificateRequest = (CertificateRequest) request;\n         } else if (request instanceof VerifyRequest) {\n            verifyRequest = (VerifyRequest) request;\n         }\n      }\n\n      if (verifyRequest != null) {\n         /* Verify a certificate chain supplied by the peer. */\n         return true;\n      } else if (certificateRequest != null  \n         privateKeyRequest != null  \n         certificateRequest != null ) {\n         /*\n          * The engine is asking us for our certificate chain.\n          *\n          * We are providing the full certificate chain - the password,\n          * private key, and certificate.\n          */ passwordRequest.setPassword(mPassword.toCharArray());\n          privateKeyRequest.setPrivateKey(mPrivateKey);\n          certificateRequest.setCertificateChain(mCert);\n\n         return true;\n\n      }\n      return false;\n   }\n\n   public void completed(String mechanism, String peerName, boolean\nauthenticated) {\n      if (!authenticated) {\n         System.out.println( Authentication failed. );\n      } else {\n         System.out.println( Authentication successful. );\n      }\n   }\n}  When the initial request for the password, private key, and\ncertificate come in this time, we are providing the information.  The code above simply returns true when the  verifyRequest \nis received. The full process of verifying the certificate\nis beyond the scope of this document. Code 39. Obtaining the X.509 certificate for verification \nshows how to gain access to the certificate so that it can be verified.  Code 39. Obtaining the X.509 certificate for verification  private CertificateFactory factory;\nfactory = CertificateFactory.getInstance( X.509 );\n\nprivate CertPathValidator validator;\nvalidator = CertPathValidator.getInstance( PKIX );\n\nif (request instanceof VerifyRequest) {\n   try {\n      String chain = ((VerifyRequest) request).getCertificateChain();\n\n      BufferedInputStream in =\n         new BufferedInputStream(new ByteArrayInputStream(chain.getBytes()));\n\n      List X509Certificate  list = new ArrayList X509Certificate ();\n      while (in.available()   0) {\n         list.add((X509Certificate) factory.generateCertificate(in));\n      }\n\n      CertPath path = factory.generateCertPath(list);\n\n      PKIXParameters params = new PKIXParameters(trustAnchors);\n      params.setRevocationEnabled(false);\n\n      validator.validate(path, params);\n   } catch (Exception ex) {\n      return false;\n   }\n\n   return true;\n}  This code obtains the certificate as part of the VerifyRequest.\nThe chain is converted to an  X509Certificate  that can be used\nto get the certificate path. The certificate path can be validated\nagainst a list of  trustedAnchors  (not shown in this code).\nAll of our samples used self-signed certificates so there\nis no certificate path of authority. You would have to add\nyourself to the list of trusted anchors if this method of\nverification is used.  There are many things that could be checked in the  VerifyRequest \nother than checking the certificate path of authority. For example,\nyou could reject any certificate that was not valid for more than 10 days.  PIN key exchange  PIN key exchange only uses a password for identity verification.\nAuthentication using PIN key exchange is very similar to\nSRP key exchange:   There is a one-time password exchange.  Once the authentication is completed the client and server\ncan communicate without asking for passwords to be entered.  Even after the program is closed and restarted the\nauthentication is still valid.   The following figure shows the sequence in which the callback\nmethods are instantiated for a PIN key exchange. This message\nsequence chart is identical to the MSC SRP key exchange diagram.   Figure: MSC PIN key exchange  Code 40. Registering the authentication listener  shows\nregistering an AuthListener with the name SrpKeyXListener.\nThe code for the SrpKeyXListener is shown in Code 31. SRP key exchange AuthListener - service  for the service and Code 32. SRP key exchange AuthListener - client  for the client.\nYes, we are re-using the SrpKeyXListener for PIN key exchange.  Code 40. Registering the authentication listener  BusAttachment mBus;\nmBus = new BusAttachment( myProgramName ,\nBusAttachment.RemoteMessage.Receive);\nSrpKeyXListener myAuthListener;\nStatus status = mBus.registerAuthListener( ALLJOYN_PIN_KEYX ,\n   myAuthListener);\nif (status !=\n   Status.OK) {\n   finish();\n   return;\n}  When registering the AuthListener, here we are reusing the\nsame authentication listener that was created for the\nSRP key exchange sample above. The only change needed to\nuse PIN key exchange is that, when registering the AuthListener,\nthe type of security the AuthListener is responsible for handling\nwas changed from ALLJOYN_SRP_KEYX to ALLJOYN_PIN_KEYX.  ECDHE_NULL key exchange  The ECDHE_NULL keyexchange is purely anonymous. It does not\nrequire any input from the application.  The following figure shows the sequence in which the callback\nmethods are instantiated for an ECDHE_NULL key exchange.   Figure: MSC ECDHE_NULL key exchange  Code 41. ECDHE_NULL Key Exchange AuthListener - service and client \nshows registering an AuthListener with the name ECDHE_NULLKeyXListener.  Code 41. ECDHE_NULL Key Exchange AuthListener - service and client  class ECDHE_NULLKeyXListener implements AuthListener {\n\n   public ECDHE_NULLKeyXListener() {\n   }\n\n   public String getMechanisms() {\n      return  ALLJOYN_ECDHE_NULL ;\n   }\n\n   public boolean requested(String authMechanism, String authPeer, int count,\n\n      String userName, AuthRequest[] requests) {\n         try {\n            if (!authMechanism.equals( ALLJOYN_ECDHE_NULL )) {\n               return false;\n            }\n\n            return true;\n\n         } catch (Exception ex) {\n            ex.printStackTrace();\n            return false;\n         }\n      }\n\n      public void completed(String authMechanism, String authPeer,\nboolean authenticated) {\n         if (!authenticated) {\n            System.out.println( Authentication failed. );\n         } else {\n            System.out.println( Authentication successful. );\n         }\n   }\n}  Code 42. Registering the authentication listener with ECDHE_NULLKeyXListener \nshows registering an AuthListener with the name ECDHE_NULLKeyXListener.  Code 42. Registering the authentication listener with ECDHE_NULLKeyXListener  BusAttachment mBus;\nmBus = new BusAttachment( myProgramName , BusAttachment.RemoteMessage.Receive);\n   ECDHE_NULLKeyXListener myAuthListener; Status status =\nmBus.registerAuthListener( ALLJOYN_ECDHE_NULL , myAuthListener);\nif (status !=\nStatus.OK) { finish(); return;\n}  ECDHE_PSK key exchange  ECDHE_PSK key exchange uses a pre-shared secret for identity\nverification. Authentication using PSK key exchange is very\nsimilar to SRP key exchange:   There is a one-time pre-shared secret exchange.  Once the authentication is completed, the client and server\ncan communicate without asking for pre-shared secret to be entered.  Even after the program is closed and restarted the\nauthentication is still valid.   The following figure shows the sequence in which the callback\nmethods are instantiated for an ECDHE_PSK key exchange.   Figure: MSC ECDHE_PSK key exchange  Code 43. ECDHE_PSK Key Exchange AuthListener - service and client  class ECDHEPSKKeyXListener implements AuthListener {\n\n   public ECDHEPSKKeyXListener() {\n   }\n   public String getMechanisms() {\n      return  ALLJOYN_ECDHE_PSK ;\n   }\n\n   public boolean requested(String authMechanism, String authPeer, int count,\n\n      String userName, AuthRequest[] requests) {\n         try {\n            if (!authMechanism.equals( ALLJOYN_ECDHE_PSK )) {\n               return false;\n            }\n\n            for (AuthRequest rqst: requests) {\n               if (rqst instanceof PasswordRequest) {\n                  /*\n                   * The ECDHE_PSK key exchange requests for the pre shared secret.\n                   * Based on the pre shared secret id given the username input variable,\n                   * the application can retrieve the pre shared secret\n                   * from storage or from the end user.\n                   * In this example, the pre shared secret is a hard coded string\n                   */\n                   PasswordRequest pskRqst = (PasswordRequest) rqst;\n                   String psk =  123456 ;\n                   pskRqst.setPassword(psk.toCharArray());\n               }\n            }\n\n            return true;\n\n         } catch (Exception ex) {\n            ex.printStackTrace();\n         }\n         return false;\n      }\n      public void completed(String authMechanism, String authPeer,\nboolean authenticated) {\n      if (!authenticated) {\n         System.out.println( Authentication failed. );\n      } else {\n         System.out.println( Authentication successful. );\n      }\n\n   }\n\n}  Code 44. Registering the authentication listener with ECDHE_PSKKeyXListener \nshows registering an AuthListener with the name ECDHE_PSKKeyXListener.  Code 44. Registering the authentication listener with ECDHE_PSKKeyXListener  BusAttachment mBus;\nmBus = new BusAttachment( myProgramName ,\nBusAttachment.RemoteMessage.Receive);\n\n   ECDHE_PSKKeyXListener myAuthListener;\n   Status status = mBus.registerAuthListener( ALLJOYN_ECDHE_PSK , myAuthListener);\n   if (status !=\nStatus.OK) { finish(); return;\n}  ECDHE_ECDSA key exchange  ECDHE_ECDSA key exchange uses Elliptic Curve Cryptography\n(ECC)-based certificate for identity verification. The ECC\ncurve currently supported is the NIST P-256 curve.   If the application provides a private key and certificate\nchain in the PrivateKeyRequest and CertificateRequest, then\nthe AllJoyn framework will send the certificate chain to the\nother peer for validation via the VerifyRequest.  Once the authentication is completed, the client and server\ncan communicate without asking for the keys.  Even after the program is closed and restarted, the\nauthentication is still valid.   The following figure shows the sequence in which the callback\nmethods are instantiated for an ECDHE_ECDSA key exchange.   Figure: MSC ECDHE_ECDSA key exchange  The following table lists the fields included in a type of\ncertificate used by the ECDHE_ECDSA key exchange. All fields\nin the certificate are network-byte-order byte arrays.  ECDHE_ECDSA key exchange certificate fields     Field name  Data type  Description      version  UINT8[4]  version is 1. ECC curve is NIST P-256 External Data digest algorithm is SHA-256. DSA algorithm is ECC NIST P-256 DSA.    issuer  UINT8[76]  The issuer field.    subject  UINT8[76]  The subject field.    validityFrom  UINT8[8]  The validity period. Subfield Valid From. It's represented in seconds since EPOCH Jan 1, 1970.    validityTo  UINT8[8]  The validity period. Subfield Valid To. It's represented in seconds since EPOCH Jan 1, 1970.    delegate  UINT8  The delegate flag.    digest  UINT8[32]  The digest of the external data. If the hash field is all 0s, then there is no external data. The hash algorithm and digest size is defined by the version number.    sig  UINT8[72]  The signature. The DSA signature is computed over the fields from subject field to digest field by the issuer. The DSA algorithm is ECC NIST P-256 DSA.     The code for the ECDHE_ECDSAKeyXListener is shown in Code 45. ECDHE_ECDSA Key Exchange AuthListener - service and client .  Code 45. ECDHE_ECDSA Key Exchange AuthListener - service and client  class ECDHE_ECDSAKeyXListener implements AuthListener {\n\n   public ECDHE_ECDSAKeyXListener() {\n   }\n\n   public String getMechanisms() {\n      return  ALLJOYN_ECDHE_ECDSA ;\n   }\n\n   /*\n    * The ECDHE key exchange can request for private key, public key, and to verify the peer\n    */\n   public boolean requested(String authMechanism, String authPeer, int count,\n\n      String userName, AuthRequest[] requests) {\n         try {\n            if (!authMechanism.equals( ALLJOYN_ECDHE_ECDSA )) {\n               return false;\n            }\n\n            for (AuthRequest rqst: requests) {\n               if (rqst instanceof PrivateKeyRequest) {\n                  /*\n                   * The application may provide the DSA private key and\n                   * public key in the certificate.\n                   * AllJoyn stores the keys in the key store for future use.\n                   * If the application does not provide the private key, AllJoyn will\n                   * generate the DSA key pair.\n                   */\n                  if (sendBackKeys) {\n                     PrivateKeyRequest pkRqst = (PrivateKeyRequest) rqst;\n                     String privateKeyPEM = CLIENT_PK_PEM;\n                     pkRqst.setPrivateKey(privateKeyPEM);\n                  }\n               }\n               else if (rqst instanceof CertificateRequest) {\n                  /*\n                   * The application may provide the DSA private key and\n                   * public key in the certificate.\n                   * AllJoyn stores the keys in the key store for future use.\n                   * If the application does not provide the private key, AllJoyn will\n                   * generate the DSA key pair.\n                   */\n                  if (sendBackKeys) {\n                     String certChainPEM = CLIENT_CERT_PEM;\n                     CertificateRequest certChainRqst = (CertificateRequest) rqst;\n                     certChainRqst.setCertificateChain(certChainPEM);\n                  }\n               }\n               else if (rqst instanceof VerifyRequest) {\n                  /*\n                   * with the certificate chain from the peer for the\n                   * application to verify.\n                   * The application has to option to verify the certificate chain\n                   * If the cert chain is validated and trusted then return true;\n                   * otherwise, return false.\n                   */\n               VerifyRequest verifyRqst = (VerifyRequest) rqst;\n               String certPEM = verifyRqst.getCertificateChain();\n            }\n         }\n         return true;\n\n      } catch (Exception ex) {\n          ex.printStackTrace();\n      }\n   }\n\n   public void completed(String authMechanism, String authPeer,\nboolean authenticated) {\n      if (!authenticated) {\n         System.out.println( Authentication failed. );\n      } else {\n         System.out.println( Authentication successful. );\n      }\n   }\n\n   private boolean sendBackKeys = true; /* toggle the send back keys */\n   /* the followings are same data to try out the ECDHE_ECDSA key exchange */\n\n   private static final String CLIENT_PK_PEM =  -----BEGIN\n      PRIVATE KEY-----  +\n       CkzgQdvZSOQMmqOnddsw0BRneCNZhioNMyUoJwec9rMAAAAA  +\n       -----END PRIVATE KEY----- ;\n   private static final String CLIENT_CERT_PEM =  -----BEGIN CERTIFICATE-----  +\n       AAAAAZ1LKGlnpVVtV4Sa1TULsxGJR9C53Uq5AH3fxqxJjNdYAAAAAAobbdvBKaw9\\n  +\n       eHox7o9fNbN5usuZw8XkSPSmipikYCPJAAAAAAAAAABiToQ8L3KZLwSCetlNJwfd\\n  +\n       bbxbo2x/uooeYwmvXbH2uwAAAABFQGcdlcsvhdRxgI4SVziI4hbg2d2xAMI47qVB\\n  +\n       ZZsqJAAAAAAAAAAAAAAAAAABYGEAAAAAAAFhjQABMa7uTLSqjDggO0t6TAgsxKNt\\n  +\n       +Zhu/jc3s242BE0drNFJAiGa/u6AX5qdR+7RFxVuqm251vKPgWjfwN2AesHrAAAA\\n  +\n       ANsNwJl8Z1v5jbqo077qdQIT6aM1jc+pKXdgNMk6loqFAAAAAA==\\n  +\n       -----END CERTIFICATE----- ;\n}  Code 46. Registering the authentication listener with ECDHE_ECDSAKeyXListener \nshows registering an AuthListener with the name ECDHE_ECDSAKeyXListener.  Code 46. Registering the authentication listener with ECDHE_ECDSAKeyXListener  BusAttachment mBus;\nmBus = new BusAttachment( myProgramName , BusAttachment.RemoteMessage.Receive);\n\n   ECDHE_PSKKeyXListener myAuthListener;\n   Status status = mBus.registerAuthListener( ALLJOYN_ECDHE_ECDSA ,\nmyAuthListener); if (status !=\nStatus.OK) { finish(); return;\n}  The default keystore listener  So far, we have not discussed where the keys exchanged during\nthe authentication process are stored. If we register the\nAuthListener using the two-parameter method, we are using\nthe default keystore listener with its default options.\nThis uses a default location for storing the keystore.\nThe name of the keystore is the same as the application\nname that was used when creating the new BusAttachment.\nThe default location for the keystore differs depending\non the operating system that is being used. The default\nlocation chosen is a location that the user has permission\nto read and write from.  For Windows XP, the file is in:  C:\\Documents and Settings\\ user_name \\.alljoyn_keystore\\ Application name   For Windows 7, the file is in:  C:\\Users\\ user_name \\.alljoyn_keystore\\ Application name   For Linux, the file is in:  /home/ user_name /.alljoyn_keystore/ Application name   The default location and name of the keystore file can be\nchanged by providing a third parameter. The third parameter\ncan be used to specify the location where the keystore is\nwritten. Note that the location provided as the third parameter\nwhen registering the AuthListener is appended to the location\nof the home folder for the OS being used. The code must\nhave read/write permissions to access that location.  Code 47. Overriding the default file location when registering an AuthListener  BusAttachment bus;\nbus = new BusAttachment( MyApp , BusAttachment.RemoteMessage.Receive);\nString strFilePath = File.separator +  foo  + File.separator +  fileName.ks ;\nStatus status = mBus.registerAuthListener( ALLJOYN_SRP_KEYX ,\n   mAuthListener,\n   strFilePath);  This places the file in the users home directory in a folder\nnamed foo. The file is called fileName.ks.   C:\\Documents and Settings\\ user_name \\foo\\fileName.ks  (Windows XP)  C:\\Users\\ user_name \\foo\\fileName.ks  (Windows 7)  /home/ user_name /foo/fileName.ks  (Linux)   NOTE:  The three-parameter option should be used when registering\nan authListener in Android (see  Security ).  Multiple applications can share a single keystore; however, the\ncode needs to know that the keystore is being shared between\nmultiple applications or it overrides changes made by other\napplications. To use a shared keystore you must specify that\nthe keystore is shared when registering the authListener.  Code 48. Registering AuthListeners with a shared keystore  BusAttachment bus;\nbus = new BusAttachment( MyApp , BusAttachment.RemoteMessage.Receive);\nString strFilePath = File.separator +  .alljoyn_keystore  + File.separator +\n\n    shared.ks ;\nStatus status = mBus.registerAuthListener( ALLJOYN_SRP_KEYX ,\n   mAuthListener,\n   strFilePath,\n   true);  Every application that wants to share the same keystore should\npoint to the same keystore file and set the isShared option to\ntrue when registering an  AuthListener .  Why would you want multiple applications to share a keystore file?\nThis allows you to set up a family of applications that authenticate\nas one. Once one of the applications has completed authentication,\nthen all of the applications can use the same set of keys.\nThis means that only one authentication request is needed,\neven though multiple applications use a secure interface.\nUnder the AllJoyn framework's default mode, authentication\nis done on an app-per-app basis, not as a family of applications.  AllJoyn debug log output  The AllJoyn framework has a built-in logging system for\ninvestigating AllJoyn-related issues. Only critical log output\nis displayed when using the AllJoyn Release mode.  To enable AllJoyn debugging three things must be done:   Set the OS Logging option (OS-specific).  Set the Debug Level for the module(s) of interest (on\nthe router or the application).  Set ER_DEBUG_* environment variable (only needed when\nlogging to  stderr ).   These can be accessed using the following method calls:  BusAttachment.useOSLogging (Boolean useOSLog );\nBusAttachment.setDebugLevel(String module, int level);\nBusAttachment.setLogLevels(String logEnv);\nBusAttachnent.setDaemonDebug(String module, int level);  Set OS-specific logging option  The  BusAttachment.useOSLogging  command results in different\nbehavior depending on what OS the AllJoyn code is running on,\nas shown in the following table.  OS-specific logging behavior     OS  True  False      Windows  Debugger Trace Log  stderr    Windows RT  Win RT Trace Log  Win RT File Log    Linux  stderr  stderr    Android  LogCat  stderr    Mac  stderr  stderr     For  BusAttachment.useOSLogging(true)  on Windows and Windows RT, see:    OutputDebugString function  (Windows)\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/aa363362(v=vs.85).aspx    For  BusAttachment.useOSLogging(false)  on Windows RT, a file named alljoyn.log\nwill be created in the user's  Documents  directory.    Set debug level for modules  The AllJoyn framework has a large number of modules, with new\nmodules being added as it continues to be developed. Several module\nnames of interest are:   ALL - print all modules  ALLJOYN_JAVA - trace log for the JNI layer of the Java Bindings  ALLJOYN - trace of AllJoyn method calls  ALLJOYN_OBJ - trace of AllJoyn object to name service calls  NS - the TCP name service   Each module can print out four debug levels:  High Level = 0b0001  Debug Messages = 0b0010  API Trace = 0b0100  Data Dump = 0b1000  As a general rule, you want a debug level and all the debug\noptions below that option. For example:  1 = \"High Level\"  3 = \"High Level\" and \"Debug Messages\"  7 = \"High Level\", \"Debug Messages\", and \"API trace\"  15 = \"High Level\", \"Debug Messages\", \"API trace\", and \"Data Dump\"  The following code would print the High Level log for ALL\nof the AllJoyn modules and the API trace and below log\nfor the ALLJOYN module:  BusAttachment.setDebugLevel( ALL , 1);\nBusAttachment.setDebugLevel( ALLJOYN , 7);  The same could be achieved using the following code:  BusAttachment.setLogLevels( ALL=1;ALLJOYN=7 );  If your application is using a separate AllJoyn router\nor it is using the built-in name discovery/advertisement\nservices, the logs from this part of the AllJoyn framework\nwill not output logs unless you use the following call:  BusAttachnent.setDaemonDebug( ALL , 7);  NOTE:  There is an error debug level that is always printed\nand cannot be turned off.  Set ER_DEBUG_* environment variable  When logging to stderr, an environment variable must also\nbe specified to obtain the debug log. This is a consequence\nof the AllJoyn logging system being written in C++.  Normally when using a C++ program the user would only need\nto specify the module they are interested in using environment\nvariables. For example:  export ER_DEBUG_ALLJOYN_OBJ=15  With Java you will generally use:\n* Linux\n   sh\n  export ER_DEBUG_ALL=15   Windows   bat\n  set ER_DEBUG_ALL=15  Log output  If everything is set up as expected you should be log output as follows:  ````\n6710.723 DEBUG  THREAD  external    ...n\\os\\windows\\Thread.cc:352 |\n   Thread::Join() thread is dead [replyTimer]\n6710.724 HL_DBG THREAD  external    ...n\\os\\windows\\Thread.cc:185 |\n   Thread::~Thread() [replyTimer,738e6b0] started:3 running:3 stopped:0\n6710.725 DEBUG  ALLJOYN_JAVA external   ...a\\jni\\alljoyn_java.cc:3942 |\n   JBusAttachment::Connect(): Taking Bus Attachment authentication listener change lock\n6710.742 DEBUG  ALLJOYN_JAVA external   ...a\\jni\\alljoyn_java.cc:4145 |\n   JBusAttachment::EnablePeerSecurity()\n6710.743 TRACE  ALLJOYN external    ...e\\src\\BusAttachment.cc:359 |\n   BusAttachment::TryConnect to tcp:addr=127.0.0.1,port=9956\n6710.744 HL_DBG ALLJOYN external    ...ows\\ClientTransport.cc:136 |\n   ClientTransport::Connect(): tcp:addr=127.0.0.1,port=9956\nInitialized winsock\n6710.764 TRACE  NETWORK external    ...n\\os\\windows\\Socket.cc:164 |\n   Socket(addrFamily = 2, type = 1, sockfd =  )\n6710.766 TRACE  NETWORK external    ...n\\os\\windows\\Socket.cc:188 |\n   Connect(sockfd = 612, remoteAddr = 127.0.0.1, remotePort = 9956)\n6711.827 HL_DBG ALLJOYN external    ...ows\\ClientTransport.cc:175 |\n   ClientTransport(): socket Connect() failed ER_CONN_REFUSED\n6711.828 TRACE  NETWORK external    ...n\\os\\windows\\Socket.cc:361 |\n   Close (sockfd = 612)\n6711.831 TRACE  ALLJOYN external    ...e\\src\\BusAttachment.cc:359 |\n   BusAttachment::TryConnect to null:\nUsing BundledRouter  \nThere are five columns for each log message printed out:\n\n1. Time stamp representing when the log was printed.\n2. The debug level.\n3. The AllJoyn module the message came from.\n4. Which thread the module was running on.\n5. Which line of source code printed the message  |  the debug message.\n\n## Android-Specific Considerations\n\n### UI thread vs. AllJoyn bus thread\n\nWhen Android starts a new activity, a thread is created that\ndraws all of the user interface elements on the screen.\nBy default, all code that is added to the activity also runs\nin the same thread. Android always expects the user interface\n(UI) to be responsive. If a function is called that takes too\nlong to process information, the application is terminated by\nAndroid simply because the UI was unresponsive.\n\nAllJoyn applications typically conform to the client/server model;\nthe application is either providing a service or requesting something\nfrom a service. The service could be on a remote device or on\nthe same device. There are no time guarantees when calling an\nAllJoyn method. For this reason, all calls to an AllJoyn method\nor signal must be done in a thread that is independent of the\nmain UI thread.\n\nThis could be done by creating a new thread each time you call\na signal or method associated with the AllJoyn framework.\nThis can result in many threads being created including all\nthe memory usage associated with each thread. If too many\nthreads are created, the application could quickly run out\nof memory and crash. This could easily happen if signals\nwere being used to constantly update something like a game.\n\nTo avoid using a separate thread for each AllJoyn call,\nwe suggest you create a Handler on a separate thread that\nqueues AllJoyn method and signal calls.\n\n### Using Handler Looper\n\nCreate an implementation of a Handler that takes a Looper\nas its initialization parameter.\n\n#### Code 49. BusHandler class that extends the Handler class\n\n```java\nclass BusHandler extends Handler {\n   public BusHandler(Looper looper) {\n      super(looper);\n   }\n\n   @Override\n   public void handleMessage(Message msg) {\n      switch (msg.what) {\n      default:\n         break;\n      }\n   }\n}  Now all of the AllJoyn method calls and signal calls can be\nplaced inside the switch statement found in the  handleMessage  method.  Almost all programs that use the AllJoyn framework need to\nimplement a connect case and a disconnect case, as well as a\ncase for each AllJoyn method, property, and signal.  To start the BusHandler, use the following code:  Code 50. Starting the BusHandler class  BusHandler mBusHandler;\nHandlerThread busThread = new HandlerThread( BusHandler );\nbusThread.start();\nmBusHandler = new BusHandler(busThread.getLooper());  The  /java/samples folder in the Android SDK\ncontains a large number of samples that all show how to\nuse the BusHandler.  Security  In the AllJoyn Java API, there are two  BusAttachment.registerAuthListener(...)  methods.\nOne takes two arguments, and the other takes three arguments.\nWhen registering the authentication listener, the one with\nthree arguments should be used. The third argument sets the\nname of the keystore. It is recommended to always set this\nto  getFileStreamPath(\"alljoyn_keystore\").getAbsolutePath() \nfor all Android programs.  Peer Permission Check  In Android's security model, each application must request\npermission to access certain system resources. For example, android.permission.READ_CONTACTS  is required to access\nthe contact information on an Android device.  In catering to the security model of Android, the AllJoyn framework\nallows the service to impose permission requirements on\nAllJoyn method/signal calls. If the service specifies the\npermission requirements on a call, the client must acquire\nthose permissions by declaring them in the  AndroidManifest.xml \nin order to invoke the call. If a client has not added the\nproper permissions to the  AndroidManifest.xml , the AllJoyn\nmethod/signal call made by the client is rejected. If it is\nan AllJoyn method call, the router sends back an error message (status = ER_ALLJOYN_ACCESS_PERMISSION_ERROR)  to the caller.\nMultiple permissions should be concatenated into a single\nstring using a semicolon (;) as the delimiter, for example:  android.permission.X;android.permission.Y  By using the access permission in the interface, we are\npreventing a client application from accessing data without\nalso requesting the same device permission level as the service.  IMPORTANT: \n   The peer permission check model only applies when\n   the service/client are on the same device. If the service\n   and client are on different devices, the peer permission\n   check will have no effect. The device-to-device trust model\n   should be based on Authentication.  Android's security model does not apply to other OSs. If the\n   AllJoyn framework is used to synch contact and calendar data\n   with a desktop computer, the computer is not expected to obtain\n   permission to read and write the calendar and contacts.\n   The application installed on the Android device that is\n   communicating with the computer would still be required to\n   have Android permissions to access the information of interest.  Code 51. Adding the @AccessPermission annotation for an AllJoyn Java interface  @BusInterface (name =  org.alljoyn.bus.addressbook )\npublic interface AddressBookInterface {\n   /*\n    * The AccessPermission annotation signifies that this function uses\n    * system resources that require system permission\n    *  android.permission.READ_CONTACTS . Thus\n    * the application should declare the required permissions in its\n    * manifest file. If there are more than one permission item,\n    * they should be separated by ';'.\n    */\n   @BusMethod(signature =  si , replySignature =  r )\n   @AccessPermission( android.permission.READ_CONTACTS )\n   public Contact getContact(String name, int userId) throws BusException;\n\n   /*\n    * the replySignature indicates that this BusMethod will return an\n    * array of structs.\n    */\n   @BusMethod(replySignature =  ar )\n   @AccessPermission( android.permission.READ_CONTACTS )\n   public NameId[] getAllContactNames() throws BusException;\n}  Bundled Router (Deprecated)  If you are using AllJoyn framework 2.6, the concept of bundled\nrouter is no longer present. A developer can still get all the\nfunctionality that was available with bundled daemon in\nAllJoyn 2.3.6 but there is no requirement to add the additional\nlibrary (bundle.jar) to the Android app or to use the extra\ncalls that were explicitly needed to use bundle router.\nHowever, the function call  org.alljoyn.bus.alljoyn.DaemonInit.PrepareDaemon(getApplicationContext());  is now used for an entirely different purpose as explained in Using ICE with the AllJoyn Framework .  Using ICE with the AllJoyn Framework  The AllJoyn framework does what it is supposed to do; wonderfully.\nHowever, it cannot control certain things like the network setup\nover which it talks. A common example is wireless isolation.\nWhat is wireless isolation?  Imagine yourself sitting in a coffee shop and wanting to play a\ngame with your friend that uses the AllJoyn framework. In a normal\nhome setup you would be connected to your home access point and\nthis would work seamlessly. In a coffee shop or public place the\nnetwork administrators set up the access points such that two peers\ncannot talk to each other directly. Things like multicast and\nbroadcast are disabled in the coffee shop to avoid bandwidth\nproblems for other users - something that could happen if a\nyoung college student were to set up his own peer-to-peer network\nin the coffee shop with his friends or use an application\n(not using the AllJoyn framework) which floods the network\nwith multicast/broadcast packets.  The philosophy of the AllJoyn framework is to make it unnecessary\nfor the developer to be aware of such network complexities and\nstill achieve what the AllJoyn framework originally delivers - easy\nservice discovery and connectivity without having to change\nanything depending on the network or platform. To overcome\nthe problem of wireless isolation, we added in a parallel\ntransport in the AllJoyn framework that we call ICE.\nICE makes sure that you are able to discover services/devices\nand connect to them even if the access point you are connected\nto does not allow this to happen directly through it.  ICE is not only a way to solve the wireless isolation problem,\nit also provides another means to detect proximity with other\ndevices to aid in service discovery. To do this ICE needs to\nknow the list of access points around you. It does this by\ntalking to the Android framework from your AllJoyn app.\nFor this reason you need to specify the call:  org.alljoyn.bus.alljoyn.DaemonInit.PrepareDaemon(getApplicationContext());  An ideal place to call this is just before you create a\nBusAttachment in your Android application. The application context\nis required so that the internal AllJoyn Java framework can\nget a list of access points around you by talking to the Android framework.  Permissions to Add to your AllJoyn Android App  Under the hood, the AllJoyn framework does a lot of different\nthings on different platforms for device discovery without\nmaking the developer aware of the complexities involved.\nOn Android, it requires that the developer of the app grant\nthe app a set of four permissions so that the AllJoyn discovery works seamlessly.  The two permissions below are required because traditionally\nthe AllJoyn framework uses multicast for device discovery and\nthe Android framework requires any app that intends to use\nmulticast to have these permissions.  uses-permission\nandroid:name= android.permission.INTERNET /uses-permission  uses-permission\nandroid:name= android.permission.CHANGE_WIFI_MULTICAST_STATE /uses-permission   The two permissions below are required when you do not want\nto worry about wireless isolation that may be present on the\nnetwork to which you are connected. These two permissions let\nthe AllJoyn framework deal with it using ICE. These permissions\nenable the AllJoyn framework to look for wireless access points\naround you and use this data to detect if you are in proximity\nto any other device.  uses-permission\nandroid:name= android.permission.ACCESS_WIFI_STATE /uses-permission  uses-permission\nandroid:name= android.permission.CHANGE_WIFI_STATE /uses-permission   ProGuard  ProGuard is one of the tools packaged with the Android SDK.\nProGuard is used to shrink, optimize, and obfuscate code when\nproducing a release version of an .apk file. After using ProGuard,\nthe resulting .apk is smaller and more difficult to reverse engineer.\nFor more information, see http://developer.android.com/guide/developing/tools/proguard.html.  Knowing the names of methods, interfaces, annotations, and\nclasses is important for the AllJoyn framework to operate\nproperly. If the code is passed through ProGuard the names\nwill be changed, annotations will be removed and AllJoyn code\nwill no longer function as expected. To use ProGuard, the\nproguard.cfg file must have additional options added.  Below is a sample proguard.cfg file that would be needed if\nwe wanted to use ProGuard with the Android Chat sample.\nThe  proguard.cfg  is based on the default file created\nwhen using an Android project. In the sample  proguard.cfg \nfile below, the text in the #REQUIRED FOR ALLJOYN TO FUNCTION\nsection is an example of what must be added.  Code 52. Sample proguard.cfg file  -optimizationpasses 5\n-dontusemixedcaseclassnames\n-dontskipnonpubliclibraryclasses\n-dontpreverify\n-verbose\n-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*\n\n#REQUIRED FOR ALLJOYN TO FUNCTION WHEN USED WITH PROGUARD\n#(NOTE: could use -keep class org.alljoyn.bus** {*;} but the\n# alljoyn samples use org.alljoyn.bus.samples so if you checked the .apk\n# obfuscated code would not be seen)\n-dontwarn org.alljoyn.bus.**\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class org.alljoyn.bus.annotation.** { *; }\n-keep class org.alljoyn.bus.ifaces.** { *; }\n-keep class org.alljoyn.bus.AnnotationBusException** { *; }\n-keep class org.alljoyn.bus.AuthListener** { *; }\n-keep class org.alljoyn.bus.BusAttachment** { *; }\n-keep class org.alljoyn.bus.BusException** { *; }\n-keep class org.alljoyn.bus.BusListener** { *; }\n-keep class org.alljoyn.bus.BusObject** { *; }\n-keep class org.alljoyn.bus.BusObjectListener** { *; }\n-keep class org.alljoyn.bus.ErrorReplyBusException** { *; }\n-keep class org.alljoyn.bus.InterfaceDescription** { *; }\n-keep class org.alljoyn.bus.IntrospectionListener** { *; }\n-keep class org.alljoyn.bus.KeyStoreListener** { *; }\n-keep class org.alljoyn.bus.MarshalBusException** { *; }\n-keep class org.alljoyn.bus.MessageContext** { *; }\n-keep class org.alljoyn.bus.MsgArg** { *; }\n-keep class org.alljoyn.bus.Mutable** { *; }\n-keep class org.alljoyn.bus.OnJoinSessionListener** { *; }\n-keep class org.alljoyn.bus.ProxyBusObject** { *; }\n-keep class org.alljoyn.bus.SecurityViolationListener** { *; }\n-keep class org.alljoyn.bus.SessionListener** { *; }\n-keep class org.alljoyn.bus.SessionOpts** { *; }\n-keep class org.alljoyn.bus.SessionPortListener** { *; }\n-keep class org.alljoyn.bus.SignalEmitter** { *; }\n-keep class org.alljoyn.bus.Signature** { *; }\n-keep class org.alljoyn.bus.Status** { *; }\n-keep class org.alljoyn.bus.Variant** { *; }\n-keep class org.alljoyn.bus.VariantTypeReference** { *; }\n#Keep all BusObjects\n-keep class * implements org.alljoyn.bus.BusObject { *; }\n-keepclassmembers class * implements org.alljoyn.bus.BusObject {*;}\n#------------------------------------------------------------------------------\n#USER NEEDS TO MODIFY WITH VALUES FROM THEIR APPLICATION - CHAT USED AS AN EXAMPLE\n#Need to keep all AllJoyn interfaces and classmembers of the AllJoyn interfaces\n-keep interface org.alljoyn.bus.sample.chat.ChatInterface\n-keepclassmembers interface org.alljoyn.bus.sample.chat.ChatInterface { *; }\n#Need to keep the signal methods\n-keepclassmembers class org.alljoyn.bus.sample.chat.AllJoynService {\npublic void Chat(java.lang.String);\n}\n#------------------------------------------------------------------------------\n-keep public class * extends android.app.Activity\n-keep public class * extends android.app.Application\n-keep public class * extends android.app.Service\n-keep public class * extends android.content.BroadcastReceiver\n-keep public class * extends android.content.ContentProvider\n-keep public class * extends android.app.backup.BackupAgentHelper\n-keep public class * extends android.preference.Preference\n-keep public class com.android.vending.licensing.ILicensingService\n\n-keepclasseswithmembernames class * {\n   native  methods ;\n}\n\n-keepclasseswithmembernames class * {\n   public  init (android.content.Context, android.util.AttributeSet);\n}\n\n-keepclasseswithmembernames class * {\n   public  init (android.content.Context, android.util.AttributeSet, int);\n}\n\n-keepclassmembers enum * {\n   public static **[] values();\n   public static ** valueOf(java.lang.String);\n}\n\n-keep class * implements android.os.Parcelable {\n   public static final android.os.Parcelable$Creator *;\n}",
            "title": "Writing Code"
        },
        {
            "location": "/develop/api-guide/core/java/#performance",
            "text": "Header compression  When a signal is repetitively emitted, the signal header\ncould end up being a significant portion of the data that\nis sent. This is especially true when the contents of the\nsignal are really small.  Header compression can be used to improve performance.\nSince setting up header compression is an expensive operation,\nit should not be used except for repetitive signals.  An example would be a game that wants to constantly update\nits player's positions. The same signal would be repetitively\nsent with the new player position. Header compression could\nbe used to reduce the size of the signal.  Code 53. Header compression  // Create the signal emitter and connect it with the SampleInterface class\nSignalEmitter emitter = new SignalEmitter(mySignalInterface,\n   SignalEmitter.GlobalBroadcast.On);\nemitter.setCompressHeader(true);  Shutting off discovery  When trying to transmit large amounts of data via Bluetooth,\ndiscovery can significantly slow down the transfer speed.\nIf the transmit time is a factor, it may be beneficial to stop\ndiscovery when sending the data.  It is good practice to shut off discovery when an interface\nhas been found even when using TCP/IP. Leaving discovery\nrunning could have an impact on battery life and network\nperformance since the routing node continues to access the\nradio to look for remote services.  Code 54. Shutting off Discovery  status = mBus.cancelFindName(SERVICE_NAME);\nif (status != Status.OK) {\n   finish();\n   return;\n}  Signal emitters  When setting up a SignalEmitter, you can set it up to broadcast:   Globally to clients only on the local device  Globally to all clients even off device  To a session  To a single destination   As a general rule, it is best to avoid signal emitters that\ndo not exist in the same session. This creates a large amount\nof network traffic. If you want the signal to be received by\nmultiple devices, it is best to set up a multipoint session\nand send the signal to all the devices in the session.\nThis reduces the network traffic by sending the signal to\ndestinations that have registered",
            "title": "Performance"
        },
        {
            "location": "/develop/api-guide/core/objc/",
            "text": "Core API Guide - Objective-C\n\n\nCreate a New Xcode iOS Project\n\n\n\n\nOpen Xcode by selecting it from the Applications folder\nin the Dock at the bottom of the screen.\n\n\nSelect \nFile \n New \n Project...\n.\n\n\nIn the left menu, under iOS, select \nApplication\n\nand then select \nSingle View Application\n from the\nlist of possible application types.\n\n\nClick \nNext\n and fill out the name of the new project\nin the \nProduct Name\n field, select \niPhone\n as the\n\nDevice Family\n, and select the \nUse Automatic Reference\nCounting\n and \nUse Storyboards\n options.\n\n\nClick \nNext\n, select the parent folder for your new\nproject, and then select \nCreate\n. You now should see\nyour HelloAllJoynWorld project loaded in Xcode. You are\nready to begin your journey into AllJoyn\n development.\n\n\n\n\nDefine the AllJoyn Object Model\n\n\nTo offer a service that does some useful work for a client,\nyou must define and implement the service's interface.\n\n\nFor this example, we will create a simple interface with a\nsingle method that will concatenate two strings and return\nthe result. The AllJoyn for iOS SDK comes with a utility\nthat will generate most of the boilerplate code for your\nservice objects. All you need to do is provide the Objective-C\ncode to fill in the implementation of each member exposed by\nthe interfaces of your service's bus object.\n\n\nBefore we can run the code generator, though, we need to\ncompose a representation of the service, or bus object, in XML,\nwhich is the format the code generator expects. As a side note,\nthe format of the XML conforms to the standard used by D-Bus.\nThe AllJoyn framework implements the D-Bus specification, and\nhence is compatible with other D-Bus-enabled applications.\nFor more information on D-Bus, you can look up the latest\nDBus specifications online.\n\n\nIn your HelloAllJoynWorld Xcode project, add a new file called\n\nSimpleAllJoynObjectModel.xml\n that will contain a description\nof the interface your service will support.\n\n\n\n\nRight-click on the \nHelloAllJoynWorld group\n folder in the\nproject \nNavigator\n on the right side of the Xcode view.\n\n\nSelect \nNew File...\n from the menu to bring up the template chooser.\n\n\nUnder iOS, select the \nOther\n template group and then\nselect \nEmpty\n in the list of available templates. Click \nNext\n to proceed.\n\n\nType in the name of your new file, \nSampleAllJoynObjectModel.xml\n.\n\n\nClick \nCreate\n to create your new XML file and add it to\nthe Xcode project.\n\n\nSelect the \nSampleAllJoynObjectModel.xml\n file in the\nproject \nNavigator\n, and add the following XML text:\n\n\n\n\nxml\n   \nxml\n\n      \nnode name=\"org/alljoyn/Bus/sample\"\n\n         \nannotation name=\"org.alljoyn.lang.objc\" value=\"SampleObject\"/\n\n         \ninterface name=\"org.alljoyn.bus.sample\"\n\n            \nannotation name=\"org.alljoyn.lang.objc\" value=\"SampleObjectDelegate\"/\n\n            \nannotation name=\"org.alljoyn.lang.objc.announced\" value=\"true\"/\n\n            \nmethod name=\"Concatentate\"\n\n               \narg name=\"str1\" type=\"s\" direction=\"in\"\n\n                  \nannotation name=\"org.alljoyn.lang.objc\" value=\"concatenateString:\"/\n\n               \n/arg\n\n               \narg name=\"str2\" type=\"s\" direction=\"in\"\n\n                  \nannotation name=\"org.alljoyn.lang.objc\" value=\"withString:\"/\n\n               \n/arg\n\n               \narg name=\"outStr\" type=\"s\" direction=\"out\"/\n\n            \n/method\n\n         \n/interface\n\n      \n/node\n\n   \n/xml\n\n\nYou now have a description of the bus object that your service\nwill expose to its clients. Let's go line by line through the\nXML to build an understanding of the format and how it describes\nour bus object.\n\n\nxml\n\n\n\n\n\nThe first line, shown above, is standard for all XML documents.\n\n\nnode name=\norg/alljoyn/Bus/sample\n\n\n\n\n\nThe second line declares an element named \"node\" which corresponds\nwith the bus object our service will expose. A name attribute\non the node element defines the object path. In the D-Bus XML format,\nnode elements contain interface elements that can contain method,\nproperty and signal elements. Node elements may also contain\nother child node elements, but let's keep it simple for now.\n\n\nannotation name=\norg.alljoyn.lang.objc\n value=\nSampleObject\n/\n\n\n\n\n\nThe next line declares an annotation element. Annotations are\nused to store metadata about a node, interface, method, signal\nor property element. Annotations are name-value pairs that\ncan contain virtually any data. In the context of the AllJoyn\nframework for iOS, annotations named \"org.alljoyn.lang.objc\"\nare used to give the code generator hints as far as naming\nis concerned. In this instance, the annotation element gives\nthe code generator a hint on what to name the object at\npath /org/alljoyn/Bus/sample. The annotation tells the code\ngenerator to give the object a friendly name of \"SampleObject\"\nin any Objective-C code emitted.\n\n\ninterface name=\norg.alljoyn.bus.sample\n\n\nannotation name=\norg.alljoyn.lang.objc\n value=\nSampleObjectDelegate\n/\n\n\nannotation name=\norg.alljoyn.lang.objc.announced\n value=\ntrue\n/\n\n\n\n\n\nOn the above lines, an interface element named org.alljoyn.bus.sample\nis created. Interface elements contain method, signal and\nproperty elements, as well as annotation elements.\n\n\nThe first annotation tells the code generator to create an Objective-C\nprotocol for the interface and name it SampleObjectDelegate.\nAll interfaces on bus objects are implemented in Objective-C\nas protocols.\n\n\nThe second annotation tells the code generator that the objects implementing\nthis interface must be announced through the About discovery mechanism. The code\ngenerator will generate the necessary code to make this happen.\n\n\nmethod name=\nConcatentate\n\n    \narg name=\nstr1\n type=\ns\n direction=\nin\n\n        \nannotation name=\norg.alljoyn.lang.objc\n value=\nconcatenateString:\n/\n\n    \n/arg\n\n    \narg name=\nstr2\n type=\ns\n direction=\nin\n\n        \nannotation name=\norg.alljoyn.lang.objc\n value=\nwithString:\n/\n\n    \n/arg\n\n    \narg name=\noutStr\n type=\ns\n direction=\nout\n/\n\n\n/method\n\n\n\n\n\nThe final lines in the XML file shown above describe a method\nnamed Concatenate that takes two strings as arguments and\nreturns one string. A method element can contain 0 to n arg\nchild elements. Each arg element has three attributes:\n\n\n\n\nName\n - The name of the argument.\n\n\nType\n - The type of the element. Per the D-Bus specification,\ndata types are expressed as a string of one or more letters,\ncalled a signature. The letter \"s\" signifies a string data type.\n\n\nDirection\n - Allowed values are \"in\" or \"out\", corresponding\nto input and output parameters respectively.\n\n\n\n\nThe D-Bus interface description format favors a C language style\nfor declaring methods, with a name for a method followed by\nseveral input and output parameters, each with a parameter name.\nObjective-C, however, does not use this syntax when declaring\na method, or more accurately in Objective-C parlance, a message.\nThe message takes the form of a selector, with the complete\nname of the message interspersed with its parameters. Note the\ndifference below:\n\n\nvoid ConcatenateString(in String str1, in String str2, out String outStr);\n\nNSString *concatenateString:(NSString *)str1 withString:(NSString *)str2;\n\n\n\n\nAnnotations help the code generator create message declarations\nthat appeal to our Objective-C sense of good coding style.\nThe arg elements contain an annotation element that specifies\npart of the selector associated with that argument. By processing\nall the arg elements and their child annotations, the code generator\ncan emit the complete selector for the message.\n\n\nBuild and Configure the Code Generator\n\n\nNow that you have familiarized yourself with the D-Bus XML format,\nit is time to generate the code that will allow us to create an\nObjective-C object that you can use in your application.\nThe AllJoynCodeGenerator project is located at the following path:\n\n\nAllJoyn SDK Root\n/alljoyn_objc/AllJoynCodeGenerator\n\n\n\n\nNavigate to the above directory in Finder and double-click\nthe \nAllJoynCodeGenerator.xcodeproj\n file to launch Xcode\nand load the project. In Xcode, select \nProduct \n Build\n to\nbuild the AllJoyn code generator executable. Your new executable\nis now ready for use, and is located in the following directory:\n\n\nAllJoyn SDK Root\n/alljoyn_objc/bin\n\n\n\n\nNow return to your \nHelloAllJoynWorld Xcode\n project, so\nthat you may configure a target and a scheme in Xcode that\nwill launch the code generator and pass the \nSampleAllJoynObjectModel.xml\n\nfile to it.\n\n\n\n\nSelect the HelloAllJoynWorld root node in the \nProject Navigator\n\nview, displayed in the left pane in Xcode, and then click\n\nAdd Target\n located at the bottom of the middle pane.\n\n\nSelect \nOther\n in the OS X list on the left side of the\ndialog and choose the \nExternal Build System\n type for\nyour new target. Click \nNext\n.\n\n\nType \nGenerate Code\n into the \nProduct Name\n field and\nclick \nFinish\n to create your new target and its accompanying scheme.\n\n\nSelect the \nGenerate Code\n target in the list of targets,\nand select the \nInfo\n tab at the top of the middle pane in Xcode.\n\n\nIn the \nBuild Tool\n text field for the \"Generate Code\"\ntarget, enter the full path to your \nAllJoynCodeGenerator\n\nbinary, which should be located in your \nALLJOYN_SDK_ROOT\n/alljoyn_objc/bin\n folder.\n\n\nIn the \nArguments\n text field for the \"Generate Code\"\ntarget, enter the full path to your \nSampleAllJoynObjectModel.xml\n\nfile followed by a space and then \nSampleObject\n, as follows:\n\n\n\n\nsh\n   $(SOURCE_ROOT)/HelloAllJoynWorld/SampleAllJoynObjectModel.xml SampleObject\n\n7. Select the \nGenerate Code\n scheme and set it to your active scheme.\n8. Click \nProduct \n Build\n and the code generator should\nsuccessfully generate your SampleObject code. Add the new files\nto your project by right-clicking on the \nHelloAllJoynWorld\n\ngroup and selecting \nAdd Files To HelloAllJoynWorld\n.\n9. Select the following files and click \nAdd\n:\n\n\nsh\n   AJNSampleObject.h\n   AJNSampleObject.mm\n   SampleObject.h\n   SampleObject.m\n\n\nCongratulations! You now have a skeleton Objective-C implementation\nof your sample AllJoyn bus object.\n\n\nTake a look at the generated code files. As you can see, the\ncode generator takes care of the implementation of most of\nthe boilerplate you would normally need to create by hand\nto work with the AllJoyn C++ API. Also note that the code\nin \nAJNSampleObject.mm\n includes C++ code that interoperates\nwith the Objective-C code contained in \nSampleObject.h/.m\n.\nBy declaring and implementing the C++ classes only within\nthe \nAJNSampleObject.mm\n file and not referring to any C++\nclasses in the header file, the code generator insulates your\napp's code from the AllJoyn C++ API. In this manner, the rest\nof your app can remain as pure Objective-C, rather than forcing\nyou to move your entire project's code to Objective-C++.\n\n\nYour implementation of the logic for \nSampleObject::concatenateString:withString:\n\nshould reside in the \nSampleObject.m\n. You normally should\nnot need to change the code in the \nAJN*.h/.mm\n files in order\nto implement your application.\n\n\nConfigure the Build Settings\n\n\nNow you must configure the Xcode project to successfully\ncompile and link your app.\n\n\n\n\nMake sure you know the location of the AllJoyn SDK folder.\nThe AllJoyn SDK folder contains your build, services, and\nalljoyn_objc folders.\n\n\nFollow the directions in the README file in the AllJoyn SDK\nfolder to compile openssl for iOS using Xcode.\n\n\nOpen Xcode, open your project, and select the root of the\ntree in \nProject Navigator\n. Then select the app's target under \nTargets\n.\n\n\nSelect the \nBuild Settings\n tab for the app target.\nClick the \nAll\n option at the top of the list.\n\n\nAt the top of the \nBuild Settings\n list, click\n\nArchitectures\n and then select \nOther...\n.\n\n\nClick the \n+\n sign in the window that appears and add\n\narmv7\n, then close the window.\n\n\nSet \nBuild Active Architecture Only\n to \nYes\n.\n\n\nScroll down to the \nLinking\n section, and set \nOther Linker Flags\n\nto the following:\n   \nsh\n   -lalljoyn -lajrouter -lBundledRouter.o -lssl -lcrypto\n\n\nScroll down the list of settings until you see the\n\nSearch Paths\n group.\n\n\nDouble-click the \nHeader Search Paths\n field and enter the following:\n   \nsh\n   \"$(SRCROOT)/../alljoyn- sdk/\n   build/darwin/arm/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/ cpp/inc\"\n   \"$(SRCROOT)/../alljoyn- sdk/\n   build/darwin/arm/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/ cpp/inc/alljoyn\"\n\n\nDouble-click the \nLibrary Search Paths\n field and enter the following:\n   \nsh\n   $(inherited) \"$(SRCROOT)/../alljoyn- sdk/\n   build/darwin/arm/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/ cpp/lib\"\n   \"$(SRCROOT)/../alljoyn-sdk/common/crypto/openssl/openssl-\n   1.01/build/$(CONFIGURATION)-$(PLATFORM_NAME)\n\n\nScroll down in the \nBuild Settings\n table until you see\nthe \nApple LLVM compiler 3.1 - Language\n group.\n\n\nSet \nEnable C++ Exceptions\n to \nNo\n.\n\n\nSet \nEnable C++ Runtime Types\n to \nNo\n.\n\n\nSet the \nOther C Flags\n field for Debug to the following:\n   \nsh\n   -DQCC_OS_GROUP_POSIX -DQCC_OS_DARWIN\n\n\nSet the \nOther C Flags\n field for Release to the following:\n   \nsh\n   -DNS_BLOCK_ASSERTIONS=1 -DQCC_OS_GROUP_POSIX -DQCC_OS_DARWIN\n\n\nSelect the \nBuild Phases\n tab.\n\n\nExpand the \nLink Binary With Libraries\n group and click\nthe \n+\n sign at the lower left corner. A dialog will appear.\n\n\nSelect the \nSystemConfiguration.framework\n file.\n\n\nClick the \n+\n button again and add one last library\nto link against, if it is not already included: \nlibstdc++.dylib\n.\n\n\nEnter \"std\" into the search text field to view only the\nstandard template library binaries. Select the following\nfile from the list: \nlibstdc++.dylib\n.\n\n\nCreate a group to hold the AllJoyn framework by right-clicking\nthe \nHelloAllJoynWorld\n group in the \nProject Navigator\n\ntree and selecting \nNew Group\n from the menu.\n\n\nEnter \"AllJoynFramework\" to give your new group a pertinent name.\n\n\nSelect the newly-created group \"AllJoynFramework\", and\nchoose \nAdd Files...\n.\n\n\nNavigate to the following folder:\n   \nsh\n   \nALLJOYN_SDK_ROOT\n/alljoyn_objc/AllJoynFramework/AllJoynFramework\n\n\nSelect all the \n.h/.m*\n files in the directory, and\nbe sure to uncheck \nCopy items into destination group's folder\n,\nand make sure your HelloAllJoynWorld target is checked in\nthe \nAdd to targets\n list.\n\n\nClick \nAdd\n to add the AllJoyn Objective-c framework\nto your AllJoynFramework group in the project.\n\n\nSelect \nProduct \n Build\n from the Xcode main menu.\nYour project should build successfully. Congratulations.\n\n\n\n\nNote that there is a template project located in the following\nfolder that has the above configuration preloaded for you.\nCheck it out at:\n\n\nALLJOYN_SDK_ROOT\n/alljoyn_objc/samples/iOS/AllJoyn iOS Project Template\n\n\n\n\nThis is a good starting point for any applications you may\nwish to build. Open the Xcode project for the above template\nand examine the source files within. Allow some time to examine\nthe README file included with this project, as it contains\ninformation on the files included in the project.",
            "title": "Objc"
        },
        {
            "location": "/develop/api-guide/core/objc/#core-api-guide-objective-c",
            "text": "",
            "title": "Core API Guide - Objective-C"
        },
        {
            "location": "/develop/api-guide/core/objc/#create-a-new-xcode-ios-project",
            "text": "Open Xcode by selecting it from the Applications folder\nin the Dock at the bottom of the screen.  Select  File   New   Project... .  In the left menu, under iOS, select  Application \nand then select  Single View Application  from the\nlist of possible application types.  Click  Next  and fill out the name of the new project\nin the  Product Name  field, select  iPhone  as the Device Family , and select the  Use Automatic Reference\nCounting  and  Use Storyboards  options.  Click  Next , select the parent folder for your new\nproject, and then select  Create . You now should see\nyour HelloAllJoynWorld project loaded in Xcode. You are\nready to begin your journey into AllJoyn  development.",
            "title": "Create a New Xcode iOS Project"
        },
        {
            "location": "/develop/api-guide/core/objc/#define-the-alljoyn-object-model",
            "text": "To offer a service that does some useful work for a client,\nyou must define and implement the service's interface.  For this example, we will create a simple interface with a\nsingle method that will concatenate two strings and return\nthe result. The AllJoyn for iOS SDK comes with a utility\nthat will generate most of the boilerplate code for your\nservice objects. All you need to do is provide the Objective-C\ncode to fill in the implementation of each member exposed by\nthe interfaces of your service's bus object.  Before we can run the code generator, though, we need to\ncompose a representation of the service, or bus object, in XML,\nwhich is the format the code generator expects. As a side note,\nthe format of the XML conforms to the standard used by D-Bus.\nThe AllJoyn framework implements the D-Bus specification, and\nhence is compatible with other D-Bus-enabled applications.\nFor more information on D-Bus, you can look up the latest\nDBus specifications online.  In your HelloAllJoynWorld Xcode project, add a new file called SimpleAllJoynObjectModel.xml  that will contain a description\nof the interface your service will support.   Right-click on the  HelloAllJoynWorld group  folder in the\nproject  Navigator  on the right side of the Xcode view.  Select  New File...  from the menu to bring up the template chooser.  Under iOS, select the  Other  template group and then\nselect  Empty  in the list of available templates. Click  Next  to proceed.  Type in the name of your new file,  SampleAllJoynObjectModel.xml .  Click  Create  to create your new XML file and add it to\nthe Xcode project.  Select the  SampleAllJoynObjectModel.xml  file in the\nproject  Navigator , and add the following XML text:   xml\n    xml \n       node name=\"org/alljoyn/Bus/sample\" \n          annotation name=\"org.alljoyn.lang.objc\" value=\"SampleObject\"/ \n          interface name=\"org.alljoyn.bus.sample\" \n             annotation name=\"org.alljoyn.lang.objc\" value=\"SampleObjectDelegate\"/ \n             annotation name=\"org.alljoyn.lang.objc.announced\" value=\"true\"/ \n             method name=\"Concatentate\" \n                arg name=\"str1\" type=\"s\" direction=\"in\" \n                   annotation name=\"org.alljoyn.lang.objc\" value=\"concatenateString:\"/ \n                /arg \n                arg name=\"str2\" type=\"s\" direction=\"in\" \n                   annotation name=\"org.alljoyn.lang.objc\" value=\"withString:\"/ \n                /arg \n                arg name=\"outStr\" type=\"s\" direction=\"out\"/ \n             /method \n          /interface \n       /node \n    /xml  You now have a description of the bus object that your service\nwill expose to its clients. Let's go line by line through the\nXML to build an understanding of the format and how it describes\nour bus object.  xml   The first line, shown above, is standard for all XML documents.  node name= org/alljoyn/Bus/sample   The second line declares an element named \"node\" which corresponds\nwith the bus object our service will expose. A name attribute\non the node element defines the object path. In the D-Bus XML format,\nnode elements contain interface elements that can contain method,\nproperty and signal elements. Node elements may also contain\nother child node elements, but let's keep it simple for now.  annotation name= org.alljoyn.lang.objc  value= SampleObject /   The next line declares an annotation element. Annotations are\nused to store metadata about a node, interface, method, signal\nor property element. Annotations are name-value pairs that\ncan contain virtually any data. In the context of the AllJoyn\nframework for iOS, annotations named \"org.alljoyn.lang.objc\"\nare used to give the code generator hints as far as naming\nis concerned. In this instance, the annotation element gives\nthe code generator a hint on what to name the object at\npath /org/alljoyn/Bus/sample. The annotation tells the code\ngenerator to give the object a friendly name of \"SampleObject\"\nin any Objective-C code emitted.  interface name= org.alljoyn.bus.sample  annotation name= org.alljoyn.lang.objc  value= SampleObjectDelegate /  annotation name= org.alljoyn.lang.objc.announced  value= true /   On the above lines, an interface element named org.alljoyn.bus.sample\nis created. Interface elements contain method, signal and\nproperty elements, as well as annotation elements.  The first annotation tells the code generator to create an Objective-C\nprotocol for the interface and name it SampleObjectDelegate.\nAll interfaces on bus objects are implemented in Objective-C\nas protocols.  The second annotation tells the code generator that the objects implementing\nthis interface must be announced through the About discovery mechanism. The code\ngenerator will generate the necessary code to make this happen.  method name= Concatentate \n     arg name= str1  type= s  direction= in \n         annotation name= org.alljoyn.lang.objc  value= concatenateString: / \n     /arg \n     arg name= str2  type= s  direction= in \n         annotation name= org.alljoyn.lang.objc  value= withString: / \n     /arg \n     arg name= outStr  type= s  direction= out /  /method   The final lines in the XML file shown above describe a method\nnamed Concatenate that takes two strings as arguments and\nreturns one string. A method element can contain 0 to n arg\nchild elements. Each arg element has three attributes:   Name  - The name of the argument.  Type  - The type of the element. Per the D-Bus specification,\ndata types are expressed as a string of one or more letters,\ncalled a signature. The letter \"s\" signifies a string data type.  Direction  - Allowed values are \"in\" or \"out\", corresponding\nto input and output parameters respectively.   The D-Bus interface description format favors a C language style\nfor declaring methods, with a name for a method followed by\nseveral input and output parameters, each with a parameter name.\nObjective-C, however, does not use this syntax when declaring\na method, or more accurately in Objective-C parlance, a message.\nThe message takes the form of a selector, with the complete\nname of the message interspersed with its parameters. Note the\ndifference below:  void ConcatenateString(in String str1, in String str2, out String outStr);\n\nNSString *concatenateString:(NSString *)str1 withString:(NSString *)str2;  Annotations help the code generator create message declarations\nthat appeal to our Objective-C sense of good coding style.\nThe arg elements contain an annotation element that specifies\npart of the selector associated with that argument. By processing\nall the arg elements and their child annotations, the code generator\ncan emit the complete selector for the message.",
            "title": "Define the AllJoyn Object Model"
        },
        {
            "location": "/develop/api-guide/core/objc/#build-and-configure-the-code-generator",
            "text": "Now that you have familiarized yourself with the D-Bus XML format,\nit is time to generate the code that will allow us to create an\nObjective-C object that you can use in your application.\nThe AllJoynCodeGenerator project is located at the following path:  AllJoyn SDK Root /alljoyn_objc/AllJoynCodeGenerator  Navigate to the above directory in Finder and double-click\nthe  AllJoynCodeGenerator.xcodeproj  file to launch Xcode\nand load the project. In Xcode, select  Product   Build  to\nbuild the AllJoyn code generator executable. Your new executable\nis now ready for use, and is located in the following directory:  AllJoyn SDK Root /alljoyn_objc/bin  Now return to your  HelloAllJoynWorld Xcode  project, so\nthat you may configure a target and a scheme in Xcode that\nwill launch the code generator and pass the  SampleAllJoynObjectModel.xml \nfile to it.   Select the HelloAllJoynWorld root node in the  Project Navigator \nview, displayed in the left pane in Xcode, and then click Add Target  located at the bottom of the middle pane.  Select  Other  in the OS X list on the left side of the\ndialog and choose the  External Build System  type for\nyour new target. Click  Next .  Type  Generate Code  into the  Product Name  field and\nclick  Finish  to create your new target and its accompanying scheme.  Select the  Generate Code  target in the list of targets,\nand select the  Info  tab at the top of the middle pane in Xcode.  In the  Build Tool  text field for the \"Generate Code\"\ntarget, enter the full path to your  AllJoynCodeGenerator \nbinary, which should be located in your  ALLJOYN_SDK_ROOT /alljoyn_objc/bin  folder.  In the  Arguments  text field for the \"Generate Code\"\ntarget, enter the full path to your  SampleAllJoynObjectModel.xml \nfile followed by a space and then  SampleObject , as follows:   sh\n   $(SOURCE_ROOT)/HelloAllJoynWorld/SampleAllJoynObjectModel.xml SampleObject \n7. Select the  Generate Code  scheme and set it to your active scheme.\n8. Click  Product   Build  and the code generator should\nsuccessfully generate your SampleObject code. Add the new files\nto your project by right-clicking on the  HelloAllJoynWorld \ngroup and selecting  Add Files To HelloAllJoynWorld .\n9. Select the following files and click  Add :  sh\n   AJNSampleObject.h\n   AJNSampleObject.mm\n   SampleObject.h\n   SampleObject.m  Congratulations! You now have a skeleton Objective-C implementation\nof your sample AllJoyn bus object.  Take a look at the generated code files. As you can see, the\ncode generator takes care of the implementation of most of\nthe boilerplate you would normally need to create by hand\nto work with the AllJoyn C++ API. Also note that the code\nin  AJNSampleObject.mm  includes C++ code that interoperates\nwith the Objective-C code contained in  SampleObject.h/.m .\nBy declaring and implementing the C++ classes only within\nthe  AJNSampleObject.mm  file and not referring to any C++\nclasses in the header file, the code generator insulates your\napp's code from the AllJoyn C++ API. In this manner, the rest\nof your app can remain as pure Objective-C, rather than forcing\nyou to move your entire project's code to Objective-C++.  Your implementation of the logic for  SampleObject::concatenateString:withString: \nshould reside in the  SampleObject.m . You normally should\nnot need to change the code in the  AJN*.h/.mm  files in order\nto implement your application.",
            "title": "Build and Configure the Code Generator"
        },
        {
            "location": "/develop/api-guide/core/objc/#configure-the-build-settings",
            "text": "Now you must configure the Xcode project to successfully\ncompile and link your app.   Make sure you know the location of the AllJoyn SDK folder.\nThe AllJoyn SDK folder contains your build, services, and\nalljoyn_objc folders.  Follow the directions in the README file in the AllJoyn SDK\nfolder to compile openssl for iOS using Xcode.  Open Xcode, open your project, and select the root of the\ntree in  Project Navigator . Then select the app's target under  Targets .  Select the  Build Settings  tab for the app target.\nClick the  All  option at the top of the list.  At the top of the  Build Settings  list, click Architectures  and then select  Other... .  Click the  +  sign in the window that appears and add armv7 , then close the window.  Set  Build Active Architecture Only  to  Yes .  Scroll down to the  Linking  section, and set  Other Linker Flags \nto the following:\n    sh\n   -lalljoyn -lajrouter -lBundledRouter.o -lssl -lcrypto  Scroll down the list of settings until you see the Search Paths  group.  Double-click the  Header Search Paths  field and enter the following:\n    sh\n   \"$(SRCROOT)/../alljoyn- sdk/\n   build/darwin/arm/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/ cpp/inc\"\n   \"$(SRCROOT)/../alljoyn- sdk/\n   build/darwin/arm/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/ cpp/inc/alljoyn\"  Double-click the  Library Search Paths  field and enter the following:\n    sh\n   $(inherited) \"$(SRCROOT)/../alljoyn- sdk/\n   build/darwin/arm/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/ cpp/lib\"\n   \"$(SRCROOT)/../alljoyn-sdk/common/crypto/openssl/openssl-\n   1.01/build/$(CONFIGURATION)-$(PLATFORM_NAME)  Scroll down in the  Build Settings  table until you see\nthe  Apple LLVM compiler 3.1 - Language  group.  Set  Enable C++ Exceptions  to  No .  Set  Enable C++ Runtime Types  to  No .  Set the  Other C Flags  field for Debug to the following:\n    sh\n   -DQCC_OS_GROUP_POSIX -DQCC_OS_DARWIN  Set the  Other C Flags  field for Release to the following:\n    sh\n   -DNS_BLOCK_ASSERTIONS=1 -DQCC_OS_GROUP_POSIX -DQCC_OS_DARWIN  Select the  Build Phases  tab.  Expand the  Link Binary With Libraries  group and click\nthe  +  sign at the lower left corner. A dialog will appear.  Select the  SystemConfiguration.framework  file.  Click the  +  button again and add one last library\nto link against, if it is not already included:  libstdc++.dylib .  Enter \"std\" into the search text field to view only the\nstandard template library binaries. Select the following\nfile from the list:  libstdc++.dylib .  Create a group to hold the AllJoyn framework by right-clicking\nthe  HelloAllJoynWorld  group in the  Project Navigator \ntree and selecting  New Group  from the menu.  Enter \"AllJoynFramework\" to give your new group a pertinent name.  Select the newly-created group \"AllJoynFramework\", and\nchoose  Add Files... .  Navigate to the following folder:\n    sh\n    ALLJOYN_SDK_ROOT /alljoyn_objc/AllJoynFramework/AllJoynFramework  Select all the  .h/.m*  files in the directory, and\nbe sure to uncheck  Copy items into destination group's folder ,\nand make sure your HelloAllJoynWorld target is checked in\nthe  Add to targets  list.  Click  Add  to add the AllJoyn Objective-c framework\nto your AllJoynFramework group in the project.  Select  Product   Build  from the Xcode main menu.\nYour project should build successfully. Congratulations.   Note that there is a template project located in the following\nfolder that has the above configuration preloaded for you.\nCheck it out at:  ALLJOYN_SDK_ROOT /alljoyn_objc/samples/iOS/AllJoyn iOS Project Template  This is a good starting point for any applications you may\nwish to build. Open the Xcode project for the above template\nand examine the source files within. Allow some time to examine\nthe README file included with this project, as it contains\ninformation on the files included in the project.",
            "title": "Configure the Build Settings"
        },
        {
            "location": "/develop/api-guide/core/auto-ping/",
            "text": "Introduction\n\n\nAbout Auto-Pinger\n\n\nFrom AllJoyn\n 14.06 onwards,the Ping API allows applications\nto determine whether a remote peer is still up or not. This puts\na burden on the applications however, as they have to take the\ninitiative to do the pinging. Moreover, applications are often\ninterested in an up-to-date state of all remote peers rather\nthan a snapshot view.\n\n\nTo solve this problem, the Auto-Pinger (introduced in R14.12) periodically pings\na supplied list of peers on the application's behalf and notifies the\napplication when they become available or leave.\n\n\nThe Auto-Pinger API is currently only available in the C++ language binding of\nAllJoyn Core.\n\n\nGoal\n\n\nThe Auto-Pinger supplies the application up-to-date information\non which peers are present and which aren't.\n\n\nUsage\n\n\nUsage Details\n\n\nIn many cases, applications will want to handle the presence management of\nsimilar peers (say, all peers with which the application has an ongoing session)\nin a similar way. The AutoPinger class tries to facilitate this with the concept\nof a Ping Group.\n\n\nWhen an AutoPinger instance is created, the application first has to define the\napplicable Ping Groups. Later on, when peers are discovered, the application\ncan add them to one or more Ping Groups (either by unique bus name or by\nwell-known name). The AutoPinger will then periodically perform a \nPing()\n call\nto all peers in all Ping Groups.\n\n\nA Ping Group has the following characteristics:\n\n\n\n\nit is identified with a name (a string).\n\n\nit has an associated \nPingListener\n. This listener object is used to inform\n    the application about changes in the presence of peers, via the\n    \nDestinationLost\n and \nDestinationFound\n callbacks.\n\n\nit has a configurable ping interval. The ping interval is the period with\n    which all members of the Ping Group will be periodically pinged.\n\n\n\n\nThe Ping Group concept offers some advantages:\n\n\n\n\nit allows several independent modules in the same application to reuse the\n    same AutoPinger object: by choosing different group names and installing\n    different listeners, the various modules don't interfere with each other's\n    presence logic.\n\n\nit is convenient to treat many peers in the same way: the application can\n    increase or decrease the ping frequency of a complete group with a single\n    API call. For example, when the application's UI is showing a list of active\n    peers, one could reduce the ping interval for the corresponding Ping Group\n    to show better responsiveness towards the user. When the application no\n    longer displays the screen, the ping interval can be increased again.\n\n\n\n\nThe Auto-Pinger's functionality can be temporarily suspended\n(e.g., when an application on a mobile phone goes to the background)\nby calling the \nPause()\n method. Upon \nResume()\n, the Auto-Pinger continues.\n\n\nExample Usage\n\n\nThe code snippet below implements a primitive presence manager. It leverages the\nAbout discovery mechanism to find all peers on the network that have at least\none bus object implementing the \norg.alljoyn.example.Foo\n interface. It then\nadds all these peers to a single Ping Group. When any of these peers stop\nresponding to ping requests, or resume their ping responses, the appropriate\ncallback is invoked.\n\n\nclass PresenceManager : private ajn::AboutListener,\n                        private ajn::PingListener {\n\n  private:\n    BusAttachment\n bus;\n    AutoPinger autoPinger;\n    std::set\nqcc::String\n peers;\n    static const int PING_INTERVAL = 30; /* seconds */\n    static const char* PING_GROUP = \nallpeers\n;\n\n  public:\n    /* defined in ajn::PingListener */\n    virtual void DestinationLost(const qcc::String\n group, const qcc::String\n destination) {\n        std::cout \n \nPeer \n \n destination \n \n is not responding.\n std::endl;\n    }\n\n    /* defined in ajn::PingListener */\n    virtual void DestinationFound(const qcc::String\n group, const qcc::String\n destination) {\n        std::cout \n \nPeer \n \n destination \n \n responds to ping requests.\n \n std::endl;\n    }\n\n    /* defined in ajn::AboutListener */\n    virtual void Announced(const char* busName,\n                           uint16_t version,\n                           ajn::SessionPort port,\n                           const MsgArg\n objectDescription,\n                           const MsgArg\n aboutData) {\n\n        if (peers.count(busName) == 0) {\n            /* Add destination to ping group */\n            autoPinger.AddDestination(PING_GROUP, busName);\n            peers.insert(busName);\n        }\n    }\n\n    PresenceManager(BusAttachment\n _bus) : bus(_bus), autoPinger(bus) {\n        /* Create a ping group */\n        autoPinger.AddPingGroup(PING_GROUP, *this, PING_INTERVAL);\n\n        /* Configure interface-based discovery */\n        bus.RegisterAboutListener(*this);\n        bus.WhoImplements(\norg.alljoyn.example.Foo\n);\n    }\n\n    ~PresenceManager() {\n        /* Stop interface-based discovery */\n        bus.CancelWhoImplements(\norg.alljoyn.example.Foo\n);\n        bus.UnregisterAboutListener(*this);\n\n        /* Stop AutoPinger */\n        autoPinger.RemovePingGroup(PING_GROUP);\n    }\n};\n\n\n\n\nNote that an actual production-grade implementation of a presence manager would\nbe more complex than this basic example:\n\n\n\n\npeers that stop responding to ping requests should be moved to another Ping\n    Group with a longer interval (to avoid overloading the network with useless\n    ping traffic), or should be removed from the AutoPinger entirely.\n\n\nthe \nAnnounced\n method should check whether any of the announced objects\n    really implements the interface of interest. If the peer removes its last\n    object of interest, the application will receive a final \"negative\"\n    announcement. Upon this negative announcement, the peer should be removed\n    from the Ping Group and from the \npeers\n set.\n\n\n\n\nBest practices\n\n\nChoosing the Right Ping Interval\n\n\nChoosing the right ping interval is always a trade-off between\nhaving the most up-to-date information and not wasting network\nand energy resources. When the application is user facing, there\nare typically higher requirements to the up-to-dateness of the\nremote peer state compared to when the application is in the\nbackground. Also, when a remote peer has not been seen for a\nsignificant amount of time, it's safe to assume the remote peer\nhas gone and you can ping it at a lower interval or even stop\npinging it altogether. When the remote peer starts again,\nit will send a new announcement.\n\n\nModular Applications\n\n\nShare the AutoPinger Instance\n\n\nWhen your application consists of multiple (independently developed) modules,\nyou may want to design your modules in such a way that they can share a single\nAutoPinger instance. Every AutoPinger instance creates a timer thread to manage\nthe periodic invocation of the \nPing()\n method, so less AutoPingers means less\nthreads in your application. In addition, when multiple modules want to keep\ntrack of the same peer, the single AutoPinger can optimize the number of Ping\ncalls it performs towards that peer, thus reducing overall network traffic.\n\n\nAvoid Naming Conflicts\n\n\nIf multiple modules in your application share a single AutoPinger instance, make\nsure they don't interfere with each other's Ping Groups. The simplest approach\nhere is to let every module have its own prefix for its Ping Group names. Hence,\nthe Foo module's \nactive\n group would be called \nFOO.active\n, and be different\nfrom the Bar module's \nactive\n group, which would be called \nBAR.active\n.\n\n\nThreading Considerations\n\n\nThe PingListener callbacks will be invoked on AllJoyn's dispatcher threads.\nThese are the same threads that are used for the invocation of all other\napplication callbacks (asynchronous method replies, SessionListener callback\ninvocations, etc.). If you want to perform any blocking operation (for example,\na synchronous method call) from within a PingListener callback, you must first\ncall \nBusAttachment::EnableConcurrentCallbacks()\n.",
            "title": "Home"
        },
        {
            "location": "/develop/api-guide/core/auto-ping/#introduction",
            "text": "",
            "title": "Introduction"
        },
        {
            "location": "/develop/api-guide/core/auto-ping/#about-auto-pinger",
            "text": "From AllJoyn  14.06 onwards,the Ping API allows applications\nto determine whether a remote peer is still up or not. This puts\na burden on the applications however, as they have to take the\ninitiative to do the pinging. Moreover, applications are often\ninterested in an up-to-date state of all remote peers rather\nthan a snapshot view.  To solve this problem, the Auto-Pinger (introduced in R14.12) periodically pings\na supplied list of peers on the application's behalf and notifies the\napplication when they become available or leave.  The Auto-Pinger API is currently only available in the C++ language binding of\nAllJoyn Core.",
            "title": "About Auto-Pinger"
        },
        {
            "location": "/develop/api-guide/core/auto-ping/#goal",
            "text": "The Auto-Pinger supplies the application up-to-date information\non which peers are present and which aren't.",
            "title": "Goal"
        },
        {
            "location": "/develop/api-guide/core/auto-ping/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/develop/api-guide/core/auto-ping/#usage-details",
            "text": "In many cases, applications will want to handle the presence management of\nsimilar peers (say, all peers with which the application has an ongoing session)\nin a similar way. The AutoPinger class tries to facilitate this with the concept\nof a Ping Group.  When an AutoPinger instance is created, the application first has to define the\napplicable Ping Groups. Later on, when peers are discovered, the application\ncan add them to one or more Ping Groups (either by unique bus name or by\nwell-known name). The AutoPinger will then periodically perform a  Ping()  call\nto all peers in all Ping Groups.  A Ping Group has the following characteristics:   it is identified with a name (a string).  it has an associated  PingListener . This listener object is used to inform\n    the application about changes in the presence of peers, via the\n     DestinationLost  and  DestinationFound  callbacks.  it has a configurable ping interval. The ping interval is the period with\n    which all members of the Ping Group will be periodically pinged.   The Ping Group concept offers some advantages:   it allows several independent modules in the same application to reuse the\n    same AutoPinger object: by choosing different group names and installing\n    different listeners, the various modules don't interfere with each other's\n    presence logic.  it is convenient to treat many peers in the same way: the application can\n    increase or decrease the ping frequency of a complete group with a single\n    API call. For example, when the application's UI is showing a list of active\n    peers, one could reduce the ping interval for the corresponding Ping Group\n    to show better responsiveness towards the user. When the application no\n    longer displays the screen, the ping interval can be increased again.   The Auto-Pinger's functionality can be temporarily suspended\n(e.g., when an application on a mobile phone goes to the background)\nby calling the  Pause()  method. Upon  Resume() , the Auto-Pinger continues.",
            "title": "Usage Details"
        },
        {
            "location": "/develop/api-guide/core/auto-ping/#example-usage",
            "text": "The code snippet below implements a primitive presence manager. It leverages the\nAbout discovery mechanism to find all peers on the network that have at least\none bus object implementing the  org.alljoyn.example.Foo  interface. It then\nadds all these peers to a single Ping Group. When any of these peers stop\nresponding to ping requests, or resume their ping responses, the appropriate\ncallback is invoked.  class PresenceManager : private ajn::AboutListener,\n                        private ajn::PingListener {\n\n  private:\n    BusAttachment  bus;\n    AutoPinger autoPinger;\n    std::set qcc::String  peers;\n    static const int PING_INTERVAL = 30; /* seconds */\n    static const char* PING_GROUP =  allpeers ;\n\n  public:\n    /* defined in ajn::PingListener */\n    virtual void DestinationLost(const qcc::String  group, const qcc::String  destination) {\n        std::cout    Peer     destination     is not responding.  std::endl;\n    }\n\n    /* defined in ajn::PingListener */\n    virtual void DestinationFound(const qcc::String  group, const qcc::String  destination) {\n        std::cout    Peer     destination     responds to ping requests.    std::endl;\n    }\n\n    /* defined in ajn::AboutListener */\n    virtual void Announced(const char* busName,\n                           uint16_t version,\n                           ajn::SessionPort port,\n                           const MsgArg  objectDescription,\n                           const MsgArg  aboutData) {\n\n        if (peers.count(busName) == 0) {\n            /* Add destination to ping group */\n            autoPinger.AddDestination(PING_GROUP, busName);\n            peers.insert(busName);\n        }\n    }\n\n    PresenceManager(BusAttachment  _bus) : bus(_bus), autoPinger(bus) {\n        /* Create a ping group */\n        autoPinger.AddPingGroup(PING_GROUP, *this, PING_INTERVAL);\n\n        /* Configure interface-based discovery */\n        bus.RegisterAboutListener(*this);\n        bus.WhoImplements( org.alljoyn.example.Foo );\n    }\n\n    ~PresenceManager() {\n        /* Stop interface-based discovery */\n        bus.CancelWhoImplements( org.alljoyn.example.Foo );\n        bus.UnregisterAboutListener(*this);\n\n        /* Stop AutoPinger */\n        autoPinger.RemovePingGroup(PING_GROUP);\n    }\n};  Note that an actual production-grade implementation of a presence manager would\nbe more complex than this basic example:   peers that stop responding to ping requests should be moved to another Ping\n    Group with a longer interval (to avoid overloading the network with useless\n    ping traffic), or should be removed from the AutoPinger entirely.  the  Announced  method should check whether any of the announced objects\n    really implements the interface of interest. If the peer removes its last\n    object of interest, the application will receive a final \"negative\"\n    announcement. Upon this negative announcement, the peer should be removed\n    from the Ping Group and from the  peers  set.",
            "title": "Example Usage"
        },
        {
            "location": "/develop/api-guide/core/auto-ping/#best-practices",
            "text": "",
            "title": "Best practices"
        },
        {
            "location": "/develop/api-guide/core/auto-ping/#choosing-the-right-ping-interval",
            "text": "Choosing the right ping interval is always a trade-off between\nhaving the most up-to-date information and not wasting network\nand energy resources. When the application is user facing, there\nare typically higher requirements to the up-to-dateness of the\nremote peer state compared to when the application is in the\nbackground. Also, when a remote peer has not been seen for a\nsignificant amount of time, it's safe to assume the remote peer\nhas gone and you can ping it at a lower interval or even stop\npinging it altogether. When the remote peer starts again,\nit will send a new announcement.",
            "title": "Choosing the Right Ping Interval"
        },
        {
            "location": "/develop/api-guide/core/auto-ping/#modular-applications",
            "text": "Share the AutoPinger Instance  When your application consists of multiple (independently developed) modules,\nyou may want to design your modules in such a way that they can share a single\nAutoPinger instance. Every AutoPinger instance creates a timer thread to manage\nthe periodic invocation of the  Ping()  method, so less AutoPingers means less\nthreads in your application. In addition, when multiple modules want to keep\ntrack of the same peer, the single AutoPinger can optimize the number of Ping\ncalls it performs towards that peer, thus reducing overall network traffic.  Avoid Naming Conflicts  If multiple modules in your application share a single AutoPinger instance, make\nsure they don't interfere with each other's Ping Groups. The simplest approach\nhere is to let every module have its own prefix for its Ping Group names. Hence,\nthe Foo module's  active  group would be called  FOO.active , and be different\nfrom the Bar module's  active  group, which would be called  BAR.active .",
            "title": "Modular Applications"
        },
        {
            "location": "/develop/api-guide/core/auto-ping/#threading-considerations",
            "text": "The PingListener callbacks will be invoked on AllJoyn's dispatcher threads.\nThese are the same threads that are used for the invocation of all other\napplication callbacks (asynchronous method replies, SessionListener callback\ninvocations, etc.). If you want to perform any blocking operation (for example,\na synchronous method call) from within a PingListener callback, you must first\ncall  BusAttachment::EnableConcurrentCallbacks() .",
            "title": "Threading Considerations"
        },
        {
            "location": "/develop/api-guide/core/observer/",
            "text": "Introduction\n\n\nThe Observer feature is a new API concept that was introduced in release 15.04.\nThe Observer is a convenience API that aims to simplify the task of discovering\nall objects on the bus that implement a given set of interfaces, and interacting\nwith those objects.\n\n\nIn a nutshell, it handles:\n\n\n\n\nAbout notifications (calling \nBusAttachment::WhoImplements\n, installing\n    \nAboutListener\ns, interpreting \nAboutListener::Announced\n messages, ...)\n\n\nsession and presence management (setting up sessions with peers hosting bus\n    objects of interest, periodic ping requests to check whether the peer is\n    still present on the bus, ...)\n\n\nProxyBusObject creation and bookkeeping\n\n\n\n\non behalf of the application.\n\n\nAs is evident from the above summary, the Observer is a consumer-side\n(client-side) API for AllJoyn: it is designed to facilitate the consumption of\ninformation or services offered by peers on the AllJoyn bus, not to aid your\napplication in exposing functionality of its own.\n\n\nWhen to Use an Observer\n\n\nThe Observer API is most useful if you're interested in \nall\n bus objects that\nimplement a given set of interfaces. The Observer will automatically maintain a\nsession with each peer that hosts at least one bus object implementing the set\nof interfaces.\n\n\nThe Observer lends itself well to a publish-subscribe-like approach to AllJoyn\ninteraction. The set of interfaces the Observer looks for can be considered the\n\"topic\" the application is subscribed to. The Observer offers notifications to\ninform the application that \"instances\" (bus objects implementing the set of\ninterfaces) have appeared on the topic, or have disappeared from the topic. The\n\nProxyBusObject::PropertiesChangedListener\n mechanism can be used to subscribe\nto notifications of state updates for the topic instances (i.e., property value\nupdates for the discovered bus objects).\n\n\nIf the interaction model of your application is more service-oriented, i.e. the\napplication enumerates all peers that offer a given service, selects one, and\nthen interacts exclusively with the selected peer, the Observer API is probably\nnot for you. Manual About discovery and session management will be more\nefficient, albeit less convenient, in this case.\n\n\nUsage\n\n\nThe Observer API is currently available in four language bindings:\n\n\n\n\nC++\n\n\nC\n\n\nJava\n\n\nObjective-C (iOS \n Mac OS X)\n\n\n\n\nThe API is very similar in all language bindings. Please refer to the respective\n\nAPI references\n for the language bindings for details on Observer\nusage in the various supported programming languages. In this guide, we'll limit\nourselves mainly to the C++ language binding.\n\n\nCreating an Observer\n\n\nTo create an Observer, you need to supply a BusAttachment and the minimal set of\ninterfaces bus objects must implement to be considered eligible for discovery by\nthe Observer.\n\n\nNote:\n the interface names passed to the Observer must correspond with\ninterfaces that have previously been registered with the BusAttachment (via\n\nBusAttachment::CreateInterface\n and \nInterfaceDescription::Activate\n). If this\nis not the case, the Observer creation will fail silently, and the Observer will\nnot discover any objects on the bus.\n\n\nBusAttachment bus;\nconst char* mandatory[] = { \norg.alljoyn.example.Foo\n, \norg.alljoyn.example.Bar\n };\n\nObserver obs(bus, mandatory, sizeof(mandatory)/sizeof(mandatory[0]));\n\n\n\n\nIt is possible to create different Observers side-by-side, even Observers that\nhave the same set of mandatory interfaces pose no problem.\n\n\nOnce created, the Observer will monitor the About announcements emitted by the\npeers on the bus for objects that implement at least the set of mandatory\ninterfaces. The Observer will set up a session with peers that host at least one\nsuch bus object, and create \nProxyBusObject\ns for each of the discovered\nobjects. These \nProxyBusObject\n instances have support for \nall\n discovered\ninterfaces in the remote object, not just the mandatory interfaces.\n\n\nNote:\n due to the design of the Java language binding, it is not possible to\nmake the Java \nProxyBusObject\ns support all interfaces in the discovered object.\nTherefore, the Java Observer constructor allows you to pass in a second set of\ninterfaces, the so-called \noptional\n interfaces. The \nProxyBusObject\ns created\nby the Java Observer will support all mandatory interfaces, and those optional\ninterfaces that are implemented by the corresponding remote object.\n\n\nGetting Notifications for Discovered and Lost Objects\n\n\nThe Observer supports asynchronous notification of applications via the\n\nObserver::Listener\n class. The listener defines two callbacks:\n\n\n\n\nObjectDiscovered(ProxyBusObject\n proxy)\n is invoked whenever a new remote\n    object is discovered. The proxy object that is passed along into this\n    callback can be used for the registration of PropertiesChanged listeners.\n    The Observer will keep this proxy object around until the corresponding\n    remote object is removed from the bus.\n\n\nObjectLost(ProxyBusObject\n proxy)\n is invoked whenever a previously\n    discovered object is lost. Objects are considered lost if\n    the peer that hosts them issues an About announcement that no longer\n    includes that object, if the session to the hosting peer is\n    lost, or if that peer becomes unresponsive to ping requests.\n\n\n\n\nIt is possible to register multiple listeners to a single Observer. To register\na listener, call \nObserver::RegisterListener\n. This method takes two parameters:\na reference to the listener object, and an optional boolean parameter (true by\ndefault) that states whether the application wants to receive notifications for\nalready-discovered objects.\n\n\nThe latter parameter is necessary because it is possible that the Observer has\nalready discovered various remote objects in the time window between its\nconstruction and the registration of the first listener.\n\n\nclass MyListener : public Observer::Listener {\n  public:\n    virtual void ObjectDiscovered(ProxyBusObject\n proxy) {\n        std::cout \n \nDiscovered object with path \n \n proxy.GetPath();\n        std::cout \n \n from peer \n \n proxy.GetUniqueName() \n std::endl;\n    }\n    virtual void ObjectLost(ProxyBusObject\n proxy) {\n        std::cout \n \nLost object with path \n \n proxy.GetPath();\n        std::cout \n \n from peer \n \n proxy.GetUniqueName() \n std::endl;\n    }\n};\n\nMyListener listener;\nobs.RegisterListener(listener, true);\n\n/* ... */\n\n/* when you're done, there are two ways to unregister a listener */\nobs.UnregisterListener(listener);\n/* or, alternatively */\nobs.UnregisterAllListeners();\n\n\n\n\nRetrieving a Specific Proxy Object\n\n\nBetween the invocation of \nObserver::Listener::ObjectDiscovered\n and\n\nObserver::Listener::ObjectLost\n for the same \nProxyBusObject\n, the Observer\nkeeps a reference to that proxy object around internally. You can iterate over\nall proxies in the Observer (discussed later), or retrieve a specific proxy\nobject.\n\n\nA remote object is uniquely identified by the pair (unique bus name, object\npath). In the C++ language binding, the \najn::ObjectId\n type encapsulates this\npair in a convenient class.\n\n\nTo retrieve a specific proxy object from the Observer, call\n\nObserver::Get(ObjectId id)\n.\n\n\nProxyBusObject proxy = obs.Get(ObjectId(unique_name, \n/some/path\n));\nif (proxy.IsValid()) {\n    // OK, the Observer knows about an object with this identity\n} else {\n    // ouch, the Observer does not know an object with this identity\n}\n\n\n\n\nIterating Over All Discovered Objects\n\n\nTo iterate over all discovered objects, use the \nObserver::GetFirst()\n and\n\nObserver::GetNext()\n methods.\n\n\nfor (ProxyBusObject iter = obs.GetFirst(); iter.IsValid(); iter = obs.GetNext(iter)) {\n    // do something fun with the proxy\n}\n\n\n\n\nBest Practices\n\n\nThreading Model\n\n\nAll \nObserver::Listener\n callbacks are invoked from the BusAttachment's\ndispatcher threads, as is the case for all other application-facing callbacks in\nthe AllJoyn framework (asynchronous method replies, session listener callbacks,\netc.). If you want to perform a blocking or long-running operation in a\ncallback, you should first call \nBusAttachment::EnableConcurrentCallbacks\n.\n\n\nThe Observer has been designed in such a way that it is never possible to have\ntwo ObserverListener callbacks in flight at the same time, not even callbacks\nfrom different listeners associated with different Observer instances.\n\n\nService-side Requirements\n\n\nThe Observer functionality only works well if the service side (i.e. the peer\nthat provides the bus object) plays along nicely. The requirements on the\nservice side are simple:\n\n\n\n\nannounce bus objects and their interfaces through About\n\n\nkeep your application's About announcements up to date: if bus objects are\n    registered or unregistered, be sure to do the appropriate re-announcement\n\n\naccept sessions on the session port your application announces in About. The\n    Observer will attempt to establish a point-to-point session on that port. If\n    that fails, the Observer will ignore the bus objects your application\n    announces.",
            "title": "Home"
        },
        {
            "location": "/develop/api-guide/core/observer/#introduction",
            "text": "The Observer feature is a new API concept that was introduced in release 15.04.\nThe Observer is a convenience API that aims to simplify the task of discovering\nall objects on the bus that implement a given set of interfaces, and interacting\nwith those objects.  In a nutshell, it handles:   About notifications (calling  BusAttachment::WhoImplements , installing\n     AboutListener s, interpreting  AboutListener::Announced  messages, ...)  session and presence management (setting up sessions with peers hosting bus\n    objects of interest, periodic ping requests to check whether the peer is\n    still present on the bus, ...)  ProxyBusObject creation and bookkeeping   on behalf of the application.  As is evident from the above summary, the Observer is a consumer-side\n(client-side) API for AllJoyn: it is designed to facilitate the consumption of\ninformation or services offered by peers on the AllJoyn bus, not to aid your\napplication in exposing functionality of its own.",
            "title": "Introduction"
        },
        {
            "location": "/develop/api-guide/core/observer/#when-to-use-an-observer",
            "text": "The Observer API is most useful if you're interested in  all  bus objects that\nimplement a given set of interfaces. The Observer will automatically maintain a\nsession with each peer that hosts at least one bus object implementing the set\nof interfaces.  The Observer lends itself well to a publish-subscribe-like approach to AllJoyn\ninteraction. The set of interfaces the Observer looks for can be considered the\n\"topic\" the application is subscribed to. The Observer offers notifications to\ninform the application that \"instances\" (bus objects implementing the set of\ninterfaces) have appeared on the topic, or have disappeared from the topic. The ProxyBusObject::PropertiesChangedListener  mechanism can be used to subscribe\nto notifications of state updates for the topic instances (i.e., property value\nupdates for the discovered bus objects).  If the interaction model of your application is more service-oriented, i.e. the\napplication enumerates all peers that offer a given service, selects one, and\nthen interacts exclusively with the selected peer, the Observer API is probably\nnot for you. Manual About discovery and session management will be more\nefficient, albeit less convenient, in this case.",
            "title": "When to Use an Observer"
        },
        {
            "location": "/develop/api-guide/core/observer/#usage",
            "text": "The Observer API is currently available in four language bindings:   C++  C  Java  Objective-C (iOS   Mac OS X)   The API is very similar in all language bindings. Please refer to the respective API references  for the language bindings for details on Observer\nusage in the various supported programming languages. In this guide, we'll limit\nourselves mainly to the C++ language binding.",
            "title": "Usage"
        },
        {
            "location": "/develop/api-guide/core/observer/#creating-an-observer",
            "text": "To create an Observer, you need to supply a BusAttachment and the minimal set of\ninterfaces bus objects must implement to be considered eligible for discovery by\nthe Observer.  Note:  the interface names passed to the Observer must correspond with\ninterfaces that have previously been registered with the BusAttachment (via BusAttachment::CreateInterface  and  InterfaceDescription::Activate ). If this\nis not the case, the Observer creation will fail silently, and the Observer will\nnot discover any objects on the bus.  BusAttachment bus;\nconst char* mandatory[] = {  org.alljoyn.example.Foo ,  org.alljoyn.example.Bar  };\n\nObserver obs(bus, mandatory, sizeof(mandatory)/sizeof(mandatory[0]));  It is possible to create different Observers side-by-side, even Observers that\nhave the same set of mandatory interfaces pose no problem.  Once created, the Observer will monitor the About announcements emitted by the\npeers on the bus for objects that implement at least the set of mandatory\ninterfaces. The Observer will set up a session with peers that host at least one\nsuch bus object, and create  ProxyBusObject s for each of the discovered\nobjects. These  ProxyBusObject  instances have support for  all  discovered\ninterfaces in the remote object, not just the mandatory interfaces.  Note:  due to the design of the Java language binding, it is not possible to\nmake the Java  ProxyBusObject s support all interfaces in the discovered object.\nTherefore, the Java Observer constructor allows you to pass in a second set of\ninterfaces, the so-called  optional  interfaces. The  ProxyBusObject s created\nby the Java Observer will support all mandatory interfaces, and those optional\ninterfaces that are implemented by the corresponding remote object.",
            "title": "Creating an Observer"
        },
        {
            "location": "/develop/api-guide/core/observer/#getting-notifications-for-discovered-and-lost-objects",
            "text": "The Observer supports asynchronous notification of applications via the Observer::Listener  class. The listener defines two callbacks:   ObjectDiscovered(ProxyBusObject  proxy)  is invoked whenever a new remote\n    object is discovered. The proxy object that is passed along into this\n    callback can be used for the registration of PropertiesChanged listeners.\n    The Observer will keep this proxy object around until the corresponding\n    remote object is removed from the bus.  ObjectLost(ProxyBusObject  proxy)  is invoked whenever a previously\n    discovered object is lost. Objects are considered lost if\n    the peer that hosts them issues an About announcement that no longer\n    includes that object, if the session to the hosting peer is\n    lost, or if that peer becomes unresponsive to ping requests.   It is possible to register multiple listeners to a single Observer. To register\na listener, call  Observer::RegisterListener . This method takes two parameters:\na reference to the listener object, and an optional boolean parameter (true by\ndefault) that states whether the application wants to receive notifications for\nalready-discovered objects.  The latter parameter is necessary because it is possible that the Observer has\nalready discovered various remote objects in the time window between its\nconstruction and the registration of the first listener.  class MyListener : public Observer::Listener {\n  public:\n    virtual void ObjectDiscovered(ProxyBusObject  proxy) {\n        std::cout    Discovered object with path     proxy.GetPath();\n        std::cout     from peer     proxy.GetUniqueName()   std::endl;\n    }\n    virtual void ObjectLost(ProxyBusObject  proxy) {\n        std::cout    Lost object with path     proxy.GetPath();\n        std::cout     from peer     proxy.GetUniqueName()   std::endl;\n    }\n};\n\nMyListener listener;\nobs.RegisterListener(listener, true);\n\n/* ... */\n\n/* when you're done, there are two ways to unregister a listener */\nobs.UnregisterListener(listener);\n/* or, alternatively */\nobs.UnregisterAllListeners();",
            "title": "Getting Notifications for Discovered and Lost Objects"
        },
        {
            "location": "/develop/api-guide/core/observer/#retrieving-a-specific-proxy-object",
            "text": "Between the invocation of  Observer::Listener::ObjectDiscovered  and Observer::Listener::ObjectLost  for the same  ProxyBusObject , the Observer\nkeeps a reference to that proxy object around internally. You can iterate over\nall proxies in the Observer (discussed later), or retrieve a specific proxy\nobject.  A remote object is uniquely identified by the pair (unique bus name, object\npath). In the C++ language binding, the  ajn::ObjectId  type encapsulates this\npair in a convenient class.  To retrieve a specific proxy object from the Observer, call Observer::Get(ObjectId id) .  ProxyBusObject proxy = obs.Get(ObjectId(unique_name,  /some/path ));\nif (proxy.IsValid()) {\n    // OK, the Observer knows about an object with this identity\n} else {\n    // ouch, the Observer does not know an object with this identity\n}",
            "title": "Retrieving a Specific Proxy Object"
        },
        {
            "location": "/develop/api-guide/core/observer/#iterating-over-all-discovered-objects",
            "text": "To iterate over all discovered objects, use the  Observer::GetFirst()  and Observer::GetNext()  methods.  for (ProxyBusObject iter = obs.GetFirst(); iter.IsValid(); iter = obs.GetNext(iter)) {\n    // do something fun with the proxy\n}",
            "title": "Iterating Over All Discovered Objects"
        },
        {
            "location": "/develop/api-guide/core/observer/#best-practices",
            "text": "",
            "title": "Best Practices"
        },
        {
            "location": "/develop/api-guide/core/observer/#threading-model",
            "text": "All  Observer::Listener  callbacks are invoked from the BusAttachment's\ndispatcher threads, as is the case for all other application-facing callbacks in\nthe AllJoyn framework (asynchronous method replies, session listener callbacks,\netc.). If you want to perform a blocking or long-running operation in a\ncallback, you should first call  BusAttachment::EnableConcurrentCallbacks .  The Observer has been designed in such a way that it is never possible to have\ntwo ObserverListener callbacks in flight at the same time, not even callbacks\nfrom different listeners associated with different Observer instances.",
            "title": "Threading Model"
        },
        {
            "location": "/develop/api-guide/core/observer/#service-side-requirements",
            "text": "The Observer functionality only works well if the service side (i.e. the peer\nthat provides the bus object) plays along nicely. The requirements on the\nservice side are simple:   announce bus objects and their interfaces through About  keep your application's About announcements up to date: if bus objects are\n    registered or unregistered, be sure to do the appropriate re-announcement  accept sessions on the session port your application announces in About. The\n    Observer will attempt to establish a point-to-point session on that port. If\n    that fails, the Observer will ignore the bus objects your application\n    announces.",
            "title": "Service-side Requirements"
        },
        {
            "location": "/develop/api-guide/core/propcache/",
            "text": "Introduction\n\n\nThe property cache is a feature that was introduced in release 15.04. It is\navailable in the C++, C, Java and Objective-C language bindings of AllJoyn Core.\n\n\nThe purpose of the property cache is to reduce network traffic and to improve\napplication response times by avoiding unnecessary round trips on\n\nProxyBusObject::GetProperty\n and \nProxyBusObject::GetAllProperties\n calls for\n\ncacheable\n properties.\n\n\nOptional Feature\n\n\nThe property caching feature is optional, and not enabled by default. You have\nto enable it on a per-\nProxyBusObject\n basis. Once enabled, it applies to all\ninterfaces that \nProxyBusObject\n instance supports.\n\n\nCacheable Properties\n\n\nCacheable properties are those that leverage the\n\norg.freedesktop.DBus.Properties.PropertiesChanged\n signal mechanism. Such\nproperties are annotated with the\n\norg.freedesktop.DBus.Property.EmitsChangedSignal\n annotation:\n\n\n\n\nif the annotation value is \ntrue\n, clients will be informed of the new value\n    of the property as soon as the value changes.\n\n\nif the annotation value is \ninvalidates\n, clients will be informed that any\n    value they may have cached for that property is now invalid, but the new\n    value is not sent along with the notification. Clients must perform a\n    GetProperty call to retrieve the new value.\n\n\nif the annotation value is \nfalse\n (the default, if the annotation is not\n    present), the property is not cacheable, and no notifications will be\n    emitted upon changes in the property value.\n\n\n\n\nNote:\n recent DBus specifications allow a fourth value for the annotation\n(\nconst\n), but this is currently not supported by AllJoyn.\n\n\nLazy Caching\n\n\nThe property caching mechanism is lazy: it does not actively try to acquire\nvalues for all properties in the proxy object. Rather, it snoops incoming\nPropertiesChanged signals and GetProperty replies to fill the cache.\nApplications that want to have a pre-filled cache have to perform a\n\nProxyBusObject::GetAllProperties\n call immediately following the enabling of\nthe property cache for a proxy object.\n\n\nUsage\n\n\nThe property cache is completely transparent for applications. The only code\nchange you need to take advantage of the functionality is the addition of a\nsingle \nProxyBusObject::EnablePropertyCaching\n call.\n\n\nProxyBusObject pbo(bus, unique_name, path);\npbo.EnablePropertyCaching();\n\n\n\n\nSubsequent calls to \nProxyBusObject::GetProperty\n,\n\nProxyBusObject::GetPropertyAsync\n, \nProxyBusObject::GetAllProperties\n or\n\nProxyBusObject::GetAllPropertiesAsync\n will opportunistically return values\nfrom the cache if applicable.\n\n\nService-side Requirements\n\n\nThe property caching mechanism is extremely simple, but it assumes that the\nservice side (i.e. the peer that exposes objects on the bus) behaves correctly.\nIf you cannot be certain that the peers you will interact with comply with the\nrequirements listed below, your best bet is to not enable property caching.\n\n\nRespect Property Annotations\n\n\nIf the interface definition states that certain properties are cacheable, i.e.\nthe appropriate annotations are present in the interface definition, the service\nmust emit the PropertiesChanged signal at the appropriate times. Failure to do\nso will result in inconsistent caches at client side, and undefined behavior.\n\n\nEmit PropertiesChanged Signals as Sessioncast Signals\n\n\nThe PropertiesChanged signal (which is emitted via the\n\nBusObject::EmitPropChanged\n method) must not be emitted as a broadcast signal\n(i.e. with session id 0). It should be emitted as a sessioncast signal on all\nsessions that have potentially interested listeners.\n\n\nThe most convenient method for emission is to use the sentinel\n\nSESSION_ID_ALL_HOSTED\n value for the session id. The framework will then emit\nthe signal on all sessions hosted by the application.\n\n\nbusobj.EmitPropChanged(\norg.alljoyn.example.Foo\n, {\nBar\n}, 1, SESSION_ID_ALL_HOSTED);",
            "title": "Home"
        },
        {
            "location": "/develop/api-guide/core/propcache/#introduction",
            "text": "The property cache is a feature that was introduced in release 15.04. It is\navailable in the C++, C, Java and Objective-C language bindings of AllJoyn Core.  The purpose of the property cache is to reduce network traffic and to improve\napplication response times by avoiding unnecessary round trips on ProxyBusObject::GetProperty  and  ProxyBusObject::GetAllProperties  calls for cacheable  properties.",
            "title": "Introduction"
        },
        {
            "location": "/develop/api-guide/core/propcache/#optional-feature",
            "text": "The property caching feature is optional, and not enabled by default. You have\nto enable it on a per- ProxyBusObject  basis. Once enabled, it applies to all\ninterfaces that  ProxyBusObject  instance supports.",
            "title": "Optional Feature"
        },
        {
            "location": "/develop/api-guide/core/propcache/#cacheable-properties",
            "text": "Cacheable properties are those that leverage the org.freedesktop.DBus.Properties.PropertiesChanged  signal mechanism. Such\nproperties are annotated with the org.freedesktop.DBus.Property.EmitsChangedSignal  annotation:   if the annotation value is  true , clients will be informed of the new value\n    of the property as soon as the value changes.  if the annotation value is  invalidates , clients will be informed that any\n    value they may have cached for that property is now invalid, but the new\n    value is not sent along with the notification. Clients must perform a\n    GetProperty call to retrieve the new value.  if the annotation value is  false  (the default, if the annotation is not\n    present), the property is not cacheable, and no notifications will be\n    emitted upon changes in the property value.   Note:  recent DBus specifications allow a fourth value for the annotation\n( const ), but this is currently not supported by AllJoyn.",
            "title": "Cacheable Properties"
        },
        {
            "location": "/develop/api-guide/core/propcache/#lazy-caching",
            "text": "The property caching mechanism is lazy: it does not actively try to acquire\nvalues for all properties in the proxy object. Rather, it snoops incoming\nPropertiesChanged signals and GetProperty replies to fill the cache.\nApplications that want to have a pre-filled cache have to perform a ProxyBusObject::GetAllProperties  call immediately following the enabling of\nthe property cache for a proxy object.",
            "title": "Lazy Caching"
        },
        {
            "location": "/develop/api-guide/core/propcache/#usage",
            "text": "The property cache is completely transparent for applications. The only code\nchange you need to take advantage of the functionality is the addition of a\nsingle  ProxyBusObject::EnablePropertyCaching  call.  ProxyBusObject pbo(bus, unique_name, path);\npbo.EnablePropertyCaching();  Subsequent calls to  ProxyBusObject::GetProperty , ProxyBusObject::GetPropertyAsync ,  ProxyBusObject::GetAllProperties  or ProxyBusObject::GetAllPropertiesAsync  will opportunistically return values\nfrom the cache if applicable.",
            "title": "Usage"
        },
        {
            "location": "/develop/api-guide/core/propcache/#service-side-requirements",
            "text": "The property caching mechanism is extremely simple, but it assumes that the\nservice side (i.e. the peer that exposes objects on the bus) behaves correctly.\nIf you cannot be certain that the peers you will interact with comply with the\nrequirements listed below, your best bet is to not enable property caching.",
            "title": "Service-side Requirements"
        },
        {
            "location": "/develop/api-guide/core/propcache/#respect-property-annotations",
            "text": "If the interface definition states that certain properties are cacheable, i.e.\nthe appropriate annotations are present in the interface definition, the service\nmust emit the PropertiesChanged signal at the appropriate times. Failure to do\nso will result in inconsistent caches at client side, and undefined behavior.",
            "title": "Respect Property Annotations"
        },
        {
            "location": "/develop/api-guide/core/propcache/#emit-propertieschanged-signals-as-sessioncast-signals",
            "text": "The PropertiesChanged signal (which is emitted via the BusObject::EmitPropChanged  method) must not be emitted as a broadcast signal\n(i.e. with session id 0). It should be emitted as a sessioncast signal on all\nsessions that have potentially interested listeners.  The most convenient method for emission is to use the sentinel SESSION_ID_ALL_HOSTED  value for the session id. The framework will then emit\nthe signal on all sessions hosted by the application.  busobj.EmitPropChanged( org.alljoyn.example.Foo , { Bar }, 1, SESSION_ID_ALL_HOSTED);",
            "title": "Emit PropertiesChanged Signals as Sessioncast Signals"
        },
        {
            "location": "/develop/api-guide/events-and-actions/",
            "text": "Events and Actions API Guide\n\n\nOverview\n\n\nThe AllJoyn\n Events and Actions feature enables the ability for \nthe discovery of signals and methods that can be understood by \nan end consumer in a user interface. An Event is made up of \nattaching a human readable description to a Signal. An Action \nis made up of attaching a human readable description to a Method.\n\n\nThis feature/function allows a UI-based application to discover \nand list Events and Actions in a user interface, and dynamically \ncreate a handler for the signal (event) to invoke the method \n(action) on the respective devices. The information found \ncan also be used to set a rule in an application with the \nability to listen for events and perform actions, if an application \nsupports this ability. The rule application provides the best \nuser experience when it is always running and connected to the \nuser's home network.\n\n\nArchitecture\n\n\nThe following figure illustrates one possible basic Action/Event \nenvironment that can be built with the Actions and Events feature.\n\n\n\n\nFigure:\n Events and Actions feature sample architecture\n\n\nEvents and Actions sequence flow\n\n\nThe following steps detail the end-to-end flow involving the \nEvents framework, Actions framework, and Event Picker application. \nThe flow assumes the following:\n\n\n\n\nDevices that support the Events interface have been onboarded \nonto the AllJoyn framework and are therefore discoverable on \nthe associated Wi-Fi network.\n\n\nDevices that support the Actions interface have been onboarded \nonto the AllJoyn framework and are therefore discoverable on \nthe associated Wi-Fi network.\n\n\n\n\nHuman readable descriptions have been created as part of \nthe software on the devices to be returned in the introspection XML. \nThese can be created by the OEM, standardized descriptions \nprovided by the AllSeen Alliance can be used.\n\n\n\n\n\n\nA device with the Event Picker application installed \ndiscovers other devices on the network that support the \nEvents interface. The device's UI presents a list of those \ndevices such as TV, washer, and thermostat.\n\n\n\n\nThe Event Picker application introspects the Events interface \non the devices listed in the UI, and presents a list of human \nreadable descriptions in the UI. Example descriptions include \nTV is on, Washer cycle complete, and Thermostat cooling.\n\n\nThe device with the Event Picker application installed \ndiscovers devices on the network that support the Action interface. \nThe device's UI presents a list of those devices such as Kitchen Lights.\n\n\nThe Event Picker application introspects the Action methods \non the devices listed in the UI, and presents a list of human \nreadable descriptions in the UI. The events (TV is on, \nWasher cycle complete, Thermostat cooling) are paired with \na corresponding action that can be completed for that device. \nExamples include Turn light on, Turn light color to blue, \nBlink light three times.\n\n\nThe user can select an event and select an action to \nmap the two. This pairs the event and the action, creating \na rule the user wants to have occur.\n\n\n\n\nAllJoyn Interface Overview\n\n\nThis section walks through an AllJoyn interface and briefly \nexplains the components. This is not intended to be a \nreplacement for understanding how to build an interface \nand design one, but just to set the stage on how Events \nand Actions fit into the core AllJoyn software.\n\n\nInterface structure\n\n\nAllJoyn interfaces are defined as XML and contain specific tags \nthat represent the definition expressed. Every interface has \na \nnode\n tag that indicates the object path in which the defined \ninterfaces exist. Inside a \nnode\n tag contains the list of \ninterfaces defined in \ninterface name=\"SOME_NAME\"\n tags. \nThese interfaces define the specific functionality that are exposed.\n\n\nnode\n tags can be nested; when no name is supplied, the default is \"/\".\n\n\nMethods, Signals, and Properties\n\n\nMethods, Signals, and Properties make up the definition of \nthe interface for its functionality.\n\n\n\n\nA method is defined by a \n tag, Signals \n \nand Properties \n.\n\n\nThe \nmethod\n and \nsignal\n tags allow for \narg\n tags to be \ncontained that define the arguments.\n\n\nA property does not accept arguments as it is only a single type.\n\n\n\n\nExample interface XML\n\n\nnode\n\n  \nnode name=\nchild\n/\n\n\n  \ninterface name=\ncom.example.LightBulb\n\n\n      \nmethod name=\nToggleSwitch\n\n         \narg name=\nbrightess\n type=\ni\n direction=\nin\n/\n\n      \n/method\n\n\n      \nsignal name=\nLightOn\n sessionless=\ntrue\n\n      \n/signal\n\n      \nsignal name=\nLightOff\n sessionless=\ntrue\n\n      \n/signal\n\n\n      \nproperty name=\nLightState\n type=\ny\n access=\nread\n/\n\n\n   \n/interface\n\n\n/node\n\n\n\n\n\norg.allseen.Introspectable Interface\n\n\nTo allow the ability to maintain backwards compatibility with \nDBus, a new Introspection interface was created to allow for \nthe return of descriptions as well as understanding if a \nsignal is sessionless or requires joining a session in order \nto receive the signal.\n\n\nInterface org.allseen.Introspectable\n\n\nThe org.allseen.Introspectable interface provides access to \nthe introspection XML containing the description attributes. \nThe following subsection detail the interface's methods and properties.\n\n\ninterface name=\norg.allseen.Introspectable\n\n   \nmethod name=\nGetDescriptionLanguages\n\n      \narg name=\nlanguageTags\n type=\nas\n direction=\nout\n/\n\n   \n/method\n\n\n   \nmethod name=\nIntrospectWithDescription\n\n      \narg name=\nlanguageTag\n type=\ns\n direction=\nin\n/\n\n      \narg name=\ndata\n type=\ns\n direction=\nout\n/\n\n   \n/method\n\n\n/interface\n\n\n\n\n\nGetDescriptionLanguages\n\n\nReturn the aggregate of the languages for which this object has descriptions.\n\n\nFor example, if an object implements two interfaces, X and Y \n(X has all of its members described in English (en) and French (fr) \nand Y has some descriptions in English (en) and Chinese (cn)), \nthis method returns [\"en\", \"fr\", \"cn\"].\n\n\nNOTE:\n The language tags must comply with IETF language tag standards.\n\n\nIntrospectWithDescription\n\n\nThis method returns the introspection XML with descriptions \nin the specified language (exact match only - no best match).\n\n\nIf an element, such as a method, does not have a description \nin that language, then a language tag determined by the implementer \nof the introspected device will be used. This provides the \nfollowing benefits:\n\n\n\n\nIt allows the ability to provide a \"default\" language so \nthat devices/applications that support Events and Actions \nwill always be visible to a consumer.\n\n\nA device manufacturer can provide a closest language \nalgorithm to adjust the default to a language that is \nclose to the requested one.\n\n\n\n\nFor example, if a device supports English (\"en\") and Spanish (\"es\"), \nand the requested language is Portuguese (\"pt\"), it is better \nto return Spanish as it is Latin-based and may share some common words.\n\n\nNOTE:\n The AllJoyn library does not provide IETF language tag matching logic.\n\n\nSample introspection XML\n\n\nThe following is a sample of the XML that is returned by \nIntrospectWithDescription; it adds the description to the LightOn signal \nwhich creates a LightOn Event.\n\n\nnode\n\n   \ndescription\nYour lightbulb\n/description\n\n\n   \nnode name=\nchild\n\n      \ndescription\nSome helpful description\n/description\n\n   \n/node\n\n\n   \ninterface name=\ncom.example.LightBulb\n\n      \ndescription\nProvides basic lighting functionality\n/description\n\n\n      \nmethod name=\nToggleSwitch\n\n         \ndescription\nInvoke this to toggle whether the light is on or off\n/description\n\n         \narg name=\nbrightess\n type=\ni\n direction=\nin\n\n            \ndescription\nA value to specify how bright the bulb should illuminate\n/description\n\n         \n/arg\n\n      \n/method\n\n\n      \nsignal name=\nLightOn\n sessionless=\ntrue\n\n         \ndescription\nEmitted when the light turns on\n/description\n\n      \n/signal\n\n      \nsignal name=\nLightOff\n sessionless=\ntrue\n\n         \ndescription\nEmitted when the light turns off\n/description\n\n      \n/signal\n\n\n      \nproperty name=\nLightState\n type=\ny\n access=\nread\n\n         \ndescription\nThe current state of this light bulb\n/description\n\n      \n/property\n\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nSetting Descriptions (Standard Core Library)\n\n\nThis section provides usage instructions on the APIs that \nhave been added to the AllJoyn Standard Core Library. \nThese APIs provide the ability to add the introspection \ndescriptions to AllJoyn BusObjects and interfaces. \nThe APIs provide mechanisms for providing these descriptions \nin multiple languages.\n\n\nAPI concepts\n\n\nAs mentioned above, human readable descriptions document \nBusObjects and interfaces hosted by an AllJoyn service framework. \nEach description can be offered in multiple languages \ndenoted with an IETF language tag, for example, \"en\" for English.\n\n\nSet descriptions for a single language\n\n\nTo provide your descriptions in a single language, use the \nAPIs on the BusObject and interfaces to set the description \nand its associated language tag.\n\n\nIn all cases where only a single language is set, this \nstring will be returned to an application that asks for descriptions.\n\n\nSet descriptions for multiple language tags\n\n\nTo provide descriptions in multiple languages provide one or \nmore Translator implementations. The job of the Translator \nis to translate the descriptions set on the BusObjects and \ninterfaces. Translators may be specific on a BusObject or \ninterface, or global in the BusAttachment.\n\n\nWhen generating the introspection XML for each BusObject or \ninterface, the description text is chosen using the following logic:\n\n\n\n\nThe BusObject or interface's own Translator overrides the \nBusAttachment's Translator.\n\n\nA Translator is given priority on providing the translation. \nFor instance, if the BusObject's description is \"Turn on the lights\" \nin \"en\", even if \"en\" is being requested, the XML generator queries \nthe Translator with \"Please translate 'Turn on the lights' \nfrom 'en' to 'en' \". IntrospectWithDescription should always \nreturn a description in some default language if an unrecognized \nlanguage is requested. One method of doing this is for the \nTranslator to return NULL, in which case the BusObject or \nInterfaceDescription's descriptions will be used as the default, \nAlternately, the Translator may return a default language translation. \nMore complex algorithms can provide a similar language match \nso that the end user may have an understanding of the description.\n\n\n\n\nPutting all description texts in a Translator\n\n\nIt is possible to concentrate all descriptions in the \nTranslator implementation by setting the language to the \nempty string, \"\", which has a special meaning. It means \nthat the description in the BusObject or InterfaceDescription \nis not actually a description but rather a \"tag\" or lookup key \nthat is meant to be passed to a Translator.\n\n\nIn this scenario, it is crucial that the Translator return a \ndefault language description even when the language requested \nis not matched. If the Translator returns NULL, no description \nwill be returned.\n\n\nNOTE:\n In this scenario, the description is a lookup tag that \nis never returned in the introspection XML.\n\n\nLinux\n\n\nSetting descriptions in a single language\n\n\nThe easiest way to support descriptions in a single language \nis to set the description texts on the BusObject and \nInterfaceDescription objects. Even though the description \nis only in a single language, the AllJoyn framework still \nneeds to know which language is specified, and the language \nmust be specified in the APIs.\n\n\nBusObject and InterfaceDescription support setting a single \ndescription and its language with the following API methods.\n\n\nvoid BusObject::SetDescription(const char* language, const char* text)\nvoid InterfaceDescription::SetDescriptionLanguage(const char* language)\nvoid InterfaceDescription::SetDescription(const char* description)\n\nQStatus InterfaceDescription::SetMemberDescription(const char* member, \n   const char* description, bool isSessionlessSignal)\nQStatus InterfaceDescription::SetArgDescription(const char* member, \n   const char* arg, const char* description)\nQStatus InterfaceDescription::SetPropertyDescription(const char* name, \n   const char* description)\n\n\n\n\nProviding translations of descriptions\n\n\nDefining a Translator\n\n\nOne way to support descriptions in multiple languages is to \nstart with a single description on the BusObject and InterfaceDescription \nobjects and add a Translator. A Translator is an object that \nimplements the ajn::Translator abstract base class.\n\n\nA Translator class provides the list of languages it can \ntranslate to by implementing the following methods which \nprovide the AllJoyn framework with the ability to iterate \nover the Translator's target languages:\n\n\nsize_t NumTargetLanguages()\nvoid GetTargetLanguage(size_t index, qcc::String\n ret)\n\n\n\n\nIn most cases, a Translator provides translations at runtime using the following:\n\n\nconst char* Translate(const char* sourceLanguage, const char* targetLanguage, \n   const char* source)\n\n\n\n\nThis function should provide a translation of the \"source\" \ntext from \"sourceLanguage\" to \"targetLanguage\". The string \nreturned must be statically allocated, that is, its memory \nmust not be freed at any point.\n\n\nTranslators returning dynamically allocated strings\n\n\nIn special cases where your application needs to return \na string that must be freed at some point after it is used, \nuse this version of the Translate method instead:\n\n\nconst char* Translate(const char* sourceLanguage,\n   const char* targetLanguage, const char* source, qcc::String\n buffer)\n\n\n\n\nThe \"buffer\" parameter of this function should hold the memory \nreturned by the function. The following is an example of how \nto implement this taken from AllJoyn's own code:\n\n\nconst char* JTranslator::Translate(const char* sourceLanguage, \n      const char* targetLanguage,\n      const char* source, qcc::String\n buffer)\n{\n   QCC_DbgPrintf((\nJTranslator::Translate()\n));\n\n      /* ... */\n\n      const char* chars = env-\nGetStringUTFChars(jres, NULL);\n      buffer.assign(chars);\n      env-\nReleaseStringUTFChars(jres, chars);\n\n\n      return buffer.c_str();\n}\n\n\n\n\nSetting the Translator\n\n\nTranslators are set on the BusAttachment, BusObject, or \nInterfaceDescription using the following functions:\n\n\nvoid BusAttachment::SetDescriptionTranslator(Translator* translator)\nvoid BusObject::SetDescriptionTranslator(Translator* translator)\nvoid InterfaceDescription::SetDescriptionTranslator(Translator* translator)\n\n\n\n\nJava\n\n\nSetting descriptions\n\n\nTo set a BusObject's description, specify it when you register the object:\n\n\npublic Status registerBusObject(BusObject busObj,\nString objPath, boolean secure, String languageTag, String description)\n\n\n\n\nTo set descriptions for an interface, use the following annotations:\n\n\n\n\n\n\n\n\nInterface\n\n\nAnnotation type\n\n\nAnnotations\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.bus.annotation\n\n\nBusInterface\n\n\ndescriptionLanguage\n, \ndescription\n\n\n\n\n\n\n\n\nBusMethod\n\n\ndescription\n\n\n\n\n\n\n\n\nBusSignal\n\n\ndescriptionLanguage\n, \ndescription\n\n\n\n\n\n\n\n\nBusProperty\n\n\ndescription\n\n\n\n\n\n\n\n\nSetting Translators\n\n\nAs in the Linux binding, Translators may be provided on the \nBusAttachment, BusObject, or Interface levels. The org.alljoyn.bus.Translator \ninterface is equivalent to the Linux ajn::Translator abstract class.\n\n\nTo specify a Translator on the BusAttachment:\n\n\nBusAttachment.setDescriptionTranslator(Translator translator)\n\n\n\n\nTo specify a Translator on the BusObject with the call to BusAttachment.registerBusObject:\n\n\npublic Status registerBusObject(BusObject busObj, String objPath, \nboolean secure, String languageTag, String description,\nTranslator dt)\n\n\n\n\nTo specify a Translator for an Interface, specify its class name \nin the BusInterface descriptionTranslator annotation. \nThe AllJoyn framework instantiates a single instance of the \nTranslator class no matter how many interfaces you specify it on.\n\n\nObjective-C\n\n\nSetting descriptions\n\n\nTo set descriptions on a BusObject, use AJNBusObject's method:\n\n\n- (void)setDescription:(NSString*)description inLanguage:(NSString*)language\n\n\n\n\nTo set descriptions on an Interface, use AJNInterfaceDescription's methods:\n\n\n- (void)setDescriptionLanguage:(NSString *)language;\n\n- (void)setDescription:(NSString *)description;\n- (QStatus)setMemberDescription:(NSString *)description \nforMemberWithName:(NSString*)member sessionlessSignal:(BOOL)sessionless;\n\n- (QStatus)setPropertyDescription:(NSString *)description \nforPropertyWithName:(NSString *)propName;\n\n- (QStatus)setArgDescription:(NSString *)description \nforArgument:(NSString *)argName ofMember:(NSStr ing *)member;\n\n\n\n\nSetting Translators\n\n\nThe AJNTranslator protocol is equivalent to the C++ ajn::Translator \nabstract base class. To set the Translator, the following method \nis supported by AJNBusAttachment, AJNBusObject, and AJNInterfaceDescription:\n\n\n- (void)setDescriptionTranslator:(id\nAJNTranslator\n)translator;\n\n\n\n\nCode generator\n\n\nThe Objective-C code generator supports specifying descriptions \nin the input XML. Since the XML is modeled on the introspection XML, \nsimply specify the descriptions in the same manner they are returned, \nbut with added attributes to define the language of the descriptions. \nThe \ndescription\n element under a \nnode\n or \ninterface\n must contain \na \"language\" attribute.\n\n\nThe following is an example of an XML containing descriptions:\n\n\nxml\n\n   \nnode name=\norg/alljoyn/Bus/sample\n\n      \ndescription language=\nen\nThis is a sample object\n/description\n\n      \nannotation name=\norg.alljoyn.lang.objc\n value=\nSampleObject\n/\n\n         \ninterface name=\norg.alljoyn.bus.sample\n\n            \ndescription language=\nen\nThis is a sample interface\n/description\n\n         \nannotation name=\norg.alljoyn.lang.objc\n value=\nSampleObjectDelegate\n/\n\n\n         \nmethod name=\nConcatenate\n\n            \ndescription\nThis concatenates strings\n/description\n\n            \narg name=\nstr1\n type=\ns\n direction=\nin\n\n               \nannotation name=\norg.alljoyn.lang.objc\n value=\nconcatenateString:\n/\n\n            \n/arg\n\n            \narg name=\nstr2\n type=\ns\n direction=\nin\n\n               \nannotation name=\norg.alljoyn.lang.objc\n value=\nwithString:\n/\n\n            \n/arg\n\n            \narg name=\noutStr\n type=\ns\n direction=\nout\n/\n\n         \n/method\n\n      \n/interface\n\n   \n/node\n\n\n/xml\n\n\n\n\n\nSetting Descriptions (Thin Core Library)\n\n\nThis chapter provides usage instructions on the Thin Core Library \nusage in order to set descriptions on the interfaces so that events \nand actions can be discovered.\n\n\nThin Linux\n\n\nThere are API calls that allow the ability to assign a \ndescription to interface introspection elements. The actual entry \nof the description is table driven, much like the interface creation. \nOne creates a language tag array, a set of strings they \nwish to expose as descriptions, a translate function and \n#defines to lookup the correct strings.\n\n\nAdding descriptions\n\n\nDescriptions can be added to any attribute found in the \nintrospection XML. The following subsection detail the \nability to return descriptions in the Thin Core Library application.\n\n\nCreate arrays for the language tags used\n\n\nDepending on the device being made and the target market \nregions, the developer may wish to support multiple languages. \nIn order to provide this support, create a static array that \ncontains an IETF language tag, for example, \"en\" for English, \n\"es\" for Spanish, etc.\n\n\nstatic const char* const languages[] = { \nen\n, \nes\n };\n\n\n\n\nSet values for encoded descriptions\n\n\nDue to running on a memory-constrained platform, the design \nof providing a description uses an encoding schema. This schema \nis defined as a uint32 broken up into the following values \nthat are compressed into the single uint32 value:\n\n\n\n\nBusObject base ID\n\n\nInterface index\n\n\nMember index\n\n\nArg index\n\n\n\n\nA helper #define named AJ_DESCRIPTION_ID is found in \naj_introspect.h to help encode the messages.\n\n\nFor example, an encoding for the first AJ_Object would be:\n\n\nAJ_DESCRIPTION_ID(SAMPLE_OBJECT_ID, 0, 0, 0)\n\n\n\n\nAn encoding for the first interface in the above object would be:\n\n\nAJ_DESCRIPTION_ID(SAMPLE_OBJECT_ID, 1, 0, 0)\n\n\n\n\nImplement Translator method\n\n\nThe Translator method is a function pointer matching the signature of:\n\n\ntypedef const char* (*AJ_DescriptionLookupFunc)(uint32_t descId, \nconst char* lang);\n\n\n\n\nThis method is invoked on every introspection element and \ngives the app developer the ability to control what string \nis set on which element. The implementation of the Translator \nmethod should always try and return a description if a descId \ncontains descriptions. This allows an application developer to \nreceive and display descriptions when a lang tag of \"\" (empty string) \nor a value that is not contained in the language array are asked for.\n\n\nNOTE:\n An example implementation of a Translator is contained \nin the ajtcl/sample/basic/eventaction_service.c.\n\n\nSet Translator\n\n\nTranslator methods are set per AJ_ObjectList when the AJ_ObjectList \nis registered using the C API AJ_RegisterObjetListWithDescriptions.\n\n\nAJ_ObjectList-specific Translator\n\n\nTo set a specific Translator for an AJ_ObjectList, use the following APIs:\n\n\nAJ_RegisterDescriptionLanguages(const char* const* languages);\nAJ_Status AJ_RegisterObjectListWithDescriptions(const AJ_Object* objList, \nuint8_t index, AJ_DescriptionLookupFunc descLookup);\n\n\n\n\nFirst, set the language array using the AJ_RegisterDescriptionLanguages.\n\n\nNext, register with AllJoyn the AJ_Objects contained in a AJ_ObjectList. \nUse the method AJ_RegisterObjectListWithDescriptions to both register \nthe AJ_Objects and provide the Thin Core Library with the translator \nmethod to invoke when an IntrospectionWithDescriptions call is made \non this ObjectList.\n\n\nModify interface to specify which signals are Sessionless signals\n\n\nThe character ('\n') indicates that a signal will be sent as a \nSessionless signal. When a signal is flagged as such and an \nIntrospectWithDescriptions call is made on the application, \nit appends the attribute of sessionless=true to the signal \nintrospection tag. For example:\n\n\nstatic const char* const sampleInterface[] = { \n   \norg.alljoyn.Bus.eventaction.sample\n,    /* The first entry\n      is the interface name. */\n   \n?dummyMethod foo\ni\n,    /* This is just a dummy entry at index 0 \n   for illustration purposes. */\n   \n?joinMethod inStr1\ns inStr2\ns outStr\ns\n, /* Method at index 1. */ \n   \n!someSignal\n,\n   \n!\nsomeSessionlessSignal\n,\n   NULL\n};\n\n\n\n\nThe interface in the previous example is named org.alljoyn.Bus.eventaction.sample \nand contains the following:\n\n\n\n\nMethods\n\n\ndummyMethod with an input variable of foo\n\n\njoinMethod that accepts two strings and returns a string.\n\n\nSignals\n\n\nsomeSignal that requires a session to receive the signal\n\n\nsomeSessionlessSignal that is sessionless as indicated by the '\n' after the '!'.\n\n\n\n\nAdding '\n' helps applications decide if they can listen in a \npassive way (sessionless) or if they must be connected in a \nsession to receive the signal.\n\n\nRunning the Samples\n\n\nThis section describes how to run the core samples in order \nto test the events and actions feature.\n\n\nEvent picker application for Android\n\n\nAn Application used to find devices that support events and \nactions is provided as an example. This application lists \nthe device name with the set of actions and events that \nthey expose. It also allows the developer the ability to \nset up a rule or select a remote rule engine sample application.\n\n\nBuilding\n\n\nThe Android application requires the use of the Android NDK. \nThis is done due to the AllJoyn Java language binding lacking \nthe ability to dynamically create and interact with AllJoyn interfaces at runtime.\n\n\n\n\nLoad the sample application (cpp/samples/eventaction/Android) into Eclipse.\n\n\n\n\nAdd the Android v4 support library:\n\n\n\n\n\n\nRight-click on the project.\n\n\n\n\nSelect \nAndroid Tools \n Add Support Library...\n.\n\n\n\n\nFollow the prompts to download the support library.\n\n\n\n\n\n\nOpen a Windows command prompt and navigate to the \n/cpp/lib folder.\n\n\n\n\nConnect an Android device to the computer.\n\n\n\n\nExtract the following library files:\n\n\n\n\n\n\nadb pull /system/lib/libcrypto.so\n\n\n\n\n\n\nadb pull /system/lib/libssl.so\n\n\n\n\n\n\nNavigate to the eventaction sample, \n/cpp/samples/eventaction/Android.\n\n\n\n\n\n\nBuild MyAllJoynCode.so using the Android NDK:\n\n\n\n\n\n\nndk-build\n\n\n\n\n\n\nGo back into Eclipse and run the application on your mobile device. \n\n\n\n\n\n\nRight-click on the project.\n\n\n\n\nSelect \nRefresh\n.\n\n\n\n\nRight-click on the project again.\n\n\n\n\n\n\nSelect \nRun As \n Android Application\n.\n\n\n\n\n\n\nUsage\n\n\nThe Event Action Browser (EAB) uses the AllJoyn About feature \nto find devices and performs an IntrospectWithDescription request. \nIf any descriptions are found, they display as an Action or Event \nunder the corresponding section.\n\n\nLong pressing on a found item displays more developer \ninformation such as the busName, path, interface, etc.\n\n\nThe EAB further allows for the creation of a rule. Only one \nEvent can be selected and one or more Actions can be selected. \nOnce checked, select \nSave Rule\n. This now causes the EAB to \nlisten for the Signal and make BusMethod calls on the actions.\n\n\nThe application is purely an example and does not allow the \nviewing or deletion of a single rule. Pressing \nDelete Saved\n \nwill clear out the saved instances.\n\n\nIf a remote Sample Rule Application is running, the drop-down \nat the top of the EAB lists the names of the Rule instances. \nThe save and delete functions the same way, only now another \ndevice is going to listen for the Signals and place BusMethod calls.\n\n\nStandard Core Library\n\n\nLinux sample service\n\n\nDescriptions have been added to the sample in alljoyn_core/samples/basic/signal_service.cc.\n\n\nCompile\n\n\nThe sample compiles together with alljoyn_core.\n\n\nRun\n\n\nRun the application at the following location:\n\n\nbuild/\nos\n/\ncpu\n/\ndebug|release\n/dist/cpp/bin/samples/signal_service\n\n\n\n\nJava sample service\n\n\nSample service and client applications can be found at the following locations:\n\n\n\n\nsamples/java/JavaSDKDoc/JavaSDKDocIntrospectWithDescriptionService/\n\n\nsamples/java/JavaSDKDoc/JavaSDKDocIntrospectWithDescriptionClient\n\n\n\n\nCompile\n\n\nThe samples compile together with alljoyn_java.\n\n\nRun\n\n\nTo run the service: \n\n\njava -jar\nbuild/\nos\n/\ncpu\n/\ndebug|release\n/dist/java/jar/JavaSDKDocIntrospectWithDescriptionService.jar\n\n\n\n\nTo run the client: \n\n\njava -jar\nbuild/\nos\n/\ncpu\n/\ndebug|release\n/dist/java/jar/JavaSDKDocIntrospectWithDescriptionClient.jar\n\n\n\n\nThin Core Library\n\n\nCompile\n\n\n\n\nNavigate to the ajtcl folder.\n\n\nType \nscons\n to build on the platform.\n\n\n\n\nRun\n\n\nThe eventaction_service application executable is found \nunder ajtcl/samples/basic/. Run this application to exercise \nthe ability to offer descriptions when an IntrospectionWithDescriptions \ncall is made.\n\n\n$ ./samples/basic/eventaction_service\n\n\n\n\nBest Practices and Common Issues\n\n\nWhat should a Translator method do?\n\n\nThe Translator method should always return a human readable \nstring regardless of the asked for language. This allows \nfor an end user to always discover the Event and Action \ndescriptions to be shown in a UI.\n\n\nThe Translator should first try and match the requested \nlanguage tag to one that is supported and return the correct \nstring. At a minimum, if the language tag does not match it \nshould return a string in a default language. The default \nlanguage is up to the creator of the device to determine.\n\n\nWhen to use Events and Actions?\n\n\nThe power of the Events and Actions feature is that a small \nchange helps enable an end consumer to connect applications \ntogether in new ways. When a device supports certain features \nand functions that are interesting, they should be considered \nas being expressed as an Event or Action\n\n\nFor example, a talking teddy bear can have a series of phrases \nthat can be spoken. The bear by itself can say things like \n\"Good morning\", etc. By simply creating the ability for \nGoodMorning to be expressed as an Action with a description \nof \"Say Good Morning\", the bear can now be connected to \nother devices. When a consumer has a smart alarm clock, \nthe clock can be connected to have the bear speak the \n\"Good Morning\" greeting to wake them up.\n\n\nMost devices/applications have a set of defined features. \nTo allow for greater reach and interactions, these features \nshould be evaluated to understand if a simple presentation \nto an end user creates a larger experience with other devices.\n\n\nShould I introspect everything?\n\n\nSince any device can contain events or actions, it should \nbe introspected to check for these. However, it is recommended \nfirst to use the GetDescriptionLanguages API call to do the following:\n\n\n\n\nCheck that the \"org.allseen.Introspectable\" interface is present.\n\n\nEnsure that the language tag exists that matches what the \nconsumer has set on a mobile device.\n\n\n\n\nIf the language tag does not match, a pop-up or feedback to \nthe user can ask the user what language they would like descriptions \nin, else the default language will be returned. If GetDescriptionLanguages \nreturns an error, this means that the device has no events or \nactions and should not be introspected again.\n\n\nWhen the introspection with descriptions is made, a commercial \nquality application should store the object path and device \ninformation so that only an introspection request on specific \nobjects on devices can be made in the future. This allows for \nless traffic over the network\n\n\nWhich language tag is used when introspecting?\n\n\nIt is recommended to use the GetDescriptionLanguages API so \nthat the consumer knows in advance what language will show up \nfrom the device. Since Events and Actions really revolve around \nthe end consumer, it is important to provide them with information \nthat makes sense. It is best to use the language from the device \nsettings, however, the application may want to present a user \nwith a list of languages to pick from.\n\n\nAs a failsafe, if a device is introspected with an invalid tag, \nit should return a default description. Per the information in \n\nWhat should a Translator method do?\n, \na device or application should always return a description \nthat can be rendered in a UI for a consumer to link events and actions.\n\n\nCan the Rule engine be used as is?\n\n\nThe sample rule engine is very primitive and sets up a link \nbetween devices. In the AllJoyn SDK, the rule engine is currently \ncontained in both an Android application and as a standalone \nprocess. In the sample rule engine, the linkage between and \nevent and action (rule) is not long-lasting. When an application/device \npowers on and connects to the AllJoyn network, it changes the \nbusName. This means that the saved information in the rule is \nno longer valid. A commercial quality Rule Engine saves off \nthe DeviceId and ApplicationId from the About Announcement, \nand then updates the saved busName with what was received \nin the About Announcement. This allows for devices to be \npowered off and come back on later and have the rules still apply.\n\n\nThe sample rule engine also does not provide the ability to \nlist the saved rules or edit rules. This is something that \nis out of scope for the sample application.\n\n\nAs a standalone rule engine, the communication to the Android \nsample is through an AllJoyn interface and is done as a sample, \nnot a final solution.",
            "title": "Home"
        },
        {
            "location": "/develop/api-guide/events-and-actions/#events-and-actions-api-guide",
            "text": "",
            "title": "Events and Actions API Guide"
        },
        {
            "location": "/develop/api-guide/events-and-actions/#overview",
            "text": "The AllJoyn  Events and Actions feature enables the ability for \nthe discovery of signals and methods that can be understood by \nan end consumer in a user interface. An Event is made up of \nattaching a human readable description to a Signal. An Action \nis made up of attaching a human readable description to a Method.  This feature/function allows a UI-based application to discover \nand list Events and Actions in a user interface, and dynamically \ncreate a handler for the signal (event) to invoke the method \n(action) on the respective devices. The information found \ncan also be used to set a rule in an application with the \nability to listen for events and perform actions, if an application \nsupports this ability. The rule application provides the best \nuser experience when it is always running and connected to the \nuser's home network.",
            "title": "Overview"
        },
        {
            "location": "/develop/api-guide/events-and-actions/#architecture",
            "text": "The following figure illustrates one possible basic Action/Event \nenvironment that can be built with the Actions and Events feature.   Figure:  Events and Actions feature sample architecture",
            "title": "Architecture"
        },
        {
            "location": "/develop/api-guide/events-and-actions/#events-and-actions-sequence-flow",
            "text": "The following steps detail the end-to-end flow involving the \nEvents framework, Actions framework, and Event Picker application. \nThe flow assumes the following:   Devices that support the Events interface have been onboarded \nonto the AllJoyn framework and are therefore discoverable on \nthe associated Wi-Fi network.  Devices that support the Actions interface have been onboarded \nonto the AllJoyn framework and are therefore discoverable on \nthe associated Wi-Fi network.   Human readable descriptions have been created as part of \nthe software on the devices to be returned in the introspection XML. \nThese can be created by the OEM, standardized descriptions \nprovided by the AllSeen Alliance can be used.    A device with the Event Picker application installed \ndiscovers other devices on the network that support the \nEvents interface. The device's UI presents a list of those \ndevices such as TV, washer, and thermostat.   The Event Picker application introspects the Events interface \non the devices listed in the UI, and presents a list of human \nreadable descriptions in the UI. Example descriptions include \nTV is on, Washer cycle complete, and Thermostat cooling.  The device with the Event Picker application installed \ndiscovers devices on the network that support the Action interface. \nThe device's UI presents a list of those devices such as Kitchen Lights.  The Event Picker application introspects the Action methods \non the devices listed in the UI, and presents a list of human \nreadable descriptions in the UI. The events (TV is on, \nWasher cycle complete, Thermostat cooling) are paired with \na corresponding action that can be completed for that device. \nExamples include Turn light on, Turn light color to blue, \nBlink light three times.  The user can select an event and select an action to \nmap the two. This pairs the event and the action, creating \na rule the user wants to have occur.",
            "title": "Events and Actions sequence flow"
        },
        {
            "location": "/develop/api-guide/events-and-actions/#alljoyn-interface-overview",
            "text": "This section walks through an AllJoyn interface and briefly \nexplains the components. This is not intended to be a \nreplacement for understanding how to build an interface \nand design one, but just to set the stage on how Events \nand Actions fit into the core AllJoyn software.  Interface structure  AllJoyn interfaces are defined as XML and contain specific tags \nthat represent the definition expressed. Every interface has \na  node  tag that indicates the object path in which the defined \ninterfaces exist. Inside a  node  tag contains the list of \ninterfaces defined in  interface name=\"SOME_NAME\"  tags. \nThese interfaces define the specific functionality that are exposed.  node  tags can be nested; when no name is supplied, the default is \"/\".  Methods, Signals, and Properties  Methods, Signals, and Properties make up the definition of \nthe interface for its functionality.   A method is defined by a   tag, Signals   \nand Properties  .  The  method  and  signal  tags allow for  arg  tags to be \ncontained that define the arguments.  A property does not accept arguments as it is only a single type.   Example interface XML  node \n   node name= child / \n\n   interface name= com.example.LightBulb \n\n       method name= ToggleSwitch \n          arg name= brightess  type= i  direction= in / \n       /method \n\n       signal name= LightOn  sessionless= true \n       /signal \n       signal name= LightOff  sessionless= true \n       /signal \n\n       property name= LightState  type= y  access= read / \n\n    /interface  /node",
            "title": "AllJoyn Interface Overview"
        },
        {
            "location": "/develop/api-guide/events-and-actions/#orgallseenintrospectable-interface",
            "text": "To allow the ability to maintain backwards compatibility with \nDBus, a new Introspection interface was created to allow for \nthe return of descriptions as well as understanding if a \nsignal is sessionless or requires joining a session in order \nto receive the signal.  Interface org.allseen.Introspectable  The org.allseen.Introspectable interface provides access to \nthe introspection XML containing the description attributes. \nThe following subsection detail the interface's methods and properties.  interface name= org.allseen.Introspectable \n    method name= GetDescriptionLanguages \n       arg name= languageTags  type= as  direction= out / \n    /method \n\n    method name= IntrospectWithDescription \n       arg name= languageTag  type= s  direction= in / \n       arg name= data  type= s  direction= out / \n    /method  /interface   GetDescriptionLanguages  Return the aggregate of the languages for which this object has descriptions.  For example, if an object implements two interfaces, X and Y \n(X has all of its members described in English (en) and French (fr) \nand Y has some descriptions in English (en) and Chinese (cn)), \nthis method returns [\"en\", \"fr\", \"cn\"].  NOTE:  The language tags must comply with IETF language tag standards.  IntrospectWithDescription  This method returns the introspection XML with descriptions \nin the specified language (exact match only - no best match).  If an element, such as a method, does not have a description \nin that language, then a language tag determined by the implementer \nof the introspected device will be used. This provides the \nfollowing benefits:   It allows the ability to provide a \"default\" language so \nthat devices/applications that support Events and Actions \nwill always be visible to a consumer.  A device manufacturer can provide a closest language \nalgorithm to adjust the default to a language that is \nclose to the requested one.   For example, if a device supports English (\"en\") and Spanish (\"es\"), \nand the requested language is Portuguese (\"pt\"), it is better \nto return Spanish as it is Latin-based and may share some common words.  NOTE:  The AllJoyn library does not provide IETF language tag matching logic.  Sample introspection XML  The following is a sample of the XML that is returned by \nIntrospectWithDescription; it adds the description to the LightOn signal \nwhich creates a LightOn Event.  node \n    description Your lightbulb /description \n\n    node name= child \n       description Some helpful description /description \n    /node \n\n    interface name= com.example.LightBulb \n       description Provides basic lighting functionality /description \n\n       method name= ToggleSwitch \n          description Invoke this to toggle whether the light is on or off /description \n          arg name= brightess  type= i  direction= in \n             description A value to specify how bright the bulb should illuminate /description \n          /arg \n       /method \n\n       signal name= LightOn  sessionless= true \n          description Emitted when the light turns on /description \n       /signal \n       signal name= LightOff  sessionless= true \n          description Emitted when the light turns off /description \n       /signal \n\n       property name= LightState  type= y  access= read \n          description The current state of this light bulb /description \n       /property \n\n    /interface  /node",
            "title": "org.allseen.Introspectable Interface"
        },
        {
            "location": "/develop/api-guide/events-and-actions/#setting-descriptions-standard-core-library",
            "text": "This section provides usage instructions on the APIs that \nhave been added to the AllJoyn Standard Core Library. \nThese APIs provide the ability to add the introspection \ndescriptions to AllJoyn BusObjects and interfaces. \nThe APIs provide mechanisms for providing these descriptions \nin multiple languages.  API concepts  As mentioned above, human readable descriptions document \nBusObjects and interfaces hosted by an AllJoyn service framework. \nEach description can be offered in multiple languages \ndenoted with an IETF language tag, for example, \"en\" for English.  Set descriptions for a single language  To provide your descriptions in a single language, use the \nAPIs on the BusObject and interfaces to set the description \nand its associated language tag.  In all cases where only a single language is set, this \nstring will be returned to an application that asks for descriptions.  Set descriptions for multiple language tags  To provide descriptions in multiple languages provide one or \nmore Translator implementations. The job of the Translator \nis to translate the descriptions set on the BusObjects and \ninterfaces. Translators may be specific on a BusObject or \ninterface, or global in the BusAttachment.  When generating the introspection XML for each BusObject or \ninterface, the description text is chosen using the following logic:   The BusObject or interface's own Translator overrides the \nBusAttachment's Translator.  A Translator is given priority on providing the translation. \nFor instance, if the BusObject's description is \"Turn on the lights\" \nin \"en\", even if \"en\" is being requested, the XML generator queries \nthe Translator with \"Please translate 'Turn on the lights' \nfrom 'en' to 'en' \". IntrospectWithDescription should always \nreturn a description in some default language if an unrecognized \nlanguage is requested. One method of doing this is for the \nTranslator to return NULL, in which case the BusObject or \nInterfaceDescription's descriptions will be used as the default, \nAlternately, the Translator may return a default language translation. \nMore complex algorithms can provide a similar language match \nso that the end user may have an understanding of the description.   Putting all description texts in a Translator  It is possible to concentrate all descriptions in the \nTranslator implementation by setting the language to the \nempty string, \"\", which has a special meaning. It means \nthat the description in the BusObject or InterfaceDescription \nis not actually a description but rather a \"tag\" or lookup key \nthat is meant to be passed to a Translator.  In this scenario, it is crucial that the Translator return a \ndefault language description even when the language requested \nis not matched. If the Translator returns NULL, no description \nwill be returned.  NOTE:  In this scenario, the description is a lookup tag that \nis never returned in the introspection XML.  Linux  Setting descriptions in a single language  The easiest way to support descriptions in a single language \nis to set the description texts on the BusObject and \nInterfaceDescription objects. Even though the description \nis only in a single language, the AllJoyn framework still \nneeds to know which language is specified, and the language \nmust be specified in the APIs.  BusObject and InterfaceDescription support setting a single \ndescription and its language with the following API methods.  void BusObject::SetDescription(const char* language, const char* text)\nvoid InterfaceDescription::SetDescriptionLanguage(const char* language)\nvoid InterfaceDescription::SetDescription(const char* description)\n\nQStatus InterfaceDescription::SetMemberDescription(const char* member, \n   const char* description, bool isSessionlessSignal)\nQStatus InterfaceDescription::SetArgDescription(const char* member, \n   const char* arg, const char* description)\nQStatus InterfaceDescription::SetPropertyDescription(const char* name, \n   const char* description)  Providing translations of descriptions  Defining a Translator  One way to support descriptions in multiple languages is to \nstart with a single description on the BusObject and InterfaceDescription \nobjects and add a Translator. A Translator is an object that \nimplements the ajn::Translator abstract base class.  A Translator class provides the list of languages it can \ntranslate to by implementing the following methods which \nprovide the AllJoyn framework with the ability to iterate \nover the Translator's target languages:  size_t NumTargetLanguages()\nvoid GetTargetLanguage(size_t index, qcc::String  ret)  In most cases, a Translator provides translations at runtime using the following:  const char* Translate(const char* sourceLanguage, const char* targetLanguage, \n   const char* source)  This function should provide a translation of the \"source\" \ntext from \"sourceLanguage\" to \"targetLanguage\". The string \nreturned must be statically allocated, that is, its memory \nmust not be freed at any point.  Translators returning dynamically allocated strings  In special cases where your application needs to return \na string that must be freed at some point after it is used, \nuse this version of the Translate method instead:  const char* Translate(const char* sourceLanguage,\n   const char* targetLanguage, const char* source, qcc::String  buffer)  The \"buffer\" parameter of this function should hold the memory \nreturned by the function. The following is an example of how \nto implement this taken from AllJoyn's own code:  const char* JTranslator::Translate(const char* sourceLanguage, \n      const char* targetLanguage,\n      const char* source, qcc::String  buffer)\n{\n   QCC_DbgPrintf(( JTranslator::Translate() ));\n\n      /* ... */\n\n      const char* chars = env- GetStringUTFChars(jres, NULL);\n      buffer.assign(chars);\n      env- ReleaseStringUTFChars(jres, chars);\n\n\n      return buffer.c_str();\n}  Setting the Translator  Translators are set on the BusAttachment, BusObject, or \nInterfaceDescription using the following functions:  void BusAttachment::SetDescriptionTranslator(Translator* translator)\nvoid BusObject::SetDescriptionTranslator(Translator* translator)\nvoid InterfaceDescription::SetDescriptionTranslator(Translator* translator)  Java  Setting descriptions  To set a BusObject's description, specify it when you register the object:  public Status registerBusObject(BusObject busObj,\nString objPath, boolean secure, String languageTag, String description)  To set descriptions for an interface, use the following annotations:     Interface  Annotation type  Annotations      org.alljoyn.bus.annotation  BusInterface  descriptionLanguage ,  description     BusMethod  description     BusSignal  descriptionLanguage ,  description     BusProperty  description     Setting Translators  As in the Linux binding, Translators may be provided on the \nBusAttachment, BusObject, or Interface levels. The org.alljoyn.bus.Translator \ninterface is equivalent to the Linux ajn::Translator abstract class.  To specify a Translator on the BusAttachment:  BusAttachment.setDescriptionTranslator(Translator translator)  To specify a Translator on the BusObject with the call to BusAttachment.registerBusObject:  public Status registerBusObject(BusObject busObj, String objPath, \nboolean secure, String languageTag, String description,\nTranslator dt)  To specify a Translator for an Interface, specify its class name \nin the BusInterface descriptionTranslator annotation. \nThe AllJoyn framework instantiates a single instance of the \nTranslator class no matter how many interfaces you specify it on.  Objective-C  Setting descriptions  To set descriptions on a BusObject, use AJNBusObject's method:  - (void)setDescription:(NSString*)description inLanguage:(NSString*)language  To set descriptions on an Interface, use AJNInterfaceDescription's methods:  - (void)setDescriptionLanguage:(NSString *)language;\n\n- (void)setDescription:(NSString *)description;\n- (QStatus)setMemberDescription:(NSString *)description \nforMemberWithName:(NSString*)member sessionlessSignal:(BOOL)sessionless;\n\n- (QStatus)setPropertyDescription:(NSString *)description \nforPropertyWithName:(NSString *)propName;\n\n- (QStatus)setArgDescription:(NSString *)description \nforArgument:(NSString *)argName ofMember:(NSStr ing *)member;  Setting Translators  The AJNTranslator protocol is equivalent to the C++ ajn::Translator \nabstract base class. To set the Translator, the following method \nis supported by AJNBusAttachment, AJNBusObject, and AJNInterfaceDescription:  - (void)setDescriptionTranslator:(id AJNTranslator )translator;  Code generator  The Objective-C code generator supports specifying descriptions \nin the input XML. Since the XML is modeled on the introspection XML, \nsimply specify the descriptions in the same manner they are returned, \nbut with added attributes to define the language of the descriptions. \nThe  description  element under a  node  or  interface  must contain \na \"language\" attribute.  The following is an example of an XML containing descriptions:  xml \n    node name= org/alljoyn/Bus/sample \n       description language= en This is a sample object /description \n       annotation name= org.alljoyn.lang.objc  value= SampleObject / \n          interface name= org.alljoyn.bus.sample \n             description language= en This is a sample interface /description \n          annotation name= org.alljoyn.lang.objc  value= SampleObjectDelegate / \n\n          method name= Concatenate \n             description This concatenates strings /description \n             arg name= str1  type= s  direction= in \n                annotation name= org.alljoyn.lang.objc  value= concatenateString: / \n             /arg \n             arg name= str2  type= s  direction= in \n                annotation name= org.alljoyn.lang.objc  value= withString: / \n             /arg \n             arg name= outStr  type= s  direction= out / \n          /method \n       /interface \n    /node  /xml",
            "title": "Setting Descriptions (Standard Core Library)"
        },
        {
            "location": "/develop/api-guide/events-and-actions/#setting-descriptions-thin-core-library",
            "text": "This chapter provides usage instructions on the Thin Core Library \nusage in order to set descriptions on the interfaces so that events \nand actions can be discovered.  Thin Linux  There are API calls that allow the ability to assign a \ndescription to interface introspection elements. The actual entry \nof the description is table driven, much like the interface creation. \nOne creates a language tag array, a set of strings they \nwish to expose as descriptions, a translate function and \n#defines to lookup the correct strings.  Adding descriptions  Descriptions can be added to any attribute found in the \nintrospection XML. The following subsection detail the \nability to return descriptions in the Thin Core Library application.  Create arrays for the language tags used  Depending on the device being made and the target market \nregions, the developer may wish to support multiple languages. \nIn order to provide this support, create a static array that \ncontains an IETF language tag, for example, \"en\" for English, \n\"es\" for Spanish, etc.  static const char* const languages[] = {  en ,  es  };  Set values for encoded descriptions  Due to running on a memory-constrained platform, the design \nof providing a description uses an encoding schema. This schema \nis defined as a uint32 broken up into the following values \nthat are compressed into the single uint32 value:   BusObject base ID  Interface index  Member index  Arg index   A helper #define named AJ_DESCRIPTION_ID is found in \naj_introspect.h to help encode the messages.  For example, an encoding for the first AJ_Object would be:  AJ_DESCRIPTION_ID(SAMPLE_OBJECT_ID, 0, 0, 0)  An encoding for the first interface in the above object would be:  AJ_DESCRIPTION_ID(SAMPLE_OBJECT_ID, 1, 0, 0)  Implement Translator method  The Translator method is a function pointer matching the signature of:  typedef const char* (*AJ_DescriptionLookupFunc)(uint32_t descId, \nconst char* lang);  This method is invoked on every introspection element and \ngives the app developer the ability to control what string \nis set on which element. The implementation of the Translator \nmethod should always try and return a description if a descId \ncontains descriptions. This allows an application developer to \nreceive and display descriptions when a lang tag of \"\" (empty string) \nor a value that is not contained in the language array are asked for.  NOTE:  An example implementation of a Translator is contained \nin the ajtcl/sample/basic/eventaction_service.c.  Set Translator  Translator methods are set per AJ_ObjectList when the AJ_ObjectList \nis registered using the C API AJ_RegisterObjetListWithDescriptions.  AJ_ObjectList-specific Translator  To set a specific Translator for an AJ_ObjectList, use the following APIs:  AJ_RegisterDescriptionLanguages(const char* const* languages);\nAJ_Status AJ_RegisterObjectListWithDescriptions(const AJ_Object* objList, \nuint8_t index, AJ_DescriptionLookupFunc descLookup);  First, set the language array using the AJ_RegisterDescriptionLanguages.  Next, register with AllJoyn the AJ_Objects contained in a AJ_ObjectList. \nUse the method AJ_RegisterObjectListWithDescriptions to both register \nthe AJ_Objects and provide the Thin Core Library with the translator \nmethod to invoke when an IntrospectionWithDescriptions call is made \non this ObjectList.  Modify interface to specify which signals are Sessionless signals  The character (' ') indicates that a signal will be sent as a \nSessionless signal. When a signal is flagged as such and an \nIntrospectWithDescriptions call is made on the application, \nit appends the attribute of sessionless=true to the signal \nintrospection tag. For example:  static const char* const sampleInterface[] = { \n    org.alljoyn.Bus.eventaction.sample ,    /* The first entry\n      is the interface name. */\n    ?dummyMethod foo i ,    /* This is just a dummy entry at index 0 \n   for illustration purposes. */\n    ?joinMethod inStr1 s inStr2 s outStr s , /* Method at index 1. */ \n    !someSignal ,\n    ! someSessionlessSignal ,\n   NULL\n};  The interface in the previous example is named org.alljoyn.Bus.eventaction.sample \nand contains the following:   Methods  dummyMethod with an input variable of foo  joinMethod that accepts two strings and returns a string.  Signals  someSignal that requires a session to receive the signal  someSessionlessSignal that is sessionless as indicated by the ' ' after the '!'.   Adding ' ' helps applications decide if they can listen in a \npassive way (sessionless) or if they must be connected in a \nsession to receive the signal.",
            "title": "Setting Descriptions (Thin Core Library)"
        },
        {
            "location": "/develop/api-guide/events-and-actions/#running-the-samples",
            "text": "This section describes how to run the core samples in order \nto test the events and actions feature.  Event picker application for Android  An Application used to find devices that support events and \nactions is provided as an example. This application lists \nthe device name with the set of actions and events that \nthey expose. It also allows the developer the ability to \nset up a rule or select a remote rule engine sample application.  Building  The Android application requires the use of the Android NDK. \nThis is done due to the AllJoyn Java language binding lacking \nthe ability to dynamically create and interact with AllJoyn interfaces at runtime.   Load the sample application (cpp/samples/eventaction/Android) into Eclipse.   Add the Android v4 support library:    Right-click on the project.   Select  Android Tools   Add Support Library... .   Follow the prompts to download the support library.    Open a Windows command prompt and navigate to the  /cpp/lib folder.   Connect an Android device to the computer.   Extract the following library files:    adb pull /system/lib/libcrypto.so    adb pull /system/lib/libssl.so    Navigate to the eventaction sample,  /cpp/samples/eventaction/Android.    Build MyAllJoynCode.so using the Android NDK:    ndk-build    Go back into Eclipse and run the application on your mobile device.     Right-click on the project.   Select  Refresh .   Right-click on the project again.    Select  Run As   Android Application .    Usage  The Event Action Browser (EAB) uses the AllJoyn About feature \nto find devices and performs an IntrospectWithDescription request. \nIf any descriptions are found, they display as an Action or Event \nunder the corresponding section.  Long pressing on a found item displays more developer \ninformation such as the busName, path, interface, etc.  The EAB further allows for the creation of a rule. Only one \nEvent can be selected and one or more Actions can be selected. \nOnce checked, select  Save Rule . This now causes the EAB to \nlisten for the Signal and make BusMethod calls on the actions.  The application is purely an example and does not allow the \nviewing or deletion of a single rule. Pressing  Delete Saved  \nwill clear out the saved instances.  If a remote Sample Rule Application is running, the drop-down \nat the top of the EAB lists the names of the Rule instances. \nThe save and delete functions the same way, only now another \ndevice is going to listen for the Signals and place BusMethod calls.  Standard Core Library  Linux sample service  Descriptions have been added to the sample in alljoyn_core/samples/basic/signal_service.cc.  Compile  The sample compiles together with alljoyn_core.  Run  Run the application at the following location:  build/ os / cpu / debug|release /dist/cpp/bin/samples/signal_service  Java sample service  Sample service and client applications can be found at the following locations:   samples/java/JavaSDKDoc/JavaSDKDocIntrospectWithDescriptionService/  samples/java/JavaSDKDoc/JavaSDKDocIntrospectWithDescriptionClient   Compile  The samples compile together with alljoyn_java.  Run  To run the service:   java -jar\nbuild/ os / cpu / debug|release /dist/java/jar/JavaSDKDocIntrospectWithDescriptionService.jar  To run the client:   java -jar\nbuild/ os / cpu / debug|release /dist/java/jar/JavaSDKDocIntrospectWithDescriptionClient.jar  Thin Core Library  Compile   Navigate to the ajtcl folder.  Type  scons  to build on the platform.   Run  The eventaction_service application executable is found \nunder ajtcl/samples/basic/. Run this application to exercise \nthe ability to offer descriptions when an IntrospectionWithDescriptions \ncall is made.  $ ./samples/basic/eventaction_service",
            "title": "Running the Samples"
        },
        {
            "location": "/develop/api-guide/events-and-actions/#best-practices-and-common-issues",
            "text": "What should a Translator method do?  The Translator method should always return a human readable \nstring regardless of the asked for language. This allows \nfor an end user to always discover the Event and Action \ndescriptions to be shown in a UI.  The Translator should first try and match the requested \nlanguage tag to one that is supported and return the correct \nstring. At a minimum, if the language tag does not match it \nshould return a string in a default language. The default \nlanguage is up to the creator of the device to determine.  When to use Events and Actions?  The power of the Events and Actions feature is that a small \nchange helps enable an end consumer to connect applications \ntogether in new ways. When a device supports certain features \nand functions that are interesting, they should be considered \nas being expressed as an Event or Action  For example, a talking teddy bear can have a series of phrases \nthat can be spoken. The bear by itself can say things like \n\"Good morning\", etc. By simply creating the ability for \nGoodMorning to be expressed as an Action with a description \nof \"Say Good Morning\", the bear can now be connected to \nother devices. When a consumer has a smart alarm clock, \nthe clock can be connected to have the bear speak the \n\"Good Morning\" greeting to wake them up.  Most devices/applications have a set of defined features. \nTo allow for greater reach and interactions, these features \nshould be evaluated to understand if a simple presentation \nto an end user creates a larger experience with other devices.  Should I introspect everything?  Since any device can contain events or actions, it should \nbe introspected to check for these. However, it is recommended \nfirst to use the GetDescriptionLanguages API call to do the following:   Check that the \"org.allseen.Introspectable\" interface is present.  Ensure that the language tag exists that matches what the \nconsumer has set on a mobile device.   If the language tag does not match, a pop-up or feedback to \nthe user can ask the user what language they would like descriptions \nin, else the default language will be returned. If GetDescriptionLanguages \nreturns an error, this means that the device has no events or \nactions and should not be introspected again.  When the introspection with descriptions is made, a commercial \nquality application should store the object path and device \ninformation so that only an introspection request on specific \nobjects on devices can be made in the future. This allows for \nless traffic over the network  Which language tag is used when introspecting?  It is recommended to use the GetDescriptionLanguages API so \nthat the consumer knows in advance what language will show up \nfrom the device. Since Events and Actions really revolve around \nthe end consumer, it is important to provide them with information \nthat makes sense. It is best to use the language from the device \nsettings, however, the application may want to present a user \nwith a list of languages to pick from.  As a failsafe, if a device is introspected with an invalid tag, \nit should return a default description. Per the information in  What should a Translator method do? , \na device or application should always return a description \nthat can be rendered in a UI for a consumer to link events and actions.  Can the Rule engine be used as is?  The sample rule engine is very primitive and sets up a link \nbetween devices. In the AllJoyn SDK, the rule engine is currently \ncontained in both an Android application and as a standalone \nprocess. In the sample rule engine, the linkage between and \nevent and action (rule) is not long-lasting. When an application/device \npowers on and connects to the AllJoyn network, it changes the \nbusName. This means that the saved information in the rule is \nno longer valid. A commercial quality Rule Engine saves off \nthe DeviceId and ApplicationId from the About Announcement, \nand then updates the saved busName with what was received \nin the About Announcement. This allows for devices to be \npowered off and come back on later and have the rules still apply.  The sample rule engine also does not provide the ability to \nlist the saved rules or edit rules. This is something that \nis out of scope for the sample application.  As a standalone rule engine, the communication to the Android \nsample is through an AllJoyn interface and is done as a sample, \nnot a final solution.",
            "title": "Best Practices and Common Issues"
        },
        {
            "location": "/develop/api-guide/notification/c-thin/",
            "text": "Notification API Guide - C (Thin Core)\n\n\nObtain the Notification service framework\n\n\nThe source code for this service framework can be found on\nthe \nAllSeen Alliance gerrit page\n as a git project.\nIn addition, the \najtcl\n project\nis needed to compile this service framework.\n\n\nIf the target platform already supports the AllJoyn\n\nThin Library framework, follow the target platform documentation\nfor detailed setup and download instructions.\n\n\nIf the target platform does not support the AllJoyn Thin\nLibrary framework porting work is required to support this target.\nSee the \nIntroduction to AllJoyn Thin Library\n for more\ninformation about the AllJoyn Thin Library framework.\n\n\nReference code\n\n\nThe reference code consists of a module that implements a\nNotification producer layer and a module that implements\ncode to create and send a notification.\n\n\nNotification producer modules\n\n\n\n\n\n\n\n\nProducer module\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNotificationCommon\n\n\nCommon code for the Notification service framework that is shared by the Notification Producer and Notification Consumer.\n\n\n\n\n\n\nNotificationProducer\n\n\nA module in the Notification service framework that is used by a developer/OEM to build an application that exposes the ability to send notifications that are received by Notification Consumers.\n\n\n\n\n\n\nNotificationProducerSampleUtil\n\n\nSample code for Linux platform that extends the NotificationProducerSample to allow for console input from the user.\n\n\n\n\n\n\nNotificationProducerSample\n\n\nSample code for creating and sending a notification that exercises the NotificationProducer API. There are two (2) samples:\nSimple - sends the same notification\nAC - complements the Air Conditioner ControlPanel sample and sends notifications generated by the changes in the ControlPanel model.\n\n\n\n\n\n\n\n\nBuild a Notification producer\n\n\nThe following steps provide the high-level process to build a Notification producer.\n\n\n\n\nCreate the base for the AllJoyn application. See the \nBuild an\nApplication using the Thin Library\n section for instructions.\n\n\nCreate a notification content structure and populate the\nnecessary fields.\n\n\nSend the notification specifying its content, message type,\nand time to live (TTL) value.\n\n\n\n\nImplementing a Notification Producer\n\n\nCreate the base for the AllJoyn application\n\n\nSee the \nBuild an Application using the Thin Library\n\nsection for instructions.\n\n\nCreate a notification content structure and populate the necessary fields\n\n\nCreate a notification content structure and helper structures\n\n\nstatic AJNS_NotificationContent notificationContent;\nstruct AJNS_DictionaryEntry textToSend[2] customAttributesToSend[2]\n   richAudioUrls[2]\n\n\n\n\nSet text per language to be sent\n\n\nnotificationContent.numTexts = 2;\ntextToSend[0].key = \nen\n;\ntextToSend[0].value = \nHello AJL World\n;\ntextToSend[1].key = \nes_SP\n;\ntextToSend[1].value = \nHola AJL Munda\n;\nnotificationContent.texts = textToSend;\n\n\n\n\nNOTES\n\n\n\n\nThe string assigned to the \"value\" variable will travel\nto every instance of a Notification consumer. It is important\nthat this text be correct and complete so the Notification\nConsumer side will correctly display the information.\n\n\nFor the sake of completeness and integrity of overall device's\nuser experience, it is recommended to have the textToSend array\nmatch the SupportedLanguages list published by the About feature\nand provisioned for the PropertyStore in the application.\n\n\n\n\nNotification content optional parameters\n\n\nThe following optional parameters can be added to the\nnotification content.\n\n\nCustom attributes\n\n\nnotificationContent.numCustomAttributes = 2;\ncustomAttributesToSend[0].key = \nkey 0\n;\ncustomAttributesToSend[0].value = \nval 0\n;\ncustomAttributesToSend[1].key = \nkey 1\n;\ncustomAttributesToSend[1].value = \nval 1\n;\nnotificationContent.customAttributes = customAttributesToSend;\n\n\n\n\nAudio URLs\n\n\nnotificationContent.numAudioUrls = 2;\nrichAudioUrls[0].key = \nen\n;\nrichAudioUrls[0].value = \nhttp://www.getAudio1.org\n;\nrichAudioUrls[1].key = \nes_SP\n;\nrichAudioUrls[1].value = \nhttp://www.getAudio2.org\n;\nnotificationContent.richAudioUrls = richAudioUrls;\n\n\n\n\nIcon URLs\n\n\nnotificationContent.richIconUrl = \nhttp://www.getIcon1.org\n;\n\n\n\n\nIcon object path\n\n\nnotificationContent.richIconObjectPath = \n/icon/MyDevice\n;\n\n\n\n\nAudio object path\n\n\nnotificationContent.richAudioObjectPath = \n/audio/MyDevice\n;\n\n\n\n\nControl panel service response object path\n\n\nnotificationContent.controlPanelServiceObjectPath = \n/ControlPanel/MyDevice/mainpanel\n;\n\n\n\n\nSend the notification\n\n\nAfter the notification content is created, you can send a\nnotification with the created content. Any notification\nyou send must include the notification content, message type,\nand TTL for the message.\n\n\nYou can optionally provide a pointer to the serial number\nthat will be updated with the outgoing AllJoyn signal's message\nserial number.\n\n\nThe serial number is required to cancel a notification prior\nto the TTL expiration. See \nCancel a specific notification message\n\nfor more information\n\n\nuint16_t messageType = AJNS_NOTIFICATION_MESSAGE_TYPE_INFO;\nuint32_t ttl = 20000;\nuint32_t serialNum;\nAJNS_Producer_SendNotification(\nbusAttachment, \nnotificationContent,\n   messageType, ttl, \nserialNum)\n\n\n\n\nNOTES\n\n\n\n\nOther fields in the notification will be added by the\nNotification producer to identify the sender. In particular,\nthe AppID, AppName, DeviceId, and DeviceName will be obtained\nfrom the PropertyStore.\n\n\nYou will need the serial number if you wish to later cancel\nthe notification prior to the TTL expiry using the CancelNotification API.\n\n\n\n\nDelete the last notification message\n\n\nOnce a notification was sent out and the application writer\nwould like to cancel it before the TTL expiration, for example,\nif the notification was sent for an event that no longer occurs,\nuse the DeleteLastNotification API to delete the last notification\nfor a given message type.\n\n\nAJNS_Producer_DeleteLastNotification(\nbusAttachment, messageType);\n\n\n\n\nCancel a specific notification message\n\n\nAn alternative to deleting the last notification message for\na particular message type is to cancel a specific notification\nmessage by its serial number that was returned by the \nSendNotification\n\ncall.Use the CancelNotification API to do so. The message's\nserial number must be included.\n\n\nAJNS_Producer_CancelNotification(\nbusAttachment, serialNum)\n\n\n\n\nCompile the code\n\n\nThe process to compile varies depending on the host and target\nplatform. Each host and platform needs may require a specific\ndirectory and file layout, build toolchains, procedures, and\nsupported AllJoyn service frameworks. Refer to the target\nplatform documentation that contains instructions on how to\norganize and set up the build process to incorporate the\nnecessary files to compile your Thin Library application.\n\n\nFor more details on how to combine this AllJoyn service\nframework with other AllJoyn service framework softwarem,\nsee the [Build an Application using the Thin Library][build-app-using-thin-library] section.",
            "title": "C thin"
        },
        {
            "location": "/develop/api-guide/notification/c-thin/#notification-api-guide-c-thin-core",
            "text": "",
            "title": "Notification API Guide - C (Thin Core)"
        },
        {
            "location": "/develop/api-guide/notification/c-thin/#obtain-the-notification-service-framework",
            "text": "The source code for this service framework can be found on\nthe  AllSeen Alliance gerrit page  as a git project.\nIn addition, the  ajtcl  project\nis needed to compile this service framework.  If the target platform already supports the AllJoyn \nThin Library framework, follow the target platform documentation\nfor detailed setup and download instructions.  If the target platform does not support the AllJoyn Thin\nLibrary framework porting work is required to support this target.\nSee the  Introduction to AllJoyn Thin Library  for more\ninformation about the AllJoyn Thin Library framework.  Reference code  The reference code consists of a module that implements a\nNotification producer layer and a module that implements\ncode to create and send a notification.  Notification producer modules     Producer module  Description      NotificationCommon  Common code for the Notification service framework that is shared by the Notification Producer and Notification Consumer.    NotificationProducer  A module in the Notification service framework that is used by a developer/OEM to build an application that exposes the ability to send notifications that are received by Notification Consumers.    NotificationProducerSampleUtil  Sample code for Linux platform that extends the NotificationProducerSample to allow for console input from the user.    NotificationProducerSample  Sample code for creating and sending a notification that exercises the NotificationProducer API. There are two (2) samples: Simple - sends the same notification AC - complements the Air Conditioner ControlPanel sample and sends notifications generated by the changes in the ControlPanel model.",
            "title": "Obtain the Notification service framework"
        },
        {
            "location": "/develop/api-guide/notification/c-thin/#build-a-notification-producer",
            "text": "The following steps provide the high-level process to build a Notification producer.   Create the base for the AllJoyn application. See the  Build an\nApplication using the Thin Library  section for instructions.  Create a notification content structure and populate the\nnecessary fields.  Send the notification specifying its content, message type,\nand time to live (TTL) value.",
            "title": "Build a Notification producer"
        },
        {
            "location": "/develop/api-guide/notification/c-thin/#implementing-a-notification-producer",
            "text": "Create the base for the AllJoyn application  See the  Build an Application using the Thin Library \nsection for instructions.  Create a notification content structure and populate the necessary fields  Create a notification content structure and helper structures  static AJNS_NotificationContent notificationContent;\nstruct AJNS_DictionaryEntry textToSend[2] customAttributesToSend[2]\n   richAudioUrls[2]  Set text per language to be sent  notificationContent.numTexts = 2;\ntextToSend[0].key =  en ;\ntextToSend[0].value =  Hello AJL World ;\ntextToSend[1].key =  es_SP ;\ntextToSend[1].value =  Hola AJL Munda ;\nnotificationContent.texts = textToSend;  NOTES   The string assigned to the \"value\" variable will travel\nto every instance of a Notification consumer. It is important\nthat this text be correct and complete so the Notification\nConsumer side will correctly display the information.  For the sake of completeness and integrity of overall device's\nuser experience, it is recommended to have the textToSend array\nmatch the SupportedLanguages list published by the About feature\nand provisioned for the PropertyStore in the application.   Notification content optional parameters  The following optional parameters can be added to the\nnotification content.  Custom attributes  notificationContent.numCustomAttributes = 2;\ncustomAttributesToSend[0].key =  key 0 ;\ncustomAttributesToSend[0].value =  val 0 ;\ncustomAttributesToSend[1].key =  key 1 ;\ncustomAttributesToSend[1].value =  val 1 ;\nnotificationContent.customAttributes = customAttributesToSend;  Audio URLs  notificationContent.numAudioUrls = 2;\nrichAudioUrls[0].key =  en ;\nrichAudioUrls[0].value =  http://www.getAudio1.org ;\nrichAudioUrls[1].key =  es_SP ;\nrichAudioUrls[1].value =  http://www.getAudio2.org ;\nnotificationContent.richAudioUrls = richAudioUrls;  Icon URLs  notificationContent.richIconUrl =  http://www.getIcon1.org ;  Icon object path  notificationContent.richIconObjectPath =  /icon/MyDevice ;  Audio object path  notificationContent.richAudioObjectPath =  /audio/MyDevice ;  Control panel service response object path  notificationContent.controlPanelServiceObjectPath =  /ControlPanel/MyDevice/mainpanel ;  Send the notification  After the notification content is created, you can send a\nnotification with the created content. Any notification\nyou send must include the notification content, message type,\nand TTL for the message.  You can optionally provide a pointer to the serial number\nthat will be updated with the outgoing AllJoyn signal's message\nserial number.  The serial number is required to cancel a notification prior\nto the TTL expiration. See  Cancel a specific notification message \nfor more information  uint16_t messageType = AJNS_NOTIFICATION_MESSAGE_TYPE_INFO;\nuint32_t ttl = 20000;\nuint32_t serialNum;\nAJNS_Producer_SendNotification( busAttachment,  notificationContent,\n   messageType, ttl,  serialNum)  NOTES   Other fields in the notification will be added by the\nNotification producer to identify the sender. In particular,\nthe AppID, AppName, DeviceId, and DeviceName will be obtained\nfrom the PropertyStore.  You will need the serial number if you wish to later cancel\nthe notification prior to the TTL expiry using the CancelNotification API.   Delete the last notification message  Once a notification was sent out and the application writer\nwould like to cancel it before the TTL expiration, for example,\nif the notification was sent for an event that no longer occurs,\nuse the DeleteLastNotification API to delete the last notification\nfor a given message type.  AJNS_Producer_DeleteLastNotification( busAttachment, messageType);  Cancel a specific notification message  An alternative to deleting the last notification message for\na particular message type is to cancel a specific notification\nmessage by its serial number that was returned by the  SendNotification \ncall.Use the CancelNotification API to do so. The message's\nserial number must be included.  AJNS_Producer_CancelNotification( busAttachment, serialNum)  Compile the code  The process to compile varies depending on the host and target\nplatform. Each host and platform needs may require a specific\ndirectory and file layout, build toolchains, procedures, and\nsupported AllJoyn service frameworks. Refer to the target\nplatform documentation that contains instructions on how to\norganize and set up the build process to incorporate the\nnecessary files to compile your Thin Library application.  For more details on how to combine this AllJoyn service\nframework with other AllJoyn service framework softwarem,\nsee the [Build an Application using the Thin Library][build-app-using-thin-library] section.",
            "title": "Implementing a Notification Producer"
        },
        {
            "location": "/develop/api-guide/notification/cpp/",
            "text": "Notification API Guide - C++\n\n\nReference code\n\n\nSource code\n\n\n\n\n\n\n\n\nPackage\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAllJoyn\n\n\nThe Standard Client AllJoyn code\n\n\n\n\n\n\nAboutService\n\n\nAbout feature code\n\n\n\n\n\n\nNotificationService\n\n\nNotification service framework code\n\n\n\n\n\n\nServices Common\n\n\nCode that is common to the AllJoyn\n service frameworks\n\n\n\n\n\n\nSample Apps\n\n\nCode that is common to the AllJoyn service framework sample applications\n\n\n\n\n\n\n\n\nReference C++ application code\n\n\n\n\n\n\n\n\nApplication\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nProducer Basic\n\n\nBasic application that sends a hard-coded notification.\n\n\n\n\n\n\nConsumer Service\n\n\nSimple consumer application that displayed received notifications.\n\n\n\n\n\n\n\n\nObtain the Notification service framework\n\n\nSee the \nBuilding Linux\n section\nfor instructions on compiling the Notification service framework.\n\n\nBuild a Notification Producer\n\n\nThe following steps provide the high-level process to build a Notification Producer.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nImplement the ProperyStore and use this with the AboutService\nin server mode. See the \nAbout API Guide\n for instructions.\n\n\nInitialize the Notification service and create a Producer.\n\n\nCreate a notification, populate the necessary fields,\nand use the Producer to send the notification.\n\n\n\n\nBuild a Notification Consumer\n\n\nThe following steps provide the high-level process to build a\nNotification Consumer.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nCreate a class that implements the NotificationReceiver.\n\n\nInitialize the Notification service and provide the\nreceiver implementation.\n\n\nStart receiving notifications.\n\n\n\n\nSetting up the AllJoyn framework and About feature\n\n\nThe steps required for this service framework are universal\nto all applications that use the AllJoyn framework and for\nany application using one or more AllJoyn service frameworks.\nPrior to use of the Notification service framework as a\nProducer or Consumer, the About feature must be implemented\nand the AllJoyn framework set up.\n\n\nComplete the procedures in the following sections to guide\nyou in this process:\n\n\n\n\nBuilding Linux\n section\n\n\nAbout API Guide\n\n\n\n\nImplementing a Notification Producer\n\n\nInitialize the AllJoyn framework\n\n\nSee the \nBuilding Linux\n section for instructions\nto set up the AllJoyn framework.\n\n\nCreate bus attachment\n\n\nbus-\nStart();\nbus-\nConnect();\n\n\n\n\nStart the AboutService in service mode\n\n\nThe Notification producer depends on the About feature.\n\n\nFor more information about the About feature, see the\n\nAbout API Guide\n.\n\n\nCreate a PropertyStore and fill it with the needed values\n\n\npropertyStore = new AboutPropertyStoreImpl();\npropertyStore-\nsetDeviceId(deviceId);\npropertyStore-\nsetAppId(appIdHex);\npropertyStore-\nsetAppName(appName);\nstd::vector\nqcc::String\n languages(3);\nlanguages[0] = \nen\n;\nlanguages[1] = \nsp\n;\nlanguages[2] = \nfr\n;\npropertyStore-\nsetSupportedLangs(languages);\npropertyStore-\nsetDefaultLang(defaultLanguage);\n   DeviceNamesType::const_iterator iter = deviceNames.find(languages[0]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(iter-\nsecond.c_str(), languages[0]));\n   } else {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(\nMy device name\n, \nen\n));\n   }\n\n   iter = deviceNames.find(languages[1]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(iter-\nsecond.c_str(), languages[1]));\n   } else {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(\nMi nombre de dispositivo\n,\n\nsp\n));\n   }\n\n   iter = deviceNames.find(languages[2]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(iter-\nsecond.c_str(), languages[2]));\n   } else {\n      CHECK_RETURN(propertyStore-\nsetDeviceName(\nMon nom de l'appareil\n, \nfr\n));\n   }\n\n\n\n\nImplement a BusListener and SessionPortListener\n\n\nIn order to bind a SessionPort and accept sessions, a new\nclass must be created that inherits from the AllJoyn\nBusListener and SessionPortListener classes.\n\n\nThe class must contain the following function:\n\n\nbool AcceptSessionJoiner(SessionPort sessionPort,\n   const char* joiner, const\nSessionOpts\n opts)\n\n\n\n\nThe AcceptSessionJoiner function will be called any time a\njoinsession request is received; the Listener class needs\nto dictate whether the joinsession request should be accepted\nor rejected by returning true or false, respectively.\nThese considerations are application-specific and can include\nany of the following:\n\n\n\n\nThe SessionPort the request was made on\n\n\nSpecific SessionOpts limitations\n\n\nThe number of sessions already joined.\n\n\n\n\nHere is an example of a full class declaration for the listener class.\n\n\nclass CommonBusListener : public ajn::BusListener,\n   public ajn::SessionPortListener {\n\n   public: CommonBusListener();\n     ~CommonBusListener();\n      bool AcceptSessionJoiner(ajn::SessionPort sessionPort,\n         const char* joiner, const ajn::SessionOpts\n opts);\n   void setSessionPort(ajn::SessionPort sessionPort);\n      ajn::SessionPort getSessionPort();\n   private:\n      ajn::SessionPort m_SessionPort;\n};\n\n#### Instantiate the BusListener and initialize the About feature\n\n```cpp\nbusListener = new CommonBusListener(); AboutServiceApi::Init(*bus, *propertyStore);\nAboutServiceApi* aboutService = AboutServiceApi::getInstance();\nbusListener-\nsetSessionPort(port);\nbus-\nRegisterBusListener(*busListener);\nTransportMask transportMask = TRANSPORT_ANY; SessionPort sp = port;\nSessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false, SessionOpts::PROXIMITY_ANY, transportMask);\nbus-\nBindSessionPort(sp, opts, *busListener);\naboutService-\nRegister(port);\nbus-\nRegisterBusObject(*aboutService);\n\n\n\n\nInitialize the Notification service framework\n\n\nNotificationService* prodService = NotificationService::getInstance()\n\n\n\n\nStart the Notification producer\n\n\nStart the Notification service framework and pass it the\nbus attachment and the newly created PropertyStore.\n\n\nSender = prodService-\ninitSend(bus, propertyStoreImpl);\n\n\n\n\nSend a notification\n\n\nPrepare the text per language to be sent\n\n\nNotificationText textToSend1(\nen\n, \nThe fridge door is open\n);\nNotificationText textToSend2(\nde\n, \nDie Kuhlschranktur steht offen\n);\n\nstd::vector\nNotificationText\n vecMessages;\nvecMessages.push_back(textToSend1);\nvecMessages.push_back(textToSend2);\n\n\n\n\nCreate a notification object\n\n\nCreate a notification object where you can set all the optional\nfields such as an audio URL, etc.\n\n\nNotification notification(messageType, vecMessages);\n\n\n\n\nNotification optional parameters\n\n\nThe following optional parameters can be added to the notification.\n\n\n\n\nIcon URL\n\n\n\n\nSet an icon URL that can be used to display along with\n  the notification.\n\n\ncpp\n  notification.setRichIconUrl(\"http://iconUrl.com/notification.jpeg\");\n\n\n\n\nAudio URL\n\n\n\n\nSet an audio URL that can be used to enrich the notification.\n  Each audio URL is set per language.\n\n\ncpp\n  richAudioUrl audio1(\"en\", \"http://audioUrl.com/notif_en.wav\");\n  richAudioUrl audio2(\"de\", \"http://audioUrl.com/notif_de.wav\");\n  std::vector\nRichAudioUrl\n richAudioUrl;\n  richAudioUrl.push_back(audio1);\n  richAudioUrl.push_back(audio2);\n  notification.setRichAudioUrl(richAudioUrl);\n\n\n\n\nIcon object path\n\n\n\n\nSet an icon object path so that the receiver can fetch the\n  content of the icon to display along with the notification.\n\n\ncpp\n  notification.setRichIconObjectPath(\"/OBJ/PATH/ICON\");\n\n\n\n\nAudio object path\n\n\n\n\nSet an audio object path so that the receiver can fetch\n  the audio content to play along with the notification.\n\n\ncpp\n  notification.setRichAudioObjectPath(\"/OBJ/PATH/AUDIO\");\n\n\n\n\nControl Panel Service object path\n\n\n\n\nSet a response object path that can be used to interact\n  with a bus object to allow the user to perform a control\n  action as a result of a notification.\n\n\ncpp\n  notification.setControlPanelServiceObjectPath(\"/CPS/OBJ/PATH\");\n\n\nSend the notification\n\n\nstatus = Sender-\nsend(notification, TTL);\n\n\n\n\nDelete the last message\n\n\nOnce a notification was eligible for delivery and the\napplication writer wants to cancel it, for example, if the\nnotification was sent for an event that no longer occurs,\nand the TTL is still valid, the deleteLastMsg API can be\nused to delete the last notification for a given messageType.\n\n\nSender-\ndeleteLastMsg(deleteMessageType);\n\n\n\n\nImplementing a Notification Consumer\n\n\nInitialize the AllJoyn framework\n\n\nSee the \nBuilding Linux\n section for instructions\nto set up the AllJoyn framework.\n\n\nCreate bus attachment\n\n\nbus-\nStart();\nbus-\nConnect();\n\n\n\n\nInitialize the Notification service framework\n\n\nconService = NotificationService::getInstance();\n\n\n\n\nStart the Notification consumer\n\n\nImplement the notificationReceiver interface\n\n\nThe notificationReceiver interface has a Receive method that\ngets a notificationObject as an argument.\n\n\nWhen a notification is received by the Notification service\nframework, it will call the Receive method of the implemented\nnotificationReceiver interface with the notification.\n\n\npublic void Receive(ajn::services::Notification const\n notification);\n\n\n\n\nThe notificationObject has \"getters\" for all notification arguments\nthat were sent in the message. Arguments that describe the device\nand the app it was received from follow.\n\n\nconst char* getDeviceId() const;\nconst char* getDeviceName() const;\nconst char* getAppId() const;\nconst char* getAppName() const;\n\n\n\n\nArguments that describe the message follow.\n\n\nconst int32_t getMessageId() const;\nconst NotificationMessageType getMessageType() const;\n\n\n\n\nArguments that give the content of the message follow.\n\n\nconst std::vector\nNotificationText\n getText() const;\nconst char* getRichIconUrl() const;\nconst char* getRichIconObjectPath() const;\nconst char* getRichAudioObjectPath() const;\nconst std::vector\nRichAudioUrl\n getRichAudioUrl() const;\nconst char* getControlPanelServiceObjectPath() const;\n\n\n\n\nThe Notification Producer interface has a dismiss method that\nis used to dismiss notification.\n\n\nAn application can choose to dismiss the notification, thereby\nremoving the notificartion from all entities in the proximal area.\n\n\nAn application that wants to dismiss a notification must call\nthe \nQStatus dismiss()\n method.\n\n\nAt void 'derived of NotificationReceiver'::receive(Notification conast\n notification)\n{\n   Notification.dismiss()\n}\n\n\n\n\nCreate the actual object.\n\n\nreceiver = new NotificationReceiverTestImpl();\n\n\n\n\nFor more details, refer to the API documentation.\n\n\nThe notificationReceiver interface has a dismiss method that\ngets called when the receiver gets a dismiss signal.\n\n\nvirtual void Dismiss(const int32_t msgId, const qcc::String appId) = 0;\n\n\n\n\nThis method also must be implemented by the derived class.\n\n\nWhen the method is called, the application must dismiss the\nnotification it holds.\n\n\nThe identifiers to the notification are - mgsId and appId\nwhich are the parameters of the method\n\n\nStart the consumer\n\n\nStart the consumer and pass it the bus attachment and the\nnotificationReceiver implmented in \nImplement the notificationReceiver interface\n.\n\n\nconService-\ninitReceive(busAttachment, Receiver);",
            "title": "Cpp"
        },
        {
            "location": "/develop/api-guide/notification/cpp/#notification-api-guide-c",
            "text": "",
            "title": "Notification API Guide - C++"
        },
        {
            "location": "/develop/api-guide/notification/cpp/#reference-code",
            "text": "Source code     Package  Description      AllJoyn  The Standard Client AllJoyn code    AboutService  About feature code    NotificationService  Notification service framework code    Services Common  Code that is common to the AllJoyn  service frameworks    Sample Apps  Code that is common to the AllJoyn service framework sample applications     Reference C++ application code     Application  Description      Producer Basic  Basic application that sends a hard-coded notification.    Consumer Service  Simple consumer application that displayed received notifications.     Obtain the Notification service framework  See the  Building Linux  section\nfor instructions on compiling the Notification service framework.  Build a Notification Producer  The following steps provide the high-level process to build a Notification Producer.   Create the base for the AllJoyn application.  Implement the ProperyStore and use this with the AboutService\nin server mode. See the  About API Guide  for instructions.  Initialize the Notification service and create a Producer.  Create a notification, populate the necessary fields,\nand use the Producer to send the notification.   Build a Notification Consumer  The following steps provide the high-level process to build a\nNotification Consumer.   Create the base for the AllJoyn application.  Create a class that implements the NotificationReceiver.  Initialize the Notification service and provide the\nreceiver implementation.  Start receiving notifications.   Setting up the AllJoyn framework and About feature  The steps required for this service framework are universal\nto all applications that use the AllJoyn framework and for\nany application using one or more AllJoyn service frameworks.\nPrior to use of the Notification service framework as a\nProducer or Consumer, the About feature must be implemented\nand the AllJoyn framework set up.  Complete the procedures in the following sections to guide\nyou in this process:   Building Linux  section  About API Guide",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/notification/cpp/#implementing-a-notification-producer",
            "text": "Initialize the AllJoyn framework  See the  Building Linux  section for instructions\nto set up the AllJoyn framework.  Create bus attachment  bus- Start();\nbus- Connect();  Start the AboutService in service mode  The Notification producer depends on the About feature.  For more information about the About feature, see the About API Guide .  Create a PropertyStore and fill it with the needed values  propertyStore = new AboutPropertyStoreImpl();\npropertyStore- setDeviceId(deviceId);\npropertyStore- setAppId(appIdHex);\npropertyStore- setAppName(appName);\nstd::vector qcc::String  languages(3);\nlanguages[0] =  en ;\nlanguages[1] =  sp ;\nlanguages[2] =  fr ;\npropertyStore- setSupportedLangs(languages);\npropertyStore- setDefaultLang(defaultLanguage);\n   DeviceNamesType::const_iterator iter = deviceNames.find(languages[0]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore- setDeviceName(iter- second.c_str(), languages[0]));\n   } else {\n      CHECK_RETURN(propertyStore- setDeviceName( My device name ,  en ));\n   }\n\n   iter = deviceNames.find(languages[1]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore- setDeviceName(iter- second.c_str(), languages[1]));\n   } else {\n      CHECK_RETURN(propertyStore- setDeviceName( Mi nombre de dispositivo , sp ));\n   }\n\n   iter = deviceNames.find(languages[2]);\n   if (iter != deviceNames.end()) {\n      CHECK_RETURN(propertyStore- setDeviceName(iter- second.c_str(), languages[2]));\n   } else {\n      CHECK_RETURN(propertyStore- setDeviceName( Mon nom de l'appareil ,  fr ));\n   }  Implement a BusListener and SessionPortListener  In order to bind a SessionPort and accept sessions, a new\nclass must be created that inherits from the AllJoyn\nBusListener and SessionPortListener classes.  The class must contain the following function:  bool AcceptSessionJoiner(SessionPort sessionPort,\n   const char* joiner, const\nSessionOpts  opts)  The AcceptSessionJoiner function will be called any time a\njoinsession request is received; the Listener class needs\nto dictate whether the joinsession request should be accepted\nor rejected by returning true or false, respectively.\nThese considerations are application-specific and can include\nany of the following:   The SessionPort the request was made on  Specific SessionOpts limitations  The number of sessions already joined.   Here is an example of a full class declaration for the listener class.  class CommonBusListener : public ajn::BusListener,\n   public ajn::SessionPortListener {\n\n   public: CommonBusListener();\n     ~CommonBusListener();\n      bool AcceptSessionJoiner(ajn::SessionPort sessionPort,\n         const char* joiner, const ajn::SessionOpts  opts);\n   void setSessionPort(ajn::SessionPort sessionPort);\n      ajn::SessionPort getSessionPort();\n   private:\n      ajn::SessionPort m_SessionPort;\n};\n\n#### Instantiate the BusListener and initialize the About feature\n\n```cpp\nbusListener = new CommonBusListener(); AboutServiceApi::Init(*bus, *propertyStore);\nAboutServiceApi* aboutService = AboutServiceApi::getInstance();\nbusListener- setSessionPort(port);\nbus- RegisterBusListener(*busListener);\nTransportMask transportMask = TRANSPORT_ANY; SessionPort sp = port;\nSessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, false, SessionOpts::PROXIMITY_ANY, transportMask);\nbus- BindSessionPort(sp, opts, *busListener);\naboutService- Register(port);\nbus- RegisterBusObject(*aboutService);  Initialize the Notification service framework  NotificationService* prodService = NotificationService::getInstance()  Start the Notification producer  Start the Notification service framework and pass it the\nbus attachment and the newly created PropertyStore.  Sender = prodService- initSend(bus, propertyStoreImpl);  Send a notification  Prepare the text per language to be sent  NotificationText textToSend1( en ,  The fridge door is open );\nNotificationText textToSend2( de ,  Die Kuhlschranktur steht offen );\n\nstd::vector NotificationText  vecMessages;\nvecMessages.push_back(textToSend1);\nvecMessages.push_back(textToSend2);  Create a notification object  Create a notification object where you can set all the optional\nfields such as an audio URL, etc.  Notification notification(messageType, vecMessages);  Notification optional parameters  The following optional parameters can be added to the notification.   Icon URL   Set an icon URL that can be used to display along with\n  the notification.  cpp\n  notification.setRichIconUrl(\"http://iconUrl.com/notification.jpeg\");   Audio URL   Set an audio URL that can be used to enrich the notification.\n  Each audio URL is set per language.  cpp\n  richAudioUrl audio1(\"en\", \"http://audioUrl.com/notif_en.wav\");\n  richAudioUrl audio2(\"de\", \"http://audioUrl.com/notif_de.wav\");\n  std::vector RichAudioUrl  richAudioUrl;\n  richAudioUrl.push_back(audio1);\n  richAudioUrl.push_back(audio2);\n  notification.setRichAudioUrl(richAudioUrl);   Icon object path   Set an icon object path so that the receiver can fetch the\n  content of the icon to display along with the notification.  cpp\n  notification.setRichIconObjectPath(\"/OBJ/PATH/ICON\");   Audio object path   Set an audio object path so that the receiver can fetch\n  the audio content to play along with the notification.  cpp\n  notification.setRichAudioObjectPath(\"/OBJ/PATH/AUDIO\");   Control Panel Service object path   Set a response object path that can be used to interact\n  with a bus object to allow the user to perform a control\n  action as a result of a notification.  cpp\n  notification.setControlPanelServiceObjectPath(\"/CPS/OBJ/PATH\");  Send the notification  status = Sender- send(notification, TTL);  Delete the last message  Once a notification was eligible for delivery and the\napplication writer wants to cancel it, for example, if the\nnotification was sent for an event that no longer occurs,\nand the TTL is still valid, the deleteLastMsg API can be\nused to delete the last notification for a given messageType.  Sender- deleteLastMsg(deleteMessageType);",
            "title": "Implementing a Notification Producer"
        },
        {
            "location": "/develop/api-guide/notification/cpp/#implementing-a-notification-consumer",
            "text": "Initialize the AllJoyn framework  See the  Building Linux  section for instructions\nto set up the AllJoyn framework.  Create bus attachment  bus- Start();\nbus- Connect();  Initialize the Notification service framework  conService = NotificationService::getInstance();  Start the Notification consumer  Implement the notificationReceiver interface  The notificationReceiver interface has a Receive method that\ngets a notificationObject as an argument.  When a notification is received by the Notification service\nframework, it will call the Receive method of the implemented\nnotificationReceiver interface with the notification.  public void Receive(ajn::services::Notification const  notification);  The notificationObject has \"getters\" for all notification arguments\nthat were sent in the message. Arguments that describe the device\nand the app it was received from follow.  const char* getDeviceId() const;\nconst char* getDeviceName() const;\nconst char* getAppId() const;\nconst char* getAppName() const;  Arguments that describe the message follow.  const int32_t getMessageId() const;\nconst NotificationMessageType getMessageType() const;  Arguments that give the content of the message follow.  const std::vector NotificationText  getText() const;\nconst char* getRichIconUrl() const;\nconst char* getRichIconObjectPath() const;\nconst char* getRichAudioObjectPath() const;\nconst std::vector RichAudioUrl  getRichAudioUrl() const;\nconst char* getControlPanelServiceObjectPath() const;  The Notification Producer interface has a dismiss method that\nis used to dismiss notification.  An application can choose to dismiss the notification, thereby\nremoving the notificartion from all entities in the proximal area.  An application that wants to dismiss a notification must call\nthe  QStatus dismiss()  method.  At void 'derived of NotificationReceiver'::receive(Notification conast  notification)\n{\n   Notification.dismiss()\n}  Create the actual object.  receiver = new NotificationReceiverTestImpl();  For more details, refer to the API documentation.  The notificationReceiver interface has a dismiss method that\ngets called when the receiver gets a dismiss signal.  virtual void Dismiss(const int32_t msgId, const qcc::String appId) = 0;  This method also must be implemented by the derived class.  When the method is called, the application must dismiss the\nnotification it holds.  The identifiers to the notification are - mgsId and appId\nwhich are the parameters of the method  Start the consumer  Start the consumer and pass it the bus attachment and the\nnotificationReceiver implmented in  Implement the notificationReceiver interface .  conService- initReceive(busAttachment, Receiver);",
            "title": "Implementing a Notification Consumer"
        },
        {
            "location": "/develop/api-guide/notification/",
            "text": "Notification API Guide\n\n\n\n\nJava\n\n\nC++\n\n\nObjective-C\n\n\nC (Thin Core)\n\n\n\n\nBest Practices\n\n\nProvide correct values when sending a notification\n\n\nThe Notification object that will be sent using the Notification\nservice framework allows for multiple values to be entered.\nSpecifically, the notification text can be provided in various\nlanguages and string lengths.\n\n\nWell-formed text string\n\n\nIt is \nvery\n important that this string be a complete and\ncorrect message that will be displayed on any Notification\nConsumer application. The notification will support multiple\nlanguages so that the correct language of the platform can\nbe used; this avoids translating strings to be displayed.\nAs such, it is important for the manufacturer of the software\nrunning on the Notification Producer side to send the correct\ntranslations for the languages that are supported.\n\n\nMachine-to-machine use case\n\n\nThe notification text entries should never be used for any\nother purpose than providing a human-readable message.\nA notification message, by design, will be received and\nshown by any application to convey a meaning relevant to the\nsending device.\n\n\nAn application making use of the Notification service framework\nshould never assume that a specific application designed to be\nthe Notification Consumer side is the only instance in the\nproximal network. Again, every message will travel to all\nNofication Consumer applications to be displayed.\n\n\nWhen to send an Emergency notification\n\n\nA notification supports the following message types:\n\n\n\n\nInformation\n\n\nWarning\n\n\nEmergency\n\n\n\n\nUse the Emergency message type only when something very important\nmust be relayed to the consumer. For example, a notification\nabout a social media-related update should have a message type\nof Information, while a notification about an appliance malfunction\nor a security system being triggered warrants the message type of Emergency.\n\n\nSince a notification trigger uses UDP multicast, resulting in\nunreliable delivery, an Emergency notification should send\nmultiple times, possibly until it can be verified that a user\nhas received it and taken action.\n\n\nNOTE:\n Use common sense when setting the message type. Consumers\nshould not receive numerous messages other than those specified\nas an emergency notification. This is to avoid a person seeing\na message like \"The sky is blue\" 8 times when it does not\nrequire an immediate action or response.\n\n\nWhat is the purpose of rich notification media?\n\n\nBesides the text payload, a notification can contain an icon\nand audio data. A television or other device with audio output\ncapabilities can leverage the Notification service framework\nas a consumer. Audio content can contain a text-to-speech\nversion of the notification message text, thereby allowing\nthe end user to both view and hear the notification contents.\nAnother use case involves a consumer that does not have visual\ndisplay capabilities, such as a wireless speaker. In that case,\na notification can be audibly conveyed to the user. An icon\ncan be used to show some aspect of the notification, such as\nthe producer it was sent from, or the content it contains.\nAs an example, consider a coffee maker that sends a notification\nwhen it is done brewing. An icon can be used to represent\nthe type of coffee that was selected, such as regular, strong, or decaf.\n\n\nNOTE:\n The icon and audio data are not contained within the\nactual notification. Instead, an AllJoyn\n object path is used\nto obtain the icon or audio content that is sent as part of\nthe notification. See the Notification API Guide listed at\nthe top of this page for the platform you are targeting for\ndetails on using this capability.\n\n\nCan I have more than 1 response action?\n\n\nThe current Notification service framework release supports\nonly one response action; however, this may change in future\nupdates. Notifications are informative and designed to be\nnonintrusive to a user. If more actions are needed, the\nresponse action should be to launch a separate application\nthat provides the user with more options and greater ability\nto interact with the Producer application/device.\n\n\nHow to use the TTL on a producer\n\n\nThe time to live (TTL) of a notification message defines the\nvalidity period of the message. A notification message can\nbe received by a consumer that connects to the same network\nas the producer that sent the message during the defined TTL\nperiod. See the \nNotification Interface Definition\n\nfor more information on this behavior and timelines of specific use cases.\n\n\nAs a general rule, the TTL for a notification should be set to correspond\nwith the type of information included in the notification. For example,\nif the notification contains information that is no longer valid or\nuseful after 5 minutes, the TTL should be set to 5 minutes.\n\n\nNOTE:\n The TTL is not sent as part of the actual notification\npayload, and is instead used by the Notification service internally\n\n\nUI considerations\n\n\nHow long to show the notification\n\n\nThe length of time to show a notification should be consistent\nwith the following criteria:\n\n\n\n\nBehavior of the platform/application the notification is\nbeing displayed on\n\n\nMessage type (Information, Warning, Emergency)\n\n\nAny preferences the user has set to view notifications.\n\n\n\n\nFor example, on an Android platform application, an Information\nnotification can be shown with a short Toast (overlay message\nthat is temporarily displayed), while a Warning notification\ncan be shown with a long Toast. Additionally, the display of\nnotifications can be integrated into the existing Android\nNotification system to provide for a consistent user experience.\nRefer to the NotificationServiceUISample application for example code.\n\n\nHow to handle a notification with response\n\n\nA notification includes an optional field where the path of\nan AllJoyn BusObject can be specified. This feature is used\nwith notifications where a response, such as a yes or no confirmation,\nis associated with the notification and used to interact with the\nproducer that sent the notification. From a UI standpoint, the\nnotification should include a button whose onclick action will\ninvoke the method on the supplied BusObject path.\n\n\nFor example, the user can receive a notification from a smart\ncoffee maker that has been on for an hour and not used. The\nnotification can include text that gives the user the option\nto turn off the coffee maker, and response options of yes\nor no are presented to the user accompanying the notification\ntext. Clicking on \"yes\" would invoke an AllJoyn BusMethod on\nthe coffee machine to turn off the appliance; \"no\" would dismiss\nthe notification.\n\n\nHandling first time notification from a new appliance\n\n\nBy definition, a notification is sent to all Consumer applications\nconnected to a network. Because the Consumer application is running\non a TV or other device that a user is constantly viewing, it is\nimportant to filter the notifications on the appliance/device (consumer).\n\n\nIt is recommended that when the first notification is received\nby a consumer from an appliance/device, a UI is presented to\nthe user prompting the user to configure the consumer application:\n\n\n\n\nHow to receive notifications\n\n\nWhat priority of notifications should be shown\n\n\n\n\nThe UI should follow the example that is shown in the sample\napplications contained with the Notification service framework.",
            "title": "Home"
        },
        {
            "location": "/develop/api-guide/notification/#notification-api-guide",
            "text": "Java  C++  Objective-C  C (Thin Core)",
            "title": "Notification API Guide"
        },
        {
            "location": "/develop/api-guide/notification/#best-practices",
            "text": "Provide correct values when sending a notification  The Notification object that will be sent using the Notification\nservice framework allows for multiple values to be entered.\nSpecifically, the notification text can be provided in various\nlanguages and string lengths.  Well-formed text string  It is  very  important that this string be a complete and\ncorrect message that will be displayed on any Notification\nConsumer application. The notification will support multiple\nlanguages so that the correct language of the platform can\nbe used; this avoids translating strings to be displayed.\nAs such, it is important for the manufacturer of the software\nrunning on the Notification Producer side to send the correct\ntranslations for the languages that are supported.  Machine-to-machine use case  The notification text entries should never be used for any\nother purpose than providing a human-readable message.\nA notification message, by design, will be received and\nshown by any application to convey a meaning relevant to the\nsending device.  An application making use of the Notification service framework\nshould never assume that a specific application designed to be\nthe Notification Consumer side is the only instance in the\nproximal network. Again, every message will travel to all\nNofication Consumer applications to be displayed.  When to send an Emergency notification  A notification supports the following message types:   Information  Warning  Emergency   Use the Emergency message type only when something very important\nmust be relayed to the consumer. For example, a notification\nabout a social media-related update should have a message type\nof Information, while a notification about an appliance malfunction\nor a security system being triggered warrants the message type of Emergency.  Since a notification trigger uses UDP multicast, resulting in\nunreliable delivery, an Emergency notification should send\nmultiple times, possibly until it can be verified that a user\nhas received it and taken action.  NOTE:  Use common sense when setting the message type. Consumers\nshould not receive numerous messages other than those specified\nas an emergency notification. This is to avoid a person seeing\na message like \"The sky is blue\" 8 times when it does not\nrequire an immediate action or response.  What is the purpose of rich notification media?  Besides the text payload, a notification can contain an icon\nand audio data. A television or other device with audio output\ncapabilities can leverage the Notification service framework\nas a consumer. Audio content can contain a text-to-speech\nversion of the notification message text, thereby allowing\nthe end user to both view and hear the notification contents.\nAnother use case involves a consumer that does not have visual\ndisplay capabilities, such as a wireless speaker. In that case,\na notification can be audibly conveyed to the user. An icon\ncan be used to show some aspect of the notification, such as\nthe producer it was sent from, or the content it contains.\nAs an example, consider a coffee maker that sends a notification\nwhen it is done brewing. An icon can be used to represent\nthe type of coffee that was selected, such as regular, strong, or decaf.  NOTE:  The icon and audio data are not contained within the\nactual notification. Instead, an AllJoyn  object path is used\nto obtain the icon or audio content that is sent as part of\nthe notification. See the Notification API Guide listed at\nthe top of this page for the platform you are targeting for\ndetails on using this capability.  Can I have more than 1 response action?  The current Notification service framework release supports\nonly one response action; however, this may change in future\nupdates. Notifications are informative and designed to be\nnonintrusive to a user. If more actions are needed, the\nresponse action should be to launch a separate application\nthat provides the user with more options and greater ability\nto interact with the Producer application/device.  How to use the TTL on a producer  The time to live (TTL) of a notification message defines the\nvalidity period of the message. A notification message can\nbe received by a consumer that connects to the same network\nas the producer that sent the message during the defined TTL\nperiod. See the  Notification Interface Definition \nfor more information on this behavior and timelines of specific use cases.  As a general rule, the TTL for a notification should be set to correspond\nwith the type of information included in the notification. For example,\nif the notification contains information that is no longer valid or\nuseful after 5 minutes, the TTL should be set to 5 minutes.  NOTE:  The TTL is not sent as part of the actual notification\npayload, and is instead used by the Notification service internally  UI considerations  How long to show the notification  The length of time to show a notification should be consistent\nwith the following criteria:   Behavior of the platform/application the notification is\nbeing displayed on  Message type (Information, Warning, Emergency)  Any preferences the user has set to view notifications.   For example, on an Android platform application, an Information\nnotification can be shown with a short Toast (overlay message\nthat is temporarily displayed), while a Warning notification\ncan be shown with a long Toast. Additionally, the display of\nnotifications can be integrated into the existing Android\nNotification system to provide for a consistent user experience.\nRefer to the NotificationServiceUISample application for example code.  How to handle a notification with response  A notification includes an optional field where the path of\nan AllJoyn BusObject can be specified. This feature is used\nwith notifications where a response, such as a yes or no confirmation,\nis associated with the notification and used to interact with the\nproducer that sent the notification. From a UI standpoint, the\nnotification should include a button whose onclick action will\ninvoke the method on the supplied BusObject path.  For example, the user can receive a notification from a smart\ncoffee maker that has been on for an hour and not used. The\nnotification can include text that gives the user the option\nto turn off the coffee maker, and response options of yes\nor no are presented to the user accompanying the notification\ntext. Clicking on \"yes\" would invoke an AllJoyn BusMethod on\nthe coffee machine to turn off the appliance; \"no\" would dismiss\nthe notification.  Handling first time notification from a new appliance  By definition, a notification is sent to all Consumer applications\nconnected to a network. Because the Consumer application is running\non a TV or other device that a user is constantly viewing, it is\nimportant to filter the notifications on the appliance/device (consumer).  It is recommended that when the first notification is received\nby a consumer from an appliance/device, a UI is presented to\nthe user prompting the user to configure the consumer application:   How to receive notifications  What priority of notifications should be shown   The UI should follow the example that is shown in the sample\napplications contained with the Notification service framework.",
            "title": "Best Practices"
        },
        {
            "location": "/develop/api-guide/notification/java/",
            "text": "Notification API Guide - Java\n\n\nReference code\n\n\nSource code\n\n\n\n\n\n\n\n\nPackage\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNotificationService\n\n\nNotification service framework code, not platform-dependent.\n\n\n\n\n\n\nNotificationServiceCommons\n\n\nCode that is common to all Java AllJoyn\n service frameworks.\n\n\n\n\n\n\nNotificationServiceNativePlatformAndroid\n\n\nCode that is Android-specific.\n\n\n\n\n\n\n\n\nReference Java application code\n\n\n\n\n\n\n\n\nApplication\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNotificationServiceUISample\n\n\nUI-based application that can be used as a producer and/or a consumer to send and receive notifications.\n\n\n\n\n\n\n\n\nObtain the Notification service framework\n\n\nSee the \nBuilding Android\n section for instructions\non compiling the Notification service framework.\n\n\nBuild a Notification Producer\n\n\nThe following steps provide the high-level process to build\na Notification Producer.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nImplement the ProperyStore and use this with the AboutService\nin server mode. See the \nAbout API Guide\n for instructions.\n\n\nInitialize the Notification service framework and create a Producer.\n\n\nCreate a notification, populate the necessary fields, and\nuse the Producer to send the notification.\n\n\n\n\nBuild a Notification Consumer\n\n\nThe following provides the high-level steps to build a Notification Consumer.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nInitialize the AboutService in client mode. See the\n\nAbout API Guide\n for instructions.\n\n\nCreate a class that implements the NotificationReceiver.\n\n\nInitialize the Notification service framework and provide\nthe receiver implementation.\n\n\nStart receiving notifications.\n\n\n\n\nSetting up the AllJoyn framework and About feature\n\n\nThe steps required for this service are universal to all applications\nthat use the AllJoyn framework and for any application using one or\nmore AllJoyn service frameworks. Prior to use of the Notification\nservice framework as a Producer or Consumer, the About feature must\nbe implemented and the AllJoyn framework set up.\n\n\nComplete the procedures in the following sections to guide you in this process:\n\n\n\n\nBuilding Android\n\n\nAbout API Guide\n\n\n\n\nImplementing a Notification Producer\n\n\nInitialize the AllJoyn framework\n\n\nSee the \nBuilding Android\n section for instructions to\nset up the AllJoyn framework.\n\n\nStart the AboutService in server mode\n\n\nThe Notification service framework Producer depends on the About feature.\n\n\nFor more information about the About feature, see the \nAbout API Guide\n.\n\n\nInitialize the About feature\n\n\naboutService = AboutServiceImpl.getInstance();\n\n\n\n\nCreate a PropertyStore\n\n\nPropertyStore propertyStore = new PropertyStoreImpl(this);\nMap\nString, Object\n config = propertyStore.ReadAll(Property.NO_LANGUAGE,Filter.READ);\nString deviceName = (String)config.get(AboutKeys.ABOUT_DEVICE_NAME);\n   propertyStore.setValue(AboutKeys.ABOUT_DEVICE_NAME, DEVICE_NAME, Property.NO_LANGUAGE);\n}\npropertyStore.setValue(AboutKeys.ABOUT_APP_NAME, appName, Property.NO_LANGUAGE);\ntry {\n   aboutService.startAboutServer((short)1080, propertyStore, bus);\n}\ncatch (Exception e) {\n   Log.e(TAG, \nAboutConfigService failed, Error: \n + e.getMessage());\n\n\n\n\nInitialize the Notification service framework\n\n\nnotificationService = NotificationService.getInstance();\n\n\n\n\nStart the Notification service framework producer\n\n\nStart the Notification service framework, and pass it the\nbus attachment and the newly created PropertyStore.\n\n\nnotificationSender = notificationService.initSend(bus, propertyStore);\nisSenderStarted = true;\n\n\n\n\nSend a notification\n\n\nPrepare the text per language to be sent\n\n\nList\nNotificationText\n text = new LinkedList\nNotificationText\n();\ntext.add(new NotificationText(\nen\n, \nThe fridge door is open\n));\ntext.add(new NotificationText(\nde\n, \nDie Kuhlschranktur steht offen\n));\n\n\n\n\nCreate a notification object\n\n\nCreate a notification object where you can set all the optional\nfields such as an audio URL, etc.\n\n\nNotification notif = new Notification(messageType, text);\n\n\n\n\nNotification optional parameters\n\n\nThe following optional parameters can be added to the notification:\n\n\n\n\nIcon URL - Set an icon URL that can be used to display along with the notification.\n\n\n\n\njava\n   notif.setRichIconUrl(\"http://iconUrl.com/notification.jpeg\");\n\n\n\n\nAudio URL - Set an audio URL that can be used to enrich the\nnotification. Each audio URL is set per language.\n\n\n\n\n```java\n   List\n RichAudioUrl\n audioUrl = new LinkedList\n RichAudioUrl\n();\n   audioUrl.add(new NotificationText(\"en\", \"http://audioUrl.com/notif_en.wav\"));\n   audioUrl.add(new NotificationText(\"de\", \"http://audioUrl.com/notif_de.wav\"\"));\n\n\n  notif.setRichAudioUrl(audioUrl);\n\n\n\n```\n\n\n\n\nIcon object path - Set an icon object path so that the receiver\ncan fetch the content of the icon to display along with the notification.\n\n\n\n\njava\n   notif.setRichIconObjPath(\"/OBJ/PATH/ICON\");\n\n\n\n\nAudio object path - Set an audio object path so that the receiver\ncan fetch the audio content to play along with the notification.\n\n\n\n\njava\n   notif.setRichAudioObjPath(\"/OBJ/PATH/AUDIO\");\n\n\n\n\nResponse object path - Set a response object path that can\nbe used to interact with a bus object to allow the user to\nperform a control action as a result of a notification.\n\n\n\n\njava\n   notif.setResponseObjectPath(/CPS/OBJ/PATH);\n\n\nSend the notification\n\n\nnotificationSender.send(notif, ttl);\n\n\n\n\nDelete the last message\n\n\nOnce a notification was sent out and the application writer\nwould like to cancel it, for example, if the notification was\nsent for an event that no longer occurs, and the TTL is still\nvalid, use the deleteLastMsg API to delete the last notification\nfor a given messageType.\n\n\nnotificationSender.deleteLastMsg(messageType);\n\n\n\n\nImplementing a Notification Consumer\n\n\nInitialize the AllJoyn framework\n\n\nSee the \nAbout API Guide\n for instructions\nto set up the AllJoyn framework.\n\n\nStart an AboutClient in client mode\n\n\nThe Notification service framework consumer depends on the About feature.\n\n\nFor more information about the About feature, see the \nAbout API Guide\n.\n\n\nInitialize the About feature\n\n\naboutService = AboutServiceImpl.getInstance();\n\n\n\n\nStart the AboutClient in client mode\n\n\nStart the client to receive announcements.\n\n\naboutService.startAboutClient(bus);\n\n\n\n\nInitialize the Notification service framework\n\n\nnotificationService = NotificationService.getInstance();\n\n\n\n\nStart the Notification service framework consumer\n\n\nImplement the notificationReceiver interface\n\n\nThe notificationReceiver interface contains the following\nmethods that can be implemented.\n\n\nreceive\n\n\nThe \nreceive\n method gets a notification object as an argument.\nImplement this method to receive the notifications sent on the network.\n\n\nWhen a notification is received by the service, it will call\nthe \nreceive\n method of the implemented notificationReceiver\ninterface with the notification.\n\n\n@Override\npublic void receive(Notification notification)\n\n@Override\npublic void receive(Notification notification)\n\n\n\n\nThe notificationObject has a \ndismiss\n method and \"getters\"\nfor all notification arguments that were sent in the message.\n\n\nDismiss a message:\n\n\nImplement this method to receive dismiss signals that were\nsent on the network so you can dismiss notifications that\nwere received and should not be shown.\n\n\nnotification.dismiss();\n\n\n\n\nArguments that describe the device and app it were received from follow.\n\n\nUUID notifAppId  = notification.getAppId();\nString notifAppName = notification.getAppName();\nString notifDeviceId    = notification.getDeviceId();\nString notifDeviceName  = notification.getDeviceName();\n\n\n\n\nArguments that describe the message follow.\n\n\nint msgID   = notification.getMessageId();\nString msgType = notification.getMessageType();\n\n\n\n\nArguments that give the content of the message follow.\n\n\nList\nNotificationText\n text = notification.getText();\nList\nRichAudioUrl\n richAudioUrlL = notification.getRichAudioUrl();\n\nString richIconUrl  = notification.getRichIconUrl();\n   String richIconObjPath   = notification.getRichIconObjPath();\n   String richAudioObjPath  = notification.getRichAudioObjPath();\n   String responseObjectPath = notification.getResponseObjectPath();\n\n\n\n\nFor more details, refer to the API documentation.\n\n\nDismiss\n\n\nWhen a dismiss signal is received by the service it calls the\n\ndismiss\n method the application writer provided the service,\nso that the application can remove the application from the UI:\n\n\n@Override\npublic void dismiss(int notifId, UUID appId)\n\n\n\n\nStart the consumer\n\n\nStart the consumer and pass it the bus attachment and the\nnotificationReceiver from above.\n\n\nnotificationService.initReceive(bus, notificationReceiver);",
            "title": "Java"
        },
        {
            "location": "/develop/api-guide/notification/java/#notification-api-guide-java",
            "text": "",
            "title": "Notification API Guide - Java"
        },
        {
            "location": "/develop/api-guide/notification/java/#reference-code",
            "text": "Source code     Package  Description      NotificationService  Notification service framework code, not platform-dependent.    NotificationServiceCommons  Code that is common to all Java AllJoyn  service frameworks.    NotificationServiceNativePlatformAndroid  Code that is Android-specific.     Reference Java application code     Application  Description      NotificationServiceUISample  UI-based application that can be used as a producer and/or a consumer to send and receive notifications.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/notification/java/#obtain-the-notification-service-framework",
            "text": "See the  Building Android  section for instructions\non compiling the Notification service framework.  Build a Notification Producer  The following steps provide the high-level process to build\na Notification Producer.   Create the base for the AllJoyn application.  Implement the ProperyStore and use this with the AboutService\nin server mode. See the  About API Guide  for instructions.  Initialize the Notification service framework and create a Producer.  Create a notification, populate the necessary fields, and\nuse the Producer to send the notification.   Build a Notification Consumer  The following provides the high-level steps to build a Notification Consumer.   Create the base for the AllJoyn application.  Initialize the AboutService in client mode. See the About API Guide  for instructions.  Create a class that implements the NotificationReceiver.  Initialize the Notification service framework and provide\nthe receiver implementation.  Start receiving notifications.   Setting up the AllJoyn framework and About feature  The steps required for this service are universal to all applications\nthat use the AllJoyn framework and for any application using one or\nmore AllJoyn service frameworks. Prior to use of the Notification\nservice framework as a Producer or Consumer, the About feature must\nbe implemented and the AllJoyn framework set up.  Complete the procedures in the following sections to guide you in this process:   Building Android  About API Guide",
            "title": "Obtain the Notification service framework"
        },
        {
            "location": "/develop/api-guide/notification/java/#implementing-a-notification-producer",
            "text": "Initialize the AllJoyn framework  See the  Building Android  section for instructions to\nset up the AllJoyn framework.  Start the AboutService in server mode  The Notification service framework Producer depends on the About feature.  For more information about the About feature, see the  About API Guide .  Initialize the About feature  aboutService = AboutServiceImpl.getInstance();  Create a PropertyStore  PropertyStore propertyStore = new PropertyStoreImpl(this);\nMap String, Object  config = propertyStore.ReadAll(Property.NO_LANGUAGE,Filter.READ);\nString deviceName = (String)config.get(AboutKeys.ABOUT_DEVICE_NAME);\n   propertyStore.setValue(AboutKeys.ABOUT_DEVICE_NAME, DEVICE_NAME, Property.NO_LANGUAGE);\n}\npropertyStore.setValue(AboutKeys.ABOUT_APP_NAME, appName, Property.NO_LANGUAGE);\ntry {\n   aboutService.startAboutServer((short)1080, propertyStore, bus);\n}\ncatch (Exception e) {\n   Log.e(TAG,  AboutConfigService failed, Error:   + e.getMessage());  Initialize the Notification service framework  notificationService = NotificationService.getInstance();  Start the Notification service framework producer  Start the Notification service framework, and pass it the\nbus attachment and the newly created PropertyStore.  notificationSender = notificationService.initSend(bus, propertyStore);\nisSenderStarted = true;  Send a notification  Prepare the text per language to be sent  List NotificationText  text = new LinkedList NotificationText ();\ntext.add(new NotificationText( en ,  The fridge door is open ));\ntext.add(new NotificationText( de ,  Die Kuhlschranktur steht offen ));  Create a notification object  Create a notification object where you can set all the optional\nfields such as an audio URL, etc.  Notification notif = new Notification(messageType, text);  Notification optional parameters  The following optional parameters can be added to the notification:   Icon URL - Set an icon URL that can be used to display along with the notification.   java\n   notif.setRichIconUrl(\"http://iconUrl.com/notification.jpeg\");   Audio URL - Set an audio URL that can be used to enrich the\nnotification. Each audio URL is set per language.   ```java\n   List  RichAudioUrl  audioUrl = new LinkedList  RichAudioUrl ();\n   audioUrl.add(new NotificationText(\"en\", \"http://audioUrl.com/notif_en.wav\"));\n   audioUrl.add(new NotificationText(\"de\", \"http://audioUrl.com/notif_de.wav\"\"));    notif.setRichAudioUrl(audioUrl);  ```   Icon object path - Set an icon object path so that the receiver\ncan fetch the content of the icon to display along with the notification.   java\n   notif.setRichIconObjPath(\"/OBJ/PATH/ICON\");   Audio object path - Set an audio object path so that the receiver\ncan fetch the audio content to play along with the notification.   java\n   notif.setRichAudioObjPath(\"/OBJ/PATH/AUDIO\");   Response object path - Set a response object path that can\nbe used to interact with a bus object to allow the user to\nperform a control action as a result of a notification.   java\n   notif.setResponseObjectPath(/CPS/OBJ/PATH);  Send the notification  notificationSender.send(notif, ttl);  Delete the last message  Once a notification was sent out and the application writer\nwould like to cancel it, for example, if the notification was\nsent for an event that no longer occurs, and the TTL is still\nvalid, use the deleteLastMsg API to delete the last notification\nfor a given messageType.  notificationSender.deleteLastMsg(messageType);",
            "title": "Implementing a Notification Producer"
        },
        {
            "location": "/develop/api-guide/notification/java/#implementing-a-notification-consumer",
            "text": "Initialize the AllJoyn framework  See the  About API Guide  for instructions\nto set up the AllJoyn framework.  Start an AboutClient in client mode  The Notification service framework consumer depends on the About feature.  For more information about the About feature, see the  About API Guide .  Initialize the About feature  aboutService = AboutServiceImpl.getInstance();  Start the AboutClient in client mode  Start the client to receive announcements.  aboutService.startAboutClient(bus);  Initialize the Notification service framework  notificationService = NotificationService.getInstance();  Start the Notification service framework consumer  Implement the notificationReceiver interface  The notificationReceiver interface contains the following\nmethods that can be implemented.  receive  The  receive  method gets a notification object as an argument.\nImplement this method to receive the notifications sent on the network.  When a notification is received by the service, it will call\nthe  receive  method of the implemented notificationReceiver\ninterface with the notification.  @Override\npublic void receive(Notification notification)\n\n@Override\npublic void receive(Notification notification)  The notificationObject has a  dismiss  method and \"getters\"\nfor all notification arguments that were sent in the message.  Dismiss a message:  Implement this method to receive dismiss signals that were\nsent on the network so you can dismiss notifications that\nwere received and should not be shown.  notification.dismiss();  Arguments that describe the device and app it were received from follow.  UUID notifAppId  = notification.getAppId();\nString notifAppName = notification.getAppName();\nString notifDeviceId    = notification.getDeviceId();\nString notifDeviceName  = notification.getDeviceName();  Arguments that describe the message follow.  int msgID   = notification.getMessageId();\nString msgType = notification.getMessageType();  Arguments that give the content of the message follow.  List NotificationText  text = notification.getText();\nList RichAudioUrl  richAudioUrlL = notification.getRichAudioUrl();\n\nString richIconUrl  = notification.getRichIconUrl();\n   String richIconObjPath   = notification.getRichIconObjPath();\n   String richAudioObjPath  = notification.getRichAudioObjPath();\n   String responseObjectPath = notification.getResponseObjectPath();  For more details, refer to the API documentation.  Dismiss  When a dismiss signal is received by the service it calls the dismiss  method the application writer provided the service,\nso that the application can remove the application from the UI:  @Override\npublic void dismiss(int notifId, UUID appId)  Start the consumer  Start the consumer and pass it the bus attachment and the\nnotificationReceiver from above.  notificationService.initReceive(bus, notificationReceiver);",
            "title": "Implementing a Notification Consumer"
        },
        {
            "location": "/develop/api-guide/notification/objc/",
            "text": "Notification Service API Guide - Objective-C\n\n\nUsing the Notification Service\n\n\nThere are two ways to use the Notification Service, as a\n\nProducer\n and as \nConsumer\n. The power of the\n\nNotification service\n is its simplicity and ability to\nallow devices to \"talk\" to end users to provide meaningful information.\n\n\nThe Notification Producer side of an application is responsible\nfor sending a \nsessionless signal\n that\ncontains a small amount of text with some optional values.\nThis text is intended to be rendered on any device that contains\nthe Consumer side of the Notification Service.\n\n\nThe Notification Consumer side of an application is responsible\nfor registering to receive the \nsessionless signal\n\nfrom any application that supports the Producer side of the Notification service.\n\n\nAn application can be a consumer, a producer, or both.\n\n\nReference code\n\n\nSource code\n\n\n\n\n\n\n\n\nComponent\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAllJoyn\n\n\nThe AllJoyn Standard Library code\n\n\n\n\n\n\nNotificationService\n\n\nNotification service framework code\n\n\n\n\n\n\nServiceCommons\n\n\nCode that is common to the AllJoyn service frameworks\n\n\n\n\n\n\nSampleApps\n\n\nCode that is common to the AllJoyn service framework sample applications\n\n\n\n\n\n\n\n\nReference iOS application code\n\n\n\n\n\n\n\n\nApplication\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNotificationService\n\n\nAn iOS application of both a producer and consumer.\n\n\n\n\n\n\n\n\nPrerequisites\n\n\nFollow the steps in the \nBuilding iOS/OS X\n section to\nget your environment and project setup to use the AllJoyn\n\nframework and the Notification Service.\n\n\nBuild a Notification Producer\n\n\nThe following steps provide the high-level process to build a Notification Producer.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nImplement the ProperyStore and use this with the AboutService in server mode.\n\n\nInitialize the Notification service framework and create a Producer.\n\n\nCreate a notification, populate the necessary fields, and use\nthe Producer to send the notification.\n\n\n\n\nBuild a Notification Consumer\n\n\nThe following steps provide the high-level process to build a Notification Consumer.\n\n\n\n\nCreate the base for the AllJoyn application.\n\n\nCreate a class that implements the NotificationReceiver.\n\n\nInitialize the Notification service framework and provide\nthe receiver implementation.\n\n\nStart receiving notifications.\n\n\n\n\nProducing Notifications\n\n\nGeneral AllJoyn Setup\n\n\nInitialize the AllJoyn framework\n\n\nSee the \nBuilding iOS/OSX\n section for instructions\nto set up the AllJoyn framework.\n\n\nCreate bus attachment\n\n\nAJNBusAttachment* bus = [[AJNBusAttachment alloc]\ninitWithApplicationName:@\nCommonServiceApp\n allowRemoteMessages:true];\n[bus start];\n\n\n\n\nAbout Feature Setup\n\n\nCreate a PropertyStore and fill it with the needed values\n\n\nself.aboutPropertyStoreImpl = [[QASAboutPropertyStoreImpl alloc]\n   init]; setAppId:[[NSUUID UUID] UUIDString];\n[self.aboutPropertyStoreImpl setAppName:@\nNotificationApp\n];\n[self.aboutPropertyStoreImpl setDeviceId:@\n1231232145667745675477\n];\n[self.aboutPropertyStoreImpl setDeviceName:@\nScreen\n];\nNSArray* languages = @[@\nen\n, @\nsp\n, @\nde\n];\n\n\n\n\nStart the About Service\n\n\nself.aboutService = [QASAboutServiceApi sharedInstance];\n[self.aboutService startWithBus:self.busAttachment\n   andPropertyStore:self.aboutPropertyStoreImpl];\n\n\n\n\nCreate Notification Producer\n\n\nInitialize the Notification service framework\n\n\n  AJNSNotificationService *producerService;\n  // Initialize a AJNSNotificationService object\n  self.producerService =  [[AJNSNotificationService alloc] init];\n\n\n\n\nStart the Notification producer, providing the bus attachment\n\n\nand About property store implementation\n\n\n  AJNSNotificationSender *Sender;\n  // Call initSend\n  self.Sender = [self.producerService startSendWithBus:self.busAttachment\n    andPropertyStore:self.aboutPropertyStoreImpl];\n  if (!self.Sender) {\n      [self.logger fatalTag:[[self class] description]\n        text:@\nCould not initialize Sender\n];\n      return ER_FAIL;\n  }\n\n\n\n\nCreate a Notification\n\n\nRequired parameters are \nMessage Type\n and \nNotification Text\n\n\n  AJNSNotification *notification;\n  self.notification = [[AJNSNotification alloc] initWithMessageType:self.messageType\n     andNotificationText:self.notificationTextArr];\n\n\n\n\nSet the \nDeviceId\n \nDeviceName\n \nAppId\n \nAppName\n and\n  \nSender\n so that applications that receive and consumer the\n  notification know where it came from and who sent it.\n\n\n  [self.notification setDeviceId:nil];\n  [self.notification setDeviceName:nil];\n  [self.notification setAppId:nil];\n  [self.notification setAppName:self.appName];\n  [self.notification setSender:nsender];\n\n\n\n\nSend the Notification\n\n\nProvide a valid TTL.\n\n\n  QStatus sendStatus = [self.Sender send:self.notification ttl:nttl];\n  if (sendStatus != ER_OK) {\n    [self.logger infoTag:[[self class] description]\n       text:[NSString stringWithFormat:@\nSend has failed\n]];\n  }\n  else {\n    [self.logger infoTag:[[self class] description]\n       text:[NSString stringWithFormat:@\nSuccessfully sent!\n]];\n  }\n\n\n\n\nAdvanced Features\n\n\n\n\nAudio\n\n\nImage\n\n\nCustom Attributes\n\n\nDelete the last message sent\n\n\n\n\nConsuming Notifications\n\n\nGeneral AllJoyn Setup\n\n\nInitialize the AllJoyn framework\n\n\nSee the \nBuilding iOS/OSX\n section for instructions\nto set up the AllJoyn framework.\n\n\nCreate bus attachment\n\n\nAJNBusAttachment* bus = [[AJNBusAttachment alloc]\ninitWithApplicationName:@\nCommonServiceApp\n allowRemoteMessages:true];\n[bus start];\n\n\n\n\nAbout Feature Setup\n\n\nCreate Notification Consumer\n\n\nInitialize the Notification service framework\n\n\n  AJNSNotificationService *consumerService;\n  self.consumerService = [AJNSNotificationService sharedInstance];\n\n\n\n\nImplement the \nnotificationReceiver\n interface (\nreceive\n and\n\n\ndismissMsgId\n methods)\n\n\n  - (void)receive:(AJNSNotification *)ajnsNotification\n  {\n    // application logic to handle the received notification\n  }\n\n  - (void)dismissMsgId:(const int32_t)msgId appId:(NSString*) appId\n  {\n    // application logic to handle the dismissed notification\n  }\n\n\n\n\nStart the Notification consumer, providing the bus attachment\n\n\nand Notification receiver\n\n\n  // Call \ninitReceive\n\n  status = [self.consumerService startReceive:self.busAttachment\n     withReceiver:self];\n  if (status != ER_OK) {\n    [self.logger fatalTag:[[self class] description]\n       text:@\nCould not initialize receiver\n];\n    return ER_FAIL;\n  }\n\n\n\n\nRefer to the Notification Service Sample App source code\nand API documentation for examples and more details.",
            "title": "Objc"
        },
        {
            "location": "/develop/api-guide/notification/objc/#notification-service-api-guide-objective-c",
            "text": "",
            "title": "Notification Service API Guide - Objective-C"
        },
        {
            "location": "/develop/api-guide/notification/objc/#using-the-notification-service",
            "text": "There are two ways to use the Notification Service, as a Producer  and as  Consumer . The power of the Notification service  is its simplicity and ability to\nallow devices to \"talk\" to end users to provide meaningful information.  The Notification Producer side of an application is responsible\nfor sending a  sessionless signal  that\ncontains a small amount of text with some optional values.\nThis text is intended to be rendered on any device that contains\nthe Consumer side of the Notification Service.  The Notification Consumer side of an application is responsible\nfor registering to receive the  sessionless signal \nfrom any application that supports the Producer side of the Notification service.  An application can be a consumer, a producer, or both.",
            "title": "Using the Notification Service"
        },
        {
            "location": "/develop/api-guide/notification/objc/#reference-code",
            "text": "Source code     Component  Description      AllJoyn  The AllJoyn Standard Library code    NotificationService  Notification service framework code    ServiceCommons  Code that is common to the AllJoyn service frameworks    SampleApps  Code that is common to the AllJoyn service framework sample applications     Reference iOS application code     Application  Description      NotificationService  An iOS application of both a producer and consumer.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/notification/objc/#prerequisites",
            "text": "Follow the steps in the  Building iOS/OS X  section to\nget your environment and project setup to use the AllJoyn \nframework and the Notification Service.",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/api-guide/notification/objc/#build-a-notification-producer",
            "text": "The following steps provide the high-level process to build a Notification Producer.   Create the base for the AllJoyn application.  Implement the ProperyStore and use this with the AboutService in server mode.  Initialize the Notification service framework and create a Producer.  Create a notification, populate the necessary fields, and use\nthe Producer to send the notification.",
            "title": "Build a Notification Producer"
        },
        {
            "location": "/develop/api-guide/notification/objc/#build-a-notification-consumer",
            "text": "The following steps provide the high-level process to build a Notification Consumer.   Create the base for the AllJoyn application.  Create a class that implements the NotificationReceiver.  Initialize the Notification service framework and provide\nthe receiver implementation.  Start receiving notifications.",
            "title": "Build a Notification Consumer"
        },
        {
            "location": "/develop/api-guide/notification/objc/#producing-notifications",
            "text": "General AllJoyn Setup  Initialize the AllJoyn framework  See the  Building iOS/OSX  section for instructions\nto set up the AllJoyn framework.  Create bus attachment  AJNBusAttachment* bus = [[AJNBusAttachment alloc]\ninitWithApplicationName:@ CommonServiceApp  allowRemoteMessages:true];\n[bus start];  About Feature Setup  Create a PropertyStore and fill it with the needed values  self.aboutPropertyStoreImpl = [[QASAboutPropertyStoreImpl alloc]\n   init]; setAppId:[[NSUUID UUID] UUIDString];\n[self.aboutPropertyStoreImpl setAppName:@ NotificationApp ];\n[self.aboutPropertyStoreImpl setDeviceId:@ 1231232145667745675477 ];\n[self.aboutPropertyStoreImpl setDeviceName:@ Screen ];\nNSArray* languages = @[@ en , @ sp , @ de ];  Start the About Service  self.aboutService = [QASAboutServiceApi sharedInstance];\n[self.aboutService startWithBus:self.busAttachment\n   andPropertyStore:self.aboutPropertyStoreImpl];  Create Notification Producer  Initialize the Notification service framework    AJNSNotificationService *producerService;\n  // Initialize a AJNSNotificationService object\n  self.producerService =  [[AJNSNotificationService alloc] init];  Start the Notification producer, providing the bus attachment  and About property store implementation    AJNSNotificationSender *Sender;\n  // Call initSend\n  self.Sender = [self.producerService startSendWithBus:self.busAttachment\n    andPropertyStore:self.aboutPropertyStoreImpl];\n  if (!self.Sender) {\n      [self.logger fatalTag:[[self class] description]\n        text:@ Could not initialize Sender ];\n      return ER_FAIL;\n  }  Create a Notification  Required parameters are  Message Type  and  Notification Text    AJNSNotification *notification;\n  self.notification = [[AJNSNotification alloc] initWithMessageType:self.messageType\n     andNotificationText:self.notificationTextArr];  Set the  DeviceId   DeviceName   AppId   AppName  and\n   Sender  so that applications that receive and consumer the\n  notification know where it came from and who sent it.    [self.notification setDeviceId:nil];\n  [self.notification setDeviceName:nil];\n  [self.notification setAppId:nil];\n  [self.notification setAppName:self.appName];\n  [self.notification setSender:nsender];  Send the Notification  Provide a valid TTL.    QStatus sendStatus = [self.Sender send:self.notification ttl:nttl];\n  if (sendStatus != ER_OK) {\n    [self.logger infoTag:[[self class] description]\n       text:[NSString stringWithFormat:@ Send has failed ]];\n  }\n  else {\n    [self.logger infoTag:[[self class] description]\n       text:[NSString stringWithFormat:@ Successfully sent! ]];\n  }  Advanced Features   Audio  Image  Custom Attributes  Delete the last message sent",
            "title": "Producing Notifications"
        },
        {
            "location": "/develop/api-guide/notification/objc/#consuming-notifications",
            "text": "General AllJoyn Setup  Initialize the AllJoyn framework  See the  Building iOS/OSX  section for instructions\nto set up the AllJoyn framework.  Create bus attachment  AJNBusAttachment* bus = [[AJNBusAttachment alloc]\ninitWithApplicationName:@ CommonServiceApp  allowRemoteMessages:true];\n[bus start];  About Feature Setup  Create Notification Consumer  Initialize the Notification service framework    AJNSNotificationService *consumerService;\n  self.consumerService = [AJNSNotificationService sharedInstance];  Implement the  notificationReceiver  interface ( receive  and  dismissMsgId  methods)    - (void)receive:(AJNSNotification *)ajnsNotification\n  {\n    // application logic to handle the received notification\n  }\n\n  - (void)dismissMsgId:(const int32_t)msgId appId:(NSString*) appId\n  {\n    // application logic to handle the dismissed notification\n  }  Start the Notification consumer, providing the bus attachment  and Notification receiver    // Call  initReceive \n  status = [self.consumerService startReceive:self.busAttachment\n     withReceiver:self];\n  if (status != ER_OK) {\n    [self.logger fatalTag:[[self class] description]\n       text:@ Could not initialize receiver ];\n    return ER_FAIL;\n  }  Refer to the Notification Service Sample App source code\nand API documentation for examples and more details.",
            "title": "Consuming Notifications"
        },
        {
            "location": "/develop/api-guide/onboarding/",
            "text": "Onboarding API Guide\n\n\n\n\nJava\n\n\nObjective-C\n\n\n\n\nBest Practices\n\n\nOnboardee application\n\n\nPerform a Wi-Fi scan prior to entering SoftAP mode\n\n\nPrior to starting up as a SoftAP, the device should scan\nand store a list of the nearby APs. This allows for an Onboarder\napplication to make an Onboarding service framework API call to\nGetScanInfo. This helps remove errors for the end user because\nboth sides of the Onboarding service framework can validate\nthat each device detects the personal AP.\n\n\nAdd \"AJ_\" as the prefix to the SoftAP SSID\n\n\nWhen switching the device into a SoftAP (if it has not been\npreviously onboarded), the SSID should contain a prefix of\n\"AJ_\". This prefix allows for Onboarder applications to show\na shorter list of the nearby devices that are eligible to be\nonboarded to a user's AP.\n\n\nThis is not a hard requirement but a very strong recommendation\nto standardize the way that developers will build Onboarder\napplications to present a cleaner UI and fewer options for\nthe end user.\n\n\nMake use of Configuration service framework\n\n\nFor an end user who may have multiple devices in the home of\nthe same type (such as a refrigerator), it is important to\nallow for a custom name to be entered (for example, \"Kitchen Fridge\"\nor \"Garage Fridge\"). Adding the Configuration service framework\ninto the Onboardee applications allows for a few things.\n\n\n\n\nAs the creator of the device, it can expose a set of initial\nvalues that are customized to the device to allow any third-party\napplication to discover these input options and show a UI for end users.\n\n\nBy default, it allows the users to set a \"friendly name\"\nwhich will be propagated to a third-party developer application\nso the end user can identify the device by a name that they entered.\n\n\n\n\nAnnounce again after connecting to a personal AP\n\n\nWhen connecting to a personal AP that the end user provided,\nthe About feature should be used to execute an Announce API method.\nThis will ensure that the applications on the new network are\npromptly notified of the existing onboarded device. If the\nAnnounce API method is not executed, the AboutData will eventually\ntravel to the other applications; explicitly calling the method\nensures prompt arrival.\n\n\nSingle Onboardee application\n\n\nSince the Onboardee application makes changes to the device's\nWi-Fi settings, only one Onboardee application should be\nrunning at any given time. Running multiple applications at\nthe same time results in non-deterministic behavior as\nmultiple applications will be attempting to modify the Wi-Fi settings.\n\n\nOnboarder application\n\n\nAllow Onboardee device to be configured with AP information\n\n\nwhen AP is hidden\n\n\nSince the platform Wi-Fi scan will not list APs that are\nhidden, the application should allow the end user to input\nthe SSID and security information manually. The Onboardee\nwill attempt to connect to the network and if it fails, will\nstart back up in SoftAP mode and report the error condition\nto the Onboarder application.\n\n\nAllow the Onboardee device to be customized by the user\n\n\nThe AllJoyn service frameworks are intended to be building\nblocks that can be used together. As such, many devices that\nsupport the Onboarding service framework also support the\nConfiguration service framework.\n\n\nThe Onboarder application should leverage the information\nfrom the About feature (AboutData) to determine if the UI can\nsupport the Configuration service framework. From the About\nfeature's Announce callback lists the supported interfaces.\nIf org.alljoyn.Config is contained, then the Configuration service\nframework is supported, and the Configuration service framework\nAPIs get a list of any device-specific fields that can be entered,\nand dynamically generate the UI input widgets to enter these\nvalues. At a minimum, allow for the text field of \"Friendly Name\"\nto be entered so end users can name the device that is being onboarded.",
            "title": "Home"
        },
        {
            "location": "/develop/api-guide/onboarding/#onboarding-api-guide",
            "text": "Java  Objective-C",
            "title": "Onboarding API Guide"
        },
        {
            "location": "/develop/api-guide/onboarding/#best-practices",
            "text": "Onboardee application  Perform a Wi-Fi scan prior to entering SoftAP mode  Prior to starting up as a SoftAP, the device should scan\nand store a list of the nearby APs. This allows for an Onboarder\napplication to make an Onboarding service framework API call to\nGetScanInfo. This helps remove errors for the end user because\nboth sides of the Onboarding service framework can validate\nthat each device detects the personal AP.  Add \"AJ_\" as the prefix to the SoftAP SSID  When switching the device into a SoftAP (if it has not been\npreviously onboarded), the SSID should contain a prefix of\n\"AJ_\". This prefix allows for Onboarder applications to show\na shorter list of the nearby devices that are eligible to be\nonboarded to a user's AP.  This is not a hard requirement but a very strong recommendation\nto standardize the way that developers will build Onboarder\napplications to present a cleaner UI and fewer options for\nthe end user.  Make use of Configuration service framework  For an end user who may have multiple devices in the home of\nthe same type (such as a refrigerator), it is important to\nallow for a custom name to be entered (for example, \"Kitchen Fridge\"\nor \"Garage Fridge\"). Adding the Configuration service framework\ninto the Onboardee applications allows for a few things.   As the creator of the device, it can expose a set of initial\nvalues that are customized to the device to allow any third-party\napplication to discover these input options and show a UI for end users.  By default, it allows the users to set a \"friendly name\"\nwhich will be propagated to a third-party developer application\nso the end user can identify the device by a name that they entered.   Announce again after connecting to a personal AP  When connecting to a personal AP that the end user provided,\nthe About feature should be used to execute an Announce API method.\nThis will ensure that the applications on the new network are\npromptly notified of the existing onboarded device. If the\nAnnounce API method is not executed, the AboutData will eventually\ntravel to the other applications; explicitly calling the method\nensures prompt arrival.  Single Onboardee application  Since the Onboardee application makes changes to the device's\nWi-Fi settings, only one Onboardee application should be\nrunning at any given time. Running multiple applications at\nthe same time results in non-deterministic behavior as\nmultiple applications will be attempting to modify the Wi-Fi settings.  Onboarder application  Allow Onboardee device to be configured with AP information  when AP is hidden  Since the platform Wi-Fi scan will not list APs that are\nhidden, the application should allow the end user to input\nthe SSID and security information manually. The Onboardee\nwill attempt to connect to the network and if it fails, will\nstart back up in SoftAP mode and report the error condition\nto the Onboarder application.  Allow the Onboardee device to be customized by the user  The AllJoyn service frameworks are intended to be building\nblocks that can be used together. As such, many devices that\nsupport the Onboarding service framework also support the\nConfiguration service framework.  The Onboarder application should leverage the information\nfrom the About feature (AboutData) to determine if the UI can\nsupport the Configuration service framework. From the About\nfeature's Announce callback lists the supported interfaces.\nIf org.alljoyn.Config is contained, then the Configuration service\nframework is supported, and the Configuration service framework\nAPIs get a list of any device-specific fields that can be entered,\nand dynamically generate the UI input widgets to enter these\nvalues. At a minimum, allow for the text field of \"Friendly Name\"\nto be entered so end users can name the device that is being onboarded.",
            "title": "Best Practices"
        },
        {
            "location": "/develop/api-guide/onboarding/java/",
            "text": "Onboarding API Guide - Java\n\n\nReference code\n\n\nOnboarder application components\n\n\n\n\n\n\n\n\nComponent\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAllJoyn\n Standard Library framework\n\n\nalljoyn.jar\nalljoyn_about.jar\n\n\n\n\n\n\nOnboarding service framework package\n\n\nalljoyn_onboarding.jar\nalljoyn_onboarding_sdk.jar\n\n\n\n\n\n\nSampleApps utility package\n\n\nalljoyn_apps_android_utils.jar\n\n\n\n\n\n\n\n\nReference Java application code\n\n\n\n\n\n\n\n\nApplication\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOnboardingSDKSampleClient\n\n\nA sample Android application that utilizes the Onboarding SDK to retrieve potential Onboardees and personal APs, and bring an Onboardee on the user's personal AP.\n\n\n\n\n\n\n\n\nSetting up the AllJoyn framework\n\n\nThe steps required for this service framework are universal\nto all applications that use the AllJoyn framework and for\nany application using one or more AllJoyn service frameworks.\nComplete the procedures in the following sections to guide you in this process:\n\n\n\n\nBuilding Android\n\n\nAbout API Guide\n\n\n\n\nSet up the Onboarding service framework\n\n\nSee the \nBuilding Android\n section for instructions\non compiling the Onboarding SDK.\n\n\nBuild the Onboarder application\n\n\nThe following steps provides the high-level process to build\nan Onboarding application on top of the Onboarding SDK.\n\n\n\n\nCreate the base for the AllJoyn application. See the\n[About API Guide][about-api-guide-android] for more information.\n\n\nAdd the Onboarding service framework and SDK components\nto your project.\n\n\nComplete the tasks in \nImplementing the Onboarder Application\n.\nReview the code reference, or use the SDK sample client as a reference.\n\n\n\n\nImplementing the Onboarder Application\n\n\nInitialize the AllJoyn framework\n\n\nSee the [About API Guide][about-api-guide-android] for instructions to\ninitialize the AllJoyn framework.\n\n\nConnect to the AllJoyn bus\n\n\nbusAttachment = new BusAttachment(context.getPackageName(),\n   BusAttachment.RemoteMessage.Receive);\n   busAttachment.connect();\n\n\n\n\nSet the AllJoyn router for thin library connections\n\n\nRegister the BroadcastReceiver object to receive a NETWORK_STATE_CHANGED_ACTION\nintent when the Android device connected to a selected AP.\n\n\nprivate final static String DEFAULT_PINCODE = \n000000\n;\n/* this step only required if there are thin libraries version 14.02 */\nStatus pasStatus = PasswordManager.setCredentials(\nALLJOYN_PIN_KEYX\n,\n   DEFAULT_PINCODE);\nrouterName = \norg.alljoyn.BusNode.d\n + busAttachment.getGlobalGUIDString();\nint flag = BusAttachment.ALLJOYN_REQUESTNAME_FLAG_DO_NOT_QUEUE;\nStatus reqStatus = busAttachment.requestName(routerName, flag);\n\n\n\n\nInitialize the AboutService in client mode\n\n\nThe About feature is used to receive Announcement signals.\nThe AllJoyn device can start announcing itself once the Android\ndevice is connected to a SoftAP of the AllJoyn device.\nThe Announcement signal provides the information required\nfor starting the onboarding process.\n\n\nFor additional details, see the [About API Guide][about-api-guide-android].\n\n\n// Initialize the About service in client mode\nAboutService aboutService = AboutServiceImpl.getInstance();\naboutService.startAboutClient(busAttachment);\n\n// Listen to AllJoyn device announcments\naboutService.addAnnouncementHandler(this, new\nString[]{OnboardingTransport.INTERFACE_NAME});\n\n\n\n\nInitialize the Onboarding Manager\n\n\nStart OnboardingManager and pass it the application's context,\nthe bus attachment, and the AboutService.\n\n\ntry {\nOnboardingManager.getInstance().init(context, aboutService, busAttachment);\n} catch (OnboardingIllegalArgumentException e) {\n   e.printStackTrace();\n} catch (OnboardingIllegalStateException e) {\n   e.printStackTrace();\n}\n\n\n\n\nPerform a Wi-Fi scan\n\n\nThe Wi-Fi scan discovers all Wi-Fi networks in the vicinity of\nthe Android device. The application can then filter out the\npotential personal APs and Onboardees.\n\n\n// Register a broadcast receiver for Wi-Fi scans\nBroadcastReceiver wifiReceiver = new BroadcastReceiver() {\n   @Override\n   public void onReceive(Context context, Intent intent) {\n      unregisterReceiver(this);\n\n      // filter the results\n      // All the access points that were found\n      // OnboardingManager.getInstance().getWifiScanResults(WifiFilter.ALL);\n\n      // Only the potential onboardees\n      // OnboardingManager.getInstance().getWifiScanResults(WifiFilter.ONBOARDABLE);\n\n      // Only the potential personal APs\n      OnboardingManager.getInstance().getWifiScanResults(WifiFilter.TARGET)\n   }\n};\n\nIntentFilter wifiFilter = new\nIntentFilter(OnboardingManager.WIFI_SCAN_RESULTS_AVAILABLE_ACTION);\nregisterReceiver(wifiReceiver, wifiFilter);\nregisterReceiver(wifireceiver, wifiFilter);\n\n// perform the scan\nOnboardingManager.getInstance().scanWiFi();\n\n\n\n\nConnect to the onboardee's SoftAP\n\n\nConnect to the SoftAP of the device so that the AllJoyn device\n(onboardee) and the Android device (onboarder) are on the same\nnetwork and can communicate via the AllJoyn framework.\n\n\nUse the Android APIs to connect to the SoftAP. Refer to the\nAndroid documentation for more information.\n\n\n(http://developer.android.com/reference/android/net/wifi/WifiManager.html)\n\n\n(http://developer.android.com/reference/android/net/wifi/WifiConfiguration.html)\n\n\nOnboard the onboardee to the personal AP\n\n\nCreate a broadcast receiver\n\n\nOnboarding is performed asynchronously and the application\nis notified of its progress/errors by Android intents.\n\n\nRegister a broadcast receiver to receive onboarding progress\nnotifications and errors.\n\n\nBroadcastReceiver mainReceiver = new BroadcastReceiver() {\n   public void onReceive(Context context, Intent intent) {\n      if (intent.getAction().equals(OnboardingManager.STATE_CHANGE_ACTION)) {\n         // The Onboarding Manager reporting its progress.\n         // See the Onboarding SDK API doc for list of intent extras.\n}\n      if (intent.getAction().equals(OnboardingManager.ERROR)) {\n         // The Onboarding Manager reporting an error.\n         // See the Onboarding SDK API doc for list of errors.\n\n      }\n   }\n};\n\nmainFilter = new IntentFilter();\nmainFilter.addAction(OnboardingManager.STATE_CHANGE_ACTION);\nmainFilter.addAction(OnboardingManager.ERROR);\n\nregisterReceiver(mainReceiver, mainFilter);\n\n\n\n\nPrepare the Onboarding configuration\n\n\n// Prepare the onboardee data\nWiFiNetworkConfiguration onboardee = new WiFiNetworkConfiguration(onboardeeSsid,\n   onboardeeAuthType, onboardeePassword);\n\n// Prepare the personal AP data\nWiFiNetworkConfiguration target = new WiFiNetworkConfiguration(targetSsid,\n   targetAuthType, targetPassword);\n\n// Create the OnboardingConfiguration object\nOnboardingConfiguration config = new OnboardingConfiguration(onboardee,\n   onboardeeWifiTimeout, onboardeeAnnouncementTimeout, target,\n      targetWifiTimeout, targetAnnouncementTimeout);\n\n\n\n\nCall \nrunOnboarding()\n\n\ntry {\n   OnboardingManager.getInstance().runOnboarding(config);\n} catch (OnboardingIllegalArgumentException e) {\n} catch (OnboardingIllegalStateException e) {\n} catch (WifiDisabledException e) {\n}\n\n\n\n\nAbort the onboarding process\n\n\nThe onboarding process can take some time, resulting in possible\nconnection timeouts. The SDK has an API to enable the application\nto abort the process and return to idle state.\n\n\nNOTE:\n Aborting is not possible once the personal AP credentials\nhave been passed to the onboardee.\n\n\ntry {\n   OnboardingManager.getInstance().abortOnboarding();\n} catch (OnboardingIllegalStateException e) {\n}\n\n\n\n\nUse the broadcast receiver to monitor the aborting process.\n\n\nRemove an AllJoyn device from the personal AP\n\n\nCreate a broadcast receiver\n\n\nLike with onboarding, offboarding is performed asynchronously\nand the application is notified of its progress/errors by Android intents.\n\n\nRegister a broadcast receiver offboarding progress notifications and errors :\n\n\nBroadcastReceiver mainReceiver = new BroadcastReceiver() {\n   public void onReceive(Context context, Intent intent) {\n\n      if (intent.getAction().equals(OnboardingManager.STATE_CHANGE_ACTION)) {\n         // The Onboarding Manager reporting its progress.\n         // See the Onboarding SDK API doc for list of intent extras.\n}\n      if (intent.getAction().equals(OnboardingManager.ERROR)) {\n         // The Onboarding Manager reporting an error.\n         // See the Onboarding SDK API doc for list of errors.\n\n      }\n   }\n};\n\nmainFilter = new IntentFilter();\nmainFilter.addAction(OnboardingManager.STATE_CHANGE_ACTION);\nmainFilter.addAction(OnboardingManager.ERROR);\n\nregisterReceiver(mainReceiver, mainFilter);\n\n\n\n\nPrepare the Offboarding configuration\n\n\n// Prepare the AJ configuration of the AJ device to be offboarded\nOffboardingConfiguration config =\nnew OffboardingConfiguration(busName,port);\n\n\n\n\nCall \nrunOffboarding()\n\n\ntry {\n   OnboardingManager.getInstance().runOffboarding(config);\n   } catch (OnboardingIllegalArgumentException e) {\n\n   } catch (OnboardingIllegalStateException e) {\n\n   } catch (WifiDisabledException e) {\n   }\n\n\n\n\nShutdown\n\n\nOnce you are done usingthe Onboarding SDK, free the variables\nused in the application.\n\n\ntry {\n   OnboardingManager.getInstance().shutDown();\n   } catch (OnboardingIllegalStateException e) {\n      try { OnboardingManager.getInstance().abortOnboarding();\n      OnboardingManager.getInstance().shutDown();\n   } catch (OnboardingIllegalStateException e1) {\n   }\n}\n\n\n\n\nAllJoyn Device State Machine\n\n\nThe following figure illustrates the AllJoyn device state during the onboarding process.\n\n\n\n\nFigure:\n Onboarding state diagram\n\n\nOnboarding process connection points\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nSoftAP availability\n\n\nSoftAP is available when the device is in any of the following states:\nPersonal AP Not Configured\nPersonal AP Configured/Not Validated\nPersonal AP Configured/Error\nPersonal AP Configured/Retry\n\n\n\n\n\n\nAutomatic connection to validated personal\n\n\nAt startup time, the device will automatically connect to the personal AP if is configured and validated.\n\n\n\n\n\n\nAP Failed connection attempts with personal AP\n\n\nIf the device is in personal AP Configured/Validated state but the device fails to connect after a configurable number of delayed attempts, it will move to state Personal AP Configured/Retry. In this state, the SoftAP is enabled to allow the device to be reconfigured. After a timer expires, the device goes back to the Personal AP Configured/Validated and it will try to connect to the Personal AP again.\n\n\n\n\n\n\n\n\nBest Practices\n\n\nOnboarder application\n\n\nFilter the APs to show just what can be onboarded\n\n\nWhen developing an Onboarder application for Android, use\nthe Onboarding Manager APIs to perform a Wi-Fi scan and then\nautomatically filter the results into Onboardees and potential APs.\nThe UI should only present the Onboardees when allowing\nthe user to select what to onboard.\n\n\nOn other platforms, when building an Onboarder application,\nit is recommended to use the native platform APIs to list\nout the nearby Wi-Fi APs. Doing this in a crowded Wi-Fi environment\nwith many APs presents a challenge for the end user to scroll\nthrough a long list and identify the device to be onboarded.\n\n\nIt is recommended to have the device use \"AJ_\" as a prefix for\nthe SSID. As such, the Onboarder application can assume, based\non the SSID, that a device can support the Onboarding service\nframework. The UI for the Onboarder application should present\nthe devices that started with \"AJ_\" at the top of the list of\nnearby devices that can be onboarded.\n\n\nUse the Wi-Fi scan list from the device running the Onboarder application\n\n\nWhen developing an Onboarder application for Android, use the\nOnboarding Manager APIs to perform a Wi-Fi scan and then automatically\nfilter the results into Onboardees and potential APs. The UI\nshould only present the Onboardees when allowing the user\nto select what to onboard.\n\n\nOn other platforms, upon successfully joining and validating\nthat a device supports the Onboarding service framework, a\nplatform request should be made to get a list of the nearby APs.\nThe application should filter out any SSIDs that start with\n\"AJ_\", as these should be Onboardee devices a user's personal AP.\nThe UI will present the option to select an AP to preconfigure\nthe SSID and if security on the AP is enabled show an input\nfor a password/passphrase.\n\n\nUse the Wi-Fi scan list from the Onboardee device\n\n\nOnce the Wi-Fi list is generated per \nUse the Wi-Fi scan list\nfrom the device running the Onboarder application\n, use the \nOnboarding service framework API to request the list of APs\nthat the Onboardee device can detect.  This will ensure\nthat the consumer selected/entered AP is detected by both\ndevices, and that signal strength is sufficient to facilitate a connection.\n\n\nIf the application provides a completely different list than\nwhat the Onboardee device detects, it is recommended to\nalert the user upon entering/selecting an AP that the device\nbeing onboarded could potentially be out of range of entered/selected AP.\nIf the Onboardee application receives an error, show a pop-up\nwith a suggestion to move the device or AP closer. It should\nthen continue to send the credentials to the device and wait\nfor the appropriate response/error messages.",
            "title": "Java"
        },
        {
            "location": "/develop/api-guide/onboarding/java/#onboarding-api-guide-java",
            "text": "",
            "title": "Onboarding API Guide - Java"
        },
        {
            "location": "/develop/api-guide/onboarding/java/#reference-code",
            "text": "Onboarder application components     Component  Description      AllJoyn  Standard Library framework  alljoyn.jar alljoyn_about.jar    Onboarding service framework package  alljoyn_onboarding.jar alljoyn_onboarding_sdk.jar    SampleApps utility package  alljoyn_apps_android_utils.jar     Reference Java application code     Application  Description      OnboardingSDKSampleClient  A sample Android application that utilizes the Onboarding SDK to retrieve potential Onboardees and personal APs, and bring an Onboardee on the user's personal AP.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/onboarding/java/#setting-up-the-alljoyn-framework",
            "text": "The steps required for this service framework are universal\nto all applications that use the AllJoyn framework and for\nany application using one or more AllJoyn service frameworks.\nComplete the procedures in the following sections to guide you in this process:   Building Android  About API Guide   Set up the Onboarding service framework  See the  Building Android  section for instructions\non compiling the Onboarding SDK.  Build the Onboarder application  The following steps provides the high-level process to build\nan Onboarding application on top of the Onboarding SDK.   Create the base for the AllJoyn application. See the\n[About API Guide][about-api-guide-android] for more information.  Add the Onboarding service framework and SDK components\nto your project.  Complete the tasks in  Implementing the Onboarder Application .\nReview the code reference, or use the SDK sample client as a reference.",
            "title": "Setting up the AllJoyn framework"
        },
        {
            "location": "/develop/api-guide/onboarding/java/#implementing-the-onboarder-application",
            "text": "Initialize the AllJoyn framework  See the [About API Guide][about-api-guide-android] for instructions to\ninitialize the AllJoyn framework.  Connect to the AllJoyn bus  busAttachment = new BusAttachment(context.getPackageName(),\n   BusAttachment.RemoteMessage.Receive);\n   busAttachment.connect();  Set the AllJoyn router for thin library connections  Register the BroadcastReceiver object to receive a NETWORK_STATE_CHANGED_ACTION\nintent when the Android device connected to a selected AP.  private final static String DEFAULT_PINCODE =  000000 ;\n/* this step only required if there are thin libraries version 14.02 */\nStatus pasStatus = PasswordManager.setCredentials( ALLJOYN_PIN_KEYX ,\n   DEFAULT_PINCODE);\nrouterName =  org.alljoyn.BusNode.d  + busAttachment.getGlobalGUIDString();\nint flag = BusAttachment.ALLJOYN_REQUESTNAME_FLAG_DO_NOT_QUEUE;\nStatus reqStatus = busAttachment.requestName(routerName, flag);  Initialize the AboutService in client mode  The About feature is used to receive Announcement signals.\nThe AllJoyn device can start announcing itself once the Android\ndevice is connected to a SoftAP of the AllJoyn device.\nThe Announcement signal provides the information required\nfor starting the onboarding process.  For additional details, see the [About API Guide][about-api-guide-android].  // Initialize the About service in client mode\nAboutService aboutService = AboutServiceImpl.getInstance();\naboutService.startAboutClient(busAttachment);\n\n// Listen to AllJoyn device announcments\naboutService.addAnnouncementHandler(this, new\nString[]{OnboardingTransport.INTERFACE_NAME});  Initialize the Onboarding Manager  Start OnboardingManager and pass it the application's context,\nthe bus attachment, and the AboutService.  try {\nOnboardingManager.getInstance().init(context, aboutService, busAttachment);\n} catch (OnboardingIllegalArgumentException e) {\n   e.printStackTrace();\n} catch (OnboardingIllegalStateException e) {\n   e.printStackTrace();\n}  Perform a Wi-Fi scan  The Wi-Fi scan discovers all Wi-Fi networks in the vicinity of\nthe Android device. The application can then filter out the\npotential personal APs and Onboardees.  // Register a broadcast receiver for Wi-Fi scans\nBroadcastReceiver wifiReceiver = new BroadcastReceiver() {\n   @Override\n   public void onReceive(Context context, Intent intent) {\n      unregisterReceiver(this);\n\n      // filter the results\n      // All the access points that were found\n      // OnboardingManager.getInstance().getWifiScanResults(WifiFilter.ALL);\n\n      // Only the potential onboardees\n      // OnboardingManager.getInstance().getWifiScanResults(WifiFilter.ONBOARDABLE);\n\n      // Only the potential personal APs\n      OnboardingManager.getInstance().getWifiScanResults(WifiFilter.TARGET)\n   }\n};\n\nIntentFilter wifiFilter = new\nIntentFilter(OnboardingManager.WIFI_SCAN_RESULTS_AVAILABLE_ACTION);\nregisterReceiver(wifiReceiver, wifiFilter);\nregisterReceiver(wifireceiver, wifiFilter);\n\n// perform the scan\nOnboardingManager.getInstance().scanWiFi();  Connect to the onboardee's SoftAP  Connect to the SoftAP of the device so that the AllJoyn device\n(onboardee) and the Android device (onboarder) are on the same\nnetwork and can communicate via the AllJoyn framework.  Use the Android APIs to connect to the SoftAP. Refer to the\nAndroid documentation for more information.  (http://developer.android.com/reference/android/net/wifi/WifiManager.html)  (http://developer.android.com/reference/android/net/wifi/WifiConfiguration.html)  Onboard the onboardee to the personal AP  Create a broadcast receiver  Onboarding is performed asynchronously and the application\nis notified of its progress/errors by Android intents.  Register a broadcast receiver to receive onboarding progress\nnotifications and errors.  BroadcastReceiver mainReceiver = new BroadcastReceiver() {\n   public void onReceive(Context context, Intent intent) {\n      if (intent.getAction().equals(OnboardingManager.STATE_CHANGE_ACTION)) {\n         // The Onboarding Manager reporting its progress.\n         // See the Onboarding SDK API doc for list of intent extras.\n}\n      if (intent.getAction().equals(OnboardingManager.ERROR)) {\n         // The Onboarding Manager reporting an error.\n         // See the Onboarding SDK API doc for list of errors.\n\n      }\n   }\n};\n\nmainFilter = new IntentFilter();\nmainFilter.addAction(OnboardingManager.STATE_CHANGE_ACTION);\nmainFilter.addAction(OnboardingManager.ERROR);\n\nregisterReceiver(mainReceiver, mainFilter);  Prepare the Onboarding configuration  // Prepare the onboardee data\nWiFiNetworkConfiguration onboardee = new WiFiNetworkConfiguration(onboardeeSsid,\n   onboardeeAuthType, onboardeePassword);\n\n// Prepare the personal AP data\nWiFiNetworkConfiguration target = new WiFiNetworkConfiguration(targetSsid,\n   targetAuthType, targetPassword);\n\n// Create the OnboardingConfiguration object\nOnboardingConfiguration config = new OnboardingConfiguration(onboardee,\n   onboardeeWifiTimeout, onboardeeAnnouncementTimeout, target,\n      targetWifiTimeout, targetAnnouncementTimeout);  Call  runOnboarding()  try {\n   OnboardingManager.getInstance().runOnboarding(config);\n} catch (OnboardingIllegalArgumentException e) {\n} catch (OnboardingIllegalStateException e) {\n} catch (WifiDisabledException e) {\n}  Abort the onboarding process  The onboarding process can take some time, resulting in possible\nconnection timeouts. The SDK has an API to enable the application\nto abort the process and return to idle state.  NOTE:  Aborting is not possible once the personal AP credentials\nhave been passed to the onboardee.  try {\n   OnboardingManager.getInstance().abortOnboarding();\n} catch (OnboardingIllegalStateException e) {\n}  Use the broadcast receiver to monitor the aborting process.  Remove an AllJoyn device from the personal AP  Create a broadcast receiver  Like with onboarding, offboarding is performed asynchronously\nand the application is notified of its progress/errors by Android intents.  Register a broadcast receiver offboarding progress notifications and errors :  BroadcastReceiver mainReceiver = new BroadcastReceiver() {\n   public void onReceive(Context context, Intent intent) {\n\n      if (intent.getAction().equals(OnboardingManager.STATE_CHANGE_ACTION)) {\n         // The Onboarding Manager reporting its progress.\n         // See the Onboarding SDK API doc for list of intent extras.\n}\n      if (intent.getAction().equals(OnboardingManager.ERROR)) {\n         // The Onboarding Manager reporting an error.\n         // See the Onboarding SDK API doc for list of errors.\n\n      }\n   }\n};\n\nmainFilter = new IntentFilter();\nmainFilter.addAction(OnboardingManager.STATE_CHANGE_ACTION);\nmainFilter.addAction(OnboardingManager.ERROR);\n\nregisterReceiver(mainReceiver, mainFilter);  Prepare the Offboarding configuration  // Prepare the AJ configuration of the AJ device to be offboarded\nOffboardingConfiguration config =\nnew OffboardingConfiguration(busName,port);  Call  runOffboarding()  try {\n   OnboardingManager.getInstance().runOffboarding(config);\n   } catch (OnboardingIllegalArgumentException e) {\n\n   } catch (OnboardingIllegalStateException e) {\n\n   } catch (WifiDisabledException e) {\n   }  Shutdown  Once you are done usingthe Onboarding SDK, free the variables\nused in the application.  try {\n   OnboardingManager.getInstance().shutDown();\n   } catch (OnboardingIllegalStateException e) {\n      try { OnboardingManager.getInstance().abortOnboarding();\n      OnboardingManager.getInstance().shutDown();\n   } catch (OnboardingIllegalStateException e1) {\n   }\n}",
            "title": "Implementing the Onboarder Application"
        },
        {
            "location": "/develop/api-guide/onboarding/java/#alljoyn-device-state-machine",
            "text": "The following figure illustrates the AllJoyn device state during the onboarding process.   Figure:  Onboarding state diagram  Onboarding process connection points     Field name  Required      SoftAP availability  SoftAP is available when the device is in any of the following states: Personal AP Not Configured Personal AP Configured/Not Validated Personal AP Configured/Error Personal AP Configured/Retry    Automatic connection to validated personal  At startup time, the device will automatically connect to the personal AP if is configured and validated.    AP Failed connection attempts with personal AP  If the device is in personal AP Configured/Validated state but the device fails to connect after a configurable number of delayed attempts, it will move to state Personal AP Configured/Retry. In this state, the SoftAP is enabled to allow the device to be reconfigured. After a timer expires, the device goes back to the Personal AP Configured/Validated and it will try to connect to the Personal AP again.",
            "title": "AllJoyn Device State Machine"
        },
        {
            "location": "/develop/api-guide/onboarding/java/#best-practices",
            "text": "Onboarder application  Filter the APs to show just what can be onboarded  When developing an Onboarder application for Android, use\nthe Onboarding Manager APIs to perform a Wi-Fi scan and then\nautomatically filter the results into Onboardees and potential APs.\nThe UI should only present the Onboardees when allowing\nthe user to select what to onboard.  On other platforms, when building an Onboarder application,\nit is recommended to use the native platform APIs to list\nout the nearby Wi-Fi APs. Doing this in a crowded Wi-Fi environment\nwith many APs presents a challenge for the end user to scroll\nthrough a long list and identify the device to be onboarded.  It is recommended to have the device use \"AJ_\" as a prefix for\nthe SSID. As such, the Onboarder application can assume, based\non the SSID, that a device can support the Onboarding service\nframework. The UI for the Onboarder application should present\nthe devices that started with \"AJ_\" at the top of the list of\nnearby devices that can be onboarded.  Use the Wi-Fi scan list from the device running the Onboarder application  When developing an Onboarder application for Android, use the\nOnboarding Manager APIs to perform a Wi-Fi scan and then automatically\nfilter the results into Onboardees and potential APs. The UI\nshould only present the Onboardees when allowing the user\nto select what to onboard.  On other platforms, upon successfully joining and validating\nthat a device supports the Onboarding service framework, a\nplatform request should be made to get a list of the nearby APs.\nThe application should filter out any SSIDs that start with\n\"AJ_\", as these should be Onboardee devices a user's personal AP.\nThe UI will present the option to select an AP to preconfigure\nthe SSID and if security on the AP is enabled show an input\nfor a password/passphrase.  Use the Wi-Fi scan list from the Onboardee device  Once the Wi-Fi list is generated per  Use the Wi-Fi scan list\nfrom the device running the Onboarder application , use the \nOnboarding service framework API to request the list of APs\nthat the Onboardee device can detect.  This will ensure\nthat the consumer selected/entered AP is detected by both\ndevices, and that signal strength is sufficient to facilitate a connection.  If the application provides a completely different list than\nwhat the Onboardee device detects, it is recommended to\nalert the user upon entering/selecting an AP that the device\nbeing onboarded could potentially be out of range of entered/selected AP.\nIf the Onboardee application receives an error, show a pop-up\nwith a suggestion to move the device or AP closer. It should\nthen continue to send the credentials to the device and wait\nfor the appropriate response/error messages.",
            "title": "Best Practices"
        },
        {
            "location": "/develop/api-guide/onboarding/objc/",
            "text": "Onboarding API Guide - Objective-C\n\n\nReference code\n\n\nSource code\n\n\nThe Onboarder application uses the following Onboarding\nservice framework libraries:\n\n\n\n\nalljoyn_onboarding_objc.a\n\n\nalljoyn_onboarding_cpp.a\n\n\nalljoyn_about_cpp.a\n\n\nalljoyn_about_objc.a\n\n\n\n\nReference Objective-C application code\n\n\n\n\n\n\n\n\nApplication\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutConfOnboardingClient\n\n\nUI-based application that can be used to onboard an AllJoyn\n device to a personal AP. This application includes also the About capability.\n\n\n\n\n\n\n\n\nObtain the Onboarding service framework\n\n\nSee the \nBuilding iOS/OS X\n section for\ninstructions on compiling the Onboarding service framework.\n\n\nBuild the Onboarder application\n\n\nThe following steps provide the high-level process to build an\nOnboarding application.\n\n\n\n\nCreate the base for the AllJoyn application. See the\n\nAbout API Guide\n for more information.\n\n\nSet your iOS device network to connect to an AJ_ or _AJ network.\n\n\nInitialize the AboutService in client mode and provide it\nwith the AnnouncementHandler object.\n\n\n\n\nSee the \nAbout API Guide\n for more information.\n\n\nSetting up the AllJoyn framework\n\n\nThe steps required for this service framework are universal\nto all applications that use the AllJoyn framework and for\nany application using one or more AllJoyn service frameworks.\nPrior to use of the Onboarding service framework, the About\nfeature must be implemented and the AllJoyn framework set up.\n\n\nComplete the procedures in the following sections to guide\nyou in this process:\n\n\n\n\nBuilding iOS/OS X section\n\n\nAbout API Guide\n\n\n\n\nImplementing the Onboarder Application\n\n\nInitialize the AllJoyn framework\n\n\nSee the \nBuilding iOS/OS X\n section for\ninstructions to set up the AllJoyn framework.\n\n\nInitialize the AboutService in client mode\n\n\nThe About feature is used to receive Announcement signals.\nThe AllJoyn device can start announcing itself once the iOS\ndevice is connected to a Soft AP of the AllJoyn device. The\nAnnouncement signal provides the information required for\nstarting the onboarding process.\n\n\nFor additional details, see the \nAbout API Guide\n.\n\n\nInitialize the About feature\n\n\nCreate, start, connect, and register a Bus attachment\n\n\nclientBusAttachment = [[AJNBusAttachment alloc] initWithApplicationName:APPNAME\nallowRemoteMessages:ALLOWREMOTEMESSAGES];\n[clientBusAttachment start];\n//Set a password for the daemon so Thin Clients can connect to it,\n   before you connect the bus attachment.\n[AJNPasswordManager setCredentialsForAuthMechanism:@\nALLJOYN_PIN_KEYX\n\n   usingPassword:@\n000000\n];\n[clientBusAttachment connectWithArguments:@\n];\n[clientBusAttachment registerBusListener:self];\n\n\n\n\nRegister to receive announcements and sessionless signals\n\n\nannouncementReceiver = [[AJNAnnouncementReceiver alloc]\ninitWithAnnouncementListener:self andBus:self.clientBusAttachment];\n[announcementReceiver registerAnnouncementReceiver];\n[clientBusAttachment addMatchRule:@\nsessionless='t',type='error'\n];\n// Advertise the name with a quite prefix for TC to find it\n[clientBusAttachment advertiseName:@\nquiet@org.alljoyn.BusNode.CPSService.542e8562- e29b-89c2-b456-334455667788\n]\n\n\n\n\nListen for announcements from Onboardee devices\n\n\nThe onboardee will announce its presence on its own SoftAP.\nTo see it, change the physical Wi-Fi settings on the device\nto connect to the SoftAP by going to \nSettings \n Wi-Fi\n.\n\n\nOnce the onboarder has joined the Onboardee SoftAP, an\nannouncement from the onboardee is received by the announcement\nlisteners. Implement the AJNAnnouncementListener protocol in\nyour class to respond to new announcements.\n\n\nFor each announcement that is received, check if it implements\nthe Onboarding interface. If it does, save it as an onboardee\ndevice for later use.\n\n\n- (void)announceWithVersion:(uint16_t)version port:(uint16_t)port\n                    busName:(NSString *)busName\n         objectDescriptions:(NSMutableDictionary *)objectDescs\n                  aboutData:(NSMutableDictionary **)aboutData\n{\n// Save the announcement in a AJNAnnouncement\nAJNAnnouncement *announcement = [[AJNAnnouncement alloc]\ninitWithVersion:version port:port busName:busName\nobjectDescriptions:objectDescs aboutData:aboutData];\n\nNSMutableDictionary *announcementObjDecs = [announcement objectDescriptions];\n\n// See if this announcment is from a controller device for\n     (NSString *key in announcementObjDecs.allKeys) {\n   if ([key hasPrefix: @\n/Onboarding/\n]) {\n      for (NSString *intf in[announcementObjDecs valueForKey:key]) {\n         if ([intf isEqualToString: @\norg.alljoyn.Onboarding\n]) {\n            hasOnboarding = true;\n         }\n      }\n   }\n}\n\nif(hasOnboarding == true)\nNSLog(@\nThis announcement has the onboarding service\n);\n\n\n\n\nUse the Onboarding service framework\n\n\n\n\nInitialize the OnboardingClient based from values found\nin the About Announcement.\n\n\n\n\nonboardingClient =  [[AJOBSOnboardingClient alloc]\ninitWithBus:clientBusName];\n\n\n\n\n\n\nProvide a UI for the user to input/select the personal AP,\nthen send via OnboardingClient.\n\n\n\n\nAJOBInfo obInfo;\nobInfo.SSID =ssidTextField.text;\nobInfo.passcode =ssidPassTextField.text;\nobInfo.authType = ANY;\n[onboardingClient configureWiFi:onboardeeBus obInfo:obInfo\nresultStatus:resultStatus sessionId:sessionId];\n\n\n\n\n\n\nTell the Onboardee to join the network provided.\n\n\n\n\n[onboardingClient connectTo:onboardeeBus sessionId:sessionId] ;\n\n\n\n\nNOTE:\n To see the device on the target AP, the user must connect\nto that personal AP by going to \nSettings \n Wi-Fi\n and\nchoosing the required AP. The OS may switch to that AP but\nit may switch to another AP that, for example, has been selected\nas the default AP on the device.\n\n\nGet the AllJoyn device last error\n\n\nIf an error occurred during the connection to the personal AP,\nthe AllJoyn device returns to SoftAP mode. At that point,\nthe iOS device moves back to the personal AP, expecting to\nfind the AllJoyn device on the personal network.\n\n\nWhen the AllJoyn device does not appear in the personal AP,\nthe onboarder assumes an error occurred during the connection\nattempt, for example, the incorrect Wi-Fi password was provided.\nTo know more about the error that occurred while not being\nconnected to the same network, call GetLastError after connecting\nback to the soft AP by going into iOS settings and choosing\nthe soft AP in the list.\n\n\nonboardingClient = [[AJOBSOnboardingClient alloc] initWithBus:clientBusName];\nonboardingClient lastError:busName lastError: lastError sessionId: sessionId];\n\n\n\n\nOffboard the AllJoyn device\n\n\nOffboarding the AllJoyn device disconnects it from the personal\nAP and switches it back to the SoftAP mode.\n\n\nThis is used when there is a need to onboard the device to a\ndifferent AP, or if the password was changed on the personal AP,\nand the AllJoyn device needs to reconnect to it.\n\n\nonboardingClient =  [[AJOBSOnboardingClient alloc]\n   initWithBus:clientBusName];\nQStatus status = [self.onboardingClient offboardFrom:self.onboardeeBus sessionId:self.sessionId];\n\n\n\n\nBest Practices\n\n\nOnboarder application\n\n\nConfiguring Wi-Fi networks for iOS implementation\n\n\nDuring the onboarding process, the user must use the Settings \n Wi-Fi\nmenu option on the iOS device to manually connect to the Soft AP\nthat is advertised by the onboardee.\n\n\nThis step is necessary because it is not possible to programmatically\nchange the Wi-Fi network that the iOS device is connected to.\n\n\nAdditionally, once the onboardee has been onboarded, and is\ntherefore no longer in Soft AP mode, the iOS device may automatically\nconnect to a different access point than the one to which the\nonboardee is connected. As a result, the user may need to use\nthe Settings \n Wi-Fi menu option a second time on the iOS\ndevice to connect to the access point that the onboardee\nwas onboarded to.\n\n\nAs a result, it is recommended that the application using the\nOnboarding service framework provide hints or guides to the user\nto perform these steps to properly access the Wi-Fi networks.",
            "title": "Objc"
        },
        {
            "location": "/develop/api-guide/onboarding/objc/#onboarding-api-guide-objective-c",
            "text": "",
            "title": "Onboarding API Guide - Objective-C"
        },
        {
            "location": "/develop/api-guide/onboarding/objc/#reference-code",
            "text": "Source code  The Onboarder application uses the following Onboarding\nservice framework libraries:   alljoyn_onboarding_objc.a  alljoyn_onboarding_cpp.a  alljoyn_about_cpp.a  alljoyn_about_objc.a   Reference Objective-C application code     Application  Description      AboutConfOnboardingClient  UI-based application that can be used to onboard an AllJoyn  device to a personal AP. This application includes also the About capability.",
            "title": "Reference code"
        },
        {
            "location": "/develop/api-guide/onboarding/objc/#obtain-the-onboarding-service-framework",
            "text": "See the  Building iOS/OS X  section for\ninstructions on compiling the Onboarding service framework.",
            "title": "Obtain the Onboarding service framework"
        },
        {
            "location": "/develop/api-guide/onboarding/objc/#build-the-onboarder-application",
            "text": "The following steps provide the high-level process to build an\nOnboarding application.   Create the base for the AllJoyn application. See the About API Guide  for more information.  Set your iOS device network to connect to an AJ_ or _AJ network.  Initialize the AboutService in client mode and provide it\nwith the AnnouncementHandler object.   See the  About API Guide  for more information.",
            "title": "Build the Onboarder application"
        },
        {
            "location": "/develop/api-guide/onboarding/objc/#setting-up-the-alljoyn-framework",
            "text": "The steps required for this service framework are universal\nto all applications that use the AllJoyn framework and for\nany application using one or more AllJoyn service frameworks.\nPrior to use of the Onboarding service framework, the About\nfeature must be implemented and the AllJoyn framework set up.  Complete the procedures in the following sections to guide\nyou in this process:   Building iOS/OS X section  About API Guide",
            "title": "Setting up the AllJoyn framework"
        },
        {
            "location": "/develop/api-guide/onboarding/objc/#implementing-the-onboarder-application",
            "text": "Initialize the AllJoyn framework  See the  Building iOS/OS X  section for\ninstructions to set up the AllJoyn framework.  Initialize the AboutService in client mode  The About feature is used to receive Announcement signals.\nThe AllJoyn device can start announcing itself once the iOS\ndevice is connected to a Soft AP of the AllJoyn device. The\nAnnouncement signal provides the information required for\nstarting the onboarding process.  For additional details, see the  About API Guide .  Initialize the About feature  Create, start, connect, and register a Bus attachment  clientBusAttachment = [[AJNBusAttachment alloc] initWithApplicationName:APPNAME\nallowRemoteMessages:ALLOWREMOTEMESSAGES];\n[clientBusAttachment start];\n//Set a password for the daemon so Thin Clients can connect to it,\n   before you connect the bus attachment.\n[AJNPasswordManager setCredentialsForAuthMechanism:@ ALLJOYN_PIN_KEYX \n   usingPassword:@ 000000 ];\n[clientBusAttachment connectWithArguments:@ ];\n[clientBusAttachment registerBusListener:self];  Register to receive announcements and sessionless signals  announcementReceiver = [[AJNAnnouncementReceiver alloc]\ninitWithAnnouncementListener:self andBus:self.clientBusAttachment];\n[announcementReceiver registerAnnouncementReceiver];\n[clientBusAttachment addMatchRule:@ sessionless='t',type='error' ];\n// Advertise the name with a quite prefix for TC to find it\n[clientBusAttachment advertiseName:@ quiet@org.alljoyn.BusNode.CPSService.542e8562- e29b-89c2-b456-334455667788 ]  Listen for announcements from Onboardee devices  The onboardee will announce its presence on its own SoftAP.\nTo see it, change the physical Wi-Fi settings on the device\nto connect to the SoftAP by going to  Settings   Wi-Fi .  Once the onboarder has joined the Onboardee SoftAP, an\nannouncement from the onboardee is received by the announcement\nlisteners. Implement the AJNAnnouncementListener protocol in\nyour class to respond to new announcements.  For each announcement that is received, check if it implements\nthe Onboarding interface. If it does, save it as an onboardee\ndevice for later use.  - (void)announceWithVersion:(uint16_t)version port:(uint16_t)port\n                    busName:(NSString *)busName\n         objectDescriptions:(NSMutableDictionary *)objectDescs\n                  aboutData:(NSMutableDictionary **)aboutData\n{\n// Save the announcement in a AJNAnnouncement\nAJNAnnouncement *announcement = [[AJNAnnouncement alloc]\ninitWithVersion:version port:port busName:busName\nobjectDescriptions:objectDescs aboutData:aboutData];\n\nNSMutableDictionary *announcementObjDecs = [announcement objectDescriptions];\n\n// See if this announcment is from a controller device for\n     (NSString *key in announcementObjDecs.allKeys) {\n   if ([key hasPrefix: @ /Onboarding/ ]) {\n      for (NSString *intf in[announcementObjDecs valueForKey:key]) {\n         if ([intf isEqualToString: @ org.alljoyn.Onboarding ]) {\n            hasOnboarding = true;\n         }\n      }\n   }\n}\n\nif(hasOnboarding == true)\nNSLog(@ This announcement has the onboarding service );  Use the Onboarding service framework   Initialize the OnboardingClient based from values found\nin the About Announcement.   onboardingClient =  [[AJOBSOnboardingClient alloc]\ninitWithBus:clientBusName];   Provide a UI for the user to input/select the personal AP,\nthen send via OnboardingClient.   AJOBInfo obInfo;\nobInfo.SSID =ssidTextField.text;\nobInfo.passcode =ssidPassTextField.text;\nobInfo.authType = ANY;\n[onboardingClient configureWiFi:onboardeeBus obInfo:obInfo\nresultStatus:resultStatus sessionId:sessionId];   Tell the Onboardee to join the network provided.   [onboardingClient connectTo:onboardeeBus sessionId:sessionId] ;  NOTE:  To see the device on the target AP, the user must connect\nto that personal AP by going to  Settings   Wi-Fi  and\nchoosing the required AP. The OS may switch to that AP but\nit may switch to another AP that, for example, has been selected\nas the default AP on the device.  Get the AllJoyn device last error  If an error occurred during the connection to the personal AP,\nthe AllJoyn device returns to SoftAP mode. At that point,\nthe iOS device moves back to the personal AP, expecting to\nfind the AllJoyn device on the personal network.  When the AllJoyn device does not appear in the personal AP,\nthe onboarder assumes an error occurred during the connection\nattempt, for example, the incorrect Wi-Fi password was provided.\nTo know more about the error that occurred while not being\nconnected to the same network, call GetLastError after connecting\nback to the soft AP by going into iOS settings and choosing\nthe soft AP in the list.  onboardingClient = [[AJOBSOnboardingClient alloc] initWithBus:clientBusName];\nonboardingClient lastError:busName lastError: lastError sessionId: sessionId];  Offboard the AllJoyn device  Offboarding the AllJoyn device disconnects it from the personal\nAP and switches it back to the SoftAP mode.  This is used when there is a need to onboard the device to a\ndifferent AP, or if the password was changed on the personal AP,\nand the AllJoyn device needs to reconnect to it.  onboardingClient =  [[AJOBSOnboardingClient alloc]\n   initWithBus:clientBusName];\nQStatus status = [self.onboardingClient offboardFrom:self.onboardeeBus sessionId:self.sessionId];",
            "title": "Implementing the Onboarder Application"
        },
        {
            "location": "/develop/api-guide/onboarding/objc/#best-practices",
            "text": "Onboarder application  Configuring Wi-Fi networks for iOS implementation  During the onboarding process, the user must use the Settings   Wi-Fi\nmenu option on the iOS device to manually connect to the Soft AP\nthat is advertised by the onboardee.  This step is necessary because it is not possible to programmatically\nchange the Wi-Fi network that the iOS device is connected to.  Additionally, once the onboardee has been onboarded, and is\ntherefore no longer in Soft AP mode, the iOS device may automatically\nconnect to a different access point than the one to which the\nonboardee is connected. As a result, the user may need to use\nthe Settings   Wi-Fi menu option a second time on the iOS\ndevice to connect to the access point that the onboardee\nwas onboarded to.  As a result, it is recommended that the application using the\nOnboarding service framework provide hints or guides to the user\nto perform these steps to properly access the Wi-Fi networks.",
            "title": "Best Practices"
        },
        {
            "location": "/develop/api-reference/",
            "text": "API Reference\n\n\n\n\n\n\n\n\nAPI\n\n\nC++\n\n\nJava\n\n\nObjective-C\n\n\nC\n\n\nC (Thin)\n\n\n\n\n\n\n\n\n\n\nCore\n\n\nC++\n\n\nJava\n\n\n\n\nC\n\n\nC (Thin)\n\n\n\n\n\n\nOnboarding\n\n\nC++\n\n\nJava\n\n\n\n\n\n\nC (Thin)\n\n\n\n\n\n\nConfiguration\n\n\nC++\n\n\nJava\n\n\n\n\n\n\nC (Thin)\n\n\n\n\n\n\nNotification\n\n\nC++\n\n\nJava\n\n\n\n\n\n\nC (Thin)\n\n\n\n\n\n\nControl Panel\n\n\nC++\n\n\nJava\n\n\n\n\n\n\nC (Thin)\n\n\n\n\n\n\nServices Common\n\n\nC++\n\n\n\n\n\n\n\n\nC (Thin)\n\n\n\n\n\n\nSample Apps\n\n\nC++\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLighting\n\n\nController Client\nController Service\n\n\nSDK\n\n\nSDK\n\n\n\n\nLamp Service",
            "title": "Home"
        },
        {
            "location": "/develop/api-reference/#api-reference",
            "text": "API  C++  Java  Objective-C  C  C (Thin)      Core  C++  Java   C  C (Thin)    Onboarding  C++  Java    C (Thin)    Configuration  C++  Java    C (Thin)    Notification  C++  Java    C (Thin)    Control Panel  C++  Java    C (Thin)    Services Common  C++     C (Thin)    Sample Apps  C++        Lighting  Controller Client Controller Service  SDK  SDK   Lamp Service",
            "title": "API Reference"
        },
        {
            "location": "/develop/ask/",
            "text": "Ask Forum\n\n\nAsk is a community supported Q\nA site for AllSeen related projects. Go there to ask your question and/or to search for answers.\n\n\nAsk Forum",
            "title": "Home"
        },
        {
            "location": "/develop/ask/#ask-forum",
            "text": "Ask is a community supported Q A site for AllSeen related projects. Go there to ask your question and/or to search for answers.  Ask Forum",
            "title": "Ask Forum"
        },
        {
            "location": "/develop/ask/popular/",
            "text": "Popular Ask Questions",
            "title": "Popular"
        },
        {
            "location": "/develop/ask/popular/#popular-ask-questions",
            "text": "",
            "title": "Popular Ask Questions"
        },
        {
            "location": "/develop/building/",
            "text": "Building\n\n\nThe AllJoyn\n framework is a software library that will be linked into your project.\nThe AllJoyn\n \u67b6\u6784\u662f\u4e00\u4e2a\u5c06\u88ab\u8fde\u63a5\u81f3\u60a8\u5de5\u7a0b\u7684\u8f6f\u4ef6\u8d44\u6e90\u5e93\u3002\n\n\nEach platform and language binding have their own ways to accomplish this.\n\u4e0d\u540c\u7684\u5e73\u53f0\u548c\u8bed\u8a00\u7684\u7ec4\u5408\u6709\u4e0d\u540c\u7684\u5b8c\u6210\u65b9\u5f0f\u3002\n\n\nDepending on the target platform, check out the recommended steps to get you up and running:\n\u6839\u636e\u76ee\u6807\u5e73\u53f0\uff0c\u67e5\u8be2\u5efa\u8bae\u7684\u6b65\u9aa4\uff0c\u5efa\u7acb\u5e76\u8fd0\u884c\uff1a\n\n \nAndroid\n\n\n \nLinux\n\n\n \nThin - Linux\n\n\n \niOS/OSX\n\n\n \nWindows\n\n\n \nAllJoyn.js\n\n\n\u6ce8\u610f:\n If changes are required to the AllJoyn Core, see the relevant section on how to build.\n\u5982\u679c\u9700\u8981\u6539\u53d8 AllJoyn Core\uff0c\u8bf7\u53c2\u9605 how to build \u7684\u76f8\u5173\u7ae0\u8282\u3002",
            "title": "Home"
        },
        {
            "location": "/develop/building/#building",
            "text": "The AllJoyn  framework is a software library that will be linked into your project.\nThe AllJoyn  \u67b6\u6784\u662f\u4e00\u4e2a\u5c06\u88ab\u8fde\u63a5\u81f3\u60a8\u5de5\u7a0b\u7684\u8f6f\u4ef6\u8d44\u6e90\u5e93\u3002  Each platform and language binding have their own ways to accomplish this.\n\u4e0d\u540c\u7684\u5e73\u53f0\u548c\u8bed\u8a00\u7684\u7ec4\u5408\u6709\u4e0d\u540c\u7684\u5b8c\u6210\u65b9\u5f0f\u3002  Depending on the target platform, check out the recommended steps to get you up and running:\n\u6839\u636e\u76ee\u6807\u5e73\u53f0\uff0c\u67e5\u8be2\u5efa\u8bae\u7684\u6b65\u9aa4\uff0c\u5efa\u7acb\u5e76\u8fd0\u884c\uff1a   Android    Linux    Thin - Linux    iOS/OSX    Windows    AllJoyn.js  \u6ce8\u610f:  If changes are required to the AllJoyn Core, see the relevant section on how to build.\n\u5982\u679c\u9700\u8981\u6539\u53d8 AllJoyn Core\uff0c\u8bf7\u53c2\u9605 how to build \u7684\u76f8\u5173\u7ae0\u8282\u3002",
            "title": "Building"
        },
        {
            "location": "/develop/building/thin-linux/",
            "text": "Building Thin - Linux\n\n\nSetup\n\n\nNOTE:\n The installation commands below refer specifically to\nDebian/Ubuntu Linux. Equivalent commands are available for other distributions of Linux.\n\n\n\n\nBuild tools and libs\n\n\n\n\nsudo apt-get install build-essential libgtk2.0-dev libssl-dev xsltproc ia32-libs libxml2-dev\n\n\n\n\n\n\nInstall Python v2.6/2.7 (Python v3.0 is not compatible and will cause errors)\n\n\n\n\nsudo apt-get install python\n\n\n\n\n\n\nInstalll SCons v2.0.\n\n\n\n\nsudo apt-get install scons\n\n\n\n\n\n\nOpenSSL\n\n\n\n\nsudo apt-get install libssl-dev\n\n\n\n\n\n\nDownload the \nAllJoyn\n source zip\n and extract.\n\n\n\n\nBuild the samples\n\n\nBuild the core samples:\n\n\ncd $AJ_ROOT/core/ajtcl\nscons WS=off\n\n\n\n\nBinaries for samples are located at \n$AJ_ROOT/core/ajtcl/samples/\n\n\nBuild the services samples:\n\n\ncd $AJ_ROOT/services/sample_apps\nscons WS=off AJ_TCL_ROOT=../../core/ajtcl\n\n\n\n\nBinaries for service samples are located at \n$AJ_ROOT/services/sample_apps/build\n\n\nBuild the complete service sample (AC Server):\n\n\ncd $AJ_ROOT/services/sample_apps/ACServerSample\nscons WS=off AJ_TCL_ROOT=../../../core/ajtcl\n\n\n\n\nThe binary for the AC Server sample is located at \n$AJ_ROOT/services/sample_apps/ACServerSample/build\n\n\nAdd the AllJoyn framework to an application\n\n\nSee the \nBuild an Application using the Thin Library\n section for instructions.",
            "title": "Thin linux"
        },
        {
            "location": "/develop/building/thin-linux/#building-thin-linux",
            "text": "",
            "title": "Building Thin - Linux"
        },
        {
            "location": "/develop/building/thin-linux/#setup",
            "text": "NOTE:  The installation commands below refer specifically to\nDebian/Ubuntu Linux. Equivalent commands are available for other distributions of Linux.   Build tools and libs   sudo apt-get install build-essential libgtk2.0-dev libssl-dev xsltproc ia32-libs libxml2-dev   Install Python v2.6/2.7 (Python v3.0 is not compatible and will cause errors)   sudo apt-get install python   Installl SCons v2.0.   sudo apt-get install scons   OpenSSL   sudo apt-get install libssl-dev   Download the  AllJoyn  source zip  and extract.",
            "title": "Setup"
        },
        {
            "location": "/develop/building/thin-linux/#build-the-samples",
            "text": "Build the core samples:  cd $AJ_ROOT/core/ajtcl\nscons WS=off  Binaries for samples are located at  $AJ_ROOT/core/ajtcl/samples/  Build the services samples:  cd $AJ_ROOT/services/sample_apps\nscons WS=off AJ_TCL_ROOT=../../core/ajtcl  Binaries for service samples are located at  $AJ_ROOT/services/sample_apps/build  Build the complete service sample (AC Server):  cd $AJ_ROOT/services/sample_apps/ACServerSample\nscons WS=off AJ_TCL_ROOT=../../../core/ajtcl  The binary for the AC Server sample is located at  $AJ_ROOT/services/sample_apps/ACServerSample/build",
            "title": "Build the samples"
        },
        {
            "location": "/develop/building/thin-linux/#add-the-alljoyn-framework-to-an-application",
            "text": "See the  Build an Application using the Thin Library  section for instructions.",
            "title": "Add the AllJoyn framework to an application"
        },
        {
            "location": "/develop/building/thin-windows/",
            "text": "Building Thin - Windows\n\n\nSetup\n\n\n\n\nInstall Python v2.6/2.7 for Windows (Python 3.0 will NOT work).\n\n\nInstall SCons 2.3 for Windows.\n\n\nDownload\n the Windows Thin Core SDK.\n\n\nExtract the downloaded package.\n\n\n\n\nBuild the samples\n\n\nOpen a Windows command prompt window and run the following:\n\n\ncd $ALLJOYN_ROOT\\core\\ajtcl\nscons OS=win7 CPU=x86_64 WS=off MSVC_VERSION=11.0\n\n\n\n\nBinaries for the samples are located at \n$AJ_ROOT\\core\\alljoyn\\samples\\basic",
            "title": "Thin windows"
        },
        {
            "location": "/develop/building/thin-windows/#building-thin-windows",
            "text": "",
            "title": "Building Thin - Windows"
        },
        {
            "location": "/develop/building/thin-windows/#setup",
            "text": "Install Python v2.6/2.7 for Windows (Python 3.0 will NOT work).  Install SCons 2.3 for Windows.  Download  the Windows Thin Core SDK.  Extract the downloaded package.",
            "title": "Setup"
        },
        {
            "location": "/develop/building/thin-windows/#build-the-samples",
            "text": "Open a Windows command prompt window and run the following:  cd $ALLJOYN_ROOT\\core\\ajtcl\nscons OS=win7 CPU=x86_64 WS=off MSVC_VERSION=11.0  Binaries for the samples are located at  $AJ_ROOT\\core\\alljoyn\\samples\\basic",
            "title": "Build the samples"
        },
        {
            "location": "/develop/building/alljoyn-js/",
            "text": "Getting started with AllJoyn.js\n\n\nThe primary goal of AllJoyn.js is to make it easy to develop AllJoyn applications\nin JavaScript, one of the most widely used programming languages in the world.\n\n\nAllJoyn.js is a deep integration between the AllJoyn Thin Core Library (AJTCL) and base\nservices with Duktape \nwww.duktape.org\n, an ECMAScript 5.0 compliant\ncompiler and runtime specifically designed for running in small-footprint embedded\nmicrocontrollers. Although it is designed to work within the limited resources of embedded\nmicrocontrollers, Alljoyn.js is not limited to this use case and can also be used\nfor general AllJoyn programming on Windows, Linux, and other high-level operating\nsystems.\n\n\nThe AllJoyn.js runtime environment includes a \u201cScriptConsole\u201d service that provides\nsupport for installing new scripts and interacting with a running JavaScript\napplication. The ScriptConsole service is an AllJoyn service, and like any other\nAllJoyn service it can be accessed over the network from another device running a\ncorresponding client application. The current code base includes a command line\nScriptConsole client on Linux, Windows and Mac OSX. This command line tool can\nbe used to install new scripts into a running AllJoyn.js instance and also allows\nJavaScript code to be entered interactively. The ScriptConsole supports remote\nlogging of string data passed to the print() and alert() JavaScript functions.\n\n\nBuilding from source (Windows and Linux)\n\n\nBuilding AllJoyn.js from source has external dependencies. The AllJoyn functionality\nis based on the AllJoyn Thin Client. Underneath the Thin Client is the JavaScript\nengine itself which compiles and runs the scripts. This JavaScript engine is called\nDuktape.\n\n\nDuktape\n\n\nAllJoyn.js depends on the Duktape ECMAScript compiler.\nThat source code can be found \nhere\n.\nAllJoyn.js v15.04 depends on Duktape v1.2.1. After downloading, extract the archive\nand note the location. AllJoyn Thin Client compiles and links against the Duktape\nsource so an environment variable needs to be set to Duktape's location.\n\n\nWindows\n\n\nset DUKTAPE_DIST=\nC:\\Path\\to\\duktape\\root\n\n\n\n\n\nLinux\n\n\nexport DUKTAPE_DIST=/Path/to/duktape/root\n\n\n\n\nAllJoyn Thin Client\n\n\nAllJoyn.js itself is built on top of AllJoyn Thin Client. The console application\nuses the AllJoyn Standard Client. You will need to have both building in\norder to both run AllJoyn.js and use the console.\n\n\nInstructions for getting Thin Client sources can be found\n\nhere\n\n\nNote: Use version 15.04b or later of the AllJoyn Thin Client\n\n\ngit checkout RB15.04\nscons\n\n\n\n\nBase Services\n\n\nAllJoyn.js also depends on several of the base services. The git\nrepository for the base services can be downloaded using git clone:\n\n\ngit clone https://git.allseenalliance.org/gerrit/services/base.git\n\n\n\n\nThe RB15.04 release branch must also be checked out:\n\n\ngit checkout RB15.04\n\n\n\n\nAllJoyn.js\n\n\nAfter building the Thin Client library check that your folder structure is set up\ncorrectly or AllJoyn.js won't know where to find the libraries you built in the\nprevious steps. Your folder structure should be as follows:\n\n\nallseen\n   | ---- core\n   |        | ---- alljoyn-js\n   |        | ---- ajtcl    (Thin Client)\n   |        | ---- alljoyn  (Standard Client)\n   |\n   | ---- services\n            | ---- base_tcl\n            | ---- base\n\n\n\n\nAs shown above, the AllJoyn.js git repository must be checked out at the same level\nas AllJoyn Thin Client. AllJoyn.js can be pulled from git in the same manner as the\nother AllJoyn repositories:\n\n\ngit clone https://git.allseenalliance.org/gerrit/core/alljoyn-js.git\ngit checkout RB15.04\nscons\n\n\n\n\nConsole Application\n\n\nTo build the console application another environment variable needs to be set which\npoints to the location of the alljoyn library (alljoyn.lib or liballjoyn.so). This location is in\nthe build directory in the alljoyn (Standard Client) repository. The full path is\n\u201c/build/{os}/{architecture}/{debug|release}/dist\u201d. Set the environment variable\nthe same way as you did for duktape. For example, for an x86 debug build the path\nwould look like:\n\n\nWindows\n\n\nset ALLJOYN_DIST=\npath-to-alljoyn-folder\n/build/win7/x86/debug/dist\n\n\n\n\n\nLinux\n\n\nexport ALLJOYN_DIST=\npath-to-alljoyn-folder\n/build/linux/x86/debug/dist\n\n\n\n\n\nWith that set the console application should be able to build. Navigate to the console\nfolder and run scons\n\n\ncd console\nscons\n\n\n\n\nPython Debugger Console\n\n\nThe AllJoyn.js Console application also supports a debugging feature. The command\nline debugger is built into the standard console discussed above. Additionally\nthere is a Python GUI that delivers a much better debugging experience. In order\nto use the Python GUI you must build a Python extension for the AllJoyn.js console,\nwhich has some additional dependencies. The Python GUI debugger works with Python 2.7\nor 3.x on Linux, and Python 3.x on Windows. Building Python 2.7 extensions on \nWindows requires an older version of Visual Studio that is not compatible with current \nAllJoyn code. The Python GUI extension is currently easiest to build and use\non Linux.\n\n\nLinux\n\n\nOn Ubuntu Linux use the following commands to install the required tools:\n\n\nsudo apt-get install build-essential python-dev\n\n\n\n\nOnce these packages are installed, navigate to the console directory in your AllJoyn.js repository.\nFrom here you need to build the library that allows Python to communicate with AllJoyn.js.\n\n\ncd \najs_git_repo\n\ncd console\npython setup.py build\npython setup.py install  # \n--- May need to run as root user!\n\n\n\n\nThese commands will build the library and install it in a location that python\ncan find. If the installation was successful you can start up the GUI and begin\ndebugging. The examples below illustrate how to connect to an arbitrary\nAllJoyn.js device, or to a specific one (using the --name flag):\n\n\npython pydebugger.py\n\npython pydebugger.py --name \ndevice\n\n\n\n\n\nOnce an AllJoyn.js client is found the GUI will launch and you can start debugging\nyour script.\n\n\nWindows\n\n\nBuilding the Python GUI on Windows is not quite as easy as Linux and may require\na workaround. The issue is that the Python 3 interpreters prior to 3.5 were built\nusing Visual Studio 2010, while many users have upgraded past that release. If you have Visual Studio 2010\ninstalled you should have no problem building Python 3 extensions. If not, you will need to take\nsome extra steps. The initial steps are the same for all Visual Studio versions.\n\n\n\n\n\n\nDownload \nPython 3.4\n (preferably 64 bit)\n\n\n\n\n\n\nDownload \nPython extensions for Windows\n (same architecture as Python 3.4)\n\n\n\n\n\n\nInstall Python 3.4 first, then Python extensions for Windows\n\n\n\n\n\n\nIf you have multiple versions of Python installed, make sure your PATH environment variable has the Python 3.4 \ndirectory listed before any other Python installations.\n\n\nThe next steps will depend on your Visual Studio version. If you have Visual Studio 2010 skip\nto the \u201cBuilding\u201d section. Otherwise continue.\n\n\nAs mentioned before, Python 3.4 was built with Visual Studio 2010. It's possible to work around Python's\ntoolchain version checking to use your version of Visual Studio. Navigate to the Python 3.4 install directory and\nopen this file:\n\n\nPython34 dir\n/Lib/distutils/msvs9compile.py\n\n\n\n\nSearch for the line:\n\n\nVERSION = get_build_version()\n\n\n\n\nReplace it with:\n\n\nVERSION = 12.0\n\n\n\n\nThe actual number you use (12.0 in this case) will depend on the VS version you\nhave installed.\n\n\n\n\nVS 2011 = 10.0\n\n\nVS 2012 = 11.0\n\n\nVS 2013 = 12.0\n\n\n\n\nOnce that change is made you may move on to building the Python GUI debugger below.\n\n\nBuilding\n\n\nThe steps for building are nearly the same as Linux. As mentioned before, make sure your PATH \nenvironment variable has the Python 3.4 directory listed first.\n\n\ncd \najs_git_repo\n\ncd console\npython setup.py build\npython setup.py install\n\n\n\n\nDownload precompiled binaries\n\n\nWindows, Linux and Mac\n\n\nThe Allseen Alliance hosts pre-built binaries for AllJoyn.js and the console application.\n\n\n\n\nAllJoyn.js Windows\n\n\nAllJoyn.js Linux\n\n\nAllJoyn.js Mac\n\n\n\n\nThe console application still requires several Standard Client\nlibraries. Those libraries can be obtained, pre-compiled, by downloading the SDK.\nSimilar to building from source, you will need to point the console to the location\nof these libraries.\n\n\nWindows\n\n\nset ALLJOYN_DIST=\npath-to-SDK\n\n\n\n\n\nLinux\n\n\nexport ALLJOYN_DIST=\npath-to-SDK\n\n\n\n\n\nOnce that is done, you can download the pre-built console application for your platform.\n\n\n\n\nConsole Windows\n\n\nConsole Linux\n\n\nConsole Mac\n\n\n\n\nArduino Yun\n\n\nThese instructions assume you have updated your Yun to the LininoIO image.\n\n\nInstall these packages: duktape, ajtcl, ajtcl-services, alljoyn.js\n\n\nwget http://download.linino.org/linino_distro/lininoIO/latest/packages/duktape_1.1.0-1_ar71xx.ipk \n opkg install duktape_1.1.0-1_ar71xx.ipk\n\nwget http://download.linino.org/linino_distro/lininoIO/latest/packages/ajtcl_1.0.1-1_ar71xx.ipk \n opkg install ajtcl_1.0.1-1_ar71xx.ipk\n\nwget http://download.linino.org/linino_distro/lininoIO/latest/packages/ajtcl-services_1.0.1-1_ar71xx.ipk \n opkg install ajtcl-services_1.0.1-1_ar71xx.ipk\n\nwget http://download.linino.org/linino_distro/lininoIO/latest/packages/ajtcl-alljoynjs_1.0.1-1_ar71xx.ipk \n opkg install ajtcl-alljoynjs_1.0.1-1_ar71xx.ipk",
            "title": "Home"
        },
        {
            "location": "/develop/building/alljoyn-js/#getting-started-with-alljoynjs",
            "text": "The primary goal of AllJoyn.js is to make it easy to develop AllJoyn applications\nin JavaScript, one of the most widely used programming languages in the world.  AllJoyn.js is a deep integration between the AllJoyn Thin Core Library (AJTCL) and base\nservices with Duktape  www.duktape.org , an ECMAScript 5.0 compliant\ncompiler and runtime specifically designed for running in small-footprint embedded\nmicrocontrollers. Although it is designed to work within the limited resources of embedded\nmicrocontrollers, Alljoyn.js is not limited to this use case and can also be used\nfor general AllJoyn programming on Windows, Linux, and other high-level operating\nsystems.  The AllJoyn.js runtime environment includes a \u201cScriptConsole\u201d service that provides\nsupport for installing new scripts and interacting with a running JavaScript\napplication. The ScriptConsole service is an AllJoyn service, and like any other\nAllJoyn service it can be accessed over the network from another device running a\ncorresponding client application. The current code base includes a command line\nScriptConsole client on Linux, Windows and Mac OSX. This command line tool can\nbe used to install new scripts into a running AllJoyn.js instance and also allows\nJavaScript code to be entered interactively. The ScriptConsole supports remote\nlogging of string data passed to the print() and alert() JavaScript functions.",
            "title": "Getting started with AllJoyn.js"
        },
        {
            "location": "/develop/building/alljoyn-js/#building-from-source-windows-and-linux",
            "text": "Building AllJoyn.js from source has external dependencies. The AllJoyn functionality\nis based on the AllJoyn Thin Client. Underneath the Thin Client is the JavaScript\nengine itself which compiles and runs the scripts. This JavaScript engine is called\nDuktape.",
            "title": "Building from source (Windows and Linux)"
        },
        {
            "location": "/develop/building/alljoyn-js/#duktape",
            "text": "AllJoyn.js depends on the Duktape ECMAScript compiler.\nThat source code can be found  here .\nAllJoyn.js v15.04 depends on Duktape v1.2.1. After downloading, extract the archive\nand note the location. AllJoyn Thin Client compiles and links against the Duktape\nsource so an environment variable needs to be set to Duktape's location.  Windows  set DUKTAPE_DIST= C:\\Path\\to\\duktape\\root   Linux  export DUKTAPE_DIST=/Path/to/duktape/root",
            "title": "Duktape"
        },
        {
            "location": "/develop/building/alljoyn-js/#alljoyn-thin-client",
            "text": "AllJoyn.js itself is built on top of AllJoyn Thin Client. The console application\nuses the AllJoyn Standard Client. You will need to have both building in\norder to both run AllJoyn.js and use the console.  Instructions for getting Thin Client sources can be found here  Note: Use version 15.04b or later of the AllJoyn Thin Client  git checkout RB15.04\nscons",
            "title": "AllJoyn Thin Client"
        },
        {
            "location": "/develop/building/alljoyn-js/#base-services",
            "text": "AllJoyn.js also depends on several of the base services. The git\nrepository for the base services can be downloaded using git clone:  git clone https://git.allseenalliance.org/gerrit/services/base.git  The RB15.04 release branch must also be checked out:  git checkout RB15.04",
            "title": "Base Services"
        },
        {
            "location": "/develop/building/alljoyn-js/#alljoynjs",
            "text": "After building the Thin Client library check that your folder structure is set up\ncorrectly or AllJoyn.js won't know where to find the libraries you built in the\nprevious steps. Your folder structure should be as follows:  allseen\n   | ---- core\n   |        | ---- alljoyn-js\n   |        | ---- ajtcl    (Thin Client)\n   |        | ---- alljoyn  (Standard Client)\n   |\n   | ---- services\n            | ---- base_tcl\n            | ---- base  As shown above, the AllJoyn.js git repository must be checked out at the same level\nas AllJoyn Thin Client. AllJoyn.js can be pulled from git in the same manner as the\nother AllJoyn repositories:  git clone https://git.allseenalliance.org/gerrit/core/alljoyn-js.git\ngit checkout RB15.04\nscons",
            "title": "AllJoyn.js"
        },
        {
            "location": "/develop/building/alljoyn-js/#console-application",
            "text": "To build the console application another environment variable needs to be set which\npoints to the location of the alljoyn library (alljoyn.lib or liballjoyn.so). This location is in\nthe build directory in the alljoyn (Standard Client) repository. The full path is\n\u201c/build/{os}/{architecture}/{debug|release}/dist\u201d. Set the environment variable\nthe same way as you did for duktape. For example, for an x86 debug build the path\nwould look like:  Windows  set ALLJOYN_DIST= path-to-alljoyn-folder /build/win7/x86/debug/dist   Linux  export ALLJOYN_DIST= path-to-alljoyn-folder /build/linux/x86/debug/dist   With that set the console application should be able to build. Navigate to the console\nfolder and run scons  cd console\nscons",
            "title": "Console Application"
        },
        {
            "location": "/develop/building/alljoyn-js/#python-debugger-console",
            "text": "The AllJoyn.js Console application also supports a debugging feature. The command\nline debugger is built into the standard console discussed above. Additionally\nthere is a Python GUI that delivers a much better debugging experience. In order\nto use the Python GUI you must build a Python extension for the AllJoyn.js console,\nwhich has some additional dependencies. The Python GUI debugger works with Python 2.7\nor 3.x on Linux, and Python 3.x on Windows. Building Python 2.7 extensions on \nWindows requires an older version of Visual Studio that is not compatible with current \nAllJoyn code. The Python GUI extension is currently easiest to build and use\non Linux.  Linux  On Ubuntu Linux use the following commands to install the required tools:  sudo apt-get install build-essential python-dev  Once these packages are installed, navigate to the console directory in your AllJoyn.js repository.\nFrom here you need to build the library that allows Python to communicate with AllJoyn.js.  cd  ajs_git_repo \ncd console\npython setup.py build\npython setup.py install  #  --- May need to run as root user!  These commands will build the library and install it in a location that python\ncan find. If the installation was successful you can start up the GUI and begin\ndebugging. The examples below illustrate how to connect to an arbitrary\nAllJoyn.js device, or to a specific one (using the --name flag):  python pydebugger.py\n\npython pydebugger.py --name  device   Once an AllJoyn.js client is found the GUI will launch and you can start debugging\nyour script.  Windows  Building the Python GUI on Windows is not quite as easy as Linux and may require\na workaround. The issue is that the Python 3 interpreters prior to 3.5 were built\nusing Visual Studio 2010, while many users have upgraded past that release. If you have Visual Studio 2010\ninstalled you should have no problem building Python 3 extensions. If not, you will need to take\nsome extra steps. The initial steps are the same for all Visual Studio versions.    Download  Python 3.4  (preferably 64 bit)    Download  Python extensions for Windows  (same architecture as Python 3.4)    Install Python 3.4 first, then Python extensions for Windows    If you have multiple versions of Python installed, make sure your PATH environment variable has the Python 3.4 \ndirectory listed before any other Python installations.  The next steps will depend on your Visual Studio version. If you have Visual Studio 2010 skip\nto the \u201cBuilding\u201d section. Otherwise continue.  As mentioned before, Python 3.4 was built with Visual Studio 2010. It's possible to work around Python's\ntoolchain version checking to use your version of Visual Studio. Navigate to the Python 3.4 install directory and\nopen this file:  Python34 dir /Lib/distutils/msvs9compile.py  Search for the line:  VERSION = get_build_version()  Replace it with:  VERSION = 12.0  The actual number you use (12.0 in this case) will depend on the VS version you\nhave installed.   VS 2011 = 10.0  VS 2012 = 11.0  VS 2013 = 12.0   Once that change is made you may move on to building the Python GUI debugger below.  Building  The steps for building are nearly the same as Linux. As mentioned before, make sure your PATH \nenvironment variable has the Python 3.4 directory listed first.  cd  ajs_git_repo \ncd console\npython setup.py build\npython setup.py install",
            "title": "Python Debugger Console"
        },
        {
            "location": "/develop/building/alljoyn-js/#download-precompiled-binaries",
            "text": "Windows, Linux and Mac  The Allseen Alliance hosts pre-built binaries for AllJoyn.js and the console application.   AllJoyn.js Windows  AllJoyn.js Linux  AllJoyn.js Mac   The console application still requires several Standard Client\nlibraries. Those libraries can be obtained, pre-compiled, by downloading the SDK.\nSimilar to building from source, you will need to point the console to the location\nof these libraries.  Windows  set ALLJOYN_DIST= path-to-SDK   Linux  export ALLJOYN_DIST= path-to-SDK   Once that is done, you can download the pre-built console application for your platform.   Console Windows  Console Linux  Console Mac   Arduino Yun  These instructions assume you have updated your Yun to the LininoIO image.  Install these packages: duktape, ajtcl, ajtcl-services, alljoyn.js  wget http://download.linino.org/linino_distro/lininoIO/latest/packages/duktape_1.1.0-1_ar71xx.ipk   opkg install duktape_1.1.0-1_ar71xx.ipk\n\nwget http://download.linino.org/linino_distro/lininoIO/latest/packages/ajtcl_1.0.1-1_ar71xx.ipk   opkg install ajtcl_1.0.1-1_ar71xx.ipk\n\nwget http://download.linino.org/linino_distro/lininoIO/latest/packages/ajtcl-services_1.0.1-1_ar71xx.ipk   opkg install ajtcl-services_1.0.1-1_ar71xx.ipk\n\nwget http://download.linino.org/linino_distro/lininoIO/latest/packages/ajtcl-alljoynjs_1.0.1-1_ar71xx.ipk   opkg install ajtcl-alljoynjs_1.0.1-1_ar71xx.ipk",
            "title": "Download precompiled binaries"
        },
        {
            "location": "/develop/building/android/build-source/",
            "text": "Build From Source - Android\n\n\nPrerequisites \u5fc5\u5907\u6761\u4ef6\n\n\n\n\n\n\nThe following content uses many terms and concepts that are described in the\n\nIntroduction to the AllJoyn Framework\n.\nTherefore, it is strongly recommended that you read the Introduction content first.\n\u4ee5\u4e0b\u5185\u5bb9\u4f7f\u7528\u4e86\u5927\u91cf \nIntroduction to the AllJoyn Framework\n \u4e2d\u63d0\u5230\u7684\u672f\u8bed\u548c\u6982\u5ff5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u60a8\u9996\u5148\u9605\u8bfb\u4ecb\u7ecd\u5185\u5bb9\u3002\n\n\n\n\n\n\nBefore proceeding with development, make sure that you have set up the development\nenvironment as described here for \nWindows\n or\nfor \nLinux\n.\n\u5728\u5f00\u59cb\u5f00\u53d1\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u6309\u7167\nWindows\n \u6216\n\u9488\u5bf9 \nLinux\n \u5efa\u7acb\u4e86\u5f00\u53d1\u73af\u5883\u3002\n\n\n\n\n\n\nSetting Up the Programming Environment \u5efa\u7acb\u7f16\u7a0b\u73af\u5883\n\n\nThis section explains how to set up the programming environment\nfor developing AllJoyn\n-enabled Android applications.\nIt covers the following topics:\n\u8be5\u7ae0\u8282\u89e3\u91ca\u4e86\u5982\u4f55\u4e3a\u5f00\u53d1 AllJoyn\n Android \u5e94\u7528\u7a0b\u5e8f\u5efa\u7acb\u7f16\u7a0b\u73af\u5883\u3002\n\u5305\u542b\u4e86\u4ee5\u4e0b\u51e0\u70b9\uff1a\n\n\n\n\nInstall the Android SDK and NDK \u5b89\u88c5 Android SDK \u548c NDK\n\n\nInstall an IDE \u5b89\u88c5\u4e00\u4e2a IDE\n\n\n\n\n\u6ce8\u610f:\n The procedures described in this section require the\nspecified tool versions. \u8fd9\u4e00\u8282\u4e2d\u63cf\u8ff0\u7684\u6d41\u7a0b\u8981\u6c42\u4f7f\u7528\u6307\u5b9a\u7684\u5de5\u5177\u7248\u672c\u3002\n\n\nInstalling the Android SDK \u5b89\u88c5 Android SDK\n\n\nThe Android software development kit (SDK) provides the\ntools needed for building Android applications and transferring\napplications to or from an Android device. The 'adb' tool is used to:\nAndroid \u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177\u5305\uff08SDK\uff09\u4e3a\u5efa\u7acb Android \u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u5de5\u5177\uff1b\u4e5f\u4e3a\u4ece\u67d0\u4e2a Android \u8bbe\u5907\u63a5\u6536\u6216\u53d1\u51fa\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u5de5\u5177\u3002\n\n\n\n\nTransfer/pull files to/from the phone \u4ece\u624b\u673a\u53d1\u9001\uff0f\u63a5\u6536\u6587\u4ef6\u3002\n\n\nRun the AllJoyn standalone router \u8fd0\u884c AllJoyn \u72ec\u7acb\u8def\u7531\n\n\nInstall/uninstall applications \u5b89\u88c5\uff0f\u5378\u8f7d \u5e94\u7528\u7a0b\u5e8f\n\n\n\n\nFor AllJoyn v15.04, download Android SDK version r20 or later from the\nfollowing location:\n\u9488\u5bf9 AllJoyn v15.04\uff0c\u4ece\u4ee5\u4e0b\u5730\u5740\u4e0b\u8f7d Android SDk r20 \u6216\u540e\u7eed\u7248\u672c\uff1a\n\n\nhttp://developer.android.com/sdk/index.html\n\n\nEarlier versions of AllJoyn can work with older versions of the Android\nSDK. Please refer to documentation for your version of AllJoyn if you\nrequire an older Android SDK.\n\u66f4\u65e9\u7248\u672c\u7684 AllJoyn \u80fd\u517c\u5bb9\u65e9\u8d77\u7248\u672c\u7684 Android SDK\u3002\u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528\u65e9\u671f\u7248\u672c\u7684 Android SDK\uff0c\u8bf7\u53c2\u8003\u5bf9\u5e94\u7248\u672c\u7684 AllJoyn \u6587\u6863\u3002\n\n\nInstall the SDK by following the directions given here:\n\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u5b89\u88c5 SDK\u3002\n\n\nhttp://developer.android.com/sdk/installing/index.html\n\n\nThe SDK requires certain software packages\nto be pre-installed on your system. For more information,\nsee the following location:\nSDK \u9700\u8981\u5728\u7cfb\u7edf\u4e2d\u9884\u88c5\u7279\u5b9a\u7684\u8f6f\u4ef6\u5305\u3002\u6b32\u77e5\u8be6\u60c5\uff0c\u8bf7\u67e5\u770b\u4ee5\u4e0b\u5730\u5740\uff1a\n\n\nhttp://developer.android.com/sdk/requirements.html\n\n\nAfter installing the SDK, you must install the Android platform\nsupport packages you wish to use. See:\nSDK \u5b89\u88c5\u5b8c\u6bd5\u540e\uff0c\u60a8\u9700\u8981\u5b89\u88c5\u60f3\u8981\u4f7f\u7528\u7684 Android \u5e73\u53f0\u652f\u6301\u5305\u3002\u67e5\u770b\uff1a\n\n\nhttp://developer.android.com/sdk/installing/adding-packages.html\n\n\nThe AllJoyn v15.04 framework uses Android API levels 16 to 22.\nNote that installing these packages may take some time.\nAllJoyn v15.04 \u67b6\u6784\u4f7f\u7528 16 \u81f3 22 \u7ea7\u7684 Android API\u3002\u6ce8\u610f\uff0c\u5b89\u88c5\u8fd9\u4e9b\u5305\u9700\u8981\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4\u3002\n\n\nInstalling the Android NDK \u5b89\u88c5 Android NDK\n\n\nThe Android native development kit (NDK) enables developers\nto build Java native libraries (JNI libraries) which can be\ncalled from Android (Java) applications. Android NDK is\nrequired only to write Java native libraries. The Android NDK\nis not required to use the Android Java bindings, but is\nrequired to build AllJoyn.\nAndroid \u672c\u5730\u73af\u5883\u5305\uff08NDK\uff09\u4f7f\u5f00\u53d1\u8005\u80fd\u591f\u5efa\u7acb JAVA \u672c\u5730\u8d44\u6e90\u5e93\uff08JNI libraries\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7 Android\uff08Java\uff09\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\u5b83\u4eec\u3002\u4ec5\u5728\u5199\u5165 Java \u672c\u5730\u8d44\u6e90\u5e93\u65f6\u9700\u8981\u7528\u5230 Android NDK\u3002\u5f53\u4f7f\u7528 Android \u4e0e JAVA \u7ed1\u5b9a\u65f6\uff0c\u4e0d\u9700\u8981 Android NDK\uff0c\u4f46\u5728\u5efa\u7acb AllJoyn \u65f6\u9700\u8981\u4f7f\u7528 Android NDK\u3002\n\n\nThe main tool used from the Android NDK is 'ndk-build', which\nis used to build the native library of the JNI application.\nAndroid NDK \u4e2d\u4f7f\u7528\u6700\u591a\u7684\u5de5\u5177\u662f 'ndk-build'\u3002\u5b83\u7528\u4e8e\u5efa\u7acb JNI \u5e94\u7528\u7a0b\u5e8f\u7684\u672c\u5730\u8d44\u6e90\u5e93\u3002\n\n\nTo run Android JNI applications using AllJoyn 15.04, install any\nNDK version 9d or above from http://developer.android.com/tools/sdk/ndk/index.html .\n\u4e3a\u4e86\u8fd0\u884c\u4f7f\u7528 AllJoyn 15.04 \u7684 Android JNI \u5e94\u7528\u7a0b\u5e8f\uff0c\u9700\u8981\u5b89\u88c5\u4efb\u610f\u9ad8\u4e8e 9d \u7248\u672c\u7684 NDK\uff0c\u5730\u5740\uff1ahttp://developer.android.com/tools/sdk/ndk/index.html\u3002\n\n\nInstall the NDK by following the directions given on the download page.\n\u6309\u7167\u4e0b\u8f7d\u9875\u9762\u7684\u63d0\u793a\u5b89\u88c5 NDK\u3002\n\n\nTo run, the NDK requires that the following software packages\nare pre-installed on your system:\nNDK \u9700\u8981\u5728\u7cfb\u7edf\u4e2d\u9884\u88c5\u4ee5\u4e0b\u8f6f\u4ef6\u5305\u624d\u80fd\u8fd0\u884c\u3002\n\n\n\n\nLatest Android SDK (including all dependencies) \u6700\u65b0\u7684Android SDK \uff08\u5305\u62ec\u6240\u6709\u4f9d\u8d56\uff09\n\n\nGNU Make 3.81 or later GNU Make 3.81 \u6216\u66f4\u9ad8\u7248\u672c\n\n\nRecent version of awk (GNU awk or nawk) \u6700\u65b0\u7248\u672c\u7684 awk \uff08GNU awk \u6216 nawk\uff09\n\n\n\n\nFor more information, see the NDK download page.\n\u6b32\u77e5\u8be6\u60c5\uff0c\u67e5\u770b NDK \u4e0b\u8f7d\u9875\u9762\u3002\n\n\nAndroid IDEs\n\n\nInstructions and downloads for Android integrated development\nenvironments are available here:\nAndroid \u96c6\u6210\u5f00\u53d1\u73af\u5883\u7684\u6307\u5bfc\u548c\u4e0b\u8f7d\uff1a\n\n\nhttp://developer.android.com/sdk/installing/index.html\n\n\nDownloading the OpenSSL header files and library (optional) \u4e0b\u8f7d OpenSSL \u5934\u6587\u4ef6\u548c\u8d44\u6e90\u5e93\uff08\u53ef\u9009\uff09\n\n\nThe AllJoyn framework optionally uses the OpenSSL crypto library.\nAllJoyn 15.04 and later have built-in crypto functions, but\nmay be built with OpenSSL if needed.\nAllJoyn \u67b6\u6784\u53ef\u9009\u62e9\u6027\u5730\u4f7f\u7528 OpenSSL \u52a0\u5bc6\u5e93\u3002AllJoyn 15.04 \u548c\u540e\u7eed\u7248\u672c\u62e5\u6709\u5185\u5efa\u52a0\u5bc6\u5e93\uff0c\u4f46\u4e5f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4f7f\u7528 OpenSSL\u3002\n\n\nIf you build AllJoyn in the OpenSSL configuration, the prebuilt\nlibcrypto library is needed to link AllJoyn applications.\nIt can be downloaded directly from the Android device or\nemulator into the lib folder of the AllJoyn distribution.\nAttach the device (or launch the Android emulator), then\nrun the following commands:\n\u5982\u679c\u60a8\u5728 OpenSSL \u914d\u7f6e\u4e2d\u5efa\u7acb AllJoyn\uff0c\u9884\u6784\u5efa\u7684\u52a0\u5bc6\u8d44\u6e90\u5e93\u9700\u8981\u8fde\u63a5\u5230 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u53ef\u4ee5\u88ab\u76f4\u63a5\u4ece Android \u8bbe\u5907\u4e0b\u8f7d\uff0c\u6216\u8005\u4ece AllJoyn \u5206\u5e03\u7684\u6a21\u62df\u5668\u7684 lib \u6587\u4ef6\u5939\u4e2d\u83b7\u5f97\u3002\u8fde\u63a5\u8bbe\u5907\uff08\u6216\u8005\u6253\u5f00 Android \u6a21\u62df\u5668\uff09\uff0c\u6267\u884c\u4ee5\u4e0b\u6307\u4ee4\uff1a\n\n\ncd \nalljoyn_dir\n/lib\nadb pull /system/lib/libcrypto.so libcrypto.so\n\n\n\n\nThe above command means: \u4ee5\u4e0a\u547d\u4ee4\u8868\u793a\uff1a\n\n\nadb pull \n\n\n\n\nThe library can also be built from the Android source repository.\nFor details on building the Android source tree, see the\nAndroid source repository web site:\n\u8d44\u6e90\u5e93\u4e5f\u53ef\u4ee5\u901a\u8fc7 Android \u8d44\u6e90\u5e93\u5efa\u7acb\u3002\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u5efa\u7acb Android \u8d44\u6e90\u6811\uff0c\u67e5\u770b Android \u8d44\u6e90\u5e93\u7f51\u7ad9\uff1a\n\n\nhttp://source.android.com/source/building.html\n\n\nIMPORTANT: Be sure you pull the \nlibcrypto.so\n\nlibrary from the version of Android you are building for.\n\u91cd\u8981\uff1a\u52a1\u5fc5\u4e3a\u60a8\u6240\u642d\u5efa\u7684 Android \u7248\u672c\u4ece\u8d44\u6e90\u5e93\u4e2d\u83b7\u53d6 \nlibcrypto.so\n\n\nBuilding AllJoyn from Source for Android \u901a\u8fc7 Android \u6838\u5fc3\u5efa\u7acb AllJoyn\n\n\nFor most developers, the SDK package available to download from https://allseenalliance.org/developers/download is sufficient for developing Android applications using AllJoyn. However, if you wish to obtain and compile AllJoyn from source, follow the directions in this section.\n\n\n\u5bf9\u4e8e\u5927\u90e8\u5206\u5f00\u53d1\u8005\uff0c\u4ece https://allseenalliance.org/developers/download \u4e0b\u8f7d\u7684 SDK \u5305\u8db3\u591f\u5f00\u53d1\u4f7f\u7528 AllJoyn \u7684 Android \u5e94\u7528\u7a0b\u5e8f\u3002\u5f53\u7136\uff0c\u5982\u679c\u60a8\u5e0c\u671b\u4ece\u6e90\u4ee3\u7801\u83b7\u53d6\u548c\u7f16\u8bd1 AllJoyn\uff0c\u8bf7\u8ddf\u968f\u672c\u7ae0\u8282\u7684\u6307\u5bfc\uff1a\n\n\nTo compile AllJoyn from source, the following items are required:\n\u4e3a\u4e86\u4ece\u6e90\u4ee3\u7801\u7f16\u8bd1 AllJoyn\uff0c\u9700\u8981\u4ee5\u4e0b\u51e0\u4e2a\u5de5\u5177\uff1a\n\n\n\n\nAndroid SDK\n\n\nAndroid NDK\n\n\nAn Android IDE\n\n\nAndroid source\n\n\n\n\nInstructions for obtaining the Android SDK, Android NDK, and IDEs\nare in \nSetting Up the Programming Environment\n.\n\u5173\u4e8e\u83b7\u53d6 Android SDK\u3001Android NDK \u548c IDEs \u7684\u6307\u5bfc\uff0c\u8bf7\u53c2\u9605 \nSetting Up the Programming Environment\n\u3002\n\n\nThe Android source Android \u6e90\u4ee3\u7801\n\n\nThe Android source (http://source.android.com) is required\nfor building Android targets using OpenSSL. Google has detailed\ninstructions for downloading and building Android source.\n\u9700\u8981\u4f7f\u7528 Android \u6e90\u4ee3\u7801\u5efa\u7acb\u4f7f\u7528 OpenSSL \u7684 Android target\u3002Google \u63d0\u4f9b\u4e86\u4e0b\u8f7d\u548c\u5efa\u7acb Android \u6e90\u4ee3\u7801\u7684\u8be6\u7ec6\u6307\u5bfc\uff1a\n\n\nFor a list of system requirements and instructions for obtaining\nthe required tools, see http://source.android.com/source/initializing.html\n\u7cfb\u7edf\u9700\u6c42\u5217\u8868\u548c\u83b7\u5f97\u76f8\u5173\u5de5\u5177\u7684\u6307\u5bfc\uff0c\u67e5\u770b http://source.android.com/source/initializing.html\u3002\n\n\nFor instructions on obtaining the Android Source Tree,\nsee http://source.android.com/source/downloading.html\n\u83b7\u53d6 Android Source Tree \u7684\u6307\u5bfc\uff0c\u67e5\u770b http://source.android.com/source/downloading.html\u3002\n\n\nWhen running the repo init command specify the branch name for\nthe Android release you are targeting. Branch names are listed at\nhttp://source.android.com/source/build-numbers.html#source-code-tags-and-builds\n\u5f53\u4f7f\u7528 repo init \u547d\u4ee4\u6307\u5b9a\u60a8\u6240\u9700 Android \u7248\u672c\u7684\u5206\u652f\u540d\u79f0\u65f6\uff0c\u67e5\u770b http://source.android.com/source/build-numbers.html#source-code-tags-and-builds \u83b7\u53d6\u5206\u652f\u540d\u79f0\u3002\n\n\nFor instructions on building and running the build source, see\nhttp://source.android.com/source/building.html\n\u6709\u5173\u751f\u6210\u548c\u8fd0\u884c\u751f\u6210\u6e90\u7684\u8bf4\u660e\uff0c\u67e5\u770b http://source.android.com/source/building.html\n\n\n\n\nBuild the \"generic\" version of Android.\u751f\u6210\"\u901a\u7528\"\u7248\u672c\u7684 Android\n\n\nThere is no need to run the code. Only the build libraries \nthat are not available in the NDK are used. \u4e0d\u9700\u8981\u8fd0\u884c\u4ee3\u7801\u3002\u4f7f\u7528\u4ec5\u5728 NDK \u4e2d\u4e0d\u53ef\u7528\u7684\u751f\u6210\u5e93\u3002\n\n\n\n\nObtaining the AllJoyn source \u83b7\u53d6 AllJoyn \u6e90\n\n\nIf you followed the instructions in \nThe Android source\n,\nyou should have the repo tool and git installed on your system.\nEnter the following commands to get the AllJoyn source:\n\u5982\u679c\u60a8\u6309\u7167 \nThe Android source\n \u7684\u6307\u5bfc\u8fdb\u884c\u64cd\u4f5c\uff0c\u60a8\u7684\u7cfb\u7edf\u4e2d\u5e94\u88c5\u6709 repo \u5de5\u5177\u548c git\u3002\n\u8f93\u5165\u4ee5\u4e0b\u4ee3\u7801\u4ee5\u83b7\u53d6 AllJoyn \u6e90\u3002\n\n\n$ mkdir $HOME/alljoyn # for example\n$ cd $HOME/alljoyn\n$ repo init -u git://github.com/alljoyn/manifest.git\n$ repo sync\n$ repo start master --all\n\n\n\n\nBuilding the AllJoyn framework for Android \u4e3a Android \u5efa\u7acb AllJoyn \u67b6\u6784\n\n\nAt this point. you have all of the files and programs required\nto build the AllJoyn framework for Android. The following commands assume\nyou have installed the Android NDK at \n/usr/local/android-ndk-r9d\n,\nyou have downloaded and built the Android source, and it is\nlocated in \n$HOME/android-platform\n.\n\n\n\u6b64\u65f6\uff0c\u60a8\u62e5\u6709\u4e3a Android \u5efa\u7acb AllJoyn \u67b6\u6784\u6240\u9700\u7684\u5168\u90e8\u6587\u4ef6\u548c\u7a0b\u5e8f\u3002\u4e0b\u8ff0\u6307\u4ee4\u5efa\u7acb\u5728\u60a8\u5df2\u7ecf\u5728 \n/usr/local/android-ndk-r9d\n \u5b89\u88c5 Android NDK\uff0c\u5e76\u4e0b\u8f7d\u548c\u5728 \n$HOME/android-platform\n \u5efa\u7acb\u4e86 Android \u6e90\u3002\n\n\nUse the following commands to build the AllJoyn framework for Android using\nbuiltin crypto:\n\u5bf9\u4e8e\u91c7\u7528\u5185\u7f6e\u52a0\u5bc6\u7684 Android\uff0c\u4f7f\u7528\u4e0b\u8ff0\u547d\u4ee4\u5efa\u7acb AllJoyn \u67b6\u6784\u3002\n\n\n$ export JAVA_HOME=\n/usr/lib/jvm/java-6-sun\n # or java-5-sun\n$ export CLASSPATH=\n/usr/share/java/junit.jar\n\n$ scons OS=android CPU=arm CRYPTO=builtin ANDROID_NDK=/usr/local/android-ndk-r9b\n   ANDROID_SRC=$HOME/android-platform WS=off\n\n\n\n\nTo build using OpenSSL crypto functions: \u5bf9\u4e8e\u91c7\u7528 OpenSSL \u52a0\u5bc6\u7684\uff0c\u4f7f\u7528\u4e0b\u8ff0\u65b9\u6cd5\uff1a\n\n\n$ export JAVA_HOME=\n/usr/lib/jvm/java-6-sun\n # or java-5-sun\n$ export CLASSPATH=\n/usr/share/java/junit.jar\n\n$ scons OS=android CPU=arm CRYPTO=openssl ANDROID_NDK=/usr/local/android-ndk-r9b\n   ANDROID_SRC=$HOME/android-platform WS=off\n\n\n\n\nIt is possible to specify that the AllJoyn framework uses\nadditional tools during the build process. For example, the\nAllJoyn framework can use Uncrustify to check white space\ncompliance and Doxygen for producing API documentation for\nthe C++ APIs. See \nConfiguring the Build Environment (Linux Platform)\n\nfor detailed instructions for installing these two tools.\n\u5141\u8bb8\u6307\u5b9a AllJoyn \u67b6\u6784\u5728\u6784\u5efa\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u989d\u5916\u5de5\u5177\u3002\u5982\u4f7f\u7528 Uncrustify \u5bf9\u7a7a\u683c\u8fdb\u884c\u6392\u7248\u6216\u4f7f\u7528 Doxygen \u4e3a C++ API \u751f\u6210\u6587\u6863\u3002\u67e5\u770b\nConfiguring the Build Environment (Linux Platform)\n \u83b7\u53d6\u66f4\u591a\u5173\u4e8e\u5b89\u88c5\u8fd9\u4e24\u4e2a\u5de5\u5177\u7684\u8be6\u7ec6\u6307\u5bfc\u3002",
            "title": "Build source"
        },
        {
            "location": "/develop/building/android/build-source/#build-from-source-android",
            "text": "",
            "title": "Build From Source - Android"
        },
        {
            "location": "/develop/building/android/build-source/#prerequisites",
            "text": "The following content uses many terms and concepts that are described in the Introduction to the AllJoyn Framework .\nTherefore, it is strongly recommended that you read the Introduction content first.\n\u4ee5\u4e0b\u5185\u5bb9\u4f7f\u7528\u4e86\u5927\u91cf  Introduction to the AllJoyn Framework  \u4e2d\u63d0\u5230\u7684\u672f\u8bed\u548c\u6982\u5ff5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u60a8\u9996\u5148\u9605\u8bfb\u4ecb\u7ecd\u5185\u5bb9\u3002    Before proceeding with development, make sure that you have set up the development\nenvironment as described here for  Windows  or\nfor  Linux .\n\u5728\u5f00\u59cb\u5f00\u53d1\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u6309\u7167 Windows  \u6216\n\u9488\u5bf9  Linux  \u5efa\u7acb\u4e86\u5f00\u53d1\u73af\u5883\u3002",
            "title": "Prerequisites \u5fc5\u5907\u6761\u4ef6"
        },
        {
            "location": "/develop/building/android/build-source/#setting-up-the-programming-environment",
            "text": "This section explains how to set up the programming environment\nfor developing AllJoyn -enabled Android applications.\nIt covers the following topics:\n\u8be5\u7ae0\u8282\u89e3\u91ca\u4e86\u5982\u4f55\u4e3a\u5f00\u53d1 AllJoyn  Android \u5e94\u7528\u7a0b\u5e8f\u5efa\u7acb\u7f16\u7a0b\u73af\u5883\u3002\n\u5305\u542b\u4e86\u4ee5\u4e0b\u51e0\u70b9\uff1a   Install the Android SDK and NDK \u5b89\u88c5 Android SDK \u548c NDK  Install an IDE \u5b89\u88c5\u4e00\u4e2a IDE   \u6ce8\u610f:  The procedures described in this section require the\nspecified tool versions. \u8fd9\u4e00\u8282\u4e2d\u63cf\u8ff0\u7684\u6d41\u7a0b\u8981\u6c42\u4f7f\u7528\u6307\u5b9a\u7684\u5de5\u5177\u7248\u672c\u3002  Installing the Android SDK \u5b89\u88c5 Android SDK  The Android software development kit (SDK) provides the\ntools needed for building Android applications and transferring\napplications to or from an Android device. The 'adb' tool is used to:\nAndroid \u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177\u5305\uff08SDK\uff09\u4e3a\u5efa\u7acb Android \u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u5de5\u5177\uff1b\u4e5f\u4e3a\u4ece\u67d0\u4e2a Android \u8bbe\u5907\u63a5\u6536\u6216\u53d1\u51fa\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u5de5\u5177\u3002   Transfer/pull files to/from the phone \u4ece\u624b\u673a\u53d1\u9001\uff0f\u63a5\u6536\u6587\u4ef6\u3002  Run the AllJoyn standalone router \u8fd0\u884c AllJoyn \u72ec\u7acb\u8def\u7531  Install/uninstall applications \u5b89\u88c5\uff0f\u5378\u8f7d \u5e94\u7528\u7a0b\u5e8f   For AllJoyn v15.04, download Android SDK version r20 or later from the\nfollowing location:\n\u9488\u5bf9 AllJoyn v15.04\uff0c\u4ece\u4ee5\u4e0b\u5730\u5740\u4e0b\u8f7d Android SDk r20 \u6216\u540e\u7eed\u7248\u672c\uff1a  http://developer.android.com/sdk/index.html  Earlier versions of AllJoyn can work with older versions of the Android\nSDK. Please refer to documentation for your version of AllJoyn if you\nrequire an older Android SDK.\n\u66f4\u65e9\u7248\u672c\u7684 AllJoyn \u80fd\u517c\u5bb9\u65e9\u8d77\u7248\u672c\u7684 Android SDK\u3002\u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528\u65e9\u671f\u7248\u672c\u7684 Android SDK\uff0c\u8bf7\u53c2\u8003\u5bf9\u5e94\u7248\u672c\u7684 AllJoyn \u6587\u6863\u3002  Install the SDK by following the directions given here:\n\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u5b89\u88c5 SDK\u3002  http://developer.android.com/sdk/installing/index.html  The SDK requires certain software packages\nto be pre-installed on your system. For more information,\nsee the following location:\nSDK \u9700\u8981\u5728\u7cfb\u7edf\u4e2d\u9884\u88c5\u7279\u5b9a\u7684\u8f6f\u4ef6\u5305\u3002\u6b32\u77e5\u8be6\u60c5\uff0c\u8bf7\u67e5\u770b\u4ee5\u4e0b\u5730\u5740\uff1a  http://developer.android.com/sdk/requirements.html  After installing the SDK, you must install the Android platform\nsupport packages you wish to use. See:\nSDK \u5b89\u88c5\u5b8c\u6bd5\u540e\uff0c\u60a8\u9700\u8981\u5b89\u88c5\u60f3\u8981\u4f7f\u7528\u7684 Android \u5e73\u53f0\u652f\u6301\u5305\u3002\u67e5\u770b\uff1a  http://developer.android.com/sdk/installing/adding-packages.html  The AllJoyn v15.04 framework uses Android API levels 16 to 22.\nNote that installing these packages may take some time.\nAllJoyn v15.04 \u67b6\u6784\u4f7f\u7528 16 \u81f3 22 \u7ea7\u7684 Android API\u3002\u6ce8\u610f\uff0c\u5b89\u88c5\u8fd9\u4e9b\u5305\u9700\u8981\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4\u3002  Installing the Android NDK \u5b89\u88c5 Android NDK  The Android native development kit (NDK) enables developers\nto build Java native libraries (JNI libraries) which can be\ncalled from Android (Java) applications. Android NDK is\nrequired only to write Java native libraries. The Android NDK\nis not required to use the Android Java bindings, but is\nrequired to build AllJoyn.\nAndroid \u672c\u5730\u73af\u5883\u5305\uff08NDK\uff09\u4f7f\u5f00\u53d1\u8005\u80fd\u591f\u5efa\u7acb JAVA \u672c\u5730\u8d44\u6e90\u5e93\uff08JNI libraries\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7 Android\uff08Java\uff09\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\u5b83\u4eec\u3002\u4ec5\u5728\u5199\u5165 Java \u672c\u5730\u8d44\u6e90\u5e93\u65f6\u9700\u8981\u7528\u5230 Android NDK\u3002\u5f53\u4f7f\u7528 Android \u4e0e JAVA \u7ed1\u5b9a\u65f6\uff0c\u4e0d\u9700\u8981 Android NDK\uff0c\u4f46\u5728\u5efa\u7acb AllJoyn \u65f6\u9700\u8981\u4f7f\u7528 Android NDK\u3002  The main tool used from the Android NDK is 'ndk-build', which\nis used to build the native library of the JNI application.\nAndroid NDK \u4e2d\u4f7f\u7528\u6700\u591a\u7684\u5de5\u5177\u662f 'ndk-build'\u3002\u5b83\u7528\u4e8e\u5efa\u7acb JNI \u5e94\u7528\u7a0b\u5e8f\u7684\u672c\u5730\u8d44\u6e90\u5e93\u3002  To run Android JNI applications using AllJoyn 15.04, install any\nNDK version 9d or above from http://developer.android.com/tools/sdk/ndk/index.html .\n\u4e3a\u4e86\u8fd0\u884c\u4f7f\u7528 AllJoyn 15.04 \u7684 Android JNI \u5e94\u7528\u7a0b\u5e8f\uff0c\u9700\u8981\u5b89\u88c5\u4efb\u610f\u9ad8\u4e8e 9d \u7248\u672c\u7684 NDK\uff0c\u5730\u5740\uff1ahttp://developer.android.com/tools/sdk/ndk/index.html\u3002  Install the NDK by following the directions given on the download page.\n\u6309\u7167\u4e0b\u8f7d\u9875\u9762\u7684\u63d0\u793a\u5b89\u88c5 NDK\u3002  To run, the NDK requires that the following software packages\nare pre-installed on your system:\nNDK \u9700\u8981\u5728\u7cfb\u7edf\u4e2d\u9884\u88c5\u4ee5\u4e0b\u8f6f\u4ef6\u5305\u624d\u80fd\u8fd0\u884c\u3002   Latest Android SDK (including all dependencies) \u6700\u65b0\u7684Android SDK \uff08\u5305\u62ec\u6240\u6709\u4f9d\u8d56\uff09  GNU Make 3.81 or later GNU Make 3.81 \u6216\u66f4\u9ad8\u7248\u672c  Recent version of awk (GNU awk or nawk) \u6700\u65b0\u7248\u672c\u7684 awk \uff08GNU awk \u6216 nawk\uff09   For more information, see the NDK download page.\n\u6b32\u77e5\u8be6\u60c5\uff0c\u67e5\u770b NDK \u4e0b\u8f7d\u9875\u9762\u3002  Android IDEs  Instructions and downloads for Android integrated development\nenvironments are available here:\nAndroid \u96c6\u6210\u5f00\u53d1\u73af\u5883\u7684\u6307\u5bfc\u548c\u4e0b\u8f7d\uff1a  http://developer.android.com/sdk/installing/index.html  Downloading the OpenSSL header files and library (optional) \u4e0b\u8f7d OpenSSL \u5934\u6587\u4ef6\u548c\u8d44\u6e90\u5e93\uff08\u53ef\u9009\uff09  The AllJoyn framework optionally uses the OpenSSL crypto library.\nAllJoyn 15.04 and later have built-in crypto functions, but\nmay be built with OpenSSL if needed.\nAllJoyn \u67b6\u6784\u53ef\u9009\u62e9\u6027\u5730\u4f7f\u7528 OpenSSL \u52a0\u5bc6\u5e93\u3002AllJoyn 15.04 \u548c\u540e\u7eed\u7248\u672c\u62e5\u6709\u5185\u5efa\u52a0\u5bc6\u5e93\uff0c\u4f46\u4e5f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4f7f\u7528 OpenSSL\u3002  If you build AllJoyn in the OpenSSL configuration, the prebuilt\nlibcrypto library is needed to link AllJoyn applications.\nIt can be downloaded directly from the Android device or\nemulator into the lib folder of the AllJoyn distribution.\nAttach the device (or launch the Android emulator), then\nrun the following commands:\n\u5982\u679c\u60a8\u5728 OpenSSL \u914d\u7f6e\u4e2d\u5efa\u7acb AllJoyn\uff0c\u9884\u6784\u5efa\u7684\u52a0\u5bc6\u8d44\u6e90\u5e93\u9700\u8981\u8fde\u63a5\u5230 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u53ef\u4ee5\u88ab\u76f4\u63a5\u4ece Android \u8bbe\u5907\u4e0b\u8f7d\uff0c\u6216\u8005\u4ece AllJoyn \u5206\u5e03\u7684\u6a21\u62df\u5668\u7684 lib \u6587\u4ef6\u5939\u4e2d\u83b7\u5f97\u3002\u8fde\u63a5\u8bbe\u5907\uff08\u6216\u8005\u6253\u5f00 Android \u6a21\u62df\u5668\uff09\uff0c\u6267\u884c\u4ee5\u4e0b\u6307\u4ee4\uff1a  cd  alljoyn_dir /lib\nadb pull /system/lib/libcrypto.so libcrypto.so  The above command means: \u4ee5\u4e0a\u547d\u4ee4\u8868\u793a\uff1a  adb pull    The library can also be built from the Android source repository.\nFor details on building the Android source tree, see the\nAndroid source repository web site:\n\u8d44\u6e90\u5e93\u4e5f\u53ef\u4ee5\u901a\u8fc7 Android \u8d44\u6e90\u5e93\u5efa\u7acb\u3002\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u5efa\u7acb Android \u8d44\u6e90\u6811\uff0c\u67e5\u770b Android \u8d44\u6e90\u5e93\u7f51\u7ad9\uff1a  http://source.android.com/source/building.html  IMPORTANT: Be sure you pull the  libcrypto.so \nlibrary from the version of Android you are building for.\n\u91cd\u8981\uff1a\u52a1\u5fc5\u4e3a\u60a8\u6240\u642d\u5efa\u7684 Android \u7248\u672c\u4ece\u8d44\u6e90\u5e93\u4e2d\u83b7\u53d6  libcrypto.so",
            "title": "Setting Up the Programming Environment \u5efa\u7acb\u7f16\u7a0b\u73af\u5883"
        },
        {
            "location": "/develop/building/android/build-source/#building-alljoyn-from-source-for-android-android-alljoyn",
            "text": "For most developers, the SDK package available to download from https://allseenalliance.org/developers/download is sufficient for developing Android applications using AllJoyn. However, if you wish to obtain and compile AllJoyn from source, follow the directions in this section.  \u5bf9\u4e8e\u5927\u90e8\u5206\u5f00\u53d1\u8005\uff0c\u4ece https://allseenalliance.org/developers/download \u4e0b\u8f7d\u7684 SDK \u5305\u8db3\u591f\u5f00\u53d1\u4f7f\u7528 AllJoyn \u7684 Android \u5e94\u7528\u7a0b\u5e8f\u3002\u5f53\u7136\uff0c\u5982\u679c\u60a8\u5e0c\u671b\u4ece\u6e90\u4ee3\u7801\u83b7\u53d6\u548c\u7f16\u8bd1 AllJoyn\uff0c\u8bf7\u8ddf\u968f\u672c\u7ae0\u8282\u7684\u6307\u5bfc\uff1a  To compile AllJoyn from source, the following items are required:\n\u4e3a\u4e86\u4ece\u6e90\u4ee3\u7801\u7f16\u8bd1 AllJoyn\uff0c\u9700\u8981\u4ee5\u4e0b\u51e0\u4e2a\u5de5\u5177\uff1a   Android SDK  Android NDK  An Android IDE  Android source   Instructions for obtaining the Android SDK, Android NDK, and IDEs\nare in  Setting Up the Programming Environment .\n\u5173\u4e8e\u83b7\u53d6 Android SDK\u3001Android NDK \u548c IDEs \u7684\u6307\u5bfc\uff0c\u8bf7\u53c2\u9605  Setting Up the Programming Environment \u3002  The Android source Android \u6e90\u4ee3\u7801  The Android source (http://source.android.com) is required\nfor building Android targets using OpenSSL. Google has detailed\ninstructions for downloading and building Android source.\n\u9700\u8981\u4f7f\u7528 Android \u6e90\u4ee3\u7801\u5efa\u7acb\u4f7f\u7528 OpenSSL \u7684 Android target\u3002Google \u63d0\u4f9b\u4e86\u4e0b\u8f7d\u548c\u5efa\u7acb Android \u6e90\u4ee3\u7801\u7684\u8be6\u7ec6\u6307\u5bfc\uff1a  For a list of system requirements and instructions for obtaining\nthe required tools, see http://source.android.com/source/initializing.html\n\u7cfb\u7edf\u9700\u6c42\u5217\u8868\u548c\u83b7\u5f97\u76f8\u5173\u5de5\u5177\u7684\u6307\u5bfc\uff0c\u67e5\u770b http://source.android.com/source/initializing.html\u3002  For instructions on obtaining the Android Source Tree,\nsee http://source.android.com/source/downloading.html\n\u83b7\u53d6 Android Source Tree \u7684\u6307\u5bfc\uff0c\u67e5\u770b http://source.android.com/source/downloading.html\u3002  When running the repo init command specify the branch name for\nthe Android release you are targeting. Branch names are listed at\nhttp://source.android.com/source/build-numbers.html#source-code-tags-and-builds\n\u5f53\u4f7f\u7528 repo init \u547d\u4ee4\u6307\u5b9a\u60a8\u6240\u9700 Android \u7248\u672c\u7684\u5206\u652f\u540d\u79f0\u65f6\uff0c\u67e5\u770b http://source.android.com/source/build-numbers.html#source-code-tags-and-builds \u83b7\u53d6\u5206\u652f\u540d\u79f0\u3002  For instructions on building and running the build source, see\nhttp://source.android.com/source/building.html\n\u6709\u5173\u751f\u6210\u548c\u8fd0\u884c\u751f\u6210\u6e90\u7684\u8bf4\u660e\uff0c\u67e5\u770b http://source.android.com/source/building.html   Build the \"generic\" version of Android.\u751f\u6210\"\u901a\u7528\"\u7248\u672c\u7684 Android  There is no need to run the code. Only the build libraries \nthat are not available in the NDK are used. \u4e0d\u9700\u8981\u8fd0\u884c\u4ee3\u7801\u3002\u4f7f\u7528\u4ec5\u5728 NDK \u4e2d\u4e0d\u53ef\u7528\u7684\u751f\u6210\u5e93\u3002   Obtaining the AllJoyn source \u83b7\u53d6 AllJoyn \u6e90  If you followed the instructions in  The Android source ,\nyou should have the repo tool and git installed on your system.\nEnter the following commands to get the AllJoyn source:\n\u5982\u679c\u60a8\u6309\u7167  The Android source  \u7684\u6307\u5bfc\u8fdb\u884c\u64cd\u4f5c\uff0c\u60a8\u7684\u7cfb\u7edf\u4e2d\u5e94\u88c5\u6709 repo \u5de5\u5177\u548c git\u3002\n\u8f93\u5165\u4ee5\u4e0b\u4ee3\u7801\u4ee5\u83b7\u53d6 AllJoyn \u6e90\u3002  $ mkdir $HOME/alljoyn # for example\n$ cd $HOME/alljoyn\n$ repo init -u git://github.com/alljoyn/manifest.git\n$ repo sync\n$ repo start master --all  Building the AllJoyn framework for Android \u4e3a Android \u5efa\u7acb AllJoyn \u67b6\u6784  At this point. you have all of the files and programs required\nto build the AllJoyn framework for Android. The following commands assume\nyou have installed the Android NDK at  /usr/local/android-ndk-r9d ,\nyou have downloaded and built the Android source, and it is\nlocated in  $HOME/android-platform .  \u6b64\u65f6\uff0c\u60a8\u62e5\u6709\u4e3a Android \u5efa\u7acb AllJoyn \u67b6\u6784\u6240\u9700\u7684\u5168\u90e8\u6587\u4ef6\u548c\u7a0b\u5e8f\u3002\u4e0b\u8ff0\u6307\u4ee4\u5efa\u7acb\u5728\u60a8\u5df2\u7ecf\u5728  /usr/local/android-ndk-r9d  \u5b89\u88c5 Android NDK\uff0c\u5e76\u4e0b\u8f7d\u548c\u5728  $HOME/android-platform  \u5efa\u7acb\u4e86 Android \u6e90\u3002  Use the following commands to build the AllJoyn framework for Android using\nbuiltin crypto:\n\u5bf9\u4e8e\u91c7\u7528\u5185\u7f6e\u52a0\u5bc6\u7684 Android\uff0c\u4f7f\u7528\u4e0b\u8ff0\u547d\u4ee4\u5efa\u7acb AllJoyn \u67b6\u6784\u3002  $ export JAVA_HOME= /usr/lib/jvm/java-6-sun  # or java-5-sun\n$ export CLASSPATH= /usr/share/java/junit.jar \n$ scons OS=android CPU=arm CRYPTO=builtin ANDROID_NDK=/usr/local/android-ndk-r9b\n   ANDROID_SRC=$HOME/android-platform WS=off  To build using OpenSSL crypto functions: \u5bf9\u4e8e\u91c7\u7528 OpenSSL \u52a0\u5bc6\u7684\uff0c\u4f7f\u7528\u4e0b\u8ff0\u65b9\u6cd5\uff1a  $ export JAVA_HOME= /usr/lib/jvm/java-6-sun  # or java-5-sun\n$ export CLASSPATH= /usr/share/java/junit.jar \n$ scons OS=android CPU=arm CRYPTO=openssl ANDROID_NDK=/usr/local/android-ndk-r9b\n   ANDROID_SRC=$HOME/android-platform WS=off  It is possible to specify that the AllJoyn framework uses\nadditional tools during the build process. For example, the\nAllJoyn framework can use Uncrustify to check white space\ncompliance and Doxygen for producing API documentation for\nthe C++ APIs. See  Configuring the Build Environment (Linux Platform) \nfor detailed instructions for installing these two tools.\n\u5141\u8bb8\u6307\u5b9a AllJoyn \u67b6\u6784\u5728\u6784\u5efa\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u989d\u5916\u5de5\u5177\u3002\u5982\u4f7f\u7528 Uncrustify \u5bf9\u7a7a\u683c\u8fdb\u884c\u6392\u7248\u6216\u4f7f\u7528 Doxygen \u4e3a C++ API \u751f\u6210\u6587\u6863\u3002\u67e5\u770b Configuring the Build Environment (Linux Platform)  \u83b7\u53d6\u66f4\u591a\u5173\u4e8e\u5b89\u88c5\u8fd9\u4e24\u4e2a\u5de5\u5177\u7684\u8be6\u7ec6\u6307\u5bfc\u3002",
            "title": "Building AllJoyn from Source for Android \u901a\u8fc7 Android \u6838\u5fc3\u5efa\u7acb AllJoyn"
        },
        {
            "location": "/develop/building/android/",
            "text": "Building Android\n\n\nSetup\n\n\n\n\n\n\nDownload\n the following Android SDKs:\n\n\n\n\nCore SDK (release)\n\n\nOnboarding SDK\n\n\nConfiguration SDK\n\n\nNotification SDK\n\n\nControl Panel SDK\n\n\n\n\n\n\n\n\nExtract all ZIP files to one directory.\n\n\n\n\n\n\nBuild Samples\n\n\nNote, you may need to adjust the below paths based on the version you downloaded\n\n\n\n\n\n\nImport projects from:\n\n\n\n\nalljoyn-android/core/alljoyn-14.06.00-rel/java/samples\n\n\nalljoyn-android/services\n\n\n\n\n\n\n\n\nAdd Support Library\n\n\nTo add \"android-support-v4.jar\", right-click on the project,\n select \"Android Tools\" \n \"Add Support Library\"\n\n\n\n\n\n\nBuilding the AllJoyn\n framework for an existing app:\n\n\n\n\nIn your project, create a \"libs/armeabi\" dir if it doesn't already exist.\n\n\nCopy \"alljoyn-android/core/alljoyn-14.06.00-rel/java/lib/liballjoyn_java.so\" to the \"libs/armeabi\" dir.\n\n\nCopy \"alljoyn-android/core/alljoyn-14.06.00-rel/java/jar/alljoyn.jar\" to the \"libs\" dir.\n\n\nIf using a Service Framework, copy the jars from the \"alljoyn-android/services/\nSERVICE FRAMEWORK\n/java/libs/*.jar\" to the \"libs\" dir.",
            "title": "Home"
        },
        {
            "location": "/develop/building/android/#building-android",
            "text": "",
            "title": "Building Android"
        },
        {
            "location": "/develop/building/android/#setup",
            "text": "Download  the following Android SDKs:   Core SDK (release)  Onboarding SDK  Configuration SDK  Notification SDK  Control Panel SDK     Extract all ZIP files to one directory.",
            "title": "Setup"
        },
        {
            "location": "/develop/building/android/#build-samples",
            "text": "Note, you may need to adjust the below paths based on the version you downloaded    Import projects from:   alljoyn-android/core/alljoyn-14.06.00-rel/java/samples  alljoyn-android/services     Add Support Library  To add \"android-support-v4.jar\", right-click on the project,\n select \"Android Tools\"   \"Add Support Library\"",
            "title": "Build Samples"
        },
        {
            "location": "/develop/building/android/#building-the-alljoyn-framework-for-an-existing-app",
            "text": "In your project, create a \"libs/armeabi\" dir if it doesn't already exist.  Copy \"alljoyn-android/core/alljoyn-14.06.00-rel/java/lib/liballjoyn_java.so\" to the \"libs/armeabi\" dir.  Copy \"alljoyn-android/core/alljoyn-14.06.00-rel/java/jar/alljoyn.jar\" to the \"libs\" dir.  If using a Service Framework, copy the jars from the \"alljoyn-android/services/ SERVICE FRAMEWORK /java/libs/*.jar\" to the \"libs\" dir.",
            "title": "Building the AllJoyn&trade; framework for an existing app:"
        },
        {
            "location": "/develop/building/ios-osx/build-source/",
            "text": "Build From Source - iOS and OS X\n\n\nDevelopment Environment Requirements\n\n\nThe AllJoyn\n build environment requires:\n\n\n\n\nApple computer system with OS X 10.9 (Mavericks) or above\n\n\nXcode 6.x or higher\n\n\n\n\nInstallation\n\n\nInstall the following on your OS X 10.9 or above system:\n\n\nXcode\n\n\n\n\nOpen a browser and navigate to\nhttp://itunes.apple.com/us/app/xcode/id497799835?mt=12.\n\n\nDownload and install the free Xcode application.\n\n\nAfter successful installation, from your Applications folder, select and open Xcode.\n\n\nSelect the \nXcode \n Preferences\n menu item.\n\n\nSelect the \nDownloads\n tab.\n\n\nSelect the \nComponents\n tab.\n\n\nVerify that the Command Line Tools have been installed.\n\n\n\n\nNOTE:\n You may need to run the following command from a\n   terminal window to install the Command Line Tools:\n\n\nsh\n   $ xcode-select --install\n\n\nHomebrew\n\n\nUse Homebrew to deploy SCons, git, and uncrustify to your OS X system.\n\n\n\n\nOpen a browser and navigate to http://mxcl.github.com/homebrew/.\n\n\nDownload Homebrew.\n\n\nNavigate to https://github.com/mxcl/homebrew/wiki/installation,\nand follow the directions for installation.\n\n\n\n\nSCons\n\n\nUse the SCons build tool to generate the AllJoyn C++ API binaries\nfor iOS and OS X.\n\n\nTo install SCons, open a terminal window, and type the following command:\n\n\n$ brew install scons\n\n\n\n\nGit\n\n\nUse Git for source control.\n\n\nTo install Git, open a terminal window, and type the following command:\n\n\n$ brew install git\n\n\n\n\nAppledoc\n\n\nNOTE:\n Appledoc is not required if you do not want to generate\nthe API Reference Manual.\n\n\nThe appledoc tool generates documentation for the AllJoyn\nObjective-C language binding. For more information, see http://gentlebytes.com/appledoc/.\n\n\n\n\n\n\nOpen a browser and navigate to https://github.com/tomaz/appledoc.\n\n\n\n\n\n\nDo one of the folliowing:\n\n\n\n\n\n\nDownload appledoc.\n\n\n\n\nTo install using Homebrew, open a terminal window and type\n   the following command:\n\n\n\n\nsh\n   $ brew install appledoc\n\n\nHomebrew puts your templates in \n~/Library/Application Support/appledoc\n.\n\n\nDoxygen\n\n\nNOTE:\n Doxygen is not required if you do not want to generate the\nAPI Reference Manual.\n\n\nThe Doxygen tool generates documentation for the AllJoyn C++\nlanguage binding. For more information, see http://www.doxygen.org.\n\n\n\n\nOpen a browser and navigate to http://www.doxygen.org.\n\n\n\n\nDo one of the following:\n\n\n\n\n\n\nDownload and install doxygen.\n\n\n\n\nTo install using Homebrew, open a terminal window and\n   type the following command:\n\n\n\n\nsh\n   $ brew install doxygen\n\n\nGraphviz\n\n\nNOTE:\n Graphviz is not required if you do not want to generate\nthe API Reference Manual.\n\n\nThe Graphviz Dot tool diagrams class hierarchies. For more\ninformation, see http://www.graphviz.org.\n\n\n\n\n\n\nOpen a browser and navigate to http://graphviz.org.\n\n\n\n\n\n\nDo one of the following:\n\n\n\n\n\n\nDownload and install graphviz.\n\n\n\n\nTo install using Homebrew, open a terminal window and\n   type the following command:\n\n\n\n\nsh\n   $ brew install graphviz\n\n\nObtaining the AllJoyn source\n\n\nTo download the AllJoyn source code, including the Objective-C\nlanguage binding, which is the AllJoyn framework:\n\n\n\n\nOpen a terminal window.\n\n\nType the following commands:\n\n\n\n\nsh\n   $ mkdir ~/alljoyn # for example\n   $ cd ~/alljoyn\n   $ git clone https://git.allseenalliance.org/gerrit/core/alljoyn.git\n\n\nObtaining OpenSSL\n\n\nOpenSSL is an open source toolkit for implementing the\nSecure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1).\nAlthough the Mac OS X SDK includes OpenSSL, the iOS SDK does not include it.\n\n\n\n\nTo build the OpenSSL framework for iOS, download the source\ncode at the following web address:\n\n\n\n\nhttp://www.openssl.org/\n\n\n\n\nCopy the OpenSSL source into a separate folder on your\ndevelopment system, not under the AllJoyn framework source\ndirectory tree. For example,\n\n\n\n\n/Development/openssl/openssl-1.0.1\n\n\n\n\nDownload the Xcode project that can be used to build\nOpen SSL for iOS from GitHub at the following web address:\n\n\n\n\nhttps://github.com/sqlcipher/openssl-xcode/\n\n\n\n\nNavigate to the top level OpenSSL source folder in Finder\n(i.e., \n/Development/openssl/openssl-1.0.1\n), and copy the\nopenssl.xcodeproj folder you downloaded from GitHub into this folder.\n\n\nOpen the openssl.xcodeproj in Xcode.\n\n\n\n\nMake sure of the following :\n\n\n\n\n'Valid Architectures' field has 'arm64' as one of the values.\n\n\nUnder Architectures you have 'Standard architectures (armv7, arm64)' selected\n\n\n\n\n'Build Active Architecture Only = No'\n\n\n\n\n\n\nIn Xcode, build the crypto target (libssl.a and libcrypto.a)\nfor each combination of configuration (debug|release) and\nplatform (iphoneos|iphonesimulator) that you need for your\niOS project by selecting \nProduct \n Build For \n (your desired configuration)\n.\n\n\n\n\nCreate a new folder called \nbuild\n under the top-level\nOpenSSL folder created in step 2 (i.e., \n/Development/openssl/openssl-1.0.1/build\n).\n\n\nLocate your OpenSSL build products folders (i.e., Debug-iphoneos)\nin the /Users/\n/Library/Developer/Xcode/DerivedData/XXXXXXXXXXXXX-openssl/Build/Products folder,\nand copy all the \n-\n folders, like Debug-iphoneos,\nto the build folder created in step 7.\n   You should now have a folder structure similar to the\n   following, containing libssl and libcrypto for each $(CONFIGURATION)-$(PLATFORM_NAME)\n   you built in step 6:\n\n\n\n\nsh\n   openssl-1.0.1c build\n   Debug-iphoneos ibssl.a libcrypto.a\n   Debug-iphonesimulator libssl.a libcrypto.a\n\n\n\n\n\n\nDefine an environment variable OPENSSL_ROOT=\n\n   This environment variable needs to be present whenever you build projects using the\n   AllJoyn SDK.\n\n\n9a. For Mac OS X 10.7 to 10.9, to set the environment variable, open a Terminal window and type the following:\n\nsh\nlaunchctl setenv OPENSSL_ROOT \npath to top level folder containing openssl\n\n9b. With Mac OS X 10.10, environment variable processing changed. Most importantly, OPENSSL_ROOT\nmust be defined before launching Xcode (Xcode will not pick up new or changed variables\nafter launching). Therefore, to set the environment variable, open a Terminal window and type\nthe following:\n\n\nsh\nlaunchctl setenv OPENSSL_ROOT \npath to top level folder containing openssl\n\nsudo killall Finder\nsudo killall Dock\n\n\nBuilding the AllJoyn Framework\n\n\n\n\n\n\nUsing the Xcode Integrated Development Environment (IDE) to\nbuild the AllJoyn SDK is much easier than using the command line.\nWe therefore recommend using the Xcode IDE to produce the\nAllJoyn binaries for OS X or iOS.\n\n\nXcode IDE build\n\n\n\n\n\n\nDo one of the following:\n\n\n\n\n\n\nNavigate in Finder to the \nalljoyn root directory\n/alljoyn_objc\n directory,\n   and double-click the \nalljoyn_darwin.xcodeproj\n file to launch Xcode.\n   OR\n\n\n\n\n\n\nOpen Xcode, select \nFile \n Open\n, and choose the\n   \nalljoyn root directory\n/alljoyn_objc/alljoyn_darwin.xcodeproj\n file.\n\n\n\n\n\n\nJust as with any Xcode project, select the active Scheme\nto control which version of the AllJoyn framework is built.\nThere are schemes for the AllJoyn framework targeting OS X and iOS.\nThe active scheme is controlled by a selection box located in the\nupper left-hand corner of the Xcode user interface.\n\n\n\n\nClick the selection box for the active scheme to see a\nmenu of all schemes configured for the Xcode project and\nallow you to select the platform to build. For instance,\nwhen building the AllJoyn framework on iOS, you might select\niOS Device, iPad Simulator, or iPhone simulator as platforms for the build.\n\n\nOnce you select a scheme and a platform to build against, select\n\nProduct \n Build\n from the Xcode menu to build the AllJoyn framework.\nUpon completion of the build, your binaries will be located in the following directory:\n\n\n\n\nsh\n   \nalljoyn_root_directory\n/alljoyn_core/build/darwin/[arm|x86]/[debug|release]/dist\n\n\nNOTE:\n For OS X builds, the binaries will be located under the \n.../darwin/x86/...\n\n   directory. For iOS builds, the binaries will be located under the \n.../darwin/arm/\n directory.\n\n\nCommand line build\n\n\n\n\nOpen a terminal window.\n\n\nChange your directory to \nalljoyn root directory\n/alljoyn_objc\n\nby running the following command:\n\n\n\n\nsh\n   $ cd \nalljoyn root directory\n/alljoyn_objc\n\n\n\n\n\n\nTo build for:\n\n\n\n\n\n\n64-bit iOS devices, run the following command:\n\n\n\n\n\n\nsh\n   $ /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild\n      -project alljoyn_darwin.xcodeproj\n      -scheme alljoyn_core_arm64 -sdk iphoneos -configuration Debug\n\n\n\n\nFor all other iOS devices, run the following command:\n\n\n\n\nsh\n   $ /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild\n      -project alljoyn_darwin.xcodeproj\n      -scheme alljoyn_core_ios -sdk iphoneos -configuration Debug\n\n\n\n\niOS simulator, run the following command:\n\n\n\n\nsh\n   $ /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild\n      -project alljoyn_darwin.xcodeproj\n      -scheme alljoyn_core_ios -sdk iphonesimulator -configuration Debug\n\n\n\n\nOS X, run the following command:\n\n\n\n\nsh\n   $ /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild\n      -project alljoyn_darwin.xcodeproj\n      -scheme alljoyn_core_osx",
            "title": "Build source"
        },
        {
            "location": "/develop/building/ios-osx/build-source/#build-from-source-ios-and-os-x",
            "text": "",
            "title": "Build From Source - iOS and OS X"
        },
        {
            "location": "/develop/building/ios-osx/build-source/#development-environment-requirements",
            "text": "The AllJoyn  build environment requires:   Apple computer system with OS X 10.9 (Mavericks) or above  Xcode 6.x or higher",
            "title": "Development Environment Requirements"
        },
        {
            "location": "/develop/building/ios-osx/build-source/#installation",
            "text": "Install the following on your OS X 10.9 or above system:  Xcode   Open a browser and navigate to\nhttp://itunes.apple.com/us/app/xcode/id497799835?mt=12.  Download and install the free Xcode application.  After successful installation, from your Applications folder, select and open Xcode.  Select the  Xcode   Preferences  menu item.  Select the  Downloads  tab.  Select the  Components  tab.  Verify that the Command Line Tools have been installed.   NOTE:  You may need to run the following command from a\n   terminal window to install the Command Line Tools:  sh\n   $ xcode-select --install  Homebrew  Use Homebrew to deploy SCons, git, and uncrustify to your OS X system.   Open a browser and navigate to http://mxcl.github.com/homebrew/.  Download Homebrew.  Navigate to https://github.com/mxcl/homebrew/wiki/installation,\nand follow the directions for installation.   SCons  Use the SCons build tool to generate the AllJoyn C++ API binaries\nfor iOS and OS X.  To install SCons, open a terminal window, and type the following command:  $ brew install scons  Git  Use Git for source control.  To install Git, open a terminal window, and type the following command:  $ brew install git  Appledoc  NOTE:  Appledoc is not required if you do not want to generate\nthe API Reference Manual.  The appledoc tool generates documentation for the AllJoyn\nObjective-C language binding. For more information, see http://gentlebytes.com/appledoc/.    Open a browser and navigate to https://github.com/tomaz/appledoc.    Do one of the folliowing:    Download appledoc.   To install using Homebrew, open a terminal window and type\n   the following command:   sh\n   $ brew install appledoc  Homebrew puts your templates in  ~/Library/Application Support/appledoc .  Doxygen  NOTE:  Doxygen is not required if you do not want to generate the\nAPI Reference Manual.  The Doxygen tool generates documentation for the AllJoyn C++\nlanguage binding. For more information, see http://www.doxygen.org.   Open a browser and navigate to http://www.doxygen.org.   Do one of the following:    Download and install doxygen.   To install using Homebrew, open a terminal window and\n   type the following command:   sh\n   $ brew install doxygen  Graphviz  NOTE:  Graphviz is not required if you do not want to generate\nthe API Reference Manual.  The Graphviz Dot tool diagrams class hierarchies. For more\ninformation, see http://www.graphviz.org.    Open a browser and navigate to http://graphviz.org.    Do one of the following:    Download and install graphviz.   To install using Homebrew, open a terminal window and\n   type the following command:   sh\n   $ brew install graphviz  Obtaining the AllJoyn source  To download the AllJoyn source code, including the Objective-C\nlanguage binding, which is the AllJoyn framework:   Open a terminal window.  Type the following commands:   sh\n   $ mkdir ~/alljoyn # for example\n   $ cd ~/alljoyn\n   $ git clone https://git.allseenalliance.org/gerrit/core/alljoyn.git  Obtaining OpenSSL  OpenSSL is an open source toolkit for implementing the\nSecure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1).\nAlthough the Mac OS X SDK includes OpenSSL, the iOS SDK does not include it.   To build the OpenSSL framework for iOS, download the source\ncode at the following web address:   http://www.openssl.org/   Copy the OpenSSL source into a separate folder on your\ndevelopment system, not under the AllJoyn framework source\ndirectory tree. For example,   /Development/openssl/openssl-1.0.1   Download the Xcode project that can be used to build\nOpen SSL for iOS from GitHub at the following web address:   https://github.com/sqlcipher/openssl-xcode/   Navigate to the top level OpenSSL source folder in Finder\n(i.e.,  /Development/openssl/openssl-1.0.1 ), and copy the\nopenssl.xcodeproj folder you downloaded from GitHub into this folder.  Open the openssl.xcodeproj in Xcode.   Make sure of the following :   'Valid Architectures' field has 'arm64' as one of the values.  Under Architectures you have 'Standard architectures (armv7, arm64)' selected   'Build Active Architecture Only = No'    In Xcode, build the crypto target (libssl.a and libcrypto.a)\nfor each combination of configuration (debug|release) and\nplatform (iphoneos|iphonesimulator) that you need for your\niOS project by selecting  Product   Build For   (your desired configuration) .   Create a new folder called  build  under the top-level\nOpenSSL folder created in step 2 (i.e.,  /Development/openssl/openssl-1.0.1/build ).  Locate your OpenSSL build products folders (i.e., Debug-iphoneos)\nin the /Users/ /Library/Developer/Xcode/DerivedData/XXXXXXXXXXXXX-openssl/Build/Products folder,\nand copy all the  -  folders, like Debug-iphoneos,\nto the build folder created in step 7.\n   You should now have a folder structure similar to the\n   following, containing libssl and libcrypto for each $(CONFIGURATION)-$(PLATFORM_NAME)\n   you built in step 6:   sh\n   openssl-1.0.1c build\n   Debug-iphoneos ibssl.a libcrypto.a\n   Debug-iphonesimulator libssl.a libcrypto.a    Define an environment variable OPENSSL_ROOT= \n   This environment variable needs to be present whenever you build projects using the\n   AllJoyn SDK.  9a. For Mac OS X 10.7 to 10.9, to set the environment variable, open a Terminal window and type the following: sh\nlaunchctl setenv OPENSSL_ROOT  path to top level folder containing openssl \n9b. With Mac OS X 10.10, environment variable processing changed. Most importantly, OPENSSL_ROOT\nmust be defined before launching Xcode (Xcode will not pick up new or changed variables\nafter launching). Therefore, to set the environment variable, open a Terminal window and type\nthe following:  sh\nlaunchctl setenv OPENSSL_ROOT  path to top level folder containing openssl \nsudo killall Finder\nsudo killall Dock",
            "title": "Installation"
        },
        {
            "location": "/develop/building/ios-osx/build-source/#building-the-alljoyn-framework",
            "text": "Using the Xcode Integrated Development Environment (IDE) to\nbuild the AllJoyn SDK is much easier than using the command line.\nWe therefore recommend using the Xcode IDE to produce the\nAllJoyn binaries for OS X or iOS.  Xcode IDE build    Do one of the following:    Navigate in Finder to the  alljoyn root directory /alljoyn_objc  directory,\n   and double-click the  alljoyn_darwin.xcodeproj  file to launch Xcode.\n   OR    Open Xcode, select  File   Open , and choose the\n    alljoyn root directory /alljoyn_objc/alljoyn_darwin.xcodeproj  file.    Just as with any Xcode project, select the active Scheme\nto control which version of the AllJoyn framework is built.\nThere are schemes for the AllJoyn framework targeting OS X and iOS.\nThe active scheme is controlled by a selection box located in the\nupper left-hand corner of the Xcode user interface.   Click the selection box for the active scheme to see a\nmenu of all schemes configured for the Xcode project and\nallow you to select the platform to build. For instance,\nwhen building the AllJoyn framework on iOS, you might select\niOS Device, iPad Simulator, or iPhone simulator as platforms for the build.  Once you select a scheme and a platform to build against, select Product   Build  from the Xcode menu to build the AllJoyn framework.\nUpon completion of the build, your binaries will be located in the following directory:   sh\n    alljoyn_root_directory /alljoyn_core/build/darwin/[arm|x86]/[debug|release]/dist  NOTE:  For OS X builds, the binaries will be located under the  .../darwin/x86/... \n   directory. For iOS builds, the binaries will be located under the  .../darwin/arm/  directory.  Command line build   Open a terminal window.  Change your directory to  alljoyn root directory /alljoyn_objc \nby running the following command:   sh\n   $ cd  alljoyn root directory /alljoyn_objc    To build for:    64-bit iOS devices, run the following command:    sh\n   $ /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild\n      -project alljoyn_darwin.xcodeproj\n      -scheme alljoyn_core_arm64 -sdk iphoneos -configuration Debug   For all other iOS devices, run the following command:   sh\n   $ /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild\n      -project alljoyn_darwin.xcodeproj\n      -scheme alljoyn_core_ios -sdk iphoneos -configuration Debug   iOS simulator, run the following command:   sh\n   $ /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild\n      -project alljoyn_darwin.xcodeproj\n      -scheme alljoyn_core_ios -sdk iphonesimulator -configuration Debug   OS X, run the following command:   sh\n   $ /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild\n      -project alljoyn_darwin.xcodeproj\n      -scheme alljoyn_core_osx",
            "title": "Building the AllJoyn Framework"
        },
        {
            "location": "/develop/building/ios-osx/",
            "text": "Building iOS/OS X\n\n\nNote, some of the paths below will need to be adjusted based on the version downloaded\n\n\nSetup\n\n\n\n\n\n\nDownload\n[downlod] the following iOS SDKs:\n\n\n\n\nCore SDK (release)\n\n\nOnboarding SDK\n\n\nConfiguration SDK\n\n\nNotification SDK\n\n\nControl Panel SDK\n\n\n\n\n\n\n\n\nExtract the downloaded packages and setup the directory structure:\n\n\n\n\n\n\nmkdir alljoyn-ios\nmkdir alljoyn-ios/core\nunzip alljoyn-14.06.00-osx_ios-sdk.zip\nmv alljoyn-14.06.00-osx_ios-sdk alljoyn-ios/core/alljoyn\nunzip alljoyn-config-service-framework-14.06.00-ios-sdk-rel.zip\nunzip alljoyn-controlpanel-service-framework-14.06.00-ios-sdk-rel.zip\nunzip alljoyn-notification-service-framework-14.06.00-ios-sdk-rel.zip\nunzip alljoyn-onboarding-service-framework-14.06.00-ios-sdk-rel.zip\n\n\n\n\nSet up OpenSSL dependencies\n\n\ncd \nparent directory of alljoyn-ios\n\npushd alljoyn-ios\ngit clone git://git.openssl.org/openssl.git\ngit clone https://github.com/sqlcipher/openssl-xcode.git\ncp -r openssl-xcode/openssl.xcodeproj openssl\npushd openssl\ngit checkout tags/OpenSSL_1_0_1f #replace this with a newer version as available\nsed -ie 's/\\(ONLY_ACTIVE_ARCH.*\\)YES/\\1NO/' openssl.xcodeproj/project.pbxproj\nxcodebuild -configuration Release -sdk iphonesimulator\nxcodebuild -configuration Release -sdk iphoneos\nxcodebuild -configuration Release\nxcodebuild -configuration Debug -sdk iphonesimulator\nxcodebuild -configuration Debug -sdk iphoneos\nxcodebuild -configuration Debug\nlaunchctl setenv OPENSSL_ROOT `pwd`\npopd\npopd\n\n\n\n\nDefine environment variables\n\n\ncd alljoyn-ios\nlaunchctl setenv ALLJOYN_SDK_ROOT `pwd`\ncd services\nlaunchctl setenv ALLSEEN_BASE_SERVICES_ROOT `pwd`\n\n\n\n\nBuild the samples\n\n\nOpen each of the following sample iOS applications in Xcode and build\nthem by selecting \nProject \n Build\n from the Xcode menu.\n\n\n\n\nalljoyn-ios/core/alljoyn/alljoyn_objc/samples/iOS/\n\n\nalljoyn-ios/core/alljoyn/services/about/ios/samples/\n\n\nalljoyn-ios/services/alljoyn-config-14.06.00-rel/objc/samples/\n\n\nalljoyn-ios/services/alljoyn-controlpanel-14.06.00-rel/objc/samples/\n\n\nalljoyn-ios/services/alljoyn-notification-14.06.00-rel/objc/samples/\n\n\nalljoyn-ios/services/alljoyn-onboarding-14.06.00-rel/objc/samples/\n\n\n\n\nInstall samples on an iOS device\n\n\nMake sure you have an iOS device connected to your computer, then use\nXcode to \nRun\n the desired sample application. This will install\nthe application onto your device.\n\n\nTIP:\n This command can also be used to build a sample application from a terminal\n\n\n\n\n\n\n\n\nAdd the AllJoyn\n framework to an iOS application\n\n\n\n\nMake sure you know the location of the AllJoyn SDK folder.\nThe AllJoyn SDK folder contains your build, services, and alljoyn_objc folders.\n\n\nOpen Xcode, open your project, and select the root of the tree in\nProject Navigator. Then select the app's target under \nTargets\n.\n\n\n\n\nAdd the AllJoyn Core library and dependencies:\n\n\n\n\nSelect the \nBuilding Settings\n tab for the app target. Click the \nAll\n option at the top of the list.\n\n\nAt the top of the Build Settings list, click \nArchitectures\n and then select \nStandard architectures (armv7, armv7s)\n.\n\n\nSet \nBuild Active Architecture only\n to \nYes\n.\n\n\nScroll down to the Linking section, and set \nOther Linker Flags\n to the following:\n\n\n\n\n-lalljoyn -lajrouter -lBundledRouter.o -lssl -lcrypto\n\n5. Scroll down to the list of settings until see the \nSearch Paths\n group.\n6. Double-click the \nHeader Search Paths\n field and enter the following:\n\n\n$(ALLJOYN_ROOT)/core/alljoyn/build/darwin/arm/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/cpp/inc\n\n  \n$(ALLJOYN_ROOT)/core/alljoyn/alljoyn_objc/AllJoynFramework/AllJoynFramework/\n\n\n\n\nDouble-click the \nLibrary Search Paths\n field and enter the following:\n\n\n\n\n$(ALLJOYN_ROOT)/core/alljoyn/build/darwin/$(CURRENT_ARCH)/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/cpp/lib\n\n  \n$(OPENSSL_ROOT)/build/$(CONFIGURATION)-$(PLATFORM_NAME)\n\n\n\n\nLook through the Build Settings table until you see the \nApple LLVM 5.0 - Language - C++\n group and set the following:\n\n\nEnable C++ Exceptions\n to \nNo\n.\n\n\nEnable C++ Runtime Types\n to \nNo\n.\n\n\n\n\nC++ Language Dialect\n to \nCompiler Default\n.\n\n\n\n\n\n\nLook through the Build Settings table until you see the \nApple LLVM 5.0 - Custom\nCompiler Flags\n group and set the following:\n\n\n\n\n\n\nEnter the following in the \nOther C Flags\n field for Debug field:\n\n\n-DQCC_OS_GROUP_POSIX -DQCC_OS_DARWIN\n\n\n\n\n\n\nEnter the following in the \nOther C Flags\n field for Release field:\n\n\n-DNS_BLOCK_ASSERTIONS=1 -DQCC_OS_GROUP_POSIX -DQCC_OS_DARWIN\n\n\n\n\n\n\nLook through the Build Settings table until you see the \nApple LLVM 5.0 - Language\n group and set the following:\n\n\n\n\nC Language Dialect\n to \nCompiler Default\n.\n\n\nCompile Sources As\n to \nObjective-C++\n.\n\n\nSelect the \nBuild Phases\n tab.\n\n\nExpand the \nLink Binary With Libraries\n group and click the + sign at the lower left corner. A dialog will appear.\n\n\nSelect the SystemConfiguration.framework file.\n\n\nClick the + button again and add the following libraries to link against, if not already included:\n\n\nlibstdc++.6.0.9.dylib\n\n\nlibstdc++.6.dylib\n\n\nlibstdc++.dylib\n\n\nlibc++abi.dylib\n\n\nlibc++.1.dylib\n\n\nlibc++.dylib\n\n\n\n\n\n\n\n\nAdd the service frameworks\n\n\n\n\nSelect the \nBuild Phases\n tab for the app target. Click the \nAll\n option at the top of the list.\n\n\nUnder \nLink Binary with Libraries\n, click on the '+' button, choose \nAdd Other...\n, and add the following:\n\n\n\n\nGeneral libs\n (needed by all apps using one or more service frameworks):\n  * alljoyn-ios/services/\n/cpp/lib/\n    * liballjoyn_services_common_cpp.a\n    * liballjoyn_about_cpp.a\n  * alljoyn-ios-directory/services/\n/objc/lib/\n    * liballjoyn_services_common_objc.a\n    * liballjoyn_about_objc.a\n    * libAllJoynFramework_iOS.a\n\n\nConfig libs\n:\n  * alljoyn-ios/services/alljoyn-config-14.06.00-rel/cpp/lib/\n    * liballjoyn_config_cpp.a\n  * alljoyn-ios-directory/services/alljoyn-config-14.06.00-rel/objc/lib/\n    * liballjoyn_config_objc.a\n\n\nControl Panel libs\n:\n  * alljoyn-ios/services/alljoyn-controlpanel-14.06.00-rel/cpp/lib/\n    * liballjoyn_controlpanel_cpp.a\n  * alljoyn-ios/services/alljoyn-controlpanel-14.06.00-rel/objc/lib/\n    * liballjoyn_controlpanel_objc.a\n\n\nNotification libs\n:\n  * alljoyn-ios/services/alljoyn-notification-14.06.00-rel/cpp/lib/\n    * liballjoyn_notification_cpp.a\n  * alljoyn-ios/services/alljoyn-notification-14.06.00-rel/objc/lib/\n    * liballjoyn_notification_objc.a\n\n\nOnboarding libs\n:\n  * alljoyn-ios/services/alljoyn-onboarding-14.06.00-rel/cpp/lib/\n    * liballjoyn_onboarding_cpp.a\n  * alljoyn-ios/services/alljoyn-onboarding-14.06.00-rel/objc/lib/\n    * liballjoyn_onboarding_objc.a",
            "title": "Home"
        },
        {
            "location": "/develop/building/ios-osx/#building-iosos-x",
            "text": "Note, some of the paths below will need to be adjusted based on the version downloaded",
            "title": "Building iOS/OS X"
        },
        {
            "location": "/develop/building/ios-osx/#setup",
            "text": "Download [downlod] the following iOS SDKs:   Core SDK (release)  Onboarding SDK  Configuration SDK  Notification SDK  Control Panel SDK     Extract the downloaded packages and setup the directory structure:    mkdir alljoyn-ios\nmkdir alljoyn-ios/core\nunzip alljoyn-14.06.00-osx_ios-sdk.zip\nmv alljoyn-14.06.00-osx_ios-sdk alljoyn-ios/core/alljoyn\nunzip alljoyn-config-service-framework-14.06.00-ios-sdk-rel.zip\nunzip alljoyn-controlpanel-service-framework-14.06.00-ios-sdk-rel.zip\nunzip alljoyn-notification-service-framework-14.06.00-ios-sdk-rel.zip\nunzip alljoyn-onboarding-service-framework-14.06.00-ios-sdk-rel.zip  Set up OpenSSL dependencies  cd  parent directory of alljoyn-ios \npushd alljoyn-ios\ngit clone git://git.openssl.org/openssl.git\ngit clone https://github.com/sqlcipher/openssl-xcode.git\ncp -r openssl-xcode/openssl.xcodeproj openssl\npushd openssl\ngit checkout tags/OpenSSL_1_0_1f #replace this with a newer version as available\nsed -ie 's/\\(ONLY_ACTIVE_ARCH.*\\)YES/\\1NO/' openssl.xcodeproj/project.pbxproj\nxcodebuild -configuration Release -sdk iphonesimulator\nxcodebuild -configuration Release -sdk iphoneos\nxcodebuild -configuration Release\nxcodebuild -configuration Debug -sdk iphonesimulator\nxcodebuild -configuration Debug -sdk iphoneos\nxcodebuild -configuration Debug\nlaunchctl setenv OPENSSL_ROOT `pwd`\npopd\npopd  Define environment variables  cd alljoyn-ios\nlaunchctl setenv ALLJOYN_SDK_ROOT `pwd`\ncd services\nlaunchctl setenv ALLSEEN_BASE_SERVICES_ROOT `pwd`",
            "title": "Setup"
        },
        {
            "location": "/develop/building/ios-osx/#build-the-samples",
            "text": "Open each of the following sample iOS applications in Xcode and build\nthem by selecting  Project   Build  from the Xcode menu.   alljoyn-ios/core/alljoyn/alljoyn_objc/samples/iOS/  alljoyn-ios/core/alljoyn/services/about/ios/samples/  alljoyn-ios/services/alljoyn-config-14.06.00-rel/objc/samples/  alljoyn-ios/services/alljoyn-controlpanel-14.06.00-rel/objc/samples/  alljoyn-ios/services/alljoyn-notification-14.06.00-rel/objc/samples/  alljoyn-ios/services/alljoyn-onboarding-14.06.00-rel/objc/samples/   Install samples on an iOS device  Make sure you have an iOS device connected to your computer, then use\nXcode to  Run  the desired sample application. This will install\nthe application onto your device.  TIP:  This command can also be used to build a sample application from a terminal",
            "title": "Build the samples"
        },
        {
            "location": "/develop/building/ios-osx/#add-the-alljoyn-framework-to-an-ios-application",
            "text": "Make sure you know the location of the AllJoyn SDK folder.\nThe AllJoyn SDK folder contains your build, services, and alljoyn_objc folders.  Open Xcode, open your project, and select the root of the tree in\nProject Navigator. Then select the app's target under  Targets .   Add the AllJoyn Core library and dependencies:   Select the  Building Settings  tab for the app target. Click the  All  option at the top of the list.  At the top of the Build Settings list, click  Architectures  and then select  Standard architectures (armv7, armv7s) .  Set  Build Active Architecture only  to  Yes .  Scroll down to the Linking section, and set  Other Linker Flags  to the following:   -lalljoyn -lajrouter -lBundledRouter.o -lssl -lcrypto \n5. Scroll down to the list of settings until see the  Search Paths  group.\n6. Double-click the  Header Search Paths  field and enter the following:  $(ALLJOYN_ROOT)/core/alljoyn/build/darwin/arm/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/cpp/inc \n   $(ALLJOYN_ROOT)/core/alljoyn/alljoyn_objc/AllJoynFramework/AllJoynFramework/   Double-click the  Library Search Paths  field and enter the following:   $(ALLJOYN_ROOT)/core/alljoyn/build/darwin/$(CURRENT_ARCH)/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/cpp/lib \n   $(OPENSSL_ROOT)/build/$(CONFIGURATION)-$(PLATFORM_NAME)   Look through the Build Settings table until you see the  Apple LLVM 5.0 - Language - C++  group and set the following:  Enable C++ Exceptions  to  No .  Enable C++ Runtime Types  to  No .   C++ Language Dialect  to  Compiler Default .    Look through the Build Settings table until you see the  Apple LLVM 5.0 - Custom\nCompiler Flags  group and set the following:    Enter the following in the  Other C Flags  field for Debug field:  -DQCC_OS_GROUP_POSIX -DQCC_OS_DARWIN    Enter the following in the  Other C Flags  field for Release field:  -DNS_BLOCK_ASSERTIONS=1 -DQCC_OS_GROUP_POSIX -DQCC_OS_DARWIN    Look through the Build Settings table until you see the  Apple LLVM 5.0 - Language  group and set the following:   C Language Dialect  to  Compiler Default .  Compile Sources As  to  Objective-C++ .  Select the  Build Phases  tab.  Expand the  Link Binary With Libraries  group and click the + sign at the lower left corner. A dialog will appear.  Select the SystemConfiguration.framework file.  Click the + button again and add the following libraries to link against, if not already included:  libstdc++.6.0.9.dylib  libstdc++.6.dylib  libstdc++.dylib  libc++abi.dylib  libc++.1.dylib  libc++.dylib     Add the service frameworks   Select the  Build Phases  tab for the app target. Click the  All  option at the top of the list.  Under  Link Binary with Libraries , click on the '+' button, choose  Add Other... , and add the following:   General libs  (needed by all apps using one or more service frameworks):\n  * alljoyn-ios/services/ /cpp/lib/\n    * liballjoyn_services_common_cpp.a\n    * liballjoyn_about_cpp.a\n  * alljoyn-ios-directory/services/ /objc/lib/\n    * liballjoyn_services_common_objc.a\n    * liballjoyn_about_objc.a\n    * libAllJoynFramework_iOS.a  Config libs :\n  * alljoyn-ios/services/alljoyn-config-14.06.00-rel/cpp/lib/\n    * liballjoyn_config_cpp.a\n  * alljoyn-ios-directory/services/alljoyn-config-14.06.00-rel/objc/lib/\n    * liballjoyn_config_objc.a  Control Panel libs :\n  * alljoyn-ios/services/alljoyn-controlpanel-14.06.00-rel/cpp/lib/\n    * liballjoyn_controlpanel_cpp.a\n  * alljoyn-ios/services/alljoyn-controlpanel-14.06.00-rel/objc/lib/\n    * liballjoyn_controlpanel_objc.a  Notification libs :\n  * alljoyn-ios/services/alljoyn-notification-14.06.00-rel/cpp/lib/\n    * liballjoyn_notification_cpp.a\n  * alljoyn-ios/services/alljoyn-notification-14.06.00-rel/objc/lib/\n    * liballjoyn_notification_objc.a  Onboarding libs :\n  * alljoyn-ios/services/alljoyn-onboarding-14.06.00-rel/cpp/lib/\n    * liballjoyn_onboarding_cpp.a\n  * alljoyn-ios/services/alljoyn-onboarding-14.06.00-rel/objc/lib/\n    * liballjoyn_onboarding_objc.a",
            "title": "Add the AllJoyn&trade; framework to an iOS application"
        },
        {
            "location": "/develop/building/linux/build-source/",
            "text": "Build From Source - Linux\n\n\nBuild tools and libs \u5efa\u7acb\u5de5\u5177\u548c\u5e93\n\n\n\n\nOpen a terminal window and run the following command:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u4e14\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\n\n\nsh\n  $ sudo apt-get install build-essential libgtk2.0-dev\n     libssl-dev xsltproc ia32-libs libxml2-dev libcap-dev\n\n2. To create a 32-bit build of the AllJoyn\n framework\non a 64-bit operating system, install these required development libraries:\u5982\u679c\u8981\u5728\u4e00\u4e2a 64 \u4e3a\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u5efa\u7acb\u4e00\u4e2a 32 \u4f4d AllJoyn\n\uff0c\u9700\u8981\u5b89\u88c5\u8fd9\u4e9b\u5f00\u53d1\u5e93\uff1a\n  \nsh\n  $ sudo apt-get install gcc-multilib g++-multilib libc6-i386\n     libc6-dev-i386 libssl-dev:i386 libxml2-dev:i386\n\n\n\u6ce8\u610f:\n libssl-dev does not have multilib support.libssl-dev \u4e0d\u652f\u6301\u591a\u5e93\u5e76\u5b58\u3002\nIf the 32-bit version of libssl-dev is installed, then the 64-bit version is\nreplaced with the 32-bit version. You can delete the 32-bit version of the\nlibraries and reinstall the 64-bit version if you wish to go back to 64-bit.\nlibssl-dev is not required if building AllJoyn with the CRYPTO=builtin option.\n\u5982\u679c\u5b89\u88c5\u4e86 32 \u4f4d\u7684 libssl-dev\uff0c\u90a3\u4e48 64 \u4f4d\u7684\u7248\u672c\u5c06\u88ab 32 \u4f4d\u7684\u7248\u672c\u53d6\u4ee3\u3002\u5982\u679c\u60a8\u60f3\u8981\u56de\u5230 64 \u4f4d\uff0c\u60a8\u9700\u8981\u9996\u5148\u5220\u9664 32 \u4f4d\u7684\u7248\u672c\uff0c\u518d\u91cd\u65b0\u5b89\u88c5 64 \u4f4d\u7684\u7248\u672c\u3002\u5f53\u5efa\u7acb\u62e5\u6709 CRYPTO=builtin \u9009\u9879\u7684 AllJoyn \u65f6\uff0c\u4e0d\u9700\u8981 libssl-dev\u3002\n\n\nPython v2.6/2.7\n\n\n\u6ce8\u610f:\n Python v3.0 is not compatible and will cause errors.Python 3.0 \u4e0d\u517c\u5bb9\uff0c\u5c06\u5bfc\u81f4\u9519\u8bef\u3002\n\n\n\n\nPython is a common part of most Linux distributions. You can\ndetermine whether Python is already installed on your system by\nopening a terminal window and running the following command:\nPython \u662f\u5927\u90e8\u5206 Linux \u7248\u672c\u7684\u4e00\u4e2a\u5e38\u89c4\u90e8\u5206\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7ec8\u7aef\u7a97\u53e3\u8fd0\u884c\u4ee5\u4e0b\u6307\u4ee4\u4e86\u89e3 Python \u662f\u5426\u5df2\u7ecf\u88ab\u5b89\u88c5\uff1a\n  \nsh\n  $ which python\n\n\n\n\nIf a path (e.g., /usr/bin/python) is returned, Python is already installed.\n  \u5982\u679c\u8fd4\u56de\u4e86\u4e00\u4e2a\u8def\u5f84\uff08\u5982 /usr/bin/python\uff09\uff0c\u8bf4\u660e Python \u5df2\u7ecf\u88ab\u5b89\u88c5\u4e86\u3002\n\n\n\n\n\n\nOtherwise, open a terminal window and run the following command:\n\u5426\u5219\uff0c\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u4e14\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n  \nsh\n  $ sudo apt-get install python\n\n\n\n\n\n\nIf this installation method does not give you the correct\nversion of Python, install the \nrequired version\n.\n\u5982\u679c\u6b64\u5b89\u88c5\u65b9\u6cd5\u672a\u80fd\u7ed9\u60a8\u63d0\u4f9b\u4e00\u4e2a\u6b63\u786e\u7248\u672c\u7684 Python\uff0c \u5b89\u88c5 \nrequired version\n.\n\n\n\n\n\n\nSCons\n\n\nSCons\n is a software construction tool\nused to build the AllJoyn framework. SCons is a default package\non most Linux distributions.\n\nSCons\n \u662f\u4e00\u4e2a\u5efa\u7acb AllJoyn \u67b6\u6784\u7684\u8f6f\u4ef6\u6784\u5efa\u5de5\u5177\u3002SCons \u5728\u5927\u90e8\u5206 Linux \u7248\u672c\u4e2d\u662f\u4e00\u4e2a\u9ed8\u8ba4\u5305\u3002\n\n\nOpen a terminal window and run the following command:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\n$ sudo apt-get install scons\n\n\n\n\nAllJoyn's builds are verified with SCons v2.3.SCons v2.3 \u9a8c\u8bc1 AllJoyn \u7684\u6784\u5efa\u3002\n\n\nOpenSSL (optional) OpenSSL\uff08\u53ef\u9009\uff09\n\n\nOpenSSL is an open-source toolkit for implementing secure network\ncommunication and cryptographic functions. AllJoyn only uses the\ncryptographic functions of OpenSSL.\nIt is recommended that you always use the \nnewest version of\nOpenSSL\n.\nOpenSSL \u662f\u63d0\u4f9b\u5b89\u5168\u7f51\u7edc\u901a\u4fe1\u548c\u52a0\u5bc6\u65b9\u5f0f\u7684\u4e00\u79cd\u5f00\u6e90\u5de5\u5177\u5305\u3002AllJoyn \u53ea\u4f7f\u7528 OpenSSL \u7684\u52a0\u5bc6\u65b9\u5f0f\u3002\n\u5efa\u8bae\u60a8\u4f7f\u7528\n\u6700\u65b0\u7248\u672c\u7684 OpenSSL\n.\n\n\nOpen a terminal window and run the following command:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u4e14\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\n$ sudo apt-get install libssl-dev\n\n\n\n\ngit\n\n\nGit\n is a source code repository access tool. The AllJoyn\nsource code is stored in a set of \ngit projects\n.\n\nGit\n \u662f\u4e00\u4e2a\u8fde\u63a5\u6e90\u4ee3\u7801\u6587\u4ef6\u5939\u7684\u5de5\u5177\u3002AllJoyn \u6e90\u4ee3\u7801\u5b58\u50a8\u5728\u4e00\u5957 \ngit projects\n\u4e2d\u3002\n\n\nOpen a terminal window and run the following command:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\n$ sudo apt-get install git-core\n\n\n\n\nRepo\n\n\nRepo is a tool used to manage projects that consist of multiple\ngit projects. The AllJoyn source code is stored in a set of git\nprojects that can be cloned individually or as a group using\n\nGoogle's repo tool\n.\nThis tool is not required, but is highly recommended.\nRepo \u662f\u7528\u4e8e\u7ba1\u7406\u591a\u4e2a git \u5de5\u7a0b\u7684\u5de5\u5177\u3002Alljoyn \u6e90\u4ee3\u7801\u4ee5\u4e00\u7cfb\u5217 git \u5de5\u7a0b\u7684\u5f62\u5f0f\u5b58\u50a8\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 \nGoogle's repo tool\n \u5355\u72ec\u6216\u6279\u91cf\u514b\u9686\u3002\u6b64\u5de5\u5177\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u4f46\u5f3a\u70c8\u5efa\u8bae\u4f7f\u7528\u3002\n\n\n\n\nOpen a terminal window and run the following command to install curl:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u4e14\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 curl\uff1a\n\n\n\n\nsh\n  $ sudo apt-get install curl\n\n\n\n\nNavigate to your home directory and download repo by running\nthe following command:\u5bfc\u822a\u81f3\u6839\u76ee\u5f55\u5e76\u4e14\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d repo\u3002\n\n\n\n\nsh\n  $ curl https://storage.googleapis.com/git-repo-downloads/repo \n\n  ~/bin/repo\n\n\n\n\nCopy repo to /usr/local/bin and make it executable using the following commands:\u5c06 repo \u62f7\u8d1d\u81f3/usr/local/bin \u5e76\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u4f7f\u5176\u53ef\u6267\u884c\uff1a\n\n\n\n\nsh\n  $ sudo cp repo /usr/local/bin\n  $ sudo chmod a+x /usr/local/bin/repo\n\n\nUncrustify\n\n\nUncrustify is a source code formatting tool used to maintain a consistent\ncoding style in the AllJoyn code base. It is not required to build AllJoyn,\nbut if you intend to contribute code changes to the AllJoyn project you should\nconfigure and use the tool.\nUncrustify \u662f\u4e00\u4e2a\u7528\u4e8e\u4fdd\u6301 AllJoyn \u4ee3\u7801\u5e93\u7f16\u7a0b\u98ce\u683c\u4e00\u81f4\u7684\u4ee3\u7801\u683c\u5f0f\u5de5\u5177\u3002\u8fd9\u4e0d\u662f\u6784\u5efa AllJoyn \u6240\u5fc5\u9700\u7684\uff0c\u4f46\u5982\u679c\u60a8\u5e0c\u671b\u5bf9 AllJoyn \u5de5\u7a0b\u7684\u4ee3\u7801\u8fdb\u884c\u6539\u52a8\uff0c\u60a8\u5e94\u8be5\u914d\u7f6e\u5e76\u4f7f\u7528\u8fd9\u4e2a\u5de5\u5177\u3002\n\n\n\u6ce8\u610f:\n Uncrustify v0.61 is required for AllJoyn v15.04 and\nlater. Earlier AllJoyn versions require uncrustify v0.57. Since the\nexisting AllJoyn code was formatted with a specific version of\nuncrustify, using any other version of uncrustify can cause unexpected\nbuild errors when not building with the WS=off option.\nUncrustify v0.61 \u652f\u6301 AllJoyn v15.05 \u548c\u66f4\u9ad8\u7248\u672c\u3002\u65e9\u8d77\u7248\u672c\u7684 AllJoyn \u9700\u8981 uncrustify v0.57\u3002\u7531\u4e8e\u4f7f\u7528\u4e86\u7279\u5b9a\u7248\u672c\u7684 uncrustify \u89c4\u5b9a\u4e86\u73b0\u6709 AllJoyn \u4ee3\u7801\u7684\u683c\u5f0f\uff0c\u5f53\u4e0d\u4f7f\u7528 WF\uff1dOFF \u9009\u9879\u6784\u5efa\u7a0b\u5e8f\u65f6\uff0c\u4f7f\u7528\u5176\u5b83\u7248\u672c\u7684 uncrustify \u53ef\u80fd\u4f1a\u9047\u5230\u4e0d\u53ef\u9884\u6599\u7684\u6784\u5efa\u9519\u8bef\u3002\n\n\nThere are two ways to install Uncrustify.\u6709\u4e24\u79cd\u65b9\u5f0f\u5b89\u88c5 Uncrustify\u3002\n\n\n\n\nDownload the source and then build and install Uncrustify:\u4e0b\u8f7d\u6e90\u5e76\u6784\u5efa\u548c\u5b89\u88c5 Uncrustify\uff1a\n\n\n\n\nsh\n   $ mkdir $HOME/uncrustify # for example\n   $ cd $HOME/uncrustify\n   $ git clone http://github.com/bengardner/uncrustify.git\n   $ # or use\n   $ #git clone git://uncrustify.git.sourceforge.net/gitroot/uncrustify/uncrustify\n   $ cd uncrustify\n   $ git checkout uncrustify-0.61\n   $ # or for v0.57:\n   $ #git checkout uncrustify-0.57\n   $ ./configure\n   $ sudo make install\n\n\n\u6ce8\u610f:\n In some cases, Uncrustify has failed to build on more recent\nUbuntu versions. Try making the following change to get\nUncrustify to build:\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0cUncrustify \u5728\u6700\u65b0\u7684 Ubuntu \u7248\u672c\u4e2d\u6784\u5efa\u4e0d\u6210\u529f\u3002\u8bd5\u7740\u8fdb\u884c\u4ee5\u4e0b\u6539\u53d8\u4ee5\u6784\u5efa Uncrustify\u3002\n\n\n```sh\n   diff --git a/src/uncrustify.cpp b/src/uncrustify.cpp index 2635189..7aba76d 100644\n   --- a/src/uncrustify.cpp\n   +++ b/src/uncrustify.cpp\n   @@ -32,6 +32,7 @@\n   #ifdef HAVE_STRINGS_H\n   #include \n /\n strcasecmp() \n/\n   #endif\n   +#include \n\n\n/\n Global data \n/\n   struct cp_data cpd;\n  ```\n\n\n\n\nInstall the Uncrustify v0.57 package on Ubuntu:\u5728 Ubuntu \u4e0a\u5b89\u88c5 Uncrustify v0.57 \u5305\u3002\n\n\nGo to: http://packages.ubuntu.com/precise/uncrustify.\u524d\u5f80 http://packages.ubuntu.com/precise/uncrustify\u3002\n\n\nFrom the website, click in the \"Download uncrustify\" table to select your machine's architecture.\u5728\u7f51\u7ad9\u4e2d\u70b9\u51fb \"Download uncrustify\" \u8868\u9009\u62e9\u60a8\u8bbe\u5907\u7684\u67b6\u6784\u3002\n\n\nFrom the page that opens after your selection, choose\n   a mirror based on your location, and download the .deb package. \u5728\u9009\u62e9\u540e\u6253\u5f00\u7684\u7f51\u9875\u4e2d\uff0c\u9009\u62e9\u4e00\u4e2a\u57fa\u4e8e\u60a8\u4f4d\u7f6e\u7684\u955c\u50cf\uff0c\u4e0b\u8f7d .deb \u5305\u3002\n\n\nInstall the package using either of these two commands, as appropriate:\u6839\u636e\u60c5\u51b5\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4efb\u4e00\u547d\u4ee4\u5b89\u88c5\u6b64\u5305\u3002\n\n\n\n\nsh\n   $ sudo dpkg -i uncrustify_0.57-1_amdd64.deb\n   $ sudo dpkg -i uncrustify_0.57-1_i386.deb\n\n   Uncrustify v0.61 packages are not currently available.\u76ee\u524d\u6682\u4e0d\u652f\u6301 Uncrustify v0.61\u3002\n\n\nDoxygen\n\n\nThe \nDoxygen tool\n builds HTML documentation from\nsource code. It is not required for building AllJoyn binaries.\n \nDoxygen tool\n\u4ece\u6e90\u4ee3\u7801\u751f\u6210 HTML \u6587\u6863\u3002\u5b83\u4e0d\u7528\u4e0e\u5efa\u7acb AllJoyn \u4ee3\u7801\u3002\n\n\nOpen a terminal window and run the following command:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\n$ sudo apt-get install doxygen\n\n\n\n\nGraphviz\n\n\nThe \nGraphviz Dot tool\n diagrams class hierarchies\nand is used by doxygen.\n\nGraphviz Dot tool\n\u628a\u7c7b\u7684\u5c42\u7ea7\u7ed3\u6784\u901a\u8fc7\u56fe\u6807\u5c55\u793a\u3002Doxygen \u4f1a\u4f7f\u7528\u5b83\u3002\n\n\nOpen a terminal window and run the following command:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\n$ sudo apt-get install graphviz\n\n\n\n\nTeX Live\n\n\nTeX Live\n provides LaTeX binaries\nand style sheets for Linux. This optional tool may be used to\nproduce AllJoyn's API documentation as a PDF document from\nthe source. It is possible to compile the AllJoyn framework\nwithout producing the documentation.\n\nTeX Live\n \u63d0\u4f9b LaTeX \u4e8c\u8fdb\u5236\u6587\u4ef6\u548c\u9488\u5bf9Linux\u7684\u6837\u5f0f\u8868\u3002\u8fd9\u4e2a\u53ef\u9009\u5de5\u5177\u53ef\u7528\u4e8e\u4ece\u6e90\u4e2d\u751f\u6210 PDF \u683c\u5f0f\u7684 AllJoyn API \u7684\u6587\u6863\u3002\u5f53\u7136\u4e0d\u751f\u6210\u6587\u6863\uff0c\u4e5f\u53ef\u4ee5\u7f16\u8bd1 AllJoyn \u67b6\u6784\u3002\nInstall TeX Live if you want to produce PDF documentation.\n\n\n$ sudo apt-get install texlive\n\n\n\n\nGecko SDK\n\n\nThe \nGecko SDK\n (aka XULRunner SDK)\nis only required if you are building the AllJoyn JavaScript\nplug-in. Otherwise, this section is optional.\n\nGecko SDK\n\uff08\u53c8\u540d XULRunner SDK\uff09\u4ec5\u5728\u6784\u5efa AllJoyn JavaScript \u63d2\u4ef6\u65f6\u662f\u5fc5\u987b\u7684\u3002\u5bf9\u4e8e\u5176\u4ed6\u60c5\u51b5\uff0c\u8fd9\u4e2a\u90e8\u5206\u662f\u53ef\u9009\u7684\u3002\n\n\nThe plug-in was developed against version 1.9.2 of the SDK,\nalthough it may be possible to use an earlier version.\nOn 64-bit Linux, download the 32-bit version anyway (only\nthe headers in the SDK are used).\n\u63d2\u4ef6\u662f\u9488\u5bf9 1.9.2 \u7248\u672c\u5f00\u53d1\u7684\uff0c\u5c3d\u7ba1\u5b83\u4e5f\u53ef\u80fd\u9002\u7528\u4e8e\u66f4\u65e9\u7684\u7248\u672c\u3002\u5728 64 \u4f4d\u7684 Linux \u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4e0b\u8f7d 32 \u4f4d\u7684\u7248\u672c\u3002\uff08\u56e0\u4e3a\u53ea\u662f\u7528\u4e86 SDK \u7684\u6807\u5934\uff09\n\n\nInstall Java \u5b89\u88c5 Java\n\n\nJava 6 or greater may be used to build the AllJoyn framework\non a Linux platform.\n\u4f7f\u7528 Java 6 \u6216\u66f4\u9ad8\u7248\u672c\u6784\u5efa\u57fa\u4e8e Linux \u5e73\u53f0\u7684 AllJoyn \u67b6\u6784\u3002\n\n\n\u91cd\u8981:\n Using apt-get install java will download open-jdk not\nsun-jdk. The AllJoyn framework requires sun-jdk. \u4f7f\u7528 apt-get \u5b89\u88c5 java \u5c06\u4e0b\u8f7d open-jdk \u800c\u4e0d\u662f sun-jdk\u3002AllJoyn \u67b6\u6784\u9700\u8981\u4f7f\u7528 sun-jdk\u3002\n\n\nInstall Java using one of these two mechanisms.\u4f7f\u7528\u4efb\u4e00\u4ee5\u4e0b\u4e24\u79cd\u673a\u5236\uff0c\u5b89\u88c5 Java\u3002\n\n\nInstalling Java 6 when older than Ubuntu 12.04 \u5728 Ubuntu 12.04 \u6216\u66f4\u65e9\u7248\u672c\u4e0a\u5b89\u88c5 Java 6\n\n\n\n\nInstall Java 6 \u5b89\u88c5 Java 6\n\n\n\n\nsh\n      $ sudo add-apt-repository \"deb http://archive.ubuntu.com/ubuntu lucid partner\"\n      $ sudo apt-get update\n      $ sudo apt-get install sun-java6-jdk\n\n\n\n\nInstall junit 3.8 or newer (junit is required when building\nthe AllJoyn Java bindings).\u5b89\u88c5 junit 3.8\u6216\u66f4\u65b0\u7248\u672c\uff08\u9700\u8981\u4f7f\u7528 junit \u6784\u5efa AllJoyn Java \u7ed1\u5b9a\uff09\n\n\nNavigate to (https://github.com/junit-team/junit/wiki/Download-and-Install).\u5bfc\u822a\u81f3 (https://github.com/junit-team/junit/wiki/Download-and-Install)\u3002\n\n\nDownload the jar file \"junit-4.9.jar\". \u4e0b\u8f7d jar \u6587\u4ef6 \"junit-4.9.jar\"\u3002\n\n\n\n\nCopy it to usr/share/java/junit-4.9 from the Downloads folder: \u4ece\u4e0b\u8f7d\u6587\u4ef6\u5939\u5c06\u5176\u62f7\u8d1d\u81f3 usr/share/java/junit-4.9\u3002\n\n\nsh\n     $ sudo cp junit-4.9.jar /usr/share/java/\n\n\n\n\n\n\nIf you want to run junit tests, install the Apache Ant build\ntool (only required to run junit tests, not required to build the\nAllJoyn framework).\n\u5982\u679c\u60a8\u60f3\u8981\u8fd0\u884c junit \u6d4b\u8bd5\uff0c\u5b89\u88c5 Apache Ant \u6784\u5efa\u5de5\u5177\uff08\u4ec5\u7528\u4e8e\u8fd0\u884c junit tests\uff0c\u4e0d\u80fd\u7531\u4e8e\u6784\u5efa Alljoyn\u67b6\u6784\uff09\n\n\n\n\n\n\nsh\n      $ sudo apt-get install ant\n\n\nInstalling Java 6 when using Ubuntu 12.04 or newer \u5728 Ubuntu 12.04 \u6216\u66f4\u65b0\u7248\u672c\u4e0a\u5b89\u88c5 Java 6\n\n\nWith the Ubuntu 12.04 Precise Pangolin release, partner\nrepositories are no longer available. You must manually\ninstall Java using the following instructions:\n\u5728 Ubuntu 12.04 Precise Pangolin \u7248\u672c\u4e2d\uff0c\u4e0d\u518d\u652f\u6301 partner \u6587\u4ef6\u5939\u3002\u60a8\u5fc5\u987b\u6839\u636e\u4ee5\u4e0b\u6307\u5bfc\u624b\u52a8\u5b89\u88c5 Java\u3002\n\n\n\n\n\n\nDownload the JDK bin file corresponding to your cpu type\n(x86 or x64) from Java SE 6u32 Downloads.\u4ece Java SE 6u32 Downloads \u4e2d\uff0c\u6839\u636e\u76f8\u5e94 cpu \u7c7b\u578b\uff0c\u4e0b\u8f7d JDK bin \u6587\u4ef6\u3002\n\n\n\n\n\n\nUse chmod to make the file executable: \u4f7f\u7528 chmod \u8ba9\u6587\u4ef6\u53ef\u6267\u884c\uff1a\n\n\n\n\n\n\nsh\n      $ chmod +x jdk-6u32-linux-x64.bin\n\n\n\n\nExtract the bin file: \u89e3\u538b\u7f29 bin \u6587\u4ef6\uff1a\n\n\n\n\nsh\n      $ ./jdk-6u32-linux-x64.bin\n\n\n\n\nMove extracted folder to /usr/lib/jvm/: \u628a\u89e3\u538b\u7f29\u7684\u6587\u4ef6\u5939\u79fb\u52a8\u5230 /usr/lib/jvm/\uff1a\n\n\n\n\nsh\n      $ sudo mv jdk1.6.0_32 /usr/lib/jvm/\n\n\n\n\nAdd the newly installed Java to the list of alternatives:\u628a\u65b0\u5b89\u88c5\u7684 Java \u52a0\u5165\u9009\u62e9\u5217\u8868\uff1a\n\n\n\n\nsh\n      $ sudo update-alternatives --install /usr/bin/javac javac\n      /usr/lib/jvm/jdk1.6.0_32/bin/javac 2\n      $ sudo update-alternatives --install /usr/bin/java java\n      /usr/lib/jvm/jdk1.6.0_32/bin/java 2\n      $ sudo update-alternatives --install /usr/bin/javaws javaws\n      /usr/lib/jvm/jdk1.6.0_32/bin/javaws 2\n\n\n\n\nChoose default Java: \u9009\u62e9\u9ed8\u8ba4 Java\uff1a\n\n\n\n\nsh\n      $ sudo update-alternatives --config javac\n      $ sudo update-alternatives --config java\n      $ sudo update-alternatives --config javaws\n\n\n\n\nCheck Java version to verify it is installed correctly: \u68c0\u67e5 Java \u7248\u672c\u4ee5\u786e\u8ba4\u5b83\u88ab\u6b63\u786e\u5b89\u88c5\uff1a\n\n\n\n\nsh\n      $ java -version\n\n\nIt should return something similar to: \u4f1a\u8fd4\u56de\u7c7b\u4f3c\u8fd9\u6837\u8bed\u53e5\uff1a\n\n\nsh\n      java version \"1.6.0_26\"\n      Java(TM) SE Runtime Environment (build 1.6.0_26-b03)\n      Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)\n\n\n\n\nVerify the symlinks all point to the new Java location:\u9a8c\u8bc1\u6240\u6709\u6307\u5411\u65b0 Java \u4f4d\u7f6e\u7684 symlinks\u3002\n\n\n\n\nsh\n      $ ls -la /etc/alternatives/java*\n\n\n\n\n\n\n(Optional, but recommended) Enable Java plug-in for Mozilla\nFirefox (even for Chrome).\uff08\u53ef\u9009\uff0c\u4f46\u5efa\u8bae\uff09\u5728 Mozilla Firefox \uff08\u6216\u662f Chrome\uff09\u4e2d\uff0c\u5f00\u542f\u63d2\u4ef6\u529f\u80fd\u3002\n\n\n\n\n\n\nFor 64-bit jdk: \u4e3a 64 \u4e3a jdk\uff1a\n\n\nsh\n     $ sudo update-alternatives --install \\\n     /usr/lib/mozilla/plugins/libjavaplugin.so mozilla-javaplugin.so \\\n     /usr/lib/jvm/jdk1.6.0_32/jre/lib/amd64/libnpjp2.so 2\n     $ sudo update-alternatives --config mozilla-javaplugin.so\n\n\n\n\n\n\nFor 32-bit jdk\uff1a \u4e3a 32 \u4e3a jdk\uff1a\n\n\nsh\n     $ sudo update-alternatives --install \\\n     /usr/lib/mozilla/plugins/libjavaplugin.so mozilla-javaplugin.so \\\n     /usr/lib/jvm/jdk1.6.0_32/jre/lib/i386/libnpjp2.so 2\n     $ sudo update-alternatives --config mozilla-javaplugin.so\n\n\n\n\n\n\nTest the Java web plug-in by going to http://www.java.com/en/download/testjava.jsp.\u901a\u8fc7\u8bbf\u95ee http://www.java.com/en/download/testjava.jsp \u6d4b\u8bd5 Java web \u63d2\u4ef6\u3002\n\n\n\n\nInstall junit 3.8 or newer (junit is required when building\nthe AllJoyn Java bindings).\u5b89\u88c5 junit 3.8 \u6216\u66f4\u9ad8\u7248\u672c\uff08\u9700\u8981 junit \u5efa\u7acb AllJoyn Java \u7ed1\u5b9a\uff09\n\n\nNavigate to https://github.com/junit-team/junit/wiki/Download-and-Install.\u5bfc\u822a\u81f3 https://github.com/junit-team/junit/wiki/Download-and-Install\u3002\n\n\nDownload the jar file \"junit-4.9.jar\" and copy it to\n   usr/share/java/junit-4.9 from the Downloads folder:\u4e0b\u8f7d jar \u6587\u4ef6 \"junit-4.9.jar\" \u5e76\u5c06\u5176\u4ece Downloads \u6587\u4ef6\u5939\u62f7\u8d1d\u81f3 usr/share/java/junit-4.9\u3002\n\n\n\n\nsh\n      $ sudo cp junit-4.9.jar /usr/share/java/\n\n\n\n\nIf you want to run junit tests, install the Apache Ant build\ntool (only required to run junit tests, not required to build\nthe AllJoyn framework).\u5982\u679c\u60a8\u60f3\u8981\u8fd0\u884c junit \u6d4b\u8bd5\uff0c\u5b89\u88c5 Apache Ant \u6784\u5efa\u5de5\u5177\uff08\u4ec5\u7528\u4e8e\u8fd0\u884c junit tests\uff0c\u4e0d\u80fd\u7531\u4e8e\u6784\u5efa Alljoyn\u67b6\u6784\uff09\u3002\n\n\n\n\nsh\n      $ sudo apt-get install ant\n\n\ngoogletest\n\n\nGoogle Test is Google's framework for writing C++ tests.\nGoogle Test is an xUnit testing architecture used by the\nAllJoyn framework to test its C++ APIs. Google Test is optional,\nbut is required for building the C++ unit tests.\nGoogle Test \u662f Google \u7528\u4e8e\u7f16\u5199 C++ \u6d4b\u8bd5\u7684\u67b6\u6784\u3002Google Test \u662f AllJoyn \u67b6\u6784\u7528\u4e8e\u6d4b\u8bd5\u5176 API \u7684\u4e00\u79cd xUnit \u6d4b\u8bd5\u7ed3\u6784\u3002Google Test \u662f\u53ef\u9009\u7684\uff0c\u4f46\u5728\u5efa\u7acb C++ \u5355\u5143\u6d4b\u8bd5\u65f6\u662f\u5fc5\u9700\u7684\u3002\n\n\n\n\nOpen a browser and navigate to http://code.google.com/p/googletest/downloads/list.\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5bfc\u822a\u81f3 http://code.google.com/p/googletest/downloads/list\u3002\n\n\nFrom the googletest download page, download gtest-1.7.0.zip.\u4ece googletest \u4e0b\u8f7d\u9875\u9762\uff0c\u4e0b\u8f7d gtest-1.7.0.zip\u3002\n\n\nUnzip the contents of gtest-1.7.0.zip to a known location\n(e.g., $HOME/gtest/gtest-1.7.0).\u89e3\u538b\u7f29 gtest-1.7.0.zip \u7684\u5185\u5bb9\u5230\u5df2\u77e5\u4f4d\u7f6e\uff08\u5982 $HOME/gtest/gtest-1.7.0\uff09\n\n\n\n\n\u91cd\u8981:\n Do not use apt-get install libgtest-dev. Download\nthe source code from code.google.com.\u4e0d\u8981\u4f7f\u7528 apt-install \u5b89\u88c5 libgtest-dev\u3002\u4ece code.google.com \u4e0b\u8f7d\u6e90\u4ee3\u7801\u3002\n\n\nObtain the AllJoyn source \u83b7\u53d6 AllJoyn \u6e90\n\n\n$ cd $HOME\n$ export AJ_ROOT = `pwd`/alljoyn # for example\n$ git clone https://git.allseenalliance.org/gerrit/core/alljoyn.git\n\n$AJ_ROOT/core/alljoyn\n\n\n\n\nBuilding the AllJoyn Framework \u5efa\u7acb AllJoyn \u67b6\u6784\n\n\nUse the following commands to build the AllJoyn framework for Linux.\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5efa\u7acb\u9488\u5bf9 Linux \u7684 AllJoyn \u67b6\u6784\u3002\n\n\n$ export JAVA_HOME=\n/usr/lib/jvm/java-6-sun\n # or java-1.5.0-sun\n$ export CLASSPATH=\n/usr/share/java/junit4.9.jar\n # for building Java binding\n$ export GECKO_BASE=~/xulrunner-sdk # for building Javascript binding\n$ cd $AJ ROOT/core/alljoyn\n\n\n\n\nFor 32-bit:\u5bf9\u4e8e 32 \u4f4d\uff1a\n\n\n$ scons BINDINGS=\ncomma separated list(cpp,java,c,js)\n\n\n   ex) $ scons BINDINGS=\ncpp,java\n\n\n\n\n\nFor 64-bit:\u5bf9\u4e8e 64 \u4f4d\uff1a\n\n\n$ scons CPU=x86_64 BINDINGS=\ncomma separated list (cpp,java,c,js)\n\n\n   ex) $ scons CPU=x86_64 BINDINGS=\ncpp,java\n\n\n\n\n\n\u6ce8\u610f:\n For a full list of SCons command line options to build\nthe AllJoyn framework, enter \nscons -h\n.\u9700\u8981\u4f7f\u7528 SCons \u547d\u4ee4\u7684\u5b8c\u5168\u5217\u8868\u4ee5\u5efa\u7acb AllJoyn \u67b6\u6784\uff0c\u8f93\u5165 \nscons -h\n\u3002\n\n\n\u6ce8\u610f:\n Use the SCons variable \nBINDINGS\n to list the language\nbindings for which you would like to build. To limit the build\nto just C++, for example, use BINDINGS=cpp. Use a comma-separated\nlist for multiple bindings. For example, to build for Java and\nC++, use  BINDINGS=java,cpp.\n\u4f7f\u7528 SCons \u53d8\u91cf \nBINDINGS\n \u5217\u51fa\u60a8\u60f3\u8981\u5efa\u7acb\u7684\u8bed\u8a00\u7ed1\u5b9a\u3002\u4e3e\u4f8b\u8bf4\u660e\uff0c\u4e3a\u4e86\u9650\u5236\u4ec5\u4f7f\u7528 C++ \u6784\u5efa,\u4f7f\u7528 BINGDINGS=cpp.\u5728\u7ed1\u5b9a\u591a\u4e2a\u8bed\u8a00\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u9694\u3002\u4e3e\u4f8b\u8bf4\u660e\uff0c\u4f7f\u7528 Java \u548c C++\uff0c\u90a3\u4e48 BINGDINGS=java,cpp\u3002\n\n\nN\u6ce8\u610f\n\n\n\n\nThe path specified for the CLASSPATH environment variable\nis the full path name to the junit jar file that was downloaded earlier.CLASSPATH \u73af\u5883\u53d8\u91cf\u6307\u5b9a\u7684\u8def\u5f84\u662f\u4e4b\u524d\u4e0b\u8f7d\u7684 junit jar \u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\u540d\u3002\n\n\nThe path specified for the JAVA HOME environment variable\nis the path to the jdk directory.JAVA HOME \u73af\u5883\u53d8\u91cf\u6307\u5b9a\u7684\u8def\u5f84\u662f jdk \u6587\u4ef6\u5939\u7684\u8def\u5f84\u3002\n\n\nFor building Javascript on both Linux and Windows, we need\nthe GECKO_BASE while building the AllJoyn framework. \u4e3a\u4e86\u5728 Linux \u548c Windows \u4e0a\u5efa\u7acb Javascript\uff0c\u6211\u4eec\u5728\u5efa\u7acb AllJoyn \u67b6\u6784\u65f6\u9700\u8981 GECKO_BASE\u3002\n\n\nIf you are building a version older than AllJoyn framework\n2.6, CPU=x86-64 will be required to build a 64-bit version of the AllJoyn framework.\u5982\u679c\u60a8\u4f7f\u7528\u65e9\u4e8e AllJoyn \u67b6\u6784 2.6 \u7248\u672c\u6765\u5efa\u7acb\uff0c\u90a3\u4e48\u60a8\u9700\u8981 CPU=x86-64 \u5efa\u7acb\u4e00\u4e2a 64 \u4f4d\u7248\u672c\u7684 AllJoyn \u67b6\u6784\u3002\n\n\n\n\nPossible build errors \u53ef\u80fd\u7684\u6784\u5efa\u9519\u8bef\n\n\n\" ImportError: No module named argparse\"\n reported when reading\n\n\"File \"../build_core/tools/bin/whitespace.py\", line 18\".\n\nPython does not have the argparse module installed (versions of\npython 2.7.1 or newer have it installed by default).\n\n\n$ sudo apt-get install python-setuptools\n$ sudo easy_install argparse\n\n\n\n\nBuild the API documentation \u5efa\u7acb API \u6587\u6863\n\n\nBy default, the AllJoyn API documentation is not built during\nthe build stage (except for Java Docs). To build the API\ndocumentation use the following commands:\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cAllJoyn API \u6587\u6863\u4e0d\u4f1a\u5728\u6784\u5efa\u8fc7\u7a0b\u4e2d\u5efa\u7acb\uff08\u9664 Java \u6587\u6863\u4e4b\u5916\uff09\u3002\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5efa\u7acb API \u6587\u6863\uff1a\n\n\n$ scons DOCS=html\n$ scons DOCS=pdf\n\n\n\n\nThe documentation will be placed in \n/alljoyn_core/docs/html\nor \n/alljoyn_core/docs/latex. \u6587\u6863\u5c06\u4f1a\u653e\u7f6e\u5728 \n/alljoyn_core/docs/html\n\u6216 \n/alljoyn_core/docs/latex.\n\n\n\n\nOpen \n/alljoyn_core/docs/html/index.html in a web\nbrowser to view the documentation. \u67e5\u9605\u6587\u6863\uff0c\u8bf7\u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00 \n/alljoyn_core/docs/html/index.html\n\n\nOpen \n/alljoyn_core/docs/refman.pdf in a PDF viewer\nto view the PDF documentation. \u67e5\u9605 PDF \u6587\u6863\uff0c\u8bf7\u901a\u8fc7 PDF \u6d4f\u89c8\u5668\u6253\u5f00 \n/alljoyn_core/docs/refman.pdf\u3002\n\n\n\n\nWhitespace policy checker \u7a7a\u767d\u7b26\u89c4\u5219\u68c0\u67e5\u5668\n\n\nBy default, the whitespace policy checker does not run. If you are\ncontributing changes to AllJoyn, you should run your builds with the\nwhitespace checker enabled:\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7a7a\u767d\u7b26\u89c4\u5219\u68c0\u67e5\u5668\u4e0d\u8fd0\u884c\u3002\u5982\u679c\u60a8\u6b63\u5728\u5bf9 AllJoyn \u7684\u66f4\u6539\uff0c\u60a8\u5e94\u8be5\u5f00\u542f\u7a7a\u767d\u7b26\u89c4\u5219\u68c0\u67e5\u5668\u8fd0\u884c\u60a8\u4fee\u6539\u7684\u7a0b\u5e8f\u3002\n\n\n$ scons WS=check\n\n\n\n\nIf the whitespace policy checker reports a whitespace policy\nviolation, it lists which files have the violation. To see the\nlines of code that are violating the AllJoyn whitespace policy, run:\n\u5982\u679c\u7a7a\u767d\u7b26\u89c4\u5219\u68c0\u67e5\u5668\u62a5\u544a\u4e86\u4e00\u9879\u8fdd\u89c4\uff0c\u5b83\u4f1a\u5217\u51fa\u662f\u54ea\u4e2a\u6587\u4ef6\u8fdd\u89c4\u4e86\u3002\u4e3a\u4e86\u627e\u5230\u8fdd\u53cd\u4e86 AllJoyn \u7a7a\u767d\u7b26\u89c4\u5219\u7684\u6bb5\u843d\uff0c\u8fd0\u884c\uff1a\n\n\n$ scons WS=detail\n\n\n\n\nUncrustify can automatically fix your files to adhere to the whitespace policy.\nUncrustify \u80fd\u591f\u6839\u636e\u7a7a\u767d\u7b26\u89c4\u5219\u81ea\u52a8\u4fee\u590d\u60a8\u7684\u6587\u4ef6\u3002\n\n\n$ scons WS=fix\n\n\n\n\nBuild variant \u5efa\u7acb\u53d8\u91cf\n\n\nBy default, the AllJoyn framework builds the debug variant. To build\nthe release version of the AllJoyn framework, use this:\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cAllJoyn \u67b6\u6784\u5efa\u7acb debug \u53d8\u91cf\u3002\u5efa\u7acb\u53d1\u884c\u7248\u672c\u7684 AllJoyn \u67b6\u6784\uff0c\u4f7f\u7528\uff1a\n\n\n$ scons VARIANT=release\n\n\n\n\nBindings option Bindings \u9009\u9879\n\n\nThe default SCons script tries to build all of the language bindings\nby default. If you are only interested in a particular language binding,\nthe \nBINDINGS\n option can be used to select the language(s) of interest.\n\u9ed8\u8ba4 SCons \u811a\u672c\u91c7\u7528\u9ed8\u8ba4\u65b9\u5f0f\u5efa\u7acb\u6240\u6709\u7684\u8bed\u8a00\u7ed1\u5b9a\u3002\u5982\u679c\u60a8\u53ea\u5bf9\u67d0\u4e00\u79cd\u8bed\u8a00\u7ed1\u5b9a\u6709\u610f\u5411\uff0c\nBINDINGS\n \u9009\u9879\u53ef\u4f9b\u60a8\u9009\u62e9\u60a8\u5e0c\u671b\u7684\u8bed\u8a00\u3002\n\n\nThe \nBINDINGS\n option takes a comma-separated list of languages you\nwish to build. Current valid languages are cpp, c, java, and js. The language is\nalways specified in all lower case with no extra spaces between languages. If a\ndependency is not listed, the dependency will automatically be built. For\nexample, java requires that cpp is built. If an empty string is used only the\ncore files will be built.\n\nBINDINGS\n \u9009\u9879\u53ef\u4ee5\u7528\u4f7f\u7528\u9017\u53f7\u5217\u51fa\u60a8\u6240\u5e0c\u671b\u7528\u4e8e\u6784\u5efa\u7684\u591a\u79cd\u8bed\u8a00\u3002\u76ee\u524d\uff0c\u652f\u6301\u7684\u8bed\u8a00\u6709 cpp,c,java \u548c js\u3002\u8bed\u8a00\u5fc5\u987b\u91c7\u7528\u5c0f\u5199\u5f62\u5f0f\uff0c\u5e76\u4e14\u8bed\u8a00\u4e4b\u95f4\u4e0d\u80fd\u6709\u7a7a\u683c\u3002\u5982\u679c\u4f9d\u8d56\u9879\u6ca1\u6709\u88ab\u5217\u51fa\uff0c\u5b83\u4eec\u4e5f\u4f1a\u81ea\u52a8\u88ab\u5efa\u7acb\u3002\u4e3e\u4f8b\u8bf4\u660e\uff0cjava \u9700\u8981\u4ee5 cpp \u7684\u5efa\u7acb\u4e3a\u57fa\u7840\u3002\u5982\u679c\u4f7f\u7528\u4e86\u7a7a\u767d\u5b57\u6bb5\uff0c\u4ec5\u4f1a\u5efa\u7acb\u6838\u5fc3\u6587\u4ef6\u3002\n\n\nFor example:\u4e3e\u4f8b\uff1a\n\n\n$ scons BINDINGS=java #this will build core files and Java language bindings\n$ scons BINDINGS=c,java #this will build C language bindings and Java language bindings\n$ scons BINDINGS= #only build the core files alljoyn_core and common\n\n\n\n\nCrypto option Crypto \u9009\u9879\uff1a\n\n\nAllJoyn v15.04 adds a CRYPTO option to the scons command line. To build AllJoyn\nwithout dependencies on OpenSSL libcrypto, use CRYPTO=builtin:\nAllJoyn v15.04 \u5728 scons \u547d\u4ee4\u884c\u4e2d\u52a0\u5165\u4e86 CRYPTO \u9009\u9879\u3002\u4f7f\u7528 CRYPTO=builtin\uff0c\u80fd\u591f\u9664\u53bb OpenSSL \u7684\u4f9d\u8d56\uff0c\u8fdb\u884c AllJoyn \u7684\u6784\u5efa\u3002\n\n\n$ scons CRYPTO=builtin\n\n\n\n\nTo use crypto implementations in OpenSSL:\u4f7f\u7528 OpenSSl \u63d0\u4f9b\u7684\u52a0\u5bc6\u65b9\u5f0f\uff1a\n\n\n$ scons CRYPTO=openssl\n\n\n\n\nPolicyDB option PolicyDB \u9009\u9879\n\n\nAllJoyn v14.06 provides functionality that\ncan be compiled into AllJoyn routers that acts as firewall/filter\nfor delivering messages. The POLICYDB option controls whether this\nfunctionality is included or not. It can be set to either on or off.\n\n\nThe default policy rules are for the AllJoyn router to behave as\nthough PolicyDB is excluded. The default is to not include PolicyDB.\n\n\nExample:\n\n\n$ scons POLICYDB=on\n\n\n\n\nBuild C++ unit tests \u5efa\u7acb C++ \u5355\u5143\u6d4b\u8bd5\n\n\nThe AllJoyn framework now includes a set of unit tests that\nare built using the Google Test C++ framework. To build the\nunit test, the location of the Google Test source code must\nbe specified as explained in googletest. Use the GTEST_DIR\noption to specify the location of the Google Test source code.\nAllJoyn \u67b6\u6784\u76ee\u524d\u81ea\u5e26\u4e86\u4e00\u5957\u4f7f\u7528 Google Test C++ \u67b6\u6784\u7684\u5355\u5143\u6d4b\u8bd5\u3002\u4e3a\u4e86\u5efa\u7acb\u5355\u5143\u6d4b\u8bd5\uff0c\u5fc5\u987b\u5982 googletest \u4e2d\u63d0\u5230\u6307\u5b9a Google Test \u6e90\u4ee3\u7801\u7684\u4f4d\u7f6e\u3002\u4f7f\u7528 GTEST_DIR \u9009\u9879\u6307\u5b9a Google Test \u6e90\u4ee3\u7801\u7684\u4f4d\u7f6e\u3002\n\n\nExample:\u793a\u4f8b\uff1a\n\n\n$ scons GTEST_DIR=$HOME/gtest/gtest-1.7.0\n\n\n\n\nRunning the AllJoyn Applications \u8fd0\u884c AllJoyn \u5e94\u7528\u7a0b\u5e8f\n\n\n\u6ce8\u610f:\n For v2.6 and onward, Bundled Router mode only.\u5bf9\u4e8e v2.6 \u548c\u66f4\u9ad8\u7248\u672c\uff0c\u4ec5\u6709 Bundled Router \u6a21\u5f0f\u3002\n\n\nTo ensure that the Linux development platform is set up\ncorrectly, use the instructions in this section to run\nthe AllJoyn router.\n\u4e3a\u4e86\u4fdd\u8bc1 Linux \u5f00\u53d1\u5e73\u53f0\u88ab\u6b63\u786e\u5730\u5efa\u7acb\uff0c\u4f7f\u7528\u672c\u7ae0\u7684\u6307\u5bfc\u8fd0\u884c AllJoyn \u8def\u7531\u3002\n\n\nWith the release of AllJoyn v2.6, running a separate standalone\nrouter (alljoyn-daemon) is no longer required. All of the\nfunctionality of the router can now be built into each individual\napplication, which means:\n\u968f\u7740 AllJoyn v2.6 \u7684\u53d1\u5e03\uff0c\u4e0d\u518d\u80fd\u591f\u8fd0\u884c\u5206\u79bb\u7684\u72ec\u7acb\u8def\u7531\uff08alljoyn-daemon\uff09\u3002\u6240\u6709\u7684\u8def\u7531\u7a0b\u5e8f\u73b0\u5728\u53ef\u4ee5\u88ab\u52a0\u5165\u4efb\u4f55\u4e00\u4e2a\u72ec\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u610f\u5473\u7740\uff1a\n\n\n\n\nUsers of your program no longer need to install and run a\nbackground service (daemon) to run a program that uses the AllJoyn framework.\n\u60a8\u7684\u7528\u6237\u4e0d\u518d\u9700\u8981\u5b89\u88c5\u548c\u8fd0\u884c\u540e\u53f0\u670d\u52a1\uff08\u5b88\u62a4\u8fdb\u7a0b\uff09\u6765\u8fd0\u884c\u4f7f\u7528 AllJoyn \u67b6\u6784\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n\n\nEach application that you run will have its own built-in router.\n\u6bcf\u4e00\u4e2a\u60a8\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u6709\u4e00\u4e2a\u5b83\u4eec\u81ea\u5df1\u7684\u5185\u7f6e\u8def\u7531\u3002\n\n\n\n\n\n\nOn the command line, type the following commands to run\nthe AllJoyn application:\u5728\u547d\u4ee4\u884c\u4e2d\uff0c\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u8fd0\u884c AllJoyn \u5e94\u7528\u7a0b\u5e8f\uff1a\n\n\n\n\n\n\nsh\n      $ cd \nworkspace\n/build/{OS}/{CPU}/{VARIANT}/dist/cpp/bin\n      {OS} = linux\n      {CPU} = x86 or x86-64\n      {VARIANT} = debug or release\n      $ ./bbservice -n com.test\n\n\n\n\nOpen another tab and type the following commands to run\nanother application:\u6253\u5f00\u53e6\u4e00\u4e2a\u6807\u7b7e\u5e76\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u8fd0\u884c\u53e6\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n\n\nsh\n      $ cd \nworkspace\n/build/{OS}/{CPU}/{VARIANT}/dist/cpp/bin\n      $ ./bbclient -n com.test -d\n\n\n\n\nCheck for the following output on bbclient:\u5728 bbclient \u4e0a\u68c0\u67e5\u4ee5\u4e0b\u8f93\u51fa\uff1a\n\n\n\n\nsh\n      Sending \"Ping String 1\" to org.alljoyn.alljoyn_test.my_ping synchronously\n         org.alljoyn.alljoyn_test.my_ping ( path=/org/alljoyn/alljoyn_test ) returned\n         \"Ping String 1\"\n\n\nAllJoyn router command line executable AllJoyn \u8def\u7531\u547d\u4ee4\u884c\u53ef\u6267\u884c\n\n\n\u6ce8\u610f:\n Applies only to versions before 2.6.\u4ec5\u5bf9 2.6 \u4e4b\u524d\u7684\u7248\u672c\u751f\u6548\u3002\n\n\nThe concept of bundling a router with the application was\nintroduced in v2.6. Prior to this version, to run any AllJoyn\napplication, you needed to run the alljoyn-daemon first.\nv2.6 \u4e2d\u5f15\u5165\u4e86\u8def\u7531\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7ed1\u5b9a\u7684\u6982\u5ff5\u3002\u5728\u6b64\u7248\u672c\u4e4b\u524d\uff0c\u5728\u8fd0\u884c AllJoyn \u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u60a8\u9700\u8981\u9996\u5148\u8fd0\u884c alljoyn-daemon\u3002\n\n\nAs part of the build process, an executable for the alljoyn-daemon is built.\u4f5c\u4e3a\u751f\u6210\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u5efa\u7acb\u4e86 alljoyn-daemon \u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\n\n\n\n\nOn the command line, type the following commands to run\nthe AllJoyn router as a separate process:\u5728\u547d\u4ee4\u884c\u4e2d\uff0c\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff0c\u4ee5\u5206\u79bb\u8fdb\u7a0b\u8fd0\u884c AllJoyn router\u3002\n\n\n\n\nsh\n      $ cd \nworkspace\n/build/{OS}/{CPU}/{VARIANT}/dist/cpp/bin\n      $ ./alljoyn-daemon --internal\n\n   The options for the variables are as follows:\u53d8\u91cf\u7684\u53ef\u9009\u9879\u5982\u4e0b\uff1a\n\n\n{OS} = linux\n   {CPU} = x86 or x86-64\n   {VARIANT} = debug or release\n\n\nThis starts the AllJoyn router with a built-in default\n   configuration. For most users the command listed is sufficient\n   to run the AllJoyn framework.\n   \u6b64\u65b9\u6cd5\u91c7\u7528\u9ed8\u8ba4\u914d\u7f6e\u5f00\u542f AllJoyn \u8def\u7531\u3002\u5bf9\u4e8e\u5927\u90e8\u5206\u7528\u6237\uff0c\u4ee5\u4e0a\u7684\u547d\u4ee4\u8db3\u591f\u8fd0\u884c AllJoyn \u67b6\u6784\u3002\n\n\n\n\nPress \nCtrl-c\n at any time to stop the alljoyn-daemon process.\u4efb\u610f\u65f6\u523b\u6309\u4e0b \nCtrl-c\n \u505c\u6b62 alljoyn-daemon \u8fdb\u7a0b\u3002\n\n\nTo display other options, type the following:\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u663e\u793a\u5176\u4ed6\u9009\u9879\uff1a\n\n\n\n\n```sh\n      $ ./alljoyn-daemon -h\n\n\n  alljoyn-daemon [--config-file=FILE] [--print-address]\n  [--verbosity=LEVEL] [--no-bt] [--version]\n\n     --config-file=FILE\n        Use the specified configuration file.\n\n     --print-address\n        Print the socket address to STDOUT.\n\n     --no-bt\n        Disable the Bluetooth transport (override config file setting).\n\n     --verbosity=LEVEL\n        Set the logging level to LEVEL.\n\n     --version\n        Print the version and copyright string, and exit.\n\n\n\n```\n\n\nFor examples of different configuration files, see examples in:\u4ece\u4ee5\u4e0b\u4f4d\u7f6e\u83b7\u5f97\u4e0d\u540c\u914d\u7f6e\u6587\u4ef6\u7684\u793a\u4f8b\uff1a\n\n\nworkspace\n/alljoyn_core/daemon/test/conf.\n\n\n\n\n\u6ce8\u610f:\n Not all configuration files found in the daemon/test/conf\ndirectory are valid for use on a computer running Linux. \u4e0d\u662f\u6240\u6709\u5728 daemon/test/conf \u6587\u4ef6\u5939\u4e2d\u7684\u914d\u7f6e\u6587\u4ef6\u9002\u7528\u4e8e\u8fd0\u884c Linux \u7684\u7535\u8111\u3002\n\n\nVerify that the router is running \u9a8c\u8bc1\u8def\u7531\u6b63\u5728\u5de5\u4f5c\n\n\nNavigate to the projects samples directory and run the service\nand the client as follows:\u5bfc\u822a\u81f3\u5de5\u7a0b\u793a\u4f8b\u76ee\u5f55\u5e76\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u670d\u52a1\u548c\u5ba2\u6237\u7aef\uff1a\n\n\n$ cd \nworkspace\n/build/{OS}/{CPU}/{VARIANT}/dist/cpp/bin/samples\n$ ./basic_service \n #this will be a background process; it could be run on its own command-line\n$ ./basic_client\n\n\n\n\nWhen the client runs, the following will display:\u5f53\u5ba2\u6237\u7aef\u5728\u8fd0\u884c\u65f6\uff0c\u4f1a\u663e\u793a\u4e0b\u8ff0\u8bed\u53e5\uff1a\n\n\nAllJoyn Library version: v2.6.0\nAllJoyn Library build info: Alljoyn Library v2.6.0\n   (Built Wed Sep 02 23:30:23 UTC 2012\nInterface Created. BusAttachment started.\nBusAttachment connected to unix:abstract=alljoyn\nBusListener Registered.\nFoundAdvertisedName(name=org.alljoyn.Bus.sample,\nprefix=org.alljoyn.Bus.sample)\nJoinSession SUCCESS (Session id=-1126874739)\norg.alljoyn.Bus.sample.cat ( path=/sample) returned \nHello World!\n\nbasic client exiting with status 0 (ER_OK)\n\n\n\n\nRunning Unit Tests \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\n\n\n\u6ce8\u610f:\n The following instructions are valid only for the AllJoyn\nframework version 2.6 and newer.\u4ee5\u4e0b\u6307\u5bfc\u53ea\u9002\u7528\u4e8e v2.6 \u548c\u66f4\u9ad8\u7248\u672c\u7684 AllJoyn \u67b6\u6784\u3002\n\n\nRunning C++ unit tests \u8fd0\u884c C++ \u5355\u5143\u6d4b\u8bd5\n\n\nIf the \nGTEST_DIR\n option was specified when building the code,\nthe C++ unit tests will automatically be built and placed in\nthe following location:\n\u5982\u679c\u5728\u5efa\u7acb\u4ee3\u7801\u65f6\u5236\u5b9a\u4e86 \nGTEST_DIR\n \u9009\u9879\uff0cC++ \u6d4b\u8bd5\u5355\u5143\u4f1a\u5728\u4ee5\u4e0b\u4f4d\u7f6e\u88ab\u81ea\u52a8\u5efa\u7acb\u3002\n\n\nworkspace\n/build/{OS}/{CPU}/{VARIANT}/test/cpp/bin.\n\n\n\n\nThere will be two executable files there: ajtest and cmtest.\u5c06\u4f1a\u6709\u4e24\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff1aajtest \u548c cmtest\u3002\n\n\ncmtest\n\n\nThe cmtest executable tests the code from the common project\nand does not require the AllJoyn router to be running.\nRun cmtest as follows:\ncmtest \u6d4b\u8bd5\u5e38\u7528\u5de5\u7a0b\u7684\u4ee3\u7801\uff0c\u4e0d\u9700\u8981 AllJoyn \u8def\u7531\u7684\u8fd0\u884c\u3002cmtest \u8fd0\u884c\u5982\u4e0b\uff1a\n\n\nworkspace\n/build/{OS}/{CPU}/{VARIANT}/test/cpp/bin/cmtest\n\n\n\n\najtest\n\n\nThe ajtest executable tests the code found in alljoyn_core.\nFor the tests to run successfully, an AllJoyn router must\nalso be running. Currently, ajtest is limited; it cannot test\nbus-to-bus (i.e., device-to-device) communication.\nRun ajtest as follows:\najtest \u6d4b\u8bd5 alljoyn_core \u4e2d\u7684\u4ee3\u7801\u3002\u4e3a\u4e86\u6d4b\u8bd5\u7684\u6210\u529f\u8fd0\u884c\uff0c\u5fc5\u987b\u8fd0\u884c AllJoyn \u8def\u7531\u5668\u3002\u76ee\u524d\uff0cajtest \u662f\u6709\u5c40\u9650\u6027\u7684\u3002\u5b83\u4e0d\u80fd\u6d4b\u8bd5\u603b\u7ebf\u5230\u603b\u7ebf\uff08\u5982\u8bbe\u5907\u5230\u8bbe\u5907\uff09\u7684\u8fde\u63a5\u3002ajtest \u8fd0\u884c\u5982\u4e0b\uff1a\n\n\n\n\nStart the alljoyn-daemon (optional-see note below):\u5f00\u542f alljoyn-daemon(\u53ef\u9009\u67e5\u770b\u6ce8\u91ca)\n\n\n\n\nsh\n      \nworkspace\n/build/{OS}/{CPU}/{VARIANT}/dist/cpp/bin/alljoyn-daemon --internal\n\n\n\n\nRun ajtest.\u8fd0\u884c ajtest\u3002\n\n\n\n\nsh\n      \nworkspace\n/build/{OS}/{CPU}/{VARIANT}/test/cpp/bin/ajtest\n\n\nFor all paths, replace {OS}, {CPU}, and {VARIANT} with the\nactual value used when the code was built (i.e., use the same OS,\nCPU, and VARIANT option specified when running SCons).\n\u5173\u4e8e\u8def\u5f84\uff0c\u4f7f\u7528\u8fd0\u884c SCons \u65f6\u7279\u5b9a\u7684 OS\uff0cCPU \u548c VARIANT \u66ff\u6362 {OS}\u3001{CPU} \u548c {VARIANT}\u3002\n\n\n\u6ce8\u610f:\n If the code was built using the bundled router\n(i.e., SCons flag BR=on), then ajtest can be run without\nfirst starting the separate alljoyn-daemon.\u5982\u679c\u91c7\u7528\u7ed1\u5b9a\u8def\u7531\u7684\u65b9\u5f0f\u6784\u5efa\u4ee3\u7801\uff08\u5982\uff0cSCons flag BR=on\uff09\uff0cajtest \u4e0d\u9700\u8981\u542f\u52a8\u5206\u79bb\u7684 alljoyn-daemon\u3002\n\n\nRunning the Java junit tests \u8fd0\u884c Java junit \u6d4b\u8bd5\u3002\n\n\nThe junit tests are always built at the same time as the Java\nbindings. The junit tests are specifically designed to test the\nJava bindings.junit \u6d4b\u8bd5\u603b\u662f\u548c Java \u7ed1\u5b9a\u540c\u65f6\u5b58\u5728\u3002junit \u6d4b\u8bd5\u4e13\u4e3a\u6d4b\u8bd5 Java \u7ed1\u5b9a\u800c\u8bbe\u8ba1\u3002\n\n\n\n\nFrom the top build folder, use ant to start the test.\u4ece\u9876\u90e8\u5efa\u7acb\u6587\u4ef6\u5939\uff0c\u4f7f\u7528 ant \u5f00\u59cb\u6d4b\u8bd5\u3002\n\n\n\n\nsh\n      ant test -DOS={OS} -DCPU={CPU} -DVARIANT={VARIANT}\n\n\n\n\nFind the HTML version of the results in the following location:\u4ece\u4ee5\u4e0b\u4f4d\u7f6e\u7684\u7ed3\u679c\u4e2d\u83b7\u5f97 HTML \u7248\u672c\u3002\n\n\n\n\nsh\n      \nworkspace\n/build/{OS}/{CPU}/{VARIANT}/test/java/reports/junit/\n\n\nFor all paths and commands, replace {OS}, {CPU}, and {VARIANT}\n   with the actual value used when the code was built (i.e., use\n   the same OS, CPU, and VARIANT option specified when running SCons).\n\n\nMiscellaneous\n\n\nLibrary liballjoyn.so not found\n\n\nIf the following error is returned:\u5982\u679c\u8fd4\u56de\u4ee5\u4e0b\u9519\u8bef\uff1a\n\n\nerror while loading shared libraries: liballjoyn.so:\ncannot open shared object file: No such file or directory\n\n\n\n\nThe SCons scripts build a shared library and link\nagainst that shared library. Add the library to the link path.\nSCons \u811a\u672c\u5efa\u7acb\u4e00\u4e2a\u5171\u4eab\u5e93\u5e76\u4e14\u4e0e\u4e4b\u8fdb\u884c\u8fde\u63a5\u3002\u628a\u8be5\u5e93\u52a0\u5165 link path\u3002\n\n\n$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:\nworkspace\n/build/{OS}/{CPU}/\n   {VARIANT}/dist/cpp/lib\n\n\n\n\nAfter adding the library LD_LIBRARY_PATH re-run the program\nthat produced the error.\n\u5728\u52a0\u5165\u4e86 library LD_LIBRARY_PATH \u540e\uff0c\u91cd\u65b0\u8fd0\u884c\u62a5\u9519\u7684\u7a0b\u5e8f\u3002\n\n\nAdditional projects \u989d\u5916\u5de5\u7a0b\n\n\nThe AllJoyn source code has other projects, such as alljoyn_js\n(javascript), and alljoyn_c (C bindings). These bindings are supported from\nversion 2.6 onward. The build instructions for these projects are outside the\nscope of this section. For more information, see https://allseenalliance.org.\nAllJoyn \u6e90\u4ee3\u7801\u5305\u542b\u5176\u5b83\u4ee3\u7801\uff0c\u5982 alljoyn-js(javascript) \u548c alljoyn_c (C bindings)\u3002\u81ea 2.6 \u7248\u672c\u4ee5\u6765\uff0c\u652f\u6301\u8fd9\u4e9b bindings\u3002\u8fd9\u4e9b\u5de5\u7a0b\u7684\u5efa\u7acb\u6307\u5bfc\u4e0d\u5728\u672c\u7ae0\u5185\u5bb9\u7684\u8303\u56f4\u4e4b\u5185\u3002\u6b32\u77e5\u8be6\u60c5\uff0c\u67e5\u770b https://allseenalliance.org\u3002",
            "title": "Build source"
        },
        {
            "location": "/develop/building/linux/build-source/#build-from-source-linux",
            "text": "",
            "title": "Build From Source - Linux"
        },
        {
            "location": "/develop/building/linux/build-source/#build-tools-and-libs",
            "text": "Open a terminal window and run the following command:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u4e14\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a   sh\n  $ sudo apt-get install build-essential libgtk2.0-dev\n     libssl-dev xsltproc ia32-libs libxml2-dev libcap-dev \n2. To create a 32-bit build of the AllJoyn  framework\non a 64-bit operating system, install these required development libraries:\u5982\u679c\u8981\u5728\u4e00\u4e2a 64 \u4e3a\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u5efa\u7acb\u4e00\u4e2a 32 \u4f4d AllJoyn \uff0c\u9700\u8981\u5b89\u88c5\u8fd9\u4e9b\u5f00\u53d1\u5e93\uff1a\n   sh\n  $ sudo apt-get install gcc-multilib g++-multilib libc6-i386\n     libc6-dev-i386 libssl-dev:i386 libxml2-dev:i386  \u6ce8\u610f:  libssl-dev does not have multilib support.libssl-dev \u4e0d\u652f\u6301\u591a\u5e93\u5e76\u5b58\u3002\nIf the 32-bit version of libssl-dev is installed, then the 64-bit version is\nreplaced with the 32-bit version. You can delete the 32-bit version of the\nlibraries and reinstall the 64-bit version if you wish to go back to 64-bit.\nlibssl-dev is not required if building AllJoyn with the CRYPTO=builtin option.\n\u5982\u679c\u5b89\u88c5\u4e86 32 \u4f4d\u7684 libssl-dev\uff0c\u90a3\u4e48 64 \u4f4d\u7684\u7248\u672c\u5c06\u88ab 32 \u4f4d\u7684\u7248\u672c\u53d6\u4ee3\u3002\u5982\u679c\u60a8\u60f3\u8981\u56de\u5230 64 \u4f4d\uff0c\u60a8\u9700\u8981\u9996\u5148\u5220\u9664 32 \u4f4d\u7684\u7248\u672c\uff0c\u518d\u91cd\u65b0\u5b89\u88c5 64 \u4f4d\u7684\u7248\u672c\u3002\u5f53\u5efa\u7acb\u62e5\u6709 CRYPTO=builtin \u9009\u9879\u7684 AllJoyn \u65f6\uff0c\u4e0d\u9700\u8981 libssl-dev\u3002",
            "title": "Build tools and libs \u5efa\u7acb\u5de5\u5177\u548c\u5e93"
        },
        {
            "location": "/develop/building/linux/build-source/#python-v2627",
            "text": "\u6ce8\u610f:  Python v3.0 is not compatible and will cause errors.Python 3.0 \u4e0d\u517c\u5bb9\uff0c\u5c06\u5bfc\u81f4\u9519\u8bef\u3002   Python is a common part of most Linux distributions. You can\ndetermine whether Python is already installed on your system by\nopening a terminal window and running the following command:\nPython \u662f\u5927\u90e8\u5206 Linux \u7248\u672c\u7684\u4e00\u4e2a\u5e38\u89c4\u90e8\u5206\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7ec8\u7aef\u7a97\u53e3\u8fd0\u884c\u4ee5\u4e0b\u6307\u4ee4\u4e86\u89e3 Python \u662f\u5426\u5df2\u7ecf\u88ab\u5b89\u88c5\uff1a\n   sh\n  $ which python   If a path (e.g., /usr/bin/python) is returned, Python is already installed.\n  \u5982\u679c\u8fd4\u56de\u4e86\u4e00\u4e2a\u8def\u5f84\uff08\u5982 /usr/bin/python\uff09\uff0c\u8bf4\u660e Python \u5df2\u7ecf\u88ab\u5b89\u88c5\u4e86\u3002    Otherwise, open a terminal window and run the following command:\n\u5426\u5219\uff0c\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u4e14\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n   sh\n  $ sudo apt-get install python    If this installation method does not give you the correct\nversion of Python, install the  required version .\n\u5982\u679c\u6b64\u5b89\u88c5\u65b9\u6cd5\u672a\u80fd\u7ed9\u60a8\u63d0\u4f9b\u4e00\u4e2a\u6b63\u786e\u7248\u672c\u7684 Python\uff0c \u5b89\u88c5  required version .",
            "title": "Python v2.6/2.7"
        },
        {
            "location": "/develop/building/linux/build-source/#scons",
            "text": "SCons  is a software construction tool\nused to build the AllJoyn framework. SCons is a default package\non most Linux distributions. SCons  \u662f\u4e00\u4e2a\u5efa\u7acb AllJoyn \u67b6\u6784\u7684\u8f6f\u4ef6\u6784\u5efa\u5de5\u5177\u3002SCons \u5728\u5927\u90e8\u5206 Linux \u7248\u672c\u4e2d\u662f\u4e00\u4e2a\u9ed8\u8ba4\u5305\u3002  Open a terminal window and run the following command:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a  $ sudo apt-get install scons  AllJoyn's builds are verified with SCons v2.3.SCons v2.3 \u9a8c\u8bc1 AllJoyn \u7684\u6784\u5efa\u3002",
            "title": "SCons"
        },
        {
            "location": "/develop/building/linux/build-source/#openssl-optional-openssl",
            "text": "OpenSSL is an open-source toolkit for implementing secure network\ncommunication and cryptographic functions. AllJoyn only uses the\ncryptographic functions of OpenSSL.\nIt is recommended that you always use the  newest version of\nOpenSSL .\nOpenSSL \u662f\u63d0\u4f9b\u5b89\u5168\u7f51\u7edc\u901a\u4fe1\u548c\u52a0\u5bc6\u65b9\u5f0f\u7684\u4e00\u79cd\u5f00\u6e90\u5de5\u5177\u5305\u3002AllJoyn \u53ea\u4f7f\u7528 OpenSSL \u7684\u52a0\u5bc6\u65b9\u5f0f\u3002\n\u5efa\u8bae\u60a8\u4f7f\u7528 \u6700\u65b0\u7248\u672c\u7684 OpenSSL .  Open a terminal window and run the following command:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u4e14\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a  $ sudo apt-get install libssl-dev",
            "title": "OpenSSL (optional) OpenSSL\uff08\u53ef\u9009\uff09"
        },
        {
            "location": "/develop/building/linux/build-source/#git",
            "text": "Git  is a source code repository access tool. The AllJoyn\nsource code is stored in a set of  git projects . Git  \u662f\u4e00\u4e2a\u8fde\u63a5\u6e90\u4ee3\u7801\u6587\u4ef6\u5939\u7684\u5de5\u5177\u3002AllJoyn \u6e90\u4ee3\u7801\u5b58\u50a8\u5728\u4e00\u5957  git projects \u4e2d\u3002  Open a terminal window and run the following command:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a  $ sudo apt-get install git-core",
            "title": "git"
        },
        {
            "location": "/develop/building/linux/build-source/#repo",
            "text": "Repo is a tool used to manage projects that consist of multiple\ngit projects. The AllJoyn source code is stored in a set of git\nprojects that can be cloned individually or as a group using Google's repo tool .\nThis tool is not required, but is highly recommended.\nRepo \u662f\u7528\u4e8e\u7ba1\u7406\u591a\u4e2a git \u5de5\u7a0b\u7684\u5de5\u5177\u3002Alljoyn \u6e90\u4ee3\u7801\u4ee5\u4e00\u7cfb\u5217 git \u5de5\u7a0b\u7684\u5f62\u5f0f\u5b58\u50a8\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528  Google's repo tool  \u5355\u72ec\u6216\u6279\u91cf\u514b\u9686\u3002\u6b64\u5de5\u5177\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u4f46\u5f3a\u70c8\u5efa\u8bae\u4f7f\u7528\u3002   Open a terminal window and run the following command to install curl:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u4e14\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 curl\uff1a   sh\n  $ sudo apt-get install curl   Navigate to your home directory and download repo by running\nthe following command:\u5bfc\u822a\u81f3\u6839\u76ee\u5f55\u5e76\u4e14\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d repo\u3002   sh\n  $ curl https://storage.googleapis.com/git-repo-downloads/repo  \n  ~/bin/repo   Copy repo to /usr/local/bin and make it executable using the following commands:\u5c06 repo \u62f7\u8d1d\u81f3/usr/local/bin \u5e76\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u4f7f\u5176\u53ef\u6267\u884c\uff1a   sh\n  $ sudo cp repo /usr/local/bin\n  $ sudo chmod a+x /usr/local/bin/repo  Uncrustify  Uncrustify is a source code formatting tool used to maintain a consistent\ncoding style in the AllJoyn code base. It is not required to build AllJoyn,\nbut if you intend to contribute code changes to the AllJoyn project you should\nconfigure and use the tool.\nUncrustify \u662f\u4e00\u4e2a\u7528\u4e8e\u4fdd\u6301 AllJoyn \u4ee3\u7801\u5e93\u7f16\u7a0b\u98ce\u683c\u4e00\u81f4\u7684\u4ee3\u7801\u683c\u5f0f\u5de5\u5177\u3002\u8fd9\u4e0d\u662f\u6784\u5efa AllJoyn \u6240\u5fc5\u9700\u7684\uff0c\u4f46\u5982\u679c\u60a8\u5e0c\u671b\u5bf9 AllJoyn \u5de5\u7a0b\u7684\u4ee3\u7801\u8fdb\u884c\u6539\u52a8\uff0c\u60a8\u5e94\u8be5\u914d\u7f6e\u5e76\u4f7f\u7528\u8fd9\u4e2a\u5de5\u5177\u3002  \u6ce8\u610f:  Uncrustify v0.61 is required for AllJoyn v15.04 and\nlater. Earlier AllJoyn versions require uncrustify v0.57. Since the\nexisting AllJoyn code was formatted with a specific version of\nuncrustify, using any other version of uncrustify can cause unexpected\nbuild errors when not building with the WS=off option.\nUncrustify v0.61 \u652f\u6301 AllJoyn v15.05 \u548c\u66f4\u9ad8\u7248\u672c\u3002\u65e9\u8d77\u7248\u672c\u7684 AllJoyn \u9700\u8981 uncrustify v0.57\u3002\u7531\u4e8e\u4f7f\u7528\u4e86\u7279\u5b9a\u7248\u672c\u7684 uncrustify \u89c4\u5b9a\u4e86\u73b0\u6709 AllJoyn \u4ee3\u7801\u7684\u683c\u5f0f\uff0c\u5f53\u4e0d\u4f7f\u7528 WF\uff1dOFF \u9009\u9879\u6784\u5efa\u7a0b\u5e8f\u65f6\uff0c\u4f7f\u7528\u5176\u5b83\u7248\u672c\u7684 uncrustify \u53ef\u80fd\u4f1a\u9047\u5230\u4e0d\u53ef\u9884\u6599\u7684\u6784\u5efa\u9519\u8bef\u3002  There are two ways to install Uncrustify.\u6709\u4e24\u79cd\u65b9\u5f0f\u5b89\u88c5 Uncrustify\u3002   Download the source and then build and install Uncrustify:\u4e0b\u8f7d\u6e90\u5e76\u6784\u5efa\u548c\u5b89\u88c5 Uncrustify\uff1a   sh\n   $ mkdir $HOME/uncrustify # for example\n   $ cd $HOME/uncrustify\n   $ git clone http://github.com/bengardner/uncrustify.git\n   $ # or use\n   $ #git clone git://uncrustify.git.sourceforge.net/gitroot/uncrustify/uncrustify\n   $ cd uncrustify\n   $ git checkout uncrustify-0.61\n   $ # or for v0.57:\n   $ #git checkout uncrustify-0.57\n   $ ./configure\n   $ sudo make install  \u6ce8\u610f:  In some cases, Uncrustify has failed to build on more recent\nUbuntu versions. Try making the following change to get\nUncrustify to build:\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0cUncrustify \u5728\u6700\u65b0\u7684 Ubuntu \u7248\u672c\u4e2d\u6784\u5efa\u4e0d\u6210\u529f\u3002\u8bd5\u7740\u8fdb\u884c\u4ee5\u4e0b\u6539\u53d8\u4ee5\u6784\u5efa Uncrustify\u3002  ```sh\n   diff --git a/src/uncrustify.cpp b/src/uncrustify.cpp index 2635189..7aba76d 100644\n   --- a/src/uncrustify.cpp\n   +++ b/src/uncrustify.cpp\n   @@ -32,6 +32,7 @@\n   #ifdef HAVE_STRINGS_H\n   #include   /  strcasecmp()  /\n   #endif\n   +#include   /  Global data  /\n   struct cp_data cpd;\n  ```   Install the Uncrustify v0.57 package on Ubuntu:\u5728 Ubuntu \u4e0a\u5b89\u88c5 Uncrustify v0.57 \u5305\u3002  Go to: http://packages.ubuntu.com/precise/uncrustify.\u524d\u5f80 http://packages.ubuntu.com/precise/uncrustify\u3002  From the website, click in the \"Download uncrustify\" table to select your machine's architecture.\u5728\u7f51\u7ad9\u4e2d\u70b9\u51fb \"Download uncrustify\" \u8868\u9009\u62e9\u60a8\u8bbe\u5907\u7684\u67b6\u6784\u3002  From the page that opens after your selection, choose\n   a mirror based on your location, and download the .deb package. \u5728\u9009\u62e9\u540e\u6253\u5f00\u7684\u7f51\u9875\u4e2d\uff0c\u9009\u62e9\u4e00\u4e2a\u57fa\u4e8e\u60a8\u4f4d\u7f6e\u7684\u955c\u50cf\uff0c\u4e0b\u8f7d .deb \u5305\u3002  Install the package using either of these two commands, as appropriate:\u6839\u636e\u60c5\u51b5\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4efb\u4e00\u547d\u4ee4\u5b89\u88c5\u6b64\u5305\u3002   sh\n   $ sudo dpkg -i uncrustify_0.57-1_amdd64.deb\n   $ sudo dpkg -i uncrustify_0.57-1_i386.deb \n   Uncrustify v0.61 packages are not currently available.\u76ee\u524d\u6682\u4e0d\u652f\u6301 Uncrustify v0.61\u3002",
            "title": "Repo"
        },
        {
            "location": "/develop/building/linux/build-source/#doxygen",
            "text": "The  Doxygen tool  builds HTML documentation from\nsource code. It is not required for building AllJoyn binaries.\n  Doxygen tool \u4ece\u6e90\u4ee3\u7801\u751f\u6210 HTML \u6587\u6863\u3002\u5b83\u4e0d\u7528\u4e0e\u5efa\u7acb AllJoyn \u4ee3\u7801\u3002  Open a terminal window and run the following command:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a  $ sudo apt-get install doxygen  Graphviz  The  Graphviz Dot tool  diagrams class hierarchies\nand is used by doxygen. Graphviz Dot tool \u628a\u7c7b\u7684\u5c42\u7ea7\u7ed3\u6784\u901a\u8fc7\u56fe\u6807\u5c55\u793a\u3002Doxygen \u4f1a\u4f7f\u7528\u5b83\u3002  Open a terminal window and run the following command:\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u5e76\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a  $ sudo apt-get install graphviz",
            "title": "Doxygen"
        },
        {
            "location": "/develop/building/linux/build-source/#tex-live",
            "text": "TeX Live  provides LaTeX binaries\nand style sheets for Linux. This optional tool may be used to\nproduce AllJoyn's API documentation as a PDF document from\nthe source. It is possible to compile the AllJoyn framework\nwithout producing the documentation. TeX Live  \u63d0\u4f9b LaTeX \u4e8c\u8fdb\u5236\u6587\u4ef6\u548c\u9488\u5bf9Linux\u7684\u6837\u5f0f\u8868\u3002\u8fd9\u4e2a\u53ef\u9009\u5de5\u5177\u53ef\u7528\u4e8e\u4ece\u6e90\u4e2d\u751f\u6210 PDF \u683c\u5f0f\u7684 AllJoyn API \u7684\u6587\u6863\u3002\u5f53\u7136\u4e0d\u751f\u6210\u6587\u6863\uff0c\u4e5f\u53ef\u4ee5\u7f16\u8bd1 AllJoyn \u67b6\u6784\u3002\nInstall TeX Live if you want to produce PDF documentation.  $ sudo apt-get install texlive",
            "title": "TeX Live"
        },
        {
            "location": "/develop/building/linux/build-source/#gecko-sdk",
            "text": "The  Gecko SDK  (aka XULRunner SDK)\nis only required if you are building the AllJoyn JavaScript\nplug-in. Otherwise, this section is optional. Gecko SDK \uff08\u53c8\u540d XULRunner SDK\uff09\u4ec5\u5728\u6784\u5efa AllJoyn JavaScript \u63d2\u4ef6\u65f6\u662f\u5fc5\u987b\u7684\u3002\u5bf9\u4e8e\u5176\u4ed6\u60c5\u51b5\uff0c\u8fd9\u4e2a\u90e8\u5206\u662f\u53ef\u9009\u7684\u3002  The plug-in was developed against version 1.9.2 of the SDK,\nalthough it may be possible to use an earlier version.\nOn 64-bit Linux, download the 32-bit version anyway (only\nthe headers in the SDK are used).\n\u63d2\u4ef6\u662f\u9488\u5bf9 1.9.2 \u7248\u672c\u5f00\u53d1\u7684\uff0c\u5c3d\u7ba1\u5b83\u4e5f\u53ef\u80fd\u9002\u7528\u4e8e\u66f4\u65e9\u7684\u7248\u672c\u3002\u5728 64 \u4f4d\u7684 Linux \u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4e0b\u8f7d 32 \u4f4d\u7684\u7248\u672c\u3002\uff08\u56e0\u4e3a\u53ea\u662f\u7528\u4e86 SDK \u7684\u6807\u5934\uff09",
            "title": "Gecko SDK"
        },
        {
            "location": "/develop/building/linux/build-source/#install-java-java",
            "text": "Java 6 or greater may be used to build the AllJoyn framework\non a Linux platform.\n\u4f7f\u7528 Java 6 \u6216\u66f4\u9ad8\u7248\u672c\u6784\u5efa\u57fa\u4e8e Linux \u5e73\u53f0\u7684 AllJoyn \u67b6\u6784\u3002  \u91cd\u8981:  Using apt-get install java will download open-jdk not\nsun-jdk. The AllJoyn framework requires sun-jdk. \u4f7f\u7528 apt-get \u5b89\u88c5 java \u5c06\u4e0b\u8f7d open-jdk \u800c\u4e0d\u662f sun-jdk\u3002AllJoyn \u67b6\u6784\u9700\u8981\u4f7f\u7528 sun-jdk\u3002  Install Java using one of these two mechanisms.\u4f7f\u7528\u4efb\u4e00\u4ee5\u4e0b\u4e24\u79cd\u673a\u5236\uff0c\u5b89\u88c5 Java\u3002  Installing Java 6 when older than Ubuntu 12.04 \u5728 Ubuntu 12.04 \u6216\u66f4\u65e9\u7248\u672c\u4e0a\u5b89\u88c5 Java 6   Install Java 6 \u5b89\u88c5 Java 6   sh\n      $ sudo add-apt-repository \"deb http://archive.ubuntu.com/ubuntu lucid partner\"\n      $ sudo apt-get update\n      $ sudo apt-get install sun-java6-jdk   Install junit 3.8 or newer (junit is required when building\nthe AllJoyn Java bindings).\u5b89\u88c5 junit 3.8\u6216\u66f4\u65b0\u7248\u672c\uff08\u9700\u8981\u4f7f\u7528 junit \u6784\u5efa AllJoyn Java \u7ed1\u5b9a\uff09  Navigate to (https://github.com/junit-team/junit/wiki/Download-and-Install).\u5bfc\u822a\u81f3 (https://github.com/junit-team/junit/wiki/Download-and-Install)\u3002  Download the jar file \"junit-4.9.jar\". \u4e0b\u8f7d jar \u6587\u4ef6 \"junit-4.9.jar\"\u3002   Copy it to usr/share/java/junit-4.9 from the Downloads folder: \u4ece\u4e0b\u8f7d\u6587\u4ef6\u5939\u5c06\u5176\u62f7\u8d1d\u81f3 usr/share/java/junit-4.9\u3002  sh\n     $ sudo cp junit-4.9.jar /usr/share/java/    If you want to run junit tests, install the Apache Ant build\ntool (only required to run junit tests, not required to build the\nAllJoyn framework).\n\u5982\u679c\u60a8\u60f3\u8981\u8fd0\u884c junit \u6d4b\u8bd5\uff0c\u5b89\u88c5 Apache Ant \u6784\u5efa\u5de5\u5177\uff08\u4ec5\u7528\u4e8e\u8fd0\u884c junit tests\uff0c\u4e0d\u80fd\u7531\u4e8e\u6784\u5efa Alljoyn\u67b6\u6784\uff09    sh\n      $ sudo apt-get install ant  Installing Java 6 when using Ubuntu 12.04 or newer \u5728 Ubuntu 12.04 \u6216\u66f4\u65b0\u7248\u672c\u4e0a\u5b89\u88c5 Java 6  With the Ubuntu 12.04 Precise Pangolin release, partner\nrepositories are no longer available. You must manually\ninstall Java using the following instructions:\n\u5728 Ubuntu 12.04 Precise Pangolin \u7248\u672c\u4e2d\uff0c\u4e0d\u518d\u652f\u6301 partner \u6587\u4ef6\u5939\u3002\u60a8\u5fc5\u987b\u6839\u636e\u4ee5\u4e0b\u6307\u5bfc\u624b\u52a8\u5b89\u88c5 Java\u3002    Download the JDK bin file corresponding to your cpu type\n(x86 or x64) from Java SE 6u32 Downloads.\u4ece Java SE 6u32 Downloads \u4e2d\uff0c\u6839\u636e\u76f8\u5e94 cpu \u7c7b\u578b\uff0c\u4e0b\u8f7d JDK bin \u6587\u4ef6\u3002    Use chmod to make the file executable: \u4f7f\u7528 chmod \u8ba9\u6587\u4ef6\u53ef\u6267\u884c\uff1a    sh\n      $ chmod +x jdk-6u32-linux-x64.bin   Extract the bin file: \u89e3\u538b\u7f29 bin \u6587\u4ef6\uff1a   sh\n      $ ./jdk-6u32-linux-x64.bin   Move extracted folder to /usr/lib/jvm/: \u628a\u89e3\u538b\u7f29\u7684\u6587\u4ef6\u5939\u79fb\u52a8\u5230 /usr/lib/jvm/\uff1a   sh\n      $ sudo mv jdk1.6.0_32 /usr/lib/jvm/   Add the newly installed Java to the list of alternatives:\u628a\u65b0\u5b89\u88c5\u7684 Java \u52a0\u5165\u9009\u62e9\u5217\u8868\uff1a   sh\n      $ sudo update-alternatives --install /usr/bin/javac javac\n      /usr/lib/jvm/jdk1.6.0_32/bin/javac 2\n      $ sudo update-alternatives --install /usr/bin/java java\n      /usr/lib/jvm/jdk1.6.0_32/bin/java 2\n      $ sudo update-alternatives --install /usr/bin/javaws javaws\n      /usr/lib/jvm/jdk1.6.0_32/bin/javaws 2   Choose default Java: \u9009\u62e9\u9ed8\u8ba4 Java\uff1a   sh\n      $ sudo update-alternatives --config javac\n      $ sudo update-alternatives --config java\n      $ sudo update-alternatives --config javaws   Check Java version to verify it is installed correctly: \u68c0\u67e5 Java \u7248\u672c\u4ee5\u786e\u8ba4\u5b83\u88ab\u6b63\u786e\u5b89\u88c5\uff1a   sh\n      $ java -version  It should return something similar to: \u4f1a\u8fd4\u56de\u7c7b\u4f3c\u8fd9\u6837\u8bed\u53e5\uff1a  sh\n      java version \"1.6.0_26\"\n      Java(TM) SE Runtime Environment (build 1.6.0_26-b03)\n      Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)   Verify the symlinks all point to the new Java location:\u9a8c\u8bc1\u6240\u6709\u6307\u5411\u65b0 Java \u4f4d\u7f6e\u7684 symlinks\u3002   sh\n      $ ls -la /etc/alternatives/java*    (Optional, but recommended) Enable Java plug-in for Mozilla\nFirefox (even for Chrome).\uff08\u53ef\u9009\uff0c\u4f46\u5efa\u8bae\uff09\u5728 Mozilla Firefox \uff08\u6216\u662f Chrome\uff09\u4e2d\uff0c\u5f00\u542f\u63d2\u4ef6\u529f\u80fd\u3002    For 64-bit jdk: \u4e3a 64 \u4e3a jdk\uff1a  sh\n     $ sudo update-alternatives --install \\\n     /usr/lib/mozilla/plugins/libjavaplugin.so mozilla-javaplugin.so \\\n     /usr/lib/jvm/jdk1.6.0_32/jre/lib/amd64/libnpjp2.so 2\n     $ sudo update-alternatives --config mozilla-javaplugin.so    For 32-bit jdk\uff1a \u4e3a 32 \u4e3a jdk\uff1a  sh\n     $ sudo update-alternatives --install \\\n     /usr/lib/mozilla/plugins/libjavaplugin.so mozilla-javaplugin.so \\\n     /usr/lib/jvm/jdk1.6.0_32/jre/lib/i386/libnpjp2.so 2\n     $ sudo update-alternatives --config mozilla-javaplugin.so    Test the Java web plug-in by going to http://www.java.com/en/download/testjava.jsp.\u901a\u8fc7\u8bbf\u95ee http://www.java.com/en/download/testjava.jsp \u6d4b\u8bd5 Java web \u63d2\u4ef6\u3002   Install junit 3.8 or newer (junit is required when building\nthe AllJoyn Java bindings).\u5b89\u88c5 junit 3.8 \u6216\u66f4\u9ad8\u7248\u672c\uff08\u9700\u8981 junit \u5efa\u7acb AllJoyn Java \u7ed1\u5b9a\uff09  Navigate to https://github.com/junit-team/junit/wiki/Download-and-Install.\u5bfc\u822a\u81f3 https://github.com/junit-team/junit/wiki/Download-and-Install\u3002  Download the jar file \"junit-4.9.jar\" and copy it to\n   usr/share/java/junit-4.9 from the Downloads folder:\u4e0b\u8f7d jar \u6587\u4ef6 \"junit-4.9.jar\" \u5e76\u5c06\u5176\u4ece Downloads \u6587\u4ef6\u5939\u62f7\u8d1d\u81f3 usr/share/java/junit-4.9\u3002   sh\n      $ sudo cp junit-4.9.jar /usr/share/java/   If you want to run junit tests, install the Apache Ant build\ntool (only required to run junit tests, not required to build\nthe AllJoyn framework).\u5982\u679c\u60a8\u60f3\u8981\u8fd0\u884c junit \u6d4b\u8bd5\uff0c\u5b89\u88c5 Apache Ant \u6784\u5efa\u5de5\u5177\uff08\u4ec5\u7528\u4e8e\u8fd0\u884c junit tests\uff0c\u4e0d\u80fd\u7531\u4e8e\u6784\u5efa Alljoyn\u67b6\u6784\uff09\u3002   sh\n      $ sudo apt-get install ant",
            "title": "Install Java \u5b89\u88c5 Java"
        },
        {
            "location": "/develop/building/linux/build-source/#googletest",
            "text": "Google Test is Google's framework for writing C++ tests.\nGoogle Test is an xUnit testing architecture used by the\nAllJoyn framework to test its C++ APIs. Google Test is optional,\nbut is required for building the C++ unit tests.\nGoogle Test \u662f Google \u7528\u4e8e\u7f16\u5199 C++ \u6d4b\u8bd5\u7684\u67b6\u6784\u3002Google Test \u662f AllJoyn \u67b6\u6784\u7528\u4e8e\u6d4b\u8bd5\u5176 API \u7684\u4e00\u79cd xUnit \u6d4b\u8bd5\u7ed3\u6784\u3002Google Test \u662f\u53ef\u9009\u7684\uff0c\u4f46\u5728\u5efa\u7acb C++ \u5355\u5143\u6d4b\u8bd5\u65f6\u662f\u5fc5\u9700\u7684\u3002   Open a browser and navigate to http://code.google.com/p/googletest/downloads/list.\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5bfc\u822a\u81f3 http://code.google.com/p/googletest/downloads/list\u3002  From the googletest download page, download gtest-1.7.0.zip.\u4ece googletest \u4e0b\u8f7d\u9875\u9762\uff0c\u4e0b\u8f7d gtest-1.7.0.zip\u3002  Unzip the contents of gtest-1.7.0.zip to a known location\n(e.g., $HOME/gtest/gtest-1.7.0).\u89e3\u538b\u7f29 gtest-1.7.0.zip \u7684\u5185\u5bb9\u5230\u5df2\u77e5\u4f4d\u7f6e\uff08\u5982 $HOME/gtest/gtest-1.7.0\uff09   \u91cd\u8981:  Do not use apt-get install libgtest-dev. Download\nthe source code from code.google.com.\u4e0d\u8981\u4f7f\u7528 apt-install \u5b89\u88c5 libgtest-dev\u3002\u4ece code.google.com \u4e0b\u8f7d\u6e90\u4ee3\u7801\u3002",
            "title": "googletest"
        },
        {
            "location": "/develop/building/linux/build-source/#obtain-the-alljoyn-source-alljoyn",
            "text": "$ cd $HOME\n$ export AJ_ROOT = `pwd`/alljoyn # for example\n$ git clone https://git.allseenalliance.org/gerrit/core/alljoyn.git\n\n$AJ_ROOT/core/alljoyn",
            "title": "Obtain the AllJoyn source \u83b7\u53d6 AllJoyn \u6e90"
        },
        {
            "location": "/develop/building/linux/build-source/#building-the-alljoyn-framework-alljoyn",
            "text": "Use the following commands to build the AllJoyn framework for Linux.\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5efa\u7acb\u9488\u5bf9 Linux \u7684 AllJoyn \u67b6\u6784\u3002  $ export JAVA_HOME= /usr/lib/jvm/java-6-sun  # or java-1.5.0-sun\n$ export CLASSPATH= /usr/share/java/junit4.9.jar  # for building Java binding\n$ export GECKO_BASE=~/xulrunner-sdk # for building Javascript binding\n$ cd $AJ ROOT/core/alljoyn  For 32-bit:\u5bf9\u4e8e 32 \u4f4d\uff1a  $ scons BINDINGS= comma separated list(cpp,java,c,js) \n\n   ex) $ scons BINDINGS= cpp,java   For 64-bit:\u5bf9\u4e8e 64 \u4f4d\uff1a  $ scons CPU=x86_64 BINDINGS= comma separated list (cpp,java,c,js) \n\n   ex) $ scons CPU=x86_64 BINDINGS= cpp,java   \u6ce8\u610f:  For a full list of SCons command line options to build\nthe AllJoyn framework, enter  scons -h .\u9700\u8981\u4f7f\u7528 SCons \u547d\u4ee4\u7684\u5b8c\u5168\u5217\u8868\u4ee5\u5efa\u7acb AllJoyn \u67b6\u6784\uff0c\u8f93\u5165  scons -h \u3002  \u6ce8\u610f:  Use the SCons variable  BINDINGS  to list the language\nbindings for which you would like to build. To limit the build\nto just C++, for example, use BINDINGS=cpp. Use a comma-separated\nlist for multiple bindings. For example, to build for Java and\nC++, use  BINDINGS=java,cpp.\n\u4f7f\u7528 SCons \u53d8\u91cf  BINDINGS  \u5217\u51fa\u60a8\u60f3\u8981\u5efa\u7acb\u7684\u8bed\u8a00\u7ed1\u5b9a\u3002\u4e3e\u4f8b\u8bf4\u660e\uff0c\u4e3a\u4e86\u9650\u5236\u4ec5\u4f7f\u7528 C++ \u6784\u5efa,\u4f7f\u7528 BINGDINGS=cpp.\u5728\u7ed1\u5b9a\u591a\u4e2a\u8bed\u8a00\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u9694\u3002\u4e3e\u4f8b\u8bf4\u660e\uff0c\u4f7f\u7528 Java \u548c C++\uff0c\u90a3\u4e48 BINGDINGS=java,cpp\u3002  N\u6ce8\u610f   The path specified for the CLASSPATH environment variable\nis the full path name to the junit jar file that was downloaded earlier.CLASSPATH \u73af\u5883\u53d8\u91cf\u6307\u5b9a\u7684\u8def\u5f84\u662f\u4e4b\u524d\u4e0b\u8f7d\u7684 junit jar \u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\u540d\u3002  The path specified for the JAVA HOME environment variable\nis the path to the jdk directory.JAVA HOME \u73af\u5883\u53d8\u91cf\u6307\u5b9a\u7684\u8def\u5f84\u662f jdk \u6587\u4ef6\u5939\u7684\u8def\u5f84\u3002  For building Javascript on both Linux and Windows, we need\nthe GECKO_BASE while building the AllJoyn framework. \u4e3a\u4e86\u5728 Linux \u548c Windows \u4e0a\u5efa\u7acb Javascript\uff0c\u6211\u4eec\u5728\u5efa\u7acb AllJoyn \u67b6\u6784\u65f6\u9700\u8981 GECKO_BASE\u3002  If you are building a version older than AllJoyn framework\n2.6, CPU=x86-64 will be required to build a 64-bit version of the AllJoyn framework.\u5982\u679c\u60a8\u4f7f\u7528\u65e9\u4e8e AllJoyn \u67b6\u6784 2.6 \u7248\u672c\u6765\u5efa\u7acb\uff0c\u90a3\u4e48\u60a8\u9700\u8981 CPU=x86-64 \u5efa\u7acb\u4e00\u4e2a 64 \u4f4d\u7248\u672c\u7684 AllJoyn \u67b6\u6784\u3002   Possible build errors \u53ef\u80fd\u7684\u6784\u5efa\u9519\u8bef  \" ImportError: No module named argparse\"  reported when reading \"File \"../build_core/tools/bin/whitespace.py\", line 18\". \nPython does not have the argparse module installed (versions of\npython 2.7.1 or newer have it installed by default).  $ sudo apt-get install python-setuptools\n$ sudo easy_install argparse",
            "title": "Building the AllJoyn Framework \u5efa\u7acb AllJoyn \u67b6\u6784"
        },
        {
            "location": "/develop/building/linux/build-source/#build-the-api-documentation-api",
            "text": "By default, the AllJoyn API documentation is not built during\nthe build stage (except for Java Docs). To build the API\ndocumentation use the following commands:\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cAllJoyn API \u6587\u6863\u4e0d\u4f1a\u5728\u6784\u5efa\u8fc7\u7a0b\u4e2d\u5efa\u7acb\uff08\u9664 Java \u6587\u6863\u4e4b\u5916\uff09\u3002\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5efa\u7acb API \u6587\u6863\uff1a  $ scons DOCS=html\n$ scons DOCS=pdf  The documentation will be placed in  /alljoyn_core/docs/html\nor  /alljoyn_core/docs/latex. \u6587\u6863\u5c06\u4f1a\u653e\u7f6e\u5728  /alljoyn_core/docs/html\n\u6216  /alljoyn_core/docs/latex.   Open  /alljoyn_core/docs/html/index.html in a web\nbrowser to view the documentation. \u67e5\u9605\u6587\u6863\uff0c\u8bf7\u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00  /alljoyn_core/docs/html/index.html  Open  /alljoyn_core/docs/refman.pdf in a PDF viewer\nto view the PDF documentation. \u67e5\u9605 PDF \u6587\u6863\uff0c\u8bf7\u901a\u8fc7 PDF \u6d4f\u89c8\u5668\u6253\u5f00  /alljoyn_core/docs/refman.pdf\u3002   Whitespace policy checker \u7a7a\u767d\u7b26\u89c4\u5219\u68c0\u67e5\u5668  By default, the whitespace policy checker does not run. If you are\ncontributing changes to AllJoyn, you should run your builds with the\nwhitespace checker enabled:\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7a7a\u767d\u7b26\u89c4\u5219\u68c0\u67e5\u5668\u4e0d\u8fd0\u884c\u3002\u5982\u679c\u60a8\u6b63\u5728\u5bf9 AllJoyn \u7684\u66f4\u6539\uff0c\u60a8\u5e94\u8be5\u5f00\u542f\u7a7a\u767d\u7b26\u89c4\u5219\u68c0\u67e5\u5668\u8fd0\u884c\u60a8\u4fee\u6539\u7684\u7a0b\u5e8f\u3002  $ scons WS=check  If the whitespace policy checker reports a whitespace policy\nviolation, it lists which files have the violation. To see the\nlines of code that are violating the AllJoyn whitespace policy, run:\n\u5982\u679c\u7a7a\u767d\u7b26\u89c4\u5219\u68c0\u67e5\u5668\u62a5\u544a\u4e86\u4e00\u9879\u8fdd\u89c4\uff0c\u5b83\u4f1a\u5217\u51fa\u662f\u54ea\u4e2a\u6587\u4ef6\u8fdd\u89c4\u4e86\u3002\u4e3a\u4e86\u627e\u5230\u8fdd\u53cd\u4e86 AllJoyn \u7a7a\u767d\u7b26\u89c4\u5219\u7684\u6bb5\u843d\uff0c\u8fd0\u884c\uff1a  $ scons WS=detail  Uncrustify can automatically fix your files to adhere to the whitespace policy.\nUncrustify \u80fd\u591f\u6839\u636e\u7a7a\u767d\u7b26\u89c4\u5219\u81ea\u52a8\u4fee\u590d\u60a8\u7684\u6587\u4ef6\u3002  $ scons WS=fix  Build variant \u5efa\u7acb\u53d8\u91cf  By default, the AllJoyn framework builds the debug variant. To build\nthe release version of the AllJoyn framework, use this:\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cAllJoyn \u67b6\u6784\u5efa\u7acb debug \u53d8\u91cf\u3002\u5efa\u7acb\u53d1\u884c\u7248\u672c\u7684 AllJoyn \u67b6\u6784\uff0c\u4f7f\u7528\uff1a  $ scons VARIANT=release",
            "title": "Build the API documentation \u5efa\u7acb API \u6587\u6863"
        },
        {
            "location": "/develop/building/linux/build-source/#bindings-option-bindings",
            "text": "The default SCons script tries to build all of the language bindings\nby default. If you are only interested in a particular language binding,\nthe  BINDINGS  option can be used to select the language(s) of interest.\n\u9ed8\u8ba4 SCons \u811a\u672c\u91c7\u7528\u9ed8\u8ba4\u65b9\u5f0f\u5efa\u7acb\u6240\u6709\u7684\u8bed\u8a00\u7ed1\u5b9a\u3002\u5982\u679c\u60a8\u53ea\u5bf9\u67d0\u4e00\u79cd\u8bed\u8a00\u7ed1\u5b9a\u6709\u610f\u5411\uff0c BINDINGS  \u9009\u9879\u53ef\u4f9b\u60a8\u9009\u62e9\u60a8\u5e0c\u671b\u7684\u8bed\u8a00\u3002  The  BINDINGS  option takes a comma-separated list of languages you\nwish to build. Current valid languages are cpp, c, java, and js. The language is\nalways specified in all lower case with no extra spaces between languages. If a\ndependency is not listed, the dependency will automatically be built. For\nexample, java requires that cpp is built. If an empty string is used only the\ncore files will be built. BINDINGS  \u9009\u9879\u53ef\u4ee5\u7528\u4f7f\u7528\u9017\u53f7\u5217\u51fa\u60a8\u6240\u5e0c\u671b\u7528\u4e8e\u6784\u5efa\u7684\u591a\u79cd\u8bed\u8a00\u3002\u76ee\u524d\uff0c\u652f\u6301\u7684\u8bed\u8a00\u6709 cpp,c,java \u548c js\u3002\u8bed\u8a00\u5fc5\u987b\u91c7\u7528\u5c0f\u5199\u5f62\u5f0f\uff0c\u5e76\u4e14\u8bed\u8a00\u4e4b\u95f4\u4e0d\u80fd\u6709\u7a7a\u683c\u3002\u5982\u679c\u4f9d\u8d56\u9879\u6ca1\u6709\u88ab\u5217\u51fa\uff0c\u5b83\u4eec\u4e5f\u4f1a\u81ea\u52a8\u88ab\u5efa\u7acb\u3002\u4e3e\u4f8b\u8bf4\u660e\uff0cjava \u9700\u8981\u4ee5 cpp \u7684\u5efa\u7acb\u4e3a\u57fa\u7840\u3002\u5982\u679c\u4f7f\u7528\u4e86\u7a7a\u767d\u5b57\u6bb5\uff0c\u4ec5\u4f1a\u5efa\u7acb\u6838\u5fc3\u6587\u4ef6\u3002  For example:\u4e3e\u4f8b\uff1a  $ scons BINDINGS=java #this will build core files and Java language bindings\n$ scons BINDINGS=c,java #this will build C language bindings and Java language bindings\n$ scons BINDINGS= #only build the core files alljoyn_core and common",
            "title": "Bindings option Bindings \u9009\u9879"
        },
        {
            "location": "/develop/building/linux/build-source/#crypto-option-crypto",
            "text": "AllJoyn v15.04 adds a CRYPTO option to the scons command line. To build AllJoyn\nwithout dependencies on OpenSSL libcrypto, use CRYPTO=builtin:\nAllJoyn v15.04 \u5728 scons \u547d\u4ee4\u884c\u4e2d\u52a0\u5165\u4e86 CRYPTO \u9009\u9879\u3002\u4f7f\u7528 CRYPTO=builtin\uff0c\u80fd\u591f\u9664\u53bb OpenSSL \u7684\u4f9d\u8d56\uff0c\u8fdb\u884c AllJoyn \u7684\u6784\u5efa\u3002  $ scons CRYPTO=builtin  To use crypto implementations in OpenSSL:\u4f7f\u7528 OpenSSl \u63d0\u4f9b\u7684\u52a0\u5bc6\u65b9\u5f0f\uff1a  $ scons CRYPTO=openssl",
            "title": "Crypto option Crypto \u9009\u9879\uff1a"
        },
        {
            "location": "/develop/building/linux/build-source/#policydb-option-policydb",
            "text": "AllJoyn v14.06 provides functionality that\ncan be compiled into AllJoyn routers that acts as firewall/filter\nfor delivering messages. The POLICYDB option controls whether this\nfunctionality is included or not. It can be set to either on or off.  The default policy rules are for the AllJoyn router to behave as\nthough PolicyDB is excluded. The default is to not include PolicyDB.  Example:  $ scons POLICYDB=on",
            "title": "PolicyDB option PolicyDB \u9009\u9879"
        },
        {
            "location": "/develop/building/linux/build-source/#build-c-unit-tests-c",
            "text": "The AllJoyn framework now includes a set of unit tests that\nare built using the Google Test C++ framework. To build the\nunit test, the location of the Google Test source code must\nbe specified as explained in googletest. Use the GTEST_DIR\noption to specify the location of the Google Test source code.\nAllJoyn \u67b6\u6784\u76ee\u524d\u81ea\u5e26\u4e86\u4e00\u5957\u4f7f\u7528 Google Test C++ \u67b6\u6784\u7684\u5355\u5143\u6d4b\u8bd5\u3002\u4e3a\u4e86\u5efa\u7acb\u5355\u5143\u6d4b\u8bd5\uff0c\u5fc5\u987b\u5982 googletest \u4e2d\u63d0\u5230\u6307\u5b9a Google Test \u6e90\u4ee3\u7801\u7684\u4f4d\u7f6e\u3002\u4f7f\u7528 GTEST_DIR \u9009\u9879\u6307\u5b9a Google Test \u6e90\u4ee3\u7801\u7684\u4f4d\u7f6e\u3002  Example:\u793a\u4f8b\uff1a  $ scons GTEST_DIR=$HOME/gtest/gtest-1.7.0",
            "title": "Build C++ unit tests \u5efa\u7acb C++ \u5355\u5143\u6d4b\u8bd5"
        },
        {
            "location": "/develop/building/linux/build-source/#running-the-alljoyn-applications-alljoyn",
            "text": "\u6ce8\u610f:  For v2.6 and onward, Bundled Router mode only.\u5bf9\u4e8e v2.6 \u548c\u66f4\u9ad8\u7248\u672c\uff0c\u4ec5\u6709 Bundled Router \u6a21\u5f0f\u3002  To ensure that the Linux development platform is set up\ncorrectly, use the instructions in this section to run\nthe AllJoyn router.\n\u4e3a\u4e86\u4fdd\u8bc1 Linux \u5f00\u53d1\u5e73\u53f0\u88ab\u6b63\u786e\u5730\u5efa\u7acb\uff0c\u4f7f\u7528\u672c\u7ae0\u7684\u6307\u5bfc\u8fd0\u884c AllJoyn \u8def\u7531\u3002  With the release of AllJoyn v2.6, running a separate standalone\nrouter (alljoyn-daemon) is no longer required. All of the\nfunctionality of the router can now be built into each individual\napplication, which means:\n\u968f\u7740 AllJoyn v2.6 \u7684\u53d1\u5e03\uff0c\u4e0d\u518d\u80fd\u591f\u8fd0\u884c\u5206\u79bb\u7684\u72ec\u7acb\u8def\u7531\uff08alljoyn-daemon\uff09\u3002\u6240\u6709\u7684\u8def\u7531\u7a0b\u5e8f\u73b0\u5728\u53ef\u4ee5\u88ab\u52a0\u5165\u4efb\u4f55\u4e00\u4e2a\u72ec\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u610f\u5473\u7740\uff1a   Users of your program no longer need to install and run a\nbackground service (daemon) to run a program that uses the AllJoyn framework.\n\u60a8\u7684\u7528\u6237\u4e0d\u518d\u9700\u8981\u5b89\u88c5\u548c\u8fd0\u884c\u540e\u53f0\u670d\u52a1\uff08\u5b88\u62a4\u8fdb\u7a0b\uff09\u6765\u8fd0\u884c\u4f7f\u7528 AllJoyn \u67b6\u6784\u7684\u5e94\u7528\u7a0b\u5e8f\u3002   Each application that you run will have its own built-in router.\n\u6bcf\u4e00\u4e2a\u60a8\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u6709\u4e00\u4e2a\u5b83\u4eec\u81ea\u5df1\u7684\u5185\u7f6e\u8def\u7531\u3002    On the command line, type the following commands to run\nthe AllJoyn application:\u5728\u547d\u4ee4\u884c\u4e2d\uff0c\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u8fd0\u884c AllJoyn \u5e94\u7528\u7a0b\u5e8f\uff1a    sh\n      $ cd  workspace /build/{OS}/{CPU}/{VARIANT}/dist/cpp/bin\n      {OS} = linux\n      {CPU} = x86 or x86-64\n      {VARIANT} = debug or release\n      $ ./bbservice -n com.test   Open another tab and type the following commands to run\nanother application:\u6253\u5f00\u53e6\u4e00\u4e2a\u6807\u7b7e\u5e76\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u8fd0\u884c\u53e6\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002   sh\n      $ cd  workspace /build/{OS}/{CPU}/{VARIANT}/dist/cpp/bin\n      $ ./bbclient -n com.test -d   Check for the following output on bbclient:\u5728 bbclient \u4e0a\u68c0\u67e5\u4ee5\u4e0b\u8f93\u51fa\uff1a   sh\n      Sending \"Ping String 1\" to org.alljoyn.alljoyn_test.my_ping synchronously\n         org.alljoyn.alljoyn_test.my_ping ( path=/org/alljoyn/alljoyn_test ) returned\n         \"Ping String 1\"",
            "title": "Running the AllJoyn Applications \u8fd0\u884c AllJoyn \u5e94\u7528\u7a0b\u5e8f"
        },
        {
            "location": "/develop/building/linux/build-source/#alljoyn-router-command-line-executable-alljoyn",
            "text": "\u6ce8\u610f:  Applies only to versions before 2.6.\u4ec5\u5bf9 2.6 \u4e4b\u524d\u7684\u7248\u672c\u751f\u6548\u3002  The concept of bundling a router with the application was\nintroduced in v2.6. Prior to this version, to run any AllJoyn\napplication, you needed to run the alljoyn-daemon first.\nv2.6 \u4e2d\u5f15\u5165\u4e86\u8def\u7531\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7ed1\u5b9a\u7684\u6982\u5ff5\u3002\u5728\u6b64\u7248\u672c\u4e4b\u524d\uff0c\u5728\u8fd0\u884c AllJoyn \u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u60a8\u9700\u8981\u9996\u5148\u8fd0\u884c alljoyn-daemon\u3002  As part of the build process, an executable for the alljoyn-daemon is built.\u4f5c\u4e3a\u751f\u6210\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u5efa\u7acb\u4e86 alljoyn-daemon \u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002   On the command line, type the following commands to run\nthe AllJoyn router as a separate process:\u5728\u547d\u4ee4\u884c\u4e2d\uff0c\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff0c\u4ee5\u5206\u79bb\u8fdb\u7a0b\u8fd0\u884c AllJoyn router\u3002   sh\n      $ cd  workspace /build/{OS}/{CPU}/{VARIANT}/dist/cpp/bin\n      $ ./alljoyn-daemon --internal \n   The options for the variables are as follows:\u53d8\u91cf\u7684\u53ef\u9009\u9879\u5982\u4e0b\uff1a  {OS} = linux\n   {CPU} = x86 or x86-64\n   {VARIANT} = debug or release  This starts the AllJoyn router with a built-in default\n   configuration. For most users the command listed is sufficient\n   to run the AllJoyn framework.\n   \u6b64\u65b9\u6cd5\u91c7\u7528\u9ed8\u8ba4\u914d\u7f6e\u5f00\u542f AllJoyn \u8def\u7531\u3002\u5bf9\u4e8e\u5927\u90e8\u5206\u7528\u6237\uff0c\u4ee5\u4e0a\u7684\u547d\u4ee4\u8db3\u591f\u8fd0\u884c AllJoyn \u67b6\u6784\u3002   Press  Ctrl-c  at any time to stop the alljoyn-daemon process.\u4efb\u610f\u65f6\u523b\u6309\u4e0b  Ctrl-c  \u505c\u6b62 alljoyn-daemon \u8fdb\u7a0b\u3002  To display other options, type the following:\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u663e\u793a\u5176\u4ed6\u9009\u9879\uff1a   ```sh\n      $ ./alljoyn-daemon -h    alljoyn-daemon [--config-file=FILE] [--print-address]\n  [--verbosity=LEVEL] [--no-bt] [--version]\n\n     --config-file=FILE\n        Use the specified configuration file.\n\n     --print-address\n        Print the socket address to STDOUT.\n\n     --no-bt\n        Disable the Bluetooth transport (override config file setting).\n\n     --verbosity=LEVEL\n        Set the logging level to LEVEL.\n\n     --version\n        Print the version and copyright string, and exit.  ```  For examples of different configuration files, see examples in:\u4ece\u4ee5\u4e0b\u4f4d\u7f6e\u83b7\u5f97\u4e0d\u540c\u914d\u7f6e\u6587\u4ef6\u7684\u793a\u4f8b\uff1a  workspace /alljoyn_core/daemon/test/conf.  \u6ce8\u610f:  Not all configuration files found in the daemon/test/conf\ndirectory are valid for use on a computer running Linux. \u4e0d\u662f\u6240\u6709\u5728 daemon/test/conf \u6587\u4ef6\u5939\u4e2d\u7684\u914d\u7f6e\u6587\u4ef6\u9002\u7528\u4e8e\u8fd0\u884c Linux \u7684\u7535\u8111\u3002  Verify that the router is running \u9a8c\u8bc1\u8def\u7531\u6b63\u5728\u5de5\u4f5c  Navigate to the projects samples directory and run the service\nand the client as follows:\u5bfc\u822a\u81f3\u5de5\u7a0b\u793a\u4f8b\u76ee\u5f55\u5e76\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u670d\u52a1\u548c\u5ba2\u6237\u7aef\uff1a  $ cd  workspace /build/{OS}/{CPU}/{VARIANT}/dist/cpp/bin/samples\n$ ./basic_service   #this will be a background process; it could be run on its own command-line\n$ ./basic_client  When the client runs, the following will display:\u5f53\u5ba2\u6237\u7aef\u5728\u8fd0\u884c\u65f6\uff0c\u4f1a\u663e\u793a\u4e0b\u8ff0\u8bed\u53e5\uff1a  AllJoyn Library version: v2.6.0\nAllJoyn Library build info: Alljoyn Library v2.6.0\n   (Built Wed Sep 02 23:30:23 UTC 2012\nInterface Created. BusAttachment started.\nBusAttachment connected to unix:abstract=alljoyn\nBusListener Registered.\nFoundAdvertisedName(name=org.alljoyn.Bus.sample,\nprefix=org.alljoyn.Bus.sample)\nJoinSession SUCCESS (Session id=-1126874739)\norg.alljoyn.Bus.sample.cat ( path=/sample) returned  Hello World! \nbasic client exiting with status 0 (ER_OK)",
            "title": "AllJoyn router command line executable AllJoyn \u8def\u7531\u547d\u4ee4\u884c\u53ef\u6267\u884c"
        },
        {
            "location": "/develop/building/linux/build-source/#running-unit-tests",
            "text": "\u6ce8\u610f:  The following instructions are valid only for the AllJoyn\nframework version 2.6 and newer.\u4ee5\u4e0b\u6307\u5bfc\u53ea\u9002\u7528\u4e8e v2.6 \u548c\u66f4\u9ad8\u7248\u672c\u7684 AllJoyn \u67b6\u6784\u3002  Running C++ unit tests \u8fd0\u884c C++ \u5355\u5143\u6d4b\u8bd5  If the  GTEST_DIR  option was specified when building the code,\nthe C++ unit tests will automatically be built and placed in\nthe following location:\n\u5982\u679c\u5728\u5efa\u7acb\u4ee3\u7801\u65f6\u5236\u5b9a\u4e86  GTEST_DIR  \u9009\u9879\uff0cC++ \u6d4b\u8bd5\u5355\u5143\u4f1a\u5728\u4ee5\u4e0b\u4f4d\u7f6e\u88ab\u81ea\u52a8\u5efa\u7acb\u3002  workspace /build/{OS}/{CPU}/{VARIANT}/test/cpp/bin.  There will be two executable files there: ajtest and cmtest.\u5c06\u4f1a\u6709\u4e24\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff1aajtest \u548c cmtest\u3002  cmtest  The cmtest executable tests the code from the common project\nand does not require the AllJoyn router to be running.\nRun cmtest as follows:\ncmtest \u6d4b\u8bd5\u5e38\u7528\u5de5\u7a0b\u7684\u4ee3\u7801\uff0c\u4e0d\u9700\u8981 AllJoyn \u8def\u7531\u7684\u8fd0\u884c\u3002cmtest \u8fd0\u884c\u5982\u4e0b\uff1a  workspace /build/{OS}/{CPU}/{VARIANT}/test/cpp/bin/cmtest  ajtest  The ajtest executable tests the code found in alljoyn_core.\nFor the tests to run successfully, an AllJoyn router must\nalso be running. Currently, ajtest is limited; it cannot test\nbus-to-bus (i.e., device-to-device) communication.\nRun ajtest as follows:\najtest \u6d4b\u8bd5 alljoyn_core \u4e2d\u7684\u4ee3\u7801\u3002\u4e3a\u4e86\u6d4b\u8bd5\u7684\u6210\u529f\u8fd0\u884c\uff0c\u5fc5\u987b\u8fd0\u884c AllJoyn \u8def\u7531\u5668\u3002\u76ee\u524d\uff0cajtest \u662f\u6709\u5c40\u9650\u6027\u7684\u3002\u5b83\u4e0d\u80fd\u6d4b\u8bd5\u603b\u7ebf\u5230\u603b\u7ebf\uff08\u5982\u8bbe\u5907\u5230\u8bbe\u5907\uff09\u7684\u8fde\u63a5\u3002ajtest \u8fd0\u884c\u5982\u4e0b\uff1a   Start the alljoyn-daemon (optional-see note below):\u5f00\u542f alljoyn-daemon(\u53ef\u9009\u67e5\u770b\u6ce8\u91ca)   sh\n       workspace /build/{OS}/{CPU}/{VARIANT}/dist/cpp/bin/alljoyn-daemon --internal   Run ajtest.\u8fd0\u884c ajtest\u3002   sh\n       workspace /build/{OS}/{CPU}/{VARIANT}/test/cpp/bin/ajtest  For all paths, replace {OS}, {CPU}, and {VARIANT} with the\nactual value used when the code was built (i.e., use the same OS,\nCPU, and VARIANT option specified when running SCons).\n\u5173\u4e8e\u8def\u5f84\uff0c\u4f7f\u7528\u8fd0\u884c SCons \u65f6\u7279\u5b9a\u7684 OS\uff0cCPU \u548c VARIANT \u66ff\u6362 {OS}\u3001{CPU} \u548c {VARIANT}\u3002  \u6ce8\u610f:  If the code was built using the bundled router\n(i.e., SCons flag BR=on), then ajtest can be run without\nfirst starting the separate alljoyn-daemon.\u5982\u679c\u91c7\u7528\u7ed1\u5b9a\u8def\u7531\u7684\u65b9\u5f0f\u6784\u5efa\u4ee3\u7801\uff08\u5982\uff0cSCons flag BR=on\uff09\uff0cajtest \u4e0d\u9700\u8981\u542f\u52a8\u5206\u79bb\u7684 alljoyn-daemon\u3002  Running the Java junit tests \u8fd0\u884c Java junit \u6d4b\u8bd5\u3002  The junit tests are always built at the same time as the Java\nbindings. The junit tests are specifically designed to test the\nJava bindings.junit \u6d4b\u8bd5\u603b\u662f\u548c Java \u7ed1\u5b9a\u540c\u65f6\u5b58\u5728\u3002junit \u6d4b\u8bd5\u4e13\u4e3a\u6d4b\u8bd5 Java \u7ed1\u5b9a\u800c\u8bbe\u8ba1\u3002   From the top build folder, use ant to start the test.\u4ece\u9876\u90e8\u5efa\u7acb\u6587\u4ef6\u5939\uff0c\u4f7f\u7528 ant \u5f00\u59cb\u6d4b\u8bd5\u3002   sh\n      ant test -DOS={OS} -DCPU={CPU} -DVARIANT={VARIANT}   Find the HTML version of the results in the following location:\u4ece\u4ee5\u4e0b\u4f4d\u7f6e\u7684\u7ed3\u679c\u4e2d\u83b7\u5f97 HTML \u7248\u672c\u3002   sh\n       workspace /build/{OS}/{CPU}/{VARIANT}/test/java/reports/junit/  For all paths and commands, replace {OS}, {CPU}, and {VARIANT}\n   with the actual value used when the code was built (i.e., use\n   the same OS, CPU, and VARIANT option specified when running SCons).",
            "title": "Running Unit Tests \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5"
        },
        {
            "location": "/develop/building/linux/build-source/#miscellaneous",
            "text": "Library liballjoyn.so not found  If the following error is returned:\u5982\u679c\u8fd4\u56de\u4ee5\u4e0b\u9519\u8bef\uff1a  error while loading shared libraries: liballjoyn.so:\ncannot open shared object file: No such file or directory  The SCons scripts build a shared library and link\nagainst that shared library. Add the library to the link path.\nSCons \u811a\u672c\u5efa\u7acb\u4e00\u4e2a\u5171\u4eab\u5e93\u5e76\u4e14\u4e0e\u4e4b\u8fdb\u884c\u8fde\u63a5\u3002\u628a\u8be5\u5e93\u52a0\u5165 link path\u3002  $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH: workspace /build/{OS}/{CPU}/\n   {VARIANT}/dist/cpp/lib  After adding the library LD_LIBRARY_PATH re-run the program\nthat produced the error.\n\u5728\u52a0\u5165\u4e86 library LD_LIBRARY_PATH \u540e\uff0c\u91cd\u65b0\u8fd0\u884c\u62a5\u9519\u7684\u7a0b\u5e8f\u3002  Additional projects \u989d\u5916\u5de5\u7a0b  The AllJoyn source code has other projects, such as alljoyn_js\n(javascript), and alljoyn_c (C bindings). These bindings are supported from\nversion 2.6 onward. The build instructions for these projects are outside the\nscope of this section. For more information, see https://allseenalliance.org.\nAllJoyn \u6e90\u4ee3\u7801\u5305\u542b\u5176\u5b83\u4ee3\u7801\uff0c\u5982 alljoyn-js(javascript) \u548c alljoyn_c (C bindings)\u3002\u81ea 2.6 \u7248\u672c\u4ee5\u6765\uff0c\u652f\u6301\u8fd9\u4e9b bindings\u3002\u8fd9\u4e9b\u5de5\u7a0b\u7684\u5efa\u7acb\u6307\u5bfc\u4e0d\u5728\u672c\u7ae0\u5185\u5bb9\u7684\u8303\u56f4\u4e4b\u5185\u3002\u6b32\u77e5\u8be6\u60c5\uff0c\u67e5\u770b https://allseenalliance.org\u3002",
            "title": "Miscellaneous"
        },
        {
            "location": "/develop/building/linux/",
            "text": "Building Linux\n\n\nSetup\n\n\nNOTE:\n The installation commands below refer specifically to\nDebian/Ubuntu Linux. Equivalent commands are available for other distributions of Linux.\n\n\n\n\nBuild tools and libs\n\n\n\n\nsudo apt-get install build-essential libgtk2.0-dev libssl-dev xsltproc ia32-libs libxml2-dev libcap-dev\n\n\n\n\n\n\nInstall Python v2.6/2.7 (Python v3.0 is not compatible and will cause errors)\n\n\n\n\nsudo apt-get install python\n\n\n\n\n\n\nInstall SCons v2.0\n\n\n\n\nsudo apt-get install scons\n\n\n\n\n\n\nOpenSSL\n\n\n\n\nsudo apt-get install libssl-dev\n\n\n\n\n\n\nDownload the \nAllJoyn Source zip\n and extract source. The tree\n  should look like below. Note, extra directories may exist.\n\n\n\n\nroot-source-dir/\n    core/\n        alljoyn/\n        ajtcl/\n    services/\n        base/\n        base_tcl/\n\n\n\n\nBuild Samples\n\n\ncd \nroot dir of source\n/core/alljoyn\nscons BINDINGS=cpp WS=off BT=off ICE=off SERVICES=\nabout,notification,controlpanel,config,onboarding,sample_apps\n\n\n\n\n\nBuild AC Server Sample\n\n\nThe AC Server Sample app uses all of the base services to simulate\nan AC device.\n\n\n# Note, exclude the \nbase\n dir for pre-14.06 source\ncd $AJ_ROOT/services/base/sample_apps\nscons BINDINGS=cpp WS=off ALL=1\n\n\n\n\nAdd the AllJoyn\n framework to an existing app\n\n\n\n\nSetup\n\n\n\n\n  export AJ_ROOT=~/alljoyn\n\n  # \nTARGET CPU\n can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  export AJ_DIST=\n$AJ_ROOT/core/alljoyn/build/linux/\nTARGET CPU\n/debug/dist\n\n\n\n\n\n\n\nAdd header include directories\n\n\n\n\nexport CXXFLAGS=\n$CXXFLAGS \\\n    -I$AJ_DIST/cpp/inc \\\n    -I$AJ_DIST/about/inc \\\n    -I$AJ_DIST/services_common/inc \\\n    -I$AJ_DIST/notification/inc \\\n    -I$AJ_DIST/controlpanel/inc \\\n    -I$AJ_DIST/services_common/inc \\\n    -I$AJ_DIST/samples_common/inc\n\n\n\n\n\n\n\nConfigure linker to include required libs\n\n\n\n\nexport LDFLAGS=\n$LDFLAGS \\\n    -L$AJ_DIST/cpp/lib \\\n    -L$AJ_DIST/about/lib \\\n    -L$AJ_DIST/services_common/lib \\\n    -L$AJ_DIST/notification/lib \\\n    -L$AJ_DIST/controlpanel/lib",
            "title": "Home"
        },
        {
            "location": "/develop/building/linux/#building-linux",
            "text": "",
            "title": "Building Linux"
        },
        {
            "location": "/develop/building/linux/#setup",
            "text": "NOTE:  The installation commands below refer specifically to\nDebian/Ubuntu Linux. Equivalent commands are available for other distributions of Linux.   Build tools and libs   sudo apt-get install build-essential libgtk2.0-dev libssl-dev xsltproc ia32-libs libxml2-dev libcap-dev   Install Python v2.6/2.7 (Python v3.0 is not compatible and will cause errors)   sudo apt-get install python   Install SCons v2.0   sudo apt-get install scons   OpenSSL   sudo apt-get install libssl-dev   Download the  AllJoyn Source zip  and extract source. The tree\n  should look like below. Note, extra directories may exist.   root-source-dir/\n    core/\n        alljoyn/\n        ajtcl/\n    services/\n        base/\n        base_tcl/",
            "title": "Setup"
        },
        {
            "location": "/develop/building/linux/#build-samples",
            "text": "cd  root dir of source /core/alljoyn\nscons BINDINGS=cpp WS=off BT=off ICE=off SERVICES= about,notification,controlpanel,config,onboarding,sample_apps",
            "title": "Build Samples"
        },
        {
            "location": "/develop/building/linux/#build-ac-server-sample",
            "text": "The AC Server Sample app uses all of the base services to simulate\nan AC device.  # Note, exclude the  base  dir for pre-14.06 source\ncd $AJ_ROOT/services/base/sample_apps\nscons BINDINGS=cpp WS=off ALL=1",
            "title": "Build AC Server Sample"
        },
        {
            "location": "/develop/building/linux/#add-the-alljoyn-framework-to-an-existing-app",
            "text": "Setup     export AJ_ROOT=~/alljoyn\n\n  #  TARGET CPU  can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  export AJ_DIST= $AJ_ROOT/core/alljoyn/build/linux/ TARGET CPU /debug/dist    Add header include directories   export CXXFLAGS= $CXXFLAGS \\\n    -I$AJ_DIST/cpp/inc \\\n    -I$AJ_DIST/about/inc \\\n    -I$AJ_DIST/services_common/inc \\\n    -I$AJ_DIST/notification/inc \\\n    -I$AJ_DIST/controlpanel/inc \\\n    -I$AJ_DIST/services_common/inc \\\n    -I$AJ_DIST/samples_common/inc    Configure linker to include required libs   export LDFLAGS= $LDFLAGS \\\n    -L$AJ_DIST/cpp/lib \\\n    -L$AJ_DIST/about/lib \\\n    -L$AJ_DIST/services_common/lib \\\n    -L$AJ_DIST/notification/lib \\\n    -L$AJ_DIST/controlpanel/lib",
            "title": "Add the AllJoyn&trade; framework to an existing app"
        },
        {
            "location": "/develop/building/linux/openwrt/",
            "text": "Building OpenWRT\n\n\nThe AllJoyn\n framework feeds exist on the following OpenWRT platform releases:\n\n\n\n\nv12.09 - official tagged release\n\n\nAttitude Adjustment - current stable release\n\n\nBarrier breaker - current development version\n\n\n\n\nBuild and Install the AllJoyn framework\n\n\nFollow these instructions to add the AllJoyn framework to your OpenWRT environment.\n\n\nPatch OpenSSL\n\n\n\n\n\n\nFor Attitude Adjustment, use \n39585\n or later, or apply\n  \npatch 4802\n (The 12.09 tagged release requires this \n  patch. The latest version on the Attitude Adjustment branch already\n  has the patch applied.)\n\n\n\n\n\n\nFor Barrier Breaker, use \n39048\n or later, or apply\n  \npatch 4576\n (The latest version of Barrier Breaker, aka\n  trunk, already has the patch applied.)\n\n\n\n\n\n\nEdit Feed\n\n\nAdd \nonly one\n of these lines to your feeds.conf:\n\n\n\n\nFor the official OpenWrt v12.09 tagged release\n\n\n\n\nsh\n  src-git alljoyn https://git.allseenalliance.org/gerrit/core/openwrt_feed;openwrt_12.09\n\n\n\n\nFor Attitude Adjustment\n\n\n\n\nsh\n  src-git alljoyn https://git.allseenalliance.org/gerrit/core/openwrt_feed;attitude_adjustment\n\n\n\n\nFor Barrier Breaker\n\n\n\n\nsh\n  src-git alljoyn https://git.allseenalliance.org/gerrit/core/openwrt_feed;barrier_breaker\n\n\nUpdate Feeds\n\n\n./scripts/feeds update -a\n\n\n\n\nInstall the AllJoyn package definitions\n\n\n./scripts/feeds install -a -p alljoyn\n\n\n\n\nEnable the AllJoyn packages to build\n\n\nmake menuconfig\n        Networking ---\n\n                \n \n alljoyn ---\n\n                        \n \n alljoyn-about\n                        \n \n alljoyn-c\n                        \n \n alljoyn-config ---\n\n                                \n \n alljoyn-config-samples\n                        \n \n alljoyn-controlpanel ---\n\n                                \n \n alljoyn-controlpanel-samples\n                        \n \n alljoyn-notification ---\n\n                                \n \n alljoyn-notification-samples\n                        \n \n alljoyn-sample_apps\n                        \n \n alljoyn-services_common\n\n\n\n\nInstall the AllJoyn framework\n\n\nIf you built the AllJoyn framework as a module, move those IPKs over to\nyour OpenWRT device and run \nopkg install \nalljoyn-package\n.\n\n\nIf you built the AllJoyn framework directly into the image, simply flash \nthe new firmware onto your OpenWRT device.\n\n\nAllJoyn libs will be installed in \n/usr/lib/\n and binaries\nwill be installed in \n/usr/bin/\n.\n\n\nRun the AllJoyn framework\n\n\nStart the AllJoyn framework\n\n\nStart the AllJoyn daemon\n\n\n/etc/init.d/alljoyn start\n\n\n\n\nOptionally, enable the AllJoyn daemon to start at boot-up.\n\n\n/etc/init.d/alljoyn enable\n\n\n\n\nRun Sample Apps\n\n\nFollow the Linux instructions to \nrun sample apps\n.\nNote that since AllJoyn binaries and libs are installed in \n/usr/bin/\n \nand \n/usr/lib/\n, that the AllJoyn apps can run directly from any path\nwithout setting \nLD_LIBRARY_PATH\n.",
            "title": "Openwrt"
        },
        {
            "location": "/develop/building/linux/openwrt/#building-openwrt",
            "text": "The AllJoyn  framework feeds exist on the following OpenWRT platform releases:   v12.09 - official tagged release  Attitude Adjustment - current stable release  Barrier breaker - current development version",
            "title": "Building OpenWRT"
        },
        {
            "location": "/develop/building/linux/openwrt/#build-and-install-the-alljoyn-framework",
            "text": "Follow these instructions to add the AllJoyn framework to your OpenWRT environment.  Patch OpenSSL    For Attitude Adjustment, use  39585  or later, or apply\n   patch 4802  (The 12.09 tagged release requires this \n  patch. The latest version on the Attitude Adjustment branch already\n  has the patch applied.)    For Barrier Breaker, use  39048  or later, or apply\n   patch 4576  (The latest version of Barrier Breaker, aka\n  trunk, already has the patch applied.)    Edit Feed  Add  only one  of these lines to your feeds.conf:   For the official OpenWrt v12.09 tagged release   sh\n  src-git alljoyn https://git.allseenalliance.org/gerrit/core/openwrt_feed;openwrt_12.09   For Attitude Adjustment   sh\n  src-git alljoyn https://git.allseenalliance.org/gerrit/core/openwrt_feed;attitude_adjustment   For Barrier Breaker   sh\n  src-git alljoyn https://git.allseenalliance.org/gerrit/core/openwrt_feed;barrier_breaker  Update Feeds  ./scripts/feeds update -a  Install the AllJoyn package definitions  ./scripts/feeds install -a -p alljoyn  Enable the AllJoyn packages to build  make menuconfig\n        Networking --- \n                    alljoyn --- \n                            alljoyn-about\n                            alljoyn-c\n                            alljoyn-config --- \n                                    alljoyn-config-samples\n                            alljoyn-controlpanel --- \n                                    alljoyn-controlpanel-samples\n                            alljoyn-notification --- \n                                    alljoyn-notification-samples\n                            alljoyn-sample_apps\n                            alljoyn-services_common  Install the AllJoyn framework  If you built the AllJoyn framework as a module, move those IPKs over to\nyour OpenWRT device and run  opkg install  alljoyn-package .  If you built the AllJoyn framework directly into the image, simply flash \nthe new firmware onto your OpenWRT device.  AllJoyn libs will be installed in  /usr/lib/  and binaries\nwill be installed in  /usr/bin/ .",
            "title": "Build and Install the AllJoyn framework"
        },
        {
            "location": "/develop/building/linux/openwrt/#run-the-alljoyn-framework",
            "text": "Start the AllJoyn framework  Start the AllJoyn daemon  /etc/init.d/alljoyn start  Optionally, enable the AllJoyn daemon to start at boot-up.  /etc/init.d/alljoyn enable  Run Sample Apps  Follow the Linux instructions to  run sample apps .\nNote that since AllJoyn binaries and libs are installed in  /usr/bin/  \nand  /usr/lib/ , that the AllJoyn apps can run directly from any path\nwithout setting  LD_LIBRARY_PATH .",
            "title": "Run the AllJoyn framework"
        },
        {
            "location": "/develop/building/windows/build-source/",
            "text": "Building from Source on Windows\n\n\nConfiguring a Windows-Specific Environment\n\n\nIt is recommended to note the install location of each tool \ndiscussed in this section to complete the system configuration.\n\n\nMicrosoft Visual Studio 2012, 2013, or 2015\n\n\nYou should have at least one version of Microsoft Visual Studio \ninstalled on your system. Visual Studio 2010 is no longer officially\nsupported.\n\n\nPython 2.7.10 for Windows\n\n\nNOTE:\n Python 2.7.9 may also be used. Use the 32-bit version of \nPython even if you are building the AllJoyn\n framework for a 64-bit architecture.\n\n\n\n\nOpen a browser and navigate to http://www.python.org/download/.\n\n\nFrom the Python web page, select \nPython 2.7.10 Windows Installer (32-bit)\n.\n\n\nClick \nRun\n and \nRun\n again. The Python setup wizard appears.\n\n\nClick \nFinish\n, \nYes\n, and \nFinish\n again.\n\n\n\n\nSCons 2.3.4 for Windows\n\n\nNOTE:\n SCons 1.3.0 may also be used.\n\n\n\n\nOpen a browser and navigate to http://www.scons.org.\n\n\nFrom the SCons web page, under 'Scons 2.3.4 is available', click the \ndownload page\n link.\n\n\nSelect \"Download scons-2.3.4-setup.exe\", and click \nRun\n and \nRun\n again. The setup wizard appears.\n\n\nProceed through the wizard steps to complete the SCons installation.\n\n\n\n\nMsysgit version 1.9.5 for Windows\n\n\n\n\nOpen a browser and navigate to http://code.google.com/p/msysgit/downloads/list.\n\n\nFrom the msysgit web page, click the most recent version of git Installer for Windows.\n\n\nDownload the file, click Run and Run again. The setup wizard appears.\n\n\nProceed through the wizard steps to complete the git installation.\n\n\n\n\nUncrustify version 0.61 for Windows\n\n\nUncrustify is a formatting tool for source code.\n\n\n\n\nOpen a browser and navigate to \nhttp://sourceforge.net/projects/uncrustify/files/uncrustify/uncrustify-0.61/.\n\n\nFrom the Uncrustify Code Beautifier web page, click \nuncrustify-0.61.3-gf65394e-win32.zip\n.\n\n\nDownload \nuncrustify-0.61.3-gf6594e-win32.zip\n and unzip.\n\n\nMove the contents to \nC:\\uncrustify-0.61-win32\n.\n\n\n\n\nDoxygen for Windows\n\n\nDoxygen generates documentation from source code. This tool is \noptional, but is required for creating documentation.\n\n\n\n\nOpen a browser and navigate to\nhttp://www.stack.nl/~dimitri/doxygen/download.html#latestsrc.\n\n\nFrom the Doxygen web page, under \nDoxygen source and binary releases\n \nand \nWindows XP/Vista/7\n, select \nhttp\n, click \nRun\n, \nthen \nYes\n. The setup wizard appears.\n\n\nProceed through the wizard steps to complete the Doxygen installation.\n\n\n\n\nGraphviz 2.30.1 for Windows\n\n\nGraph visualization is a way of representing structural \ninformation as diagrams of abstract graphs and networks. \nThis tool is optional, but is required for creating documentation.\n\n\n\n\nOpen a browser and navigate to http://www.graphviz.org/Download_windows.php\n\n\nFrom the download to Windows, click \ngraphviz-2.30.1.msi\n and then \nRun\n.\n\n\nClick \nRun\n again. The setup wizard appears.\n\n\nProceed through the wizard steps to complete the Graphviz installation.\n\n\n\n\nMiKTeX\n\n\nMiKTeX is used to create LaTeX binaries and Windows style sheets.\n\n\nIMPORTANT:\n Install MiKTeX ONLY if you need to produce a PDF version of an API document.\n\n\n\n\nOpen a browser and navigate to http://www.miktex.org/2.8/setup.\n\n\nFrom the MiKTeX web page, under \nInstalling a basic MiKTeX system\n, click \nDownload\n.\n\n\nClick \nRun\n. The Copying Conditions appear.\n\n\nClick \nI accept the MiKTeX copying conditions\n and click \nNext\n.\n\n\nProceed through the install steps to complete the MiKTeX installation.\n\n\n\n\nJava Development Kit (JDK)\n\n\nThe JDK is required to build Java bindings. Building the Java \nbindings is optional, but if you want to build them, you need the JDK.\n\n\nJDK SE6\n\n\n\n\nOpen a browser and navigate to\nhttp://www.oracle.com/technetwork/java/javase/downloads/jdk6downloads-1902814.html.\n\n\nDownload JDK 6u43 for your version of Windows.\n\n\n\n\nJDK SE5\n\n\n\n\nOpen a browser and navigate to\nhttp://www.oracle.com/technetwork/java/javase/downloads/index-jdk5-jsp-142662.html.\n\n\nFind \nJDK5.0 update 22\n and click \nDownload\n.\n\n\nDownload the JDK installer for your version of Windows.\n\n\n\n\njunit\n\n\nRequired to build Java bindings.\n\n\n\n\nOpen a browser and navigate to\nhttps://github.com/junit-team/junit/wiki/Download-and-Install.\n\n\nDownload the Plain-old JAR (\njunit.jar\n) v4.11.\n\n\nPlace the jar file in a known location (e.g., \nC:\\junit\\junit-4.11.jar\n).\n\n\n\n\ngoogletest\n\n\nGoogle Test is Google's framework for writing C++ tests. \nGoogle Test is an xUnit testing architecture used to test \nthe native AllJoyn framework C++ APIs. Google Test is optional, \nbut is required for building the C++ unit tests.\n\n\n\n\nOpen a browser and navigate to http://code.google.com/p/googletest/downloads/list.\n\n\nFrom the googletest download page download \ngtest-1.7.0.zip\n.\n\n\nUnzip the contents of \ngtest-1.7.0.zip\n to a known location \n(e.g., \nC:\\gtest\\gtest-1.7.0\n).\n\n\n\n\nApache Ant\n\n\nApache Ant is a Java library and command line tool for \nbuilding software. This tool is optional, but is required \nfor running junit tests.\n\n\n\n\nOpen a browser and navigate to http://ant.apache.org/bindownload.cgi.\n\n\nFrom the Apache Ant web page, download \napache-ant-1.9.0-bin.zip\n.\n\n\nUnzip the contents of \napache-ant-1.9.0-bin.zip\n to a \nknown location (e.g., \nC:\\apache-ant-1.9.0\n).\n\n\n\n\nAdding environment variables\n\n\n\n\nClick \nStart\n.\n\n\nRight-click \nComputer\n.\n\n\nSelect \nProperties\n.\n\n\nSelect \nAdvanced system settings\n from the left pane (Windows 7).\n\n\nSelect the \nAdvanced\n tab.\n\n\nClick \nEnvironment Variables\n.\n\n\nUnder the User variables, search for 'PATH'.\n\n\n\n\nNOTE:\n There is a 'Path' variable under System variables, \n   which you could add to; however, it is considered good \n   practice to add new variables to User variables.\n\n\n\n\n\n\nIf there is no 'PATH' under User variables, click \nNew\n. \n\n\n\n\nEnter PATH as the variable name.\n\n\nAppend the following to the %PATH% variable, separated \n  by a semicolon (adjust the path of each item, as necessary, \n  to account for the install location):\n\n\n\n\nbat\n  C:\\Python27;C:\\Python27\\Scripts;C:\\Program Files\\doxygen\\bin;\n  C:\\Program Files\\Git\\cmd;C:\\uncrustify-0.61-win32\n\n\n\n\n\n\nIf there is a 'PATH' under User variables, select it, and click \nEdit\n.\n\n\nAppend the following to the %PATH% variable, separated by a \n  semicolon (adjust the path of each item, as necessary, \n  to account for the install location):\n\n\nbat\n  C:\\Python27;C:\\Python27\\Scripts;C:\\Program Files\\doxygen\\bin;\n  C:\\Program Files\\Git\\cmd;C:\\uncrustify-0.61-win32\n\n\n\n\n\n\nIf you are generating the API documentation using Doxygen:\n\n\n\n\nAdd a 'New...' User variable DOXYGEN_HOME. \n\n\nSet \nDOXYGEN_HOME=C:\\PROGRA~1\\doxygen\n.\n\n\nAdd a 'New...' User variable GRAPHVIZ_HOME.\n\n\nSet \nGRAPHVIZ_HOME=C:\\PROGRA~1\\Graphviz 2.30.1\n.\n\n\nIf you are building the AllJoyn Java bindings:\n\n\nAdd a 'New...' User variable JAVA_HOME.\n\n\nSet \nJAVA_HOME=C:\\PROGRA~1\\Java\\jdk1.6.0_43\n. \n\n\nAdd a 'New...' User Variable CLASSPATH.\n\n\nSet \nCLASSPATH=C:\\junit\\junit-4.11.jar\n.\n\n\nIf you are using Apache Ant, use your personal install \ndirectories:\n\n\nAdd a 'New' User variable ANT_HOME.\n\n\nSet \nANT_HOME=C:\\apache-ant-1.9.0\n.\n\n\n\n\nAdd the following to the %PATH% variable:\n\n\nbat\n  %ANT_HOME%\\bin\n\n\n\n\n\n\nVerify installation\n\n\nOpen the command window, and check that you can run the \nfollowing commands:\n\n\nC:\\\npython --version\nPython 2.7.10\n\nC:\\\nscons --version\nSCons by Steven Knight et al.: engine: v2.3.4, 2014/09/27 12:51:43, by garyo on lubuntu\nCopyright (c) 2001 - 2014 The SCons Foundation\n\nC:\\\ngit --version\ngit version 1.9.5.msysgit.0\n\nC:\\\ndoxygen --version\n1.7.4\n\nC:\\\ndot -V\ndot - graphviz version 2.26.3 (20100126.1600)\n\nC:\\\nuncrustify -v\nuncrustify 0.61\n\n\n\n\nObtaining AllJoyn source code from the Git repository\n\n\nObtain a copy of each repository using the \ngit clone\n command.\n\n\n\n\nCreate a workspace for the AllJoyn project.\n\n\n\n\n```bat\n   C:>mkdir allseen\n   C:>cd allseen\n\n\nC:>mkdir core\n   C:>cd core\n\n\nC:>mkdir alljoyn\n   C:>cd alljoyn\n   ```\n\n\n\n\nMake a clone of the Git repository associated with the AllJoyn project.\n\n\n\n\nbat\n   c:\\allseen\\core\\alljoyn\n git clone \n   https://git.allseenalliance.org/gerrit/core/alljoyn.git\n\n\nCRLF issues when using msysgit\n\n\nIf you have just checked out the repository, msysgit sees issues \nthat deal with the end-of-line symbol. This is an issue from going \nback and forth between Linux and Windows, where the expected \nline-feed in Windows is CRLF, and in Linux it is simply CR. \nmsysgit reports that a freshly checked out file has been \nmodified and does not let you pull from the repository, \ncheck the files, or even merge changes. The current solution \nis to tell git to ignore the CRLF issues using the following command:\n\n\ngit config core.autocrlf false\n\n\n\n\nBuild the AllJoyn Framework\n\n\nUse the following instructions to build the AllJoyn project.\n\n\n\n\nFrom the command line, go to the AllJoyn allseen folder. \nThe path used here is just an example.\n\n\n\n\nbat\n   cd c:\\allseen\\core\\alljoyn\n\n\n\n\nRun the appropriate command from the list below to build \nthe AllJoyn framework for Windows. Use 'scons -h' for some \nbasic settings. In the examples below, any of the scons \nvariables default values can be set as environment variables.\n\n\n\n\nBuilding for Windows 7\n\n\nFor 32-bit x86 target using Visual Studio 2013:\n\n\nC:\\\ncd allseen\\core\\alljoyn\nC:\\allseen\\core\\alljoyn\nscons OS=win7 CPU=x86 MSVC_VERSION=12.0 BINDINGS=cpp\n\n\n\n\nFor 64-bit x86-64 target: using Visual Studio 2013\n\n\nC:\\\ncd allseen\\core\\alljoyn\nC:\\allseen\\core\\alljoyn\nscons OS=win7 CPU=x86_64 MSVC_VERSION=12.0 BINDINGS=cpp\n\n\n\n\nNOTE:\n If you are using Windows 7, you may need to run SCons as administrator.\n\n\nBuild variants\n\n\nBuilding in \"release mode\" removes all symbol information \nand enables code optimization. To build in release mode, \nadd the VARIANT build option to your scons command line. \nThe values are:\n\n\n\n\ndebug - (default value) Build the debug variant with all \nsymbol information and improved logging features for the \nAllJoyn framework.\n\n\nrelease - Build the release variant of the code. This will \nbe optimized for code size. It will not include symbol \ninformation and will only log critical errors associated \nwith the AllJoyn framework.\n\n\n\n\nExample:\n\n\nscons OS=win7 CPU=x86 VARIANT=release MSVC_VERSION=12.0 BINDINGS=cpp\n\n\n\n\nalljoyn_java\n\n\nWhen building the Java code for the AllJoyn framework, use \nthe same command as building the AllJoyn core for Windows. \nThe only difference is it must be done from the root \nallseen\\core\\alljoyn\n \nfolder or the \nalljoyn_java\n folder, not the \nalljoyn_core\n folder. \nTo build the Java code, SCons needs to know where the Java \ntools and junit are located.\n\n\nSet an environment variable to tell scons the location of the build tools:\n\n\nset JAVA_HOME=\nC:\\Program Files\\Java\\jdk1.6.0_43\n\n\n\n\n\nHere is the path used on a development setup:\n\n\nset CLASSPATH=\nC:\\junit\\junit-4.11.jar\n\n\n\n\n\nNOTE:\n These environment variables are already set if you \nfollowed the instructions in [Adding environment variables][adding-environment-variables].\n\n\nAs noted, to build Java code, use the same commands as were \nused to make AllJoyn core for Windows; e.g., a Java for Windows \nrelease variant. For example:\n\n\nscons OS=win7 CPU=x86_64 VARIANT=release MSVC_VERSION=12.0 BINDINGS=core,java\n\n\n\n\nWhitespace options\n\n\nThe AllJoyn build environment uses uncrustify and a python \nscript that are automatically run each time the AllJoyn \nframework is built.\n\n\nIf source code is found that does not match the AllJoyn coding\nguidelines and whitespace checking is enabled, the build will fail\nwhen it runs the whitespace script. The WS option controls the\nbehavior of the whitespace checker.\n\n\nThe values of the WS option are:\n\n\n\n\noff - (Default) Don't check the code for adherence to the \nAllJoyn whitespace policy. Example:\n\n\ncheck - This option will check the code \nto see if it adheres to the AllJoyn white space policy.\n\n\ndetail - Display what changes are needed to make the \ncode adhere to the AllJoyn white space policy.\n\n\nfix - Modify the code to use the AllJoyn white space \npolicy. This will automatically apply the changes that \nare shown when using the detail option.\n\n\n\n\nExample:\n  \nbat\n  scons OS=win7 CPU=x86_64 MSVC_VERSION=12.0 WS=off BINDINGS=cpp,java\n\n\nGenerating API documentation\n\n\nBy default the Java API documentation will always build \nwhen building the Java bindings; this is not the default \nbehavior for the C++ API documentation. Since the documentation \nfor the C++ API requires Doxygen and Graphviz to be installed \non your system, it is not built by default. Use the DOCS option \nto generate the C++ API documentation.\n\n\nThe values are:\n\n\n\n\nnone - (default option) Do not generate the API documentation.\n\n\nhtml - (recommended option if documentation is desired ) \nProduce an HTML version of the API documentation. This is what \nis published to www.allseenalliance.org. The output can be \nfound in \nallseen\\core\\alljoyn\n\\alljoyn_core\\docs\\html\\index.html\n.\n\n\npdf - Produce a PDF form of the document. If you are unable \nto build the HTML form of the documentation the PDF form will \nnot build. The resulting document can be found in \n\nallseen\\core\\alljoyn\n\\alljoyn_core\\docs\\html\\refman.pdf\n.\n\n\ndev - Produce HTML documentation for the entire AllJoyn \ncodebase, not just the public APIs. When Doxygen runs using \nthis command, it produces a lot of warnings and will generate \ndocumentation for methods and functions that should only be \nused inside AllJoyn code and not in any other projects. \nThis option is for people developing AllJoyn code, not for \npeople using the AllJoyn framework to develop other applications. \nThe output will override the output from the HTML option.\n\n\n\n\nExample:\n\n\nscons OS=win7 CPU=x86_64 MSVC_VERSION=12.0 DOCS=html BINDINGS=cpp,java\n\n\n\n\nSpecifying the Microsoft Visual C++ version\n\n\nTo build in Windows, you are required to have at least one \nversion of Microsoft Visual C++ installed on your system. \nAt this time, only Microsoft compilers can be used to build \nAllJoyn applications. Use the MSVC_VERSION to specify what \nversion of Microsoft Visual C++ you are using.\n\n\nThe values are:\n\n\n\n\n11.0 - Use Microsoft Visual C++ 2012\n\n\n11.0Exp - Use Microsoft Visual C++ 2012 Express Edition\n\n\n12.0 - (Default) Use Microsoft Visual C++ 2013\n\n\n12.0Exp - Use Microsoft Visual C++ 2013 Express Edition\n\n\n14.0 - Use Microsoft Visual C++ 2015\n\n\n14.0Exp - Use Microsoft Visual C++ 2015 Express Edition\n\n\n\n\nBuild C++ unit tests\n\n\nThe AllJoyn framework now includes a basic set of unit tests \nthat are built using the Google Test code. To build the unit \ntest, you must specify the location of the Google Test \nsource code that was obtained in googletest. Use the \nGTEST_DIR\n \noption to specify the location of Google Test source code.\n\n\nExample:\n\n\nscons OS=win7 CPU=x86_64 MSVC_VERSION=12.0 GTEST_DIR=c:\\gtest\\gtest-1.7.0\nBINDINGS=cpp\n\n\n\n\nVerify that the AllJoyn project is built properly\n\n\n\n\nFrom the command line, navigate to:\n\n\n\n\nbat\n   \nallseen\\core\\alljoyn\n\\build{OS}{CPU}{VARIANT}\\dist\\cpp\\bin\\samples\n\n\n\n\nRun \nbasic_service.exe\n on one command line.\n\n\nRun \nbasic_client.exe\n on another command line.\n\n\n\n\nWhen the client runs, the following will display: \n   (Output may vary slightly from what is shown)\n\n\nAllJoyn Library version: v3.2.0\n   AllJoyn Library build info: Alljoyn Library v3.2.0 (Built Fri Jan 18 16:50:19 UTC\n   2013)\n   Interface Created. BusAttachment started. \n   Initialized winsock \n   Using BundledRouter\n   AllJoyn Daemon GUID = e467f6278e751dda9ebe877c612e66a0 (adsdErTQ) \n   BusAttchement connected to tcp:addr=127.0.0.1,port=9956\n   BusListener Registered.\n   FoundAdvertisedName(name=org.alljoyn.Bus.sample, prefix=org.alljoyn.Bus.sample) \n   NameOwnerChanged: name=org.alljoyn.Bus.sample, oldOwner=\nnone\n, \n   newOwner=:5xRgxpvD.2\n   JoinSession SUCCESS (Session id=500568462)\n   org.alljoyn.Bus.sample.cat ( path=/sample) returned \"Hello World!\"\n\n\nRunning Unit Tests\n\n\nRunning C++ unit tests\n\n\nIf the \nGTEST_DIR\n option was specified when building the code, \nthe C++ unit test will automatically be built and placed in \nthe following location: \nbuild\\{OS}\\{CPU}\\{VARIANT}\\test\\cpp\\bin\n. \nThere will be two executable files there: \ncmtest\n and \najtest\n.\n\n\nFor all paths, replace \n{OS}\n, \n{CPU}\n, and \n{VARIANT}\n with the \nactual value used when the code was built (i.e., use the \nsame \nOS\n, \nCPU\n, and \nVARIANT\n option specified when running SCons).\n\n\ncmtest\n\n\nThe cmtest executable, tests the code from the common project \nand does not require the AllJoyn router to be running. \nRun cmtest as follows: \n\n\nbuild\\{OS}\\{CPU}\\{VARIANT}\\test\\cpp\\bin\\cmtest.exe\n\n\n\n\najtest\n\n\nThe ajtest executable tests the code found in alljoyn_core. \nFor the tests to run successfully, an AllJoyn router must \nalso be running. Currently \najtest\n is limited, it cannot \ntest bus-to-bus (i.e., device-to-device) communication. \n\n\nRun ajtest as follows:\n\n\nbuild\\{OS}\\{CPU}\\{VARIANT}\\test\\cpp\\bin\\ajtest.exe\n\n\n\n\nRunning the Java junit tests\n\n\nThe junit tests are always built the same time as the Java bindings. \nThe junit tests are specifically designed to test the Java bindings.\n\n\n\n\nCopy and rename from \nalljoyn_java\\ build.xml.top\n to the \ntop \nbuild.xml\n folder.\n\n\n\n\nbat\n   copy alljoyn_java\\build.xml.top build.xml\n\n\n\n\nFrom the top build folder use ant to start the test.\n\n\n\n\nbat\n   ant test -DOS={OS} -DCPU={CPU} -DVARIANT={VARIANT}\n\n\n\n\nhtml version of the results can be found in this location:\n\n\n\n\nbat\n   build\\{OS}\\{CPU}\\{VARIANT}\\test\\java\\reports\\junit\\\n\n\nFor all paths and commands, replace {OS}, {CPU}, and {VARIANT} \nwith the actual value used when the code was built \n(i.e., use the same OS, CPU, and VARIANT option specified \nwhen running SCons).",
            "title": "Build source"
        },
        {
            "location": "/develop/building/windows/build-source/#building-from-source-on-windows",
            "text": "",
            "title": "Building from Source on Windows"
        },
        {
            "location": "/develop/building/windows/build-source/#configuring-a-windows-specific-environment",
            "text": "It is recommended to note the install location of each tool \ndiscussed in this section to complete the system configuration.  Microsoft Visual Studio 2012, 2013, or 2015  You should have at least one version of Microsoft Visual Studio \ninstalled on your system. Visual Studio 2010 is no longer officially\nsupported.  Python 2.7.10 for Windows  NOTE:  Python 2.7.9 may also be used. Use the 32-bit version of \nPython even if you are building the AllJoyn  framework for a 64-bit architecture.   Open a browser and navigate to http://www.python.org/download/.  From the Python web page, select  Python 2.7.10 Windows Installer (32-bit) .  Click  Run  and  Run  again. The Python setup wizard appears.  Click  Finish ,  Yes , and  Finish  again.   SCons 2.3.4 for Windows  NOTE:  SCons 1.3.0 may also be used.   Open a browser and navigate to http://www.scons.org.  From the SCons web page, under 'Scons 2.3.4 is available', click the  download page  link.  Select \"Download scons-2.3.4-setup.exe\", and click  Run  and  Run  again. The setup wizard appears.  Proceed through the wizard steps to complete the SCons installation.   Msysgit version 1.9.5 for Windows   Open a browser and navigate to http://code.google.com/p/msysgit/downloads/list.  From the msysgit web page, click the most recent version of git Installer for Windows.  Download the file, click Run and Run again. The setup wizard appears.  Proceed through the wizard steps to complete the git installation.   Uncrustify version 0.61 for Windows  Uncrustify is a formatting tool for source code.   Open a browser and navigate to \nhttp://sourceforge.net/projects/uncrustify/files/uncrustify/uncrustify-0.61/.  From the Uncrustify Code Beautifier web page, click  uncrustify-0.61.3-gf65394e-win32.zip .  Download  uncrustify-0.61.3-gf6594e-win32.zip  and unzip.  Move the contents to  C:\\uncrustify-0.61-win32 .   Doxygen for Windows  Doxygen generates documentation from source code. This tool is \noptional, but is required for creating documentation.   Open a browser and navigate to\nhttp://www.stack.nl/~dimitri/doxygen/download.html#latestsrc.  From the Doxygen web page, under  Doxygen source and binary releases  \nand  Windows XP/Vista/7 , select  http , click  Run , \nthen  Yes . The setup wizard appears.  Proceed through the wizard steps to complete the Doxygen installation.   Graphviz 2.30.1 for Windows  Graph visualization is a way of representing structural \ninformation as diagrams of abstract graphs and networks. \nThis tool is optional, but is required for creating documentation.   Open a browser and navigate to http://www.graphviz.org/Download_windows.php  From the download to Windows, click  graphviz-2.30.1.msi  and then  Run .  Click  Run  again. The setup wizard appears.  Proceed through the wizard steps to complete the Graphviz installation.   MiKTeX  MiKTeX is used to create LaTeX binaries and Windows style sheets.  IMPORTANT:  Install MiKTeX ONLY if you need to produce a PDF version of an API document.   Open a browser and navigate to http://www.miktex.org/2.8/setup.  From the MiKTeX web page, under  Installing a basic MiKTeX system , click  Download .  Click  Run . The Copying Conditions appear.  Click  I accept the MiKTeX copying conditions  and click  Next .  Proceed through the install steps to complete the MiKTeX installation.   Java Development Kit (JDK)  The JDK is required to build Java bindings. Building the Java \nbindings is optional, but if you want to build them, you need the JDK.  JDK SE6   Open a browser and navigate to\nhttp://www.oracle.com/technetwork/java/javase/downloads/jdk6downloads-1902814.html.  Download JDK 6u43 for your version of Windows.   JDK SE5   Open a browser and navigate to\nhttp://www.oracle.com/technetwork/java/javase/downloads/index-jdk5-jsp-142662.html.  Find  JDK5.0 update 22  and click  Download .  Download the JDK installer for your version of Windows.   junit  Required to build Java bindings.   Open a browser and navigate to\nhttps://github.com/junit-team/junit/wiki/Download-and-Install.  Download the Plain-old JAR ( junit.jar ) v4.11.  Place the jar file in a known location (e.g.,  C:\\junit\\junit-4.11.jar ).   googletest  Google Test is Google's framework for writing C++ tests. \nGoogle Test is an xUnit testing architecture used to test \nthe native AllJoyn framework C++ APIs. Google Test is optional, \nbut is required for building the C++ unit tests.   Open a browser and navigate to http://code.google.com/p/googletest/downloads/list.  From the googletest download page download  gtest-1.7.0.zip .  Unzip the contents of  gtest-1.7.0.zip  to a known location \n(e.g.,  C:\\gtest\\gtest-1.7.0 ).   Apache Ant  Apache Ant is a Java library and command line tool for \nbuilding software. This tool is optional, but is required \nfor running junit tests.   Open a browser and navigate to http://ant.apache.org/bindownload.cgi.  From the Apache Ant web page, download  apache-ant-1.9.0-bin.zip .  Unzip the contents of  apache-ant-1.9.0-bin.zip  to a \nknown location (e.g.,  C:\\apache-ant-1.9.0 ).   Adding environment variables   Click  Start .  Right-click  Computer .  Select  Properties .  Select  Advanced system settings  from the left pane (Windows 7).  Select the  Advanced  tab.  Click  Environment Variables .  Under the User variables, search for 'PATH'.   NOTE:  There is a 'Path' variable under System variables, \n   which you could add to; however, it is considered good \n   practice to add new variables to User variables.    If there is no 'PATH' under User variables, click  New .    Enter PATH as the variable name.  Append the following to the %PATH% variable, separated \n  by a semicolon (adjust the path of each item, as necessary, \n  to account for the install location):   bat\n  C:\\Python27;C:\\Python27\\Scripts;C:\\Program Files\\doxygen\\bin;\n  C:\\Program Files\\Git\\cmd;C:\\uncrustify-0.61-win32    If there is a 'PATH' under User variables, select it, and click  Edit .  Append the following to the %PATH% variable, separated by a \n  semicolon (adjust the path of each item, as necessary, \n  to account for the install location):  bat\n  C:\\Python27;C:\\Python27\\Scripts;C:\\Program Files\\doxygen\\bin;\n  C:\\Program Files\\Git\\cmd;C:\\uncrustify-0.61-win32    If you are generating the API documentation using Doxygen:   Add a 'New...' User variable DOXYGEN_HOME.   Set  DOXYGEN_HOME=C:\\PROGRA~1\\doxygen .  Add a 'New...' User variable GRAPHVIZ_HOME.  Set  GRAPHVIZ_HOME=C:\\PROGRA~1\\Graphviz 2.30.1 .  If you are building the AllJoyn Java bindings:  Add a 'New...' User variable JAVA_HOME.  Set  JAVA_HOME=C:\\PROGRA~1\\Java\\jdk1.6.0_43 .   Add a 'New...' User Variable CLASSPATH.  Set  CLASSPATH=C:\\junit\\junit-4.11.jar .  If you are using Apache Ant, use your personal install \ndirectories:  Add a 'New' User variable ANT_HOME.  Set  ANT_HOME=C:\\apache-ant-1.9.0 .   Add the following to the %PATH% variable:  bat\n  %ANT_HOME%\\bin    Verify installation  Open the command window, and check that you can run the \nfollowing commands:  C:\\ python --version\nPython 2.7.10\n\nC:\\ scons --version\nSCons by Steven Knight et al.: engine: v2.3.4, 2014/09/27 12:51:43, by garyo on lubuntu\nCopyright (c) 2001 - 2014 The SCons Foundation\n\nC:\\ git --version\ngit version 1.9.5.msysgit.0\n\nC:\\ doxygen --version\n1.7.4\n\nC:\\ dot -V\ndot - graphviz version 2.26.3 (20100126.1600)\n\nC:\\ uncrustify -v\nuncrustify 0.61  Obtaining AllJoyn source code from the Git repository  Obtain a copy of each repository using the  git clone  command.   Create a workspace for the AllJoyn project.   ```bat\n   C:>mkdir allseen\n   C:>cd allseen  C:>mkdir core\n   C:>cd core  C:>mkdir alljoyn\n   C:>cd alljoyn\n   ```   Make a clone of the Git repository associated with the AllJoyn project.   bat\n   c:\\allseen\\core\\alljoyn  git clone \n   https://git.allseenalliance.org/gerrit/core/alljoyn.git  CRLF issues when using msysgit  If you have just checked out the repository, msysgit sees issues \nthat deal with the end-of-line symbol. This is an issue from going \nback and forth between Linux and Windows, where the expected \nline-feed in Windows is CRLF, and in Linux it is simply CR. \nmsysgit reports that a freshly checked out file has been \nmodified and does not let you pull from the repository, \ncheck the files, or even merge changes. The current solution \nis to tell git to ignore the CRLF issues using the following command:  git config core.autocrlf false",
            "title": "Configuring a Windows-Specific Environment"
        },
        {
            "location": "/develop/building/windows/build-source/#build-the-alljoyn-framework",
            "text": "Use the following instructions to build the AllJoyn project.   From the command line, go to the AllJoyn allseen folder. \nThe path used here is just an example.   bat\n   cd c:\\allseen\\core\\alljoyn   Run the appropriate command from the list below to build \nthe AllJoyn framework for Windows. Use 'scons -h' for some \nbasic settings. In the examples below, any of the scons \nvariables default values can be set as environment variables.   Building for Windows 7  For 32-bit x86 target using Visual Studio 2013:  C:\\ cd allseen\\core\\alljoyn\nC:\\allseen\\core\\alljoyn scons OS=win7 CPU=x86 MSVC_VERSION=12.0 BINDINGS=cpp  For 64-bit x86-64 target: using Visual Studio 2013  C:\\ cd allseen\\core\\alljoyn\nC:\\allseen\\core\\alljoyn scons OS=win7 CPU=x86_64 MSVC_VERSION=12.0 BINDINGS=cpp  NOTE:  If you are using Windows 7, you may need to run SCons as administrator.  Build variants  Building in \"release mode\" removes all symbol information \nand enables code optimization. To build in release mode, \nadd the VARIANT build option to your scons command line. \nThe values are:   debug - (default value) Build the debug variant with all \nsymbol information and improved logging features for the \nAllJoyn framework.  release - Build the release variant of the code. This will \nbe optimized for code size. It will not include symbol \ninformation and will only log critical errors associated \nwith the AllJoyn framework.   Example:  scons OS=win7 CPU=x86 VARIANT=release MSVC_VERSION=12.0 BINDINGS=cpp  alljoyn_java  When building the Java code for the AllJoyn framework, use \nthe same command as building the AllJoyn core for Windows. \nThe only difference is it must be done from the root  allseen\\core\\alljoyn  \nfolder or the  alljoyn_java  folder, not the  alljoyn_core  folder. \nTo build the Java code, SCons needs to know where the Java \ntools and junit are located.  Set an environment variable to tell scons the location of the build tools:  set JAVA_HOME= C:\\Program Files\\Java\\jdk1.6.0_43   Here is the path used on a development setup:  set CLASSPATH= C:\\junit\\junit-4.11.jar   NOTE:  These environment variables are already set if you \nfollowed the instructions in [Adding environment variables][adding-environment-variables].  As noted, to build Java code, use the same commands as were \nused to make AllJoyn core for Windows; e.g., a Java for Windows \nrelease variant. For example:  scons OS=win7 CPU=x86_64 VARIANT=release MSVC_VERSION=12.0 BINDINGS=core,java  Whitespace options  The AllJoyn build environment uses uncrustify and a python \nscript that are automatically run each time the AllJoyn \nframework is built.  If source code is found that does not match the AllJoyn coding\nguidelines and whitespace checking is enabled, the build will fail\nwhen it runs the whitespace script. The WS option controls the\nbehavior of the whitespace checker.  The values of the WS option are:   off - (Default) Don't check the code for adherence to the \nAllJoyn whitespace policy. Example:  check - This option will check the code \nto see if it adheres to the AllJoyn white space policy.  detail - Display what changes are needed to make the \ncode adhere to the AllJoyn white space policy.  fix - Modify the code to use the AllJoyn white space \npolicy. This will automatically apply the changes that \nare shown when using the detail option.   Example:\n   bat\n  scons OS=win7 CPU=x86_64 MSVC_VERSION=12.0 WS=off BINDINGS=cpp,java  Generating API documentation  By default the Java API documentation will always build \nwhen building the Java bindings; this is not the default \nbehavior for the C++ API documentation. Since the documentation \nfor the C++ API requires Doxygen and Graphviz to be installed \non your system, it is not built by default. Use the DOCS option \nto generate the C++ API documentation.  The values are:   none - (default option) Do not generate the API documentation.  html - (recommended option if documentation is desired ) \nProduce an HTML version of the API documentation. This is what \nis published to www.allseenalliance.org. The output can be \nfound in  allseen\\core\\alljoyn \\alljoyn_core\\docs\\html\\index.html .  pdf - Produce a PDF form of the document. If you are unable \nto build the HTML form of the documentation the PDF form will \nnot build. The resulting document can be found in  allseen\\core\\alljoyn \\alljoyn_core\\docs\\html\\refman.pdf .  dev - Produce HTML documentation for the entire AllJoyn \ncodebase, not just the public APIs. When Doxygen runs using \nthis command, it produces a lot of warnings and will generate \ndocumentation for methods and functions that should only be \nused inside AllJoyn code and not in any other projects. \nThis option is for people developing AllJoyn code, not for \npeople using the AllJoyn framework to develop other applications. \nThe output will override the output from the HTML option.   Example:  scons OS=win7 CPU=x86_64 MSVC_VERSION=12.0 DOCS=html BINDINGS=cpp,java  Specifying the Microsoft Visual C++ version  To build in Windows, you are required to have at least one \nversion of Microsoft Visual C++ installed on your system. \nAt this time, only Microsoft compilers can be used to build \nAllJoyn applications. Use the MSVC_VERSION to specify what \nversion of Microsoft Visual C++ you are using.  The values are:   11.0 - Use Microsoft Visual C++ 2012  11.0Exp - Use Microsoft Visual C++ 2012 Express Edition  12.0 - (Default) Use Microsoft Visual C++ 2013  12.0Exp - Use Microsoft Visual C++ 2013 Express Edition  14.0 - Use Microsoft Visual C++ 2015  14.0Exp - Use Microsoft Visual C++ 2015 Express Edition   Build C++ unit tests  The AllJoyn framework now includes a basic set of unit tests \nthat are built using the Google Test code. To build the unit \ntest, you must specify the location of the Google Test \nsource code that was obtained in googletest. Use the  GTEST_DIR  \noption to specify the location of Google Test source code.  Example:  scons OS=win7 CPU=x86_64 MSVC_VERSION=12.0 GTEST_DIR=c:\\gtest\\gtest-1.7.0\nBINDINGS=cpp  Verify that the AllJoyn project is built properly   From the command line, navigate to:   bat\n    allseen\\core\\alljoyn \\build{OS}{CPU}{VARIANT}\\dist\\cpp\\bin\\samples   Run  basic_service.exe  on one command line.  Run  basic_client.exe  on another command line.   When the client runs, the following will display: \n   (Output may vary slightly from what is shown)  AllJoyn Library version: v3.2.0\n   AllJoyn Library build info: Alljoyn Library v3.2.0 (Built Fri Jan 18 16:50:19 UTC\n   2013)\n   Interface Created. BusAttachment started. \n   Initialized winsock \n   Using BundledRouter\n   AllJoyn Daemon GUID = e467f6278e751dda9ebe877c612e66a0 (adsdErTQ) \n   BusAttchement connected to tcp:addr=127.0.0.1,port=9956\n   BusListener Registered.\n   FoundAdvertisedName(name=org.alljoyn.Bus.sample, prefix=org.alljoyn.Bus.sample) \n   NameOwnerChanged: name=org.alljoyn.Bus.sample, oldOwner= none , \n   newOwner=:5xRgxpvD.2\n   JoinSession SUCCESS (Session id=500568462)\n   org.alljoyn.Bus.sample.cat ( path=/sample) returned \"Hello World!\"",
            "title": "Build the AllJoyn Framework"
        },
        {
            "location": "/develop/building/windows/build-source/#running-unit-tests",
            "text": "Running C++ unit tests  If the  GTEST_DIR  option was specified when building the code, \nthe C++ unit test will automatically be built and placed in \nthe following location:  build\\{OS}\\{CPU}\\{VARIANT}\\test\\cpp\\bin . \nThere will be two executable files there:  cmtest  and  ajtest .  For all paths, replace  {OS} ,  {CPU} , and  {VARIANT}  with the \nactual value used when the code was built (i.e., use the \nsame  OS ,  CPU , and  VARIANT  option specified when running SCons).  cmtest  The cmtest executable, tests the code from the common project \nand does not require the AllJoyn router to be running. \nRun cmtest as follows:   build\\{OS}\\{CPU}\\{VARIANT}\\test\\cpp\\bin\\cmtest.exe  ajtest  The ajtest executable tests the code found in alljoyn_core. \nFor the tests to run successfully, an AllJoyn router must \nalso be running. Currently  ajtest  is limited, it cannot \ntest bus-to-bus (i.e., device-to-device) communication.   Run ajtest as follows:  build\\{OS}\\{CPU}\\{VARIANT}\\test\\cpp\\bin\\ajtest.exe  Running the Java junit tests  The junit tests are always built the same time as the Java bindings. \nThe junit tests are specifically designed to test the Java bindings.   Copy and rename from  alljoyn_java\\ build.xml.top  to the \ntop  build.xml  folder.   bat\n   copy alljoyn_java\\build.xml.top build.xml   From the top build folder use ant to start the test.   bat\n   ant test -DOS={OS} -DCPU={CPU} -DVARIANT={VARIANT}   html version of the results can be found in this location:   bat\n   build\\{OS}\\{CPU}\\{VARIANT}\\test\\java\\reports\\junit\\  For all paths and commands, replace {OS}, {CPU}, and {VARIANT} \nwith the actual value used when the code was built \n(i.e., use the same OS, CPU, and VARIANT option specified \nwhen running SCons).",
            "title": "Running Unit Tests"
        },
        {
            "location": "/develop/building/windows/",
            "text": "Building on Windows\n\n\nSetup\n\n\n\n\nInstall Visual Studio 2012, 2013, or 2015.\n\n\nEnsure that the correct version of the SDK was downloaded that matches the Visual Studio and CPU.\n\n\nSet up environment variable, ALLJOYN_SDK_HOME to point to the AllJoyn SDK root folder.\n\n\nClick on the Start menu.\n\n\nIn the \nSearch programs and files\n field, type: \"edit environment\".\n\n\nSelect \nEdit environment variables for your account\n.\n\n\nClick the \nNew...\n button.\n\n\nType \"ALLJOYN_SDK_HOME\" for the \"Variable name\" box.\n\n\nEnter location of the AllJoyn\n SDK in the \"Variable value\" box.\n\n\nClick \nOK\n.\n\n\n\n\n\n\n\n\nBuild the samples\n\n\nC++\n\n\n\n\nInside the compiled SDK exists visual studio projects.\n\n\nNavigate to the cpp/sample folder and pick a sample application you wish to run.\n\n\nOpen up the Visual Studio project contained.\n\n\nChange the build settings to match the target SDK (Release/Debug) and CPU (Win32/x64).\n\n\n\n\nNOTE:\n These must match or you will receive build errors.\n\n\n\n\nClick the menu option \nBuild\nRebuild\n.\nWhen the build is complete, open the (CPU)/(SDK Version) folder to find the .exe files contained.\n\n\n\n\ne.g. cpp/samples/basic/VC2008Win7/x64/Release\n\n\n\n\nDouble-click the applications to open them. A command prompt appears that contains logging information.\n\n\nAdding to a new/existing project\n\n\nVisual Studio 2012, 2013, or 2015\n\n\n\n\n\n\nOpen \nProject\nProperties\n.\n\n\n\n\n\n\nClick on \nC/C++\n.\n\n\n\n\n\n\nEdit \nAdditional Include Directories\n and add $(ALLJOYN_SDK_HOME)\\inc.\n\n\n\n\n\n\nNOTE:\n ALLJOYN_SDK_HOME setup in Set up step 3 above.\n\n\n\n\n\n\nSelect \nPreprocessor\n under C/C++.\n\n\n\n\n\n\nEdit \nPreprocessor Definitions\n and add QCC_OS_GROUP_WINDOWS and UNICODE.\n\n\n\n\n\n\nClick on \nLinker\n.\n\n\n\n\n\n\nEdit \nAdditional Library Directories\n and add $(ALLJOYN_SDK_HOME)\\lib.\n\n\n\n\n\n\nClick on \nInput\n found under the \"Linker\" section.\n\n\n\n\n\n\nEnter the following libraries: \"alljoyn.lib;ajrouter.lib;ws2_32.lib;Secur32.lib;crypt32.lib;Bcrypt.lib;Ncrypt.lib;iphlpapi.lib\".\n\n\n\n\n\n\nClick \nOK\n.  You are now ready to start using the AllJoyn APIs.\n\n\n\n\n\n\nMakefile\n\n\nPerform the following steps at a high level. Changes may be needed due to how the existing Makefile is structured.\n\n\n\n\nOpen your Makefile.\n\n\n\n\nCreate a new variable named ALLJOYN_DIST to point to the AllJoyn SDK.\n\n\nALLJOYN_DIST := \npath_to_dist\n\n\n\n\n\n\nCreate a new variable named ALLJOYN_LIB to point to the AllJoyn library.\n\n\nALLJOYN_LIBS := -l$(ALLJOYN_DIST)/cpp/lib/alljoyn.lib -l$(ALLJOYN_DIST)/cpp/lib/ajrouter.lib -l$(ALLJOYN_DIST)/cpp/lib/BundledRouter.obj\n\n\nALLJOYN_REQUIRED_LIBS := -lws2_32.lib -lSecur32.lib -lcrypt32.lib -lBcrypt.lib, -lNcrypt.lib -liphlpapi.lib\n\n\n\n\n\n\nModify CXXFLAGS if present, or add to compile command: \n-DQCC_OS_GROUP_WINDOWS\n\n\n\n\n\n\nModify the include section to add: \n-I$(ALLJOYN_DIST)/cpp/inc\n\n\n\n\n\n\nAdd \n$(ALLJOYN_LIB) $(ALLJOYN_REQUIRED_LIBS)\n to the Linker command:",
            "title": "Home"
        },
        {
            "location": "/develop/building/windows/#building-on-windows",
            "text": "",
            "title": "Building on Windows"
        },
        {
            "location": "/develop/building/windows/#setup",
            "text": "Install Visual Studio 2012, 2013, or 2015.  Ensure that the correct version of the SDK was downloaded that matches the Visual Studio and CPU.  Set up environment variable, ALLJOYN_SDK_HOME to point to the AllJoyn SDK root folder.  Click on the Start menu.  In the  Search programs and files  field, type: \"edit environment\".  Select  Edit environment variables for your account .  Click the  New...  button.  Type \"ALLJOYN_SDK_HOME\" for the \"Variable name\" box.  Enter location of the AllJoyn  SDK in the \"Variable value\" box.  Click  OK .",
            "title": "Setup"
        },
        {
            "location": "/develop/building/windows/#build-the-samples",
            "text": "C++   Inside the compiled SDK exists visual studio projects.  Navigate to the cpp/sample folder and pick a sample application you wish to run.  Open up the Visual Studio project contained.  Change the build settings to match the target SDK (Release/Debug) and CPU (Win32/x64).   NOTE:  These must match or you will receive build errors.   Click the menu option  Build Rebuild .\nWhen the build is complete, open the (CPU)/(SDK Version) folder to find the .exe files contained.   e.g. cpp/samples/basic/VC2008Win7/x64/Release  Double-click the applications to open them. A command prompt appears that contains logging information.",
            "title": "Build the samples"
        },
        {
            "location": "/develop/building/windows/#adding-to-a-newexisting-project",
            "text": "Visual Studio 2012, 2013, or 2015    Open  Project Properties .    Click on  C/C++ .    Edit  Additional Include Directories  and add $(ALLJOYN_SDK_HOME)\\inc.    NOTE:  ALLJOYN_SDK_HOME setup in Set up step 3 above.    Select  Preprocessor  under C/C++.    Edit  Preprocessor Definitions  and add QCC_OS_GROUP_WINDOWS and UNICODE.    Click on  Linker .    Edit  Additional Library Directories  and add $(ALLJOYN_SDK_HOME)\\lib.    Click on  Input  found under the \"Linker\" section.    Enter the following libraries: \"alljoyn.lib;ajrouter.lib;ws2_32.lib;Secur32.lib;crypt32.lib;Bcrypt.lib;Ncrypt.lib;iphlpapi.lib\".    Click  OK .  You are now ready to start using the AllJoyn APIs.    Makefile  Perform the following steps at a high level. Changes may be needed due to how the existing Makefile is structured.   Open your Makefile.   Create a new variable named ALLJOYN_DIST to point to the AllJoyn SDK.  ALLJOYN_DIST :=  path_to_dist    Create a new variable named ALLJOYN_LIB to point to the AllJoyn library.  ALLJOYN_LIBS := -l$(ALLJOYN_DIST)/cpp/lib/alljoyn.lib -l$(ALLJOYN_DIST)/cpp/lib/ajrouter.lib -l$(ALLJOYN_DIST)/cpp/lib/BundledRouter.obj  ALLJOYN_REQUIRED_LIBS := -lws2_32.lib -lSecur32.lib -lcrypt32.lib -lBcrypt.lib, -lNcrypt.lib -liphlpapi.lib    Modify CXXFLAGS if present, or add to compile command:  -DQCC_OS_GROUP_WINDOWS    Modify the include section to add:  -I$(ALLJOYN_DIST)/cpp/inc    Add  $(ALLJOYN_LIB) $(ALLJOYN_REQUIRED_LIBS)  to the Linker command:",
            "title": "Adding to a new/existing project"
        },
        {
            "location": "/develop/debug/common-issues/",
            "text": "Common Issues\n\n\nBelow is a list of common issues, debugging tricks, and solutions.\n\n\nThe AllJoyn\n discover feature is not working in Android\n\n\nCheck the setup\n\n\n\n\nAre the devices connected to the same access point? \n\n\n\n\nThe devices should be connected to the same access point \n  for the AllJoyn frameowrk to work.\n\n\n\n\nIs there an AllJoyn router running?\n\n\n\n\nAn AllJoyn router must be running for every app that uses \n  the AllJoyn framework. The router can be in standalone or bundled form.\n\n\n\n\nIs the access point conducive to a peer-to-peer network?\n\n\n\n\nFor the AllJoyn framework to work on a Wi-Fi network, it should \n  have multi-cast packet routing enabled and wireless isolation turned off. \n  The AllJoyn framework handles the case of wireless isolation if \n  you do not care which transport is used, but if you want strictly \n  Wi-Fi access, wireless isolation should be turned off.\n\n\nCheck for \nAndroidManifest.xml\n.\n\n\n\n\nThe \nAndroidManifest.xml\n file must be in the app package.\n\n\n\n\nDevelopers often look up AllJoyn samples to learn how to \n  use the AllJoyn framework. While getting the source code \n  is usually correct, make sure the \nAndroidManifest.xml\n file \n  is in the app package. \n\n\n\n\nCheck the app for four essential permissions. \n\n\n\n\nxml\n   \nuses-permission android:name= \"android.permission.INTERNET\"\n\n   \n/uses-permission\n\n\nxml\n  \nuses-permission android:name= \"android.permission. \n  CHANGE_WIFI_MULTICAST_STATE\"\n\n  \n/uses-permission\n\n\n\n\nYou need the first two permissions for AllJoyn discovery to work.\n\n\nThe AllJoyn discovery mechanism sends out multicast packets.\n\n\nTo send out multicast packets on Android through an app, \n  add these two permissions to the AndroidManifest.xmlfile \n  of the app.\n\n\n\n\n\n\n\n\nxml\n  \nuses-permission android:name= \"android.permission.ACCESS_WIFI_STATE\"\n\n  \n/uses-permission\n\n\nxml\n  \nuses-permission android:name= \"android.permission.CHANGE_WIFI_STATE\"\n\n  \n/uses-permission\n\n\n\n\nYou need the second two permissions when using AllJoyn 2.5 \n    or above and want to use ICE, which is an alternate transport \n    in the AllJoyn framework.\n\n\nAllJoyn 2.5 has a feature called proximity service that \ndetermines when you are near someone, i.e., you are proximal \nto another AllJoyn service/client.\n\n\nOne method for determining proximity is matching the \naccess points that the devices see. If the devices see \na common set of access points, it is safe to say that \nthey are near each other.\n\n\nThese two permissions allow an app to request and use \nthe access point information provided by Android.\n\n\n\n\n\n\n\n\nPeer presence detection\n\n\nHow do I know when a peer is no longer available, or has moved \nout of range when I was talking to, or in a session with, that peer?\n\n\nBackground\n\n\nThe AllJoyn framework has three kinds of main listeners (excluding \nAuthListener\n)\n\n\n\n\nBusListener\n\n\n\n\nHas callbacks for \nFoundAdvertisedName\n, \nNameOwnerChanged\n, and \nNameLost\n.\n\n\n\n\nSessionPortListener\n\n\n\n\nTypically used by a peer that is hosting a session/service; \n  you can have two callbacks inside your implementation of this listener.\n\n\n\n\nacceptSessionJoiner\n - A service uses this callback to \n  accept or reject peers that have sent it a request to join a session.\n\n\n\n\nsessionJoined\n - The bus calls this callback when a client \n  joins a service. This is called on the service side if it \n  implements the \nSessionPortListener\n.\n\n\n\n\n\n\nSessionListener\n\n\n\n\n\n\nThis listener has callbacks that the service and client can \n  implement to get notifications about who joined or left the session.\n\n\n\n\nsessionLost\n - The bus calls this callback when the \n  last member of the session has left.\n\n\n\n\nTIP:\n Developers might look at the service as one of the \n  members of the session and therefore think that as long \n  as the service is up, the session is up. This seems true \n  logically, but actually, a session must have two or more \n  peers. Thus, having the service up does not necessarily \n  mean there is a session. Further, on Wi-Fi, if the session \n  owner leaves, the session is still up, and communication can \n  flow, but new users can now join.\n\n\n\n\nsessionMemberAdded\n - The bus calls this callback when \n  a member is added to a multipoint session. This more frequently \n  helps the client keep track of who joined the session.\n\n\nsessionMemberRemoved\n - Useful for tracking the member \n  that left a session and can be used by the service and \n  the client. The service typically has a way (using \nsessionJoined\n \n  from the \nSessionPortListener\n) to find out who joined \n  the session without using sessionMemberAdded. Use only \n  \nsessionMemberRemoved\n to track who left the session.\n\n\n\n\nApproach\n\n\nNow that we covered the listeners, you might assume that this \nis easy, and that you just need to track the \nsessionMemberRemoved\n \ncallbacks to know if a peer to whom you were talking has left \nthe session. This is correct, but these steps can help considerably.\n\n\n\n\n\n\nIs the link still up, or has it gone down since the peer \nmoved out of range?\n\n\n\n\n\n\nEvery time two peers connect, i.e., are in a session, \n  there is a link between them. A link between them implies \n  a link between their respective daemons.\n\n\n\n\nWe are looking for a way to find out if the link is \n  still up, or has gone down since the peer moved out of range.\n\n\n\n\nWe can use a timeout for the link, so that if the link has \n  been inactive for a specified period of time, we can conclude \n  that it has gone down.\n\n\n\n\n\n\nIs there a way to set this timeout value manually, so that \nI don't have to wait too long?\n\n\n\n\n\n\nYes! You can manually set the link timeout using \nSetLinkTimeout()\n.\n\n\n\n\n\n\nTIP:\n If set to a value \n 40 seconds, the default is 40 seconds.\n\n\n\n\n\n\nWhy do we do this?    \n\n\n\n\n\n\nIn a TCP or UDP connection, resources are consumed when \n  we have to send out a probe checking the status of the link.\n\n\n\n\nIf we set a value of \n 40 seconds, the battery is consumed \n  at an unsatisfactory rate.\n\n\n\n\nA developer might wonder why the battery is draining when \n  no message is being sent. This is not AllJoyn-specific, \n  but the nature of the network transport.\n\n\n\n\n\n\nAre you using Bluetooth\u00ae?\n\n\n\n\n\n\nSetLinkTimeout\n has no apparent effect because for Bluetooth, \n  sending probing signals does not consume measurably more resources \n  than maintaining the link. If the link is up, probing to establish \n  whether the link is still up does not consume as many resources \n  as it does in TCP.\n\n\n\n\n\n\nWhen to set a link timeout?\n\n\n\n\n\n\nSetting a link timeout when you establish a session would be ideal.\n\n\n\n\nIf you are waiting for a \nsessionMemberRemoved\n to be \n  called for the peer that is no longer in the session because \n  it has moved out of range, you must wait at least 40 seconds \n  (or even longer) if you have specified a longer time. If the \n  peer had not gone out of the coverage area and had closed \n  down cleanly, you would not have to wait 40 seconds and \n  could have received the \nsessionMemberRemoved\n callback instantly.\n\n\n\n\nAllJoyn apps not detecting each other\n\n\nI have two or more devices/machines on which AllJoyn apps \nare running. I ran everything as instructed in the documentation. \nWhy are my devices not seeing each other?\n\n\n\n\nIs the AllJoyn daemon running on both devices?\n\n\nAre all the devices connected to the same Wi-Fi network? \nIf using Bluetooth, make sure the devices are within range \nof each other.\n\n\nDoes your Wi-Fi network block multicast packets? (This is \nfalse in most cases, but especially true in office environments.)\n\n\nAre you advertising a correctly formed, well-known name? \nWell-known names can contain letters, numbers, underscores \n(_), and a dot (.)\n\n\nAre you discovering a prefix or the correct name on the client side?\n\n\nIf steps 1 through 5 check out, and you are still unable \nto discover the service on a device, ping the other device.\n\n\n\n\nI installed the Java Android samples provided in the\n\n\nAllJoyn SDK, but they don't work on my device or emulator.\n\n\n\n\n\n\nThe AllJoyn samples included in the SDK are built to \nrun on devices or an emulator running Android version Gingerbread \nor above.\n\n\n\n\n\n\nAn AllJoyn app running in an emulator cannot communicate \nwith any other app outside the emulator. This is the way the \nemulator in Android is designed. It is not a restriction of \nthe AllJoyn framework.\n\n\n\n\n\n\nER_BUS_REPLY_IS_ERROR_MESSAGE and \"Invalid busname\" errors\n\n\nI am trying to advertise a name over AllJoyn but it gives \nme ER_BUS_REPLY_IS_ERROR_MESSAGE and an error \"Invalid busname.\"\n\n\nThe AllJoyn framewrok uses the DBus wire protocol and thus \nhas predefined rules on how to form names. Follow these rules \nwhen choosing a name to be advertised:\n\n\n\n\nBus names that start with a colon (':') character are unique \nconnection names. Other bus names are called well-known bus names.\n\n\nBus names comprise one or more element(s) separated by a \nperiod ('.') character. All elements must contain at least one character.\n\n\nEach element must contain only the ASCII characters \"[A-Z][a-z][0-9]_-\". \nOnly elements that are part of a unique connection name may begin \nwith a digit; elements in other bus names must not begin with a digit.\n\n\nBus names must contain at least one '.' (period) character \n(and thus at least two elements).\n\n\nBus names must not begin with a '.' (period) character.\n\n\nBus names must not exceed the maximum name length.\n\n\n\n\nThe same rules apply when requesting a well-known name on the bus.\n\n\nEfficiently sending large amounts of data\n\n\nThe AllJoyn framework has three ways to send data across to a peer.\n\n\n\n\nMethod calls\n\n\n\n\nMethod calls suit short reply response interactions. \n  However, for something like transferring a file, the overhead \n  is greater for making a call and getting a response \n  than it is for signals.\n\n\n\n\nSignals\n\n\n\n\nSignals are unidirectional. A sender just places data in \n  the body of the signal and sends it. This is useful considering \n  the maximum amount of data one can send in an AllJoyn message \n  is 128 Kb. If the file size is smaller, any of the methods \n  to send data are fine. But, if the file size is greater, \n  a good practice is to break the data into chunks and send it using signals.\n\n\n\n\nRaw sockets\n\n\n\n\nRaw sockets is an evolving concept in the AllJoyn framework. \n  The idea is to obtain a raw socket to which you can write data, \n  and the peer can read it as it would from a regular socket. \n  When using Java bindings for AllJoyn, one thing to note is \n  that the raw Java socket returned by the AllJoyn framework \n  is a non-blocking socket, so one should avoid writing a large \n  amount of data rapidly on this socket. Sending 255 bytes \n  at a time is recommended.\n\n\nApp hangs when using the AllJoyn framework\n\n\nA few possibilities:\n\n\n\n\nThe AllJoyn framework has both synchronous and asynchronous \ncalls which means it can block on some calls. When we write \nan Android app, we typically have an activity class that \nhandled the UI part. Doing an AllJoyn-related task in this \nmain UI thread can lead to unpredictable wait periods where \nthe app takes time to respond or does not update the UI components as expected.\n\n\nA highly recommended way while using the AllJoyn framework \nin your Android app is to do all AllJoyn-related activities \nin a separate thread; in the context of Android, this is \ntypically a \nBusHandler\n. This assures that all of the AllJoyn-related \nactivities do not interfere with any other component of the Android app.\n\n\n\n\nMultiple bus attachments in one application\n\n\n\n\nA \nBusAttachment\n is a representation of the AllJoyn bus.\n\n\nCreating it is a heavy operation in terms of memory \nand other resources.\n\n\nAvoid creating multiple bus attachments unless there is a \njustification for doing so.\n\n\nA common guideline to follow is determining whether the \ntypes of functionalities provided by the AllJoyn piece in \nyour app are distinct and unrelated. Suppose you have two \ncompletely different modules in your app that use the \nAllJoyn framework for totally unrelated things. In this case, \nconsider creating a separate \nBusAttachment\n. It should, \nhowever, be avoided as much as possible due to the overhead \nin creating and maintaining its lifecycle in an app.\n\n\n\n\nAndroid emulator support\n\n\nIf you installed one instance of an AllJoyn app on an \nAndroid emulator and another instance on a physical \ndevice/different machine/host machine/any other supported \nplatform, your apps will not be able communicate with each \nother.\n\n\nIn terms of networking, the Android emulator acts like a \nclosed black box. It does not let you form TCP connections \noutside the emulator. The AllJoyn framework has few networking \ncomponents like using multicast for discovering other devices \nthat have the AllJoyn framewrok running on them. This, coupled \nwith other restrictions on the emulator, make it impossible \nfor an AllJoyn app to talk to anything outside the emulator. \nYou can always have multiple instances of AllJoyn apps talking \nto each other inside the emulator, but not across the emulator.\n\n\nHow to allow/disallow access to my session\n\n\nThe AllJoyn framework provides the ability to allow/disallow \naccess to a session in the \nAcceptSessionJoiner\n callback. \nThe only information you have at this time is the \nsessionPort\n \nand \njoinerId\n, the user's busId. If you require more checks \nin order to allow access, gather information out-of-band.\n\n\nTwo suggestions follow:\n\n\n\n\nBuild a table based on nameOwnerChanged to correlate \nbusId\n \nwith a \nwellKnownName\n.\n\n\nHave a connect and accept on a different session, communicate \ninformation to determine who the user is, then join the session \nto which you want to allow access.\n\n\n\n\nSingle auto-joining session\n\n\nThe AllJoyn framework has a unique guid that is associated \nwith a \nbusAttachment\n. A simple algorithm is to append onto \nthe advertisements \n\"_\"+ \nbusAttachment\n.getGlobalGUIDString()\n. \nThen, when you discover \nwellKnownNames\n, use a simple algorithm \nof highest (or lowest) GUID value and join that session. \nNow all app instances have a way to use a single multi-point session.\n\n\nNOTE: If you build this type of system, keep in mind an edge case \nwhere devices are coming and going very frequently which means \nsessions are being joined/left very frequently. In this scenario, \na single session that is auto-joined is not ideal. It's worth \nrethinking the application and providing a UI where users can \nselect the sessions to join.\n\n\nAllJoyn Router Node Service on Windows 10\n\n\nWindows 10 includes native support for AllJoyn 14.06. In the Windows\n10 Technical Preview build, you can use the built-in AllJoyn router \nnode service which means that your desktop applications don't need \nto bundle an AllJoyn router node, and you don't need to run a \nstand-alone router node application in order to run AllJoyn desktop \napplications.\n\n\nIn Windows 10 Technical Preview builds, the AllJoyn router node \nservice(AJRouter.dll) must be started manually as follows from an \nelevated command prompt:\n    net start ajrouter\n\n\nIf you need to stop the router node service, you can either reboot \nyour PC, or execute the following command from an elevated command \nprompt:\n    net stop ajrouter\n\n\nMore information about AllJoyn integration in Windows will be available \nin future releases of the AllSeen SDK for Windows.",
            "title": "Common issues"
        },
        {
            "location": "/develop/debug/common-issues/#common-issues",
            "text": "Below is a list of common issues, debugging tricks, and solutions.",
            "title": "Common Issues"
        },
        {
            "location": "/develop/debug/common-issues/#the-alljoyn-discover-feature-is-not-working-in-android",
            "text": "Check the setup   Are the devices connected to the same access point?    The devices should be connected to the same access point \n  for the AllJoyn frameowrk to work.   Is there an AllJoyn router running?   An AllJoyn router must be running for every app that uses \n  the AllJoyn framework. The router can be in standalone or bundled form.   Is the access point conducive to a peer-to-peer network?   For the AllJoyn framework to work on a Wi-Fi network, it should \n  have multi-cast packet routing enabled and wireless isolation turned off. \n  The AllJoyn framework handles the case of wireless isolation if \n  you do not care which transport is used, but if you want strictly \n  Wi-Fi access, wireless isolation should be turned off.  Check for  AndroidManifest.xml .   The  AndroidManifest.xml  file must be in the app package.   Developers often look up AllJoyn samples to learn how to \n  use the AllJoyn framework. While getting the source code \n  is usually correct, make sure the  AndroidManifest.xml  file \n  is in the app package.    Check the app for four essential permissions.    xml\n    uses-permission android:name= \"android.permission.INTERNET\" \n    /uses-permission  xml\n   uses-permission android:name= \"android.permission. \n  CHANGE_WIFI_MULTICAST_STATE\" \n   /uses-permission   You need the first two permissions for AllJoyn discovery to work.  The AllJoyn discovery mechanism sends out multicast packets.  To send out multicast packets on Android through an app, \n  add these two permissions to the AndroidManifest.xmlfile \n  of the app.     xml\n   uses-permission android:name= \"android.permission.ACCESS_WIFI_STATE\" \n   /uses-permission  xml\n   uses-permission android:name= \"android.permission.CHANGE_WIFI_STATE\" \n   /uses-permission   You need the second two permissions when using AllJoyn 2.5 \n    or above and want to use ICE, which is an alternate transport \n    in the AllJoyn framework.  AllJoyn 2.5 has a feature called proximity service that \ndetermines when you are near someone, i.e., you are proximal \nto another AllJoyn service/client.  One method for determining proximity is matching the \naccess points that the devices see. If the devices see \na common set of access points, it is safe to say that \nthey are near each other.  These two permissions allow an app to request and use \nthe access point information provided by Android.",
            "title": "The AllJoyn&trade; discover feature is not working in Android"
        },
        {
            "location": "/develop/debug/common-issues/#peer-presence-detection",
            "text": "How do I know when a peer is no longer available, or has moved \nout of range when I was talking to, or in a session with, that peer?  Background  The AllJoyn framework has three kinds of main listeners (excluding  AuthListener )   BusListener   Has callbacks for  FoundAdvertisedName ,  NameOwnerChanged , and  NameLost .   SessionPortListener   Typically used by a peer that is hosting a session/service; \n  you can have two callbacks inside your implementation of this listener.   acceptSessionJoiner  - A service uses this callback to \n  accept or reject peers that have sent it a request to join a session.   sessionJoined  - The bus calls this callback when a client \n  joins a service. This is called on the service side if it \n  implements the  SessionPortListener .    SessionListener    This listener has callbacks that the service and client can \n  implement to get notifications about who joined or left the session.   sessionLost  - The bus calls this callback when the \n  last member of the session has left.   TIP:  Developers might look at the service as one of the \n  members of the session and therefore think that as long \n  as the service is up, the session is up. This seems true \n  logically, but actually, a session must have two or more \n  peers. Thus, having the service up does not necessarily \n  mean there is a session. Further, on Wi-Fi, if the session \n  owner leaves, the session is still up, and communication can \n  flow, but new users can now join.   sessionMemberAdded  - The bus calls this callback when \n  a member is added to a multipoint session. This more frequently \n  helps the client keep track of who joined the session.  sessionMemberRemoved  - Useful for tracking the member \n  that left a session and can be used by the service and \n  the client. The service typically has a way (using  sessionJoined  \n  from the  SessionPortListener ) to find out who joined \n  the session without using sessionMemberAdded. Use only \n   sessionMemberRemoved  to track who left the session.   Approach  Now that we covered the listeners, you might assume that this \nis easy, and that you just need to track the  sessionMemberRemoved  \ncallbacks to know if a peer to whom you were talking has left \nthe session. This is correct, but these steps can help considerably.    Is the link still up, or has it gone down since the peer \nmoved out of range?    Every time two peers connect, i.e., are in a session, \n  there is a link between them. A link between them implies \n  a link between their respective daemons.   We are looking for a way to find out if the link is \n  still up, or has gone down since the peer moved out of range.   We can use a timeout for the link, so that if the link has \n  been inactive for a specified period of time, we can conclude \n  that it has gone down.    Is there a way to set this timeout value manually, so that \nI don't have to wait too long?    Yes! You can manually set the link timeout using  SetLinkTimeout() .    TIP:  If set to a value   40 seconds, the default is 40 seconds.    Why do we do this?        In a TCP or UDP connection, resources are consumed when \n  we have to send out a probe checking the status of the link.   If we set a value of   40 seconds, the battery is consumed \n  at an unsatisfactory rate.   A developer might wonder why the battery is draining when \n  no message is being sent. This is not AllJoyn-specific, \n  but the nature of the network transport.    Are you using Bluetooth\u00ae?    SetLinkTimeout  has no apparent effect because for Bluetooth, \n  sending probing signals does not consume measurably more resources \n  than maintaining the link. If the link is up, probing to establish \n  whether the link is still up does not consume as many resources \n  as it does in TCP.    When to set a link timeout?    Setting a link timeout when you establish a session would be ideal.   If you are waiting for a  sessionMemberRemoved  to be \n  called for the peer that is no longer in the session because \n  it has moved out of range, you must wait at least 40 seconds \n  (or even longer) if you have specified a longer time. If the \n  peer had not gone out of the coverage area and had closed \n  down cleanly, you would not have to wait 40 seconds and \n  could have received the  sessionMemberRemoved  callback instantly.",
            "title": "Peer presence detection"
        },
        {
            "location": "/develop/debug/common-issues/#alljoyn-apps-not-detecting-each-other",
            "text": "I have two or more devices/machines on which AllJoyn apps \nare running. I ran everything as instructed in the documentation. \nWhy are my devices not seeing each other?   Is the AllJoyn daemon running on both devices?  Are all the devices connected to the same Wi-Fi network? \nIf using Bluetooth, make sure the devices are within range \nof each other.  Does your Wi-Fi network block multicast packets? (This is \nfalse in most cases, but especially true in office environments.)  Are you advertising a correctly formed, well-known name? \nWell-known names can contain letters, numbers, underscores \n(_), and a dot (.)  Are you discovering a prefix or the correct name on the client side?  If steps 1 through 5 check out, and you are still unable \nto discover the service on a device, ping the other device.",
            "title": "AllJoyn apps not detecting each other"
        },
        {
            "location": "/develop/debug/common-issues/#i-installed-the-java-android-samples-provided-in-the",
            "text": "AllJoyn SDK, but they don't work on my device or emulator.    The AllJoyn samples included in the SDK are built to \nrun on devices or an emulator running Android version Gingerbread \nor above.    An AllJoyn app running in an emulator cannot communicate \nwith any other app outside the emulator. This is the way the \nemulator in Android is designed. It is not a restriction of \nthe AllJoyn framework.",
            "title": "I installed the Java Android samples provided in the"
        },
        {
            "location": "/develop/debug/common-issues/#er_bus_reply_is_error_message-and-invalid-busname-errors",
            "text": "I am trying to advertise a name over AllJoyn but it gives \nme ER_BUS_REPLY_IS_ERROR_MESSAGE and an error \"Invalid busname.\"  The AllJoyn framewrok uses the DBus wire protocol and thus \nhas predefined rules on how to form names. Follow these rules \nwhen choosing a name to be advertised:   Bus names that start with a colon (':') character are unique \nconnection names. Other bus names are called well-known bus names.  Bus names comprise one or more element(s) separated by a \nperiod ('.') character. All elements must contain at least one character.  Each element must contain only the ASCII characters \"[A-Z][a-z][0-9]_-\". \nOnly elements that are part of a unique connection name may begin \nwith a digit; elements in other bus names must not begin with a digit.  Bus names must contain at least one '.' (period) character \n(and thus at least two elements).  Bus names must not begin with a '.' (period) character.  Bus names must not exceed the maximum name length.   The same rules apply when requesting a well-known name on the bus.",
            "title": "ER_BUS_REPLY_IS_ERROR_MESSAGE and \"Invalid busname\" errors"
        },
        {
            "location": "/develop/debug/common-issues/#efficiently-sending-large-amounts-of-data",
            "text": "The AllJoyn framework has three ways to send data across to a peer.   Method calls   Method calls suit short reply response interactions. \n  However, for something like transferring a file, the overhead \n  is greater for making a call and getting a response \n  than it is for signals.   Signals   Signals are unidirectional. A sender just places data in \n  the body of the signal and sends it. This is useful considering \n  the maximum amount of data one can send in an AllJoyn message \n  is 128 Kb. If the file size is smaller, any of the methods \n  to send data are fine. But, if the file size is greater, \n  a good practice is to break the data into chunks and send it using signals.   Raw sockets   Raw sockets is an evolving concept in the AllJoyn framework. \n  The idea is to obtain a raw socket to which you can write data, \n  and the peer can read it as it would from a regular socket. \n  When using Java bindings for AllJoyn, one thing to note is \n  that the raw Java socket returned by the AllJoyn framework \n  is a non-blocking socket, so one should avoid writing a large \n  amount of data rapidly on this socket. Sending 255 bytes \n  at a time is recommended.",
            "title": "Efficiently sending large amounts of data"
        },
        {
            "location": "/develop/debug/common-issues/#app-hangs-when-using-the-alljoyn-framework",
            "text": "A few possibilities:   The AllJoyn framework has both synchronous and asynchronous \ncalls which means it can block on some calls. When we write \nan Android app, we typically have an activity class that \nhandled the UI part. Doing an AllJoyn-related task in this \nmain UI thread can lead to unpredictable wait periods where \nthe app takes time to respond or does not update the UI components as expected.  A highly recommended way while using the AllJoyn framework \nin your Android app is to do all AllJoyn-related activities \nin a separate thread; in the context of Android, this is \ntypically a  BusHandler . This assures that all of the AllJoyn-related \nactivities do not interfere with any other component of the Android app.",
            "title": "App hangs when using the AllJoyn framework"
        },
        {
            "location": "/develop/debug/common-issues/#multiple-bus-attachments-in-one-application",
            "text": "A  BusAttachment  is a representation of the AllJoyn bus.  Creating it is a heavy operation in terms of memory \nand other resources.  Avoid creating multiple bus attachments unless there is a \njustification for doing so.  A common guideline to follow is determining whether the \ntypes of functionalities provided by the AllJoyn piece in \nyour app are distinct and unrelated. Suppose you have two \ncompletely different modules in your app that use the \nAllJoyn framework for totally unrelated things. In this case, \nconsider creating a separate  BusAttachment . It should, \nhowever, be avoided as much as possible due to the overhead \nin creating and maintaining its lifecycle in an app.",
            "title": "Multiple bus attachments in one application"
        },
        {
            "location": "/develop/debug/common-issues/#android-emulator-support",
            "text": "If you installed one instance of an AllJoyn app on an \nAndroid emulator and another instance on a physical \ndevice/different machine/host machine/any other supported \nplatform, your apps will not be able communicate with each \nother.  In terms of networking, the Android emulator acts like a \nclosed black box. It does not let you form TCP connections \noutside the emulator. The AllJoyn framework has few networking \ncomponents like using multicast for discovering other devices \nthat have the AllJoyn framewrok running on them. This, coupled \nwith other restrictions on the emulator, make it impossible \nfor an AllJoyn app to talk to anything outside the emulator. \nYou can always have multiple instances of AllJoyn apps talking \nto each other inside the emulator, but not across the emulator.",
            "title": "Android emulator support"
        },
        {
            "location": "/develop/debug/common-issues/#how-to-allowdisallow-access-to-my-session",
            "text": "The AllJoyn framework provides the ability to allow/disallow \naccess to a session in the  AcceptSessionJoiner  callback. \nThe only information you have at this time is the  sessionPort  \nand  joinerId , the user's busId. If you require more checks \nin order to allow access, gather information out-of-band.  Two suggestions follow:   Build a table based on nameOwnerChanged to correlate  busId  \nwith a  wellKnownName .  Have a connect and accept on a different session, communicate \ninformation to determine who the user is, then join the session \nto which you want to allow access.",
            "title": "How to allow/disallow access to my session"
        },
        {
            "location": "/develop/debug/common-issues/#single-auto-joining-session",
            "text": "The AllJoyn framework has a unique guid that is associated \nwith a  busAttachment . A simple algorithm is to append onto \nthe advertisements  \"_\"+  busAttachment .getGlobalGUIDString() . \nThen, when you discover  wellKnownNames , use a simple algorithm \nof highest (or lowest) GUID value and join that session. \nNow all app instances have a way to use a single multi-point session.  NOTE: If you build this type of system, keep in mind an edge case \nwhere devices are coming and going very frequently which means \nsessions are being joined/left very frequently. In this scenario, \na single session that is auto-joined is not ideal. It's worth \nrethinking the application and providing a UI where users can \nselect the sessions to join.",
            "title": "Single auto-joining session"
        },
        {
            "location": "/develop/debug/common-issues/#alljoyn-router-node-service-on-windows-10",
            "text": "Windows 10 includes native support for AllJoyn 14.06. In the Windows\n10 Technical Preview build, you can use the built-in AllJoyn router \nnode service which means that your desktop applications don't need \nto bundle an AllJoyn router node, and you don't need to run a \nstand-alone router node application in order to run AllJoyn desktop \napplications.  In Windows 10 Technical Preview builds, the AllJoyn router node \nservice(AJRouter.dll) must be started manually as follows from an \nelevated command prompt:\n    net start ajrouter  If you need to stop the router node service, you can either reboot \nyour PC, or execute the following command from an elevated command \nprompt:\n    net stop ajrouter  More information about AllJoyn integration in Windows will be available \nin future releases of the AllSeen SDK for Windows.",
            "title": "AllJoyn Router Node Service on Windows 10"
        },
        {
            "location": "/develop/debug/",
            "text": "Debug\n\n\n\n\nCommon Issues",
            "title": "Home"
        },
        {
            "location": "/develop/debug/#debug",
            "text": "Common Issues",
            "title": "Debug"
        },
        {
            "location": "/develop/run-sample-apps/",
            "text": "Running Sample Applications\n\n\nFor each of the listed samples, there is a platform-supported language binding.\nThese sample apps can communicate with their counterpart on the same platform,\nor be written in a different language binding.\n\n\n\n\nBasic\n This sample shows how to use AllJoyn\n Bus Method calls\n\n\nChat\n This sample shows how to send AllJoyn Signals on a session.\n\n\nAbout\n These samples show how to use the About feature for\n  announcing and discovering.\n\n\nObserver\n These samples show how to use the Observer API for easy\n  discovery and session management.\n\n\nOnboarding\n These samples show how to use the two sides of the\n  Onboarding service framework, the Onboarder and the Onboardee.\n\n\nConfig\n These samples show how to use the Configuration service framework.\n\n\nNotification\n These samples show how to use the Notification\n  service framework as a Producer and a Consumer.\n\n\nControl Panel\n These samples show how to use the two sides of\n  the Control Panel service framework, the Controller and the Controllable.\n\n\nAC Server\n This sample shows how to use multiple service frameworks\n  together in a single application.\n\n\nCommand Line Apps\n These command line samples are useful during development.\n\n\nAllJoyn.js\n This shows how to run AllJoyn.js and the Console",
            "title": "Home"
        },
        {
            "location": "/develop/run-sample-apps/#running-sample-applications",
            "text": "For each of the listed samples, there is a platform-supported language binding.\nThese sample apps can communicate with their counterpart on the same platform,\nor be written in a different language binding.   Basic  This sample shows how to use AllJoyn  Bus Method calls  Chat  This sample shows how to send AllJoyn Signals on a session.  About  These samples show how to use the About feature for\n  announcing and discovering.  Observer  These samples show how to use the Observer API for easy\n  discovery and session management.  Onboarding  These samples show how to use the two sides of the\n  Onboarding service framework, the Onboarder and the Onboardee.  Config  These samples show how to use the Configuration service framework.  Notification  These samples show how to use the Notification\n  service framework as a Producer and a Consumer.  Control Panel  These samples show how to use the two sides of\n  the Control Panel service framework, the Controller and the Controllable.  AC Server  This sample shows how to use multiple service frameworks\n  together in a single application.  Command Line Apps  These command line samples are useful during development.  AllJoyn.js  This shows how to run AllJoyn.js and the Console",
            "title": "Running Sample Applications"
        },
        {
            "location": "/develop/run-sample-apps/about/",
            "text": "Running The About Samples\n\n\nThere are two About sample applications, an About Client and an About Service. \nBecause the About feature is required and used by any application using one or \nmore of the service frameworks, all of the AllJoyn\n service framework, \nexample applications also function as either an About client or an About service. \n\n\nThe About Client is used to list out the services offered up by an \nAllJoyn application using the About Service. It provides \nservice-level discovery\n \nso that an application can be written to interact with devices that speak the same services.\n\n\nThe About Service is used to demonstrate the use of the About Service API.  By itself, the application does nothing but expose a set of values that can be discovered and the About APIs can be executed.\n\n\nThe About interface is defined as follows:\n\n\nnode name=\n/About\n\n    \ninterface name=\norg.alljoyn.About\n\n        \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n        \nmethod name=\nGetAboutData\n\n            \narg name=\nlanguageTag\n type=\ns\n direction=\nin\n/\n\n            \narg name=\naboutData\n type=\na{sv}\n direction=\nout\n/\n\n        \n/method\n\n        \nmethod name=\nGetObjectDescription\n\n            \narg name=\nobjectDescription\n type=\na(sas)\n direction=\nout\n/\n\n        \n/method\n\n        \nsignal name=\nAnnounce\n\n            \narg name=\nversion\n type=\nq\n/\n\n            \narg name=\nport\n type=\nq\n/\n\n            \narg name=\nobjectDescription\n type=\na(sas)\n/\n\n            \narg name=\nmetaData\n type=\na{sv}\n/\n\n        \n/signal\n\n    \n/interface\n\n\n/node\n\n\nnode name=\n/About/DeviceIcon\n\n    \ninterface name=\norg.alljoyn.Icon\n\n        \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n        \nproperty name=\nMimeType\n type=\ns\n access=\nread\n/\n\n        \nproperty name=\nSize\n type=\nu\n access=\nread\n/\n\n        \nmethod name=\nGetUrl\n\n            \narg name=\nurl\n type=\ns\n direction=\nout\n/\n\n        \n/method\n\n        \nmethod name=\nGetContent\n\n            \narg name=\nbytes\n type=\nay\n direction=\nout\n/\n\n        \n/method\n\n    \n/interface\n\n\n/node\n\n\n\n\n\nThe samples can be run on the following platforms:\n\n \nWindows\n\n\n \nLinux\n\n* \niOS/OSX",
            "title": "Home"
        },
        {
            "location": "/develop/run-sample-apps/about/#running-the-about-samples",
            "text": "There are two About sample applications, an About Client and an About Service. \nBecause the About feature is required and used by any application using one or \nmore of the service frameworks, all of the AllJoyn  service framework, \nexample applications also function as either an About client or an About service.   The About Client is used to list out the services offered up by an \nAllJoyn application using the About Service. It provides  service-level discovery  \nso that an application can be written to interact with devices that speak the same services.  The About Service is used to demonstrate the use of the About Service API.  By itself, the application does nothing but expose a set of values that can be discovered and the About APIs can be executed.  The About interface is defined as follows:  node name= /About \n     interface name= org.alljoyn.About \n         property name= Version  type= q  access= read / \n         method name= GetAboutData \n             arg name= languageTag  type= s  direction= in / \n             arg name= aboutData  type= a{sv}  direction= out / \n         /method \n         method name= GetObjectDescription \n             arg name= objectDescription  type= a(sas)  direction= out / \n         /method \n         signal name= Announce \n             arg name= version  type= q / \n             arg name= port  type= q / \n             arg name= objectDescription  type= a(sas) / \n             arg name= metaData  type= a{sv} / \n         /signal \n     /interface  /node  node name= /About/DeviceIcon \n     interface name= org.alljoyn.Icon \n         property name= Version  type= q  access= read / \n         property name= MimeType  type= s  access= read / \n         property name= Size  type= u  access= read / \n         method name= GetUrl \n             arg name= url  type= s  direction= out / \n         /method \n         method name= GetContent \n             arg name= bytes  type= ay  direction= out / \n         /method \n     /interface  /node   The samples can be run on the following platforms:   Windows    Linux \n*  iOS/OSX",
            "title": "Running The About Samples"
        },
        {
            "location": "/develop/run-sample-apps/about/ios-osx/",
            "text": "Running About Sample App - iOS\n\n\nPrerequisites\n\n\nFollow steps in the \nBuilding - iOS OS X section\n \nto build and install the About sample app on an iOS device.\n\n\nYou can use the About sample app to act as an About Client, an About Service, \nor both a Client and a Service simultaneously. If you run the app as both \na client and server simultaneously, you will be able to publish and \nreceive About announcements on a single iOS device.\n\n\nAlternately, run the app as a client on one device, and as a service on another device.\n\n\nNOTE:\n Both devices must be on the same Wi-Fi network.\n\n\nRun the About sample app as a Client\n\n\n\n\nLaunch the About sample app on your iOS device.\n\n\nClick \nConnect to AllJoyn\n.\n\n\nIn the pop-up that appears, set the name to be used by the \nAbout feature in the application. You can use the default of \norg.alljoyn.BusNode.aboutClient, or enter your own.\n\n\nThe application is now running in Client mode. \n\n\n\n\nIn the list area below the \nDisconnect from AllJoyn\n button, \n  you will see any nearby applications that have been discovered \n  via their About announcements.\n  NOTE: If there are no nearby devices, follow the steps in \n  \nRun the About sample app as a Service\n \n  to run the application simultaneously as an About Service. This will allow \n  you to interact with the About Server running in the app through the \n  About Client that is also running in the app.\n\n\n\n\n\n\nTo interact with an About Service, select one from the list \nof nearby applications that have been discovered.\n\n\n\n\nChoose an option from the pop-up that appears:\n\n\nShow Announce\n: This will allow you to view the About announcement \n  that was received from the nearby application.\n\n\nAbout\n: This will show the full set of information retrieved \n  by the About Client from the nearby application.\n\n\nIcon\n: This will display the About Icon that has been \n  retrieved from the nearby application.\n\n\n\n\nRun the About sample app as a Service\n\n\n\n\nRun the About sample app on your iOS device.\n\n\nAt the bottom of the screen, click \nStart About Service\n.\n\n\nThe application is now running in Server mode.\n\n\n\n\nNOTE:\n To interact with the About Service, either run the sample \napp as an About Client on the same device or on a different device, \nas detailed in \nRun the About sample app as a Client\n.",
            "title": "Ios osx"
        },
        {
            "location": "/develop/run-sample-apps/about/ios-osx/#running-about-sample-app-ios",
            "text": "",
            "title": "Running About Sample App - iOS"
        },
        {
            "location": "/develop/run-sample-apps/about/ios-osx/#prerequisites",
            "text": "Follow steps in the  Building - iOS OS X section  \nto build and install the About sample app on an iOS device.  You can use the About sample app to act as an About Client, an About Service, \nor both a Client and a Service simultaneously. If you run the app as both \na client and server simultaneously, you will be able to publish and \nreceive About announcements on a single iOS device.  Alternately, run the app as a client on one device, and as a service on another device.  NOTE:  Both devices must be on the same Wi-Fi network.",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/run-sample-apps/about/ios-osx/#run-the-about-sample-app-as-a-client",
            "text": "Launch the About sample app on your iOS device.  Click  Connect to AllJoyn .  In the pop-up that appears, set the name to be used by the \nAbout feature in the application. You can use the default of \norg.alljoyn.BusNode.aboutClient, or enter your own.  The application is now running in Client mode.    In the list area below the  Disconnect from AllJoyn  button, \n  you will see any nearby applications that have been discovered \n  via their About announcements.\n  NOTE: If there are no nearby devices, follow the steps in \n   Run the About sample app as a Service  \n  to run the application simultaneously as an About Service. This will allow \n  you to interact with the About Server running in the app through the \n  About Client that is also running in the app.    To interact with an About Service, select one from the list \nof nearby applications that have been discovered.   Choose an option from the pop-up that appears:  Show Announce : This will allow you to view the About announcement \n  that was received from the nearby application.  About : This will show the full set of information retrieved \n  by the About Client from the nearby application.  Icon : This will display the About Icon that has been \n  retrieved from the nearby application.",
            "title": "Run the About sample app as a Client"
        },
        {
            "location": "/develop/run-sample-apps/about/ios-osx/#run-the-about-sample-app-as-a-service",
            "text": "Run the About sample app on your iOS device.  At the bottom of the screen, click  Start About Service .  The application is now running in Server mode.   NOTE:  To interact with the About Service, either run the sample \napp as an About Client on the same device or on a different device, \nas detailed in  Run the About sample app as a Client .",
            "title": "Run the About sample app as a Service"
        },
        {
            "location": "/develop/run-sample-apps/about/linux/",
            "text": "Linux - Running About Sample Apps\n\n\nRunning Linux AboutClient and AboutService Apps\n\n\nPrerequisites\n\n\n\n\nOpen two terminal windows.\n\n\nIn each, navigate to the AllJoyn\n root dir, then:\n\n\n\n\nexport AJ_ROOT=`pwd`\n\n# \nTARGET CPU\n can be either x86_64, x86, or whatever value you set for \nCPU=\n when running SCons.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$LD_LIBRARY_PATH\n\n\n\n\nRun the AboutService Sample App\n\n\nIn one of the terminal windows, run \nAboutService\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/AboutService\n\n\n\n\nNOTE:\n The application just runs and will print information when an AboutClient connects.\n\n\nRun the AboutClient Sample App\n\n\nIn the other terminal window, run \nAboutClient\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/AboutClient\n\n\n\n\nNOTE:\n The application searches for any instance of AboutService that is announcing\nthe \ncom.example.about.feature.interface.sample\n it will connect to the service\nand call all the methods specified in the About Interface and the Echo method\nspecified in the \ncom.example.about.feature.interface.sample\n interface.\n\n\nRun Legacy AboutService and AboutClient Apps\n\n\nexport AJ_ROOT=`pwd`\n\n# \nTARGET CPU\n can be either x86_64, x86, or whatever value you set for \nCPU=\n when running SCons.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$LD_LIBRARY_PATH\n\n\n\n\nDepending on the version of the AllJoyn SDK the location of the Legacy sample\napps may be in a different location. If the dist directory contains a subdirectory\nnamed \nabout\n you may need to add the about folder to the LD_LIBRARY_PATH\n\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/lib:$LD_LIBRARY_PATH\n\n\n\n\nRun the AboutService Sample App\n\n\nIn one of the terminal windows, run \nAboutService\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/AboutService_legacy\n\n\n\n\nDepending on the version of the AllJoyn SDK, the location of the Legacy sample\napps may have moved. If the dist directory contains a subdirectory\nnamed \nabout\n, you may need to run the sample for the different location\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/bin/AboutService\n\n\n\n\nNOTE:\n The application just runs and will print information when an AboutClient connects.\n\n\nRun the AboutClient Sample App\n\n\nIn the other terminal window, run \nAboutClient\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/AboutClient_legacy\n\n\n\n\nDepending on the version of the AllJoyn SDK, the location of the Legacy sample\napps may have moved. If the dist directory contains a subdirectory\nnamed \nabout\n, you may need to run the sample for the different location\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/bin/AboutClient\n\n\n\n\nNOTE:\n The application searches for any instance of AboutService that is announcing\nthe \norg.alljoyn.About\n and \norg.alljoyn.Icon\n it will connect to the service\nand call all the methods specified in the About Interface and the the About Icon\ninterface.",
            "title": "Linux"
        },
        {
            "location": "/develop/run-sample-apps/about/linux/#linux-running-about-sample-apps",
            "text": "",
            "title": "Linux - Running About Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/about/linux/#running-linux-aboutclient-and-aboutservice-apps",
            "text": "Prerequisites   Open two terminal windows.  In each, navigate to the AllJoyn  root dir, then:   export AJ_ROOT=`pwd`\n\n#  TARGET CPU  can be either x86_64, x86, or whatever value you set for  CPU=  when running SCons.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$LD_LIBRARY_PATH  Run the AboutService Sample App  In one of the terminal windows, run  AboutService :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/AboutService  NOTE:  The application just runs and will print information when an AboutClient connects.  Run the AboutClient Sample App  In the other terminal window, run  AboutClient :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/AboutClient  NOTE:  The application searches for any instance of AboutService that is announcing\nthe  com.example.about.feature.interface.sample  it will connect to the service\nand call all the methods specified in the About Interface and the Echo method\nspecified in the  com.example.about.feature.interface.sample  interface.",
            "title": "Running Linux AboutClient and AboutService Apps"
        },
        {
            "location": "/develop/run-sample-apps/about/linux/#run-legacy-aboutservice-and-aboutclient-apps",
            "text": "export AJ_ROOT=`pwd`\n\n#  TARGET CPU  can be either x86_64, x86, or whatever value you set for  CPU=  when running SCons.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$LD_LIBRARY_PATH  Depending on the version of the AllJoyn SDK the location of the Legacy sample\napps may be in a different location. If the dist directory contains a subdirectory\nnamed  about  you may need to add the about folder to the LD_LIBRARY_PATH  export LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/lib:$LD_LIBRARY_PATH  Run the AboutService Sample App  In one of the terminal windows, run  AboutService :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/AboutService_legacy  Depending on the version of the AllJoyn SDK, the location of the Legacy sample\napps may have moved. If the dist directory contains a subdirectory\nnamed  about , you may need to run the sample for the different location  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/bin/AboutService  NOTE:  The application just runs and will print information when an AboutClient connects.  Run the AboutClient Sample App  In the other terminal window, run  AboutClient :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/AboutClient_legacy  Depending on the version of the AllJoyn SDK, the location of the Legacy sample\napps may have moved. If the dist directory contains a subdirectory\nnamed  about , you may need to run the sample for the different location  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/bin/AboutClient  NOTE:  The application searches for any instance of AboutService that is announcing\nthe  org.alljoyn.About  and  org.alljoyn.Icon  it will connect to the service\nand call all the methods specified in the About Interface and the the About Icon\ninterface.",
            "title": "Run Legacy AboutService and AboutClient Apps"
        },
        {
            "location": "/develop/run-sample-apps/about/windows/",
            "text": "Windows - Running About Sample Apps\n\n\nRunning Windows AboutClient and AboutService Apps\n\n\nPrecompiled .exe\n\n\nThe AllJoyn\n Standard Library Windows SDK includes a precompiled set of binaries.\n\n\nService\n\n\nOpen a Command Terminal window.\n\n\ncd \nroot AllJoyn SDK folder in your file system\n\ncd cpp\\bin\\samples\nAboutService.exe\n\n\n\n\nNOTE:\n The application just runs and will print information when an AboutClient connects.\n\n\nClient\n\n\nOpen a Command Terminal window.\n\n\ncd \nroot AllJoyn SDK folder in your file system\n\ncd cpp\\bin\\samples\nAboutClient.exe\n\n\n\n\nNOTE:\n The application searches for any instance of AboutService that is announcing\nthe \ncom.example.about.feature.interface.sample\n it will connect to the service\nand call all the methods specified in the About Interface and the Echo method\nspecified in the \ncom.example.about.feature.interface.sample\n interface.\n\n\nRun Legacy AboutService and AboutClient Apps\n\n\nService\n\n\nOpen a Command Terminal window.\n\n\ncd \nroot AllJoyn SDK folder in your file system\n\ncd cpp\\bin\\samples\nAboutService_legacy.exe\n\n\n\n\nNOTE:\n The application just runs and will print information when an AboutClient connects.\n\n\nClient\n\n\nOpen a Command Terminal window.\n\n\ncd \nroot AllJoyn SDK folder in your file system\n\ncd cpp\\bin\\samples\nAboutClient_legacy.exe\n\n\n\n\nNOTE:\n The application searches for any instance of AboutService that is announcing\nthe \norg.alljoyn.About\n and \norg.alljoyn.Icon\n it will connect to the service\nand call all the methods specified in the About Interface and the the About Icon\ninterface.",
            "title": "Windows"
        },
        {
            "location": "/develop/run-sample-apps/about/windows/#windows-running-about-sample-apps",
            "text": "",
            "title": "Windows - Running About Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/about/windows/#running-windows-aboutclient-and-aboutservice-apps",
            "text": "Precompiled .exe  The AllJoyn  Standard Library Windows SDK includes a precompiled set of binaries.  Service  Open a Command Terminal window.  cd  root AllJoyn SDK folder in your file system \ncd cpp\\bin\\samples\nAboutService.exe  NOTE:  The application just runs and will print information when an AboutClient connects.  Client  Open a Command Terminal window.  cd  root AllJoyn SDK folder in your file system \ncd cpp\\bin\\samples\nAboutClient.exe  NOTE:  The application searches for any instance of AboutService that is announcing\nthe  com.example.about.feature.interface.sample  it will connect to the service\nand call all the methods specified in the About Interface and the Echo method\nspecified in the  com.example.about.feature.interface.sample  interface.",
            "title": "Running Windows AboutClient and AboutService Apps"
        },
        {
            "location": "/develop/run-sample-apps/about/windows/#run-legacy-aboutservice-and-aboutclient-apps",
            "text": "Service  Open a Command Terminal window.  cd  root AllJoyn SDK folder in your file system \ncd cpp\\bin\\samples\nAboutService_legacy.exe  NOTE:  The application just runs and will print information when an AboutClient connects.  Client  Open a Command Terminal window.  cd  root AllJoyn SDK folder in your file system \ncd cpp\\bin\\samples\nAboutClient_legacy.exe  NOTE:  The application searches for any instance of AboutService that is announcing\nthe  org.alljoyn.About  and  org.alljoyn.Icon  it will connect to the service\nand call all the methods specified in the About Interface and the the About Icon\ninterface.",
            "title": "Run Legacy AboutService and AboutClient Apps"
        },
        {
            "location": "/develop/run-sample-apps/acserver/",
            "text": "Running the AC Server Sample\n\n\nThe AC Server provides an example application that shows how to use multiple service frameworks in a single application.\n\n\nThe sample can be run on the following platforms:\n\n \nLinux\n\n\n \nThin - Linux",
            "title": "Home"
        },
        {
            "location": "/develop/run-sample-apps/acserver/#running-the-ac-server-sample",
            "text": "The AC Server provides an example application that shows how to use multiple service frameworks in a single application.  The sample can be run on the following platforms:   Linux    Thin - Linux",
            "title": "Running the AC Server Sample"
        },
        {
            "location": "/develop/run-sample-apps/acserver/linux/",
            "text": "Linux - Running AC Server Sample App\n\n\nRunning ACServerSample\n\n\nPrerequisites\n\n\n\n\nOpen a terminal window.\n\n\nNavigate to the AllJoyn root dir, then:\n\n\n\n\nexport AJ_ROOT=`pwd`\n\n# Set $TARGET CPU to the \nCPU=\n value used when running scons, e.g. x86_64, x86.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/controlpanel/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/notification/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/services_common/lib:$LD_LIBRARY_PATH\n\n\n\n\nRun the AC Server Sample App\n\n\nIn one of the terminal windows, run \nACServerSample\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/sample_apps/bin/ACServerSample --config-file=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/sample_apps/bin/ACServerSample.conf",
            "title": "Linux"
        },
        {
            "location": "/develop/run-sample-apps/acserver/linux/#linux-running-ac-server-sample-app",
            "text": "",
            "title": "Linux - Running AC Server Sample App"
        },
        {
            "location": "/develop/run-sample-apps/acserver/linux/#running-acserversample",
            "text": "Prerequisites   Open a terminal window.  Navigate to the AllJoyn root dir, then:   export AJ_ROOT=`pwd`\n\n# Set $TARGET CPU to the  CPU=  value used when running scons, e.g. x86_64, x86.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/controlpanel/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/notification/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/services_common/lib:$LD_LIBRARY_PATH  Run the AC Server Sample App  In one of the terminal windows, run  ACServerSample :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/sample_apps/bin/ACServerSample --config-file=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/sample_apps/bin/ACServerSample.conf",
            "title": "Running ACServerSample"
        },
        {
            "location": "/develop/run-sample-apps/acserver/thin-linux/",
            "text": "Running AC Server Sample - Thin Linux\n\n\nPrerequisites\n\n\n\n\nBuild the thin Linux samples\n\n\nBuild the AllJoyn\n router\n. AllJoyn thin \n  apps require an AllJoyn router to connect to in order to function properly.\n\n\n\n\nRun AC Server Sample\n\n\n\n\nLaunch the AllJoyn router to allow thin apps to connect.\n\n\n\n\n```sh\n  # \n can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  export TARGET_CPU=\n\n  cd $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/release/dist/cpp/bin\n\n\nexport LD_LIBRARY_PATH=\npwd\n/../lib:$LD_LIBRARY_PATH\n   # This sets the library path to load the liballjoyn.so shared library.\n\n\n./alljoyn-daemon \n\n  ```\n\n\n\n\nLaunch the AC Server Sample (in a new terminal).\n\n\n\n\nsh\n  cd $AJ_ROOT/services/sample_apps/ACServerSample/build\n  ./ACServerSample\n\n\n\n\nUse the following apps to interact with the different services \nprovided by the AC Server Sample:\n\n\nAbout\n\n\niOS About Sample\n\n\nLinux About Client Sample\n\n\n\n\n\n\nConfig\n\n\niOS Config Sample\n\n\nAndroid Config Sample\n\n\nLinux Config Client Sample\n\n\n\n\n\n\nControl Panel\n\n\nNotification",
            "title": "Thin linux"
        },
        {
            "location": "/develop/run-sample-apps/acserver/thin-linux/#running-ac-server-sample-thin-linux",
            "text": "",
            "title": "Running AC Server Sample - Thin Linux"
        },
        {
            "location": "/develop/run-sample-apps/acserver/thin-linux/#prerequisites",
            "text": "Build the thin Linux samples  Build the AllJoyn  router . AllJoyn thin \n  apps require an AllJoyn router to connect to in order to function properly.   Run AC Server Sample   Launch the AllJoyn router to allow thin apps to connect.   ```sh\n  #   can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  export TARGET_CPU= \n  cd $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/release/dist/cpp/bin  export LD_LIBRARY_PATH= pwd /../lib:$LD_LIBRARY_PATH\n   # This sets the library path to load the liballjoyn.so shared library.  ./alljoyn-daemon  \n  ```   Launch the AC Server Sample (in a new terminal).   sh\n  cd $AJ_ROOT/services/sample_apps/ACServerSample/build\n  ./ACServerSample   Use the following apps to interact with the different services \nprovided by the AC Server Sample:  About  iOS About Sample  Linux About Client Sample    Config  iOS Config Sample  Android Config Sample  Linux Config Client Sample    Control Panel  Notification",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/run-sample-apps/alljoyn-js/",
            "text": "Running a script\n\n\nOnce AllJoyn.js is \nbuilt\n you can begin running scripts. You should\nhave an executable in the alljoyn-js folder named \"alljoynjs(.exe)\". Before running\nthe alljoynjs binary another environment variable needs to be set. On Linux, LD_LIBRARY_PATH\ntells alljoynjs where to search for libraries like libajtcl.so. This library is located in the\nlocal Thin Client dicectory the library was built in.\n\n\nexport LD_LIBRARY_PATH=\npath-to-libajtcl.so\n\n\n\n\n\nSince this is an environment variable you may also set it in .bashrc, .bashprofile file, or\nsimilar initialization files.\n\n\nAnother option is to specify LD_LIBRARY_PATH in the command line when you run alljoynjs:\n\n\nLD_LIBRARY_PATH=\npath-to-libajtcl.so\n; ./alljoynjs\n\n\n\n\nDirectly installing a script\n\n\nThe quickest way to install and run a script is to directly supply the script\nas a parameter to alljoynjs(.exe). The optional parameters are:\n\n\n--name          Set the device name for the AllJoyn.js instance\n\n--nvram-file    Specify an NVRAM file to be used (useful if running multiple instances\n                from the same directory)\n\n--log-file      Specify a log file to be used (Linux only)\n\n--daemon        Run in daemon mode (background, Linux only)\n\n--debug         Print debug logs\n\n\nscript\n        The script to be run (must be last parameter)\n\n./alljoynjs --name my_js --nvarm-file ajtcl.nvram --log-file log.txt --daemon my_script.js\n\n\n\n\nInstalling a script via the Console\n\n\nAs with alljoynjs, LD_LIBRARY_PATH will need to be set. Instead of libajtcl.so it\nneeds to point to the location of liballjoyn.so . The library will either be in the same directory\nas the console itself or in the build directory of the alljoyn git repository. The\nfull path in the git repository is (for a Linux x86 debug build) is:\n\n\nexport LD_LIBRARY_PATH=\npath-to-alljoyn-folder\n/build/linux/x86/debug/dist/cpp/lib\n\n\n\n\n\nOnce that is set the console can be run. There are just two optional parameters allowed:\n\n\n--name          A specific AllJoyn.js device you want to connect to\n\n--debug         Start the console in debugger mode\n\n\nscript\n        The script to be installed (must be last parameter)\n\n./ajs_console --name my_js my_script.js\n\n\n\n\nIn the console window you will see this (where unique name and session ID are different):\n\n\nFound script console service: :sL2zNFpI.35\nJoined session: 1744270397\n\n\n\n\nAt this point you can start interacting with the AllJoyn.js device. Basic usage\nallows for \u201cEvals\u201d which are simple lines of JavaScript that the AllJoyn.js device\nwill execute and then return the result\n\n\nvar i = 10;\nEval: var i = 10;\nEval result=0: undefined\nvar j = 20;\nEval: var j = 20;\nEval result=0: undefined\ni + j\nEval: i + j;\nEval result=0: 30\n\n\n\n\nDon't worry about the undefined eval results. These mean the line\n\u201cvar i = 10\u201d had no return value. The console also supports real time debugging which\nis covered below.\n\n\nDashboard Application\n\n\nIn order to take full advantage of the services that AllJoyn.js implements you\ncan use an Android application called Dashboard. Dashboard will render a control panel,\nconsume notifications, on-board AllJoyn(.js) devices, and allow you to edit config\nvalues of those devices. Dashboard can be found in the\n\nGoogle Play Store\n\n\nDebugging AllJoyn.js\n\n\nNow that you have AllJoyn.js running you've probably started writing your own scripts.\nAllJoyn.js has the capabilities to debug your program, similar to GDB or other debuggers.\nA command line debugger is bundled with the AllJoyn.js console application.\nThere is also a Python based GUI debugger (recommended).\n\n\nTo use the command line debugger there are no special dependencies. It builds with\nthe console application out of the box. To use it you simply run the console with\nthe flag \u201c-\u2013debug\u201d.\n\n\n./ajs_console --debug\n\n\n\n\nYou should see the console connect as usual. Instead of your script immediately\nexecuting it will be paused as soon as the console connects to the AllJoyn.js\ntarget. At this point you can begin to execute debug commands. Debug commands are\nall prefixed with \u201c$\u201d to separate them from regular console commands like Eval.\nBelow is a list of all the debug commands:\n\n\n$in                      // Step in\n$out                     // Step out\n$over                    // Step over\n$pause                   // Pause execution\n$resume                  // Resume execution\n$addbreak \nfile\n \nline\n  // Add a breakpoint\n$delbreak \nindex\n        // Delete a breakpoint\n$lb                      // List all breakpoints\n$locals                  // List all local variables\n$bt                      // See your stack trace\n$getvar \nname\n           // See a variable and its value\n$putvar \nname\n \nvalue\n   // Change a variables value\n$getscript               // See the current script\n$eval \ncommand\n          // Do an eval while debugging\n$attach                  // Attach to an AllJoyn.js target\n$detach                  // Disconnect the debugger\n\n\n\n\nIf you're already familiar with debugging principles and/or GDB then you can continue\non to the next section; otherwise, read on!\n\n\nStepping\n\n\nWhile you are debugging the most common commands will be some form of a \"step\". Stepping\nallows you to walk over your code line by line. Debuggers have three step commands:\nIn, Out, and Over. \"Stepping in\" can have two effects. If the line you're on is a\nfunction you will be taken into that function. If it is not you will simply step to the\nnext line. \"Step over\" simply steps to the next line of code, no matter what the\ncurrent line does. \"Step out\" will take you out of the current scope. For\nexample, if you are in a function and you execute step out, you will be brought up\nto the line where that function was called.\n\n\n1.  function my_func() {\n2.      var s = 'a string';       \n-- (4)\n3.      var t = 'another string';\n4.      print('In my_func()');\n5.      print(s + t);\n6.  }\n7.\n8.  function main() {\n9.      print('In main()');  \n-- (2)\n10.     my_func();           \n-- (3)\n11. }                        \n-- (5)\n12.\n13. main();    \n--- (1)\n\n\n\n\nIn the example above you would start at the marker labeled (1) or line 13. From\nhere stepping in would take you into main() at marker (2). You could then step\nover, arriving at (3). Stepping in again would take you to the start of my_func()\nat marker (4). If you decided to step out from (4) the remainder of my_func() would\nexecute and you would step to after my_func() was called, or marker (5).\n\n\nBreakpoints\n\n\nSingle stepping becomes tedious if you need to cover large sections of code. You\nmay know that you have a bug in a specific function and don't need to step through\nthe rest of your script. This is where breakpoints become useful. A breakpoint\nis a \u201ctag\u201d or \u201cmarker\u201d on a line of code that halts execution when the script\nexecution reaches that point. To add a breakpoint using the text console you will\nuse the addbreak command.\n\n\n$addbreak \nfile\n \nline\n\n\n\n\n\nThe file parameter is the name of your script and the line is the line number\nyou wish to add the breakpoint to. Once you have added a breakpoint you can resume\nexecution. If that line gets hit the debugger will automatically pause at that line.\n\n\nTo delete a breakpoint use the delbreak command.\n\n\n$delbreak \nindex\n\n\n\n\n\nThe breakpoint indexes (0 - N) are assigned in the order you defined the breakpoints. For\nexample, the first breakpoint you add is index '0', the second is '1', etc. If you\ndelete a breakpoint all higher indexes are shifted down, meaning you will never have a\ngap in indexes. If you have three breakpoint ('0', '1', and '2') and you delete breakpoint '1',\nthe breakpoint that was '2' will now be '1', and breakpoint '0' will remain the same.\n\n\nThe \u201c$lb\u201d command will list breakpoints. If you have added and removed\nbreakpoints and are not sure what indexes correspond to breakpoints simply execute\n$lb and you will be shown all current breakpoints.\n\n\n$lb\nBreakpoints:\nFile: print2.js, Line: 10   \n-- Index 0\nFile: print2.js, Line: 20   \n-- Index 1\nFile: print2.js, Line: 15   \n-- Index 2\n\n\n\n\nStack Trace\n\n\nDuring debugging you may have lost track of where you are in the program's execution,\nwhen this happens it will be important to see where in the program you are. The stack\ntrace will list your current position and all other points in\ntime where your scope has changed. Take the previous example:\n\n\n1.  function my_func() {\n2.      var s = 'a string';\n3.      var t = 'another string';\n4.      print('In my_func()');     \n-- You are here\n5.      print(s + t);\n6.  }\n7.\n8.  function main() {\n9.      print('In main()');\n10.     my_func();\n11. }\n12.\n13. main();\n\n\n\n\nIf you are stepping through the above script and you stop at line 4\nand execute '$bt' you will be presented with:\n\n\n$bt\nFile: my_script.js, Function: my_func, Line: 4, PC: 3\nFile: my_script.js, Function: main, Line: 10, PC: 2\n\n\n\n\nYou are currently at line 4 in my_func(). The second line shows\nhow my_func() was called in main() at line 10.\nThis is just a simple stack trace but as you get deeper and deeper into functions\nthe trace will grow.\n\n\nVariable Functions\n\n\nBeing able to see the value of variables is quite useful for finding a bug in your\nscript. Up until now you have probably had to print out variables in question to\ndetermine their values at run time. There are several debugging functions that allow\nyou to see variable values during debugging. First you will need to get a list of\nvariables using $locals:\n\n\n$locals\n\n\n\n\nThis prints out all the local variables and their values in your current\nscope. Some complex data types like objects or pointers may not be particularly\nuseful because they will show the C pointer to that variable; however, types\nsuch as numbers, strings, or buffers will show you the real value those variables contain.\nSimilar to $locals is $getvar which gets the single named variable value.\nThe key difference is that $getvar works on both global and local\nvariables:\n\n\nvar glb1 = \nI am a global\n;\n\nfunction main() {\n   var local = \nI am a local\n;\n   print('Im in main');\n}\n\nmain();\n\n\n\n\nIn this example the only way to see the value of glb1 is to use $getvar:\n\n\n$getvar glb1\nI am a global\n\n\n\n\nThe counterpart to $getvar is $putvar. It allows you to change the value of a\nvariable while debugging:\n\n\n1.  function my_func() {\n2.      var s = 'a string ';\n3.      var t = 'another string';\n4.      print('In my_func()');     \n-- You are here\n5.      print(s + t);\n6.  }\n7.\n8.  function main() {\n9.      print('In main()');\n10.     my_func();\n11. }\n12.\n13. main();\n\n\n\n\nAssuming you are paused at line 4, you can use $putvar to change the output of the print\nstatement on line 5.\n\n\n$putvar s \nchanged \n\n$over\n$over\nPRINT: \nchanged another string\n\n\n\n\n\nInstead of printing \u201ca string another string\u201d it prints \u201cchanged another string\u201d.\nThis can be very useful if you want to pass in different values into\na function and see the result. Instead of having to change the script and re-run\nit repeatedly you can use $putvar.\n\n\nEval\n\n\nUsing Eval while debugging behaves almost identically as using console eval. Note\nthat if you want to take advantage of any debugging features while using Eval,\nyou must use \"$eval\" and cannot use the standard console eval. Using the debugging\nvariant of Eval (\"$eval\") allows any code executed by Eval to be run as debug code,\nallowing you to do things like hit breakpoints and set variables. Eval in the context\nof debugging is syntactically the same, you just need to prefix your eval\nstring with $eval.\n\n\n$eval 1+1\n2\n\n\n\n\nUsing $eval while debugging is very powerful. It is possible to use $eval to\nchange and retrieve variable names just like $getvar and $putvar:\n\n\n$eval i = 10; // equivalent to \n$putvar i 10\n\n$eval i;      // equivalent to \n$getvar i\n\n\n\n\n\nYou can use $eval to create new variables while you are debugging, then use those\nnew variables in conjunction with locals or globals that already exist in your script.\nObject inspection is another use. Since getvar does not give you an object's\nelements you can use eval to stringify and view the elements of an object, as well as\nthe values contained in the elements. For example:\n\n\nvar object = {\n   int_val:100,\n   str_val:\nstring\n\n}\n\n\n\n\nYou can then use eval to view the members of that object:\n\n\n$eval print(JSON.stringify(object));\n{\nint_val\n:100,\nstr_val\n:\nstring\n}\n\n\n\n\nFurther, knowing that the object has elements 'int_val' and 'str_val' you can\ninterrogate them using $eval.\n\n\n$eval object.int_val\n100\n$eval object.str_val\n\nstring\n\n\n\n\n\nEval can even be used to execute a function while debugging\n\n\n$eval foo(bar);\n\nfoo will then be executed\n\n\n\n\n\nThe command line debugger is useful but primitive. The GUI allows\nmuch more information to be seen at once, which provides a better debugging\nexperience. The text console was described in depth because it\nbetter illustrates what is happening within\nthe debugger. The GUI debugger executes the same commands that were just described, but the output\nis visually organized to be more easily viewed and manipulated. The GUI debugger\nhas some extra dependencies.\n\n\nPython GUI Debugger\n\n\nProvided you have sucessfully built the Python debugger extension for your platform,\nyou can begin debugging an AllJoyn.js application. Begin by starting the debugger GUI,\noptionally specifying an AllJoyn.js device name. On Windows, make sure your PATH\nenvironment variable has the Python 3.4 directory listed first.\n\n\npython pydebugger.py --name my_ajs\npython pydebugger.py\n\n\n\n\nOnce connected to the AllJoyn.js device, the GUI will display the currently\ninstalled script (if one exists) as well as the available control buttons.\n\n\n\n\n\n\n\n\nThe control buttons are along the left side of the GUI. This is how functions\nlike single stepping, pause, resume, attach, detach, script install, or\nclosing the GUI are controlled.\n\n\n\n\n\n\nThis is the source viewer window where you see the JavaScript code that is\nrunning on the device. Along the left side of this window are\nthe line numbers. Line numbers highlighted in red have indicate that a breakpoint\nhas been set there. In this case there are two breakpoints set, one at line 35\nand the other at line 53. You can set breakpoints in this window by double clicking\nthe line number. The line the debugger is\npaused on is highlighted in yellow. Here we are paused at line 46.\n\n\n\n\n\n\nThe top right window contains all local variables as well as a space to change\nthe values of the locals (i.e. $putvar functionality). To use the $putvar\nfunctionality you must select a variable, highlighting it yellow, and then type\nthe desired value in the text box next to the \"PutVar\" button. Clicking \"PutVar\"\nwill change the selected variables value.\n\n\n\n\n\n\nThis is the breakpoint view. Here you can add and delete breakpoints.\nTo add a breakpoint you must type the script name followed by the line number\nthen press the \"Add Breakpoint\" button.\nTo delete a breakpoint you can either click the breakpoint (highlighting\nit yellow) and press the delete key or type the breakpoint's index into the text box above\n\"Delete\" and press the \"Delete\" button.\n\n\n\n\n\n\nHere is your stack trace viewer. It will dynamically change as you step in or\nout of functions. You can see the current function you're in, the line number, and\nthe Program Counter (PC) for each stack window.\n\n\n\n\n\n\nThis box and button are for executing $eval while debugging. You can do everything\nthat is available in the text console by typing in the eval string and clicking\n\"Eval\". You will see the output in the console window (see 7 below).\n\n\n\n\n\n\nThis window displays any relevant information as you are debugging. It will show\nany printed text, notifications from the AllJoyn notification service, and eval results.\nYou can also see relevant debug state information, like breakpoints being added or deleted.\nTo the left of this window are filter buttons which turn on or off printing of the three\nnotification types.",
            "title": "Home"
        },
        {
            "location": "/develop/run-sample-apps/alljoyn-js/#running-a-script",
            "text": "Once AllJoyn.js is  built  you can begin running scripts. You should\nhave an executable in the alljoyn-js folder named \"alljoynjs(.exe)\". Before running\nthe alljoynjs binary another environment variable needs to be set. On Linux, LD_LIBRARY_PATH\ntells alljoynjs where to search for libraries like libajtcl.so. This library is located in the\nlocal Thin Client dicectory the library was built in.  export LD_LIBRARY_PATH= path-to-libajtcl.so   Since this is an environment variable you may also set it in .bashrc, .bashprofile file, or\nsimilar initialization files.  Another option is to specify LD_LIBRARY_PATH in the command line when you run alljoynjs:  LD_LIBRARY_PATH= path-to-libajtcl.so ; ./alljoynjs  Directly installing a script  The quickest way to install and run a script is to directly supply the script\nas a parameter to alljoynjs(.exe). The optional parameters are:  --name          Set the device name for the AllJoyn.js instance\n\n--nvram-file    Specify an NVRAM file to be used (useful if running multiple instances\n                from the same directory)\n\n--log-file      Specify a log file to be used (Linux only)\n\n--daemon        Run in daemon mode (background, Linux only)\n\n--debug         Print debug logs script         The script to be run (must be last parameter)\n\n./alljoynjs --name my_js --nvarm-file ajtcl.nvram --log-file log.txt --daemon my_script.js  Installing a script via the Console  As with alljoynjs, LD_LIBRARY_PATH will need to be set. Instead of libajtcl.so it\nneeds to point to the location of liballjoyn.so . The library will either be in the same directory\nas the console itself or in the build directory of the alljoyn git repository. The\nfull path in the git repository is (for a Linux x86 debug build) is:  export LD_LIBRARY_PATH= path-to-alljoyn-folder /build/linux/x86/debug/dist/cpp/lib   Once that is set the console can be run. There are just two optional parameters allowed:  --name          A specific AllJoyn.js device you want to connect to\n\n--debug         Start the console in debugger mode script         The script to be installed (must be last parameter)\n\n./ajs_console --name my_js my_script.js  In the console window you will see this (where unique name and session ID are different):  Found script console service: :sL2zNFpI.35\nJoined session: 1744270397  At this point you can start interacting with the AllJoyn.js device. Basic usage\nallows for \u201cEvals\u201d which are simple lines of JavaScript that the AllJoyn.js device\nwill execute and then return the result  var i = 10;\nEval: var i = 10;\nEval result=0: undefined\nvar j = 20;\nEval: var j = 20;\nEval result=0: undefined\ni + j\nEval: i + j;\nEval result=0: 30  Don't worry about the undefined eval results. These mean the line\n\u201cvar i = 10\u201d had no return value. The console also supports real time debugging which\nis covered below.",
            "title": "Running a script"
        },
        {
            "location": "/develop/run-sample-apps/alljoyn-js/#dashboard-application",
            "text": "In order to take full advantage of the services that AllJoyn.js implements you\ncan use an Android application called Dashboard. Dashboard will render a control panel,\nconsume notifications, on-board AllJoyn(.js) devices, and allow you to edit config\nvalues of those devices. Dashboard can be found in the Google Play Store",
            "title": "Dashboard Application"
        },
        {
            "location": "/develop/run-sample-apps/alljoyn-js/#debugging-alljoynjs",
            "text": "Now that you have AllJoyn.js running you've probably started writing your own scripts.\nAllJoyn.js has the capabilities to debug your program, similar to GDB or other debuggers.\nA command line debugger is bundled with the AllJoyn.js console application.\nThere is also a Python based GUI debugger (recommended).  To use the command line debugger there are no special dependencies. It builds with\nthe console application out of the box. To use it you simply run the console with\nthe flag \u201c-\u2013debug\u201d.  ./ajs_console --debug  You should see the console connect as usual. Instead of your script immediately\nexecuting it will be paused as soon as the console connects to the AllJoyn.js\ntarget. At this point you can begin to execute debug commands. Debug commands are\nall prefixed with \u201c$\u201d to separate them from regular console commands like Eval.\nBelow is a list of all the debug commands:  $in                      // Step in\n$out                     // Step out\n$over                    // Step over\n$pause                   // Pause execution\n$resume                  // Resume execution\n$addbreak  file   line   // Add a breakpoint\n$delbreak  index         // Delete a breakpoint\n$lb                      // List all breakpoints\n$locals                  // List all local variables\n$bt                      // See your stack trace\n$getvar  name            // See a variable and its value\n$putvar  name   value    // Change a variables value\n$getscript               // See the current script\n$eval  command           // Do an eval while debugging\n$attach                  // Attach to an AllJoyn.js target\n$detach                  // Disconnect the debugger  If you're already familiar with debugging principles and/or GDB then you can continue\non to the next section; otherwise, read on!",
            "title": "Debugging AllJoyn.js"
        },
        {
            "location": "/develop/run-sample-apps/alljoyn-js/#stepping",
            "text": "While you are debugging the most common commands will be some form of a \"step\". Stepping\nallows you to walk over your code line by line. Debuggers have three step commands:\nIn, Out, and Over. \"Stepping in\" can have two effects. If the line you're on is a\nfunction you will be taken into that function. If it is not you will simply step to the\nnext line. \"Step over\" simply steps to the next line of code, no matter what the\ncurrent line does. \"Step out\" will take you out of the current scope. For\nexample, if you are in a function and you execute step out, you will be brought up\nto the line where that function was called.  1.  function my_func() {\n2.      var s = 'a string';        -- (4)\n3.      var t = 'another string';\n4.      print('In my_func()');\n5.      print(s + t);\n6.  }\n7.\n8.  function main() {\n9.      print('In main()');   -- (2)\n10.     my_func();            -- (3)\n11. }                         -- (5)\n12.\n13. main();     --- (1)  In the example above you would start at the marker labeled (1) or line 13. From\nhere stepping in would take you into main() at marker (2). You could then step\nover, arriving at (3). Stepping in again would take you to the start of my_func()\nat marker (4). If you decided to step out from (4) the remainder of my_func() would\nexecute and you would step to after my_func() was called, or marker (5).",
            "title": "Stepping"
        },
        {
            "location": "/develop/run-sample-apps/alljoyn-js/#breakpoints",
            "text": "Single stepping becomes tedious if you need to cover large sections of code. You\nmay know that you have a bug in a specific function and don't need to step through\nthe rest of your script. This is where breakpoints become useful. A breakpoint\nis a \u201ctag\u201d or \u201cmarker\u201d on a line of code that halts execution when the script\nexecution reaches that point. To add a breakpoint using the text console you will\nuse the addbreak command.  $addbreak  file   line   The file parameter is the name of your script and the line is the line number\nyou wish to add the breakpoint to. Once you have added a breakpoint you can resume\nexecution. If that line gets hit the debugger will automatically pause at that line.  To delete a breakpoint use the delbreak command.  $delbreak  index   The breakpoint indexes (0 - N) are assigned in the order you defined the breakpoints. For\nexample, the first breakpoint you add is index '0', the second is '1', etc. If you\ndelete a breakpoint all higher indexes are shifted down, meaning you will never have a\ngap in indexes. If you have three breakpoint ('0', '1', and '2') and you delete breakpoint '1',\nthe breakpoint that was '2' will now be '1', and breakpoint '0' will remain the same.  The \u201c$lb\u201d command will list breakpoints. If you have added and removed\nbreakpoints and are not sure what indexes correspond to breakpoints simply execute\n$lb and you will be shown all current breakpoints.  $lb\nBreakpoints:\nFile: print2.js, Line: 10    -- Index 0\nFile: print2.js, Line: 20    -- Index 1\nFile: print2.js, Line: 15    -- Index 2",
            "title": "Breakpoints"
        },
        {
            "location": "/develop/run-sample-apps/alljoyn-js/#stack-trace",
            "text": "During debugging you may have lost track of where you are in the program's execution,\nwhen this happens it will be important to see where in the program you are. The stack\ntrace will list your current position and all other points in\ntime where your scope has changed. Take the previous example:  1.  function my_func() {\n2.      var s = 'a string';\n3.      var t = 'another string';\n4.      print('In my_func()');      -- You are here\n5.      print(s + t);\n6.  }\n7.\n8.  function main() {\n9.      print('In main()');\n10.     my_func();\n11. }\n12.\n13. main();  If you are stepping through the above script and you stop at line 4\nand execute '$bt' you will be presented with:  $bt\nFile: my_script.js, Function: my_func, Line: 4, PC: 3\nFile: my_script.js, Function: main, Line: 10, PC: 2  You are currently at line 4 in my_func(). The second line shows\nhow my_func() was called in main() at line 10.\nThis is just a simple stack trace but as you get deeper and deeper into functions\nthe trace will grow.",
            "title": "Stack Trace"
        },
        {
            "location": "/develop/run-sample-apps/alljoyn-js/#variable-functions",
            "text": "Being able to see the value of variables is quite useful for finding a bug in your\nscript. Up until now you have probably had to print out variables in question to\ndetermine their values at run time. There are several debugging functions that allow\nyou to see variable values during debugging. First you will need to get a list of\nvariables using $locals:  $locals  This prints out all the local variables and their values in your current\nscope. Some complex data types like objects or pointers may not be particularly\nuseful because they will show the C pointer to that variable; however, types\nsuch as numbers, strings, or buffers will show you the real value those variables contain.\nSimilar to $locals is $getvar which gets the single named variable value.\nThe key difference is that $getvar works on both global and local\nvariables:  var glb1 =  I am a global ;\n\nfunction main() {\n   var local =  I am a local ;\n   print('Im in main');\n}\n\nmain();  In this example the only way to see the value of glb1 is to use $getvar:  $getvar glb1\nI am a global  The counterpart to $getvar is $putvar. It allows you to change the value of a\nvariable while debugging:  1.  function my_func() {\n2.      var s = 'a string ';\n3.      var t = 'another string';\n4.      print('In my_func()');      -- You are here\n5.      print(s + t);\n6.  }\n7.\n8.  function main() {\n9.      print('In main()');\n10.     my_func();\n11. }\n12.\n13. main();  Assuming you are paused at line 4, you can use $putvar to change the output of the print\nstatement on line 5.  $putvar s  changed  \n$over\n$over\nPRINT:  changed another string   Instead of printing \u201ca string another string\u201d it prints \u201cchanged another string\u201d.\nThis can be very useful if you want to pass in different values into\na function and see the result. Instead of having to change the script and re-run\nit repeatedly you can use $putvar.",
            "title": "Variable Functions"
        },
        {
            "location": "/develop/run-sample-apps/alljoyn-js/#eval",
            "text": "Using Eval while debugging behaves almost identically as using console eval. Note\nthat if you want to take advantage of any debugging features while using Eval,\nyou must use \"$eval\" and cannot use the standard console eval. Using the debugging\nvariant of Eval (\"$eval\") allows any code executed by Eval to be run as debug code,\nallowing you to do things like hit breakpoints and set variables. Eval in the context\nof debugging is syntactically the same, you just need to prefix your eval\nstring with $eval.  $eval 1+1\n2  Using $eval while debugging is very powerful. It is possible to use $eval to\nchange and retrieve variable names just like $getvar and $putvar:  $eval i = 10; // equivalent to  $putvar i 10 \n$eval i;      // equivalent to  $getvar i   You can use $eval to create new variables while you are debugging, then use those\nnew variables in conjunction with locals or globals that already exist in your script.\nObject inspection is another use. Since getvar does not give you an object's\nelements you can use eval to stringify and view the elements of an object, as well as\nthe values contained in the elements. For example:  var object = {\n   int_val:100,\n   str_val: string \n}  You can then use eval to view the members of that object:  $eval print(JSON.stringify(object));\n{ int_val :100, str_val : string }  Further, knowing that the object has elements 'int_val' and 'str_val' you can\ninterrogate them using $eval.  $eval object.int_val\n100\n$eval object.str_val string   Eval can even be used to execute a function while debugging  $eval foo(bar); foo will then be executed   The command line debugger is useful but primitive. The GUI allows\nmuch more information to be seen at once, which provides a better debugging\nexperience. The text console was described in depth because it\nbetter illustrates what is happening within\nthe debugger. The GUI debugger executes the same commands that were just described, but the output\nis visually organized to be more easily viewed and manipulated. The GUI debugger\nhas some extra dependencies.",
            "title": "Eval"
        },
        {
            "location": "/develop/run-sample-apps/alljoyn-js/#python-gui-debugger",
            "text": "Provided you have sucessfully built the Python debugger extension for your platform,\nyou can begin debugging an AllJoyn.js application. Begin by starting the debugger GUI,\noptionally specifying an AllJoyn.js device name. On Windows, make sure your PATH\nenvironment variable has the Python 3.4 directory listed first.  python pydebugger.py --name my_ajs\npython pydebugger.py  Once connected to the AllJoyn.js device, the GUI will display the currently\ninstalled script (if one exists) as well as the available control buttons.     The control buttons are along the left side of the GUI. This is how functions\nlike single stepping, pause, resume, attach, detach, script install, or\nclosing the GUI are controlled.    This is the source viewer window where you see the JavaScript code that is\nrunning on the device. Along the left side of this window are\nthe line numbers. Line numbers highlighted in red have indicate that a breakpoint\nhas been set there. In this case there are two breakpoints set, one at line 35\nand the other at line 53. You can set breakpoints in this window by double clicking\nthe line number. The line the debugger is\npaused on is highlighted in yellow. Here we are paused at line 46.    The top right window contains all local variables as well as a space to change\nthe values of the locals (i.e. $putvar functionality). To use the $putvar\nfunctionality you must select a variable, highlighting it yellow, and then type\nthe desired value in the text box next to the \"PutVar\" button. Clicking \"PutVar\"\nwill change the selected variables value.    This is the breakpoint view. Here you can add and delete breakpoints.\nTo add a breakpoint you must type the script name followed by the line number\nthen press the \"Add Breakpoint\" button.\nTo delete a breakpoint you can either click the breakpoint (highlighting\nit yellow) and press the delete key or type the breakpoint's index into the text box above\n\"Delete\" and press the \"Delete\" button.    Here is your stack trace viewer. It will dynamically change as you step in or\nout of functions. You can see the current function you're in, the line number, and\nthe Program Counter (PC) for each stack window.    This box and button are for executing $eval while debugging. You can do everything\nthat is available in the text console by typing in the eval string and clicking\n\"Eval\". You will see the output in the console window (see 7 below).    This window displays any relevant information as you are debugging. It will show\nany printed text, notifications from the AllJoyn notification service, and eval results.\nYou can also see relevant debug state information, like breakpoints being added or deleted.\nTo the left of this window are filter buttons which turn on or off printing of the three\nnotification types.",
            "title": "Python GUI Debugger"
        },
        {
            "location": "/develop/run-sample-apps/basic/android/",
            "text": "Android - Core Sample Apps\n\n\nRunning Android SimpleClient, SimpleService Apps\n\n\nThe Android SimpleClient and SimpleService provide a simple \nexample of how a client app and a service app can be implemented. \nThe SimpleService listens for connections, the SimpleClient joins \nthe SimpleService session, and text sent from the SimpleClient to \nthe SimpleService via a BusMethod invoked on a SimpleService \nBusObject is displayed in both apps.\n\n\n\n\nConnect device A and device B to the same network.\n\n\nLoad SimpleClient.apk onto device A, and start app \"Simple Client\".\n  \n\n\nLoad SimpleService.apk onto device B, and start app \"Simple Service\". \nThe \"Simple Service\" will simply show a blank screen when started.\n\n\nThe SimpleClient will join the session of the SimpleService, \nafter which the SimpleClient will show the below.\n  \n\n\nEnter text in the \"Simple Client\" and press \nEnter\n to have the \ntext sent and returned by the \"Simple Service\", and displayed \non-screen for both apps.\n  \n\n\n\n\nRunning Android Chat App\n\n\nThe Android Chat app shows how a chat room can be implemented using \nthe AllJoyn\n framework, where an app first creates and joins \na session, after which one or more other apps later join the same session.\n\n\n\n\nConnect all devices to the same network.\n\n\nLoad Chat.apk onto devices, and start app \"AllJoyn Chat Sample for Android\".\n\n\nCreate and start a channel on the first device.\n\n\nSelect the right tab (with a \"+\" on it).\n  \n\n\nCreate a channel via the \nSet Channel Name\n button - enter a channel name when prompted.\n  \n\n\nPress the \nStart Channel\n button.\n  \n\n\n\n\n\n\nJoin the channel on the first device.\n\n\nPress the left tab.\n\n\nPress the \nJoin Channel\n button, and choose the channel that was created above.\n  \n\n  \n\n\n\n\n\n\nJoin the channel on other device(s).\n\n\nPress the left tab.\n\n\nPress the \nJoin Channel\n button, and choose the channel that was created above.\n\n\n\n\n\n\nEnter text in the \"Enter message here\" text box, and hit enter to chat between devices. \nIn the message history, the Bus Attachment's Unique name will be displayed \nalongside text from the \"other\" device(s), or \"Me\" will displayed alongside text from \"this\" device.",
            "title": "Android"
        },
        {
            "location": "/develop/run-sample-apps/basic/android/#android-core-sample-apps",
            "text": "",
            "title": "Android - Core Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/basic/android/#running-android-simpleclient-simpleservice-apps",
            "text": "The Android SimpleClient and SimpleService provide a simple \nexample of how a client app and a service app can be implemented. \nThe SimpleService listens for connections, the SimpleClient joins \nthe SimpleService session, and text sent from the SimpleClient to \nthe SimpleService via a BusMethod invoked on a SimpleService \nBusObject is displayed in both apps.   Connect device A and device B to the same network.  Load SimpleClient.apk onto device A, and start app \"Simple Client\".\n    Load SimpleService.apk onto device B, and start app \"Simple Service\". \nThe \"Simple Service\" will simply show a blank screen when started.  The SimpleClient will join the session of the SimpleService, \nafter which the SimpleClient will show the below.\n    Enter text in the \"Simple Client\" and press  Enter  to have the \ntext sent and returned by the \"Simple Service\", and displayed \non-screen for both apps.",
            "title": "Running Android SimpleClient, SimpleService Apps"
        },
        {
            "location": "/develop/run-sample-apps/basic/android/#running-android-chat-app",
            "text": "The Android Chat app shows how a chat room can be implemented using \nthe AllJoyn  framework, where an app first creates and joins \na session, after which one or more other apps later join the same session.   Connect all devices to the same network.  Load Chat.apk onto devices, and start app \"AllJoyn Chat Sample for Android\".  Create and start a channel on the first device.  Select the right tab (with a \"+\" on it).\n    Create a channel via the  Set Channel Name  button - enter a channel name when prompted.\n    Press the  Start Channel  button.\n      Join the channel on the first device.  Press the left tab.  Press the  Join Channel  button, and choose the channel that was created above.\n   \n      Join the channel on other device(s).  Press the left tab.  Press the  Join Channel  button, and choose the channel that was created above.    Enter text in the \"Enter message here\" text box, and hit enter to chat between devices. \nIn the message history, the Bus Attachment's Unique name will be displayed \nalongside text from the \"other\" device(s), or \"Me\" will displayed alongside text from \"this\" device.",
            "title": "Running Android Chat App"
        },
        {
            "location": "/develop/run-sample-apps/basic/",
            "text": "Running the Basic Sample\n\n\nThe Basic sample application provides the ability to execute a concatenate method - cat.\n\n\nThe Service application is designed to advertise a well-known name: \"org.alljoyn.Bus.sample\".\nIt will accept sessions on the session port 25.\n\n\nThe Client application is designed to discover the well-known name: \"org.alljoyn.Bus.sample\".\nIt will then join a session on the session port 25.  Depending on the platform, \nthe experience is slightly different, but each Client implementation will call the \"cat\" Bus Method.\n\n\nThe Basic application interface is as follows:\n\n\nnode name=\n/sample\n\n    \ninterface name=\norg.alljoyn.Bus.sample\n\n        \nmethod name=\ncat\n\n            \narg name=\ninStr1\n type=\ns\n direction=\nin\n/\n\n            \narg name=\ninStr2\n type=\ns\n direction=\nin\n/\n\n            \narg name=\noutStr\n type=\ns\n direction=\nout\n/\n\n        \n/method\n\n    \n/interface\n\n\n/node\n\n\n\n\n\nThe sample can be run on the following platforms:\n\n \nAndroid\n\n\n \nLinux\n\n\n \niOS/OSX\n\n\n \nWindows\n\n\n \nThin - Linux\n\n\n \nThin - Windows",
            "title": "Home"
        },
        {
            "location": "/develop/run-sample-apps/basic/#running-the-basic-sample",
            "text": "The Basic sample application provides the ability to execute a concatenate method - cat.  The Service application is designed to advertise a well-known name: \"org.alljoyn.Bus.sample\".\nIt will accept sessions on the session port 25.  The Client application is designed to discover the well-known name: \"org.alljoyn.Bus.sample\".\nIt will then join a session on the session port 25.  Depending on the platform, \nthe experience is slightly different, but each Client implementation will call the \"cat\" Bus Method.  The Basic application interface is as follows:  node name= /sample \n     interface name= org.alljoyn.Bus.sample \n         method name= cat \n             arg name= inStr1  type= s  direction= in / \n             arg name= inStr2  type= s  direction= in / \n             arg name= outStr  type= s  direction= out / \n         /method \n     /interface  /node   The sample can be run on the following platforms:   Android    Linux    iOS/OSX    Windows    Thin - Linux    Thin - Windows",
            "title": "Running the Basic Sample"
        },
        {
            "location": "/develop/run-sample-apps/basic/ios-osx/",
            "text": "Running Basic Sample - iOS\n\n\nPrerequisites\n\n\n\n\nBuild samples\n and install the Basic Client and Service sample apps on two iOS devices.\n\n\nBoth iOS devices must be connected to the same Wi-Fi network\n\n\n\n\nRun Basic Client \n Service\n\n\n\n\nLaunch the Basic Client app on one iOS device.\n\n\nThe Basic Client app screen should look similar to this:\n\n\n\n\n\n\nFigure:\n Client startup screen\n\n\n\n\nLaunch the Basic Service app on a second iOS device.\n\n\nThe screen should look similar to this:\n\n\n\n\n\n\nFigure:\n Service startup screen\n\n\n\n\nIn the Basic Client app, press the \nCall Service\n button.\nThis will cause the client to try and find the service, connect\nto the service, and execute a sample bus method.\n\n\n\n\n\n\nFigure:\n Client screen after pressing \nCall Service\n\n\n\n\nThe Basic Client app screen should look like this:\n\n\n\n\n\n\nFigure:\n Client screen after successful connection\n\n\n\n\nThe Basic Service app screen should look like this:\n\n\n\n\n\n\nFigure:\n Service screen after successful connection",
            "title": "Ios osx"
        },
        {
            "location": "/develop/run-sample-apps/basic/ios-osx/#running-basic-sample-ios",
            "text": "",
            "title": "Running Basic Sample - iOS"
        },
        {
            "location": "/develop/run-sample-apps/basic/ios-osx/#prerequisites",
            "text": "Build samples  and install the Basic Client and Service sample apps on two iOS devices.  Both iOS devices must be connected to the same Wi-Fi network",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/run-sample-apps/basic/ios-osx/#run-basic-client-service",
            "text": "Launch the Basic Client app on one iOS device.  The Basic Client app screen should look similar to this:    Figure:  Client startup screen   Launch the Basic Service app on a second iOS device.  The screen should look similar to this:    Figure:  Service startup screen   In the Basic Client app, press the  Call Service  button.\nThis will cause the client to try and find the service, connect\nto the service, and execute a sample bus method.    Figure:  Client screen after pressing  Call Service   The Basic Client app screen should look like this:    Figure:  Client screen after successful connection   The Basic Service app screen should look like this:    Figure:  Service screen after successful connection",
            "title": "Run Basic Client &amp; Service"
        },
        {
            "location": "/develop/run-sample-apps/basic/linux/",
            "text": "Linux - Basic Sample App\n\n\nRunning Linux BasicClient, BasicService Apps\n\n\nThe Linux BasicClient and BasicService provide a simple example \nof how a basic client and service app could be implemented. \nThe BasicService listens for connections and advertises a service, \nthe BasicClient listens for a service advertisement and joins the \nBasicService session. After joining the session, the BasicClient \nmakes a method call on a BusObject of the BasicService, and \nprints out the string return value.\n\n\nPrerequisites\n\n\n\n\nOpen two terminal windows.\n\n\nIn each, navigate to the AllJoyn root dir, then:\n\n\n\n\n``sh\n   export AJ_ROOT=\npwd`\n\n\n# \n can be either x86_64, x86, or whatever value you set for \"CPU=\" when running SCons.\n   export TARGET_CPU=x86\n\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$LD_LIBRARY_PATH\n   ```\n\n\nRun the Linux BasicClient Sample App\n\n\nIn one of the terminal windows, run \nbasic_client\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/basic_client\n\n\n\n\nRun the Linux BasicService Sample App\n\n\nIn the other terminal window, run \nbasic_service\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/basic_service",
            "title": "Linux"
        },
        {
            "location": "/develop/run-sample-apps/basic/linux/#linux-basic-sample-app",
            "text": "",
            "title": "Linux - Basic Sample App"
        },
        {
            "location": "/develop/run-sample-apps/basic/linux/#running-linux-basicclient-basicservice-apps",
            "text": "The Linux BasicClient and BasicService provide a simple example \nof how a basic client and service app could be implemented. \nThe BasicService listens for connections and advertises a service, \nthe BasicClient listens for a service advertisement and joins the \nBasicService session. After joining the session, the BasicClient \nmakes a method call on a BusObject of the BasicService, and \nprints out the string return value.  Prerequisites   Open two terminal windows.  In each, navigate to the AllJoyn root dir, then:   ``sh\n   export AJ_ROOT= pwd`  #   can be either x86_64, x86, or whatever value you set for \"CPU=\" when running SCons.\n   export TARGET_CPU=x86  export LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$LD_LIBRARY_PATH\n   ```  Run the Linux BasicClient Sample App  In one of the terminal windows, run  basic_client :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/basic_client  Run the Linux BasicService Sample App  In the other terminal window, run  basic_service :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/basic_service",
            "title": "Running Linux BasicClient, BasicService Apps"
        },
        {
            "location": "/develop/run-sample-apps/basic/thin-linux/",
            "text": "Running Basic Sample - Thin Linux\n\n\nPrerequisites\n\n\n\n\nBuild the thin Linux samples\n\n\nBuild the AllJoyn\n router\n. AllJoyn thin \n  apps require an AllJoyn router to connect to in order to function properly.\n\n\n\n\nRun Basic Client and Service\n\n\n\n\nLaunch the AllJoyn daemon using the config file to allow thin apps to connect.\n\n\n\n\n```sh\n  # \n can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  export TARGET_CPU=\n\n  cd $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/release/dist/cpp/bin\n\n\n# This sets the library path to load the liballjoyn.so shared library.\n  export LD_LIBRARY_PATH=\npwd\n/../lib:$LD_LIBRARY_PATH\n\n\n./alljoyn-daemon \n\n  ```\n\n\n\n\nLaunch basic_service (in a new terminal).\n\n\n\n\nsh\n  cd $AJ_ROOT/core/ajtcl/samples/basic\n  ./basic_service\n\n\n\n\nLaunch basic_client (in a new terminal).\n\n\n\n\nsh\n  cd $AJ_ROOT/core/ajtcl/samples/basic\n  ./basic_client\n \n\n\nThe output from basic_client should look like this:\n\n\n./basic_client\n\nnode name=\n/sample\n\n\ninterface name=\norg.alljoyn.Bus.sample\n\n  \nmethod name=\nDummy\n\n    \narg name=\nfoo\n type=\ni\n direction=\nin\n/\n\n  \n/method\n\n  \nmethod name=\nDummy2\n\n    \narg name=\nfee\n type=\ni\n direction=\nin\n/\n\n  \n/method\n\n  \nmethod name=\ncat\n\n    \narg name=\ninStr1\n type=\ns\n direction=\nin\n/\n\n    \narg name=\ninStr2\n type=\ns\n direction=\nin\n/\n\n    \narg name=\noutStr\n type=\ns\n direction=\nout\n/\n\n  \n/method\n\n\n/interface\n\n\n/node\n\n'org.alljoyn.Bus.sample.cat' (path='/sample') returned 'Hello World!'.\nBasic client exiting with status 0.\n\n\n\n\nThe output from basic_service should look like this:\n\n\n./basic_service\n\nnode name=\n/sample\n\n\ninterface name=\norg.alljoyn.Bus.sample\n\n  \nmethod name=\nDummy\n\n    \narg name=\nfoo\n type=\ni\n direction=\nin\n/\n\n  \n/method\n\n  \nmethod name=\ncat\n\n    \narg name=\ninStr1\n type=\ns\n direction=\nin\n/\n\n    \narg name=\ninStr2\n type=\ns\n direction=\nin\n/\n\n    \narg name=\noutStr\n type=\ns\n direction=\nout\n/\n\n  \n/method\n\n\n/interface\n\n\n/node\n\n000.000 aj_guid.c:76 LookupName(): NULL\nSession lost. ID = 681866772, reason = 2AllJoyn disconnect.",
            "title": "Thin linux"
        },
        {
            "location": "/develop/run-sample-apps/basic/thin-linux/#running-basic-sample-thin-linux",
            "text": "",
            "title": "Running Basic Sample - Thin Linux"
        },
        {
            "location": "/develop/run-sample-apps/basic/thin-linux/#prerequisites",
            "text": "Build the thin Linux samples  Build the AllJoyn  router . AllJoyn thin \n  apps require an AllJoyn router to connect to in order to function properly.",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/run-sample-apps/basic/thin-linux/#run-basic-client-and-service",
            "text": "Launch the AllJoyn daemon using the config file to allow thin apps to connect.   ```sh\n  #   can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  export TARGET_CPU= \n  cd $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/release/dist/cpp/bin  # This sets the library path to load the liballjoyn.so shared library.\n  export LD_LIBRARY_PATH= pwd /../lib:$LD_LIBRARY_PATH  ./alljoyn-daemon  \n  ```   Launch basic_service (in a new terminal).   sh\n  cd $AJ_ROOT/core/ajtcl/samples/basic\n  ./basic_service   Launch basic_client (in a new terminal).   sh\n  cd $AJ_ROOT/core/ajtcl/samples/basic\n  ./basic_client    The output from basic_client should look like this:  ./basic_client node name= /sample  interface name= org.alljoyn.Bus.sample \n   method name= Dummy \n     arg name= foo  type= i  direction= in / \n   /method \n   method name= Dummy2 \n     arg name= fee  type= i  direction= in / \n   /method \n   method name= cat \n     arg name= inStr1  type= s  direction= in / \n     arg name= inStr2  type= s  direction= in / \n     arg name= outStr  type= s  direction= out / \n   /method  /interface  /node \n'org.alljoyn.Bus.sample.cat' (path='/sample') returned 'Hello World!'.\nBasic client exiting with status 0.  The output from basic_service should look like this:  ./basic_service node name= /sample  interface name= org.alljoyn.Bus.sample \n   method name= Dummy \n     arg name= foo  type= i  direction= in / \n   /method \n   method name= cat \n     arg name= inStr1  type= s  direction= in / \n     arg name= inStr2  type= s  direction= in / \n     arg name= outStr  type= s  direction= out / \n   /method  /interface  /node \n000.000 aj_guid.c:76 LookupName(): NULL\nSession lost. ID = 681866772, reason = 2AllJoyn disconnect.",
            "title": "Run Basic Client and Service"
        },
        {
            "location": "/develop/run-sample-apps/basic/thin-windows/",
            "text": "Running Basic Sample - Thin Windows\n\n\nPrerequisites\n\n\n\n\nBuild the samples\n\n\nBuild the AllJoyn\n router\n. \n  AllJoyn\n thin apps require an AllJoyn router to \n  connect to in order to function properly.\n\n\n\n\nRun Basic Client \n Service\n\n\n\n\nLaunch the AllJoyn daemon to allow thin apps to connect (in a command prompt window).\n\n\n\n\n```sh\n  # \n can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  cd $AJ_ROOT\\core\\alljoyn\\build\\win7\\\n\\debug\\dist\\cpp\\bin\\samples\n\n\nSampleDaemon.exe \n   ```\n2. Launch basic_service (in a command prompt window).\n\n\nsh\n  cd $AJ_ROOT\\core\\ajtcl\\samples\\basic\n  basic_service.exe\n\n\n\n\nLaunch basic_client (in a command prompt window).\n\n\n\n\nsh\n  cd $AJ_ROOT\\core\\ajtcl\\samples\\basic\n  basic_client.exe\n \n\n\nThe output from basic_client should look like this:\n\n\nbasic_client.exe\n'org.alljoyn.Bus.sample.cat' (path='/sample') returned 'Hello World!'.\nBasic client exiting with status 0.\n\n\n\n\nThe output from basic_service should look like this:\n\n\nbasic_service.exe\n000.000 aj_guid.c:76 LookupName(): NULL\nSession lost. ID = 3629706635, reason = 2AllJoyn disconnect.",
            "title": "Thin windows"
        },
        {
            "location": "/develop/run-sample-apps/basic/thin-windows/#running-basic-sample-thin-windows",
            "text": "",
            "title": "Running Basic Sample - Thin Windows"
        },
        {
            "location": "/develop/run-sample-apps/basic/thin-windows/#prerequisites",
            "text": "Build the samples  Build the AllJoyn  router . \n  AllJoyn  thin apps require an AllJoyn router to \n  connect to in order to function properly.",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/run-sample-apps/basic/thin-windows/#run-basic-client-service",
            "text": "Launch the AllJoyn daemon to allow thin apps to connect (in a command prompt window).   ```sh\n  #   can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  cd $AJ_ROOT\\core\\alljoyn\\build\\win7\\ \\debug\\dist\\cpp\\bin\\samples  SampleDaemon.exe \n   ```\n2. Launch basic_service (in a command prompt window).  sh\n  cd $AJ_ROOT\\core\\ajtcl\\samples\\basic\n  basic_service.exe   Launch basic_client (in a command prompt window).   sh\n  cd $AJ_ROOT\\core\\ajtcl\\samples\\basic\n  basic_client.exe    The output from basic_client should look like this:  basic_client.exe\n'org.alljoyn.Bus.sample.cat' (path='/sample') returned 'Hello World!'.\nBasic client exiting with status 0.  The output from basic_service should look like this:  basic_service.exe\n000.000 aj_guid.c:76 LookupName(): NULL\nSession lost. ID = 3629706635, reason = 2AllJoyn disconnect.",
            "title": "Run Basic Client &amp; Service"
        },
        {
            "location": "/develop/run-sample-apps/basic/windows/",
            "text": "Windows - Basic Sample App\n\n\nRunning basic_client and basic_service\n\n\nPrecompiled .exe\n\n\nThe AllJoyn\n Standard Library Windows SDK includes a precompiled set of binaries.\n\n\nService\n\n\n\n\nOpen a Command Terminal window.\n\n\nCD to the root AllJoyn SDK folder in your file system.\n\n\nCD to the cpp/bin/samples folder.\n\n\n\n\nRun basic_service:\n\n\nbasic_service\n\n\n\n\n\n\nNOTE:\n The application just runs and will print information when a basic client connects.\n\n\nClient\n\n\n\n\nOpen a Command Terminal window.\n\n\nCD to the root AllJoyn SDK folder in your file system.\n\n\nCD to the cpp/bin/samples folder.\n\n\nRun basic_client:\n    basic_client\n\n\n\n\nNOTE:\n The application will exit after finding a service, executing the cat method, then exits.\n\n\nVisual Studio\n\n\nThe Basic sample applications are merged into a single Visual Studio project. \nYou can either run the counterpart of the .exe files mentioned above, \nor create a new Visual Studio project that includes just the sample you wish to debug.\n1. Open the visual studio basic project file.\n2. Right click on the project you wish to run and select \nSet as StartUpProject\n.\n3. From the top menu options. select \nDebug\n \n \nStart Debugging\n.\n    1. If the menu toolbar is visible, you can also press the green Play button.\n    2. The keyboard F5 key can also work, unless you have changed this shortcut.\n4. A command prompt will open and you will see the output.\n\n\nNOTE:\n The basic_client application will exit after finding a \nservice and executing the cat command.  Set breakpoints if you \nwish to follow the application flow.",
            "title": "Windows"
        },
        {
            "location": "/develop/run-sample-apps/basic/windows/#windows-basic-sample-app",
            "text": "",
            "title": "Windows - Basic Sample App"
        },
        {
            "location": "/develop/run-sample-apps/basic/windows/#running-basic_client-and-basic_service",
            "text": "Precompiled .exe  The AllJoyn  Standard Library Windows SDK includes a precompiled set of binaries.  Service   Open a Command Terminal window.  CD to the root AllJoyn SDK folder in your file system.  CD to the cpp/bin/samples folder.   Run basic_service:  basic_service    NOTE:  The application just runs and will print information when a basic client connects.  Client   Open a Command Terminal window.  CD to the root AllJoyn SDK folder in your file system.  CD to the cpp/bin/samples folder.  Run basic_client:\n    basic_client   NOTE:  The application will exit after finding a service, executing the cat method, then exits.  Visual Studio  The Basic sample applications are merged into a single Visual Studio project. \nYou can either run the counterpart of the .exe files mentioned above, \nor create a new Visual Studio project that includes just the sample you wish to debug.\n1. Open the visual studio basic project file.\n2. Right click on the project you wish to run and select  Set as StartUpProject .\n3. From the top menu options. select  Debug     Start Debugging .\n    1. If the menu toolbar is visible, you can also press the green Play button.\n    2. The keyboard F5 key can also work, unless you have changed this shortcut.\n4. A command prompt will open and you will see the output.  NOTE:  The basic_client application will exit after finding a \nservice and executing the cat command.  Set breakpoints if you \nwish to follow the application flow.",
            "title": "Running basic_client and basic_service"
        },
        {
            "location": "/develop/run-sample-apps/chat/android/",
            "text": "Android - Core Sample Apps\n\n\nRunning Android SimpleClient, SimpleService Apps\n\n\nThe Android SimpleClient and SimpleService provide a simple \nexample of how a client app and a service app could be implemented. \nThe SimpleService listens for connections, the SimpleClient joins \nthe SimpleService session, and text sent from the SimpleClient to \nthe SimpleService via a BusMethod invoked on a SimpleService \nBusObject is displayed in both apps.\n\n\n\n\n\n\nConnect device A and device B to the same network.\n\n\n\n\n\n\nLoad SimpleClient.apk onto device A, and start app \"Simple Client\".\n\n\n\n\n\n\n\n\n\n\n\n\nLoad SimpleService.apk onto device B, and start app \"Simple Service\". \nA blank screen appears when the \"Simple Service\" is started.\n\n\n\n\n\n\nThe SimpleClient joins the session of the SimpleService, after \nwhich the following screen appears on the SimpleClient.\n\n\n\n\n\n\n\n\n\n\nEnter text in the \"Simple Client\" and hit Enter to have the text \nsent and returned by the \"Simple Service\", and displayed on-screen for both apps.\n\n\n\n\n\n\nRunning Android Chat App\n\n\nThe Android Chat app shows how a chat room can be implemented \nusing the AllJoyn\n framework, where an app first creates a\nnd joins a session, after which one or more other apps later join the same session.\n\n\n\n\n\n\nConnect all devices to the same network.\n\n\n\n\n\n\nLoad Chat.apk onto devices, and start app \"AllJoyn Chat Sample for Android\".\n\n\n\n\n\n\nCreate and start a channel on the first device.\n\n\n\n\nSelect the right tab (with a \"+\" on it).\n\n\n\n\n\n\n\n\n\n\n  * Create a channel via the **Set Channel Name** button - enter a channel name when prompted.\n\n\n\n\n\n  * Press the \"Start Channel\" button.\n\n\n\n\n\n\n\nJoin the channel on the first device.\n\n\nPress the left tab.\n\n\nPress the \nJoin Channel\n button, and choose the channel that was created above.\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\nJoin the channel on other device(s).\n\n\n\n\nPress the left tab.\n\n\nPress the \nJoin Channel\n button, and choose the channel that was created above.\n\n\n\n\n\n\n\n\nEnter text in the \"Enter message here\" text box, and hit enter \nto chat between devices.  In the message history, the Bus Attachment's \nUnique name will be displayed alongside text from the \"other\" device(s), \nor \"Me\" will displayed alongside text from \"this\" device.",
            "title": "Android"
        },
        {
            "location": "/develop/run-sample-apps/chat/android/#android-core-sample-apps",
            "text": "",
            "title": "Android - Core Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/chat/android/#running-android-simpleclient-simpleservice-apps",
            "text": "The Android SimpleClient and SimpleService provide a simple \nexample of how a client app and a service app could be implemented. \nThe SimpleService listens for connections, the SimpleClient joins \nthe SimpleService session, and text sent from the SimpleClient to \nthe SimpleService via a BusMethod invoked on a SimpleService \nBusObject is displayed in both apps.    Connect device A and device B to the same network.    Load SimpleClient.apk onto device A, and start app \"Simple Client\".       Load SimpleService.apk onto device B, and start app \"Simple Service\". \nA blank screen appears when the \"Simple Service\" is started.    The SimpleClient joins the session of the SimpleService, after \nwhich the following screen appears on the SimpleClient.      Enter text in the \"Simple Client\" and hit Enter to have the text \nsent and returned by the \"Simple Service\", and displayed on-screen for both apps.",
            "title": "Running Android SimpleClient, SimpleService Apps"
        },
        {
            "location": "/develop/run-sample-apps/chat/android/#running-android-chat-app",
            "text": "The Android Chat app shows how a chat room can be implemented \nusing the AllJoyn  framework, where an app first creates a\nnd joins a session, after which one or more other apps later join the same session.    Connect all devices to the same network.    Load Chat.apk onto devices, and start app \"AllJoyn Chat Sample for Android\".    Create and start a channel on the first device.   Select the right tab (with a \"+\" on it).        * Create a channel via the **Set Channel Name** button - enter a channel name when prompted.     * Press the \"Start Channel\" button.    Join the channel on the first device.  Press the left tab.  Press the  Join Channel  button, and choose the channel that was created above.     \n      Join the channel on other device(s).   Press the left tab.  Press the  Join Channel  button, and choose the channel that was created above.     Enter text in the \"Enter message here\" text box, and hit enter \nto chat between devices.  In the message history, the Bus Attachment's \nUnique name will be displayed alongside text from the \"other\" device(s), \nor \"Me\" will displayed alongside text from \"this\" device.",
            "title": "Running Android Chat App"
        },
        {
            "location": "/develop/run-sample-apps/chat/",
            "text": "Running the Chat Sample\n\n\nThe Chat sample application provides the ability to send AllJoyn\n \nSignals on a connected session.\n\n\nThe Chat application runs slightly differently on each platform. \nAt a minimum, the application advertises a well-known name with \nthe prefix of \"org.alljoyn.bus.samples.chat\".\n\n\nIt will then append a \".\" followed by the name of the chat room \nto be parsed off and possibly displayed in the UI. Each room \nwill accept sessions on the session port 27.\n\n\nDepending on the platform, the application must have a role \nof Client or Service and may need to join its own session. \nSee each of the platform links below for more details on running the sample. \n\n\nThe Chat interface is as follows:\n\n\nnode name=\n/chatService\n\n    \ninterface name=\norg.alljoyn.bus.samples.chat\n\n        \nsignal name=\nChat\n\n            \narg name=\nstr\n type=\ns\n/\n\n        \n/signal\n\n    \n/interface\n\n\n/node\n\n\n\n\n\nThe sample can be run on the following platforms:\n\n \nAndroid\n\n\n \nLinux\n\n\n \niOS/OSX\n\n\n \nWindows\n\n* \nThin - Linux",
            "title": "Home"
        },
        {
            "location": "/develop/run-sample-apps/chat/#running-the-chat-sample",
            "text": "The Chat sample application provides the ability to send AllJoyn  \nSignals on a connected session.  The Chat application runs slightly differently on each platform. \nAt a minimum, the application advertises a well-known name with \nthe prefix of \"org.alljoyn.bus.samples.chat\".  It will then append a \".\" followed by the name of the chat room \nto be parsed off and possibly displayed in the UI. Each room \nwill accept sessions on the session port 27.  Depending on the platform, the application must have a role \nof Client or Service and may need to join its own session. \nSee each of the platform links below for more details on running the sample.   The Chat interface is as follows:  node name= /chatService \n     interface name= org.alljoyn.bus.samples.chat \n         signal name= Chat \n             arg name= str  type= s / \n         /signal \n     /interface  /node   The sample can be run on the following platforms:   Android    Linux    iOS/OSX    Windows \n*  Thin - Linux",
            "title": "Running the Chat Sample"
        },
        {
            "location": "/develop/run-sample-apps/chat/ios-osx/",
            "text": "Running Chat Sample - iOS\n\n\nPrerequisites\n\n\n\n\nBuild the sample\n\n\nInstall the Chat sample app on two iOS devices.\n\n\nBoth iOS devices must be connected to the same Wi-Fi network.\n\n\n\n\nRun AllJoyn\n Chat\n\n\nLaunch the AllJoyn Chat app on two iOS devices.\n\n\nThe AllJoyn Chat should now now be running on both iOS devices. The initial screen should look like this:\n  \n\n\nFigure:\n Chat startup screen\n\n\nChat using a session\n\n\n\n\n\n\nOn both devices, ensure that the \nUse a session\n option is toggled to \nON\n.\n\n\n\n\n\n\nOn one device, select the \nHost\n button, then press \nStart\n.\nOn the second device, select the \nJoin\n button, then press\n\nStart\n. The screen on both apps should look like this:\n\n\n\n\n\n\n\n\nFigure:\n Initial message screen\n\n\n\n\nOn one device, enter a message and press \nSend\n. The message\nappears on the device it was entered on, and also on the second\ndevice. Example screenshots:\n\n\n\n\n\n\nFigure:\n Device 1 sends \"hello\"\n\n\n\n\nFigure:\n Device 2 receives \"hello\" from device 1\n\n\n\n\nFigure:\n Device 2 responds with  \"hi\"\n\n\n\n\nFigure:\n Device 1 receives \"hi\" from device 2\n\n\nChat using sessionless signals\n\n\n\n\nOn both devices, ensure that the \nUse a session\n option is toggled to \nOFF\n.\n\n\n\n\n\n\nFigure:\n Chat startup screen\n\n\n\n\nOn both devices, press \nStart\n. The screen on both apps should look like this:\n\n\n\n\n\n\nFigure:\n Initial message screen\n\n\n\n\nOn one device, enter a message and press \nSend\n. The message\nappears on the device it was entered on, and also on the second device.\nExample screenshots:\n\n\n\n\n\n\nFigure:\n Device 1 user types \"hi\"\n\n\n\n\nFigure:\n Device 1 receives \"hey\" response from Device 2",
            "title": "Ios osx"
        },
        {
            "location": "/develop/run-sample-apps/chat/ios-osx/#running-chat-sample-ios",
            "text": "",
            "title": "Running Chat Sample - iOS"
        },
        {
            "location": "/develop/run-sample-apps/chat/ios-osx/#prerequisites",
            "text": "Build the sample  Install the Chat sample app on two iOS devices.  Both iOS devices must be connected to the same Wi-Fi network.",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/run-sample-apps/chat/ios-osx/#run-alljoyn-chat",
            "text": "Launch the AllJoyn Chat app on two iOS devices.  The AllJoyn Chat should now now be running on both iOS devices. The initial screen should look like this:\n    Figure:  Chat startup screen  Chat using a session    On both devices, ensure that the  Use a session  option is toggled to  ON .    On one device, select the  Host  button, then press  Start .\nOn the second device, select the  Join  button, then press Start . The screen on both apps should look like this:     Figure:  Initial message screen   On one device, enter a message and press  Send . The message\nappears on the device it was entered on, and also on the second\ndevice. Example screenshots:    Figure:  Device 1 sends \"hello\"   Figure:  Device 2 receives \"hello\" from device 1   Figure:  Device 2 responds with  \"hi\"   Figure:  Device 1 receives \"hi\" from device 2  Chat using sessionless signals   On both devices, ensure that the  Use a session  option is toggled to  OFF .    Figure:  Chat startup screen   On both devices, press  Start . The screen on both apps should look like this:    Figure:  Initial message screen   On one device, enter a message and press  Send . The message\nappears on the device it was entered on, and also on the second device.\nExample screenshots:    Figure:  Device 1 user types \"hi\"   Figure:  Device 1 receives \"hey\" response from Device 2",
            "title": "Run AllJoyn&trade; Chat"
        },
        {
            "location": "/develop/run-sample-apps/chat/linux/",
            "text": "Linux - Chat Sample App\n\n\nRunning Linux Chat App\n\n\nThe Linux Chat App shows how a chat room can be implemented \nusing the AllJoyn\n framework, where an app first creates \nand joins a session (with the \n-s\n flag), after which one or \nmore apps later join the same session (with the \n-j\n flag).\n\n\nPrerequisites\n\n\nOpen two terminal windows. In each, navigate to the AllJoyn root dir, then:\n\n\nexport AJ_ROOT=`pwd`\n\n# \nlt;TARGET CPU\ngt; can be either x86_64, x86, or whatever value you set for \nCPU=\n when running SCons.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$LD_LIBRARY_PATH\n\n\n\n\nRun the Linux Chat Sample App\n\n\n\n\nIn one of the terminal windows, run the chat app passing it a \nchat room name with the \n-s\n flag to set up and join a chat room:\n\n\n\n\nsh\n   $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/chat -s mychannel\n\n\n\n\nIn the other terminal window, run the chat app using the \n-j\n \nflag with the same chat room name to join the same chat room:\n\n\n\n\nsh\n   $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/chat -j mychannel\n\n\n\n\nText typed into one chat window will appear in the other \nchat window, accompanied by the BusAttachment's Unique Name.",
            "title": "Linux"
        },
        {
            "location": "/develop/run-sample-apps/chat/linux/#linux-chat-sample-app",
            "text": "",
            "title": "Linux - Chat Sample App"
        },
        {
            "location": "/develop/run-sample-apps/chat/linux/#running-linux-chat-app",
            "text": "The Linux Chat App shows how a chat room can be implemented \nusing the AllJoyn  framework, where an app first creates \nand joins a session (with the  -s  flag), after which one or \nmore apps later join the same session (with the  -j  flag).  Prerequisites  Open two terminal windows. In each, navigate to the AllJoyn root dir, then:  export AJ_ROOT=`pwd`\n\n#  lt;TARGET CPU gt; can be either x86_64, x86, or whatever value you set for  CPU=  when running SCons.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$LD_LIBRARY_PATH  Run the Linux Chat Sample App   In one of the terminal windows, run the chat app passing it a \nchat room name with the  -s  flag to set up and join a chat room:   sh\n   $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/chat -s mychannel   In the other terminal window, run the chat app using the  -j  \nflag with the same chat room name to join the same chat room:   sh\n   $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/bin/samples/chat -j mychannel   Text typed into one chat window will appear in the other \nchat window, accompanied by the BusAttachment's Unique Name.",
            "title": "Running Linux Chat App"
        },
        {
            "location": "/develop/run-sample-apps/chat/thin-linux/",
            "text": "Running Chat Sample - Thin Linux\n\n\nPrerequisites\n\n\n\n\nBuild the thin Linux samples\n\n\nBuild the AllJoyn\n router\n. AllJoyn thin \n  apps require an AllJoyn router to connect to in order to function properly.\n\n\n\n\nRun Chat\n\n\n\n\nLaunch the AllJoyn daemon using the config file to allow thin apps to connect.\n\n\n\n\n```\n  # \n can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  export TARGET_CPU=\n\n  cd $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/release/dist/cpp/bin\n\n\nexport LD_LIBRARY_PATH=\npwd\n/../lib:$LD_LIBRARY_PATH\n  # This sets the library path to load the liballjoyn.so shared library.\n\n\n./alljoyn-daemon \n\n  ```\n\n\n\n\nLaunch chat (in a new terminal).\n\n\n\n\ncd $AJ_ROOT/core/ajtcl/samples/basic\n  ./chat\n\n\nThe output from chat_client should look like this:\n\n\nnode name=\n/chatService\n\n\ninterface name=\norg.alljoyn.bus.samples.chat\n\n    \nsignal name=\nChat\n\n        \narg name=\nstr\n type=\ns\n/\n\n    \n/signal\n\n\n/interface\n\n\n/node\n\n...\n...\n...",
            "title": "Thin linux"
        },
        {
            "location": "/develop/run-sample-apps/chat/thin-linux/#running-chat-sample-thin-linux",
            "text": "Prerequisites   Build the thin Linux samples  Build the AllJoyn  router . AllJoyn thin \n  apps require an AllJoyn router to connect to in order to function properly.   Run Chat   Launch the AllJoyn daemon using the config file to allow thin apps to connect.   ```\n  #   can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  export TARGET_CPU= \n  cd $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/release/dist/cpp/bin  export LD_LIBRARY_PATH= pwd /../lib:$LD_LIBRARY_PATH\n  # This sets the library path to load the liballjoyn.so shared library.  ./alljoyn-daemon  \n  ```   Launch chat (in a new terminal).   cd $AJ_ROOT/core/ajtcl/samples/basic\n  ./chat  The output from chat_client should look like this:  node name= /chatService  interface name= org.alljoyn.bus.samples.chat \n     signal name= Chat \n         arg name= str  type= s / \n     /signal  /interface  /node \n...\n...\n...",
            "title": "Running Chat Sample - Thin Linux"
        },
        {
            "location": "/develop/run-sample-apps/chat/windows/",
            "text": "Windows - Chat Sample App\n\n\nRunning basic_client and basic_service\n\n\nPrecompiled .exe\n\n\nInside the AllJoyn\n Standard Library Windows SDK, there exists a precompiled set of binaries.\n\n\n\n\nOpen a Command Terminal window.\n\n\nCD to the root AllJoyn SDK folder in your file system.\n\n\nCD to the cpp/bin/samples folder.\n\n\nRun chat using the following startup options:\n   Chat client:\n       chat.exe -j training\n   Chat host\n       chat.exe -s training\n\n\nOnce you are joined, any text entered will be sent to the other \napplications upon pressing \nEnter\n.\n\n\n\n\nVisual Studio\n\n\nNOTE:\n Unless you make a modification to the source code, this \nsample will not run using the play command. It requires startup \narguments as stated above.\n\n\n\n\nOpen the Visual Studio Basic project file.\n\n\nRight-click on the project you wish to run and select \nSet as StartUpProject\n. \n\n\nMake a modification in chat.cc inside the ParseCommandLine method to avoid supplying a command line startup argument.\n\n\nFrom the top menu options select \nDebug\nStart Debugging\n.\n\n\nIf the menu toolbar is visible, you can also press the green Play button.\n\n\nThe keyboard F5 key can also work, unless you have changed this shortcut.\n\n\n\n\n\n\nThe console will appear using the hard-coded values entered in step 3.\n\n\nRun the chat application per the precompiled .exe instructions, or use another platform.",
            "title": "Windows"
        },
        {
            "location": "/develop/run-sample-apps/chat/windows/#windows-chat-sample-app",
            "text": "",
            "title": "Windows - Chat Sample App"
        },
        {
            "location": "/develop/run-sample-apps/chat/windows/#running-basic_client-and-basic_service",
            "text": "Precompiled .exe  Inside the AllJoyn  Standard Library Windows SDK, there exists a precompiled set of binaries.   Open a Command Terminal window.  CD to the root AllJoyn SDK folder in your file system.  CD to the cpp/bin/samples folder.  Run chat using the following startup options:\n   Chat client:\n       chat.exe -j training\n   Chat host\n       chat.exe -s training  Once you are joined, any text entered will be sent to the other \napplications upon pressing  Enter .   Visual Studio  NOTE:  Unless you make a modification to the source code, this \nsample will not run using the play command. It requires startup \narguments as stated above.   Open the Visual Studio Basic project file.  Right-click on the project you wish to run and select  Set as StartUpProject .   Make a modification in chat.cc inside the ParseCommandLine method to avoid supplying a command line startup argument.  From the top menu options select  Debug Start Debugging .  If the menu toolbar is visible, you can also press the green Play button.  The keyboard F5 key can also work, unless you have changed this shortcut.    The console will appear using the hard-coded values entered in step 3.  Run the chat application per the precompiled .exe instructions, or use another platform.",
            "title": "Running basic_client and basic_service"
        },
        {
            "location": "/develop/run-sample-apps/config/android/",
            "text": "Android - Config Sample Apps\n\n\nRunning Android ConfigClientSample\n\n\nThe Android ConfigClientSample provides a sample Android \nimplementation of an app that uses the Config client.\n\n\n\n\nLoad ConfigClientSample.apk, and start app \nConfig Client\n.\n\n\n\n\n\n\n\n\n\n\nConnect a second device, running an app which implements \nthe Config service, to the same network that the first \ndevice is connected to. (You can use the AboutConfOnbServer.apk \nin the Onboarding SDK.)\n\n\n\n\n\n\nOn the first device, in the \nConfig Client\n app, \npress the \nConnect to AllJoyn\n button, and press \nOK\n.\n\n\n\n\n\n\n\n\n\n\nIn the device list of the \nConfig Client\n app, the \nfriendly name of the app from the second device should show up.\n\n\n\n\n\n\n\n\nSelect the device list entry to configure the second \ndevice's app that implements the Config service.\n\n\n\n\n\n\n\n\nChange the desired fields, check the appropriate \ncheckboxes, and press \nSave\n. The config changes should now be applied.",
            "title": "Android"
        },
        {
            "location": "/develop/run-sample-apps/config/android/#android-config-sample-apps",
            "text": "",
            "title": "Android - Config Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/config/android/#running-android-configclientsample",
            "text": "The Android ConfigClientSample provides a sample Android \nimplementation of an app that uses the Config client.   Load ConfigClientSample.apk, and start app  Config Client .      Connect a second device, running an app which implements \nthe Config service, to the same network that the first \ndevice is connected to. (You can use the AboutConfOnbServer.apk \nin the Onboarding SDK.)    On the first device, in the  Config Client  app, \npress the  Connect to AllJoyn  button, and press  OK .      In the device list of the  Config Client  app, the \nfriendly name of the app from the second device should show up.     Select the device list entry to configure the second \ndevice's app that implements the Config service.     Change the desired fields, check the appropriate \ncheckboxes, and press  Save . The config changes should now be applied.",
            "title": "Running Android ConfigClientSample"
        },
        {
            "location": "/develop/run-sample-apps/config/",
            "text": "Running The Configuration Samples\n\n\nThere are two Configuration sample applications, a Config Client and a Config Service.\n\n\nThe \nConfiguration service\n provides a means to \nexpose and configure device-specific values such as a device \npasscode and a device name, in addition to device-specific \nmethods such as restarting the device or performing a factory \nreset of the device. \n\n\nThe role of an application that uses the Config service is \nto accept the incoming requests to provide configuration \ninformation or make changes to the configuration values.\n\n\nThe role of an applicaton that uses the Config client allows \nan end user to control values that an OEM has offered up for changes.\n\n\nThe Config interface is defined as follows: \n\n\nnode name=\n/Config\n\n    \ninterface name=\norg.alljoyn.Config\n\n        \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n \n        \nmethod name=\nFactoryReset\n\n            \nannotation name=\norg.freedesktop.DBus.Method.NoReply\n value=\ntrue\n/\n\n        \n/method\n\n        \nmethod name=\nRestart\n\n            \nannotation name=\norg.freedesktop.DBus.Method.NoReply\n value=\ntrue\n/\n\n        \n/method\n\n        \nmethod name=\nSetPasscode\n\n            \narg name=\ndaemonRealm\n type=\ns\n direction=\nin\n/\n\n            \narg name=\nnewPasscode\n type=\nay\n direction=\nin\n/\n\n        \n/method\n\n        \nmethod name=\nGetConfigurations\n\n            \narg name=\nlanguageTag\n type=\ns\n direction=\nin\n/\n\n            \narg name=\nconfigData\n type=\na{sv}\n direction=\nout\n/\n\n        \n/method\n\n        \nmethod name=\nUpdateConfigurations\n\n            \narg name=\nlanguageTag\n type=\ns\n direction=\nin\n/\n\n            \narg name=\nconfigMap\n type=\na{sv}\n direction=\nin\n/\n\n        \n/method\n\n        \nmethod name=\nResetConfigurations\n\n            \narg name=\nlanguageTag\n type=\ns\n direction=\nin\n/\n\n            \narg name=\nfieldList\n type=\nas\n direction=\nin\n/\n\n        \n/method\n\n    \n/interface\n\n\n/node\n\n\n\n\n\nThe samples can be run on the following platforms:\n- \nAndroid\n\n- \nLinux\n\n- \niOS/OSX\n\n- \nThin - Linux",
            "title": "Home"
        },
        {
            "location": "/develop/run-sample-apps/config/#running-the-configuration-samples",
            "text": "There are two Configuration sample applications, a Config Client and a Config Service.  The  Configuration service  provides a means to \nexpose and configure device-specific values such as a device \npasscode and a device name, in addition to device-specific \nmethods such as restarting the device or performing a factory \nreset of the device.   The role of an application that uses the Config service is \nto accept the incoming requests to provide configuration \ninformation or make changes to the configuration values.  The role of an applicaton that uses the Config client allows \nan end user to control values that an OEM has offered up for changes.  The Config interface is defined as follows:   node name= /Config \n     interface name= org.alljoyn.Config \n         property name= Version  type= q  access= read /  \n         method name= FactoryReset \n             annotation name= org.freedesktop.DBus.Method.NoReply  value= true / \n         /method \n         method name= Restart \n             annotation name= org.freedesktop.DBus.Method.NoReply  value= true / \n         /method \n         method name= SetPasscode \n             arg name= daemonRealm  type= s  direction= in / \n             arg name= newPasscode  type= ay  direction= in / \n         /method \n         method name= GetConfigurations \n             arg name= languageTag  type= s  direction= in / \n             arg name= configData  type= a{sv}  direction= out / \n         /method \n         method name= UpdateConfigurations \n             arg name= languageTag  type= s  direction= in / \n             arg name= configMap  type= a{sv}  direction= in / \n         /method \n         method name= ResetConfigurations \n             arg name= languageTag  type= s  direction= in / \n             arg name= fieldList  type= as  direction= in / \n         /method \n     /interface  /node   The samples can be run on the following platforms:\n-  Android \n-  Linux \n-  iOS/OSX \n-  Thin - Linux",
            "title": "Running The Configuration Samples"
        },
        {
            "location": "/develop/run-sample-apps/config/ios-osx/",
            "text": "Running Config Sample App - iOS\n\n\nPrerequisites\n\n\nFollow steps in the \nBuilding - iOS OS X section\n \nto build and install the Config sample app on an iOS device.\n\n\nYou can use the Configuration service framework sample app \nto act as a Config Client, a Config Server, or both a Config Client \nand a Config Server simultaneously. In Client mode, you will \nbe able to see any nearby applications that support the Config \nservice and interact with them. In Server mode, the app will \nact as a Config Server, allowing other nearby applications \nto interact with it via a Config Client. If you run the app \nas both a client and a server, you will be able to interact \nwith the Config server running in the app through the Config \nclient that is also running in the app. This allows for development \nand testing using just a single device.\n\n\nAlternately, run the app as a client on one device, and as a server on another device.\n\n\nNOTE:\n If you are running the client and server on separate devices, \nboth devices must be on the same Wi-Fi network.\n\n\nRun the Configuration service sample app as a Client\n\n\n\n\nLaunch the Configuration service sample app on your iOS device.\n  \n\n\nPress the \nConnect to AllJoyn\n button.\n  \n\n\nThe application is now running in Client mode. In the list \narea below the Disconnect from AllJoyn button, any nearby \napplications that have been discovered via the About feature \nthat also support the Configuration service framework are listed.\n  \n\n\nNOTE:\n If there are not any nearby devices running the \n  Configuration service framework, follow the steps in \n  \nRun the Configuration service sample app as a Server\n \n  to run the application simultaneously as a Config Server. \n  This will allow you to interact with the Config Server running \n  in the app through the Config Client that is also running in the app.\n\n\nTo interact with a Config Server, select one from the list \nof nearby applications that have been discovered.\n\n\nChoose an option from the pop-up that appears:\n    \n\n\nShow Announce\n: This will allow you to view the About \n  announcement that was received from the nearby application.\n    \n\n\nAbout\n: This will show the full set of information \n  retrieved by the About Client from the nearby application.\n    \n\n\nConfig\n: Here, you can view the information provided by \n  the Config Client that it has retrieved from the Config Server \n  running in the nearby application. \n\n\nYou can also use the Config Client to interact with and \nconfigure different options provided by the Config Server \ninstance. For example, if you change the DeviceName field, \nand then use the \nBack\n button to return to the main view \nthat displays nearby applications, you will notice the new device name is listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun the Configuration service sample app as a Server\n\n\n\n\nLaunch the Configuration service sample app on your iOS device.\n  \n\n\nAt the bottom of the screen, press the \nStart Service\n button.\n\n\nThe application is now running in Server mode.\n  \n\n   \nNOTE:\n To interact with the Config Server, either run \n   the sample app as a Config Client on the same device or on \n   a different device, as detailed in \n   \nRun the Configuration service sample app as a Client\n.",
            "title": "Ios osx"
        },
        {
            "location": "/develop/run-sample-apps/config/ios-osx/#running-config-sample-app-ios",
            "text": "",
            "title": "Running Config Sample App - iOS"
        },
        {
            "location": "/develop/run-sample-apps/config/ios-osx/#prerequisites",
            "text": "Follow steps in the  Building - iOS OS X section  \nto build and install the Config sample app on an iOS device.  You can use the Configuration service framework sample app \nto act as a Config Client, a Config Server, or both a Config Client \nand a Config Server simultaneously. In Client mode, you will \nbe able to see any nearby applications that support the Config \nservice and interact with them. In Server mode, the app will \nact as a Config Server, allowing other nearby applications \nto interact with it via a Config Client. If you run the app \nas both a client and a server, you will be able to interact \nwith the Config server running in the app through the Config \nclient that is also running in the app. This allows for development \nand testing using just a single device.  Alternately, run the app as a client on one device, and as a server on another device.  NOTE:  If you are running the client and server on separate devices, \nboth devices must be on the same Wi-Fi network.",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/run-sample-apps/config/ios-osx/#run-the-configuration-service-sample-app-as-a-client",
            "text": "Launch the Configuration service sample app on your iOS device.\n    Press the  Connect to AllJoyn  button.\n    The application is now running in Client mode. In the list \narea below the Disconnect from AllJoyn button, any nearby \napplications that have been discovered via the About feature \nthat also support the Configuration service framework are listed.\n    NOTE:  If there are not any nearby devices running the \n  Configuration service framework, follow the steps in \n   Run the Configuration service sample app as a Server  \n  to run the application simultaneously as a Config Server. \n  This will allow you to interact with the Config Server running \n  in the app through the Config Client that is also running in the app.  To interact with a Config Server, select one from the list \nof nearby applications that have been discovered.  Choose an option from the pop-up that appears:\n      Show Announce : This will allow you to view the About \n  announcement that was received from the nearby application.\n      About : This will show the full set of information \n  retrieved by the About Client from the nearby application.\n      Config : Here, you can view the information provided by \n  the Config Client that it has retrieved from the Config Server \n  running in the nearby application.   You can also use the Config Client to interact with and \nconfigure different options provided by the Config Server \ninstance. For example, if you change the DeviceName field, \nand then use the  Back  button to return to the main view \nthat displays nearby applications, you will notice the new device name is listed.",
            "title": "Run the Configuration service sample app as a Client"
        },
        {
            "location": "/develop/run-sample-apps/config/ios-osx/#run-the-configuration-service-sample-app-as-a-server",
            "text": "Launch the Configuration service sample app on your iOS device.\n    At the bottom of the screen, press the  Start Service  button.  The application is now running in Server mode.\n   \n    NOTE:  To interact with the Config Server, either run \n   the sample app as a Config Client on the same device or on \n   a different device, as detailed in \n    Run the Configuration service sample app as a Client .",
            "title": "Run the Configuration service sample app as a Server"
        },
        {
            "location": "/develop/run-sample-apps/config/linux/",
            "text": "Linux - Running Config Sample Apps\n\n\nRunning Linux ConfigClient, ConfigService Apps\n\n\nPrerequisites\n\n\nOpen two terminal windows. In each, navigate to the AllJoyn root dir, then:\n\n\nexport AJ_ROOT=`pwd`\n\n# \nTARGET CPU\n can be either x86_64, x86, or whatever value you set for \nCPU=\n when running SCons.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/config/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/services_common/lib:$LD_LIBRARY_PATH\n\n\n\n\nRun the ConfigService Sample App\n\n\nIn one of the terminal windows, run \nConfigService\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/config/bin/ConfigService --config-file=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/config/bin/ConfigService.conf\n\n\n\n\nRun the ConfigClient Sample App\n\n\nIn the other terminal window, run \nConfigClient\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/config/bin/ConfigClient",
            "title": "Linux"
        },
        {
            "location": "/develop/run-sample-apps/config/linux/#linux-running-config-sample-apps",
            "text": "",
            "title": "Linux - Running Config Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/config/linux/#running-linux-configclient-configservice-apps",
            "text": "Prerequisites  Open two terminal windows. In each, navigate to the AllJoyn root dir, then:  export AJ_ROOT=`pwd`\n\n#  TARGET CPU  can be either x86_64, x86, or whatever value you set for  CPU=  when running SCons.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/config/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/services_common/lib:$LD_LIBRARY_PATH  Run the ConfigService Sample App  In one of the terminal windows, run  ConfigService :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/config/bin/ConfigService --config-file=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/config/bin/ConfigService.conf  Run the ConfigClient Sample App  In the other terminal window, run  ConfigClient :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/config/bin/ConfigClient",
            "title": "Running Linux ConfigClient, ConfigService Apps"
        },
        {
            "location": "/develop/run-sample-apps/config/thin-linux/",
            "text": "Running Config Sample - Thin Linux\n\n\nPrerequisites\n\n\n\n\nBuild the thin Linux samples\n\n\nBuild the AllJoyn\n router\n. AllJoyn thin \n  apps require an AllJoyn router to connect to in order to function properly.\n\n\n\n\nRun Config Sample\n\n\n\n\nLaunch the AllJoyn daemon using the config file to allow thin apps to connect.\n\n\n\n\n```sh\n  # \n can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  export TARGET_CPU=\n\n  cd $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/release/dist/cpp/bin\n\n\nexport LD_LIBRARY_PATH=\npwd\n/../lib:$LD_LIBRARY_PATH\n  # This sets the library path to load the liballjoyn.so shared library.\n\n\n./alljoyn-daemon \n\n  ```\n\n\n\n\nLaunch the Config Sample (in a new terminal)\n\n\n\n\nsh\n  cd $AJ_ROOT/services/sample_apps/build\n  ./ConfigSample\n\n\n\n\n\n\nUse one of the following Config client apps to interact with the Config service.\n\n\n\n\n\n\niOS Config Sample\n\n\n\n\nAndroid Config Sample\n\n\nLinux Config Client Sample",
            "title": "Thin linux"
        },
        {
            "location": "/develop/run-sample-apps/config/thin-linux/#running-config-sample-thin-linux",
            "text": "",
            "title": "Running Config Sample - Thin Linux"
        },
        {
            "location": "/develop/run-sample-apps/config/thin-linux/#prerequisites",
            "text": "Build the thin Linux samples  Build the AllJoyn  router . AllJoyn thin \n  apps require an AllJoyn router to connect to in order to function properly.",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/run-sample-apps/config/thin-linux/#run-config-sample",
            "text": "Launch the AllJoyn daemon using the config file to allow thin apps to connect.   ```sh\n  #   can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  export TARGET_CPU= \n  cd $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/release/dist/cpp/bin  export LD_LIBRARY_PATH= pwd /../lib:$LD_LIBRARY_PATH\n  # This sets the library path to load the liballjoyn.so shared library.  ./alljoyn-daemon  \n  ```   Launch the Config Sample (in a new terminal)   sh\n  cd $AJ_ROOT/services/sample_apps/build\n  ./ConfigSample    Use one of the following Config client apps to interact with the Config service.    iOS Config Sample   Android Config Sample  Linux Config Client Sample",
            "title": "Run Config Sample"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/android/",
            "text": "Android - Control Panel Sample Apps\n\n\nRunning a Controllee\n\n\nFollow the instructions in the \nRunning - Linux section\n \nto build and run the Controllee sample app. This will allow \nyou to run the ControlPanelService Controllee sample on a Linux machine.\n\n\nRunning Android ControlPanelBrowser\n\n\nThe Android ControlPanelBrowser uses the Control Panel service \nframework and provides a sample implementation of a Control Panel Controller.\n\n\n\n\nLoad ControlPanelBrowser.apk, and start app \nControlPanelBrowser\n.\n\n\n\n\n\n\n\n\nNearby discovered Controllee devices will appear on-screen.\n\n\n\n\n\n\n\n\nSelect a Controllee from the list, and its widgets will \nbe rendered in the Controller app.",
            "title": "Android"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/android/#android-control-panel-sample-apps",
            "text": "",
            "title": "Android - Control Panel Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/android/#running-a-controllee",
            "text": "Follow the instructions in the  Running - Linux section  \nto build and run the Controllee sample app. This will allow \nyou to run the ControlPanelService Controllee sample on a Linux machine.",
            "title": "Running a Controllee"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/android/#running-android-controlpanelbrowser",
            "text": "The Android ControlPanelBrowser uses the Control Panel service \nframework and provides a sample implementation of a Control Panel Controller.   Load ControlPanelBrowser.apk, and start app  ControlPanelBrowser .     Nearby discovered Controllee devices will appear on-screen.     Select a Controllee from the list, and its widgets will \nbe rendered in the Controller app.",
            "title": "Running Android ControlPanelBrowser"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/",
            "text": "Running The Control Panel Samples\n\n\nThere are two Control Panel sample applications, a \u2018Controller\u2019 \nand a \u2018Controllable\u2019.  The \nControl Panel service framework\n \nis a collection of many interfaces and a definition of object path \nwhere the interfaces are placed.\n\n\nWhen an application uses the \nControl Panel service\n \nto be a Controllable device, it uses the service APIs which wrap up \nan AllJoyn\n feature called \nIntrospection\n.\n\nThe service provides an \nAdaptive UI Layer\n that \nis responsible for creating platform widgets that are rendered on a screen.\n\n\nWhen an application uses the Controller side of the \n\nControl Panel service framework\n, it offers \nup capabilities such that any application can control some \nset of functionality. It allows for an OEM to leverage the \ndeveloper's ecosystem and build applications that interact with a product.\n\n\nThe ControlPanel interfaces are defined as follows:\n\n\n**NOTE:** The interfaces below are also available as secure interfaces\n\n\ninterface name=\norg.alljoyn.ControlPanel.ControlPanel\n\n    \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n\n/interface\n\n\ninterface name=\norg.alljoyn.ControlPanel.Container\n\n    \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n    \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n \n    \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n  \n    \nsignal name=\nMetadataChanged\n /\n\n\n/interface\n\n\ninterface name=\norg.alljoyn.ControlPanel.Property\n\n    \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n    \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n \n    \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n  \n    \nproperty name=\nValue\n type=\nv\n access=\nreadwrite\n/\n\n    \nsignal name=\nMetadataChanged\n /\n\n    \nsignal name=\nValueChanged\n\n        \narg type=\nv\n/\n\n    \n/signal\n\n\n/interface\n\n\ninterface name=\norg.alljoyn.ControlPanel.LabelProperty\n\n    \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n    \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n \n    \nproperty name=\nLabel\n type=\ns\n access=\nread\n/\n\n    \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n  \n    \nsignal name=\nMetadataChanged\n /\n\n\n/interface\n\n\ninterface name=\norg.alljoyn.ControlPanel.Action\n\n    \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n    \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n \n    \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n  \n    \nsignal name=\nMetadataChanged\n /\n\n    \nmethod name=\nExec\n/\n\n\n/interface\n\n\ninterface name=\norg.alljoyn.ControlPanel.NotificationAction\n\n    \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n    \nsignal name=\nDismiss\n /\n\n\n/interface\n\n\ninterface name=\norg.alljoyn.ControlPanel.Dialog\n\n    \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n    \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n \n    \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n  \n    \nproperty name=\nMessage\n type=\ns\n access=\nread\n/\n\n    \nproperty name=\nNumActions\n type=\nq\n access=\nread\n/\n\n    \nsignal name=\nMetadataChanged\n /\n\n    \nmethod name=\nAction1\n/\n\n    \nmethod name=\nAction2\n/\n\n    \nmethod name=\nAction3\n/\n\n\n/interface\n\n\ninterface name=\norg.alljoyn.ControlPanel.ListProperty\n\n    \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n    \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n \n    \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n  \n    \nproperty name=\nValue\n type=\na(qs)\n access=\nread\n/\n \n    \nmethod name=\nAdd\n/\n\n    \nmethod name=\nDelete\n\n        \narg name=\nrecordID\n type=\nq\n direction=\nin\n/\n\n    \n/method\n\n    \nmethod name=\nView\n\n        \narg name=\nrecordID\n type=\nq\n direction=\nin\n/\n\n    \n/method\n\n    \nmethod name=\nUpdate\n\n        \narg name=\nrecordID\n type=\nq\n direction=\nin\n/\n\n    \n/method\n\n    \nmethod name=\nConfirm\n\n    \n/method\n\n    \nmethod name=\nCancel\n\n    \n/method\n\n    \nsignal name=\nMetadataChanged\n/\n\n    \nsignal name=\nValueChanged\n/\n\n\n/interface\n\n\ninterface name=\norg.alljoyn.Control.HTTPControl\n\n    \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n    \nmethod name=\nGetRootURL\n\n        \narg name=\nurl\n type=\ns\n direction=\nout\n/\n\n    \n/method\n\n\n/interface\n\n\n\n\n\nController samples are available for Android, iOS, and Linux.\n\n\nControllable samples are available for Linux and Thin Linux.\n\n\nThe samples can be run on the following platforms:\n- \nAndroid\n\n- \nLinux\n\n- \niOS/OS X\n\n- \nThin - Linux",
            "title": "Home"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/#running-the-control-panel-samples",
            "text": "There are two Control Panel sample applications, a \u2018Controller\u2019 \nand a \u2018Controllable\u2019.  The  Control Panel service framework  \nis a collection of many interfaces and a definition of object path \nwhere the interfaces are placed.  When an application uses the  Control Panel service  \nto be a Controllable device, it uses the service APIs which wrap up \nan AllJoyn  feature called  Introspection . \nThe service provides an  Adaptive UI Layer  that \nis responsible for creating platform widgets that are rendered on a screen.  When an application uses the Controller side of the  Control Panel service framework , it offers \nup capabilities such that any application can control some \nset of functionality. It allows for an OEM to leverage the \ndeveloper's ecosystem and build applications that interact with a product.  The ControlPanel interfaces are defined as follows:  **NOTE:** The interfaces below are also available as secure interfaces interface name= org.alljoyn.ControlPanel.ControlPanel \n     property name= Version  type= q  access= read /  /interface  interface name= org.alljoyn.ControlPanel.Container \n     property name= Version  type= q  access= read / \n     property name= States  type= u  access= read /  \n     property name= OptParams  type= a{qv}  access= read /   \n     signal name= MetadataChanged  /  /interface  interface name= org.alljoyn.ControlPanel.Property \n     property name= Version  type= q  access= read / \n     property name= States  type= u  access= read /  \n     property name= OptParams  type= a{qv}  access= read /   \n     property name= Value  type= v  access= readwrite / \n     signal name= MetadataChanged  / \n     signal name= ValueChanged \n         arg type= v / \n     /signal  /interface  interface name= org.alljoyn.ControlPanel.LabelProperty \n     property name= Version  type= q  access= read / \n     property name= States  type= u  access= read /  \n     property name= Label  type= s  access= read / \n     property name= OptParams  type= a{qv}  access= read /   \n     signal name= MetadataChanged  /  /interface  interface name= org.alljoyn.ControlPanel.Action \n     property name= Version  type= q  access= read / \n     property name= States  type= u  access= read /  \n     property name= OptParams  type= a{qv}  access= read /   \n     signal name= MetadataChanged  / \n     method name= Exec /  /interface  interface name= org.alljoyn.ControlPanel.NotificationAction \n     property name= Version  type= q  access= read / \n     signal name= Dismiss  /  /interface  interface name= org.alljoyn.ControlPanel.Dialog \n     property name= Version  type= q  access= read / \n     property name= States  type= u  access= read /  \n     property name= OptParams  type= a{qv}  access= read /   \n     property name= Message  type= s  access= read / \n     property name= NumActions  type= q  access= read / \n     signal name= MetadataChanged  / \n     method name= Action1 / \n     method name= Action2 / \n     method name= Action3 /  /interface  interface name= org.alljoyn.ControlPanel.ListProperty \n     property name= Version  type= q  access= read / \n     property name= States  type= u  access= read /  \n     property name= OptParams  type= a{qv}  access= read /   \n     property name= Value  type= a(qs)  access= read /  \n     method name= Add / \n     method name= Delete \n         arg name= recordID  type= q  direction= in / \n     /method \n     method name= View \n         arg name= recordID  type= q  direction= in / \n     /method \n     method name= Update \n         arg name= recordID  type= q  direction= in / \n     /method \n     method name= Confirm \n     /method \n     method name= Cancel \n     /method \n     signal name= MetadataChanged / \n     signal name= ValueChanged /  /interface  interface name= org.alljoyn.Control.HTTPControl \n     property name= Version  type= q  access= read / \n     method name= GetRootURL \n         arg name= url  type= s  direction= out / \n     /method  /interface   Controller samples are available for Android, iOS, and Linux.  Controllable samples are available for Linux and Thin Linux.  The samples can be run on the following platforms:\n-  Android \n-  Linux \n-  iOS/OS X \n-  Thin - Linux",
            "title": "Running The Control Panel Samples"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/ios-osx/",
            "text": "Running the Control Panel Sample App - iOS\n\n\nPrerequisites\n\n\nFollow steps in the \nBuilding - iOS OS X section\n \nto build and install the Control Panel sample app on an iOS device.\n\n\nThe Control Panel service sample app functions as the \nController side of the Control Panel service framework. \nAt this time, there is not an iOS Controllee sample application. \nIn order to have a Controllee to interact with, follow the instructions \nin [Run a Controllee][run-controllee] to set up and run a sample \nControllee application on a Linux machine. Make sure the Linux \nmachine and the iOS device are on the same network.\n\n\nRun the Control Panel Sample App\n\n\n\n\nLaunch the Control Panel sample app on your iOS device.\n\n\nClick the Connect to AllJoyn button.\n\n\nIn the pop-up that appears, set the name to be used by the \nAbout feature in the application. You can use the default of \norg.alljoyn.BusNode.aboutClient, or enter your own.\n\n\n\n\nThe application is now running as a Controller. In the list \narea below the Disconnect from AllJoyn button, you will see \nany nearby applications that have been discovered via About \nthat support the Control Panel service framework and are acting as a Controllee.\n\n\n\n\nTo interact with a Controllee, select one from the list \nof nearby applications that have been discovered.\n\n\nChoose an option from the pop-up that appears:\n\n\nShow Announce: This will allow you to view the About announcement \n  that was received from the nearby application.\n\n\nAbout: This will show the full set of information retrieved \n  by the About Client from the nearby application.\n\n\nControl Panel: You can use the Control Panel Controller \n  to interact with the control panel(s) exposed by the Controllee. \n\n\nAfter selecting this option, click the \nLanguage\n button \nin the upper right-hand corner of the screen and enter \none of the available languages into the text field. \nFor example, enter \"en\" to see the English version of the control panel.\n\n\nOnce you have chosen a control panel and a language, \nthe data for the corresponding control panel is displayed. \nAt the current time, there is not a Widget Rendering Library \nthat is available for iOS. Therefore, the control panel is \nshown as a series of items that display the data and properties for each control.\n\n\n\n\n\n\n\n\nRun a Controllee\n\n\nFollow the instructions in the \nRunning - Linux section\n \nto build and run the Controllee sample app. This will allow you \nto run the ControlPanelService Controllee sample on a Linux machine.",
            "title": "Ios osx"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/ios-osx/#running-the-control-panel-sample-app-ios",
            "text": "",
            "title": "Running the Control Panel Sample App - iOS"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/ios-osx/#prerequisites",
            "text": "Follow steps in the  Building - iOS OS X section  \nto build and install the Control Panel sample app on an iOS device.  The Control Panel service sample app functions as the \nController side of the Control Panel service framework. \nAt this time, there is not an iOS Controllee sample application. \nIn order to have a Controllee to interact with, follow the instructions \nin [Run a Controllee][run-controllee] to set up and run a sample \nControllee application on a Linux machine. Make sure the Linux \nmachine and the iOS device are on the same network.",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/ios-osx/#run-the-control-panel-sample-app",
            "text": "Launch the Control Panel sample app on your iOS device.  Click the Connect to AllJoyn button.  In the pop-up that appears, set the name to be used by the \nAbout feature in the application. You can use the default of \norg.alljoyn.BusNode.aboutClient, or enter your own.   The application is now running as a Controller. In the list \narea below the Disconnect from AllJoyn button, you will see \nany nearby applications that have been discovered via About \nthat support the Control Panel service framework and are acting as a Controllee.   To interact with a Controllee, select one from the list \nof nearby applications that have been discovered.  Choose an option from the pop-up that appears:  Show Announce: This will allow you to view the About announcement \n  that was received from the nearby application.  About: This will show the full set of information retrieved \n  by the About Client from the nearby application.  Control Panel: You can use the Control Panel Controller \n  to interact with the control panel(s) exposed by the Controllee.   After selecting this option, click the  Language  button \nin the upper right-hand corner of the screen and enter \none of the available languages into the text field. \nFor example, enter \"en\" to see the English version of the control panel.  Once you have chosen a control panel and a language, \nthe data for the corresponding control panel is displayed. \nAt the current time, there is not a Widget Rendering Library \nthat is available for iOS. Therefore, the control panel is \nshown as a series of items that display the data and properties for each control.",
            "title": "Run the Control Panel Sample App"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/ios-osx/#run-a-controllee",
            "text": "Follow the instructions in the  Running - Linux section  \nto build and run the Controllee sample app. This will allow you \nto run the ControlPanelService Controllee sample on a Linux machine.",
            "title": "Run a Controllee"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/linux/",
            "text": "Linux - Running Control Panel Sample Apps\n\n\nRunning ControlPanelSample, ControlPanelController Sample Apps\n\n\nPrerequisites\n\n\nOpen two terminal windows. In each, navigate to the AllJoyn\n root dir, then:\n\n\nexport AJ_ROOT=`pwd`\n\n# Set $TARGET CPU to the \nCPU=\n value used when running scons, e.g. x86_64, x86.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/controlpanel/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/notification/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/services_common/lib:$LD_LIBRARY_PATH\n\n\n\n\nRun the Control Panel Sample App\n\n\nIn one of the terminal windows, run \nControlPanelSample\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/controlpanel/bin/ControlPanelSample\n\n\n\n\nRun the Control Panel Controller Sample App\n\n\nIn the other terminal window, run \nControlPanelController\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/controlpanel/bin/ControlPanelController",
            "title": "Linux"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/linux/#linux-running-control-panel-sample-apps",
            "text": "",
            "title": "Linux - Running Control Panel Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/linux/#running-controlpanelsample-controlpanelcontroller-sample-apps",
            "text": "Prerequisites  Open two terminal windows. In each, navigate to the AllJoyn  root dir, then:  export AJ_ROOT=`pwd`\n\n# Set $TARGET CPU to the  CPU=  value used when running scons, e.g. x86_64, x86.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/controlpanel/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/notification/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/services_common/lib:$LD_LIBRARY_PATH  Run the Control Panel Sample App  In one of the terminal windows, run  ControlPanelSample :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/controlpanel/bin/ControlPanelSample  Run the Control Panel Controller Sample App  In the other terminal window, run  ControlPanelController :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/controlpanel/bin/ControlPanelController",
            "title": "Running ControlPanelSample, ControlPanelController Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/thin-linux/",
            "text": "Running Control Panel Sample - Thin Linux\n\n\nPrerequisites\n\n\n\n\nBuild the thin Linux samples\n\n\nBuild the AllJoyn\n router\n. AllJoyn thin \n  apps require an AllJoyn router to connect to in order to function properly.\n\n\n\n\nRun Controllee Sample\n\n\n\n\nLaunch the AllJoyn daemon using the config file to allow thin apps to connect.\n\n\n\n\n```sh\n  # \n can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  export TARGET_CPU=\n\n  cd $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/release/dist/cpp/bin\n\n\nexport LD_LIBRARY_PATH=\npwd\n/../lib:$LD_LIBRARY_PATH\n  # This sets the library path to load the liballjoyn.so shared library.\n\n\n./alljoyn-daemon \n\n   ```\n\n\n\n\nLaunch the Controllee Sample (in a new terminal).\n\n\n\n\nsh\n  cd $AJ_ROOT/services/sample_apps/build\n  ./ControlleeSample\n\n\n\n\nUse one of the following Controller apps to interact with the Controllee:\n\n\niOS Controller\n\n\nAndroid Controller",
            "title": "Thin linux"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/thin-linux/#running-control-panel-sample-thin-linux",
            "text": "",
            "title": "Running Control Panel Sample - Thin Linux"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/thin-linux/#prerequisites",
            "text": "Build the thin Linux samples  Build the AllJoyn  router . AllJoyn thin \n  apps require an AllJoyn router to connect to in order to function properly.",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/run-sample-apps/controlpanel/thin-linux/#run-controllee-sample",
            "text": "Launch the AllJoyn daemon using the config file to allow thin apps to connect.   ```sh\n  #   can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n  export TARGET_CPU= \n  cd $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/release/dist/cpp/bin  export LD_LIBRARY_PATH= pwd /../lib:$LD_LIBRARY_PATH\n  # This sets the library path to load the liballjoyn.so shared library.  ./alljoyn-daemon  \n   ```   Launch the Controllee Sample (in a new terminal).   sh\n  cd $AJ_ROOT/services/sample_apps/build\n  ./ControlleeSample   Use one of the following Controller apps to interact with the Controllee:  iOS Controller  Android Controller",
            "title": "Run Controllee Sample"
        },
        {
            "location": "/develop/run-sample-apps/notification/android/",
            "text": "Android - Notification Sample Apps\n\n\nRunning Android NotificationServiceUISample\n\n\nThe Android NotificationServiceUISample provides a sample \nAndroid implementation of an app that uses the Notification \nservice framework, which allows a user to both send and receive notifications.\n\n\n\n\nOn two or more devices, load the NotificationServiceUISample.apk, \nand start app \nNotificationService UI Sample\n.\n\n\n\n\n\n\n\n\nCheck the \nConsumer\n checkbox for those app instances you want to receive notifications.\n\n\n\n\n\n\n\n\nCheck the \nProducer\n checkbox for those app instances to which you want to send notifications.\n\n\n\n\n\n\n\n\nIn an app instance with \nProducer\n checked, enter a message and press \nSend\n.\n\n\n\n\n\n\n\n\nAll app instances with \nConsumer\n checked will receive and \ndisplay the notification text and message type.",
            "title": "Android"
        },
        {
            "location": "/develop/run-sample-apps/notification/android/#android-notification-sample-apps",
            "text": "",
            "title": "Android - Notification Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/notification/android/#running-android-notificationserviceuisample",
            "text": "The Android NotificationServiceUISample provides a sample \nAndroid implementation of an app that uses the Notification \nservice framework, which allows a user to both send and receive notifications.   On two or more devices, load the NotificationServiceUISample.apk, \nand start app  NotificationService UI Sample .     Check the  Consumer  checkbox for those app instances you want to receive notifications.     Check the  Producer  checkbox for those app instances to which you want to send notifications.     In an app instance with  Producer  checked, enter a message and press  Send .     All app instances with  Consumer  checked will receive and \ndisplay the notification text and message type.",
            "title": "Running Android NotificationServiceUISample"
        },
        {
            "location": "/develop/run-sample-apps/notification/",
            "text": "Running The Notification Samples\n\n\nThere are two types of Notification sample applications, \na Producer and a Consumer. The power of the \nNotification service framework\n \nis its simplicity and ability to allow devices to \"talk\" \nto end users to provide meaningful information.\n\n\nThe Notification Producer side of an application is responsible \nfor sending a \nsessionless signal\n that contains \na small amount of text with some optional values.  This text is \nintended to be rendered on any device that contains the Consumer \nside of the Notification service.\n\n\nThe Notification Consumer side of an application is responsible \nfor registering to receive the \nsessionless signal\n \nfrom any application that supports the Producer side of the Notification service.\n\n\nThe Notification interface is defined as follows:\n\n\nnode\n\n    \ninterface name=\norg.alljoyn.Notification\n\n        \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n        \nsignal name=\nnotify\n\n            \narg name=\nversion\n type=\nq\n/\n\n            \narg name=\nmsgId\n type=\ni\n/\n  \n            \narg name=\nmsgType\n type=\nq\n/\n\n            \narg name=\ndeviceId\n type=\ns\n/\n\n            \narg name=\ndeviceName\n type=\ns\n/\n\n            \narg name=\nappId\n type=\nay\n/\n\n            \narg name=\nappName\n type=\ns\n/\n\n            \narg name=\nattributes\n type=\na{iv}\n/\n\n            \narg name=\ncustomAttributes\n type=\na{ss}\n/\n\n            \narg name=\nlangText\n type=\na(ss)\n/\n\n        \n/signal\n\n    \n/interface\n\n\n/node\n\n\n\n\n\nThe samples can be run on the following platforms:\n- \nAndroid\n\n- \nLinux\n\n- \niOS/OSX\n\n- \nThin - Linux",
            "title": "Home"
        },
        {
            "location": "/develop/run-sample-apps/notification/#running-the-notification-samples",
            "text": "There are two types of Notification sample applications, \na Producer and a Consumer. The power of the  Notification service framework  \nis its simplicity and ability to allow devices to \"talk\" \nto end users to provide meaningful information.  The Notification Producer side of an application is responsible \nfor sending a  sessionless signal  that contains \na small amount of text with some optional values.  This text is \nintended to be rendered on any device that contains the Consumer \nside of the Notification service.  The Notification Consumer side of an application is responsible \nfor registering to receive the  sessionless signal  \nfrom any application that supports the Producer side of the Notification service.  The Notification interface is defined as follows:  node \n     interface name= org.alljoyn.Notification \n         property name= Version  type= q  access= read / \n         signal name= notify \n             arg name= version  type= q / \n             arg name= msgId  type= i /   \n             arg name= msgType  type= q / \n             arg name= deviceId  type= s / \n             arg name= deviceName  type= s / \n             arg name= appId  type= ay / \n             arg name= appName  type= s / \n             arg name= attributes  type= a{iv} / \n             arg name= customAttributes  type= a{ss} / \n             arg name= langText  type= a(ss) / \n         /signal \n     /interface  /node   The samples can be run on the following platforms:\n-  Android \n-  Linux \n-  iOS/OSX \n-  Thin - Linux",
            "title": "Running The Notification Samples"
        },
        {
            "location": "/develop/run-sample-apps/notification/ios-osx/",
            "text": "Run the Notification Sample App - iOS\n\n\nPrerequisites\n\n\nFollow steps in the \nBuilding - iOS OS X section\n\nto build and install the Notification sample app on an iOS device.\n\n\nYou can use the Notification service sample app to act as a\nNotification Producer, a Notification Consumer, or both a\nProducer and Consumer, simultaneously. If you run the app\nas both a producer and consumer simultaneously, you will be\nable to send and receive notifications on a single iOS device.\n\n\nAlternately, you can run the app as a Producer on one device,\nand as a Consumer on another device.\n\n\nNOTE:\n Both devices must be on the same Wi-Fi network.\n\n\nRun the Notification Sample App as a Producer\n\n\n\n\nLaunch the Notification sample app on your iOS device.\n\n\n\n\n\n\n\n\nIn the Application Name field, enter a name to be used as\nthe application name by the Notification producer, for example, TestApp.\n\n\nClick \nProducer\n to run in Producer mode.\n\n\n\n\n\n\n\n\nIn the first text field, enter the message you want to send in a notification.\n\n\nOptionally, enter the message in another language in the\nsecond text field. You can use the selector to the right of\nthe text field to choose the second language.\n\n\nUse the standard TTL, or enter a new one if desired.\n\n\nOptionally, toggle on the Audio and Icon URL fields.\n\n\nNext to the Message type label, use the selector to choose\na message type of INFO, WARNING, or EMERGENCY.\n\n\nPress the \nSend\n button to send the notification.\n\n\n\n\n\n  \n\n\nNOTE:\n To receive and view the notification you sent, either\nrun the Notification service sample app as a Consumer\non the same device or on a different device.\n\n\nRun the Notification Sample App as a Consumer\n\n\n\n\nLaunch the Notification sample app on your iOS device.\n\n\n\n\n\n\n\n\nDo one of the following in the Application Name field:\n\n\nEnter a name to be used as the application name. In this case,\n  the application filters out any notifications that it receives\n  where the app name in the notification does not match the app\n  name in the Application Name field. This feature is to facilitate\n  testing sending and receiving notifications between multiple\n  different applications simultaneously on the same network.\n\n\nLeave the field blank. In this case, the application will\n  display all notifications that it receives, regardless of\n  which application produced them.\n\n\nClick \nConsumer\n to run in Consumer mode.\n\n\n\n\n\n\nThe application will now receive notifications.\n\n\n\n\nNOTE:\n To receive notifications in the app, either run the\nNotification service sample app as a Producer on the same\ndevice or on a different device, as detailed in\n\nRun the Notification sample app as a Producer\n.",
            "title": "Ios osx"
        },
        {
            "location": "/develop/run-sample-apps/notification/ios-osx/#run-the-notification-sample-app-ios",
            "text": "",
            "title": "Run the Notification Sample App - iOS"
        },
        {
            "location": "/develop/run-sample-apps/notification/ios-osx/#prerequisites",
            "text": "Follow steps in the  Building - iOS OS X section \nto build and install the Notification sample app on an iOS device.  You can use the Notification service sample app to act as a\nNotification Producer, a Notification Consumer, or both a\nProducer and Consumer, simultaneously. If you run the app\nas both a producer and consumer simultaneously, you will be\nable to send and receive notifications on a single iOS device.  Alternately, you can run the app as a Producer on one device,\nand as a Consumer on another device.  NOTE:  Both devices must be on the same Wi-Fi network.",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/run-sample-apps/notification/ios-osx/#run-the-notification-sample-app-as-a-producer",
            "text": "Launch the Notification sample app on your iOS device.     In the Application Name field, enter a name to be used as\nthe application name by the Notification producer, for example, TestApp.  Click  Producer  to run in Producer mode.     In the first text field, enter the message you want to send in a notification.  Optionally, enter the message in another language in the\nsecond text field. You can use the selector to the right of\nthe text field to choose the second language.  Use the standard TTL, or enter a new one if desired.  Optionally, toggle on the Audio and Icon URL fields.  Next to the Message type label, use the selector to choose\na message type of INFO, WARNING, or EMERGENCY.  Press the  Send  button to send the notification.   \n    NOTE:  To receive and view the notification you sent, either\nrun the Notification service sample app as a Consumer\non the same device or on a different device.",
            "title": "Run the Notification Sample App as a Producer"
        },
        {
            "location": "/develop/run-sample-apps/notification/ios-osx/#run-the-notification-sample-app-as-a-consumer",
            "text": "Launch the Notification sample app on your iOS device.     Do one of the following in the Application Name field:  Enter a name to be used as the application name. In this case,\n  the application filters out any notifications that it receives\n  where the app name in the notification does not match the app\n  name in the Application Name field. This feature is to facilitate\n  testing sending and receiving notifications between multiple\n  different applications simultaneously on the same network.  Leave the field blank. In this case, the application will\n  display all notifications that it receives, regardless of\n  which application produced them.  Click  Consumer  to run in Consumer mode.    The application will now receive notifications.   NOTE:  To receive notifications in the app, either run the\nNotification service sample app as a Producer on the same\ndevice or on a different device, as detailed in Run the Notification sample app as a Producer .",
            "title": "Run the Notification Sample App as a Consumer"
        },
        {
            "location": "/develop/run-sample-apps/notification/linux/",
            "text": "Linux - Running Notification Sample Apps\n\n\nRunning ConsumerService and ProducerBasic Sample Apps\n\n\nPrerequisites\n\n\nOpen two terminal windows. In each, navigate to the AllJoyn\n root dir, then:\n\n\nexport AJ_ROOT=`pwd`\n\n# \nTARGET CPU\n can be either x86_64, x86, or whatever value you set for \nCPU=\n when running SCons.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/notification/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/services_common/lib:$LD_LIBRARY_PATH\n\n\n\n\nRun the ConsumerService Sample App\n\n\nIn one of the terminal windows, run \nConsumerService\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/notification/bin/ConsumerService\n\n\n\n\nRun the ProducerBasic Sample App\n\n\nIn the other terminal window, run \nProducerBasic\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/notification/bin/ProducerBasic",
            "title": "Linux"
        },
        {
            "location": "/develop/run-sample-apps/notification/linux/#linux-running-notification-sample-apps",
            "text": "",
            "title": "Linux - Running Notification Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/notification/linux/#running-consumerservice-and-producerbasic-sample-apps",
            "text": "Prerequisites  Open two terminal windows. In each, navigate to the AllJoyn  root dir, then:  export AJ_ROOT=`pwd`\n\n#  TARGET CPU  can be either x86_64, x86, or whatever value you set for  CPU=  when running SCons.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/notification/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/services_common/lib:$LD_LIBRARY_PATH  Run the ConsumerService Sample App  In one of the terminal windows, run  ConsumerService :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/notification/bin/ConsumerService  Run the ProducerBasic Sample App  In the other terminal window, run  ProducerBasic :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/notification/bin/ProducerBasic",
            "title": "Running ConsumerService and ProducerBasic Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/notification/thin-linux/",
            "text": "Running Notification Sample - Thin Linux\n\n\nPrerequisites\n\n\n\n\nBuild the thin Linux samples\n\n\nBuild the AllJoyn\n router\n. AllJoyn thin \n  apps require an AllJoyn router to connect to in order to function properly.\n\n\n\n\nRun Notification Producer and Consumer\n\n\n\n\nLaunch the AllJoyn daemon using the config file to allow thin apps to connect.\n\n\n\n\n```sh\n   # \n can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n   export TARGET_CPU=\n\n   cd $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/release/dist/cpp/bin\n\n\nexport LD_LIBRARY_PATH=\npwd\n/../lib:$LD_LIBRARY_PATH\n   # This sets the library path to load the liballjoyn.so shared library.\n\n\n./alljoyn-daemon \n\n```\n\n\n\n\n\nLaunch NotificationConsumerSample (in a new terminal).\n\n\n\n\nsh\n   cd $AJ_ROOT/services/sample_apps/build/\n   ./NotificationConsumerSample\n\n\n\n\nLaunch NotificationProducerSample (in a new terminal).\n\n\n\n\nsh\n   cd $AJ_ROOT/services/sample_apps/build/\n   ./NotificationProducerSample\n \n\n\nThe output from NotificationProducerSample should look like this:\n\n\n./NotificationProducerSample \n000.000 PropertyStore.c:201 Set key [DeviceId] defaultValue [e7471a6ad4761b17ad169a3146fe6d1a]\n000.000 PropertyStore.c:148 Has key [DeviceName] default Value []\n000.000 PropertyStore.c:201 Set key [DeviceName] defaultValue [COMPANY GENERIC BOARD 6fe6d1a]\n000.000 PropertyStore.c:144 Has key [DeviceName] runtime Value [COMPANY GENERIC BOARD 6fe6d1a]\nAttempting to connect to bus 'org.alljoyn.BusNode'\nConnected to Routing Node with BusUniqueName=:yEmGBABV.3\n001.084 NotificationProducer.c:512 In SendNotification\n001.084 PropertyStore.c:144 Has key [DeviceId] runtime Value [e7471a6ad4761b17ad169a3146fe6d1a]\n001.084 PropertyStore.c:148 Has key [DefaultLanguage] default Value [en]\n001.084 PropertyStore.c:144 Has key [DeviceName] runtime Value [COMPANY GENERIC BOARD 6fe6d1a]\n001.084 PropertyStore.c:144 Has key [AppId] runtime Value [e7471a6ad4761b17ad169a3146fe6d1a]\n001.084 PropertyStore.c:148 Has key [AppName] default Value [Notifier]\n001.084 NotificationProducer.c:560 Generating random number for notification id\n001.084 NotificationProducer.c:481 In SendNotifySignal\n001.084 NotificationProducer.c:493 ***************** Notification id 860073951 delivered successfully with serial number 5 *****************\nAllJoyn disconnect\n\n\n\n\nThe output from NotificationConsumerSample should look like this:\n\n\n./NotificationConsumerSample \nAttempting to connect to bus 'org.alljoyn.BusNode'\nConnected to Routing Node with BusUniqueName=:yEmGBABV.2\n000.000 NotificationConsumer.c:167 In SetSignalRules()\n000.000 NotificationConsumer.c:168 Adding Dismisser interface match.\n000.000 NotificationConsumer.c:176 Adding Notification interface match.\n000.000 NotificationConsumer.c:208 Adding Superagent interface match.\n000.099 aj_msg.c:1087 Discarding bad message AJ_ERR_NO_MATCH\n000.136 aj_msg.c:1087 Discarding bad message AJ_ERR_NO_MATCH\n000.136 aj_msg.c:1087 Discarding bad message AJ_ERR_NO_MATCH\n024.480 NotificationConsumer.c:749 Received Producer signal.\n024.480 NotificationConsumer.c:287 Received notification signal from sender :yEmGBABV.3\n024.480 aj_msg.c:1195 AJ_UnmarshalMsg(): AJ_ERR_NO_MORE\n024.480 aj_msg.c:1195 AJ_UnmarshalMsg(): AJ_ERR_NO_MORE\n024.480 aj_msg.c:1195 AJ_UnmarshalMsg(): AJ_ERR_NO_MORE\n024.480 aj_msg.c:1195 AJ_UnmarshalMsg(): AJ_ERR_NO_MORE\n******************** Begin New Message Received ********************\nMessage Id: 860073951\nVersion: 2\nDevice Id: e7471a6ad4761b17ad169a3146fe6d1a\nDevice Name: COMPANY GENERIC BOARD 6fe6d1a\nApp Id: BC096200000000001F01000003000000\nApp Name: Notifier\nMessage Type: 2\nOriginalSender bus unique name: :yEmGBABV.3\nLanguage: en  Message: Hello AJ World.\nLanguage: de-AT  Message: Hallo AJ Welt.\nOther parameters included:\nCustom Attribute Key: On  Custom Attribute Value: Hello\nCustom Attribute Key: Off  Custom Attribute Value: Goodbye\nRich Content Icon Url: http://www.getIcon1.org\n******************** Begin Rich Audio Content ********************\nLanguage: en  Audio URL http://www.getAudio1.org\nLanguage: de-AT  Audio URL http://www.getAudio2.org\n******************** End Rich Audio Content ********************\nRich Content Icon Object Path: /icon/MyDevice\nRich Content Audio Object Path: /audio/MyDevice\n******************** End New Message Received ********************\n036.490 aj_guid.c:76 LookupName(): NULL\n036.491 aj_guid.c:76 LookupName(): NULL",
            "title": "Thin linux"
        },
        {
            "location": "/develop/run-sample-apps/notification/thin-linux/#running-notification-sample-thin-linux",
            "text": "",
            "title": "Running Notification Sample - Thin Linux"
        },
        {
            "location": "/develop/run-sample-apps/notification/thin-linux/#prerequisites",
            "text": "Build the thin Linux samples  Build the AllJoyn  router . AllJoyn thin \n  apps require an AllJoyn router to connect to in order to function properly.",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/run-sample-apps/notification/thin-linux/#run-notification-producer-and-consumer",
            "text": "Launch the AllJoyn daemon using the config file to allow thin apps to connect.   ```sh\n   #   can be either x86_64, x86, or whatever value you set for CPU= when running SCons.\n   export TARGET_CPU= \n   cd $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/release/dist/cpp/bin  export LD_LIBRARY_PATH= pwd /../lib:$LD_LIBRARY_PATH\n   # This sets the library path to load the liballjoyn.so shared library.  ./alljoyn-daemon  \n```   Launch NotificationConsumerSample (in a new terminal).   sh\n   cd $AJ_ROOT/services/sample_apps/build/\n   ./NotificationConsumerSample   Launch NotificationProducerSample (in a new terminal).   sh\n   cd $AJ_ROOT/services/sample_apps/build/\n   ./NotificationProducerSample    The output from NotificationProducerSample should look like this:  ./NotificationProducerSample \n000.000 PropertyStore.c:201 Set key [DeviceId] defaultValue [e7471a6ad4761b17ad169a3146fe6d1a]\n000.000 PropertyStore.c:148 Has key [DeviceName] default Value []\n000.000 PropertyStore.c:201 Set key [DeviceName] defaultValue [COMPANY GENERIC BOARD 6fe6d1a]\n000.000 PropertyStore.c:144 Has key [DeviceName] runtime Value [COMPANY GENERIC BOARD 6fe6d1a]\nAttempting to connect to bus 'org.alljoyn.BusNode'\nConnected to Routing Node with BusUniqueName=:yEmGBABV.3\n001.084 NotificationProducer.c:512 In SendNotification\n001.084 PropertyStore.c:144 Has key [DeviceId] runtime Value [e7471a6ad4761b17ad169a3146fe6d1a]\n001.084 PropertyStore.c:148 Has key [DefaultLanguage] default Value [en]\n001.084 PropertyStore.c:144 Has key [DeviceName] runtime Value [COMPANY GENERIC BOARD 6fe6d1a]\n001.084 PropertyStore.c:144 Has key [AppId] runtime Value [e7471a6ad4761b17ad169a3146fe6d1a]\n001.084 PropertyStore.c:148 Has key [AppName] default Value [Notifier]\n001.084 NotificationProducer.c:560 Generating random number for notification id\n001.084 NotificationProducer.c:481 In SendNotifySignal\n001.084 NotificationProducer.c:493 ***************** Notification id 860073951 delivered successfully with serial number 5 *****************\nAllJoyn disconnect  The output from NotificationConsumerSample should look like this:  ./NotificationConsumerSample \nAttempting to connect to bus 'org.alljoyn.BusNode'\nConnected to Routing Node with BusUniqueName=:yEmGBABV.2\n000.000 NotificationConsumer.c:167 In SetSignalRules()\n000.000 NotificationConsumer.c:168 Adding Dismisser interface match.\n000.000 NotificationConsumer.c:176 Adding Notification interface match.\n000.000 NotificationConsumer.c:208 Adding Superagent interface match.\n000.099 aj_msg.c:1087 Discarding bad message AJ_ERR_NO_MATCH\n000.136 aj_msg.c:1087 Discarding bad message AJ_ERR_NO_MATCH\n000.136 aj_msg.c:1087 Discarding bad message AJ_ERR_NO_MATCH\n024.480 NotificationConsumer.c:749 Received Producer signal.\n024.480 NotificationConsumer.c:287 Received notification signal from sender :yEmGBABV.3\n024.480 aj_msg.c:1195 AJ_UnmarshalMsg(): AJ_ERR_NO_MORE\n024.480 aj_msg.c:1195 AJ_UnmarshalMsg(): AJ_ERR_NO_MORE\n024.480 aj_msg.c:1195 AJ_UnmarshalMsg(): AJ_ERR_NO_MORE\n024.480 aj_msg.c:1195 AJ_UnmarshalMsg(): AJ_ERR_NO_MORE\n******************** Begin New Message Received ********************\nMessage Id: 860073951\nVersion: 2\nDevice Id: e7471a6ad4761b17ad169a3146fe6d1a\nDevice Name: COMPANY GENERIC BOARD 6fe6d1a\nApp Id: BC096200000000001F01000003000000\nApp Name: Notifier\nMessage Type: 2\nOriginalSender bus unique name: :yEmGBABV.3\nLanguage: en  Message: Hello AJ World.\nLanguage: de-AT  Message: Hallo AJ Welt.\nOther parameters included:\nCustom Attribute Key: On  Custom Attribute Value: Hello\nCustom Attribute Key: Off  Custom Attribute Value: Goodbye\nRich Content Icon Url: http://www.getIcon1.org\n******************** Begin Rich Audio Content ********************\nLanguage: en  Audio URL http://www.getAudio1.org\nLanguage: de-AT  Audio URL http://www.getAudio2.org\n******************** End Rich Audio Content ********************\nRich Content Icon Object Path: /icon/MyDevice\nRich Content Audio Object Path: /audio/MyDevice\n******************** End New Message Received ********************\n036.490 aj_guid.c:76 LookupName(): NULL\n036.491 aj_guid.c:76 LookupName(): NULL",
            "title": "Run Notification Producer and Consumer"
        },
        {
            "location": "/develop/run-sample-apps/observer/",
            "text": "Running the Observer Sample\n\n\nThe Observer sample illustrates how to use the Observer API (introduced in\nAllJoyn R15.04) for easy object discovery and session management.\n\n\nThe sample is a simulation of a rudimentary home security system. Our\nhypothetical security system monitors all doors in your house, and lets you\nknow in real time whether they're open or closed, and who passes through a\ndoor. In addition, it allows for the remote opening and closing of doors.\n\n\nThe Service part of the sample (\ndoor_provider\n) is the security system itself\nthat publishes the state of the doors. It does not make use of the Observer API\nbecause the Observer is a Client-side concept, but it does illustrate how to\nexpose objects on the AllJoyn bus in such a way that they can easily be\ndiscovered and accessed by an Observer.\n\n\nThe Client part of the sample (\ndoor_consumer\n) is a simple monitoring user\ninterface through which the user can monitor the state of the doors, and\nremotely open or close doors. It makes use of the Observer to discover all doors\n(i.e., all bus objects implementing the \ncom.example.Door\n interface), and of\nthe \nProxyBusObject::RegisterPropertiesChangedListener\n mechanism to keep track\nof the current state of the discovered doors.\n\n\nThe data model for the security system is as follows:\n\n\nnode\n\n  \ninterface name=\ncom.example.Door\n\n    \nproperty name=\nIsOpen\n type=\nb\n access=\nread\n\n        \nannotation name=\norg.freedesktop.DBus.Property.EmitsChangedSignal\n value=\ntrue\n/\n\n    \n/property\n\n    \nproperty name=\nLocation\n type=\ns\n access=\nread\n\n        \nannotation name=\norg.freedesktop.DBus.Property.EmitsChangedSignal\n value=\ntrue\n/\n\n    \n/property\n\n    \nproperty name=\nKeyCode\n type=\nu\n access=\nread\n\n        \nannotation name=\norg.freedesktop.DBus.Property.EmitsChangedSignal\n value=\ninvalidates\n/\n\n    \n/property\n\n\n    \nmethod name=\nOpen\n/\n\n    \nmethod name=\nClose\n/\n\n    \nmethod name=\nKnockAndRun\n\n        \n!-- to demonstrate the use of fire-and-forget methods --\n\n        \nannotation name=\norg.freedesktop.DBus.Method.NoReply\n value=\ntrue\n/\n\n    \n/method\n\n    \nsignal name=\nPersonPassedThrough\n\n      \narg name=\nname\n type=\ns\n/\n\n    \n/signal\n\n  \n/interface\n\n\n/node\n\n\n\n\n\nThe sample can be run on the following platforms/language bindings:\n\n\n\n\nC++ (Linux/Windows/Mac OS X)\n\n\nC (Linux/Windows/Mac OS X)\n\n\nJava (Android)\n\n\nObjective-C (iOS/Mac OS X)\n\n\n\n\nC++\n\n\nFor C++, the Service and Client portions of the sample are implemented as\nseparate applications: \ndoor_provider\n and \ndoor_consumer\n.\n\n\nPrerequisites\n\n\nThe samples are command-line applications. Hence, you'll need to open a command\nprompt to start the samples. On Linux, use your favorite terminal emulator. On\nWindows, use Command Prompt, on Mac OS X, use Terminal.app.\n\n\nThe sample applications are located in a subdirectory of the path where you\nbuilt or installed AllJoyn: \nbuild/\nos\n/\ncpu\n/\nvariant\n/dist/cpp/bin/samples/\n,\nwhere \nos\n is your operating system (\nlinux\n, \ndarwin\n, \nwin7\n), \ncpu\n\nis your processor type (typically \nx86\n or \nx86_64\n), and \nvariant\n is either\n\ndebug\n or \nrelease\n.\n\n\nSpecifically for Linux, you need to tell the operating system where to find the\nAllJoyn shared libraries:\n\n\nAJ_ROOT=~/allseen/core/alljoyn    # the path where you downloaded the\n                                  # core/alljoyn git repository\nOS=linux                          # your operating system (linux, darwin, win7)\nTARGET_CPU=x86                    # your CPU architecture\nVARIANT=debug                     # debug or release\nexport LD_LIBRARY_PATH=$AJ_ROOT/build/$OS/$TARGET_CPU/$VARIANT/dist/cpp/lib:$LD_LIBRARY_PATH\n\n\n\n\nThis step should not be necessary on Windows or Mac OS X.\n\n\nRunning \ndoor_provider\n\n\nStart the application:\n\n\ncd $AJ_ROOT/build/$OS/$TARGET_CPU/$VARIANT/dist/cpp/bin/samples\n./door_provider frontdoor backdoor garage cellar\n\n\n\n\nThis will emulate a security system that monitors four doors (the front door,\nthe back door, the garage door and the cellar door). You can start multiple\n\ndoor_provider\n instances concurrently if you wish.\n\n\nYou will be dropped into a primitive command line user interface where you can\nissue simulation comands. To keep the interface simple, the application\ncontinuously cycles through all doors it maintains, and you cannot choose which\ndoor will be the subject of your next simulation command.\n\n\nThe following commands are supported:\n\n\n    q         quit\n    f         flip (toggle) the open state of the door\n    p \nwho\n   signal that \nwho\n passed through the door\n    r         remove or reattach the door to the bus\n    c         assign a new (random) keycode to the door\n    n         move to next door in the list\n    h         show this help message\n\n\n\n\nThe changes to the door state that you trigger from the \ndoor_provider\n\napplication should be reflected in all running \ndoor_consumer\n instances.\n\n\nRunning \ndoor_consumer\n\n\nStart the application:\n\n\ncd $AJ_ROOT/build/$OS/$TARGET_CPU/$VARIANT/dist/cpp/bin/samples\n./door_consumer\n\n\n\n\nThe application will monitor the state of all doors that are published on the\nbus, and will print notifications whenever doors appear, disappear, or change\nstate. In addition, you can perform the following actions:\n\n\n    q             quit\n    l             list all discovered doors\n    o \nlocation\n  open door at \nlocation\n\n    c \nlocation\n  close door at \nlocation\n\n    k \nlocation\n  knock-and-run at \nlocation\n\n    h             display this help message\n\n\n\n\nYou can start multiple \ndoor_consumer\n instances simultaneously if you wish.\nThey should all reflect the same state for all doors published by all\n\ndoor_provider\n instances in your network.\n\n\nC\n\n\nThe C Observer sample is very similar to the C++ one. Only the Client side of\nthe sample is implemented for the C language. Use the C++ \ndoor_provider\n to act\nas the Service side of this sample.\n\n\nTo start the C Observer sample, do this:\n\n\nAJ_ROOT=~/allseen/core/alljoyn    # the path where you downloaded the\n                                  # core/alljoyn git repository\nOS=linux                          # your operating system (linux, darwin, win7)\nTARGET_CPU=x86                    # your CPU architecture\nVARIANT=debug                     # debug or release\n\n# the following line is only needed for Linux:\nexport LD_LIBRARY_PATH=$AJ_ROOT/build/$OS/$TARGET_CPU/$VARIANT/dist/cpp/lib:$LD_LIBRARY_PATH\n\ncd $AJ_ROOT/build/$OS/$TARGET_CPU/$VARIANT/dist/cpp/bin/samples\n./door_consumer_c\n\n\n\n\nThe usage of \ndoor_consumer_c\n is exactly the same as that of the C++\n\ndoor_consumer\n application.\n\n\nJava (Android)\n\n\nThe Observer sample for Android incorporates both Service and Client aspects in\na single application. You can use the application to publish virtual doors on\nthe bus, and you can use it to observe (and manipulate) all doors that are\npublished on the network (both the ones you are publishing yourself, and those\nthat are published by other instances of the Observer sample).\n\n\nObserver Functionality\n\n\nThe application's main screen is divided in 2 sections. The top section shows a\nlist of discovered doors. Each line states the door's location, bus name, object\npath and a check box indicating whether the door is open (checked) or closed\n(unchecked). A short tap on a door will toggle the door's state (i.e., invoke\nthe \nOpen\n or \nClose\n method on the corresponding proxy object, as appropriate).\nA long press causes the invocation of the door's \nKnockAndRun\n method, which\nwill cause a closed door to open briefly.\n\n\nThe bottom section of the main screen displays a log of incoming AllJoyn\nmessages. Each line in the log represents an event received from a door. Example\nlog messages are:\n\n\n\n\nDoor event: FrontDoor: Method Open is called\n\n\nIncoming event: FrontDoor opened\n\n\n\n\nService Functionality\n\n\nThe sample application is also capable of acting as a publisher of doors on the\nbus. To create a locally hosted door, select \"Create Door\" from the application\nmenu. Once you provide a name, the door will be published on the bus. Once it is\npublished, the application's Observer will discover it and the door will be\nadded to the list of discovered doors on the main screen.\n\n\nFrom there on out, the locally hosted door is treated exactly the same as a\nremote door: all manipulations are performed on the proxy object provided by the\nObserver, rather than on the bus object directly. In this way, the Observer\nmakes it possible for applications to treat locally hosted objects exactly the\nsame as remote objects. This is a significant simplification of the application\nlogic for certain classes of applications.\n\n\nTo remove a locally hosted door from the bus, select \"Delete Door\" from the\napplication menu.\n\n\nObjective-C (iOS)\n\n\nThe Observer sample for iOS incorporates both Service and Client aspects in\na single application. You can use the application to publish virtual doors on\nthe bus, and you can use it to observe (and manipulate) all doors that are\npublished on the network (both the ones you are publishing yourself, and those\nthat are published by other instances of the Observer sample).\n\n\nPrerequisites\n\n\n\n\nBuild the sample\n\n\nInstall and run the sample on an iOS device\n\n\nMake sure the device is connected to the same network as the other devices\non which you are running observer samples\n\n\n\n\nRunning the sample\n\n\nThe main view of the application is a Table View listing all the doors that\nhave been discovered (both the ones that are published locally, and those that\nare published by other observer samples). A check mark next to a door indicates\nthat it's currently open. If no check mark is shown, the door is closed.\n\n\nTo open or close a door, tap on the door in the list of observed doors. The\nactual method that is called on the door depends on its current state: if it\nis open, it will be closed and the other way around.\n\n\nTo publish a door, tap the Add button (+) on the bar, type in a location for\nthe door and tap Save. The door should now appear in the list of observed\ndoors. The sample application does not allow you to remove, or change the\nlocation, of a door you've published. The door will be removed from the bus when\nyou close the sample application.\n\n\nNote that the sample application does not treat the doors it itself publishes on\nthe bus any different from doors published by remote peers. The door appears in\nthe Table View because it has been discovered by the sample application's\nObserver, and when you tap it, the \nOpen\n and \nClose\n methods are invoked on a\nproxy object, not on the bus object directly. This illustrates that an Observer\nallows you to treat locally hosted objects in the exact same way as remote\nobjects, which reduces application complexity.",
            "title": "Home"
        },
        {
            "location": "/develop/run-sample-apps/observer/#running-the-observer-sample",
            "text": "The Observer sample illustrates how to use the Observer API (introduced in\nAllJoyn R15.04) for easy object discovery and session management.  The sample is a simulation of a rudimentary home security system. Our\nhypothetical security system monitors all doors in your house, and lets you\nknow in real time whether they're open or closed, and who passes through a\ndoor. In addition, it allows for the remote opening and closing of doors.  The Service part of the sample ( door_provider ) is the security system itself\nthat publishes the state of the doors. It does not make use of the Observer API\nbecause the Observer is a Client-side concept, but it does illustrate how to\nexpose objects on the AllJoyn bus in such a way that they can easily be\ndiscovered and accessed by an Observer.  The Client part of the sample ( door_consumer ) is a simple monitoring user\ninterface through which the user can monitor the state of the doors, and\nremotely open or close doors. It makes use of the Observer to discover all doors\n(i.e., all bus objects implementing the  com.example.Door  interface), and of\nthe  ProxyBusObject::RegisterPropertiesChangedListener  mechanism to keep track\nof the current state of the discovered doors.  The data model for the security system is as follows:  node \n   interface name= com.example.Door \n     property name= IsOpen  type= b  access= read \n         annotation name= org.freedesktop.DBus.Property.EmitsChangedSignal  value= true / \n     /property \n     property name= Location  type= s  access= read \n         annotation name= org.freedesktop.DBus.Property.EmitsChangedSignal  value= true / \n     /property \n     property name= KeyCode  type= u  access= read \n         annotation name= org.freedesktop.DBus.Property.EmitsChangedSignal  value= invalidates / \n     /property \n\n     method name= Open / \n     method name= Close / \n     method name= KnockAndRun \n         !-- to demonstrate the use of fire-and-forget methods -- \n         annotation name= org.freedesktop.DBus.Method.NoReply  value= true / \n     /method \n     signal name= PersonPassedThrough \n       arg name= name  type= s / \n     /signal \n   /interface  /node   The sample can be run on the following platforms/language bindings:   C++ (Linux/Windows/Mac OS X)  C (Linux/Windows/Mac OS X)  Java (Android)  Objective-C (iOS/Mac OS X)",
            "title": "Running the Observer Sample"
        },
        {
            "location": "/develop/run-sample-apps/observer/#c",
            "text": "For C++, the Service and Client portions of the sample are implemented as\nseparate applications:  door_provider  and  door_consumer .  Prerequisites  The samples are command-line applications. Hence, you'll need to open a command\nprompt to start the samples. On Linux, use your favorite terminal emulator. On\nWindows, use Command Prompt, on Mac OS X, use Terminal.app.  The sample applications are located in a subdirectory of the path where you\nbuilt or installed AllJoyn:  build/ os / cpu / variant /dist/cpp/bin/samples/ ,\nwhere  os  is your operating system ( linux ,  darwin ,  win7 ),  cpu \nis your processor type (typically  x86  or  x86_64 ), and  variant  is either debug  or  release .  Specifically for Linux, you need to tell the operating system where to find the\nAllJoyn shared libraries:  AJ_ROOT=~/allseen/core/alljoyn    # the path where you downloaded the\n                                  # core/alljoyn git repository\nOS=linux                          # your operating system (linux, darwin, win7)\nTARGET_CPU=x86                    # your CPU architecture\nVARIANT=debug                     # debug or release\nexport LD_LIBRARY_PATH=$AJ_ROOT/build/$OS/$TARGET_CPU/$VARIANT/dist/cpp/lib:$LD_LIBRARY_PATH  This step should not be necessary on Windows or Mac OS X.  Running  door_provider  Start the application:  cd $AJ_ROOT/build/$OS/$TARGET_CPU/$VARIANT/dist/cpp/bin/samples\n./door_provider frontdoor backdoor garage cellar  This will emulate a security system that monitors four doors (the front door,\nthe back door, the garage door and the cellar door). You can start multiple door_provider  instances concurrently if you wish.  You will be dropped into a primitive command line user interface where you can\nissue simulation comands. To keep the interface simple, the application\ncontinuously cycles through all doors it maintains, and you cannot choose which\ndoor will be the subject of your next simulation command.  The following commands are supported:      q         quit\n    f         flip (toggle) the open state of the door\n    p  who    signal that  who  passed through the door\n    r         remove or reattach the door to the bus\n    c         assign a new (random) keycode to the door\n    n         move to next door in the list\n    h         show this help message  The changes to the door state that you trigger from the  door_provider \napplication should be reflected in all running  door_consumer  instances.  Running  door_consumer  Start the application:  cd $AJ_ROOT/build/$OS/$TARGET_CPU/$VARIANT/dist/cpp/bin/samples\n./door_consumer  The application will monitor the state of all doors that are published on the\nbus, and will print notifications whenever doors appear, disappear, or change\nstate. In addition, you can perform the following actions:      q             quit\n    l             list all discovered doors\n    o  location   open door at  location \n    c  location   close door at  location \n    k  location   knock-and-run at  location \n    h             display this help message  You can start multiple  door_consumer  instances simultaneously if you wish.\nThey should all reflect the same state for all doors published by all door_provider  instances in your network.",
            "title": "C++"
        },
        {
            "location": "/develop/run-sample-apps/observer/#c_1",
            "text": "The C Observer sample is very similar to the C++ one. Only the Client side of\nthe sample is implemented for the C language. Use the C++  door_provider  to act\nas the Service side of this sample.  To start the C Observer sample, do this:  AJ_ROOT=~/allseen/core/alljoyn    # the path where you downloaded the\n                                  # core/alljoyn git repository\nOS=linux                          # your operating system (linux, darwin, win7)\nTARGET_CPU=x86                    # your CPU architecture\nVARIANT=debug                     # debug or release\n\n# the following line is only needed for Linux:\nexport LD_LIBRARY_PATH=$AJ_ROOT/build/$OS/$TARGET_CPU/$VARIANT/dist/cpp/lib:$LD_LIBRARY_PATH\n\ncd $AJ_ROOT/build/$OS/$TARGET_CPU/$VARIANT/dist/cpp/bin/samples\n./door_consumer_c  The usage of  door_consumer_c  is exactly the same as that of the C++ door_consumer  application.",
            "title": "C"
        },
        {
            "location": "/develop/run-sample-apps/observer/#java-android",
            "text": "The Observer sample for Android incorporates both Service and Client aspects in\na single application. You can use the application to publish virtual doors on\nthe bus, and you can use it to observe (and manipulate) all doors that are\npublished on the network (both the ones you are publishing yourself, and those\nthat are published by other instances of the Observer sample).  Observer Functionality  The application's main screen is divided in 2 sections. The top section shows a\nlist of discovered doors. Each line states the door's location, bus name, object\npath and a check box indicating whether the door is open (checked) or closed\n(unchecked). A short tap on a door will toggle the door's state (i.e., invoke\nthe  Open  or  Close  method on the corresponding proxy object, as appropriate).\nA long press causes the invocation of the door's  KnockAndRun  method, which\nwill cause a closed door to open briefly.  The bottom section of the main screen displays a log of incoming AllJoyn\nmessages. Each line in the log represents an event received from a door. Example\nlog messages are:   Door event: FrontDoor: Method Open is called  Incoming event: FrontDoor opened   Service Functionality  The sample application is also capable of acting as a publisher of doors on the\nbus. To create a locally hosted door, select \"Create Door\" from the application\nmenu. Once you provide a name, the door will be published on the bus. Once it is\npublished, the application's Observer will discover it and the door will be\nadded to the list of discovered doors on the main screen.  From there on out, the locally hosted door is treated exactly the same as a\nremote door: all manipulations are performed on the proxy object provided by the\nObserver, rather than on the bus object directly. In this way, the Observer\nmakes it possible for applications to treat locally hosted objects exactly the\nsame as remote objects. This is a significant simplification of the application\nlogic for certain classes of applications.  To remove a locally hosted door from the bus, select \"Delete Door\" from the\napplication menu.",
            "title": "Java (Android)"
        },
        {
            "location": "/develop/run-sample-apps/observer/#objective-c-ios",
            "text": "The Observer sample for iOS incorporates both Service and Client aspects in\na single application. You can use the application to publish virtual doors on\nthe bus, and you can use it to observe (and manipulate) all doors that are\npublished on the network (both the ones you are publishing yourself, and those\nthat are published by other instances of the Observer sample).  Prerequisites   Build the sample  Install and run the sample on an iOS device  Make sure the device is connected to the same network as the other devices\non which you are running observer samples   Running the sample  The main view of the application is a Table View listing all the doors that\nhave been discovered (both the ones that are published locally, and those that\nare published by other observer samples). A check mark next to a door indicates\nthat it's currently open. If no check mark is shown, the door is closed.  To open or close a door, tap on the door in the list of observed doors. The\nactual method that is called on the door depends on its current state: if it\nis open, it will be closed and the other way around.  To publish a door, tap the Add button (+) on the bar, type in a location for\nthe door and tap Save. The door should now appear in the list of observed\ndoors. The sample application does not allow you to remove, or change the\nlocation, of a door you've published. The door will be removed from the bus when\nyou close the sample application.  Note that the sample application does not treat the doors it itself publishes on\nthe bus any different from doors published by remote peers. The door appears in\nthe Table View because it has been discovered by the sample application's\nObserver, and when you tap it, the  Open  and  Close  methods are invoked on a\nproxy object, not on the bus object directly. This illustrates that an Observer\nallows you to treat locally hosted objects in the exact same way as remote\nobjects, which reduces application complexity.",
            "title": "Objective-C (iOS)"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/android/",
            "text": "Android - Onboarding Sample Apps\n\n\nRunning Android Sample OnboardingServer\n\n\nThe Android OnboardingServer provides a sample Android \nimplementation of an app that uses the Onboarding server, \nto allow the device to be onboarded by another device's app \nusing the Onboarding client.\n\n\n\n\nOn the device to be onboarded, first set up your Wi-Fi hotspot settings. \nUnder \nSettings\n \n \nWireless \n networks\n, select \nTethering \n portable hotspot\n. \nBy default on some devices, this will be an open AP named \"AndroidAP\".\n\n\n\n\n\n\n\n\nConfigure your Wi-Fi hotspot settings.\n\n\n\n\n\n\n\n\nLoad AboutConfOnbServer.apk, and start app \nOnboarding Server\n. \nYou should see Wi-Fi hotspot notification bar icon pop up along \nwith the text \"Tethering or hotspot active\". This device is now \nready to be onboarded.\n\n\n\n\n\n\nRunning Android Sample OnboardingClient\n\n\nThe Android OnboardingClient provides a sample Android \nimplementation of an app that uses the Onboarding client, \nto allow the app to onboard another device.\n\n\n\n\nLoad OnboardingSampleClient.apk, and start app \nOnboarding Client\n.\n\n\n\n\n\n\n\n\nPress \nScan WIFI networks\n.\n\n\n\n\n\n  \n\n\n\n\nSelect the Wi-Fi hotspot you configured on the device running \nthe \nOnboarding Server\n, and enter a password if needed, then press \nOK\n.\n\n\n\n\n\n\n\n\nPress the \nConnect to AllJoyn\n button, then press \nOK\n in \nthe popup dialog - 'realm name' here is not important.\n\n\n\n\n\n  \n\n\n\n\nA list of AllJoyn apps will be displayed. Long press on the \nHello\n app, \nand select the \nOnboarding\n option.\n\n\n\n\n\n  \n\n\n\n\nEnter the access point info for the network that is being onboarded to.\n\n\n\n\n\n  \n\n\n\n\nPress \nConfigure\n to configure the device with the access point info.\n\n\n\n\n\n\n\n\nPress \nConnect\n to have the device connect with the configured AP information.\n\n\n\n\n\n\n\n\nIf properly configured, the \nother\n device running the \n\nOnboarding Server\n will be onboarded to the AP, after which \nthe Wi-Fi hotspot notification bar icon disappears and the Wi-Fi \nicon appears in the notification bar.",
            "title": "Android"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/android/#android-onboarding-sample-apps",
            "text": "",
            "title": "Android - Onboarding Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/android/#running-android-sample-onboardingserver",
            "text": "The Android OnboardingServer provides a sample Android \nimplementation of an app that uses the Onboarding server, \nto allow the device to be onboarded by another device's app \nusing the Onboarding client.   On the device to be onboarded, first set up your Wi-Fi hotspot settings. \nUnder  Settings     Wireless   networks , select  Tethering   portable hotspot . \nBy default on some devices, this will be an open AP named \"AndroidAP\".     Configure your Wi-Fi hotspot settings.     Load AboutConfOnbServer.apk, and start app  Onboarding Server . \nYou should see Wi-Fi hotspot notification bar icon pop up along \nwith the text \"Tethering or hotspot active\". This device is now \nready to be onboarded.",
            "title": "Running Android Sample OnboardingServer"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/android/#running-android-sample-onboardingclient",
            "text": "The Android OnboardingClient provides a sample Android \nimplementation of an app that uses the Onboarding client, \nto allow the app to onboard another device.   Load OnboardingSampleClient.apk, and start app  Onboarding Client .     Press  Scan WIFI networks .   \n     Select the Wi-Fi hotspot you configured on the device running \nthe  Onboarding Server , and enter a password if needed, then press  OK .     Press the  Connect to AllJoyn  button, then press  OK  in \nthe popup dialog - 'realm name' here is not important.   \n     A list of AllJoyn apps will be displayed. Long press on the  Hello  app, \nand select the  Onboarding  option.   \n     Enter the access point info for the network that is being onboarded to.   \n     Press  Configure  to configure the device with the access point info.     Press  Connect  to have the device connect with the configured AP information.     If properly configured, the  other  device running the  Onboarding Server  will be onboarded to the AP, after which \nthe Wi-Fi hotspot notification bar icon disappears and the Wi-Fi \nicon appears in the notification bar.",
            "title": "Running Android Sample OnboardingClient"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/",
            "text": "Running The Onboarding Samples\n\n\nThere are two types of Onboarding sample applications, an \nOnboarder and an Onboardee. The \nOnboarding service framework\n \nis both a definition of how a Wi-Fi Radio will function on a \ndevice and the AllJoyn\n interface used to communicate.\n\n\nAn Onboardee application is responsible for starting up \nas an Access Point (AP) and offering up that it supports \nthe Onboarding service framework via \nAbout Announcements\n. \nOnce provided a set of user-provided AP credentials, the application \nwill stop advertising an AP and connect using the provided credentials.\n\n\nAn application that provides the Onboarder side of the service \nis responsible for using the Onboarding interface to transmit \nAP credentials that the Onboardee application should connect to.\n\n\nThe Onboarding interface is defined as follows:\n\n\nnode\n\n    \ninterface name=\norg.alljoyn.Onboarding\n\n        \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n \n        \nproperty name=\nState\n type=\nn\n access=\nread\n/\n \n        \nproperty name=\nLastError\n type=\n(ns)\n access=\nread\n/\n \n        \nmethod name=\nConfigureWifi\n\n            \narg name=\nSSID\n type=\ns\n direction=\nin\n/\n\n            \narg name=\npassphrase\n type=\ns\n direction=\nin\n/\n\n            \narg name=\nauthType\n type=\nn\n direction=\nin\n/\n\n            \narg name=\nstatus\n type=\nn\n direction=\nout\n/\n\n        \n/method\n\n        \nmethod name=\nConnect\n\n            \nannotation name=\norg.freedesktop.DBus.Method.NoReply\n value=\ntrue\n /\n\n        \n/method\n\n        \nmethod name=\nOffboard\n\n            \nannotation name=\norg.freedesktop.DBus.Method.NoReply\n value=\ntrue\n /\n\n        \n/method\n\n        \nmethod name=\nGetScanInfo\n\n            \narg name=\nage\n type=\nq\n direction=\nout\n/\n\n            \narg name=\nscanList\n type=\na(sn)\n direction=\nout\n/\n        \n        \n/method\n\n        \nsignal name=\nConnectionResult\n\n            \narg type=\n(ns)\n /\n\n        \n/signal\n\n    \n/interface\n\n\n/node\n\n\n\n\n\nOnboarder samples are available for Android and iOS.\nOnboardee samples are available for Android.\n\n\nThe samples can be run on the following platforms:\n- \nAndroid\n\n- \nLinux\n\n- \niOS/OSX",
            "title": "Home"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/#running-the-onboarding-samples",
            "text": "There are two types of Onboarding sample applications, an \nOnboarder and an Onboardee. The  Onboarding service framework  \nis both a definition of how a Wi-Fi Radio will function on a \ndevice and the AllJoyn  interface used to communicate.  An Onboardee application is responsible for starting up \nas an Access Point (AP) and offering up that it supports \nthe Onboarding service framework via  About Announcements . \nOnce provided a set of user-provided AP credentials, the application \nwill stop advertising an AP and connect using the provided credentials.  An application that provides the Onboarder side of the service \nis responsible for using the Onboarding interface to transmit \nAP credentials that the Onboardee application should connect to.  The Onboarding interface is defined as follows:  node \n     interface name= org.alljoyn.Onboarding \n         property name= Version  type= q  access= read /  \n         property name= State  type= n  access= read /  \n         property name= LastError  type= (ns)  access= read /  \n         method name= ConfigureWifi \n             arg name= SSID  type= s  direction= in / \n             arg name= passphrase  type= s  direction= in / \n             arg name= authType  type= n  direction= in / \n             arg name= status  type= n  direction= out / \n         /method \n         method name= Connect \n             annotation name= org.freedesktop.DBus.Method.NoReply  value= true  / \n         /method \n         method name= Offboard \n             annotation name= org.freedesktop.DBus.Method.NoReply  value= true  / \n         /method \n         method name= GetScanInfo \n             arg name= age  type= q  direction= out / \n             arg name= scanList  type= a(sn)  direction= out /         \n         /method \n         signal name= ConnectionResult \n             arg type= (ns)  / \n         /signal \n     /interface  /node   Onboarder samples are available for Android and iOS.\nOnboardee samples are available for Android.  The samples can be run on the following platforms:\n-  Android \n-  Linux \n-  iOS/OSX",
            "title": "Running The Onboarding Samples"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/ios-osx/",
            "text": "Run the Onboarding Sample App - iOS\n\n\nPrerequisites\n\n\nBuild the iOS sample apps\n and install the \nOnboarding sample app on an iOS device.\n\n\nThe Onboarding service sample app functions as the Onboarder \nside of the Onboarding service framework. At this time, there \nis not an iOS Onboardee sample application. In order to have \nan Onboardee to interact with, follow the instructions in \n\nRun an Onboardee\n to set up and run a \nsample Oboardable application on an Android device. The Android \ndevice and the iOS device must be on the same network.\n\n\nRun the Onboarding Sample App\n\n\n\n\nUse the \nSettings\n \n \nWi-Fi\n menu option on your iOS device \nto connect to the AP being advertised by the device that you want to onboard.\n\n\nOnce you have connected to the device's AP, run the \nOnboarding service sample app on your iOS device.\n\n\nClick the \nConnect to AllJoyn\n button.\n\n\nIn the pop-up that appears, set the name to be used \nby the About feature in the application. You can use the \ndefault of org.alljoyn.BusNode.onboardingClient, or enter your own.\nThe application is now running as an Onboarder. In the list \narea below the Disconnect from AllJoyn button, you will see \nany nearby applications that have been discovered via the \nAbout feature that support the Onboarding service framework \nand are acting as an Onboardee.\n\n\nTo interact with an Onboardee, select one from the list \nof nearby applications that have been discovered.\n\n\nChoose an option from the pop-up that appears:\n\n\nShow Announce: This will allow you to view the About \n  announcement that was received from the nearby application.\n\n\nAbout: This will show the full set of information \n  retrieved by the About Client from the nearby application.\n\n\nOnboarding: You can use the Onboarder to step through \n  the process of onboarding the Onboardee onto the local Wi-Fi network.\n\n\nSelect the Onboarding option and do the following:\n\n\nEnter the SSID and password of the Wi-Fi network you want \n  to onboard the device onto, and then click \nConfigure\n. \n  This will use the Onboarding service to pass these values to the Onboardee.\n\n\nClick \nConnect\n. You should see a Success message along \n  with instructions to go to the \nSettings\n \n \nWi-Fi\n menu \n  option on your iOS device and switch networks to the one \n  that you onboarded the device to.\n\n\nOnce you switch networks, you should now see the device \n  you onboarded listed as a nearby device under the \n  \nDisconnect from AllJoyn\n button. If you select the device, \n  you will see that it has been onboarded, and you now have the \n  option to offboard the device.\n\n\n\n\nRun an Onboardee\n\n\nFollow the \ninstructions to run the AboutConfOnbServer in Android\n. \nYou will then be able to use the iOS Onboarding Service \nsample app to onboard the app on the Android device.\n\n\nWhen you run the AboutConfOnbServer application on an Android device, \nit will automatically put the device into \"AP mode\". Depending on your \nAndroid device, you may need to manually edit the AP name to include \na prefix of \"AJ_\". This prefix is used by the Onboarding service framework \nto determine which APs are for AllJoyn devices that support the Onboarding service framework.",
            "title": "Ios osx"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/ios-osx/#run-the-onboarding-sample-app-ios",
            "text": "",
            "title": "Run the Onboarding Sample App - iOS"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/ios-osx/#prerequisites",
            "text": "Build the iOS sample apps  and install the \nOnboarding sample app on an iOS device.  The Onboarding service sample app functions as the Onboarder \nside of the Onboarding service framework. At this time, there \nis not an iOS Onboardee sample application. In order to have \nan Onboardee to interact with, follow the instructions in  Run an Onboardee  to set up and run a \nsample Oboardable application on an Android device. The Android \ndevice and the iOS device must be on the same network.",
            "title": "Prerequisites"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/ios-osx/#run-the-onboarding-sample-app",
            "text": "Use the  Settings     Wi-Fi  menu option on your iOS device \nto connect to the AP being advertised by the device that you want to onboard.  Once you have connected to the device's AP, run the \nOnboarding service sample app on your iOS device.  Click the  Connect to AllJoyn  button.  In the pop-up that appears, set the name to be used \nby the About feature in the application. You can use the \ndefault of org.alljoyn.BusNode.onboardingClient, or enter your own.\nThe application is now running as an Onboarder. In the list \narea below the Disconnect from AllJoyn button, you will see \nany nearby applications that have been discovered via the \nAbout feature that support the Onboarding service framework \nand are acting as an Onboardee.  To interact with an Onboardee, select one from the list \nof nearby applications that have been discovered.  Choose an option from the pop-up that appears:  Show Announce: This will allow you to view the About \n  announcement that was received from the nearby application.  About: This will show the full set of information \n  retrieved by the About Client from the nearby application.  Onboarding: You can use the Onboarder to step through \n  the process of onboarding the Onboardee onto the local Wi-Fi network.  Select the Onboarding option and do the following:  Enter the SSID and password of the Wi-Fi network you want \n  to onboard the device onto, and then click  Configure . \n  This will use the Onboarding service to pass these values to the Onboardee.  Click  Connect . You should see a Success message along \n  with instructions to go to the  Settings     Wi-Fi  menu \n  option on your iOS device and switch networks to the one \n  that you onboarded the device to.  Once you switch networks, you should now see the device \n  you onboarded listed as a nearby device under the \n   Disconnect from AllJoyn  button. If you select the device, \n  you will see that it has been onboarded, and you now have the \n  option to offboard the device.",
            "title": "Run the Onboarding Sample App"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/ios-osx/#run-an-onboardee",
            "text": "Follow the  instructions to run the AboutConfOnbServer in Android . \nYou will then be able to use the iOS Onboarding Service \nsample app to onboard the app on the Android device.  When you run the AboutConfOnbServer application on an Android device, \nit will automatically put the device into \"AP mode\". Depending on your \nAndroid device, you may need to manually edit the AP name to include \na prefix of \"AJ_\". This prefix is used by the Onboarding service framework \nto determine which APs are for AllJoyn devices that support the Onboarding service framework.",
            "title": "Run an Onboardee"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/linux/",
            "text": "Linux - Running Onboarding Sample Apps\n\n\nRunning OnboardingClient and OnboardingService Apps\n\n\nPrerequisites\n\n\nOpen two terminal windows. In each, navigate to the AllJoyn\n root dir, then:\n\n\nexport AJ_ROOT=`pwd`\n\n# \nTARGET CPU\n can be either x86_64, x86, or whatever value you set for \nCPU=\n when running SCons.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/onboarding/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/config/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/services_common/lib:$LD_LIBRARY_PATH\n\n\n\n\nRun the OnboardingService Sample App\n\n\nIn one of the terminal windows, run \nOnboardingService\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/onboarding/bin/OnboardingService\n\n\n\n\nNOTE:\n The \nOnboardingService\n sample app is just a shell implementation - \nno onboarding actually occurs!\n\n\nRun the OnboardingClient Sample App\n\n\nIn the other terminal window, run \nOnboardingClient\n:\n\n\n$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/onboarding/bin/OnboardingClient\n\n\n\n\nNOTE: The \nOnboardingClient\n sample app uses hard-coded Onboarding \nvalues (for example, SSID, passcode, authtype).",
            "title": "Linux"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/linux/#linux-running-onboarding-sample-apps",
            "text": "",
            "title": "Linux - Running Onboarding Sample Apps"
        },
        {
            "location": "/develop/run-sample-apps/onboarding/linux/#running-onboardingclient-and-onboardingservice-apps",
            "text": "Prerequisites  Open two terminal windows. In each, navigate to the AllJoyn  root dir, then:  export AJ_ROOT=`pwd`\n\n#  TARGET CPU  can be either x86_64, x86, or whatever value you set for  CPU=  when running SCons.\nexport TARGET_CPU=x86\n\nexport LD_LIBRARY_PATH=$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/cpp/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/about/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/onboarding/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/config/lib:$AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/services_common/lib:$LD_LIBRARY_PATH  Run the OnboardingService Sample App  In one of the terminal windows, run  OnboardingService :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/onboarding/bin/OnboardingService  NOTE:  The  OnboardingService  sample app is just a shell implementation - \nno onboarding actually occurs!  Run the OnboardingClient Sample App  In the other terminal window, run  OnboardingClient :  $AJ_ROOT/core/alljoyn/build/linux/$TARGET_CPU/debug/dist/onboarding/bin/OnboardingClient  NOTE: The  OnboardingClient  sample app uses hard-coded Onboarding \nvalues (for example, SSID, passcode, authtype).",
            "title": "Running OnboardingClient and OnboardingService Apps"
        },
        {
            "location": "/develop/run-sample-apps/test/",
            "text": "Command Line Applications\n\n\nOutside of fully functional sample applications, there is a class of \ncommand line applications that are used for testing the AllJoyn\n core. \nSome of these applicatioins are helpful for developers to use to help \nthem learn about the AllJoyn framework, or debug some feature in their application.\n\n\nHere is a list of command line applications:\n\n\n\n\nSessions\n. This application enables a developer to enter commands \nto build up the start of an AllJoyn application to simulate a client or service to test with.",
            "title": "Home"
        },
        {
            "location": "/develop/run-sample-apps/test/#command-line-applications",
            "text": "Outside of fully functional sample applications, there is a class of \ncommand line applications that are used for testing the AllJoyn  core. \nSome of these applicatioins are helpful for developers to use to help \nthem learn about the AllJoyn framework, or debug some feature in their application.  Here is a list of command line applications:   Sessions . This application enables a developer to enter commands \nto build up the start of an AllJoyn application to simulate a client or service to test with.",
            "title": "Command Line Applications"
        },
        {
            "location": "/develop/run-sample-apps/test/sessions/",
            "text": "Running the Sessions Application\n\n\nThe Sessions application is a valuable testing tool. This application allows for command line inputs that can help a developer ensure that they have the basics set up in an AllJoyn\n application.\n\n\nThis application is supported on the following platforms:\n\n Linux\n\n Windows\n\n Android\n\n OS X\n\n\nThe Sessions application is found inside the build dist folder under:\n\n\n'''sh\n\n/cpp/bin/\n\n'''\n\n\nUsage\n\n\nRegardless of the platform, when the application runs, you can use the following commands:\n\n\ndebug \nmodule_name\n \nlevel\n                                   - Set debug level for a module\nrequestname \nname\n                                            - Request a well-known name\nreleasename \nname\n                                            - Release a well-known name\nbind \nport\n [isMultipoint] [traffic] [proximity] [transports] - Bind a session port\nunbind \nport\n                                                 - Unbind a session port\nadvertise \nname\n [transports]                                 - Advertise a name\ncanceladvertise \nname\n [transports]                           - Cancel an advertisement\nfind \nname_prefix\n                                            - Discover names that begin with prefix\ncancelfind \nname_prefix\n                                      - Cancel discovering names that begins with prefix\nlist                                                          - List port bindings, discovered names and active sessions\njoin \nname\n \nport\n [isMultipoint] [traffic] [proximity] [transports] - Join a session\nasyncjoin \nname\n \nport\n [isMultipoint] [traffic] [proximity] [transports] - Join a session asynchronously\nremovemember \nsessionId\n \nmemberName\n                         - Remove a session member\nleave \nsessionId\n                                             - Leave a session\nchat \nsessionId\n \nmsg\n                                        - Send a message over a given session\ncchat \nsessionId\n \nmsg\n                                       - Send a message over a given session with compression\nschat \nmsg\n                                                   - Send a sessionless message\ncancelsessionless \nserialNum\n                                 - Cancel a sessionless message\nautochat \nsessionId\n [count] [delay] [minSize] [maxSize]      - Send periodic messages of various sizes\ntimeout \nsessionId\n \nlinkTimeout\n                             - Set link timeout for a session\nasynctimeout \nsessionId\n \ntimeout\n                            - Set link timeout for a session asynchronously\nchatecho [on|off]                                             - Turn on/off chat messages\naddmatch \nrule\n                                               - Add a DBUS rule\nremovematch \nrule\n                                            - Remove a DBUS rule\nsendttl \nttl\n                                                 - Set ttl (in ms) for all chat messages (0 = infinite)\nping \nname\n                                                   - Ping a name\nexit                                                          - Exit this program\n\n\n\n\nExamples\n\n\nSimulate a client\n\n\nPerform the following steps to verify application is advertising and has bound a session.\n\n\nAssume that an application has been written that uses the AllJoyn framework but there are problems discovering on other applications. The Sessions application can help isolate where the issue exists.\n\n\n\n\nStart the Sessions application.\n    \nNOTE:\n Platform must be connected to the same network as the AllJoyn application you wish to debug.\n\n\nType 'find \n', where \n is the start of the well-known name that should be advertised.\n    Typing 'find org.alljoyn' when running the Basic Service would show the following:\n    \nFoundAdvertisedName name=org.alljoyn.Bus.sample namePrefix=org.alljoyn\n\n\nTry and join the session by typing 'join org.alljoyn.Bus.sample 25'.  You should see this:\n    \nJoinSession(org.alljoyn.Bus.sample, 25, ...) succeeded with id = 186166334\n\n\n\n\nSimulate a Service\n\n\nPerform the following steps to set up an application that binds \na session and advertises a well-known name.\n1. Start the Sessions application.\n2. Type 'bind 123'.\n3. Type 'requestname org.allseen.test'.\n4. Type 'advertise org.allseen.test'.\n\nNOTE:\n Open a new session application in a separate terminal \nand verify per steps in Simulate a client: 'find org.alljoyn.test', \nthen 'join org.alljoyn.test 123'",
            "title": "Sessions"
        },
        {
            "location": "/develop/run-sample-apps/test/sessions/#running-the-sessions-application",
            "text": "The Sessions application is a valuable testing tool. This application allows for command line inputs that can help a developer ensure that they have the basics set up in an AllJoyn  application.  This application is supported on the following platforms:  Linux  Windows  Android  OS X  The Sessions application is found inside the build dist folder under:  '''sh /cpp/bin/ \n'''",
            "title": "Running the Sessions Application"
        },
        {
            "location": "/develop/run-sample-apps/test/sessions/#usage",
            "text": "Regardless of the platform, when the application runs, you can use the following commands:  debug  module_name   level                                    - Set debug level for a module\nrequestname  name                                             - Request a well-known name\nreleasename  name                                             - Release a well-known name\nbind  port  [isMultipoint] [traffic] [proximity] [transports] - Bind a session port\nunbind  port                                                  - Unbind a session port\nadvertise  name  [transports]                                 - Advertise a name\ncanceladvertise  name  [transports]                           - Cancel an advertisement\nfind  name_prefix                                             - Discover names that begin with prefix\ncancelfind  name_prefix                                       - Cancel discovering names that begins with prefix\nlist                                                          - List port bindings, discovered names and active sessions\njoin  name   port  [isMultipoint] [traffic] [proximity] [transports] - Join a session\nasyncjoin  name   port  [isMultipoint] [traffic] [proximity] [transports] - Join a session asynchronously\nremovemember  sessionId   memberName                          - Remove a session member\nleave  sessionId                                              - Leave a session\nchat  sessionId   msg                                         - Send a message over a given session\ncchat  sessionId   msg                                        - Send a message over a given session with compression\nschat  msg                                                    - Send a sessionless message\ncancelsessionless  serialNum                                  - Cancel a sessionless message\nautochat  sessionId  [count] [delay] [minSize] [maxSize]      - Send periodic messages of various sizes\ntimeout  sessionId   linkTimeout                              - Set link timeout for a session\nasynctimeout  sessionId   timeout                             - Set link timeout for a session asynchronously\nchatecho [on|off]                                             - Turn on/off chat messages\naddmatch  rule                                                - Add a DBUS rule\nremovematch  rule                                             - Remove a DBUS rule\nsendttl  ttl                                                  - Set ttl (in ms) for all chat messages (0 = infinite)\nping  name                                                    - Ping a name\nexit                                                          - Exit this program",
            "title": "Usage"
        },
        {
            "location": "/develop/run-sample-apps/test/sessions/#examples",
            "text": "Simulate a client  Perform the following steps to verify application is advertising and has bound a session.  Assume that an application has been written that uses the AllJoyn framework but there are problems discovering on other applications. The Sessions application can help isolate where the issue exists.   Start the Sessions application.\n     NOTE:  Platform must be connected to the same network as the AllJoyn application you wish to debug.  Type 'find  ', where   is the start of the well-known name that should be advertised.\n    Typing 'find org.alljoyn' when running the Basic Service would show the following:\n     FoundAdvertisedName name=org.alljoyn.Bus.sample namePrefix=org.alljoyn  Try and join the session by typing 'join org.alljoyn.Bus.sample 25'.  You should see this:\n     JoinSession(org.alljoyn.Bus.sample, 25, ...) succeeded with id = 186166334   Simulate a Service  Perform the following steps to set up an application that binds \na session and advertises a well-known name.\n1. Start the Sessions application.\n2. Type 'bind 123'.\n3. Type 'requestname org.allseen.test'.\n4. Type 'advertise org.allseen.test'. NOTE:  Open a new session application in a separate terminal \nand verify per steps in Simulate a client: 'find org.alljoyn.test', \nthen 'join org.alljoyn.test 123'",
            "title": "Examples"
        },
        {
            "location": "/develop/tutorial/arduino-and-gt202/",
            "text": "Arduino + GT202\n\n\nThe AllJoyn\n Thin Core Library includes a Wi-Fi driver for the GT202 Wi-Fi board,\nknown as WSL. This document explains how to setup the hardware and software\nto run AllJoyn Thin Apps on an Arduino Due running FreeRTOS, including the WSL\nWi-Fi driver, that connects to a GT202 Wi-Fi board over SPI.\n\n\nHardware Requirements\n\n\nThe following hardware devices are needed in order to test and \nevaluate the project as stated in this document.\n\n\n\n\nArduino Due\n\n\nTransmogriShield\n\n\nGT202 kit\n\n\nSegger J-link JTAG or equivalent\n\n\nSegger ARM-JTAG 10-pin to 20-pin adapter\n\n\n\n\nThe following figures identify the connections between the \nArduino Due, TransmogriShield, and GT202 kit.\n\n\n\n\nAlign the female SPI connection of the TransmogriShield \nwith the male SPI connection of the Arduino Due as shown in the following figure.\n\n\nConnect the male pins on the bottom of the GT202 kit to the \nfemale connectors on the Shield side of the TransmogriShield \nboard as shown in the GT202 pinout diagram.\n\n\n\n\n\n\nFigure:\n Arduino Due board connections\n\n\n\n\nFigure:\n GT202 kit pinout\n\n\nInstalling Third-Party Software\n\n\nWindows 7\n\n\nWindows 7 third-party software and installation information\n\n\n\n\n\n\n\n\nTool\n\n\nMinimum version requirement\n\n\nInstaller/Notes\n\n\n\n\n\n\n\n\n\n\nARM GNU Tool Chain\n\n\n4.8 2013q4\n\n\nDownload the \ninstaller\n and execute.\nWindows will install the ARM GNU Tool Chain in (C:\\Program Files (x86)\\GNU Tools ARM Embedded\\4.8 2013q4\\bin) which may be used for an environmental variable.\n\n\n\n\n\n\nFreeRTOS\n\n\n7.6.0\n\n\nDownload the \nZIP file\n and unzip to the local drive.\nNote the path where the FreeRTOS ZIP file is extracted as it may be used in an environment variable.\n\n\n\n\n\n\nAtmel Software Framework\n\n\n3.15\n\n\nDownload the \nZIP file\n and unzip to local drive.\nNote the path where the framework ZIP file is extracted as it may be used in an environment variable.\nThis requires providing contact information to receive a link to the software.\n\n\n\n\n\n\nJ-Link software\n\n\n4.8.4a\n\n\nDownload the \nsoftware and documentation\n and install.\nYou must enter the serial number of the j-link device to complete the download./p\n\n\n\n\n\n\nEclipse IDE\n\n\nRelease 2\n\n\nDownload the \nappropriate Windows bit version\n.\nUncompress the file folder to the local drive.\nIf JRE (Java Runtime Environment) or JDK (Java Development Kit) has previously been installed, skip installing JRE (noted below).\n\n\n\n\n\n\nJava Runtime Environment (required for Eclipse)\n\n\n\n\nDownload and install \nJRE\n.\n\n\n\n\n\n\nAtmel Studio IDE\n\n\n6.1\n\n\nDownload the \ninstaller (full)\n and install.\nNOTE:\n The installation requires the PC to restart.\n\n\n\n\n\n\nPython\n\n\n2.7.3\n\n\nPython 2.6 may also be used.\nUse the 32-bit version of Python even if you are building the AllJoyn framework for a 64-bit architecture.\nOpen a browser and navigate to http://www.python.org/download/.\nFrom the Python web page, select Python 2.7.3 Windows Installer (32-bit).\nClick \nRun\n and \nRun\n again. The Python setup wizard appears.\nClick \nFinish\n, \nYes\n, and \nFinish\n again.\n\n\n\n\n\n\nSCons\n\n\n2.3.0\n\n\nOpen a browser and navigate to http://www.scons.org.\nFrom the SCons web page, under 'Scons 2.3.0.final.0 is available', click the download page.\nSelect scons-2.3.0.final.0.win32.exe, and click \nRun\n and \nRun\n again. The setup wizard appears.\nProceed through the wizard steps to complete the SCons installation.\n\n\n\n\n\n\n\n\nLinux (Ubuntu 12.04)\n\n\n\n\n\n\n\n\nTool\n\n\nMinimum version requirement\n\n\nInstaller/Notes\n\n\n\n\n\n\n\n\n\n\nARM GNU Tool Chain\n\n\n4.8 2013q4\n\n\nOpen terminal and input \nsudo add-apt-repository ppa:terry.guo/gcc-arm-embedded\nPress \nEnter\n to continue when prompted.\nInput \nsudo apt-get update\nInput \nsudo apt-get install gcc-arm-none-eabi\n\n\n\n\n\n\nFreeRTOS\n\n\n7.6.0\n\n\nDownload the \nZIP file\n and unzip to the local drive.\nNote the path where the ZIP file is extracted as it may be used in an environment variable.\n\n\n\n\n\n\nAtmel Software Framework\n\n\n3.15\n\n\nDownload the \nZIP file\n and unzip to the local drive.\nNote the path where the ZIP file is extracted as it may be used in an environment variable.\nThis requires providing contact information to receive a link to the software.\n\n\n\n\n\n\nJ-Link software\n\n\n4.84a\n\n\nDownload the \nsoftware and documentation\n and install DEB, RPM or TGZ format.\nYou must enter the serial number of the j-link device to complete the download.\n\n\n\n\n\n\nEclipse IDE\n\n\nRelease 2\n\n\nDownload the \nappropriate Linux version\n.\nUncompress the file folder to the local drive.\nIf JRE (Java Runtime Environment) or JDK (Java Development Kit) has previously been installed, skip installing JRE (noted below).\n\n\n\n\n\n\nJava Runtime Environment (required for Eclipse)\n\n\n\n\nOpen terminal and input \nsudo apt-get install openjdk-7-jre\n\n\n\n\n\n\nAtmel Studio IDE\n\n\n6.1\n\n\nDownload \ninstaller (full)\n and install.\nNOTE:\n The installation may require the PC to restart.\n\n\n\n\n\n\nSCons\n\n\n2.3.0\n\n\nOpen terminal and input \nsudo apt-get install scons\n\n\n\n\n\n\n\n\nConfiguring the Project Environment\n\n\nGet TCL for Arduino Due\n\n\n\n\nCreate a project folder.\n\n\nClone the ajtcl repo.\n\n\nCheck out the master branch.\n   \nsh\n   git clone https://git.allseenalliance.org/gerrit/core/ajtcl.git\n\n\n\n\nThe directory structure follows. Items marked with ** used in \ncompilation and contain objects files.\n\n\n**ajtcl (root folder)\n   **bsp (Board-specific package)\n      **due (Arduino Due target platform files) \n         config\n   **crypto (Encryption) \n      ecc\n   external\n      **sha2 \n   inc\n   java\n      ecompass\n         .settings \n         src\n            org\n               alljoyn\n                  bus\n                     samples\n   **malloc (Memory allocation)\n   **RTOS (Real Time Operating System)\n      **FreeRTOS (RTOS used for Arduino Due)\n   Samples\n      basic\n      network\n      secure\n   **src (TCL source files) \n   target\n      arduino\n         examples\n            AJ_LedServices \n         samples\n            AJ_basic_client \n            AJ_basic_service \n            AJ_nameChange_client \n            AJ_SecureClient \n            AJ_SecureService\n            AJ_signal_service \n            AJ_signalConsumer_client\n         tests\n            AJ_aetest \n            AJ_bastress2 \n            AJ_clientlite \n            AJ_mutter \n            AJ_sessions \n            AJ_siglite \n            AJ_svclite\n      linux\n      win32\n   **test (test applications .elf)\n      **WSL (unit and API applications .elf) \n   tools\n   unit_test\n      test_report\n   **WSL (APIs used for SPI with GT202)\n\n\n\n\nSet up environment variables\n\n\nNOTE:\n These variables can be passed into SCons without setting \nenvironmental variables.\n\n\nWindows 7\n\n\n\n\nRight-click \nMy Computer\n and select \nProperties \n Advanced system settings\n.\n\n\nClick \nEnvironment Variables\n on the \nAdvanced\n tab.\n\n\nDo the following to create a new system environment variable.\n\n\nClick \nNew\n in the System variables section.\n\n\nIn \nVariable\n, type FREE_RTOS_DIR.\n\n\nIn \nVariable value\n, specify the name where the \n   FREERTOS ZIP file was extracted. \n   Example: \"C:\\FREERTOSv7.6.0\\FREERTOS\"\n\n\nClick \nOK\n.\n\n\nClick \nNew\n to add another system environment variable.\n\n\nIn \nVariable\n, type ATMEL_DIR.\n\n\nIn \nVariable name\n, specify the path where the \n   Atmel asf-standalone-archive ZIP file was extracted.\n   Example: \"C:\\xdk-asf-3.15.0\"\n\n\nClick \nOK\n.\n\n\nClick \nNew\n to add another system environment variable.\n\n\nIn \nVariable\n, type ARM_TOOLCHAIN_DIR.\n\n\nIn \nVariable value\n, specify the installation path \n   of the GNU ARM Toolchain. \n   Example: \"C:\\Program Files (x86)\\GNU Tools ARM Embedded\\4.8 2013q4\\bin\"\n\n\nClick \nOK\n.\n\n\nScroll through the user variables list and highlight \nPATH\n.\n\n\nClick \nEdit\n.\n\n\nIn \nVariable value\n, add the installation path of the \nPython tool: \"C:\\Python27; C:\\Python27\\Scripts\"\n\n\nClick \nOK\n several times to save your changes.\n\n\n\n\nLinux Ubuntu (12.04)\n\n\nThe instructions below are based on calling the Eclipse \nfrom Terminal. Other calling methods for Eclipse will \nrequire declaring the environmental variables in a different location.\n\n\n\n\nOpen terminal and edit .bashrc;.\n\n\nAdd an export variable \"FREE_RTOS_DIR\" with the location \nof the FreeRTOS folder. \n   Example: \"export RTOS_DIR=~/FreeRTOSV7.6.0/FreeRTOS\"\n\n\nAdd an export variable \"ATMEL_DIR\" with the location \nof the Atmel asf-standalone-archive.\n   Example \"export ATMEL_DIR=~/ xdk-asf-3.15.0\"\n\n\nAdd an export variable \"ARM_TOOLCHAIN_DIR\" with the \nlocation of the GNU ARM Toolchain.\n   Example \"export ARM_TOOLCHAIN_DIR=/usr/bin\"\n\n\nDo the following to verify environmental variables:\n\n\nOpen terminal and navigate to the ajtcl directory.\n\n\nEnter \"scons -h\".\n   The environmental paths found by the SCons script will be displayed.\n\n\n\n\nNOTE:\n The default will mirror actual since there are no default \nvalues set in the script.\n\n\nConfigure the build file\n\n\nComplete the following procedure to edit the FreeRTOSConfig.h.\n\n\n\n\nNavigate to the FreeRTOSConfig.h file, located in \n%ATMEL_DIR%/thirdparty/freertos-7.3.0/module_config.\n\n\nOn approximately line 71, update the configCPU_CLOCK_HZ macro: \nReplace the sysclk_get_cpu_hz() function with 84000000UL.\n\n\nAdd the following macros:\n\n\n\n\nc\n   #define vPortSVCHandler SVC_Handler\n   #define xPortPendSVHandler PendSV_Handler\n   #define xPortSysTickHandler SysTick_Handler\n\n\nBuilding with SCons\n\n\n\n\n\n\nFor Release variant:\n  The build command is \"scons TARG=bsp AJWSL=due VARIANT=release WS=off\".\n\n\n\n\n\n\nFor the Debug variant:\n\n\n\n\nThe build command is \"scons TARG=bsp AJWSL=due VARIANT=debug WS=off\".\n\n\nTo clean the object files, add a \"-c\" at the end of the \n  command. Example: \"scons TARG=bsp AJWSL=due VARIANT=debug WS=off -c\"\n\n\n\n\nConfiguring the IDEs\n\n\nSetting up the Atmel IDE\n\n\nInitial setup\n\n\n\n\nCreate a new project by selecting \nFile \n New \n Project\n.\n\n\nIn the templates section, select \nC/C++ \n Arduino-Boards for (Arduino Due/X - ATSAM3X8E)\n.\n\n\nEnter a name and select a location.\n\n\nLocate the project in the \nSolution Explorer\n tab \n(tabs located along the bottom of the left pane).\n\n\nRight-click the project and select \nProperties\n.\n\n\nOn the \nBuild\n tab, select the \nUse External Makefile\n check box.\n\n\nClick \nBrowse\n and navigate to the Makefile in the ATL source directory.\n\n\nSelect the \nTool\n tab and do the following:\n\n\nSelect \nJ-Link\n for the \nSelected debugger/programmer\n. \n   (The j-link device's serial number is specified next to this option.)\n\n\nSelect \nJTAG\n for the \nInterface\n.\n\n\nTo test the build, right-click on the project and select \nBuild\n.\n\n\nTo test the clean, right-click on the project and select \nClean\n.\n\n\n\n\nFlash firmware to Arduino\n\n\n\n\nSet up the J-Link interface:\n\n\nSelect \nTools \n Device Programming\n.\n\n\nSelect \nJ-Link\n for the \nTool\n.\n\n\nSelect \nATSAM3X8E\n for the \nDevice\n.\n\n\nSelect \nJTAG\n for the \nInterface\n.\n\n\nClick \nApply\n.\n\n\nSelect the \nMemories\n tab.\n\n\nDo the following in the Flash section:\n\n\nClick \nBrowse\n and navigate to the desired application \n   (.elf) to upload the target device.\n\n\nClick \nProgram\n.\n\n\nClick \nClose\n.\n\n\n\n\nDebug the Atmel IDE\n\n\nThe makefile will build several target applications with a .elf extension\n\n\n\n\nIn the Solution Explorer pane, right-click the project node.\n\n\nRename it to the application that is going to be loaded.\n\n\n\n\nSetting up the Eclipse IDE\n\n\nComplete the procedures in this section using Eclipse.\n\n\nInitial setup\n\n\nNOTE:\n Do not run any setup functions in the background while \nperforming the steps below as this may fail to load some required libraries.\n\n\nInstall the GNU ARM compiler and J-Link debugging\n\n\n\n\nSelect \nHelp \n Install New Software\n.\n\n\nDo the following:\n\n\nType the following URL in the \nWork with Edit\n box: \n   http://gnuarmeclipse.sourceforge.net/updates\n\n\nClick \nAdd\n.\n\n\nClick \nOK\n in the pop-up dialog box.\n   Once the updates have been sourced from the website, \n   the center pane will be populated.\n\n\nClick \nSelect all\n and then click \nNext\n at the bottom of the dialog box.\n\n\nClick \nNext\n again to follow the prompts to accept \nlicense agreements. Acknowledge and security warnings if prompted.\n\n\nAfter the software updates have been completed, click \nYes\n \nto restart the Eclipse IDE.\n\n\n\n\nConfigure a project in Eclipse\n\n\n\n\nCreate a new project by selecting \nFile \n New \n Makefile \nProject with Existing Code\n.\n\n\nEnter a name for your project.\n\n\nIn \nExisting Code Location\n, click \nBrowse\n and navigate \nto the /ajtcl folder. You can close the Welcome screen in order \nto view the Project Explorer.\n\n\nIn the Project Explorer, right-click on the new project and click \nProperties\n.\n\n\nDo the following:\n\n\nSelect \nC/C++ Build\n in the left pane.\n\n\nOn the \nBuilder Settings\n tab, unselect the \nUse default \n   build command\n check box.\n\n\nDo the following for Windows 7:\n\n\nIn \nBuild command\n, enter \"C:\\Python27\\Scripts\\scons.bat\".\n\n\nSelect the \nBehavior\n tab.\n\n\nDo the following:\n\n\nNext to \nBuild (Incremental build)\n, update the \n  entry field with \"TARG=bsp AJWSL=due VARIANT=debug WS=off\".\n\n\nNext to \nClean\n, update the entry field with \n  \"TARG=bsp AJWSL=due VARIANT=debug WS=off -c\".\n\n\n\n\n\n\nClick \nApply\n and click \nOK\n.\n\n\nDo the following for Linux (Ubuntu):\n\n\nIn \nBuild command\n, enter scons.\n\n\nSelect the \nBehavior\n tab.\n\n\nDo the following:\n\n\nNext to \nBuild (Incremental build)\n, update the \n  entry field with \"TARG=bsp AJWSL=due VARIANT=debug WS=off\".\n\n\nNext to \nClean\n, update the entry field \n  with \"TARG=bsp AJWSL=due VARIANT=debug WS=off\".\n\n\n\n\n\n\nClick \nApply\n and then click \nOK\n.\n\n\nValidate the IDE can compile the project by either \nclicking the hammer icon on the ribbon bar or entering Ctrl-B.\n\n\n\n\nNOTE:\n After the project has completed compilation, all \navailable applications (*.elf) are available to flash and debug.\n\n\nFlash and debug\n\n\n\n\nSet up the j-link interface by selecting \nRun \n Debug Configurations\n.\n\n\nIn the left pane, right-click \nGDB SEGGER J-Link Debugging\n and click \nNew\n.\n\n\nDo the following on the \nMain\n tab:\n\n\nClick \nBrowse\n under the \nC/C++ Application\n field entry.\n\n\nNavigate to the .elf file (target application) required \n   for flashing and debugging.\n\n\nUnder the Project location, click \nBrowse\n and navigate \nto the current project folder.\n\n\nSelect the current project folder and click \nOK\n.\n\n\nSelect the \nDebugger\n tab.\n\n\nTo the right of \nExecutables\n, click \nVariables\n.\n\n\nClick \nEdit Variables\n.\n\n\nClick \nNew\n to create a new variable.\n\n\nIn \nName\n, type jlink_path.\n\n\nDo one of the following in the \nValue\n field:\n\n\nFor Windows, enter C:\\Program Files (x86)\\SEGGER\\JLinkARM_V480a.\n\n\nFor Linux, enter /usr/bin.\n\n\nClick \nOK\n.\n\n\nDo the following on the \nDebugger\n tab:\n\n\nMake sure the \nExecutable\n field path is: \n   ${jlink_path}/JLinkGDBServer${build_files}.\n\n\nIn \nDevice name\n, enter ATSAM3X8E.\n\n\nIn the \nGDB Client Setup\n section, navigate to the \n   executable file arm-none-eabi-gdb.exe.\n\n\nIn Windows, it may be located in C:\\Program Files (x86)\\GNU Tools ARM Embedded\\4.8 2013q4\\bin.\n\n\nIn Linux, it should be in \\usr\\bin.\n\n\nClick \nApply and Debug\n to start the debugging session.",
            "title": "Arduino and gt202"
        },
        {
            "location": "/develop/tutorial/arduino-and-gt202/#arduino-gt202",
            "text": "The AllJoyn  Thin Core Library includes a Wi-Fi driver for the GT202 Wi-Fi board,\nknown as WSL. This document explains how to setup the hardware and software\nto run AllJoyn Thin Apps on an Arduino Due running FreeRTOS, including the WSL\nWi-Fi driver, that connects to a GT202 Wi-Fi board over SPI.",
            "title": "Arduino + GT202"
        },
        {
            "location": "/develop/tutorial/arduino-and-gt202/#hardware-requirements",
            "text": "The following hardware devices are needed in order to test and \nevaluate the project as stated in this document.   Arduino Due  TransmogriShield  GT202 kit  Segger J-link JTAG or equivalent  Segger ARM-JTAG 10-pin to 20-pin adapter   The following figures identify the connections between the \nArduino Due, TransmogriShield, and GT202 kit.   Align the female SPI connection of the TransmogriShield \nwith the male SPI connection of the Arduino Due as shown in the following figure.  Connect the male pins on the bottom of the GT202 kit to the \nfemale connectors on the Shield side of the TransmogriShield \nboard as shown in the GT202 pinout diagram.    Figure:  Arduino Due board connections   Figure:  GT202 kit pinout",
            "title": "Hardware Requirements"
        },
        {
            "location": "/develop/tutorial/arduino-and-gt202/#installing-third-party-software",
            "text": "Windows 7  Windows 7 third-party software and installation information     Tool  Minimum version requirement  Installer/Notes      ARM GNU Tool Chain  4.8 2013q4  Download the  installer  and execute. Windows will install the ARM GNU Tool Chain in (C:\\Program Files (x86)\\GNU Tools ARM Embedded\\4.8 2013q4\\bin) which may be used for an environmental variable.    FreeRTOS  7.6.0  Download the  ZIP file  and unzip to the local drive. Note the path where the FreeRTOS ZIP file is extracted as it may be used in an environment variable.    Atmel Software Framework  3.15  Download the  ZIP file  and unzip to local drive. Note the path where the framework ZIP file is extracted as it may be used in an environment variable. This requires providing contact information to receive a link to the software.    J-Link software  4.8.4a  Download the  software and documentation  and install. You must enter the serial number of the j-link device to complete the download./p    Eclipse IDE  Release 2  Download the  appropriate Windows bit version . Uncompress the file folder to the local drive. If JRE (Java Runtime Environment) or JDK (Java Development Kit) has previously been installed, skip installing JRE (noted below).    Java Runtime Environment (required for Eclipse)   Download and install  JRE .    Atmel Studio IDE  6.1  Download the  installer (full)  and install. NOTE:  The installation requires the PC to restart.    Python  2.7.3  Python 2.6 may also be used. Use the 32-bit version of Python even if you are building the AllJoyn framework for a 64-bit architecture. Open a browser and navigate to http://www.python.org/download/. From the Python web page, select Python 2.7.3 Windows Installer (32-bit). Click  Run  and  Run  again. The Python setup wizard appears. Click  Finish ,  Yes , and  Finish  again.    SCons  2.3.0  Open a browser and navigate to http://www.scons.org. From the SCons web page, under 'Scons 2.3.0.final.0 is available', click the download page. Select scons-2.3.0.final.0.win32.exe, and click  Run  and  Run  again. The setup wizard appears. Proceed through the wizard steps to complete the SCons installation.     Linux (Ubuntu 12.04)     Tool  Minimum version requirement  Installer/Notes      ARM GNU Tool Chain  4.8 2013q4  Open terminal and input  sudo add-apt-repository ppa:terry.guo/gcc-arm-embedded Press  Enter  to continue when prompted. Input  sudo apt-get update Input  sudo apt-get install gcc-arm-none-eabi    FreeRTOS  7.6.0  Download the  ZIP file  and unzip to the local drive. Note the path where the ZIP file is extracted as it may be used in an environment variable.    Atmel Software Framework  3.15  Download the  ZIP file  and unzip to the local drive. Note the path where the ZIP file is extracted as it may be used in an environment variable. This requires providing contact information to receive a link to the software.    J-Link software  4.84a  Download the  software and documentation  and install DEB, RPM or TGZ format. You must enter the serial number of the j-link device to complete the download.    Eclipse IDE  Release 2  Download the  appropriate Linux version . Uncompress the file folder to the local drive. If JRE (Java Runtime Environment) or JDK (Java Development Kit) has previously been installed, skip installing JRE (noted below).    Java Runtime Environment (required for Eclipse)   Open terminal and input  sudo apt-get install openjdk-7-jre    Atmel Studio IDE  6.1  Download  installer (full)  and install. NOTE:  The installation may require the PC to restart.    SCons  2.3.0  Open terminal and input  sudo apt-get install scons",
            "title": "Installing Third-Party Software"
        },
        {
            "location": "/develop/tutorial/arduino-and-gt202/#configuring-the-project-environment",
            "text": "Get TCL for Arduino Due   Create a project folder.  Clone the ajtcl repo.  Check out the master branch.\n    sh\n   git clone https://git.allseenalliance.org/gerrit/core/ajtcl.git   The directory structure follows. Items marked with ** used in \ncompilation and contain objects files.  **ajtcl (root folder)\n   **bsp (Board-specific package)\n      **due (Arduino Due target platform files) \n         config\n   **crypto (Encryption) \n      ecc\n   external\n      **sha2 \n   inc\n   java\n      ecompass\n         .settings \n         src\n            org\n               alljoyn\n                  bus\n                     samples\n   **malloc (Memory allocation)\n   **RTOS (Real Time Operating System)\n      **FreeRTOS (RTOS used for Arduino Due)\n   Samples\n      basic\n      network\n      secure\n   **src (TCL source files) \n   target\n      arduino\n         examples\n            AJ_LedServices \n         samples\n            AJ_basic_client \n            AJ_basic_service \n            AJ_nameChange_client \n            AJ_SecureClient \n            AJ_SecureService\n            AJ_signal_service \n            AJ_signalConsumer_client\n         tests\n            AJ_aetest \n            AJ_bastress2 \n            AJ_clientlite \n            AJ_mutter \n            AJ_sessions \n            AJ_siglite \n            AJ_svclite\n      linux\n      win32\n   **test (test applications .elf)\n      **WSL (unit and API applications .elf) \n   tools\n   unit_test\n      test_report\n   **WSL (APIs used for SPI with GT202)  Set up environment variables  NOTE:  These variables can be passed into SCons without setting \nenvironmental variables.  Windows 7   Right-click  My Computer  and select  Properties   Advanced system settings .  Click  Environment Variables  on the  Advanced  tab.  Do the following to create a new system environment variable.  Click  New  in the System variables section.  In  Variable , type FREE_RTOS_DIR.  In  Variable value , specify the name where the \n   FREERTOS ZIP file was extracted. \n   Example: \"C:\\FREERTOSv7.6.0\\FREERTOS\"  Click  OK .  Click  New  to add another system environment variable.  In  Variable , type ATMEL_DIR.  In  Variable name , specify the path where the \n   Atmel asf-standalone-archive ZIP file was extracted.\n   Example: \"C:\\xdk-asf-3.15.0\"  Click  OK .  Click  New  to add another system environment variable.  In  Variable , type ARM_TOOLCHAIN_DIR.  In  Variable value , specify the installation path \n   of the GNU ARM Toolchain. \n   Example: \"C:\\Program Files (x86)\\GNU Tools ARM Embedded\\4.8 2013q4\\bin\"  Click  OK .  Scroll through the user variables list and highlight  PATH .  Click  Edit .  In  Variable value , add the installation path of the \nPython tool: \"C:\\Python27; C:\\Python27\\Scripts\"  Click  OK  several times to save your changes.   Linux Ubuntu (12.04)  The instructions below are based on calling the Eclipse \nfrom Terminal. Other calling methods for Eclipse will \nrequire declaring the environmental variables in a different location.   Open terminal and edit .bashrc;.  Add an export variable \"FREE_RTOS_DIR\" with the location \nof the FreeRTOS folder. \n   Example: \"export RTOS_DIR=~/FreeRTOSV7.6.0/FreeRTOS\"  Add an export variable \"ATMEL_DIR\" with the location \nof the Atmel asf-standalone-archive.\n   Example \"export ATMEL_DIR=~/ xdk-asf-3.15.0\"  Add an export variable \"ARM_TOOLCHAIN_DIR\" with the \nlocation of the GNU ARM Toolchain.\n   Example \"export ARM_TOOLCHAIN_DIR=/usr/bin\"  Do the following to verify environmental variables:  Open terminal and navigate to the ajtcl directory.  Enter \"scons -h\".\n   The environmental paths found by the SCons script will be displayed.   NOTE:  The default will mirror actual since there are no default \nvalues set in the script.  Configure the build file  Complete the following procedure to edit the FreeRTOSConfig.h.   Navigate to the FreeRTOSConfig.h file, located in \n%ATMEL_DIR%/thirdparty/freertos-7.3.0/module_config.  On approximately line 71, update the configCPU_CLOCK_HZ macro: \nReplace the sysclk_get_cpu_hz() function with 84000000UL.  Add the following macros:   c\n   #define vPortSVCHandler SVC_Handler\n   #define xPortPendSVHandler PendSV_Handler\n   #define xPortSysTickHandler SysTick_Handler  Building with SCons    For Release variant:\n  The build command is \"scons TARG=bsp AJWSL=due VARIANT=release WS=off\".    For the Debug variant:   The build command is \"scons TARG=bsp AJWSL=due VARIANT=debug WS=off\".  To clean the object files, add a \"-c\" at the end of the \n  command. Example: \"scons TARG=bsp AJWSL=due VARIANT=debug WS=off -c\"",
            "title": "Configuring the Project Environment"
        },
        {
            "location": "/develop/tutorial/arduino-and-gt202/#configuring-the-ides",
            "text": "Setting up the Atmel IDE  Initial setup   Create a new project by selecting  File   New   Project .  In the templates section, select  C/C++   Arduino-Boards for (Arduino Due/X - ATSAM3X8E) .  Enter a name and select a location.  Locate the project in the  Solution Explorer  tab \n(tabs located along the bottom of the left pane).  Right-click the project and select  Properties .  On the  Build  tab, select the  Use External Makefile  check box.  Click  Browse  and navigate to the Makefile in the ATL source directory.  Select the  Tool  tab and do the following:  Select  J-Link  for the  Selected debugger/programmer . \n   (The j-link device's serial number is specified next to this option.)  Select  JTAG  for the  Interface .  To test the build, right-click on the project and select  Build .  To test the clean, right-click on the project and select  Clean .   Flash firmware to Arduino   Set up the J-Link interface:  Select  Tools   Device Programming .  Select  J-Link  for the  Tool .  Select  ATSAM3X8E  for the  Device .  Select  JTAG  for the  Interface .  Click  Apply .  Select the  Memories  tab.  Do the following in the Flash section:  Click  Browse  and navigate to the desired application \n   (.elf) to upload the target device.  Click  Program .  Click  Close .   Debug the Atmel IDE  The makefile will build several target applications with a .elf extension   In the Solution Explorer pane, right-click the project node.  Rename it to the application that is going to be loaded.   Setting up the Eclipse IDE  Complete the procedures in this section using Eclipse.  Initial setup  NOTE:  Do not run any setup functions in the background while \nperforming the steps below as this may fail to load some required libraries.  Install the GNU ARM compiler and J-Link debugging   Select  Help   Install New Software .  Do the following:  Type the following URL in the  Work with Edit  box: \n   http://gnuarmeclipse.sourceforge.net/updates  Click  Add .  Click  OK  in the pop-up dialog box.\n   Once the updates have been sourced from the website, \n   the center pane will be populated.  Click  Select all  and then click  Next  at the bottom of the dialog box.  Click  Next  again to follow the prompts to accept \nlicense agreements. Acknowledge and security warnings if prompted.  After the software updates have been completed, click  Yes  \nto restart the Eclipse IDE.   Configure a project in Eclipse   Create a new project by selecting  File   New   Makefile \nProject with Existing Code .  Enter a name for your project.  In  Existing Code Location , click  Browse  and navigate \nto the /ajtcl folder. You can close the Welcome screen in order \nto view the Project Explorer.  In the Project Explorer, right-click on the new project and click  Properties .  Do the following:  Select  C/C++ Build  in the left pane.  On the  Builder Settings  tab, unselect the  Use default \n   build command  check box.  Do the following for Windows 7:  In  Build command , enter \"C:\\Python27\\Scripts\\scons.bat\".  Select the  Behavior  tab.  Do the following:  Next to  Build (Incremental build) , update the \n  entry field with \"TARG=bsp AJWSL=due VARIANT=debug WS=off\".  Next to  Clean , update the entry field with \n  \"TARG=bsp AJWSL=due VARIANT=debug WS=off -c\".    Click  Apply  and click  OK .  Do the following for Linux (Ubuntu):  In  Build command , enter scons.  Select the  Behavior  tab.  Do the following:  Next to  Build (Incremental build) , update the \n  entry field with \"TARG=bsp AJWSL=due VARIANT=debug WS=off\".  Next to  Clean , update the entry field \n  with \"TARG=bsp AJWSL=due VARIANT=debug WS=off\".    Click  Apply  and then click  OK .  Validate the IDE can compile the project by either \nclicking the hammer icon on the ribbon bar or entering Ctrl-B.   NOTE:  After the project has completed compilation, all \navailable applications (*.elf) are available to flash and debug.  Flash and debug   Set up the j-link interface by selecting  Run   Debug Configurations .  In the left pane, right-click  GDB SEGGER J-Link Debugging  and click  New .  Do the following on the  Main  tab:  Click  Browse  under the  C/C++ Application  field entry.  Navigate to the .elf file (target application) required \n   for flashing and debugging.  Under the Project location, click  Browse  and navigate \nto the current project folder.  Select the current project folder and click  OK .  Select the  Debugger  tab.  To the right of  Executables , click  Variables .  Click  Edit Variables .  Click  New  to create a new variable.  In  Name , type jlink_path.  Do one of the following in the  Value  field:  For Windows, enter C:\\Program Files (x86)\\SEGGER\\JLinkARM_V480a.  For Linux, enter /usr/bin.  Click  OK .  Do the following on the  Debugger  tab:  Make sure the  Executable  field path is: \n   ${jlink_path}/JLinkGDBServer${build_files}.  In  Device name , enter ATSAM3X8E.  In the  GDB Client Setup  section, navigate to the \n   executable file arm-none-eabi-gdb.exe.  In Windows, it may be located in C:\\Program Files (x86)\\GNU Tools ARM Embedded\\4.8 2013q4\\bin.  In Linux, it should be in \\usr\\bin.  Click  Apply and Debug  to start the debugging session.",
            "title": "Configuring the IDEs"
        },
        {
            "location": "/develop/tutorial/",
            "text": "Tutorial\n\n\nCongratulations on wanting to learn more about the AllJoyn\n framework and how to write applications. Below are some tutorials to help you get started.\n\n\n\n\nCore Tutorial\n\n\niOS Tutorial\n\n\nThin App Tutorial\n\n\nArduino + GT202\n\n\nVideo Tutorials",
            "title": "Home"
        },
        {
            "location": "/develop/tutorial/#tutorial",
            "text": "Congratulations on wanting to learn more about the AllJoyn  framework and how to write applications. Below are some tutorials to help you get started.   Core Tutorial  iOS Tutorial  Thin App Tutorial  Arduino + GT202  Video Tutorials",
            "title": "Tutorial"
        },
        {
            "location": "/develop/tutorial/ios/",
            "text": "iOS Tutorial\n\n\nOverview\n\n\nThis content looks at the BasicService and BasicClient\nsample in the SDK. This is a simple demonstration wherein\nthe client sends two strings to the service, the service\nconcatenates the strings sent by the client and returns a single string.\n\n\nComponents Used to Write a Sample\n\n\nThe AllJoyn\n Objective-C bindings are based on the fact that\nany AllJoyn Objective C-code that you write will hit the native AllJoyn library.\n\n\nWhen you download the AllJoyn SDK for iOS and OS X,\nthe typical structure of the SDK and its components is followed:\n\n\n\n\nbuild\n\n\nalljoyn_objc\n\n\nservices\n\n\nLICENSE\n\n\nREADME.txt\n\n\nREADME.md\n\n\nReleaseNotes.txt\n\n\n\n\nThe following sections define each one of these directories and their role.\n\n\nbuild directory\n\n\nIf you were to build the AllJoyn source for Darwin (iOS/OS X)\nby issuing a SCons command, the build directory is the build\noutput. The following directories are located under build:\n\n\n\n\nabout-docs\n\n\ndarwin\n\n\ndocs\n\n\n\n\nabout-docs and docs directories\n\n\nThe about-docs and docs directories contain the API documentation\nfor the native library (C++) of the AllJoyn framework and the About feature.\n\n\ndarwin directory\n\n\nUnder the darwin directory you will find four folders: arm, armv7, armv7s and x86.\n\n\narm armv7 and armv7s directories\n\n\nThe arm folders contain the native libraries and header files\nfor running the AllJoyn code over the corresponding versions of iOS devices.\n\n\nalljoyn_objc directory\n\n\nThe alljoyn_objc directory contains most of the things relevant\nto an iOS developer. The following sections define each item.\n\n\nAllJoynCodeGenerator\n\n\nThe code generator tool is the best way to get started generating\nthe glue code that makes calls inside the native AllJoyn library.\n\n\nAllJoynFramework\n\n\nAllJoynFramework is the actual binding code that contains the\nimplementation of the publicly exposed Objective-C bindings.\n\n\nAllJoynFramework_iOS\n\n\nAllJoynFramework_iOS is the actual binding code like the\nAllJoyn framework, but is more specific to iOS devices.\n\n\nsamples directory\n\n\nThe samples directory contains both iOS and OS X samples that\ngive you ideas for using the AllJoyn Objective-C bindings.\n\n\nTest directory\n\n\nThe Test directory contains a few tests that can be used\nto test the AllJoyn SDK.\n\n\nOverview of files in the samples\n\n\nThe following section is common to both BasicService and BasicClient.\n\n\nWe first need to understand a few of the common files that\nare a part of the sample code. Not all files in an AllJoyn\niOS sample need to be written from scratch. We have a code\ngenerator tool, which generates much of the glue code and\nyou end up writing very little actual AllJoyn code.\nTo create an AllJoyn Objective-C sample from scratch,\nthe best place to start is the \nAllJoyn Programming Guide for the Objective-C Language\n.\nThis document shows you how to make use of the code generator\nto define the interface and in turn generate glue code that\nmakes a call in the native AllJoyn library. You do not have\nto make calls in the native library yourself.\n\n\nIf we use the code generator for BasicService and BasicClient,\nthe code generated would be four files:\n\n\n\n\n\n\n\n\nFile name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBasicObject.h\n\n\nThis file shows you the interface implemented by the BusObject that you defined using the xml as input to the code generator.\n\n\n\n\n\n\nBasicObject.m\n\n\nThis file has the Objective-C implementation of the BasicObject.\n\n\n\n\n\n\nAJNBasicObject.h\n\n\nThe Objective-C implementation of a bus object needs to map to a C++ implementation that calls in the native AllJoyn library. The code gen tool does this for you and produces the header and source files for this mapping. You need not write the C++ code or bother about how is it done.\n\n\n\n\n\n\nAJNBasicObject.mm\n\n\nThis file contains the implementation of C++ BusObject. In the sample, the C++ BusObject is called BasicObjectImpl.\n\n\n\n\n\n\n\n\nThere are other files in the sample as listed below:\n\n\n\n\nViewController.h\n: This is the View Controller header file\nof this application.\n\n\nViewController.mm\n: This contains the implementation of\nthe View Controller for this application.\n\n\n\n\nWalkthrough of BasicService\n\n\nDevelopers who are not familiar with app development for the\niOS platform can refer to the Apple developer documentation,\nwhich has a set of rich tutorials to understand how a typical\niOS app is structured. For ease of understanding, if you are new\nto iOS development, an iOS app is structured based on MVC architecture,\nwhich means that you will have the following:\n\n\n\n\nA \nView\n, which is your UI and since we use Xcode,\nthis corresponds to Storyboard.\n\n\nA \nController\n, which is your \nViewController.h\n and \nViewController.mm\n\nin the case of our BasicService and BasicClient sample\n\n\nA \nModel\n, which are \nBasicService.h\n and \nBasicService.mm\n\nin the case of BasicService and \nBasicClient.h\n; and \nBasicClient.mm\n\nin the case of BasicClient\n\n\n\n\nLet us look at it from the perspective of how an app is\nloaded and what parts of the source code are called and what do they mean\n\n\nWhen the BasicService app loads up, the viewDidLoad function in ViewController.mm\nis called:\n\n\nCode 1\n\n\n- (void)viewDidLoad\n{\n   [super viewDidLoad];\nself.basicService = [[BasicService alloc] init];\n   self.basicService.delegate = self;\n   [self.basicService startService];\n}\n\n\n\n\nHere, we instantiate BasicService which is the model and\nthen send a message to \nstartService\n.\n\n\nBefore going further, it might be good to look at what is\ninside BasicService.h since we are calling a method of \nBasicService\n.\n\n\nCode 2\n\n\nBasicService.h\n@protocol BasicServiceDelegate \nNSObject\n\n- (void)didReceiveStatusUpdateMessage:(NSString *)message;\n@end\n@interface BasicService : NSObject\n@property (strong, nonatomic) id\nBasicServiceDelegate\n delegate;\n- (void)startService;\n@end\n\n\n\n\nThe first thing we notice is a \n@protocol\n called \nBasicServiceDelegate\n\nwith a method \ndidReceiveStatusUpdateMessage\n. This is in place\nso that the model can send a message to the view controller.\nThe protocol tells the model that the view controller will\nhave this method implemented.\n\n\nThe second thing is the interface \nBasicService\n which has a property\n\nid\nBasicServiceDelegate\n delegate.\n\n\nThe \nViewController\n sets itself as the delegate inside\n\nViewController.m\n so that the model, \nBasicService\n, can\nsend a message to the method \ndidReceiveStatusUpdateMessage\n\nof \nViewController\n using the delegate property.\n\n\nThis is a common way for a model to call a method of a\n\nViewController\n in iOS. Now we turn back our attention to\n\nstartService\n in \nBasicService\n.\n\n\nCode 3\n\n\n- (void)startService\n{\n   dispatch_queue_t serviceQueue = dispatch_queue_create\n(\norg.alljoyn.basic-service.serviceQueue\n, NULL);\n   dispatch_async( serviceQueue, ^{\n      [self run];\n   });\n}\n\n\n\n\nHere we create a dispatch queue called \"org.alljoyn.basic-service.serviceQueue\"\nand call the method \nrun\n. Now let us look at the method \nrun\n.\n\n\nCode 4\n\n\n[self.delegate didReceiveStatusUpdateMessage:[NSString\nstringWithFormat:@\nAllJoyn Library version: %@\\n\n,\n[AJNVersion versionInformation]]];\n\n[self.delegate didReceiveStatusUpdateMessage:[NSString\nstringWithFormat:@\nAllJoyn Library build info: %@\\n\n,\n[AJNVersion buildInformation]]];\n\n\n\n\nThe first few lines of this method print out debugging\ninformation. There are two calls that are interesting.\n\n\nNotice we call \ndidReceiveStatusUpdateMessage\n using the\ndelegate that we had declared in \nCode 3\n.\nThis updates the text view of the app with the message\nparameters that we send it. In the two calls above, we send\nthe AllJoyn library version and a build info string.\n\n\nNext, we create a BusAttachment and assign it to the\nproperty named \nbus\n, which we declared in \nBasicService.h file\n.\nSee \nCode 5\n.\n\n\nCode 5\n\n\nself.bus = [[AJNBusAttachment alloc] initWithApplicationName:@\nBasicService\n\nallowRemoteMessages:YES];\n\n\n\n\nWe then have a condition lock, which is in place so that only\nthread executes the code that follows. We do not want to have\nmultiple threads trying to do AllJoyn things at the same time\nfor this sample.\n\n\nCode 6\n\n\nself.lostSessionCondition = [[NSCondition alloc] init];\n[self.lostSessionCondition lock];\n\n\n\n\nWe then register the bus listener, which essentially has\ncallbacks that indicate if we found an advertised name,\nlost a session, or a name owner changed condition\n\n\nCode 7\n\n\n[self.bus registerBusListener:self];\n\n\n\n\nThe code gen tool produces the implementation stub of\nBus Object which we can now instantiate in our Service code\nwith the line in \nCode 8\n:\n\n\nCode 8\n\n\nself.basicObject = [[BasicObject alloc] initWithBusAttachment:self.bus\nonPath:kBasicServicePath];\n\n\n\n\nAfter we have instantiated the Bus Object, we start the bus:\n\n\nCode 9\n\n\nstatus = [self.bus start];\nif (ER_OK != status) {\n      [self.delegate didReceiveStatusUpdateMessage:@\nBusAttachment::Start\n   failed\\n\n];\n   NSLog(@\nBus start failed.\n);\n}\n\n\n\n\nWe need to register the bus object that we had instantiated\nabove. We do so by calling \nCode 10\n:\n\n\nCode 10\n\n\nstatus = [self.bus registerBusObject:self.basicObject];\nif (ER_OK != status) {\nNSLog(@\nERROR: Could not register bus object\n);\n}\n\n\n\n\nWe started the bus and now need to connect to it, which is done\nby calling the \nconnectWithArguements\n method. The arguments passed\nto this method is a string \"null:\" which indicates the we connect\nto the \"null\" transport. In the context of the AllJoyn framework,\nthis means we are connecting to the AllJoyn router which is a\npart of this app. Some operating systems have the ability to\nrun a separate AllJoyn standalone router process, which the\napp can connect to. Running a separate process is not possible\nin iOS and not beneficial in many ways. We will leave that\ndiscussion here since we are focusing on the sample.\n\n\nCode 11\n\n\nstatus = [self.bus connectWithArguments:@\nnull:\n];\nif (ER_OK != status) {\n   NSLog(@\nBus connect failed.\n);\n   [self.delegate didReceiveStatusUpdateMessage:@\nFailed to connect to null:\ntransport\n];\n}\n\n\n\n\nFor an AllJoyn service we typically request a well-known name,\nbind a session port to that well known name, and then advertise\nthat name so that others who are interested in talking to the\nservice find it and join our session.\n\n\nWe do these three things with the lines of code shown in \nCode 12\n,\n\nCode 13\n, \nCode 14\n, and \nCode 15\n.\n\n\nCode 12\n\n\nstatus = [self.bus requestWellKnownName:kBasicServiceName\nwithFlags:kAJNBusNameFlagReplaceExisting | kAJNBusNameFlagDoNotQueue];\nif (ER_OK != status) {\n   NSLog(@\nERROR: Request for name failed (%@)\n, kBasicServiceName);\n}\n\n\n\n\nThe parameter \nkBasicServiceName\n is the name that we request\nfrom our bus. The name may or may not be available and also\ndepends on the flags that you pass in to the specifier \nwithFlags\n:\n\n\nIn the case of this sample, we pass \nkAJNBusNameFlagReplaceExisting | kAJNBusNameFlagDoNotQueue\n\nwhich tells the bus to replace the existing owner of the name\nwith this service instance and if the name is already taken by\nsomeone do not queue this service waiting for the name to be released.\n\n\nCode 13\n\n\n//\n// bind a session to a service port\n//\n   AJNSessionOptions *sessionOptions = [[AJNSessionOptions alloc]\ninitWithTrafficType:kAJNTrafficMessages supportsMultipoint:YES\nproximity:kAJNProximityAny transportMask:kAJNTransportMaskAny];\n\n\n\n\nBefore calling \nbindSessionPort\n, we need to specify certain\nthings about the session, for example:\n\n\n\n\nWhat kind of traffic would this session be supporting?\n\n\nWould it be a single point or a multipoint session?\n\n\nOver which transports would this session be available?\n\n\n\n\nThese things are specified by using \nAJNSessionOptions\n as shown in \nCode 13\n,\nwhich we pass in to the call to \nbindSesssionOnPort: withOptions: withDelegate:\n\nas shown in \nCode 14\n.\n\n\nCode 14\n\n\n   status = [self.bus bindSessionOnPort:kBasicServicePort\nwithOptions:sessionOptions withDelegate:self];\n   if (ER_OK != status) {\n      NSLog(@\nERROR: Could not bind session on port (%d)\n, kBasicServicePort);\n   }\n\n\n\n\nNext, once we have bound a session to a port we advertise the\nname so that peers, \nBasicClient\n in our case, can find the well-known\nname and join this session. While advertising the name we specify\nthe well-known name and the transport over which we want this\nname to be advertised.\n\n\nCode 15\n\n\n// advertise a name\n//\nstatus = [self.bus advertiseName:kBasicServiceName withTransportMask:kAJNTransportMaskAny];\nif (ER_OK != status) {\nNSLog(@\nCould not advertise (%@)\n, kBasicServiceName);\n}\n\n\n\n\nAfter we are done advertising the name we wait for the clients\nto connect to us. In our sample, we specify the time to wait\nbefore cleaning up as 60 seconds . The \nlostSession\n condition waits\nuntil it gets a signal, which is sent to it when the session\nis lost. You see the signal being sent to this condition inside\nof the \nsessionWasLost:\n callback which is a part of the \nAJNSessionListener\n interface.\n\n\nCode 16\n\n\n// wait until the client leaves before tearing down the service\n// [self.lostSessionCondition waitUntilDate:[NSDate\ndateWithTimeIntervalSinceNow:60]];\n\n\n\n\nIn the end, we perform cleanup by unregistering the bus object,\nreleasing the lock on the condition property and deallocating\nthe bus property by setting it to \nnil\n.\n\n\nCode 17\n\n\n[self.bus unregisterBusObject:self.basicObject];\n[self.lostSessionCondition unlock];\nself.bus = nil;\n\n\n\n\nWe have a several callback methods that are a part of three\ndifferent listeners. A brief description of each one grouped\nby listener category is mentioned in the sections that follow.\n\n\nAJNBusListener methods\n\n\nCode 18\n\n\n(void)listenerDidRegisterWithBus:(AJNBusAttachment*)busAttachment\n\n\n\n\nThis is invoked when \nregisterBusListener\n is completed\nsuccessfully and the bus notifies the application about it.\n\n\nCode 19\n\n\n(void)listenerDidUnregisterWithBus:(AJNBusAttachment*)busAttachment\n\n\n\n\nThis is invoked when the \nBusListener\n unregisters from the bus.\n\n\nCode 20\n\n\n(void)nameOwnerChanged:(NSString*)name to:(NSString*)newOwner\nfrom:(NSString*)previousOwner\n\n\n\n\nThis is called when there is a change in the ownership of a name on the bus.\nThe name could be a unique name or a well-known name.\n\n\nCode 21\n\n\n(void)busWillStop\n\n\n\n\nThis is called when a \nBusAttachment\n, with which a listener\nis registered, is stopping.\n\n\nCode 22\n\n\n(void)busDidDisconnect\n\n\n\n\nThis is called when a \nBusAttachment\n, with which this listener\nis registered, has become disconnected from the bus.\n\n\nAJNSessionPortListener methods\n\n\nOnly the session host uses this category of listener since\nit will not have any effect on the client side.\n\n\nCode 23\n\n\n(BOOL)shouldAcceptSessionJoinerNamed:(NSString*)joiner\nonSessionPort:(AJNSessionPort)sessionPort\nwithSessionOptions:(AJNSessionOptions*)options\n\n\n\n\nThis is one of the most important callback functions that\nalmost every service will have. When a peer initiates a\njoin session for the session hosted by a service this callback\nis invoked so that the service may accept or reject the \njoin\n\nsession request initiated by the client. It gives us the unique\nname of the joiner who initiated the \njoin\n session request,\nthe port of the session used and the session options that\nthe client wishes to use for the life of this session.\n\n\nCode 24\n\n\n(void)didJoin:(NSString*)joiner inSessionWithId:(AJNSessionId)sessionId\nonSessionPort:(AJNSessionPort)sessionPort\n\n\n\n\nIf a service accepts a \njoin\n session request sent by a client,\nthe client joins the session and the service is notified about\nthe successful joining of the client through this callback.\nThis means that the session is fully up and running.\nIt indicates the unique name of the joiner, the session id\nthat it is a part of and the session port which was used\nfor joining the session.\n\n\nAJNSessionListener methods\n\n\nCode 25\n\n\n- (void)sessionWasLost:(AJNSessionId)sessionId\n\n\n\n\nThe bus invokes this callback when an existing session\nbecomes disconnected and is no longer valid.\n\n\nCode 26\n\n\n- (void)didAddMemberNamed:(NSString*)memberName\ntoSession:(AJNSessionId)sessionId\n\n\n\n\nThis callback indicates that a member with unique name \nmemberName\n\nwas added to the session with session id of the second argument.\n\n\nCode 27\n\n\n- (void)didRemoveMemberNamed:(NSString*)memberName\nfromSession:(AJNSessionId)sessionId\n\n\n\n\nThis callback indicates that a member with unique name\n\nmemberName\n is no longer a part of the session with\nsession id having value \nsessionId\n.\n\n\nThis ends the description of code found under BasicService.\n\n\nWalkthrough of BasicClient\n\n\nThe BasicClient app starts with a button being displayed,\nwhich says \"Call Service\". When the button is pressed,\nthe \ndidTouchCallServiceButton\n method is called.\n\n\nCode 28\n\n\n- (IBAction)didTouchCallServiceButton:(id)sender\n{\n   self.basicClient = [[BasicClient alloc] init];\n   self.basicClient.delegate = self; [self.basicClient sendHelloMessage];\n}\n\n\n\n\nHere, we instantiate \nBasicClient\n and call the \nsendHelloMessage\n method.\n\n\nBefore looking at the \nsendHelloMessage\n, it would be useful\nto understand what is inside the \nBasicClient.h\n file\n\n\nCode 29\n\n\n@protocol BasicClientDelegate \nNSObject\n\n- (void)didReceiveStatusUpdateMessage:(NSString *)message;\n@end\n@interface BasicClient : NSObject\n@property (nonatomic, weak) NSObject\nBasicClientDelegate\n *delegate;\n- (void)sendHelloMessage;\n@end\n\n\n\n\nThe first thing we notice is a @protocol called \nBasicCLientDelegate\n\nwith a method \ndidReceiveStatusUpdateMessage\n. This is in place\nso that the model can send a message to the view controller.\nThe protocol tells the model that the view controller will\nhave this method implemented.\n\n\nThe second thing is the interface \nBasicClient\n, which has a\nproperty \nid\nBasicClientDelegate\n delegate.\n\n\nThe \nViewController\n sets itself as the delegate inside\n\nViewController.m\n so that the model, \nBasicClient\n, can\nsend a message to the method \ndidReceiveStatusUpdateMessage\n\nof \nViewController\n using the delegate property.\n\n\nThis is a common way for a model to call a method of a\n\nViewController\n in iOS. Now we turn back our attention\nto \nsendHelloMessage\n in \nBasicClient\n.\n\n\nCode 30\n\n\n- (void)sendHelloMessage\n{\n   dispatch_queue_t clientQueue =\ndispatch_queue_create(\norg.alljoyn.basic-service.clientQueue\n,NULL);\n   dispatch_async( clientQueue, ^{ [self run];\n   });\n}\n\n\n\n\nThe \nsendHelloMessage\n creates a dispatch queue and then\ncalls the \nrun\n method from here.\n\n\nBefore we head in the \nrun\n method, let's look at a few properties\nthat are defined inside of \nBasicClient\n.\n\n\n\n\n@property (nonatomic, strong ) AJNBusAttachment *bus\n\n\n\n\nRepresents the bus attachment we use in the client code.\n\n\n\n\n@property ( nonatomic, strong) NSCondition *joinedSessionCondition\n\n\n\n\nNSCondition used to signal that we have joined a session\n  after finding an advertised name.\n\n\n\n\n@property (nonatomic) AJNSessionId sessionId\n\n\n\n\nUsed to hold the session id of the session that the client\n  would become a part of.\n\n\n\n\n@property ( nonatomic, strong) NSString *foundServiceName\n\n\n\n\nUsed to hold the well-known name of the service it found\n  when it was looking for an advertised name.\n\n\n\n\n@property (nonatomic, strong) BasicObjectProxy *basicObjectProxy\n\n\n\n\nIt is the proxy bus object, which will represent the bus\n  object of Basic service.\n\n\n\n\n@property BOOL wasNameAlreadyFound\n\n\n\n\nUsed to indicate if the name we are looking for was already found.\n\n\nNow let us look at the run function. The first few lines are\ndebugging information printing out the AllJoyn library version\nthe build info string by calling the method \ndidReceiveStatusUpdateMessage\n\nthat the \nViewController\n should have implemented.\n\n\nCode 31\n\n\nNSLog(@\nAllJoyn Library version: %@\n, AJNVersion.versionInformation);\n   NSLog(@\nAllJoyn Library build info: %@\\n\n, AJNVersion.buildInformation);\n   [self.delegate didReceiveStatusUpdateMessage:AJNVersion.versionInformation];\n\n   [self.delegate didReceiveStatusUpdateMessage:AJNVersion.buildInformation];\n//\n// create the message bus\n//\n   self.bus = [[AJNBusAttachment alloc] initWithApplicationName:@\nBasicClient\n\nallowRemoteMessages:YES]\n\n\n\n\nHere, we created the bus attachment that will allow us to talk to the bus.\nNext, we start the bus.\n\n\nCode 32\n\n\nstatus = [self.bus start];\n\n\n\n\nOnce we have started the bus, we connect to it. A short description\non why do we pass \"null:\" and what does it imply is mentioned\nin BasicService section when we explain \nCode 11\n.\n\n\nCode 33\n\n\nstatus = [self.bus connectWithArguments:@\nnull:\n];\n\n\n\n\nNext we use an NSCondition, which will be eventually\nused to receive the indication that the session was joined.\n\n\nCode 34\n\n\nself.joinedSessionCondition = [[NSCondition alloc] init];\n[self.joinedSessionCondition lock];\n\n\n\n\nWe register the bus listener, which is nothing but this instance of BasicClient.\n\n\nCode 35\n\n\n// register a bus listener in order to receive discovery notifications\n//\n[self.bus registerBusListener:self];\n\n\n\n\nNext, we want to find the well-known name advertised by the BasicService.\n\n\nCode 36\n\n\n// begin discovery of the well known name of the service to be called\n// [self.bus findAdvertisedName:kBasicClientServiceName];\n\n\n\n\nIt is easier to understand the code from here on if we know\nwhat happens when we find the exact name or the names that\nhave the prefix that we supplied to the method in \nCode 36\n.\n\nCode 37\n shows the callback that gets called.\n\n\nCode 37\n\n\n- (void)didFindAdvertisedName:(NSString*)name\nwithTransportMask:(AJNTransportMask)transport namePrefix:(NSString*)namePrefix\n{\n   NSLog(@\nAJNBusListener::didFindAdvertisedName:%@ withTransportMask:%u\nnamePrefix:%@\n, name, transport, namePrefix);\n      if ([namePrefix compare:kBasicClientServiceName] == NSOrderedSame) {\n\n      BOOL shouldReturn;\n      @synchronized(self) {\n         shouldReturn = self.wasNameAlreadyFound;\n         self.wasNameAlreadyFound = true;\n      }\n\n      if (shouldReturn) {\n         NSLog(@\nAlready found an advertised name, ignoring this name\n%@...\n, name);\n         return;\n      }\n\n      // Since we are in a callback we must enable concurrent callbacks\nbefore calling a synchronous method.\n      //\n      [self.bus enableConcurrentCallbacks];\n\n      self.sessionId = [self.bus joinSessionWithName:name\nonPort:kBasicClientServicePort withDelegate:self\noptions:[[AJNSessionOptions alloc] initWithTrafficType:kAJNTrafficMessages\nsupportsMultipoint:YES proximity:kAJNProximityAny transportMask:kAJNTransportMaskAny]];\n\n      if (self.sessionId) {\n         self.foundServiceName = name;\n\n         NSLog(@\nClient joined session %d\n, self.sessionId);\n         [self.delegate didReceiveStatusUpdateMessage:[NSString\nstringWithFormat:@\nJoinSession SUCCESS (Session id=%d)\\n\n, self.sessionId]];\n      }\n      else {\n         [self.delegate didReceiveStatusUpdateMessage:@\nJoinSession\nfailed\\n\n];\n      }\n\n      [self.joinedSessionCondition signal];\n   }\n}\n\n\n\n\nLet's see what is happening in here. We first compare if the\nname that we found is the same as what we were looking for or\nhas the name we were looking for as its prefix. If we have already\nreceived the name, we return.\n\n\nCode 38\n\n\n   BOOL shouldReturn;\n      @synchronized(self) {\n         shouldReturn = self.wasNameAlreadyFound;\n         self.wasNameAlreadyFound = true;\n      }\n\n      if (shouldReturn) {\n         NSLog(@\nAlready found an advertised name, ignoring this name\n%@...\n, name);\n         return;\n      }\n\n\n\n\nNext, let us assume that we saw this name for the first time,\nwhich means that we can join the session.\n\n\nCode 39\n\n\n// Since we are in a callback we must enable concurrent\ncallbacks before calling a synchronous method.\n//\n   [self.bus enableConcurrentCallbacks];\n\n\n\n\nThe call to \nenableConcurrentCallbacks\n is in place so that\nwe can make a synchronous call inside an asynchronous method.\n\n\nCode 40\n\n\nself.sessionId = [self.bus joinSessionWithName:name\nonPort:kBasicClientServicePort withDelegate:self options:[[AJNSessionOptions alloc]\ninitWithTrafficType:kAJNTrafficMessages supportsMultipoint:YES\nproximity:kAJNProximityAny transportMask:kAJNTransportMaskAny]];\n\n      if (self.sessionId) {\n         self.foundServiceName = name;\n\n         NSLog(@\nClient joined session %d\n, self.sessionId);\n\n         [self.delegate didReceiveStatusUpdateMessage:[NSString\nstringWithFormat:@\nJoinSession SUCCESS (Session id=%d)\\n\n, self.sessionId]];\n      }\n      else {\n         [self.delegate didReceiveStatusUpdateMessage:@\nJoinSession\nfailed\\n\n];\n      }\n\n\n\n\nNext, we called \njoinSessionWithName\n. The arguments here are:\n\n\n\n\nName of the session we want to join\n\n\nPort on which the session host is listening\n\n\nA delegate class which will handle session related callbacks\n\n\nOptions to specify session parameters\n\n\nType of traffic that will go over the session\n\n\nBoolean indicating if the session we are joining is a\npoint-to-point or a multipoint session\n\n\nProximity type\n\n\nTransport mask specifying the transport over which we want\nto join this session\n\n\n\n\nCode 41\n\n\n[self.joinedSessionCondition signal];\n\n\n\n\nAnd, in the end, we signal the \njoinSessionCondition\n so that\nwe can go ahead and make a method call on the service.\n\n\nGoing forward, in order to make a method call on the\n\nBasicService\n, we first need to create a proxy bus object,\nwhich will represent the Basic service object. Calling\nintrospect makes us aware of the interfaces it implements\nso that we can make a correct method call.\n\n\nThe creation of proxy bus object requires the bus attachment,\nname of the service for which we are creating the proxy\nbus object, the object path of the remote object and the session id.\n\n\nAfter creating the proxy bus object we need to know the\ninterfaces that it contains so that we can call the desired method.\nFor this purpose, we call the \nintrospectRemoteObject\n method.\n\n\nFinally, after introspecting the remote object we call the\nmethod \nconcatenateString:withString:\n.\n\n\nIf the method call goes through successfully, we should have\nthe concatenated value in the string \"result\".\n\n\nCode 42\n\n\nif ([self.joinedSessionCondition waitUntilDate:[NSDate\ndateWithTimeIntervalSinceNow:60]]) {\n\n      // once joined to a session, use a proxy object to make\nthe function call\n\n//\n      self.basicObjectProxy = [[BasicObjectProxy alloc]\ninitWithBusAttachment:self.bus serviceName:self.foundServiceName\nobjectPath:kBasicClientServicePath sessionId:self.sessionId];\n\n      // get a description of the interfaces implemented by the\nremote object before making the call\n      //\n      [self.basicObjectProxy introspectRemoteObject];\n\n      // now make the function call\n      //\n      NSString *result = [self.basicObjectProxy concatenateString:@\nCode \n\nwithString:@\nMonkies!!!!!!!\n];\n\n      if (result) {\n         NSLog(@\n[%@] %@ concatenated string.\n, result,\n[result compare:@\nCode Monkies!!!!!!!\n] == NSOrderedSame ?\n@\nSuccessfully\n:@\nUnsuccessfully\n);\n         [self.delegate didReceiveStatusUpdateMessage:@\nSuccessfully called\n\nmethod on remote object!!!\\n\n];\n      }\n\n      self.basicObjectProxy = nil;\n\n   }\n   else {\n      NSLog(@\nTimed out while attempting to join a session with\nBasicService...\n);\n      [self.delegate didReceiveStatusUpdateMessage:@\nTimed out while\nattempting to join a session with BasicService...\n];\n   }\n\n\n\n\nWe looked at the flow the program when the user presses\nthe 'Call Service' button on the UI of BasicClient. There is\nanother button on the UI on BasicClient named 'Check Presence'.\nLet us take a look at the flow for that:\nobjc\n\n\nCode 43\n\n\n- (void)sendPing\n{\n   dispatch_queue_t pingQueue =\ndispatch_queue_create(\norg.alljoyn.basic-service.pingQueue\n,NULL);\n   dispatch_async( pingQueue, ^{ [self ping];\n   });\n}\n\n\n\n\nCode 43\n is identical to the behavior we saw when\nwe called the function run. Let us take a look at the function ping below.\n\n\nCode 44\n\n\n- (void)ping\n{\n   if objc(self.bus == NULL) {\n      return;\n   }\n   QStatus status = [self.bus pingPeer:kBasicClientServiceName withTimeout:5];\n\n   if (status == ER_OK) {\n      [self.delegate didReceiveStatusUpdateMessage:@\nPing returned\nSuccessfully\n];\n   } else {\n      [self.delegate didReceiveStatusUpdateMessage:@\nPing Failed\n];\n   }\n}\n\n\n\n\nThe function ping calls the public API pingPeer: withTimeout: inside AJNBusAttachment.\nIt passes the well-known name of the BasicService and the\ntimeout value that reflects how much time will the ping call\nwait before returning. On successfully ping, the text section\non the UI should indicate that the ping call was successful.\n\n\nThis ends the description of BasicClient.\n\n\nThe two samples are in place to illustrate the most simplistic\nmanner in which AllJoyn Objective-C bindings can be used.\nUsing the AllJoyn framework, not only can you write apps\nthat run on separate devices and talk to each other, but you\ncan also write apps that communicate with each other on the\nsame AllJoyn-enabled device. Moreover, the AllJoyn cross-platform\nsupport allows you to easily write your app for Android, Windows,\nand other platforms without having to worry about the problems\nthat the AllJoyn framework solves.\n\n\nThe AllJoyn concepts that we discussed in this document remain\nconsistent when we move to a different platform like Android\nso that the developer spends more time on his actual app rather\nthan worry about the peer-to-peer piece. This gives you the ability\nto quickly write apps that work on different platforms and\ntalk to each other, which is a very important thing in today's\nmobile application development ecosystem.",
            "title": "Ios"
        },
        {
            "location": "/develop/tutorial/ios/#ios-tutorial",
            "text": "",
            "title": "iOS Tutorial"
        },
        {
            "location": "/develop/tutorial/ios/#overview",
            "text": "This content looks at the BasicService and BasicClient\nsample in the SDK. This is a simple demonstration wherein\nthe client sends two strings to the service, the service\nconcatenates the strings sent by the client and returns a single string.  Components Used to Write a Sample  The AllJoyn  Objective-C bindings are based on the fact that\nany AllJoyn Objective C-code that you write will hit the native AllJoyn library.  When you download the AllJoyn SDK for iOS and OS X,\nthe typical structure of the SDK and its components is followed:   build  alljoyn_objc  services  LICENSE  README.txt  README.md  ReleaseNotes.txt   The following sections define each one of these directories and their role.  build directory  If you were to build the AllJoyn source for Darwin (iOS/OS X)\nby issuing a SCons command, the build directory is the build\noutput. The following directories are located under build:   about-docs  darwin  docs   about-docs and docs directories  The about-docs and docs directories contain the API documentation\nfor the native library (C++) of the AllJoyn framework and the About feature.  darwin directory  Under the darwin directory you will find four folders: arm, armv7, armv7s and x86.  arm armv7 and armv7s directories  The arm folders contain the native libraries and header files\nfor running the AllJoyn code over the corresponding versions of iOS devices.  alljoyn_objc directory  The alljoyn_objc directory contains most of the things relevant\nto an iOS developer. The following sections define each item.  AllJoynCodeGenerator  The code generator tool is the best way to get started generating\nthe glue code that makes calls inside the native AllJoyn library.  AllJoynFramework  AllJoynFramework is the actual binding code that contains the\nimplementation of the publicly exposed Objective-C bindings.  AllJoynFramework_iOS  AllJoynFramework_iOS is the actual binding code like the\nAllJoyn framework, but is more specific to iOS devices.  samples directory  The samples directory contains both iOS and OS X samples that\ngive you ideas for using the AllJoyn Objective-C bindings.  Test directory  The Test directory contains a few tests that can be used\nto test the AllJoyn SDK.  Overview of files in the samples  The following section is common to both BasicService and BasicClient.  We first need to understand a few of the common files that\nare a part of the sample code. Not all files in an AllJoyn\niOS sample need to be written from scratch. We have a code\ngenerator tool, which generates much of the glue code and\nyou end up writing very little actual AllJoyn code.\nTo create an AllJoyn Objective-C sample from scratch,\nthe best place to start is the  AllJoyn Programming Guide for the Objective-C Language .\nThis document shows you how to make use of the code generator\nto define the interface and in turn generate glue code that\nmakes a call in the native AllJoyn library. You do not have\nto make calls in the native library yourself.  If we use the code generator for BasicService and BasicClient,\nthe code generated would be four files:     File name  Description      BasicObject.h  This file shows you the interface implemented by the BusObject that you defined using the xml as input to the code generator.    BasicObject.m  This file has the Objective-C implementation of the BasicObject.    AJNBasicObject.h  The Objective-C implementation of a bus object needs to map to a C++ implementation that calls in the native AllJoyn library. The code gen tool does this for you and produces the header and source files for this mapping. You need not write the C++ code or bother about how is it done.    AJNBasicObject.mm  This file contains the implementation of C++ BusObject. In the sample, the C++ BusObject is called BasicObjectImpl.     There are other files in the sample as listed below:   ViewController.h : This is the View Controller header file\nof this application.  ViewController.mm : This contains the implementation of\nthe View Controller for this application.",
            "title": "Overview"
        },
        {
            "location": "/develop/tutorial/ios/#walkthrough-of-basicservice",
            "text": "Developers who are not familiar with app development for the\niOS platform can refer to the Apple developer documentation,\nwhich has a set of rich tutorials to understand how a typical\niOS app is structured. For ease of understanding, if you are new\nto iOS development, an iOS app is structured based on MVC architecture,\nwhich means that you will have the following:   A  View , which is your UI and since we use Xcode,\nthis corresponds to Storyboard.  A  Controller , which is your  ViewController.h  and  ViewController.mm \nin the case of our BasicService and BasicClient sample  A  Model , which are  BasicService.h  and  BasicService.mm \nin the case of BasicService and  BasicClient.h ; and  BasicClient.mm \nin the case of BasicClient   Let us look at it from the perspective of how an app is\nloaded and what parts of the source code are called and what do they mean  When the BasicService app loads up, the viewDidLoad function in ViewController.mm\nis called:  Code 1  - (void)viewDidLoad\n{\n   [super viewDidLoad];\nself.basicService = [[BasicService alloc] init];\n   self.basicService.delegate = self;\n   [self.basicService startService];\n}  Here, we instantiate BasicService which is the model and\nthen send a message to  startService .  Before going further, it might be good to look at what is\ninside BasicService.h since we are calling a method of  BasicService .  Code 2  BasicService.h\n@protocol BasicServiceDelegate  NSObject \n- (void)didReceiveStatusUpdateMessage:(NSString *)message;\n@end\n@interface BasicService : NSObject\n@property (strong, nonatomic) id BasicServiceDelegate  delegate;\n- (void)startService;\n@end  The first thing we notice is a  @protocol  called  BasicServiceDelegate \nwith a method  didReceiveStatusUpdateMessage . This is in place\nso that the model can send a message to the view controller.\nThe protocol tells the model that the view controller will\nhave this method implemented.  The second thing is the interface  BasicService  which has a property id BasicServiceDelegate  delegate.  The  ViewController  sets itself as the delegate inside ViewController.m  so that the model,  BasicService , can\nsend a message to the method  didReceiveStatusUpdateMessage \nof  ViewController  using the delegate property.  This is a common way for a model to call a method of a ViewController  in iOS. Now we turn back our attention to startService  in  BasicService .  Code 3  - (void)startService\n{\n   dispatch_queue_t serviceQueue = dispatch_queue_create\n( org.alljoyn.basic-service.serviceQueue , NULL);\n   dispatch_async( serviceQueue, ^{\n      [self run];\n   });\n}  Here we create a dispatch queue called \"org.alljoyn.basic-service.serviceQueue\"\nand call the method  run . Now let us look at the method  run .  Code 4  [self.delegate didReceiveStatusUpdateMessage:[NSString\nstringWithFormat:@ AllJoyn Library version: %@\\n ,\n[AJNVersion versionInformation]]];\n\n[self.delegate didReceiveStatusUpdateMessage:[NSString\nstringWithFormat:@ AllJoyn Library build info: %@\\n ,\n[AJNVersion buildInformation]]];  The first few lines of this method print out debugging\ninformation. There are two calls that are interesting.  Notice we call  didReceiveStatusUpdateMessage  using the\ndelegate that we had declared in  Code 3 .\nThis updates the text view of the app with the message\nparameters that we send it. In the two calls above, we send\nthe AllJoyn library version and a build info string.  Next, we create a BusAttachment and assign it to the\nproperty named  bus , which we declared in  BasicService.h file .\nSee  Code 5 .  Code 5  self.bus = [[AJNBusAttachment alloc] initWithApplicationName:@ BasicService \nallowRemoteMessages:YES];  We then have a condition lock, which is in place so that only\nthread executes the code that follows. We do not want to have\nmultiple threads trying to do AllJoyn things at the same time\nfor this sample.  Code 6  self.lostSessionCondition = [[NSCondition alloc] init];\n[self.lostSessionCondition lock];  We then register the bus listener, which essentially has\ncallbacks that indicate if we found an advertised name,\nlost a session, or a name owner changed condition  Code 7  [self.bus registerBusListener:self];  The code gen tool produces the implementation stub of\nBus Object which we can now instantiate in our Service code\nwith the line in  Code 8 :  Code 8  self.basicObject = [[BasicObject alloc] initWithBusAttachment:self.bus\nonPath:kBasicServicePath];  After we have instantiated the Bus Object, we start the bus:  Code 9  status = [self.bus start];\nif (ER_OK != status) {\n      [self.delegate didReceiveStatusUpdateMessage:@ BusAttachment::Start\n   failed\\n ];\n   NSLog(@ Bus start failed. );\n}  We need to register the bus object that we had instantiated\nabove. We do so by calling  Code 10 :  Code 10  status = [self.bus registerBusObject:self.basicObject];\nif (ER_OK != status) {\nNSLog(@ ERROR: Could not register bus object );\n}  We started the bus and now need to connect to it, which is done\nby calling the  connectWithArguements  method. The arguments passed\nto this method is a string \"null:\" which indicates the we connect\nto the \"null\" transport. In the context of the AllJoyn framework,\nthis means we are connecting to the AllJoyn router which is a\npart of this app. Some operating systems have the ability to\nrun a separate AllJoyn standalone router process, which the\napp can connect to. Running a separate process is not possible\nin iOS and not beneficial in many ways. We will leave that\ndiscussion here since we are focusing on the sample.  Code 11  status = [self.bus connectWithArguments:@ null: ];\nif (ER_OK != status) {\n   NSLog(@ Bus connect failed. );\n   [self.delegate didReceiveStatusUpdateMessage:@ Failed to connect to null:\ntransport ];\n}  For an AllJoyn service we typically request a well-known name,\nbind a session port to that well known name, and then advertise\nthat name so that others who are interested in talking to the\nservice find it and join our session.  We do these three things with the lines of code shown in  Code 12 , Code 13 ,  Code 14 , and  Code 15 .  Code 12  status = [self.bus requestWellKnownName:kBasicServiceName\nwithFlags:kAJNBusNameFlagReplaceExisting | kAJNBusNameFlagDoNotQueue];\nif (ER_OK != status) {\n   NSLog(@ ERROR: Request for name failed (%@) , kBasicServiceName);\n}  The parameter  kBasicServiceName  is the name that we request\nfrom our bus. The name may or may not be available and also\ndepends on the flags that you pass in to the specifier  withFlags :  In the case of this sample, we pass  kAJNBusNameFlagReplaceExisting | kAJNBusNameFlagDoNotQueue \nwhich tells the bus to replace the existing owner of the name\nwith this service instance and if the name is already taken by\nsomeone do not queue this service waiting for the name to be released.  Code 13  //\n// bind a session to a service port\n//\n   AJNSessionOptions *sessionOptions = [[AJNSessionOptions alloc]\ninitWithTrafficType:kAJNTrafficMessages supportsMultipoint:YES\nproximity:kAJNProximityAny transportMask:kAJNTransportMaskAny];  Before calling  bindSessionPort , we need to specify certain\nthings about the session, for example:   What kind of traffic would this session be supporting?  Would it be a single point or a multipoint session?  Over which transports would this session be available?   These things are specified by using  AJNSessionOptions  as shown in  Code 13 ,\nwhich we pass in to the call to  bindSesssionOnPort: withOptions: withDelegate: \nas shown in  Code 14 .  Code 14     status = [self.bus bindSessionOnPort:kBasicServicePort\nwithOptions:sessionOptions withDelegate:self];\n   if (ER_OK != status) {\n      NSLog(@ ERROR: Could not bind session on port (%d) , kBasicServicePort);\n   }  Next, once we have bound a session to a port we advertise the\nname so that peers,  BasicClient  in our case, can find the well-known\nname and join this session. While advertising the name we specify\nthe well-known name and the transport over which we want this\nname to be advertised.  Code 15  // advertise a name\n//\nstatus = [self.bus advertiseName:kBasicServiceName withTransportMask:kAJNTransportMaskAny];\nif (ER_OK != status) {\nNSLog(@ Could not advertise (%@) , kBasicServiceName);\n}  After we are done advertising the name we wait for the clients\nto connect to us. In our sample, we specify the time to wait\nbefore cleaning up as 60 seconds . The  lostSession  condition waits\nuntil it gets a signal, which is sent to it when the session\nis lost. You see the signal being sent to this condition inside\nof the  sessionWasLost:  callback which is a part of the  AJNSessionListener  interface.  Code 16  // wait until the client leaves before tearing down the service\n// [self.lostSessionCondition waitUntilDate:[NSDate\ndateWithTimeIntervalSinceNow:60]];  In the end, we perform cleanup by unregistering the bus object,\nreleasing the lock on the condition property and deallocating\nthe bus property by setting it to  nil .  Code 17  [self.bus unregisterBusObject:self.basicObject];\n[self.lostSessionCondition unlock];\nself.bus = nil;  We have a several callback methods that are a part of three\ndifferent listeners. A brief description of each one grouped\nby listener category is mentioned in the sections that follow.  AJNBusListener methods  Code 18  (void)listenerDidRegisterWithBus:(AJNBusAttachment*)busAttachment  This is invoked when  registerBusListener  is completed\nsuccessfully and the bus notifies the application about it.  Code 19  (void)listenerDidUnregisterWithBus:(AJNBusAttachment*)busAttachment  This is invoked when the  BusListener  unregisters from the bus.  Code 20  (void)nameOwnerChanged:(NSString*)name to:(NSString*)newOwner\nfrom:(NSString*)previousOwner  This is called when there is a change in the ownership of a name on the bus.\nThe name could be a unique name or a well-known name.  Code 21  (void)busWillStop  This is called when a  BusAttachment , with which a listener\nis registered, is stopping.  Code 22  (void)busDidDisconnect  This is called when a  BusAttachment , with which this listener\nis registered, has become disconnected from the bus.  AJNSessionPortListener methods  Only the session host uses this category of listener since\nit will not have any effect on the client side.  Code 23  (BOOL)shouldAcceptSessionJoinerNamed:(NSString*)joiner\nonSessionPort:(AJNSessionPort)sessionPort\nwithSessionOptions:(AJNSessionOptions*)options  This is one of the most important callback functions that\nalmost every service will have. When a peer initiates a\njoin session for the session hosted by a service this callback\nis invoked so that the service may accept or reject the  join \nsession request initiated by the client. It gives us the unique\nname of the joiner who initiated the  join  session request,\nthe port of the session used and the session options that\nthe client wishes to use for the life of this session.  Code 24  (void)didJoin:(NSString*)joiner inSessionWithId:(AJNSessionId)sessionId\nonSessionPort:(AJNSessionPort)sessionPort  If a service accepts a  join  session request sent by a client,\nthe client joins the session and the service is notified about\nthe successful joining of the client through this callback.\nThis means that the session is fully up and running.\nIt indicates the unique name of the joiner, the session id\nthat it is a part of and the session port which was used\nfor joining the session.  AJNSessionListener methods  Code 25  - (void)sessionWasLost:(AJNSessionId)sessionId  The bus invokes this callback when an existing session\nbecomes disconnected and is no longer valid.  Code 26  - (void)didAddMemberNamed:(NSString*)memberName\ntoSession:(AJNSessionId)sessionId  This callback indicates that a member with unique name  memberName \nwas added to the session with session id of the second argument.  Code 27  - (void)didRemoveMemberNamed:(NSString*)memberName\nfromSession:(AJNSessionId)sessionId  This callback indicates that a member with unique name memberName  is no longer a part of the session with\nsession id having value  sessionId .  This ends the description of code found under BasicService.",
            "title": "Walkthrough of BasicService"
        },
        {
            "location": "/develop/tutorial/ios/#walkthrough-of-basicclient",
            "text": "The BasicClient app starts with a button being displayed,\nwhich says \"Call Service\". When the button is pressed,\nthe  didTouchCallServiceButton  method is called.  Code 28  - (IBAction)didTouchCallServiceButton:(id)sender\n{\n   self.basicClient = [[BasicClient alloc] init];\n   self.basicClient.delegate = self; [self.basicClient sendHelloMessage];\n}  Here, we instantiate  BasicClient  and call the  sendHelloMessage  method.  Before looking at the  sendHelloMessage , it would be useful\nto understand what is inside the  BasicClient.h  file  Code 29  @protocol BasicClientDelegate  NSObject \n- (void)didReceiveStatusUpdateMessage:(NSString *)message;\n@end\n@interface BasicClient : NSObject\n@property (nonatomic, weak) NSObject BasicClientDelegate  *delegate;\n- (void)sendHelloMessage;\n@end  The first thing we notice is a @protocol called  BasicCLientDelegate \nwith a method  didReceiveStatusUpdateMessage . This is in place\nso that the model can send a message to the view controller.\nThe protocol tells the model that the view controller will\nhave this method implemented.  The second thing is the interface  BasicClient , which has a\nproperty  id BasicClientDelegate  delegate.  The  ViewController  sets itself as the delegate inside ViewController.m  so that the model,  BasicClient , can\nsend a message to the method  didReceiveStatusUpdateMessage \nof  ViewController  using the delegate property.  This is a common way for a model to call a method of a ViewController  in iOS. Now we turn back our attention\nto  sendHelloMessage  in  BasicClient .  Code 30  - (void)sendHelloMessage\n{\n   dispatch_queue_t clientQueue =\ndispatch_queue_create( org.alljoyn.basic-service.clientQueue ,NULL);\n   dispatch_async( clientQueue, ^{ [self run];\n   });\n}  The  sendHelloMessage  creates a dispatch queue and then\ncalls the  run  method from here.  Before we head in the  run  method, let's look at a few properties\nthat are defined inside of  BasicClient .   @property (nonatomic, strong ) AJNBusAttachment *bus   Represents the bus attachment we use in the client code.   @property ( nonatomic, strong) NSCondition *joinedSessionCondition   NSCondition used to signal that we have joined a session\n  after finding an advertised name.   @property (nonatomic) AJNSessionId sessionId   Used to hold the session id of the session that the client\n  would become a part of.   @property ( nonatomic, strong) NSString *foundServiceName   Used to hold the well-known name of the service it found\n  when it was looking for an advertised name.   @property (nonatomic, strong) BasicObjectProxy *basicObjectProxy   It is the proxy bus object, which will represent the bus\n  object of Basic service.   @property BOOL wasNameAlreadyFound   Used to indicate if the name we are looking for was already found.  Now let us look at the run function. The first few lines are\ndebugging information printing out the AllJoyn library version\nthe build info string by calling the method  didReceiveStatusUpdateMessage \nthat the  ViewController  should have implemented.  Code 31  NSLog(@ AllJoyn Library version: %@ , AJNVersion.versionInformation);\n   NSLog(@ AllJoyn Library build info: %@\\n , AJNVersion.buildInformation);\n   [self.delegate didReceiveStatusUpdateMessage:AJNVersion.versionInformation];\n\n   [self.delegate didReceiveStatusUpdateMessage:AJNVersion.buildInformation];\n//\n// create the message bus\n//\n   self.bus = [[AJNBusAttachment alloc] initWithApplicationName:@ BasicClient \nallowRemoteMessages:YES]  Here, we created the bus attachment that will allow us to talk to the bus.\nNext, we start the bus.  Code 32  status = [self.bus start];  Once we have started the bus, we connect to it. A short description\non why do we pass \"null:\" and what does it imply is mentioned\nin BasicService section when we explain  Code 11 .  Code 33  status = [self.bus connectWithArguments:@ null: ];  Next we use an NSCondition, which will be eventually\nused to receive the indication that the session was joined.  Code 34  self.joinedSessionCondition = [[NSCondition alloc] init];\n[self.joinedSessionCondition lock];  We register the bus listener, which is nothing but this instance of BasicClient.  Code 35  // register a bus listener in order to receive discovery notifications\n//\n[self.bus registerBusListener:self];  Next, we want to find the well-known name advertised by the BasicService.  Code 36  // begin discovery of the well known name of the service to be called\n// [self.bus findAdvertisedName:kBasicClientServiceName];  It is easier to understand the code from here on if we know\nwhat happens when we find the exact name or the names that\nhave the prefix that we supplied to the method in  Code 36 . Code 37  shows the callback that gets called.  Code 37  - (void)didFindAdvertisedName:(NSString*)name\nwithTransportMask:(AJNTransportMask)transport namePrefix:(NSString*)namePrefix\n{\n   NSLog(@ AJNBusListener::didFindAdvertisedName:%@ withTransportMask:%u\nnamePrefix:%@ , name, transport, namePrefix);\n      if ([namePrefix compare:kBasicClientServiceName] == NSOrderedSame) {\n\n      BOOL shouldReturn;\n      @synchronized(self) {\n         shouldReturn = self.wasNameAlreadyFound;\n         self.wasNameAlreadyFound = true;\n      }\n\n      if (shouldReturn) {\n         NSLog(@ Already found an advertised name, ignoring this name\n%@... , name);\n         return;\n      }\n\n      // Since we are in a callback we must enable concurrent callbacks\nbefore calling a synchronous method.\n      //\n      [self.bus enableConcurrentCallbacks];\n\n      self.sessionId = [self.bus joinSessionWithName:name\nonPort:kBasicClientServicePort withDelegate:self\noptions:[[AJNSessionOptions alloc] initWithTrafficType:kAJNTrafficMessages\nsupportsMultipoint:YES proximity:kAJNProximityAny transportMask:kAJNTransportMaskAny]];\n\n      if (self.sessionId) {\n         self.foundServiceName = name;\n\n         NSLog(@ Client joined session %d , self.sessionId);\n         [self.delegate didReceiveStatusUpdateMessage:[NSString\nstringWithFormat:@ JoinSession SUCCESS (Session id=%d)\\n , self.sessionId]];\n      }\n      else {\n         [self.delegate didReceiveStatusUpdateMessage:@ JoinSession\nfailed\\n ];\n      }\n\n      [self.joinedSessionCondition signal];\n   }\n}  Let's see what is happening in here. We first compare if the\nname that we found is the same as what we were looking for or\nhas the name we were looking for as its prefix. If we have already\nreceived the name, we return.  Code 38     BOOL shouldReturn;\n      @synchronized(self) {\n         shouldReturn = self.wasNameAlreadyFound;\n         self.wasNameAlreadyFound = true;\n      }\n\n      if (shouldReturn) {\n         NSLog(@ Already found an advertised name, ignoring this name\n%@... , name);\n         return;\n      }  Next, let us assume that we saw this name for the first time,\nwhich means that we can join the session.  Code 39  // Since we are in a callback we must enable concurrent\ncallbacks before calling a synchronous method.\n//\n   [self.bus enableConcurrentCallbacks];  The call to  enableConcurrentCallbacks  is in place so that\nwe can make a synchronous call inside an asynchronous method.  Code 40  self.sessionId = [self.bus joinSessionWithName:name\nonPort:kBasicClientServicePort withDelegate:self options:[[AJNSessionOptions alloc]\ninitWithTrafficType:kAJNTrafficMessages supportsMultipoint:YES\nproximity:kAJNProximityAny transportMask:kAJNTransportMaskAny]];\n\n      if (self.sessionId) {\n         self.foundServiceName = name;\n\n         NSLog(@ Client joined session %d , self.sessionId);\n\n         [self.delegate didReceiveStatusUpdateMessage:[NSString\nstringWithFormat:@ JoinSession SUCCESS (Session id=%d)\\n , self.sessionId]];\n      }\n      else {\n         [self.delegate didReceiveStatusUpdateMessage:@ JoinSession\nfailed\\n ];\n      }  Next, we called  joinSessionWithName . The arguments here are:   Name of the session we want to join  Port on which the session host is listening  A delegate class which will handle session related callbacks  Options to specify session parameters  Type of traffic that will go over the session  Boolean indicating if the session we are joining is a\npoint-to-point or a multipoint session  Proximity type  Transport mask specifying the transport over which we want\nto join this session   Code 41  [self.joinedSessionCondition signal];  And, in the end, we signal the  joinSessionCondition  so that\nwe can go ahead and make a method call on the service.  Going forward, in order to make a method call on the BasicService , we first need to create a proxy bus object,\nwhich will represent the Basic service object. Calling\nintrospect makes us aware of the interfaces it implements\nso that we can make a correct method call.  The creation of proxy bus object requires the bus attachment,\nname of the service for which we are creating the proxy\nbus object, the object path of the remote object and the session id.  After creating the proxy bus object we need to know the\ninterfaces that it contains so that we can call the desired method.\nFor this purpose, we call the  introspectRemoteObject  method.  Finally, after introspecting the remote object we call the\nmethod  concatenateString:withString: .  If the method call goes through successfully, we should have\nthe concatenated value in the string \"result\".  Code 42  if ([self.joinedSessionCondition waitUntilDate:[NSDate\ndateWithTimeIntervalSinceNow:60]]) {\n\n      // once joined to a session, use a proxy object to make\nthe function call\n\n//\n      self.basicObjectProxy = [[BasicObjectProxy alloc]\ninitWithBusAttachment:self.bus serviceName:self.foundServiceName\nobjectPath:kBasicClientServicePath sessionId:self.sessionId];\n\n      // get a description of the interfaces implemented by the\nremote object before making the call\n      //\n      [self.basicObjectProxy introspectRemoteObject];\n\n      // now make the function call\n      //\n      NSString *result = [self.basicObjectProxy concatenateString:@ Code  \nwithString:@ Monkies!!!!!!! ];\n\n      if (result) {\n         NSLog(@ [%@] %@ concatenated string. , result,\n[result compare:@ Code Monkies!!!!!!! ] == NSOrderedSame ?\n@ Successfully :@ Unsuccessfully );\n         [self.delegate didReceiveStatusUpdateMessage:@ Successfully called\n\nmethod on remote object!!!\\n ];\n      }\n\n      self.basicObjectProxy = nil;\n\n   }\n   else {\n      NSLog(@ Timed out while attempting to join a session with\nBasicService... );\n      [self.delegate didReceiveStatusUpdateMessage:@ Timed out while\nattempting to join a session with BasicService... ];\n   }  We looked at the flow the program when the user presses\nthe 'Call Service' button on the UI of BasicClient. There is\nanother button on the UI on BasicClient named 'Check Presence'.\nLet us take a look at the flow for that:\nobjc  Code 43  - (void)sendPing\n{\n   dispatch_queue_t pingQueue =\ndispatch_queue_create( org.alljoyn.basic-service.pingQueue ,NULL);\n   dispatch_async( pingQueue, ^{ [self ping];\n   });\n}  Code 43  is identical to the behavior we saw when\nwe called the function run. Let us take a look at the function ping below.  Code 44  - (void)ping\n{\n   if objc(self.bus == NULL) {\n      return;\n   }\n   QStatus status = [self.bus pingPeer:kBasicClientServiceName withTimeout:5];\n\n   if (status == ER_OK) {\n      [self.delegate didReceiveStatusUpdateMessage:@ Ping returned\nSuccessfully ];\n   } else {\n      [self.delegate didReceiveStatusUpdateMessage:@ Ping Failed ];\n   }\n}  The function ping calls the public API pingPeer: withTimeout: inside AJNBusAttachment.\nIt passes the well-known name of the BasicService and the\ntimeout value that reflects how much time will the ping call\nwait before returning. On successfully ping, the text section\non the UI should indicate that the ping call was successful.  This ends the description of BasicClient.  The two samples are in place to illustrate the most simplistic\nmanner in which AllJoyn Objective-C bindings can be used.\nUsing the AllJoyn framework, not only can you write apps\nthat run on separate devices and talk to each other, but you\ncan also write apps that communicate with each other on the\nsame AllJoyn-enabled device. Moreover, the AllJoyn cross-platform\nsupport allows you to easily write your app for Android, Windows,\nand other platforms without having to worry about the problems\nthat the AllJoyn framework solves.  The AllJoyn concepts that we discussed in this document remain\nconsistent when we move to a different platform like Android\nso that the developer spends more time on his actual app rather\nthan worry about the peer-to-peer piece. This gives you the ability\nto quickly write apps that work on different platforms and\ntalk to each other, which is a very important thing in today's\nmobile application development ecosystem.",
            "title": "Walkthrough of BasicClient"
        },
        {
            "location": "/develop/tutorial/thin-app/",
            "text": "Build an Application Using the Thin Library\n\n\nObtain the sample app\n\n\nRefer to the target platform documentation for instructions\nto download the sample apps.\n\n\nReference code\n\n\nThe reference code consists of a module that implements the\nmain function and a module the implements the services handlers.\n\n\nSample app modules\n\n\n\n\n\n\n\n\nModule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAboutSample\n\n\nAbout sample code. Includes provisioning and business logic related to the About feature.\n\n\n\n\n\n\nConfigSample\n\n\nConfiguration service framework sample code. Includes provisioning and business logic that exercises the service's developers' API.\n\n\n\n\n\n\nControlPanelSample\n\n\nControlPanel service framework sample code. Includes provisioning and business logic that exercises the service's developers' API.\n\n\n\n\n\n\nControlPanelGenerated\n\n\nControlPanel service framework sample generated controllee model.\n\n\n\n\n\n\nControlPanelProvided\n\n\nControlPanel Service Framework sample provisioned controlee business logic that interacts with the generated model.\n\n\n\n\n\n\nPropertyStore\n\n\nPropertyStore implementation code; this supports all core services.\n\n\n\n\n\n\nServerSample\n\n\nMain function for service application and provisioning code for all service frameworks.\n\n\n\n\n\n\nServicesHandlers\n\n\nSample code for services handlers.\n\n\n\n\n\n\nSimpleNotificationProducerSample\n\n\nNotification service framework sample Producer sample code. Includes provisioning and business logic that exercises the producer's developers' API.\n\n\n\n\n\n\nSimpleNotificationConsumerSample\n\n\nNotification Service Framework simple Consumer sample code. Includes provisioning and business logic that exercises the consumer's developers' API.\n\n\n\n\n\n\n\n\nBuild a Thin Library server app\n\n\nPerform the following steps at a high level to build a Thin Library server app.\n\n\n\n\nCreate the base for the AllJoyn\n application.\n\n\nCall services handlers.\n\n\nImplement the PropertyStore. See the \nAbout API Guide\n\nfor instructions.\n\n\nImplement remote callbacks.\n\n\n(Optional) Integrate the Configuration service framework\nwith an AuthListener.\n\n\n\n\nServer sample app walkthrough\n\n\nThe sample app sends an Announce signal with the About\ninterfaces, other registered servicess interfaces, and\nthe information stored in the PropertyStore. Depending on\nthe service frameworks included in the compilation, the\napplication can then send a notification, enable onboarding,\nstore configuration in NVRAM, or act as a Control Panel device.\nThe specific functionality of each service framework is covered\nin the appropriate service framework's API Guide.\n\n\nSee the \nappropriate API Guide\n for the\nservice framework you are working with.\n\n\nImplementing a Thin Library Server App\n\n\nCreate the base for the AllJoyn application\n\n\nSee the \nAbout API Guide\n for more information.\n\n\nInitialize the AllJoyn framework\n\n\nAJ_Initialize();\n\n\n\n\nInitialize the PropertyStore\n\n\nPropertyStore_Init();\n\n\n\n\nInitialize the About feature\n\n\nAJ_AboutSetIcon(aboutIconMimetype, aboutIconContent, aboutIconContentSize, aboutIconUrl);\n\n\n\n\nInitialize each included service framework\n\n\nThe initialization of the service typically calls the corresponding\nStart method of the service's API passing the relevant settings\nand callbacks that integrate the service within the overall application\nprovisioning and business logic.\n\n\n#ifdef CONFIG_SERVICE Config_Init();\n#endif\n#ifdef NOTIFICATION_SERVICE_PRODUCER NotificationProducer_Init();\n#endif\n#ifdef NOTIFICATION_SERVICE_PRODUCER NotificationConsumer_Init();\n#endif\n#ifdef CONTROLPANEL_SERVICE Controllee_Init();\n#endif\n\n\n\n\nSet bus authentication password callback\n\n\nSetBusAuthPwdCallback(MyBusAuthPwdCB);\n\n\n\n\nRefer to the API Reference Manual for the SetBusAuthPwdCallback method.\n\n\nCreate main loop\n\n\nstatic uint8_t isBusConnected = FALSE; static AJ_BusAttachment busAttachment;\n   AJ_Status status;\nwhile (TRUE) {\n   AJ_Message msg;\n   status = AJ_OK;\n\n\n\n\nConnect to the AllJoyn bus\n\n\nif (!isBusConnected) {\nstatus = AJSVC_RoutingNodeConnect(\nbusAttachment, \norg.alljoyn.BusNode\n,\n   AJAPP_CONNECT_TIMEOUT,\n   AJAPP_CONNECT_PAUSE, AJAPP_BUS_LINK_TIMEOUT, \nisBusConnected);\n      if (!isBusConnected) { // Failed to connect to Routing Node?\n         continue; // Retry establishing connection to Routing Node.\n      }\n\n\n\n\nSet up the relevant bus authentication listener callback (optional)\n\n\nIn cases where your code uses secured methods, you will need to\nregister the relevant authentication listener callback. Inclusion\nof the Configuration service framework and/or enabling security\nin the Control Panel service framework implies your code uses\nsecured methods.\n\n\nThe sample applications typically set up a shared secret-based\nmechanism that requires a password callback as follows:\n\n\n/* Setup password based authentication listener for secured peer-to-peer connections */\nAJ_BusSetPasswordCallback(\nbusAttachment, PasswordCallback);\n\n\n\n\nSet up remote access to the services and publish their capabilities\n\n\nstatus = AJApp_ConnectedHandler(\nbusAttachment, AJAPP_MAX_INIT_ATTEPTS, AJAPP_SLEEP_TIME);\n\n\n\n\nAfter the connection has been made, perform the following\nsteps to ensure the service frameworks function successfully\n(these are encapsulated in the call \nAJApp_ConnectedHandler()\n shown above).\n\n\n\n\nInitialize the individual services. Upon successful connection\nto the routing node, each service must set up a dedicated\nsession port or register signal matching rule(s).\n\n\nBind the session port. This enables the creation of sessions.\n\n\n\n\nc\n   #define APP_SERVICE_PORT 900\n   AJ_BusBindSessionPort(\nbusAttachment, APP_SERVICE_PORT, NULL, 0);\n\n\n\n\nAdvertise the unique name of the message bus. This allows\nother applications to locate and track this device.\n\n\n\n\nc\n   AJ_BusAdvertiseName(\nbusAttachment, AJ_GetUniqueName(\nbusAttachment),\n      AJ_TRANSPORT_ANY, AJ_BUS_START_ADVERTISING);\n\n\n\n\nInitialize the About feature with the session port.\nThe About announcement will include the port, other metadata,\nand a description of the registered bus objects that are\nflagged as announced.\n\n\n\n\nc\n   AJ_AboutInit(\nbusAttachment, APP_SERVICE_PORT);\n\n\nContinue main loop\n\n\nAfter the connection is established and the AllJoyn services\napplication layer is initialized, continue with main loop.\nPerform the following tasks:\n\n\n\n\nCheck whether request for announcement was flagged and\nannounce accordingly.\n\n\nCheck the Wi-Fi state and trigger a reconnection if network\nconnection was lost.\n\n\nContinue with main loop cycling through the services to\nperform incoming message processing and idle tasks execution,\nincluding outgoing signal sending e.g. sending pending requests\nfor notification signals.\n\n\n\n\nstatus = AJ_AboutAnnounce(\nbusAttachment);\nif (status == AJ_OK) {\n   status = AJ_UnmarshalMsg(\nbusAttachment, \nmsg, 1000);\n   isUnmarshalingSuccessful = (status == AJ_OK);\n\n   if (status == AJ_ERR_TIMEOUT) {\n      if (AJ_ERR_LINK_TIMEOUT == AJ_BusLinkStateProc(\nbusAttachment)) {\n          status = AJ_ERR_READ; // something's not right. force disconnect\n      } else { // nothing on bus, do our own thing\n         AJApp_DoWork();\n         continue;\n      }\n   }\n\n   if (isUnmarshalingSuccessful) {\n      service_Status = AJApp_MessageProcessor(\nmsg, \nstatus);\n      if (service_Status == SERVICE_STATUS_NOT_HANDLED) {\n         //Pass to the built-in bus message handlers status = AJ_BusHandleBusMessage(\nmsg);\n      }\n      AJ_NotifyLinkActive();\n   }\n\n   //Unmarshaled messages must be closed to free resources\n   AJ_CloseMsg(\nmsg);\n}\n\n\n\n\nGraceful disconnect from the AllJoyn bus and end of loop\n\n\nDuring the message processing the connection may be lost by\nexternal disconnection of the router or the Wi-Fi network.\nThis is designated by the status value AJ_ERR_READ returned\nby any of the AllJoyn message handling calls in the following sections:\n\n\n\n\nConnect to the AllJoyn bus\n\n\nSet up remote access to the services and publish their capabilities\n\n\nContinue main loop\n\n\n\n\nDepending on the severity of an error received by the app or\nthe logic of the app, the application and services' business\nlogic must perform a graceful soft disconnect from the Wi-Fi\nrouter. In other cases, a hard disconnect that reboots the\nhardware and resets the Wi-Fi network is required. These are\nindicated respectively by status values AJ_ERR_RESTART and\nAJ_ERR_RESTART_APP returned by any of the AllJoyn message\nhandling calls in the sections listed above.\n\n\nif (status == AJ_ERR_READ || status == AJ_ERR_RESTART ||\n    status == AJ_ERR_RESTART_APP) {\n   if (isBusConnected) {\n      forcedDisconnnect = (status != AJ_ERR_READ);\n         rebootRequired = (status == AJ_ERR_RESTART_APP);\n         AJApp_DisconnectHandler(\nbusAttachment, forcedDisconnect);\n         AJSVC_RoutingNodeDisconnect(\nbusAttachment, forcedDisconnnect,\n            AJAPP_SLEEP_TIME, AJAPP_SLEEP_TIME, \nisBusConnected);\n   if (status == AJ_ERR_RESTART_APP) { AJ_Reboot();\n      }\n   }\n}\n\n\n\n\nWhen the connection is about to be lost, perform the following\nsteps to ensure the services clean up any state established\nwith the Wi-Fi router (these are encapsulated in the call\n\nAJApp_DisconnectHandler()\n above):\n\n\n\n\nStop advertising the current unique name of the message bus.\n\n\n\n\nc\n   AJ_BusAdvertiseName(busAttachment, AJ_GetUniqueName(busAttachment),\n      AJ_TRANSPORT_ANY, AJ_BUS_STOP_ADVERTISING, 0);\n\n2. Unbind the session port.\n\n\nc\n   AJ_BusUnbindSession(busAttachment, AJ_ABOUT_SERVICE_PORT);\n\n\n\n\nSet the flag so that an Announcement will be sent upon\nreconnect to a Wi-Fi router.\n\n\n\n\nc\n   AJ_AboutSetShouldAnnounce();\n\n\nCreate service framework handlers\n\n\nThe service framework handlers are service functionality that\nmust be called at a specific time in the main loop.\n\n\nConnected handler\n\n\nAfter the router is connected, and before performing the\napplication connected handlers, the individual registered\nservices connected handlers are called. Complete the steps\noutlined in \nInitialize the AllJoyn framework\n through\n\nConnect to the AllJoyn bus\n.\n\n\nNOTE:\n This must occur before a peer has connected or a service\nframework API is executed to publish information or send information.\n\n\nAJ_Status AJSVC_ConnectedHandler(AJ_BusAttachment* busAttachment)\n{\nAJ_BusSetPasswordCallback(\nbusAttachment, PasswordCallback);\n/* Configure timeout for the link to the daemon bus */\n   AJ_SetBusLinkTimeout(\nbusAttachment, 60); // 60 seconds AJ_Status status = AJ_OK;\ndo {\n#ifdef CONFIG_SERVICE\n   if (status == AJ_OK) {\n      status = AJCFG_ConnectedHandler(busAttachment);\n   }\n#endif\n#ifdef NOTIFICATION_SERVICE_PRODUCER\n   if (status == AJ_OK) {\n      status = AJNS_Producer_ConnectedHandler(busAttachment);\n   }\n#endif\n#ifdef CONTROLPANEL_SERVICE\n   if (status == AJ_OK) {\n      status = AJCPS_ConnectedHandler(busAttachment);\n   }\n#endif\n#ifdef NOTIFICATION_SERVICE_CONSUMER\n   if (status == AJ_OK) {\n      status = AJNS_Consumer_ConnectedHandler(busAttachment);\n   }\n#endif\n   return status;\n   } while (0);\n   AJ_Printf(\nService ConnectedHandler returned an error %s\\n\n,\n      (AJ_StatusText(status)));\n}\n\n\n\n\nMessage processor\n\n\nWhen the AllJoyn framework receives a message from the\nconnected message bus, it must be processed and handled.\nThe processing of an incoming message is performed in a\nchain of common services, as well as with the application\nand individual services' message processors. Each message\nprocessor evaluates the message, delegates its handling if\nrelevant, and returns whether it handled the message or not.\nThe incoming message is returned by a call to \nAJ_UnmarshalMsg()\n.\n\n\nAJ_Message msg;\nAJ_Status status = AJ_UnmarshalMsg(\nbusAttachment, \nmsg, 1000);\n...\nif (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n   serviceStatus = AJApp_MessageProcessor(\nbusAttachment, \nmsg, \nstatus);\n}\n\n\n\n\nAt the conclusion of the processing chain after calling\n\nAJApp_MessageProcessor()\n, any unprocessed messages are\nprocessed by the default AllJoyn message processor.\n\n\nif (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n   //Pass to the built-in bus message handlers status = AJ_BusHandleBusMessage(\nmsg);\n}\n\n\n\n\nCommon services manager processor\n\n\nThe common services message processor handles common services'\nmessages that deal with session establishment and teardown.\nIt delegates the processed message to the relevant registered services.\n\n\nAJSVC_ServiceStatus AJSVC_MessageProcessorAndDispatcher(AJ_BusAttachment*\nbusAttachment,\n   AJ_Message* msg, AJ_Status* status)\n{\n   AJSVC_ServiceStatus serviceStatus = AJSVC_SERVICE_STATUS_NOT_HANDLED;\n\n   if (msg-\nmsgId == AJ_REPLY_ID(AJ_METHOD_JOIN_SESSION))\n      { // Process all incoming replies to join a session and\n         pass session state change to all services uint32_t replyCode = 0;\n      uint32_t sessionId = 0;\n      uint8_t sessionJoined = FALSE;\n      uint32_t joinSessionReplySerialNum = msg-\nreplySerial;\n      if (msg-\nhdr-\nmsgType == AJ_MSG_ERROR) { AJ_AlwaysPrintf((\nJoinSessionReply: AJ_METHOD_JOIN_SESSION:\nAJ_ERR_FAILURE\\n\n));\n      *status = AJ_ERR_FAILURE;\n   } else {\n      *status = AJ_UnmarshalArgs(msg, \nuu\n, \nreplyCode, \nsessionId);\n      if (*status != AJ_OK) {\n         AJ_AlwaysPrintf((\nJoinSessionReply: failed to unmarshal\\n\n));\n      } else {\n         if (replyCode == AJ_JOINSESSION_REPLY_SUCCESS) { AJ_AlwaysPrintf((\nJoinSessionReply:\nAJ_JOINSESSION_REPLY_SUCCESS with sessionId=%u and replySerial=%u\\n\n, sessionId, joinSessionReplySerialNum));\n      sessionJoined = TRUE;\n      } else {\n         AJ_AlwaysPrintf((\nJoinSessionReply: AJ_ERR_FAILURE\\n\n));\n         *status = AJ_ERR_FAILURE;\n      }\n   }\n}\nif (sessionJoined) {\n   serviceStatus = SessionJoinedHandler(busAttachment, sessionId, joinSessionReplySerialNum);\n   } else {\n      serviceStatus = SessionRejectedHandler(busAttachment, sessionId, joinSessionReplySerialNum, replyCode);\n   }\n      if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) { AJ_ResetArgs(msg);\n   }\n   } else if (msg-\nmsgId == AJ_SIGNAL_SESSION_LOST || msg-\nmsgId == AJ_SIGNAL_SESSION_LOST_WITH_REASON) {\n      // Process all incoming LeaveSession replies and lost session signals and pass session state change to all services\n      uint32_t sessionId = 0;\n      uint32_t reason = 0;\n      if (msg-\nmsgId == AJ_SIGNAL_SESSION_LOST_WITH_REASON) {\n         *status = AJ_UnmarshalArgs(msg, \nuu\n, \nsessionId, \nreason);\n      } else {\n         *status = AJ_UnmarshalArgs(msg, \nu\n, \nsessionId);\n      }\n      if (*status != AJ_OK) {\n         AJ_AlwaysPrintf((\nJoinSessionReply: failed to marshal\\n\n));\n      } else {\n         AJ_AlwaysPrintf((\nSession lost: sessionId = %u, reason = %u\\n\n, sessionId, reason));\n         serviceStatus = SessionLostHandler(busAttachment, sessionId, reason);\n\n         if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) { AJ_ResetArgs(msg);\n         }\n      }\n   } else {\n#ifdef CONFIG_SERVICE\n      if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n         serviceStatus = AJCFG_MessageProcessor(busAttachment, msg, status);\n      }\n#endif\n#ifdef ONBOARDING_SERVICE\n      if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n         serviceStatus = AJOBS_MessageProcessor(busAttachment, msg, status);\n      }\n#endif\n#ifdef NOTIFICATION_SERVICE_PRODUCER\n      if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\nstatus);\n      }\n      serviceStatus = AJNS_Producer_MessageProcessor(busAttachment, msg,\n      }\n#endif\n#ifdef NOTIFICATION_SERVICE_CONSUMER\n      if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n         serviceStatus = AJNS_Consumer_MessageProcessor(busAttachment, msg,\nstatus);\n      }\n#endif\n#ifdef CONTROLPANEL_SERVICE\n      if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n         serviceStatus = AJCPS_MessageProcessor(busAttachment, msg, status);\n      }\n#endif\n   }\n   return serviceStatus;\n}\n\n\n\n\nCommon (service-side) message processor\n\n\nService-side services such as the Notification service framework's\nProducer, are delegated to check whether incoming requests for\njoining a session is targeted at it.\n\n\nuint8_t AJSVC_CheckSessionAccepted(uint16_t port,\n   uint32_t sessionId, char* joiner)\n{\n   uint8_t session_accepted = FALSE;\n#ifdef NOTIFICATION_SERVICE_PRODUCER\n   session_accepted |= AJNS_Producer_CheckSessionAccepted(port, sessionId, joiner);\n#endif\n\n#ifdef CONTROLPANEL_SERVICE\n   session_accepted |= AJCPS_CheckSessionAccepted(port, sessionId, joiner);\n#endif\n   return session_accepted;\n}\n\n\n\n\nCommon (client-side) message processor\n\n\nClient-side services such as the Notification service framework's\nConsumer, are delegated the replies to join session requests and\nsession lost signals.\n\n\nAJSVC_ServiceStatus\n   SessionJoinedHandler(AJ_BusAttachment*\n   busAttachment, uint32_t sessionId, uint32_t replySerialNum)\n{\n   AJSVC_ServiceStatus serviceStatus = AJSVC_SERVICE_STATUS_NOT_HANDLED;\n\n#ifdef NOTIFICATION_SERVICE_CONSUMER\n   if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n      serviceStatus = AJNS_Consumer_SessionJoinedHandler(busAttachment, sessionId, replySerialNum);\n   }\n#endif\n\n   return serviceStatus;\n}\n\nstatic AJSVC_ServiceStatus\n   SessionRejectedHandler(AJ_BusAttachment*\n   busAttachment, uint32_t sessionId, uint32_t replySerialNum, uint32_t replyCode)\n{\n   AJSVC_ServiceStatus serviceStatus = AJSVC_SERVICE_STATUS_NOT_HANDLED;\n\n#ifdef NOTIFICATION_SERVICE_CONSUMER\n   if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n      serviceStatus = AJNS_Consumer_SessionRejectedHandler(busAttachment, replySerialNum, replyCode);\n   }\n#endif\n\n   return serviceStatus;\n}\n\nstatic AJSVC_ServiceStatus\n   SessionLostHandler(AJ_BusAttachment*\n   busAttachment, uint32_t sessionId, uint32_t reason)\n{\n   AJSVC_ServiceStatus serviceStatus = AJSVC_SERVICE_STATUS_NOT_HANDLED;\n\n#ifdef NOTIFICATION_SERVICE_CONSUMER\n   if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n      serviceStatus = AJNS_Consumer_SessionLostHandler(busAttachment, sessionId, reason);\n   }\n#endif\n\n   return serviceStatus;\n}\n\n\n\n\nCommon application message processors\n\n\nThe application message processor is responsible for delegating\nany incoming message to all the relevant message processors.\n\nAJApp_MessageProcessor\n (provided below) performs the following tasks:\n\n\n\n\nIdentifies incoming session requests and delegates the\nrequests to the message processors in the relevant services\nvia a call to \nAJSVC_CheckSessionAccepted\n method. See \nCommon services\nmanager processor\n.\n\n\nIdentify and handle any replies to the service initialization\nrequests sent in \nAJSVC_ConnectedHandler\n method. See \nConnected handler\n.\n\n\nPass any other messages to the common services' message\nprocessor \nAJSVC_MessageProcessorAndDispatcher\n method which\nidentifies service-related messages and handles them.\nSee \nCommon (service-side) message processor\n.\n\n\n\n\nAJSVC_ServiceStatus AJApp_MessageProcessor(AJ_BusAttachment* busAttachment,\n   AJ_Message* msg, AJ_Status* status)\n{\n   AJSVC_ServiceStatus serviceStatus = AJSVC_SERVICE_STATUS_HANDLED;\n   uint16_t port;\n   char* joiner;\n   uint32_t sessionId = 0;\n   uint8_t session_accepted = FALSE;\n\n   if (msg-\nmsgId == AJ_METHOD_ACCEPT_SESSION) { // Process all\n      incoming request to join a session and pass request for acceptance by all services\n      *status = AJ_UnmarshalArgs(msg, \nqus\n, \nport, \nsessionId, \njoiner);\n      if (*status != AJ_OK) {\n         return serviceStatus;\n      }\n      session_accepted |= (port == servicePort);\n      session_accepted |= AJSVC_CheckSessionAccepted(port, sessionId, joiner);\n      *status = AJ_BusReplyAcceptSession(msg, session_accepted);\n      AJ_AlwaysPrintf((\n%s session session_id=%u joiner=%s for port %u\\n\n, (session_accepted ?\n         \nAccepted\n : \nRejected\n), sessionId, joiner, port));\n   } else {\n      switch (currentServicesInitializationState) {\n      case INIT_SERVICES_PORT:\n         if (msg-\nmsgId == AJ_REPLY_ID(AJ_METHOD_BIND_SESSION_PORT)) {\n            currentServicesInitializationState = nextServicesInitializationState;\n         }\n         break;\n\n      case INIT_ADVERTISE_NAME:\n         if (msg-\nmsgId == AJ_REPLY_ID(AJ_METHOD_ADVERTISE_NAME)) {\n            currentServicesInitializationState = nextServicesInitializationState;\n         }\n         break;\n\n      default:\n         serviceStatus = AJSVC_MessageProcessorAndDispatcher(busAttachment, msg, status);\n         break;\n      }\n   }\n\n   return serviceStatus;\n}\n\n\n\n\nDoWork handler\n\n\nWhen there is a connection and the message loop is idling,\nthe individual registered services' sample DoWork callbacks\nare called to allow the service's business logic to perform\nthe service's sample business logic. These callbacks are implemented\nin the corresponding service's sample application code.\n\n\nNOTE:\n The message loop is considered idling when no messages\nare ready to marshal, and the MCU will sleep to conserve\nresources for a small period of time.\n\n\nvoid AJApp_DoWork(AJ_BusAttachment* busAttachment)\n{\n   #ifdef CONFIG_SERVICE\n   Config_DoWork(busAttachment);\n   #endif\n\n   #ifdef NOTIFICATION_SERVICE_PRODUCER\n   NotificationProducer_DoWork(busAttachment);\n   #endif\n\n   #ifdef NOTIFICATION_SERVICE_CONSUMER\n   NotificationConsumer_DoWork(busAttachment);\n   #endif\n\n   #ifdef CONTROLPANEL_SERVICE\n   Controllee_DoWork(busAttachment);\n   #endif\n}\n\n\n\n\nDisconnect handler\n\n\nWhen the application needs to perform a graceful disconnect\nfrom the Wi-Fi router, the application and individual registered\nservices get an opportunity to relinquish their resources and\nundo any registered state with the Wi-Fi router that was\nestablished during connection or operation. The disconnect\nhandlers are called to allow for this cleanup work to be performed.\nComplete the steps outlined in \nInitialize the AllJoyn framework\n\nthrough \nConnect to the AllJoyn bus\n.\n\n\nAJ_Status AJSVC_DisconnectHandler(AJ_BusAttachment* busAttachment)\n{\n   #ifdef CONFIG_SERVICE\n   AJCFG_DisconnectHandler(busAttachment);\n   #endif\n\n   #ifdef ONBOARDING_SERVICE\n   AJOBS_DisconnectHandler(busAttachment);\n   #endif\n\n   #ifdef NOTIFICATION_SERVICE_CONSUMER\n   AJNS_Consumer_DisconnectHandler(busAttachment);\n   #endif\n\n   #ifdef NOTIFICATION_SERVICE_PRODUCER\n   AJNS_Producer_DisconnectHandler(busAttachment);\n   #endif\n\n   #ifdef CONTROLPANEL_SERVICE\n   AJCPS_DisconnectHandler(busAttachment);\n   #endif\n}\n\n\n\n\nImplement the PropertyStore\n\n\nThe PropertyStore module is required by principally by the\nAbout feature (to store the AboutData), the Configuration\nservice framework (to store the ConfigData), and may be used\nalso by other service frameworks (such as the Notification\nservice framework's Producer to retrieve required application\nand device identifying properties). The module's API is specified\nin propertyStore.h.\n\n\nThe About feature uses the PropertyStore to retrieve the\nprovisioned (default and runtime) values for the AboutData\nfields listed in \nAboutData fields\n.\nSee the \nAbout Interface Definition\n\nfor more information.\n\n\nAboutData fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nAnnounced\n\n\nType\n\n\n\n\n\n\n\n\n\n\nAppId\n\n\nyes\n\n\nyes\n\n\nay\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceName\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceId\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nAppName\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nManufacturer\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nModelNumber\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nSupportedLanguages\n\n\nyes\n\n\nno\n\n\nas\n\n\n\n\n\n\nDescription\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nDateofManufacture\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSoftwareVersion\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nAJSoftwareVersion\n\n\nyes\n\n\nno\n\n\ns\n\n\n\n\n\n\nHardwareVersion\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\nSupportUrl\n\n\nno\n\n\nno\n\n\ns\n\n\n\n\n\n\n\n\nThe Configuration service framework uses the PropertyStore\nto retrieve the provisioned (default and runtime) values\nfor the ConfigData and persist the values manipulated by\nthe Config interface listed in \nConfig data fields\n.\n\n\nSee the \nConfiguration Interface Definition\n for more information.\n\n\nConfig data fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nAnnounced\n\n\nType\n\n\n\n\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nDeviceName\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\n\n\n\nMaxLength\n\n\nno\n\n\nyes\n\n\nq\n\n\n\n\n\n\n\n\nPropertyStore example implementation\n\n\nThe PropertyStore.c file in AppsCommon is an example PropertyStore\nimplementation that supports the requirements of the About feature\nand Configuration service framework, and is included in the ServerSample code.\n\n\nThe PropertyStore uses the field definitions that are defined\nin the PropertyStore.c file. A provisioning example is provided\nin the ServerSample code and is reviewed in the following subsections.\n\n\nField indexes\n\n\nThe following enumeration is used to define the fields' indexes.\nThe enumeration is used as an index into the various fields' tables.\n\n\nThe enumerationinteger values are scoped into the following\nsubsets delimited by the respectively named alias counter values:\n\n\n\n\nRuntime keys (AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS) -\nThis subset contains the fields that are initialized and persisted\non first run (or after factory reset).\n\n\nMandatory keys (AJSVC_PROPERTY_STORE_NUMBER_OF_MANDATORY_KEYS)\n\n\nThis subset contains the fields that are mandatory as per the\ndefinition of the About feature and Configuration Service Framework\nin \nAboutData fields\n.\n\n\nALL keys (AJSVC_PROPERTY_STORE_NUMBER_OF_KEYS) - This subset\ncontains ALL the fields.\n\n\n\n\nNOTE:\n Do NOT remove the counters (AJSVC_PROPERTY_STORE_NUMBER_OF_*)\nas the PropertyStore code refers to them!\n\n\ntypedef enum _AJSVC_PropertyStoreFieldIndices {\n   AJSVC_PROPERTY_STORE_ERROR_FIELD_INDEX = -1,\n   //Start of keys\n   AJSVC_PROPERTY_STORE_DEVICE_ID,\n   AJSVC_PROPERTY_STORE_APP_ID,\n   AJSVC_PROPERTY_STORE_DEVICE_NAME,\n#ifndef CONFIG_SERVICE\n   AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS,\n   //End of runtime keys\n   AJSVC_PROPERTY_STORE_DEFAULT_LANGUAGE = AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS,\n   AJSVC_PROPERTY_STORE_APP_NAME,\n#else AJSVC_PROPERTY_STORE_DEFAULT_LANGUAGE,\n   AJSVC_PROPERTY_STORE_PASSCODE,\n   AJSVC_PROPERTY_STORE_REALM_NAME,\n   AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS,\n   //End of runtime keys\n   AJSVC_PROPERTY_STORE_APP_NAME = AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS,\n#endif AJSVC_PROPERTY_STORE_DESCRIPTION,\n   AJSVC_PROPERTY_STORE_MANUFACTURER,\n   AJSVC_PROPERTY_STORE_MODEL_NUMBER,\n   AJSVC_PROPERTY_STORE_DATE_OF_MANUFACTURE,\n   AJSVC_PROPERTY_STORE_SOFTWARE_VERSION,\n   AJSVC_PROPERTY_STORE_AJ_SOFTWARE_VERSION,\n#ifdef CONFIG_SERVICE\n   AJSVC_PROPERTY_STORE_MAX_LENGTH,\n#endif\n   AJSVC_PROPERTY_STORE_NUMBER_OF_MANDATORY_KEYS,\n   //End of mandatory keys\n   AJSVC_PROPERTY_STORE_HARDWARE_VERSION = AJSVC_PROPERTY_STORE_NUMBER_OF_MANDATORY_KEYS,\n   AJSVC_PROPERTY_STORE_SUPPORT_URL,\n   AJSVC_PROPERTY_STORE_NUMBER_OF_KEYS,\n  //End of About keys\n} AJSVC_PropertyStoreFieldIndices;\n\n\n\n\nSupportedLanguages and language indexes\n\n\nThe following constants are used to define special language indexes.\nThe index is used within the supported languages' tables and the\nvarious fields' tables.\n\n\n#define AJSVC_PROPERTY_STORE_ERROR_LANGUAGE_INDEX   -1\n#define AJSVC_PROPERTY_STORE_NO_LANGUAGE_INDEX  0\n\n\n\n\nThe following definitions and structures in PropertyStoreOEMProvisioning.h\nare needed by the sample application in order to provision for\nthe sample PropertyStore implementation.\n\n\nextern const uint8_t AJSVC_PROPERTY_STORE_NUMBER_OF_LANGUAGES;\nextern const char** propertyStoreDefaultLanguages;\n#define LANG_VALUE_LENGTH 7\n\n\n\n\nThe language names are provisioned in the ServerSample's ServerSample.c\nas English and Austrian dialect of German.\n\n\nstatic const char DEFAULT_LANGUAGE[] = \nen\n;\nstatic const char* DEFAULT_LANGUAGES[] = { DEFAULT_LANGUAGE };\nstatic const char SUPPORTED_LANG2[] = \nde-AT\n;\nstatic const char* SUPPORTED_LANGUAGES[] = { DEFAULT_LANGUAGE, SUPPORTED_LANG2\n};\nconst char** propertyStoreDefaultLanguages = SUPPORTED_LANGUAGES;\nconst uint8_t AJSVC_PROPERTY_STORE_NUMBER_OF_LANGUAGES = sizeof(SUPPORTED_LANGUAGES) / sizeof(char*);\n\n\n\n\nNOTE:\n The language names are according to the IETF language\ntags specified by RFC 5646. The example implementation supports\nonly simple languages and extended languages or variant sub-tags\n(regional) languages. Hence, \nLANG_NAME_LEN\n is defined as 7.\n\n\nField definition structure\n\n\nThe following bit field structure is used to define the\nbehavior of each field with respect to its exposure to\nremote clients various calls.\n\n\ntypedef struct _PropertyStoreEntry {    const char* keyName;\n   // The property key name as shown in About and Config documentation\n   // msb=public/private; bit number 3 - initialise once;\n   bit number 2 - multi-language value; bit number 1 - announce;\n   bit number 0 - read/write uint8_t mode0Write : 1; uint8_t mode1Announce : 1; uint8_t mode2MultiLng : 1;\n   uint8_t mode3Init : 1;\n   uint8_t mode4 : 1;\n   uint8_t mode5 : 1;\n   uint8_t mode6 : 1;\n   uint8_t mode7Public : 1;\n} PropertyStoreEntry;\n\n\n\n\nField definitions\n\n\nThe following bit field structure is used to define the\nbehavior of each field with respect to its exposure to\nremote clients various calls.\n\n\nextern const PropertyStoreEntry propertyStoreProperties[AJSVC_PROPERTY_STORE_NUMBER_OF_KEYS];\nconst PropertyStoreEntry propertyStoreProperties[AJSVC_PROPERTY_STORE_NUMBER_OF_KEYS] =\n{\n// { \nKey Name  \n, W, A, M, I .. . . ., P },\n   { \nDeviceId\n,    0, 1, 0, 1, 0, 0, 0, 1 },\n   { \nAppId\n,   0, 1, 0, 1, 0, 0, 0, 1 },\n#ifndef CONFIG_SERVICE\n   { \nDeviceName\n,  0, 1, 0, 1, 0, 0, 0, 1 },\n#else\n   { \nDeviceName\n,\n#endif\n// Add other persisted keys above this line\n#ifndef CONFIG_SERVICE\n   { \nDefaultLanguage\n, 0, 1, 0, 0, 0, 0, 0, 1 },\n#else\n   { \nDefaultLanguage\n,\n#endif\n#ifdef CONFIG_SERVICE\n   { \nPasscode\n,    1, 0, 0, 0, 0, 0, 0, 0 },\n   { \nRealmName\n,   1, 0, 0, 0, 0, 0, 0, 0 },\n#endif\n// Add other configurable keys above this line\n   { \nAppName\n, 0, 1, 0, 0, 0, 0, 0, 1 },\n   { \nDescription\n, 0, 0, 1, 0, 0, 0, 0, 1 },\n   { \nManufacturer\n,    0, 1, 1, 0, 0, 0, 0, 1 },\n   { \nModelNumber\n, 0, 1, 0, 0, 0, 0, 0, 1 },\n   { \nDateOfManufacture\n,   0, 0, 0, 0, 0, 0, 0, 1 },\n   { \nSoftwareVersion\n, 0, 0, 0, 0, 0, 0, 0, 1 },\n   { \nAJSoftwareVersion\n,   0, 0, 0, 0, 0, 0, 0, 1 },\n#ifdef CONFIG_SERVICE\n   { \nMaxLength\n,   0, 0, 1, 0, 0, 0, 0, 1 },\n#endif\n// Add other mandatory about keys above this line\n   { \nHardwareVersion\n, 0, 0, 0, 0, 0,  0, 0,   1   },\n   { \nSupportUrl\n,  0, 0, 1, 0, 0,  0, 0,   1   },\n// Add other optional about keys above this line\n};\n\n\n\n\nField default values\n\n\nThe following array is used to provision the fields' default values:\n\n\nextern const char** propertyStoreDefaultValues[AJSVC_PROPERTY_STORE_NUMBER_OF_KEYS];\n// Array of Array of size 1 or AJSVC_PROPERTY_STORE_NUMBER_OF_LANGUAGES\n   constant buffers depending on whether the property is multilingual\n\n\n\n\nThe following array is a snippet of code for provisioning for the\nConfiguration service framework based on the ServerSample's ServerSample.c file:\n\n\n#ifdef CONFIG_SERVICE\nstatic const char* DEFAULT_PASSCODES[] = { \n303030303030\n };\n// HEX encoded { '0', '0', '0', '0', '0', '0' }\n#endif\nstatic const char* DEFAULT_APP_NAMES[] = { \nConfiguree\n };\nstatic const char DEFAULT_DESCRIPTION_LANG1[] = \nAC IOE device\n;\nstatic const char DEFAULT_DESCRIPTION_LANG2[] = \nMein erstes IOE Geraet\n;\nstatic const char* DEFAULT_DESCRIPTIONS[] = { DEFAULT_DESCRIPTION_LANG1, DEFAULT_DESCRIPTION_LANG2 };\nstatic const char DEFAULT_MANUFACTURER_LANG1[] = \nCompany A(EN)\n;\nstatic const char DEFAULT_MANUFACTURER_LANG2[] = \nFirma A(DE-AT)\n;\nstatic const char* DEFAULT_MANUFACTURERS[] = { DEFAULT_MANUFACTURER_LANG1, DEFAULT_MANUFACTURER_LANG2 };\nstatic const char* DEFAULT_DEVICE_MODELS[] = { \n0.0.1\n };\nstatic const char* DEFAULT_DATE_OF_MANUFACTURES[] = { \n2014-02-01\n };\nstatic const char* DEFAULT_SOFTWARE_VERSIONS[] = { \n0.0.1\n };\nstatic const char* DEFAULT_HARDWARE_VERSIONS[] = { \n0.0.1\n };\nstatic const char DEFAULT_SUPPORT_URL_LANG1[] = \nwww.company_a.com\n;\nstatic const char DEFAULT_SUPPORT_URL_LANG2[] = \nwww.company_a.com/de-AT\n;\nstatic const char* DEFAULT_SUPPORT_URLS[] = { DEFAULT_SUPPORT_URL_LANG1, DEFAULT_SUPPORT_URL_LANG2 };\n\nconst char** propertyStoreDefaultValues[AJSVC_PROPERTY_STORE_NUMBER_OF_KEYS] =\n{\n// \nDefault Values per language\n,    \nKey Name\n\n   NULL,    /*DeviceId*/\n   NULL,    /*AppId*/\n   NULL,    /*DeviceName*/\n// Add other persisted keys above this line\n   DEFAULT_LANGUAGES,   /*DefaultLanguage*/\n#ifdef CONFIG_SERVICE\n   DEFAULT_PASSCODES,   /*Passcode*/ NULL,  /*RealmName*/\n#endif\n// Add other configurable keys above this line\n   DEFAULT_APP_NAMES,            /*AppName*/\n   DEFAULT_DESCRIPTIONS,     /*Description*/\n   DEFAULT_MANUFACTURERS,    /*Manufacturer*/\n   DEFAULT_DEVICE_MODELS,    /*ModelNumber*/\n   DEFAULT_DATE_OF_MANUFACTURES, /*DateOfManufacture*/\n   DEFAULT_SOFTWARE_VERSIONS,    /*SoftwareVersion*/\n   NULL,                     /*AJSoftwareVersion*/\n#ifdef CONFIG_SERVICE\n   NULL,                     /*MaxLength*/\n#endif\n// Add other mandatory about keys above this line\n   DEFAULT_HARDWARE_VERSIONS,    /*HardwareVersion*/\n   DEFAULT_SUPPORT_URLS,     /*SupportUrl*/\n// Add other optional about keys above this line\n};\n\n\n\n\nField runtime values and persistence\n\n\nThe following structure is used to store runtime-provisioned\nvalue or remotely modified value.\n\n\ntypedef struct _PropertyStoreRuntimeEntry {\n   char** value;    // An array of size 1 or\nAJSVC_PROPERTY_STORE_NUMBER_OF_LANGUAGES mutable buffers\ndepending on whether the property is multilingual\n   uint8_t size; // The size of the value buffer(s)\n} PropertyStoreConfigEntry;\n\n\n\n\nThe various length constants are appropriately set for each\nfield in order to optimize memory usage.\n\n\n#define LANG_VALUE_LENGTH 7\n#define KEY_VALUE_LENGTH 10\n#define MACHINE_ID_LENGTH (UUID_LENGTH * 2)\n#define DEVICE_NAME_VALUE_LENGTH 32\n#ifdef CONFIG_SERVICE\n#define PASSWORD_VALUE_LENGTH (AJ_ADHOC_LEN * 2)\n#endif\n\n\n\n\nThe following array is used to maintain the runtime Config\nfields' modified values and is implemented as part of PropertyStore.c file.\n\n\nextern PropertyStoreConfigEntry propertyStoreRuntimeValues[AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS]\n\n\n\n\nThe following array is a snippet of code for provisioning\nfor the Configuration service framework based on the ServerSample's\nServerSample.c file:\n\n\nstatic char machineIdVar[MACHINE_ID_LENGTH + 1] = { 0 };\nstatic char* machineIdVars[] = { machineIdVar };\nstatic char deviceNameVar[DEVICE_NAME_VALUE_LENGTH + 1] = { 0 };\nstatic char* deviceNameVars[] = { deviceNameVar };\nstatic char defaultLanguageVar[LANG_VALUE_LENGTH + 1] = { 0 };\nstatic char* defaultLanguageVars[] = { defaultLanguageVar };\n#ifdef CONFIG_SERVICE\nstatic char passcodeVar[PASSWORD_VALUE_LENGTH + 1] = { 0 };\nstatic char* passcodeVars[] = { passcodeVar };\nstatic char realmNameVar[KEY_VALUE_LENGTH + 1] = { 0 };\nstatic char* realmNameVars[] = { realmNameVar };\n#endif\n\nPropertyStoreConfigEntry PropertyStoreRuntimeValues[AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS] =\n{\n// {\nBuffers for Values per language\n, \nBuffer Size\n},  \nKey Name\n\n   { machineIdVars, MACHINE_ID_LENGTH + 1 },     /*DeviceId*/\n   { machineIdVars, MACHINE_ID_LENGTH + 1 },     /*AppId*/\n   { deviceNameVars,    DEVICE_NAME_VALUE_LENGTH + 1 },  /*DeviceName*/\n// Add other persisted keys above this line\n   { defaultLanguageVars,   LANG_VALUE_LENGTH + 1 }, /*DefaultLanguage*/\n#ifdef CONFIG_SERVICE\n   { passcodeVars,  PASSWORD_VALUE_LENGTH + 1 },    /*Passcode*/\n   { realmNameVars, KEY_VALUE_LENGTH + 1 },         /*RealmName*/\n#endif\n\n\n\n\nNOTE:\n The size entry needs to match the actual allocation\nbuffer length that is provisioned for each field. Refer to\nPropertyStore.c \nPropertyStore_Init()\n and \nInitMandatoryPropertiesInRAM()\n\nfor an example runtime initialization of the persisted fields.\n\n\nIf the value of a Config field (such as DeviceName) was modified,\nit is stored in the array under the relevant language.\n\n\nIf \nResetConfigurations()\n for this field (for some given language)\nor a \nglobalFactoryReset()\n has been remotely called, the value\n(for the given language) will be reset to an empty string.\n\n\nIn order to conserve memory a single shared buffer machineIdVars\nis used for both the AppId and DeviceId fields.\n\n\nImplementation and provisioning information\n\n\nThe bit field values in the example are an implementation of\nthe About feature and Configuration service framework per the\n\nAbout Interface Definition\n and\n\nConfiguration Interface Definition\n.\nYou should not require any change in these and only alter\nthe String values of the fields. You may of course remove\noptional fields such as DateOfManufacture.\n\n\nDepending on the \nAJSVC_PROPERTY_STORE_NUMBER_OF_LANGUAGES\n\nyou've provisioned, this structure must be populated with as\nmany default values. Use NULL for non-provisioned values such\nas when the field is non-language dependent (e.g., DeviceName).\n\n\nWhen provisioning a non-language dependent field, the first\nvalue (at index \nAJSVC_PROPERTY_STORE_NO_LANGUAGE_INDEX\n) is\nused and all other values are ignored, yet must be initialized.\n\n\nAdding custom field definition and values\n\n\nComplete the following steps to add your own custom fields.\n\n\n\n\nDecide to which subset the field belongs and add it to the enumeration\n\nAJSVC_PropertyStoreFieldIndices\n accordingly.\n\n\nAdd a new field entry at the respective index to the propertyStoreProperties.\n\n\nDecide whether the field is publicly accessible from\nremote clients. If the field is public, set the \nmode7Public\n bit to 1.\n\n\nDecide whether the field is to be allowed to be configured\nremotely through the Configuration service framework. If the\nfield is updateable, then set the \nmode0Write\n bit to 1.\n   \nNOTE:\n If you set this bit, the field's index must be included\n   in the Persisted or Config keys subsets.\n\n\nDecide whether the field is to be includedin the Announcement.\nIf the field is announced, then set the \nmode1Announce\n bit to 1.\n  \nNOTE:\n It is recommended to limit the inclusion of a field in\n  the Announcement according to its immediate relevance to the\n  relevant service framework's discovery. Only the value associated\n  with the currentDefaultLanguage will be sent in the Announcement.\n\n\nDecide whether the field is multi-language and add the relevant\nvalues for the provisioned languages. If the field is multi-language,\nthen set the \nmode2MultiLng\n bit to\n1.\n\n\nDecide whether the field is to be provisioned dynamically\nin code and persisted during first-time (or post-factory reset)\ndevice startup. If the field is to be initialized once, then\nset the \nmode3Init\n bit to 1 and add the relevant code to initialize it.\n\n\n\n\nRefer to PropertyStore.c \nPropertyStore_Init()\n and\n   \nInitMandatoryPropertiesInRAM()\n for an example setup\n   for the DeviceId and AppId fields.\n\n\nNOTE:\n If you set this bit, the field's index must be\n  included in the Persisted keys subsets.\n8. Add relevant validation of updated value for your custom\nkey by modifying the default implementation of \nIsValueValid()\n\nin ConfigSample.c file.\n   \nc\n   uint8_t IsValueValid(const char* key, const char* value) {return TRUE;}\n\n9. Add entry in corresponding index of \npropertyStoreDefaultValues\n\nto provision default value(s).\n10. Add entry in corresponding index of \npropertyStoreRuntimeValues\n\nto provision for runtime value(s) buffer(s).\n\n\nNOTE:\n The example implementation of PropertyStore supports\nproperties with value of type String ('s') only. If your\nproperty must be of a different type, you must provision the\ndefault value as a String and perform the relevant de/serialization\non the client side.\n\n\nThe following shows an example of how to add a configurable\nproprietary property named \"MyProperty\" that has a language-dependent value.\n* Add index MyProperty to \nAJSVC_PropertyStoreFieldIndices\n:\n\n\nc\n  MyProperty, AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS,\n\n\n\n\nAdd a new entry to the \npropertyStoreProperties\n array in\nthe index which corresponds to the enumeration value defined above:\n\n\n\n\nc\n  //{ \"Key Name \", W, A, M, I .. . . ., P },\n  { \"MyProperty\",   1, 0, 1, 0, 0, 0, 0, 1 },\n  // Add other configurable keys above this line\n\n\n\n\nAdd a new entry to the \npropertyStoreDefaultValues\n array\nin the index which corresponds to the enumeration value defined above:\n\n\n\n\nc\n  static const char DEFAULT_MYPROPERTY_LANG1[] = \"My\";\n  static const char DEFAULT_MYPROPERTY_LANG2[] = \"Mein\";\n  static const char* DEFAULT_MYPROPERTIES[] =\n  { DEFAULT_ MYPROPERTY_LANG1, DEFAULT_ MYPROPERTY_LANG2 };\n  ...\n  DEFAULT_MYPROPERTIES, /*MyProperty*/\n  // Add other configurable keys above this line\n\n\nImplement remote callbacks\n\n\nCallbacks are provided by the service frameworks to allow for\nthe application writer to react to various remotely initiated\ncalls and events. In particular, the Configuration service\nframework has callbacks that allow for the application writer\nto react to remote initiated events and the Controlee part\nof the Control Panel service framework has callbacks that allow\nfor the application writer to write the business logic for the ControlPanel model.\n\n\nSee the \nConfiguration API Guide\n and the\n\nControl Panel API Guide\n, respectively, for more information.\n\n\nIntegrate the Configuration service framework with an\n\n\napplication's AuthListener (optional)\n\n\nThe Configuration service framework and other AllJoyn service\nframework interface methods and signals require a secure\nAllJoyn connection. The application writer may choose to use\nan ALLJOYN_ECDHE_PSK authentication mechanism in its AuthListener implementation.\n\n\nThe Configuration service framework enables remote setting\nof a password that can be used as the secret for a key exchange\nauthentication mechanism. An example implementation that uses\nthis facility is included in the sample server application in\nthe ServicesHandlers.c file as shown below.\n\n\nuint32_t PasswordCallback(uint8_t* buffer, uint32_t bufLen)\n{\n   AJ_Status status = AJ_OK;\n   const char* hexPassword;\n   size_t hexPasswordLen;\n   uint32_t len = 0;\n\n   hexPassword = AJSVC_PropertyStore_GetValue(AJSVC_PROPERTY_STORE_PASSCODE);\n   if (hexPassword == NULL) {\n      AJ_ErrPrintf((\nPassword is NULL!\\n\n));\n      return len;\n   }\n   AJ_InfoPrintf((\nRetrieved password=%s\\n\n, hexPassword));\n   hexPasswordLen = strlen(hexPassword);\n   len = hexPasswordLen / 2;\n   status = AJ_HexToRaw(hexPassword, hexPasswordLen, buffer, bufLen);\n   if (status == AJ_ERR_RESOURCES) {\n      len = 0;\n   }\n\n   return len;\n}\n\n\n\n\nThe above implementation calls AJSVC_PropertyStore_GetValue (\nAJSVC_PROPERTY_STORE_PASSCODE\n)\nto retrieve the current password. This implementation relies on an\nextension in the sample implementation of the PropertyStore which\nwas extended with the Passcode field defined in the\n\nAJSVC_PropertyStoreFieldIndices\n enumeration. The field is remotely\nupdateable via a Configuration service framework session using the\ndedicated \nSetPasscode()\n method. The stored Passcode is limited\nto the size of 65, allowing for 64 characters long secret:\n\n\n#define PASSWORD_VALUE_LENGTH 65\n\n\n\n\nThis is achieved using the field definition that masks the\nfield as writable yet private, as shown in the \npropertyStoreProperties\n\ninitialization in PropertyStore.c:\n\n\n{\nPasscode\n, 1, 0, 0, 0, 0, 0, 0, 0 }\n\n\n\n\nThe default value is provisioned in ServerSample.c as follows:\n\n\n// HEX encoded { '0', '0', '0', '0', '0', '0' }\nstatic const char* DEFAULT_PASSCODES[] = { \n303030303030\n };\n\n\n\n\nand added to \npropertyStoreDefaultValues\n.\n\n\nDEFAULT_PASSCODES,\n/*Passcode*/\n\n\n\n\nSince the Passcode enumeration value is less than \nAJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS\n,\nit is also considered part of the \npropertyStoreRuntimeValues\n;\nits modified value is persisted.\n\n\nAlso, when \nSetPasscode()\n is called remotely, the \nSetPasscode()\n\ncallback is invoked with the following example implementation in\nConfigSample.c file as shown below:\n\n\nstatic AJ_Status SetPasscode(const char* daemonRealm, const uint8_t* newPasscode, uint8_t newPasscodeLen)\n{\n   AJ_Status status = AJ_OK;\n\n   char newStringPasscode[PASSWORD_VALUE_LENGTH + 1];\n   status = AJ_RawToHex(newPasscode, newPasscodeLen, newStringPasscode, sizeof(newStringPasscode), FALSE);\n   if (status != AJ_OK) {\n      return status;\n   }\n   if (AJSVC_PropertyStore_SetValue(AJSVC_PROPERTY_STORE_REALM_NAME, daemonRealm)\n\n AJSVC_PropertyStore_SetValue(AJSVC_PROPERTY_STORE_PASSCODE, newStringPasscode))\n{\n\n      status = AJSVC_PropertyStore_SaveAll();\n      if (status != AJ_OK) {\n         return status;\n      }\n      AJ_ClearCredentials();\n      status = AJ_ERR_READ; //Force disconnect of AJ and services to refresh current sessions\n   } else {\n\n      status = AJSVC_PropertyStore_LoadAll();\n      if (status != AJ_OK) {\n         return status;\n      }\n   }\n\n   return status;\n}\n\n\n\n\nThe above implementation stores the passcode as part of the\nPropertyStore persistence:\n\n\n\n\nIt calls \nAJSVC_PropertyStore_SetValue(Passcode, newStringPasscode)\n\nto set the value in RAM.\n\n\nIf successful, it also calls \nAJSVC_PropertyStore_SaveAll()\n\nto persist to NVRAM.\n\n\nFinally, \nAJ_ClearCredentials()\n is called to revoke all\ncurrent keys based on the old passcode.\n\n\n\n\nNOTES\n\n* The stored passcode is HEX and is limited to the size of 32,\nallowing for 16 bytes long secret:\n\n\nc\n  #define PASSWORD_VALUE_LENGTH (AJ_ADHOC_LEN * 2)\n\n\n The default value for the Passcode field is provisioned as\n'303030303030' (the HEX encoded string value for the byte array\n{ '0', '0', '0', '0', '0', '0' }) as per the requirement outlined\nin the \nConfiguration Interface Definition\n.\n\n The realm name is similarly persisted alongside the passcode\nby adding the RealmName field index to the \nAJSVC_PropertyStoreFieldIndices\n\nenumeration and provisioning for it in \npropertyStoreDefaultValues\n\nand \npropertyStoreRuntimeValues\n initialization.\n\n\nCompile the Thin Library Application\n\n\nThis process, including the directory and file layout,\ntoolchains, and procedures varies depending on the host and\ntarget platforms involved, and which AllJoyn service frameworks are being used.\n\n\nRefer to the target platform documentation that contains\ninstructions on how to organize and set up the build process\nto incorporate the necessary files to compile your Thin Library application.",
            "title": "Thin app"
        },
        {
            "location": "/develop/tutorial/thin-app/#build-an-application-using-the-thin-library",
            "text": "",
            "title": "Build an Application Using the Thin Library"
        },
        {
            "location": "/develop/tutorial/thin-app/#obtain-the-sample-app",
            "text": "Refer to the target platform documentation for instructions\nto download the sample apps.",
            "title": "Obtain the sample app"
        },
        {
            "location": "/develop/tutorial/thin-app/#reference-code",
            "text": "The reference code consists of a module that implements the\nmain function and a module the implements the services handlers.  Sample app modules     Module  Description      AboutSample  About sample code. Includes provisioning and business logic related to the About feature.    ConfigSample  Configuration service framework sample code. Includes provisioning and business logic that exercises the service's developers' API.    ControlPanelSample  ControlPanel service framework sample code. Includes provisioning and business logic that exercises the service's developers' API.    ControlPanelGenerated  ControlPanel service framework sample generated controllee model.    ControlPanelProvided  ControlPanel Service Framework sample provisioned controlee business logic that interacts with the generated model.    PropertyStore  PropertyStore implementation code; this supports all core services.    ServerSample  Main function for service application and provisioning code for all service frameworks.    ServicesHandlers  Sample code for services handlers.    SimpleNotificationProducerSample  Notification service framework sample Producer sample code. Includes provisioning and business logic that exercises the producer's developers' API.    SimpleNotificationConsumerSample  Notification Service Framework simple Consumer sample code. Includes provisioning and business logic that exercises the consumer's developers' API.",
            "title": "Reference code"
        },
        {
            "location": "/develop/tutorial/thin-app/#build-a-thin-library-server-app",
            "text": "Perform the following steps at a high level to build a Thin Library server app.   Create the base for the AllJoyn  application.  Call services handlers.  Implement the PropertyStore. See the  About API Guide \nfor instructions.  Implement remote callbacks.  (Optional) Integrate the Configuration service framework\nwith an AuthListener.",
            "title": "Build a Thin Library server app"
        },
        {
            "location": "/develop/tutorial/thin-app/#server-sample-app-walkthrough",
            "text": "The sample app sends an Announce signal with the About\ninterfaces, other registered servicess interfaces, and\nthe information stored in the PropertyStore. Depending on\nthe service frameworks included in the compilation, the\napplication can then send a notification, enable onboarding,\nstore configuration in NVRAM, or act as a Control Panel device.\nThe specific functionality of each service framework is covered\nin the appropriate service framework's API Guide.  See the  appropriate API Guide  for the\nservice framework you are working with.",
            "title": "Server sample app walkthrough"
        },
        {
            "location": "/develop/tutorial/thin-app/#implementing-a-thin-library-server-app",
            "text": "Create the base for the AllJoyn application  See the  About API Guide  for more information.  Initialize the AllJoyn framework  AJ_Initialize();  Initialize the PropertyStore  PropertyStore_Init();  Initialize the About feature  AJ_AboutSetIcon(aboutIconMimetype, aboutIconContent, aboutIconContentSize, aboutIconUrl);  Initialize each included service framework  The initialization of the service typically calls the corresponding\nStart method of the service's API passing the relevant settings\nand callbacks that integrate the service within the overall application\nprovisioning and business logic.  #ifdef CONFIG_SERVICE Config_Init();\n#endif\n#ifdef NOTIFICATION_SERVICE_PRODUCER NotificationProducer_Init();\n#endif\n#ifdef NOTIFICATION_SERVICE_PRODUCER NotificationConsumer_Init();\n#endif\n#ifdef CONTROLPANEL_SERVICE Controllee_Init();\n#endif  Set bus authentication password callback  SetBusAuthPwdCallback(MyBusAuthPwdCB);  Refer to the API Reference Manual for the SetBusAuthPwdCallback method.  Create main loop  static uint8_t isBusConnected = FALSE; static AJ_BusAttachment busAttachment;\n   AJ_Status status;\nwhile (TRUE) {\n   AJ_Message msg;\n   status = AJ_OK;  Connect to the AllJoyn bus  if (!isBusConnected) {\nstatus = AJSVC_RoutingNodeConnect( busAttachment,  org.alljoyn.BusNode ,\n   AJAPP_CONNECT_TIMEOUT,\n   AJAPP_CONNECT_PAUSE, AJAPP_BUS_LINK_TIMEOUT,  isBusConnected);\n      if (!isBusConnected) { // Failed to connect to Routing Node?\n         continue; // Retry establishing connection to Routing Node.\n      }  Set up the relevant bus authentication listener callback (optional)  In cases where your code uses secured methods, you will need to\nregister the relevant authentication listener callback. Inclusion\nof the Configuration service framework and/or enabling security\nin the Control Panel service framework implies your code uses\nsecured methods.  The sample applications typically set up a shared secret-based\nmechanism that requires a password callback as follows:  /* Setup password based authentication listener for secured peer-to-peer connections */\nAJ_BusSetPasswordCallback( busAttachment, PasswordCallback);  Set up remote access to the services and publish their capabilities  status = AJApp_ConnectedHandler( busAttachment, AJAPP_MAX_INIT_ATTEPTS, AJAPP_SLEEP_TIME);  After the connection has been made, perform the following\nsteps to ensure the service frameworks function successfully\n(these are encapsulated in the call  AJApp_ConnectedHandler()  shown above).   Initialize the individual services. Upon successful connection\nto the routing node, each service must set up a dedicated\nsession port or register signal matching rule(s).  Bind the session port. This enables the creation of sessions.   c\n   #define APP_SERVICE_PORT 900\n   AJ_BusBindSessionPort( busAttachment, APP_SERVICE_PORT, NULL, 0);   Advertise the unique name of the message bus. This allows\nother applications to locate and track this device.   c\n   AJ_BusAdvertiseName( busAttachment, AJ_GetUniqueName( busAttachment),\n      AJ_TRANSPORT_ANY, AJ_BUS_START_ADVERTISING);   Initialize the About feature with the session port.\nThe About announcement will include the port, other metadata,\nand a description of the registered bus objects that are\nflagged as announced.   c\n   AJ_AboutInit( busAttachment, APP_SERVICE_PORT);  Continue main loop  After the connection is established and the AllJoyn services\napplication layer is initialized, continue with main loop.\nPerform the following tasks:   Check whether request for announcement was flagged and\nannounce accordingly.  Check the Wi-Fi state and trigger a reconnection if network\nconnection was lost.  Continue with main loop cycling through the services to\nperform incoming message processing and idle tasks execution,\nincluding outgoing signal sending e.g. sending pending requests\nfor notification signals.   status = AJ_AboutAnnounce( busAttachment);\nif (status == AJ_OK) {\n   status = AJ_UnmarshalMsg( busAttachment,  msg, 1000);\n   isUnmarshalingSuccessful = (status == AJ_OK);\n\n   if (status == AJ_ERR_TIMEOUT) {\n      if (AJ_ERR_LINK_TIMEOUT == AJ_BusLinkStateProc( busAttachment)) {\n          status = AJ_ERR_READ; // something's not right. force disconnect\n      } else { // nothing on bus, do our own thing\n         AJApp_DoWork();\n         continue;\n      }\n   }\n\n   if (isUnmarshalingSuccessful) {\n      service_Status = AJApp_MessageProcessor( msg,  status);\n      if (service_Status == SERVICE_STATUS_NOT_HANDLED) {\n         //Pass to the built-in bus message handlers status = AJ_BusHandleBusMessage( msg);\n      }\n      AJ_NotifyLinkActive();\n   }\n\n   //Unmarshaled messages must be closed to free resources\n   AJ_CloseMsg( msg);\n}  Graceful disconnect from the AllJoyn bus and end of loop  During the message processing the connection may be lost by\nexternal disconnection of the router or the Wi-Fi network.\nThis is designated by the status value AJ_ERR_READ returned\nby any of the AllJoyn message handling calls in the following sections:   Connect to the AllJoyn bus  Set up remote access to the services and publish their capabilities  Continue main loop   Depending on the severity of an error received by the app or\nthe logic of the app, the application and services' business\nlogic must perform a graceful soft disconnect from the Wi-Fi\nrouter. In other cases, a hard disconnect that reboots the\nhardware and resets the Wi-Fi network is required. These are\nindicated respectively by status values AJ_ERR_RESTART and\nAJ_ERR_RESTART_APP returned by any of the AllJoyn message\nhandling calls in the sections listed above.  if (status == AJ_ERR_READ || status == AJ_ERR_RESTART ||\n    status == AJ_ERR_RESTART_APP) {\n   if (isBusConnected) {\n      forcedDisconnnect = (status != AJ_ERR_READ);\n         rebootRequired = (status == AJ_ERR_RESTART_APP);\n         AJApp_DisconnectHandler( busAttachment, forcedDisconnect);\n         AJSVC_RoutingNodeDisconnect( busAttachment, forcedDisconnnect,\n            AJAPP_SLEEP_TIME, AJAPP_SLEEP_TIME,  isBusConnected);\n   if (status == AJ_ERR_RESTART_APP) { AJ_Reboot();\n      }\n   }\n}  When the connection is about to be lost, perform the following\nsteps to ensure the services clean up any state established\nwith the Wi-Fi router (these are encapsulated in the call AJApp_DisconnectHandler()  above):   Stop advertising the current unique name of the message bus.   c\n   AJ_BusAdvertiseName(busAttachment, AJ_GetUniqueName(busAttachment),\n      AJ_TRANSPORT_ANY, AJ_BUS_STOP_ADVERTISING, 0); \n2. Unbind the session port.  c\n   AJ_BusUnbindSession(busAttachment, AJ_ABOUT_SERVICE_PORT);   Set the flag so that an Announcement will be sent upon\nreconnect to a Wi-Fi router.   c\n   AJ_AboutSetShouldAnnounce();  Create service framework handlers  The service framework handlers are service functionality that\nmust be called at a specific time in the main loop.  Connected handler  After the router is connected, and before performing the\napplication connected handlers, the individual registered\nservices connected handlers are called. Complete the steps\noutlined in  Initialize the AllJoyn framework  through Connect to the AllJoyn bus .  NOTE:  This must occur before a peer has connected or a service\nframework API is executed to publish information or send information.  AJ_Status AJSVC_ConnectedHandler(AJ_BusAttachment* busAttachment)\n{\nAJ_BusSetPasswordCallback( busAttachment, PasswordCallback);\n/* Configure timeout for the link to the daemon bus */\n   AJ_SetBusLinkTimeout( busAttachment, 60); // 60 seconds AJ_Status status = AJ_OK;\ndo {\n#ifdef CONFIG_SERVICE\n   if (status == AJ_OK) {\n      status = AJCFG_ConnectedHandler(busAttachment);\n   }\n#endif\n#ifdef NOTIFICATION_SERVICE_PRODUCER\n   if (status == AJ_OK) {\n      status = AJNS_Producer_ConnectedHandler(busAttachment);\n   }\n#endif\n#ifdef CONTROLPANEL_SERVICE\n   if (status == AJ_OK) {\n      status = AJCPS_ConnectedHandler(busAttachment);\n   }\n#endif\n#ifdef NOTIFICATION_SERVICE_CONSUMER\n   if (status == AJ_OK) {\n      status = AJNS_Consumer_ConnectedHandler(busAttachment);\n   }\n#endif\n   return status;\n   } while (0);\n   AJ_Printf( Service ConnectedHandler returned an error %s\\n ,\n      (AJ_StatusText(status)));\n}  Message processor  When the AllJoyn framework receives a message from the\nconnected message bus, it must be processed and handled.\nThe processing of an incoming message is performed in a\nchain of common services, as well as with the application\nand individual services' message processors. Each message\nprocessor evaluates the message, delegates its handling if\nrelevant, and returns whether it handled the message or not.\nThe incoming message is returned by a call to  AJ_UnmarshalMsg() .  AJ_Message msg;\nAJ_Status status = AJ_UnmarshalMsg( busAttachment,  msg, 1000);\n...\nif (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n   serviceStatus = AJApp_MessageProcessor( busAttachment,  msg,  status);\n}  At the conclusion of the processing chain after calling AJApp_MessageProcessor() , any unprocessed messages are\nprocessed by the default AllJoyn message processor.  if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n   //Pass to the built-in bus message handlers status = AJ_BusHandleBusMessage( msg);\n}  Common services manager processor  The common services message processor handles common services'\nmessages that deal with session establishment and teardown.\nIt delegates the processed message to the relevant registered services.  AJSVC_ServiceStatus AJSVC_MessageProcessorAndDispatcher(AJ_BusAttachment*\nbusAttachment,\n   AJ_Message* msg, AJ_Status* status)\n{\n   AJSVC_ServiceStatus serviceStatus = AJSVC_SERVICE_STATUS_NOT_HANDLED;\n\n   if (msg- msgId == AJ_REPLY_ID(AJ_METHOD_JOIN_SESSION))\n      { // Process all incoming replies to join a session and\n         pass session state change to all services uint32_t replyCode = 0;\n      uint32_t sessionId = 0;\n      uint8_t sessionJoined = FALSE;\n      uint32_t joinSessionReplySerialNum = msg- replySerial;\n      if (msg- hdr- msgType == AJ_MSG_ERROR) { AJ_AlwaysPrintf(( JoinSessionReply: AJ_METHOD_JOIN_SESSION:\nAJ_ERR_FAILURE\\n ));\n      *status = AJ_ERR_FAILURE;\n   } else {\n      *status = AJ_UnmarshalArgs(msg,  uu ,  replyCode,  sessionId);\n      if (*status != AJ_OK) {\n         AJ_AlwaysPrintf(( JoinSessionReply: failed to unmarshal\\n ));\n      } else {\n         if (replyCode == AJ_JOINSESSION_REPLY_SUCCESS) { AJ_AlwaysPrintf(( JoinSessionReply:\nAJ_JOINSESSION_REPLY_SUCCESS with sessionId=%u and replySerial=%u\\n , sessionId, joinSessionReplySerialNum));\n      sessionJoined = TRUE;\n      } else {\n         AJ_AlwaysPrintf(( JoinSessionReply: AJ_ERR_FAILURE\\n ));\n         *status = AJ_ERR_FAILURE;\n      }\n   }\n}\nif (sessionJoined) {\n   serviceStatus = SessionJoinedHandler(busAttachment, sessionId, joinSessionReplySerialNum);\n   } else {\n      serviceStatus = SessionRejectedHandler(busAttachment, sessionId, joinSessionReplySerialNum, replyCode);\n   }\n      if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) { AJ_ResetArgs(msg);\n   }\n   } else if (msg- msgId == AJ_SIGNAL_SESSION_LOST || msg- msgId == AJ_SIGNAL_SESSION_LOST_WITH_REASON) {\n      // Process all incoming LeaveSession replies and lost session signals and pass session state change to all services\n      uint32_t sessionId = 0;\n      uint32_t reason = 0;\n      if (msg- msgId == AJ_SIGNAL_SESSION_LOST_WITH_REASON) {\n         *status = AJ_UnmarshalArgs(msg,  uu ,  sessionId,  reason);\n      } else {\n         *status = AJ_UnmarshalArgs(msg,  u ,  sessionId);\n      }\n      if (*status != AJ_OK) {\n         AJ_AlwaysPrintf(( JoinSessionReply: failed to marshal\\n ));\n      } else {\n         AJ_AlwaysPrintf(( Session lost: sessionId = %u, reason = %u\\n , sessionId, reason));\n         serviceStatus = SessionLostHandler(busAttachment, sessionId, reason);\n\n         if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) { AJ_ResetArgs(msg);\n         }\n      }\n   } else {\n#ifdef CONFIG_SERVICE\n      if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n         serviceStatus = AJCFG_MessageProcessor(busAttachment, msg, status);\n      }\n#endif\n#ifdef ONBOARDING_SERVICE\n      if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n         serviceStatus = AJOBS_MessageProcessor(busAttachment, msg, status);\n      }\n#endif\n#ifdef NOTIFICATION_SERVICE_PRODUCER\n      if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\nstatus);\n      }\n      serviceStatus = AJNS_Producer_MessageProcessor(busAttachment, msg,\n      }\n#endif\n#ifdef NOTIFICATION_SERVICE_CONSUMER\n      if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n         serviceStatus = AJNS_Consumer_MessageProcessor(busAttachment, msg,\nstatus);\n      }\n#endif\n#ifdef CONTROLPANEL_SERVICE\n      if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n         serviceStatus = AJCPS_MessageProcessor(busAttachment, msg, status);\n      }\n#endif\n   }\n   return serviceStatus;\n}  Common (service-side) message processor  Service-side services such as the Notification service framework's\nProducer, are delegated to check whether incoming requests for\njoining a session is targeted at it.  uint8_t AJSVC_CheckSessionAccepted(uint16_t port,\n   uint32_t sessionId, char* joiner)\n{\n   uint8_t session_accepted = FALSE;\n#ifdef NOTIFICATION_SERVICE_PRODUCER\n   session_accepted |= AJNS_Producer_CheckSessionAccepted(port, sessionId, joiner);\n#endif\n\n#ifdef CONTROLPANEL_SERVICE\n   session_accepted |= AJCPS_CheckSessionAccepted(port, sessionId, joiner);\n#endif\n   return session_accepted;\n}  Common (client-side) message processor  Client-side services such as the Notification service framework's\nConsumer, are delegated the replies to join session requests and\nsession lost signals.  AJSVC_ServiceStatus\n   SessionJoinedHandler(AJ_BusAttachment*\n   busAttachment, uint32_t sessionId, uint32_t replySerialNum)\n{\n   AJSVC_ServiceStatus serviceStatus = AJSVC_SERVICE_STATUS_NOT_HANDLED;\n\n#ifdef NOTIFICATION_SERVICE_CONSUMER\n   if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n      serviceStatus = AJNS_Consumer_SessionJoinedHandler(busAttachment, sessionId, replySerialNum);\n   }\n#endif\n\n   return serviceStatus;\n}\n\nstatic AJSVC_ServiceStatus\n   SessionRejectedHandler(AJ_BusAttachment*\n   busAttachment, uint32_t sessionId, uint32_t replySerialNum, uint32_t replyCode)\n{\n   AJSVC_ServiceStatus serviceStatus = AJSVC_SERVICE_STATUS_NOT_HANDLED;\n\n#ifdef NOTIFICATION_SERVICE_CONSUMER\n   if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n      serviceStatus = AJNS_Consumer_SessionRejectedHandler(busAttachment, replySerialNum, replyCode);\n   }\n#endif\n\n   return serviceStatus;\n}\n\nstatic AJSVC_ServiceStatus\n   SessionLostHandler(AJ_BusAttachment*\n   busAttachment, uint32_t sessionId, uint32_t reason)\n{\n   AJSVC_ServiceStatus serviceStatus = AJSVC_SERVICE_STATUS_NOT_HANDLED;\n\n#ifdef NOTIFICATION_SERVICE_CONSUMER\n   if (serviceStatus == AJSVC_SERVICE_STATUS_NOT_HANDLED) {\n      serviceStatus = AJNS_Consumer_SessionLostHandler(busAttachment, sessionId, reason);\n   }\n#endif\n\n   return serviceStatus;\n}  Common application message processors  The application message processor is responsible for delegating\nany incoming message to all the relevant message processors. AJApp_MessageProcessor  (provided below) performs the following tasks:   Identifies incoming session requests and delegates the\nrequests to the message processors in the relevant services\nvia a call to  AJSVC_CheckSessionAccepted  method. See  Common services\nmanager processor .  Identify and handle any replies to the service initialization\nrequests sent in  AJSVC_ConnectedHandler  method. See  Connected handler .  Pass any other messages to the common services' message\nprocessor  AJSVC_MessageProcessorAndDispatcher  method which\nidentifies service-related messages and handles them.\nSee  Common (service-side) message processor .   AJSVC_ServiceStatus AJApp_MessageProcessor(AJ_BusAttachment* busAttachment,\n   AJ_Message* msg, AJ_Status* status)\n{\n   AJSVC_ServiceStatus serviceStatus = AJSVC_SERVICE_STATUS_HANDLED;\n   uint16_t port;\n   char* joiner;\n   uint32_t sessionId = 0;\n   uint8_t session_accepted = FALSE;\n\n   if (msg- msgId == AJ_METHOD_ACCEPT_SESSION) { // Process all\n      incoming request to join a session and pass request for acceptance by all services\n      *status = AJ_UnmarshalArgs(msg,  qus ,  port,  sessionId,  joiner);\n      if (*status != AJ_OK) {\n         return serviceStatus;\n      }\n      session_accepted |= (port == servicePort);\n      session_accepted |= AJSVC_CheckSessionAccepted(port, sessionId, joiner);\n      *status = AJ_BusReplyAcceptSession(msg, session_accepted);\n      AJ_AlwaysPrintf(( %s session session_id=%u joiner=%s for port %u\\n , (session_accepted ?\n          Accepted  :  Rejected ), sessionId, joiner, port));\n   } else {\n      switch (currentServicesInitializationState) {\n      case INIT_SERVICES_PORT:\n         if (msg- msgId == AJ_REPLY_ID(AJ_METHOD_BIND_SESSION_PORT)) {\n            currentServicesInitializationState = nextServicesInitializationState;\n         }\n         break;\n\n      case INIT_ADVERTISE_NAME:\n         if (msg- msgId == AJ_REPLY_ID(AJ_METHOD_ADVERTISE_NAME)) {\n            currentServicesInitializationState = nextServicesInitializationState;\n         }\n         break;\n\n      default:\n         serviceStatus = AJSVC_MessageProcessorAndDispatcher(busAttachment, msg, status);\n         break;\n      }\n   }\n\n   return serviceStatus;\n}  DoWork handler  When there is a connection and the message loop is idling,\nthe individual registered services' sample DoWork callbacks\nare called to allow the service's business logic to perform\nthe service's sample business logic. These callbacks are implemented\nin the corresponding service's sample application code.  NOTE:  The message loop is considered idling when no messages\nare ready to marshal, and the MCU will sleep to conserve\nresources for a small period of time.  void AJApp_DoWork(AJ_BusAttachment* busAttachment)\n{\n   #ifdef CONFIG_SERVICE\n   Config_DoWork(busAttachment);\n   #endif\n\n   #ifdef NOTIFICATION_SERVICE_PRODUCER\n   NotificationProducer_DoWork(busAttachment);\n   #endif\n\n   #ifdef NOTIFICATION_SERVICE_CONSUMER\n   NotificationConsumer_DoWork(busAttachment);\n   #endif\n\n   #ifdef CONTROLPANEL_SERVICE\n   Controllee_DoWork(busAttachment);\n   #endif\n}  Disconnect handler  When the application needs to perform a graceful disconnect\nfrom the Wi-Fi router, the application and individual registered\nservices get an opportunity to relinquish their resources and\nundo any registered state with the Wi-Fi router that was\nestablished during connection or operation. The disconnect\nhandlers are called to allow for this cleanup work to be performed.\nComplete the steps outlined in  Initialize the AllJoyn framework \nthrough  Connect to the AllJoyn bus .  AJ_Status AJSVC_DisconnectHandler(AJ_BusAttachment* busAttachment)\n{\n   #ifdef CONFIG_SERVICE\n   AJCFG_DisconnectHandler(busAttachment);\n   #endif\n\n   #ifdef ONBOARDING_SERVICE\n   AJOBS_DisconnectHandler(busAttachment);\n   #endif\n\n   #ifdef NOTIFICATION_SERVICE_CONSUMER\n   AJNS_Consumer_DisconnectHandler(busAttachment);\n   #endif\n\n   #ifdef NOTIFICATION_SERVICE_PRODUCER\n   AJNS_Producer_DisconnectHandler(busAttachment);\n   #endif\n\n   #ifdef CONTROLPANEL_SERVICE\n   AJCPS_DisconnectHandler(busAttachment);\n   #endif\n}  Implement the PropertyStore  The PropertyStore module is required by principally by the\nAbout feature (to store the AboutData), the Configuration\nservice framework (to store the ConfigData), and may be used\nalso by other service frameworks (such as the Notification\nservice framework's Producer to retrieve required application\nand device identifying properties). The module's API is specified\nin propertyStore.h.  The About feature uses the PropertyStore to retrieve the\nprovisioned (default and runtime) values for the AboutData\nfields listed in  AboutData fields .\nSee the  About Interface Definition \nfor more information.  AboutData fields     Field name  Required  Announced  Type      AppId  yes  yes  ay    DefaultLanguage  yes  yes  s    DeviceName  yes  yes  s    DeviceId  yes  yes  s    AppName  yes  yes  s    Manufacturer  yes  yes  s    ModelNumber  yes  yes  s    SupportedLanguages  yes  no  as    Description  yes  no  s    DateofManufacture  no  no  s    SoftwareVersion  yes  no  s    AJSoftwareVersion  yes  no  s    HardwareVersion  no  no  s    SupportUrl  no  no  s     The Configuration service framework uses the PropertyStore\nto retrieve the provisioned (default and runtime) values\nfor the ConfigData and persist the values manipulated by\nthe Config interface listed in  Config data fields .  See the  Configuration Interface Definition  for more information.  Config data fields     Field name  Required  Announced  Type      DefaultLanguage  yes  yes  s    DeviceName  yes  yes  s    MaxLength  no  yes  q     PropertyStore example implementation  The PropertyStore.c file in AppsCommon is an example PropertyStore\nimplementation that supports the requirements of the About feature\nand Configuration service framework, and is included in the ServerSample code.  The PropertyStore uses the field definitions that are defined\nin the PropertyStore.c file. A provisioning example is provided\nin the ServerSample code and is reviewed in the following subsections.  Field indexes  The following enumeration is used to define the fields' indexes.\nThe enumeration is used as an index into the various fields' tables.  The enumerationinteger values are scoped into the following\nsubsets delimited by the respectively named alias counter values:   Runtime keys (AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS) -\nThis subset contains the fields that are initialized and persisted\non first run (or after factory reset).  Mandatory keys (AJSVC_PROPERTY_STORE_NUMBER_OF_MANDATORY_KEYS)  This subset contains the fields that are mandatory as per the\ndefinition of the About feature and Configuration Service Framework\nin  AboutData fields .  ALL keys (AJSVC_PROPERTY_STORE_NUMBER_OF_KEYS) - This subset\ncontains ALL the fields.   NOTE:  Do NOT remove the counters (AJSVC_PROPERTY_STORE_NUMBER_OF_*)\nas the PropertyStore code refers to them!  typedef enum _AJSVC_PropertyStoreFieldIndices {\n   AJSVC_PROPERTY_STORE_ERROR_FIELD_INDEX = -1,\n   //Start of keys\n   AJSVC_PROPERTY_STORE_DEVICE_ID,\n   AJSVC_PROPERTY_STORE_APP_ID,\n   AJSVC_PROPERTY_STORE_DEVICE_NAME,\n#ifndef CONFIG_SERVICE\n   AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS,\n   //End of runtime keys\n   AJSVC_PROPERTY_STORE_DEFAULT_LANGUAGE = AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS,\n   AJSVC_PROPERTY_STORE_APP_NAME,\n#else AJSVC_PROPERTY_STORE_DEFAULT_LANGUAGE,\n   AJSVC_PROPERTY_STORE_PASSCODE,\n   AJSVC_PROPERTY_STORE_REALM_NAME,\n   AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS,\n   //End of runtime keys\n   AJSVC_PROPERTY_STORE_APP_NAME = AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS,\n#endif AJSVC_PROPERTY_STORE_DESCRIPTION,\n   AJSVC_PROPERTY_STORE_MANUFACTURER,\n   AJSVC_PROPERTY_STORE_MODEL_NUMBER,\n   AJSVC_PROPERTY_STORE_DATE_OF_MANUFACTURE,\n   AJSVC_PROPERTY_STORE_SOFTWARE_VERSION,\n   AJSVC_PROPERTY_STORE_AJ_SOFTWARE_VERSION,\n#ifdef CONFIG_SERVICE\n   AJSVC_PROPERTY_STORE_MAX_LENGTH,\n#endif\n   AJSVC_PROPERTY_STORE_NUMBER_OF_MANDATORY_KEYS,\n   //End of mandatory keys\n   AJSVC_PROPERTY_STORE_HARDWARE_VERSION = AJSVC_PROPERTY_STORE_NUMBER_OF_MANDATORY_KEYS,\n   AJSVC_PROPERTY_STORE_SUPPORT_URL,\n   AJSVC_PROPERTY_STORE_NUMBER_OF_KEYS,\n  //End of About keys\n} AJSVC_PropertyStoreFieldIndices;  SupportedLanguages and language indexes  The following constants are used to define special language indexes.\nThe index is used within the supported languages' tables and the\nvarious fields' tables.  #define AJSVC_PROPERTY_STORE_ERROR_LANGUAGE_INDEX   -1\n#define AJSVC_PROPERTY_STORE_NO_LANGUAGE_INDEX  0  The following definitions and structures in PropertyStoreOEMProvisioning.h\nare needed by the sample application in order to provision for\nthe sample PropertyStore implementation.  extern const uint8_t AJSVC_PROPERTY_STORE_NUMBER_OF_LANGUAGES;\nextern const char** propertyStoreDefaultLanguages;\n#define LANG_VALUE_LENGTH 7  The language names are provisioned in the ServerSample's ServerSample.c\nas English and Austrian dialect of German.  static const char DEFAULT_LANGUAGE[] =  en ;\nstatic const char* DEFAULT_LANGUAGES[] = { DEFAULT_LANGUAGE };\nstatic const char SUPPORTED_LANG2[] =  de-AT ;\nstatic const char* SUPPORTED_LANGUAGES[] = { DEFAULT_LANGUAGE, SUPPORTED_LANG2\n};\nconst char** propertyStoreDefaultLanguages = SUPPORTED_LANGUAGES;\nconst uint8_t AJSVC_PROPERTY_STORE_NUMBER_OF_LANGUAGES = sizeof(SUPPORTED_LANGUAGES) / sizeof(char*);  NOTE:  The language names are according to the IETF language\ntags specified by RFC 5646. The example implementation supports\nonly simple languages and extended languages or variant sub-tags\n(regional) languages. Hence,  LANG_NAME_LEN  is defined as 7.  Field definition structure  The following bit field structure is used to define the\nbehavior of each field with respect to its exposure to\nremote clients various calls.  typedef struct _PropertyStoreEntry {    const char* keyName;\n   // The property key name as shown in About and Config documentation\n   // msb=public/private; bit number 3 - initialise once;\n   bit number 2 - multi-language value; bit number 1 - announce;\n   bit number 0 - read/write uint8_t mode0Write : 1; uint8_t mode1Announce : 1; uint8_t mode2MultiLng : 1;\n   uint8_t mode3Init : 1;\n   uint8_t mode4 : 1;\n   uint8_t mode5 : 1;\n   uint8_t mode6 : 1;\n   uint8_t mode7Public : 1;\n} PropertyStoreEntry;  Field definitions  The following bit field structure is used to define the\nbehavior of each field with respect to its exposure to\nremote clients various calls.  extern const PropertyStoreEntry propertyStoreProperties[AJSVC_PROPERTY_STORE_NUMBER_OF_KEYS];\nconst PropertyStoreEntry propertyStoreProperties[AJSVC_PROPERTY_STORE_NUMBER_OF_KEYS] =\n{\n// {  Key Name   , W, A, M, I .. . . ., P },\n   {  DeviceId ,    0, 1, 0, 1, 0, 0, 0, 1 },\n   {  AppId ,   0, 1, 0, 1, 0, 0, 0, 1 },\n#ifndef CONFIG_SERVICE\n   {  DeviceName ,  0, 1, 0, 1, 0, 0, 0, 1 },\n#else\n   {  DeviceName ,\n#endif\n// Add other persisted keys above this line\n#ifndef CONFIG_SERVICE\n   {  DefaultLanguage , 0, 1, 0, 0, 0, 0, 0, 1 },\n#else\n   {  DefaultLanguage ,\n#endif\n#ifdef CONFIG_SERVICE\n   {  Passcode ,    1, 0, 0, 0, 0, 0, 0, 0 },\n   {  RealmName ,   1, 0, 0, 0, 0, 0, 0, 0 },\n#endif\n// Add other configurable keys above this line\n   {  AppName , 0, 1, 0, 0, 0, 0, 0, 1 },\n   {  Description , 0, 0, 1, 0, 0, 0, 0, 1 },\n   {  Manufacturer ,    0, 1, 1, 0, 0, 0, 0, 1 },\n   {  ModelNumber , 0, 1, 0, 0, 0, 0, 0, 1 },\n   {  DateOfManufacture ,   0, 0, 0, 0, 0, 0, 0, 1 },\n   {  SoftwareVersion , 0, 0, 0, 0, 0, 0, 0, 1 },\n   {  AJSoftwareVersion ,   0, 0, 0, 0, 0, 0, 0, 1 },\n#ifdef CONFIG_SERVICE\n   {  MaxLength ,   0, 0, 1, 0, 0, 0, 0, 1 },\n#endif\n// Add other mandatory about keys above this line\n   {  HardwareVersion , 0, 0, 0, 0, 0,  0, 0,   1   },\n   {  SupportUrl ,  0, 0, 1, 0, 0,  0, 0,   1   },\n// Add other optional about keys above this line\n};  Field default values  The following array is used to provision the fields' default values:  extern const char** propertyStoreDefaultValues[AJSVC_PROPERTY_STORE_NUMBER_OF_KEYS];\n// Array of Array of size 1 or AJSVC_PROPERTY_STORE_NUMBER_OF_LANGUAGES\n   constant buffers depending on whether the property is multilingual  The following array is a snippet of code for provisioning for the\nConfiguration service framework based on the ServerSample's ServerSample.c file:  #ifdef CONFIG_SERVICE\nstatic const char* DEFAULT_PASSCODES[] = {  303030303030  };\n// HEX encoded { '0', '0', '0', '0', '0', '0' }\n#endif\nstatic const char* DEFAULT_APP_NAMES[] = {  Configuree  };\nstatic const char DEFAULT_DESCRIPTION_LANG1[] =  AC IOE device ;\nstatic const char DEFAULT_DESCRIPTION_LANG2[] =  Mein erstes IOE Geraet ;\nstatic const char* DEFAULT_DESCRIPTIONS[] = { DEFAULT_DESCRIPTION_LANG1, DEFAULT_DESCRIPTION_LANG2 };\nstatic const char DEFAULT_MANUFACTURER_LANG1[] =  Company A(EN) ;\nstatic const char DEFAULT_MANUFACTURER_LANG2[] =  Firma A(DE-AT) ;\nstatic const char* DEFAULT_MANUFACTURERS[] = { DEFAULT_MANUFACTURER_LANG1, DEFAULT_MANUFACTURER_LANG2 };\nstatic const char* DEFAULT_DEVICE_MODELS[] = {  0.0.1  };\nstatic const char* DEFAULT_DATE_OF_MANUFACTURES[] = {  2014-02-01  };\nstatic const char* DEFAULT_SOFTWARE_VERSIONS[] = {  0.0.1  };\nstatic const char* DEFAULT_HARDWARE_VERSIONS[] = {  0.0.1  };\nstatic const char DEFAULT_SUPPORT_URL_LANG1[] =  www.company_a.com ;\nstatic const char DEFAULT_SUPPORT_URL_LANG2[] =  www.company_a.com/de-AT ;\nstatic const char* DEFAULT_SUPPORT_URLS[] = { DEFAULT_SUPPORT_URL_LANG1, DEFAULT_SUPPORT_URL_LANG2 };\n\nconst char** propertyStoreDefaultValues[AJSVC_PROPERTY_STORE_NUMBER_OF_KEYS] =\n{\n//  Default Values per language ,     Key Name \n   NULL,    /*DeviceId*/\n   NULL,    /*AppId*/\n   NULL,    /*DeviceName*/\n// Add other persisted keys above this line\n   DEFAULT_LANGUAGES,   /*DefaultLanguage*/\n#ifdef CONFIG_SERVICE\n   DEFAULT_PASSCODES,   /*Passcode*/ NULL,  /*RealmName*/\n#endif\n// Add other configurable keys above this line\n   DEFAULT_APP_NAMES,            /*AppName*/\n   DEFAULT_DESCRIPTIONS,     /*Description*/\n   DEFAULT_MANUFACTURERS,    /*Manufacturer*/\n   DEFAULT_DEVICE_MODELS,    /*ModelNumber*/\n   DEFAULT_DATE_OF_MANUFACTURES, /*DateOfManufacture*/\n   DEFAULT_SOFTWARE_VERSIONS,    /*SoftwareVersion*/\n   NULL,                     /*AJSoftwareVersion*/\n#ifdef CONFIG_SERVICE\n   NULL,                     /*MaxLength*/\n#endif\n// Add other mandatory about keys above this line\n   DEFAULT_HARDWARE_VERSIONS,    /*HardwareVersion*/\n   DEFAULT_SUPPORT_URLS,     /*SupportUrl*/\n// Add other optional about keys above this line\n};  Field runtime values and persistence  The following structure is used to store runtime-provisioned\nvalue or remotely modified value.  typedef struct _PropertyStoreRuntimeEntry {\n   char** value;    // An array of size 1 or\nAJSVC_PROPERTY_STORE_NUMBER_OF_LANGUAGES mutable buffers\ndepending on whether the property is multilingual\n   uint8_t size; // The size of the value buffer(s)\n} PropertyStoreConfigEntry;  The various length constants are appropriately set for each\nfield in order to optimize memory usage.  #define LANG_VALUE_LENGTH 7\n#define KEY_VALUE_LENGTH 10\n#define MACHINE_ID_LENGTH (UUID_LENGTH * 2)\n#define DEVICE_NAME_VALUE_LENGTH 32\n#ifdef CONFIG_SERVICE\n#define PASSWORD_VALUE_LENGTH (AJ_ADHOC_LEN * 2)\n#endif  The following array is used to maintain the runtime Config\nfields' modified values and is implemented as part of PropertyStore.c file.  extern PropertyStoreConfigEntry propertyStoreRuntimeValues[AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS]  The following array is a snippet of code for provisioning\nfor the Configuration service framework based on the ServerSample's\nServerSample.c file:  static char machineIdVar[MACHINE_ID_LENGTH + 1] = { 0 };\nstatic char* machineIdVars[] = { machineIdVar };\nstatic char deviceNameVar[DEVICE_NAME_VALUE_LENGTH + 1] = { 0 };\nstatic char* deviceNameVars[] = { deviceNameVar };\nstatic char defaultLanguageVar[LANG_VALUE_LENGTH + 1] = { 0 };\nstatic char* defaultLanguageVars[] = { defaultLanguageVar };\n#ifdef CONFIG_SERVICE\nstatic char passcodeVar[PASSWORD_VALUE_LENGTH + 1] = { 0 };\nstatic char* passcodeVars[] = { passcodeVar };\nstatic char realmNameVar[KEY_VALUE_LENGTH + 1] = { 0 };\nstatic char* realmNameVars[] = { realmNameVar };\n#endif\n\nPropertyStoreConfigEntry PropertyStoreRuntimeValues[AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS] =\n{\n// { Buffers for Values per language ,  Buffer Size },   Key Name \n   { machineIdVars, MACHINE_ID_LENGTH + 1 },     /*DeviceId*/\n   { machineIdVars, MACHINE_ID_LENGTH + 1 },     /*AppId*/\n   { deviceNameVars,    DEVICE_NAME_VALUE_LENGTH + 1 },  /*DeviceName*/\n// Add other persisted keys above this line\n   { defaultLanguageVars,   LANG_VALUE_LENGTH + 1 }, /*DefaultLanguage*/\n#ifdef CONFIG_SERVICE\n   { passcodeVars,  PASSWORD_VALUE_LENGTH + 1 },    /*Passcode*/\n   { realmNameVars, KEY_VALUE_LENGTH + 1 },         /*RealmName*/\n#endif  NOTE:  The size entry needs to match the actual allocation\nbuffer length that is provisioned for each field. Refer to\nPropertyStore.c  PropertyStore_Init()  and  InitMandatoryPropertiesInRAM() \nfor an example runtime initialization of the persisted fields.  If the value of a Config field (such as DeviceName) was modified,\nit is stored in the array under the relevant language.  If  ResetConfigurations()  for this field (for some given language)\nor a  globalFactoryReset()  has been remotely called, the value\n(for the given language) will be reset to an empty string.  In order to conserve memory a single shared buffer machineIdVars\nis used for both the AppId and DeviceId fields.  Implementation and provisioning information  The bit field values in the example are an implementation of\nthe About feature and Configuration service framework per the About Interface Definition  and Configuration Interface Definition .\nYou should not require any change in these and only alter\nthe String values of the fields. You may of course remove\noptional fields such as DateOfManufacture.  Depending on the  AJSVC_PROPERTY_STORE_NUMBER_OF_LANGUAGES \nyou've provisioned, this structure must be populated with as\nmany default values. Use NULL for non-provisioned values such\nas when the field is non-language dependent (e.g., DeviceName).  When provisioning a non-language dependent field, the first\nvalue (at index  AJSVC_PROPERTY_STORE_NO_LANGUAGE_INDEX ) is\nused and all other values are ignored, yet must be initialized.  Adding custom field definition and values  Complete the following steps to add your own custom fields.   Decide to which subset the field belongs and add it to the enumeration AJSVC_PropertyStoreFieldIndices  accordingly.  Add a new field entry at the respective index to the propertyStoreProperties.  Decide whether the field is publicly accessible from\nremote clients. If the field is public, set the  mode7Public  bit to 1.  Decide whether the field is to be allowed to be configured\nremotely through the Configuration service framework. If the\nfield is updateable, then set the  mode0Write  bit to 1.\n    NOTE:  If you set this bit, the field's index must be included\n   in the Persisted or Config keys subsets.  Decide whether the field is to be includedin the Announcement.\nIf the field is announced, then set the  mode1Announce  bit to 1.\n   NOTE:  It is recommended to limit the inclusion of a field in\n  the Announcement according to its immediate relevance to the\n  relevant service framework's discovery. Only the value associated\n  with the currentDefaultLanguage will be sent in the Announcement.  Decide whether the field is multi-language and add the relevant\nvalues for the provisioned languages. If the field is multi-language,\nthen set the  mode2MultiLng  bit to\n1.  Decide whether the field is to be provisioned dynamically\nin code and persisted during first-time (or post-factory reset)\ndevice startup. If the field is to be initialized once, then\nset the  mode3Init  bit to 1 and add the relevant code to initialize it.   Refer to PropertyStore.c  PropertyStore_Init()  and\n    InitMandatoryPropertiesInRAM()  for an example setup\n   for the DeviceId and AppId fields.  NOTE:  If you set this bit, the field's index must be\n  included in the Persisted keys subsets.\n8. Add relevant validation of updated value for your custom\nkey by modifying the default implementation of  IsValueValid() \nin ConfigSample.c file.\n    c\n   uint8_t IsValueValid(const char* key, const char* value) {return TRUE;} \n9. Add entry in corresponding index of  propertyStoreDefaultValues \nto provision default value(s).\n10. Add entry in corresponding index of  propertyStoreRuntimeValues \nto provision for runtime value(s) buffer(s).  NOTE:  The example implementation of PropertyStore supports\nproperties with value of type String ('s') only. If your\nproperty must be of a different type, you must provision the\ndefault value as a String and perform the relevant de/serialization\non the client side.  The following shows an example of how to add a configurable\nproprietary property named \"MyProperty\" that has a language-dependent value.\n* Add index MyProperty to  AJSVC_PropertyStoreFieldIndices :  c\n  MyProperty, AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS,   Add a new entry to the  propertyStoreProperties  array in\nthe index which corresponds to the enumeration value defined above:   c\n  //{ \"Key Name \", W, A, M, I .. . . ., P },\n  { \"MyProperty\",   1, 0, 1, 0, 0, 0, 0, 1 },\n  // Add other configurable keys above this line   Add a new entry to the  propertyStoreDefaultValues  array\nin the index which corresponds to the enumeration value defined above:   c\n  static const char DEFAULT_MYPROPERTY_LANG1[] = \"My\";\n  static const char DEFAULT_MYPROPERTY_LANG2[] = \"Mein\";\n  static const char* DEFAULT_MYPROPERTIES[] =\n  { DEFAULT_ MYPROPERTY_LANG1, DEFAULT_ MYPROPERTY_LANG2 };\n  ...\n  DEFAULT_MYPROPERTIES, /*MyProperty*/\n  // Add other configurable keys above this line  Implement remote callbacks  Callbacks are provided by the service frameworks to allow for\nthe application writer to react to various remotely initiated\ncalls and events. In particular, the Configuration service\nframework has callbacks that allow for the application writer\nto react to remote initiated events and the Controlee part\nof the Control Panel service framework has callbacks that allow\nfor the application writer to write the business logic for the ControlPanel model.  See the  Configuration API Guide  and the Control Panel API Guide , respectively, for more information.  Integrate the Configuration service framework with an  application's AuthListener (optional)  The Configuration service framework and other AllJoyn service\nframework interface methods and signals require a secure\nAllJoyn connection. The application writer may choose to use\nan ALLJOYN_ECDHE_PSK authentication mechanism in its AuthListener implementation.  The Configuration service framework enables remote setting\nof a password that can be used as the secret for a key exchange\nauthentication mechanism. An example implementation that uses\nthis facility is included in the sample server application in\nthe ServicesHandlers.c file as shown below.  uint32_t PasswordCallback(uint8_t* buffer, uint32_t bufLen)\n{\n   AJ_Status status = AJ_OK;\n   const char* hexPassword;\n   size_t hexPasswordLen;\n   uint32_t len = 0;\n\n   hexPassword = AJSVC_PropertyStore_GetValue(AJSVC_PROPERTY_STORE_PASSCODE);\n   if (hexPassword == NULL) {\n      AJ_ErrPrintf(( Password is NULL!\\n ));\n      return len;\n   }\n   AJ_InfoPrintf(( Retrieved password=%s\\n , hexPassword));\n   hexPasswordLen = strlen(hexPassword);\n   len = hexPasswordLen / 2;\n   status = AJ_HexToRaw(hexPassword, hexPasswordLen, buffer, bufLen);\n   if (status == AJ_ERR_RESOURCES) {\n      len = 0;\n   }\n\n   return len;\n}  The above implementation calls AJSVC_PropertyStore_GetValue ( AJSVC_PROPERTY_STORE_PASSCODE )\nto retrieve the current password. This implementation relies on an\nextension in the sample implementation of the PropertyStore which\nwas extended with the Passcode field defined in the AJSVC_PropertyStoreFieldIndices  enumeration. The field is remotely\nupdateable via a Configuration service framework session using the\ndedicated  SetPasscode()  method. The stored Passcode is limited\nto the size of 65, allowing for 64 characters long secret:  #define PASSWORD_VALUE_LENGTH 65  This is achieved using the field definition that masks the\nfield as writable yet private, as shown in the  propertyStoreProperties \ninitialization in PropertyStore.c:  { Passcode , 1, 0, 0, 0, 0, 0, 0, 0 }  The default value is provisioned in ServerSample.c as follows:  // HEX encoded { '0', '0', '0', '0', '0', '0' }\nstatic const char* DEFAULT_PASSCODES[] = {  303030303030  };  and added to  propertyStoreDefaultValues .  DEFAULT_PASSCODES,\n/*Passcode*/  Since the Passcode enumeration value is less than  AJSVC_PROPERTY_STORE_NUMBER_OF_RUNTIME_KEYS ,\nit is also considered part of the  propertyStoreRuntimeValues ;\nits modified value is persisted.  Also, when  SetPasscode()  is called remotely, the  SetPasscode() \ncallback is invoked with the following example implementation in\nConfigSample.c file as shown below:  static AJ_Status SetPasscode(const char* daemonRealm, const uint8_t* newPasscode, uint8_t newPasscodeLen)\n{\n   AJ_Status status = AJ_OK;\n\n   char newStringPasscode[PASSWORD_VALUE_LENGTH + 1];\n   status = AJ_RawToHex(newPasscode, newPasscodeLen, newStringPasscode, sizeof(newStringPasscode), FALSE);\n   if (status != AJ_OK) {\n      return status;\n   }\n   if (AJSVC_PropertyStore_SetValue(AJSVC_PROPERTY_STORE_REALM_NAME, daemonRealm)  AJSVC_PropertyStore_SetValue(AJSVC_PROPERTY_STORE_PASSCODE, newStringPasscode))\n{\n\n      status = AJSVC_PropertyStore_SaveAll();\n      if (status != AJ_OK) {\n         return status;\n      }\n      AJ_ClearCredentials();\n      status = AJ_ERR_READ; //Force disconnect of AJ and services to refresh current sessions\n   } else {\n\n      status = AJSVC_PropertyStore_LoadAll();\n      if (status != AJ_OK) {\n         return status;\n      }\n   }\n\n   return status;\n}  The above implementation stores the passcode as part of the\nPropertyStore persistence:   It calls  AJSVC_PropertyStore_SetValue(Passcode, newStringPasscode) \nto set the value in RAM.  If successful, it also calls  AJSVC_PropertyStore_SaveAll() \nto persist to NVRAM.  Finally,  AJ_ClearCredentials()  is called to revoke all\ncurrent keys based on the old passcode.   NOTES \n* The stored passcode is HEX and is limited to the size of 32,\nallowing for 16 bytes long secret:  c\n  #define PASSWORD_VALUE_LENGTH (AJ_ADHOC_LEN * 2)   The default value for the Passcode field is provisioned as\n'303030303030' (the HEX encoded string value for the byte array\n{ '0', '0', '0', '0', '0', '0' }) as per the requirement outlined\nin the  Configuration Interface Definition .  The realm name is similarly persisted alongside the passcode\nby adding the RealmName field index to the  AJSVC_PropertyStoreFieldIndices \nenumeration and provisioning for it in  propertyStoreDefaultValues \nand  propertyStoreRuntimeValues  initialization.",
            "title": "Implementing a Thin Library Server App"
        },
        {
            "location": "/develop/tutorial/thin-app/#compile-the-thin-library-application",
            "text": "This process, including the directory and file layout,\ntoolchains, and procedures varies depending on the host and\ntarget platforms involved, and which AllJoyn service frameworks are being used.  Refer to the target platform documentation that contains\ninstructions on how to organize and set up the build process\nto incorporate the necessary files to compile your Thin Library application.",
            "title": "Compile the Thin Library Application"
        },
        {
            "location": "/develop/tutorial/videos/",
            "text": "Videos\n\n\nVarious Video tutorials are available.\n\n\n\n\nList of all videos on Youtube\n\n\nAllJoyn Overview\n (\nslides\n)\n\n\nAllJoyn Core + Services\n (\nslides\n)",
            "title": "Videos"
        },
        {
            "location": "/develop/tutorial/videos/#videos",
            "text": "Various Video tutorials are available.   List of all videos on Youtube  AllJoyn Overview  ( slides )  AllJoyn Core + Services  ( slides )",
            "title": "Videos"
        },
        {
            "location": "/develop/tutorial/core/",
            "text": "My First AllJoyn\n Core Application\n\n\nCongratulations again on realizing that the AllJoyn framework will \nsolve all your proximity peer-to-peer issues. To better understand \nthe application that will be explained here, we will discuss an analogy \nthat should make understanding the AllJoyn framework clear.\n\n\nConcepts\n\n\nImagine you are in a room with lots of other people, a school \ncafeteria or public event. You have a group of people that you are \nwith that you want to interact with. There are many people around \nall making noise and talking and having conversations, being social. \nAn AllJoyn application is very much like a group setting. People in \na group can \"tell\" someone something, \"share\" something to the group, \nor \"broadcast\" something for everyone to hear.\n\n\nLet's look at the concept to \"Tell\" someone. We get a person's attention, \ndirect what we want to say directly at that person, and normally get a \nresponse. In the AllJoyn framework, this is the equivalent of joining a \nsession and executing a BusMethod call. We connect with another application, \nthen send what we want it to know, and get a response.\n\n\nThe concept of \"Share\" allows us to communicate with the group we are with. \nWhen you want to let each person in your group know something important, \nyou share with them by making an announcement. In the AllJoyn framework, \nthis equates to joining a session and sending a Signal. We don't want a \nresponse to our announcement, we just have meaningful data we want people \nin the group to know about at the same time.\n\n\nLastly, the idea of \"Broadcast\". When you want everyone in the room to \nhear what you have to say, regardless of who they are, we scream at the \ntop of our lungs something we feel is important. Some people will ignore \nthis, others will hear and take action, others will hear it and ignore our \nmessage. In the AllJoyn framework, we call this a \nSessionless Signal\n.\nThis allows for an application to publish some data that it feels is \nmeaningful across the network with a time to live expiration value. \nThat message can be picked up by any application that may be interested \nand there is no logic needed to track a sessionId, figure out who binds/joins; \nthe AllJoyn core handles this for you.\n\n\nOne thing that we have, as people, is the ability to see each other and \nrecognize certain characteristics like height, eye color, male/female, etc. \nWe also can recognize our friends in a crowed based on what they are wearing, etc.\n\nIn the AllJoyn framework, we discover other applications through the \nAbout Feature\n \nand this tells us characteristics about the device: name, make, model, etc. \nIt also tells us, very specifically, the set of interfaces that are supported.\n\nThese interfaces define the features that are exposed, and really the API set \nthat we can interact with.\n\n\nLet's get started building our first AllJoyn application by advertising our \ncapabilities, looking for other compatible applicaitons, and performing the \n3 communication paths: 1-to-1 interactions with a specific application, \n1-to-many to a specific set of applications, and 1-to-many with any application.\n\n\nBefore we get started writing code, follow the environment setup guide for your platform:\n\n\n\n \nLinux\n\n\n\n\n\n\n \nWindows\n\n\nNow that we have our environment set up, let's start writing some software!\n\n\nTutorial\n\n\nThe code for this tutorial can be found in the \nHackfest project\n.\n\n\nIn designing this sample application, we tried to seprate the \napplication into 3 sections of functinality to better aid in understanding.\n\n \nMain application code - main\n\n  * Handles the command line input\n  * Creates and places calls into the code that manages interactions with the AllJoyn APIs\n\n \nAllJoyn API code - MyAllJoynCode\n\n  * Shows how to initialize the AllJoyn framework\n  * Use the About Feature for service-level advertisement/discovery\n  * Binds a session and tracks hosted sessionId\n  * Tracks users on a sessionId\n  * Interacts with MyFirstBusObject to communicate with other AllJoyn entities\n* \nBusObject Implmentation - MyFirstBusObject\n\n  * Creates and implements an AllJoyn Interface\n  * Shows how to send a BusMethod and get a reply\n  * Shows how to send a Signal and Sessionless Signal\n  * Shows how to receive Signals\n\n\nNOTE: The code snippets are not complete by themselves and requires \nthe entire software to run. The snippets should be used as a reference \non how to use the AllJoyn APIs to help build an Application.\n\n\nEvery AllJoyn application creates a BusAttachment, starts it, \nand connects to an \nAllJoyn Router\n. The BusAttachment \nis the Object that allows you to use the AllJoyn APIs.\n\n\nmBusAttachment = new BusAttachment(\nMyFirstApplication\n, true);\n/* Start the msg bus */\nif (ER_OK == status) {\n    status = mBusAttachment-\nStart();\n} else {\n    printf(\nBusAttachment::Start failed\\n\n);\n}\n/* Connect to the daemon */\nif (ER_OK == status) {\n    status = mBusAttachment-\nConnect();\n    if (ER_OK != status) {\n        printf(\nBusAttachment Connect failed.\\n\n);\n    }\n}\n\n\n\n\nNow that the BusAttachment is set up, our next action is to decide \nwhat we want to do with the app. In this tutorial sample application, \nwe are going to be both a client and service side - a true peer on \nthe network.  In order to allow connections, we need to \nBindSession\n.\n\n\n/* Bind a session port so that we can accept incomming join requests */\nSessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, true, SessionOpts::PROXIMITY_ANY, TRANSPORT_ANY);\nSessionPort sp = SESSION_PORT_ANY; \nstatus = mBusAttachment-\nBindSessionPort(sp, opts, *this);\nif (ER_OK != status) {\n    printf(\nFailed to bind session port\\n\n);\n}\n\n\n\n\nWe use \nSESSION_PORT_ANY\n because it doesn't matter what the port is \nin this sample.  We want the AllJoyn framework to assign us one to use \nand that will then get passed into our About data.  To \"inform\" other \napplications that we exist, we need to set up to use the About feature.\n\n\n/* Create About data so that we can advertise */\nmAboutData = new AboutPropertyStoreImpl();\n// a platform-specific unique device id - ex. could be the Mac address\n// use a random value for this application, this should persist in a comercial application\nmAboutData-\nsetDeviceId(getDeviceId());\nmAboutData-\nsetDeviceName(\nMyDeviceName\n);\n// the globally unique identifier for the application - recommend to use an online GUID generator to create\n// use a random value for this application, this should persist in a comercial application\nmAboutData-\nsetAppId(getAppId());\nstd::vector\nqcc::String\n languages(1);\nlanguages[0] = \nen\n;\nmAboutData-\nsetSupportedLangs(languages);\nmAboutData-\nsetDefaultLang(\nen\n);\nmAboutData-\nsetAppName(appName);\nmAboutData-\nsetModelNumber(\nTutorial5000\n);\nmAboutData-\nsetDateOfManufacture(\n8/15/2014\n);\nmAboutData-\nsetSoftwareVersion(\n1.0 build 1\n);\nmAboutData-\nsetAjSoftwareVersion(ajn::GetVersion());\nmAboutData-\nsetHardwareVersion(\nN/A\n);\nmAboutData-\nsetDescription(\nThis is the my first AllJoyn Application!\n, \nen\n);\nmAboutData-\nsetManufacturer(\nCompany\n, \nMe\n);\nmAboutData-\nsetSupportUrl(\nhttp://www.allseenalliance.org\n);\n\n/* Initialize the About feature Service side */\nAboutServiceApi::Init(*mBusAttachment, *mAboutData);\n\n/* Register the port with About feature that was set when BindSession called */\nstatus = AboutServiceApi::getInstance()-\nRegister(sp);\n/* Register the About feature with AllJoyn */\nstatus = mBusAttachment-\nRegisterBusObject(*AboutServiceApi::getInstance());\n\n\n\n\nOur application is starting to come together, we have the foundation \nto allow other applications to find and connect to us.\n\n\nNext, we create our \nBusObjects\n and then add them to the About data so \nthat applications can filter for just the interfaces we support.\n\n\n/* Create and Register the developers BusObjects */\n/**\n * Here is where we add the objects we wish to expose.\n * A developer would modify this section to add different BusObjects.\n */\nmMyFirstBusObject = new MyFirstBusObject(*mBusAttachment);\n\n/* Now register the object with AllJoyn and About */\nQStatus status;\nstatus = mBusAttachment-\nRegisterBusObject(*mMyFirstBusObject);\nif (ER_OK != status) {\n    printf(\nCould not register the BusObject with the BusAttachment\\n\n);\n}\n\nstd::vector\nqcc::String\n interfaces;\nfor( int i = 0; i \n mMyFirstBusObject-\ngetNumberOfInterfaces(); i++) {\n    interfaces.push_back(mMyFirstBusObject-\ngetInterfaceName(i));\n}\nstatus = AboutServiceApi::getInstance()-\nAddObjectDescription(mMyFirstBusObject-\nGetPath(), interfaces);\nif (ER_OK != status) {\n    printf(\nError returned by AddObjectDescription (%s).\\n\n, QCC_StatusText(status));\n}\n\n\n\n\nThe \nBusObject\n \nMyFirstBusObject\n contains all of the information that \nwill allow us to interact with other \"first_app\" applications. It exposes \nthe API set that we implement.\n\n\nOur \nBusAttachment\n is created, started, and connected.  The connection setup \ndone, device details set, and the Object has been registered. Now let's make \nthe registration call so that we can find other \"first_app\" applications.\n\nJust making the API call is not enough, we need to explictly tell the AllJoyn \nframework that we are interested in receiving Sessionless signals.\n\n\n/* Now create a list of the interfaces used so that we can find just applications that use these interfaces */\nint len = interfacesUsed.size();\nconst char* interfaces[len];\nfor( int i = 0; i \n len; i++) {\n   interfaces[i] = interfacesUsed[i].c_str();\n}\n\n/*\n * Register this class to receive AllJoyn About feature annoucements from the services we care about.\n * This performs service level discovery\n */\nAnnouncementRegistrar::RegisterAnnounceHandler(*mBusAttachment, *this, interfaces, len);\n\n\n\n\nThe list of interfaces is supplied so that we have filtering and find \njust the applications that have the interface support that we can interact with.\n\n\nLastly, we need to tell the world about our existance. To do this, we make \na call to the About feature to have it Announce.\n\n\n/* With the objects registered and everything setup we Annouce to tell the world that we exist  */\nstatus = AboutServiceApi::getInstance()-\nAnnounce();\nif (ER_OK != status) {\n    printf(\nFailed to addMatch for sessionless signals: %s\\n\n, QCC_StatusText(status));\n}\n\n\n\n\nThe AllJoyn APIs have been used to set up all the interaction, but we \nstill need to define how we are going to interact. This is where we will \nimplement our AllJoyn interface and expose it on a \nBusObject\n.\n\n\nIn designing this tutorial sample, we wanted to show a little variety of \nhow applications can interact.  We decided on a simple interface as follows:\n\n\nnode name=\n/my/first/busobject/communicate\n\n    \ninterface name=\norg.example.my.first.alljoyn.interface.communicate\n\n        \nmethod name=\nTell\n\n            \narg name=\nthought\n type=\ns\n direction=\nin\n/\n\n            \narg name=\nreply\n type=\ns\n direction=\nout\n/\n\n        \n/method\n\n        \nsignal name=\nShare\n\n            \narg name=\nthought\n type=\ns\n/\n\n        \n/signal\n\n        \nsignal name=\nBroadcast\n\n            \narg name=\nthought\n type=\ns\n/\n\n        \n/signal\n\n    \n/interface\n\n\n/node\n\n\n\n\n\nIn the above interface, Share and Broadcast are identical! Why did we do that? \nThis was to help express and show how signals can be sent on a single session \nor as a Sessionless signal.  The \"Share\" signal in this example could have been \nsent as a Sessionless signal to reduce the number of signals defined.  Similarly, \nthe Broadcast could have been used instead of \"Share\". But for the sake of simplicty \nand understanding, \"Share\" takes place in a group and \"Broadcast\" is available to the world.\n\n\nWe now have our interface defined so we can implement it in the software.\n\n\nstatic const char * MY_FIRST_OBJECT_PATH = \n/my/first/busobject/communicate\n;\nstatic const char * MY_FIRST_INTERFACE_NAMES[] = {\norg.example.my.first.alljoyn.interface.communicate\n};\nstatic const uint32_t MY_NUMBER_OF_INTERFACES = 1;\n...\n...\nQStatus status;\nInterfaceDescription* myFirstBusObjectIntf = NULL;\nif (!mBusAttachment.GetInterface(MY_FIRST_INTERFACE_NAMES[0])) {\n    status = mBusAttachment.CreateInterface(MY_FIRST_INTERFACE_NAMES[0], myFirstBusObjectIntf);\n\n    //Add BusMethods\n    myFirstBusObjectIntf-\nAddMethod(\nTell\n, \ns\n, \ns\n, \nthought,reply\n, 0);\n    myFirstBusObjectIntf-\nAddSignal(\nShare\n, \ns\n, \nthought\n, 0);// on a session\n    myFirstBusObjectIntf-\nAddSignal(\nBroadcast\n, \ns\n, \nthought\n, 0);\n\n    myFirstBusObjectIntf-\nActivate();\n}\n\n\n\n\nThe interface is now activated and ready to be used. We can now add it to our \nBusObject so that the AllJoyn framework knows that this object implements the above interface.\n\n\n/* Add the service interface to this object */\nconst InterfaceDescription* myFirstBusObjectTestIntf = mBusAttachment.GetInterface(MY_FIRST_INTERFACE_NAMES[0]);\nassert(myFirstBusObjectTestIntf);\nAddInterface(*myFirstBusObjectTestIntf);\n\n\n\n\nThe next step is to set up the method handlers for the BusMethod and the Signals \n(if used in your application).\n\n\n/* Set the local methods to which BusMethod linkage */\nconst MethodEntry methodEntries[] = {\n    { myFirstBusObjectTestIntf-\nGetMember(\nTell\n), static_cast\nMessageReceiver::MethodHandler\n(\nMyFirstBusObject::handleTell) },\n};\nstatus = AddMethodHandlers(methodEntries, sizeof(methodEntries)/sizeof(methodEntries[0])); \n\n/* Register the signal handlers */\nshareMember = myFirstBusObjectTestIntf-\nGetMember(\nShare\n);\nbroadcastMember = myFirstBusObjectTestIntf-\nGetMember(\nBroadcast\n);\nif (shareMember) {\n    status =  mBusAttachment.RegisterSignalHandler(this,\n        static_cast\nMessageReceiver::SignalHandler\n(\nMyFirstBusObject::shareHandler),\n        shareMember,\n        NULL);\n}\nif (broadcastMember) {\n    status =  mBusAttachment.RegisterSignalHandler(this,\n        static_cast\nMessageReceiver::SignalHandler\n(\nMyFirstBusObject::broadcastHandler),\n        broadcastMember,\n        NULL);\n}\n\n\n\n\nThe only thing missing now is in order to receive signals, much like \nwe had to do to receive the About Annoucement, we need to explictly \ntell the AllJoyn framework what we are interested in.\n\n\nstatic const char * MY_FIRST_ADD_MATCH_RULE = \ntype='signal',interface='org.example.my.first.alljoyn.interface.communicate'\n;\n...\n/* Make addMatch calls to complete the registration with the AllJoyn router */\nmBusAttachment.AddMatch(MY_FIRST_ADD_MATCH_RULE);\n...\n\n\n\n\nLastly, we implment the functions we assigned to handle the incoming responses.\n\n\nvoid MyFirstBusObject::handleTell(const InterfaceDescription::Member* member, Message\n msg)\n{\n    const char* receivedThought = msg-\nGetArg(0)-\nv_string.str;\n    printf(\nSomeone(%s) told you (%s)\\n\n, msg-\nGetSender(), receivedThought);\n\n    MsgArg reply;\n    reply.Set(\ns\n, \nYou're so funny!\n);\n    QStatus status = MethodReply(msg, \nreply, 1);\n    if (status == ER_OK) {\n        printf(\nYou let them know they are funny!\\n\n);\n    } else {\n        printf(\nAn error occured and they do not know that they are funny.\\n\n);\n    }\n}\nvoid MyFirstBusObject::shareHandler(const InterfaceDescription::Member* member, const char* srcPath, Message\n msg)\n{\n    const char* receivedThought = msg-\nGetArg(0)-\nv_string.str;\n    const char* fromUser = msg-\nGetSender();\n    printf(\nReceived shared thought (%s) from %s on sessionId %d\\n\n, receivedThought, fromUser, msg-\nGetSessionId());\n}\nvoid MyFirstBusObject::broadcastHandler(const InterfaceDescription::Member* member, const char* srcPath, Message\n msg)\n{\n    const char* receivedThought = msg-\nGetArg(0)-\nv_string.str;\n    const char* fromUser = msg-\nGetSender();\n    printf(\nReceived a broudcast thought (%s) from %s\\n\n, receivedThought, fromUser);\n}\n\n\n\n\nThe above methods will be automatically triggered by the AllJoyn framework \nwhen an AllJoyn message comes in that is intended for us when the receipt \nfactors are met. Specifically, we are in the same session that the \nSignal\n \nor BusMethod call came in on, or the \"Broadcast\" sessionless signal came in.\n\n\nThe last thing that this application needs is a the code to place the \nBusMethod\n \ncall or to send the \nSignals\n.\nTo execute a BusMethod call on another application, we need to create a \n\nProxyBusObject\n that represents that application's software. In order to \ndo this, we need the UniqueName of the other application, the sessionId that \nwe are joined into, and the Path that the object lives. In this example, \nwe have a fixed path of \"/my/first/busobject/communicate\".\n\n\nqcc::String MyFirstBusObject::doTell(qcc::String uniqueName, qcc::String thought, int sessionId)\n{\n    ProxyBusObject remoteObj = ProxyBusObject(*bus, uniqueName.c_str(), MY_FIRST_OBJECT_PATH, (SessionId)sessionId);    \n    remoteObj.AddInterface(MY_FIRST_INTERFACE_NAMES[0]);\n    Message reply(*bus);\n    MsgArg arg(\ns\n, thought.c_str());\n    QStatus status = remoteObj.MethodCall(MY_FIRST_INTERFACE_NAMES[0], \nTell\n, \narg, 1, reply);\n    if (ER_OK == status) {\n        return reply-\nGetArg(0)-\nv_string.str; \n    }\n    return \nERROR\n;\n}\n\n\n\n\nSending of a \nSignal\n is done through the \nBusObject\n's \nSignal\n method. \nWhat makes a signal bound to a session is by passing in a valid \nSessionId\n. \nWhat makes it a Sessionless Signal is by setting the flag that describes it as such.\n\n\nvoid MyFirstBusObject::doShare(qcc::String thought, int sessionId)\n{\n    MsgArg payload(\ns\n, thought.c_str());\n    uint8_t flags = 0;\n    Signal(NULL, sessionId, *shareMember, \npayload, 1, 0, flags);\n}\nvoid MyFirstBusObject::doBroadcast(qcc::String thought)\n{\n    MsgArg payload(\ns\n, thought.c_str());\n    uint8_t flags = ALLJOYN_FLAG_SESSIONLESS;\n    Signal(NULL, 0, *broadcastMember, \npayload, 1, 0, flags);\n}\n\n\n\n\nThese functions are nearly identical, but semantically VERY different. \nThe differences exist on who is eligible to receive the \"thought\".\n\nThe doShare method sends the Signal to just those who are joined together \nin a session. The doBroadcast method sends it to anyone who is interested and listening.\n\n\nWith the creation of the code to interact we now have everything set up \nfor the AllJoyn framework side of things. The remaining code in the tutorial \ndeals with tracking members who join a session via the \nSessionListener\n and \nhandling the command line input.",
            "title": "Home"
        },
        {
            "location": "/develop/tutorial/core/#my-first-alljoyn-core-application",
            "text": "Congratulations again on realizing that the AllJoyn framework will \nsolve all your proximity peer-to-peer issues. To better understand \nthe application that will be explained here, we will discuss an analogy \nthat should make understanding the AllJoyn framework clear.",
            "title": "My First AllJoyn&trade; Core Application"
        },
        {
            "location": "/develop/tutorial/core/#concepts",
            "text": "Imagine you are in a room with lots of other people, a school \ncafeteria or public event. You have a group of people that you are \nwith that you want to interact with. There are many people around \nall making noise and talking and having conversations, being social. \nAn AllJoyn application is very much like a group setting. People in \na group can \"tell\" someone something, \"share\" something to the group, \nor \"broadcast\" something for everyone to hear.  Let's look at the concept to \"Tell\" someone. We get a person's attention, \ndirect what we want to say directly at that person, and normally get a \nresponse. In the AllJoyn framework, this is the equivalent of joining a \nsession and executing a BusMethod call. We connect with another application, \nthen send what we want it to know, and get a response.  The concept of \"Share\" allows us to communicate with the group we are with. \nWhen you want to let each person in your group know something important, \nyou share with them by making an announcement. In the AllJoyn framework, \nthis equates to joining a session and sending a Signal. We don't want a \nresponse to our announcement, we just have meaningful data we want people \nin the group to know about at the same time.  Lastly, the idea of \"Broadcast\". When you want everyone in the room to \nhear what you have to say, regardless of who they are, we scream at the \ntop of our lungs something we feel is important. Some people will ignore \nthis, others will hear and take action, others will hear it and ignore our \nmessage. In the AllJoyn framework, we call this a  Sessionless Signal .\nThis allows for an application to publish some data that it feels is \nmeaningful across the network with a time to live expiration value. \nThat message can be picked up by any application that may be interested \nand there is no logic needed to track a sessionId, figure out who binds/joins; \nthe AllJoyn core handles this for you.  One thing that we have, as people, is the ability to see each other and \nrecognize certain characteristics like height, eye color, male/female, etc. \nWe also can recognize our friends in a crowed based on what they are wearing, etc. \nIn the AllJoyn framework, we discover other applications through the  About Feature  \nand this tells us characteristics about the device: name, make, model, etc. \nIt also tells us, very specifically, the set of interfaces that are supported. \nThese interfaces define the features that are exposed, and really the API set \nthat we can interact with.  Let's get started building our first AllJoyn application by advertising our \ncapabilities, looking for other compatible applicaitons, and performing the \n3 communication paths: 1-to-1 interactions with a specific application, \n1-to-many to a specific set of applications, and 1-to-many with any application.  Before we get started writing code, follow the environment setup guide for your platform:    Linux      Windows  Now that we have our environment set up, let's start writing some software!",
            "title": "Concepts"
        },
        {
            "location": "/develop/tutorial/core/#tutorial",
            "text": "The code for this tutorial can be found in the  Hackfest project .  In designing this sample application, we tried to seprate the \napplication into 3 sections of functinality to better aid in understanding.   Main application code - main \n  * Handles the command line input\n  * Creates and places calls into the code that manages interactions with the AllJoyn APIs   AllJoyn API code - MyAllJoynCode \n  * Shows how to initialize the AllJoyn framework\n  * Use the About Feature for service-level advertisement/discovery\n  * Binds a session and tracks hosted sessionId\n  * Tracks users on a sessionId\n  * Interacts with MyFirstBusObject to communicate with other AllJoyn entities\n*  BusObject Implmentation - MyFirstBusObject \n  * Creates and implements an AllJoyn Interface\n  * Shows how to send a BusMethod and get a reply\n  * Shows how to send a Signal and Sessionless Signal\n  * Shows how to receive Signals  NOTE: The code snippets are not complete by themselves and requires \nthe entire software to run. The snippets should be used as a reference \non how to use the AllJoyn APIs to help build an Application.  Every AllJoyn application creates a BusAttachment, starts it, \nand connects to an  AllJoyn Router . The BusAttachment \nis the Object that allows you to use the AllJoyn APIs.  mBusAttachment = new BusAttachment( MyFirstApplication , true);\n/* Start the msg bus */\nif (ER_OK == status) {\n    status = mBusAttachment- Start();\n} else {\n    printf( BusAttachment::Start failed\\n );\n}\n/* Connect to the daemon */\nif (ER_OK == status) {\n    status = mBusAttachment- Connect();\n    if (ER_OK != status) {\n        printf( BusAttachment Connect failed.\\n );\n    }\n}  Now that the BusAttachment is set up, our next action is to decide \nwhat we want to do with the app. In this tutorial sample application, \nwe are going to be both a client and service side - a true peer on \nthe network.  In order to allow connections, we need to  BindSession .  /* Bind a session port so that we can accept incomming join requests */\nSessionOpts opts(SessionOpts::TRAFFIC_MESSAGES, true, SessionOpts::PROXIMITY_ANY, TRANSPORT_ANY);\nSessionPort sp = SESSION_PORT_ANY; \nstatus = mBusAttachment- BindSessionPort(sp, opts, *this);\nif (ER_OK != status) {\n    printf( Failed to bind session port\\n );\n}  We use  SESSION_PORT_ANY  because it doesn't matter what the port is \nin this sample.  We want the AllJoyn framework to assign us one to use \nand that will then get passed into our About data.  To \"inform\" other \napplications that we exist, we need to set up to use the About feature.  /* Create About data so that we can advertise */\nmAboutData = new AboutPropertyStoreImpl();\n// a platform-specific unique device id - ex. could be the Mac address\n// use a random value for this application, this should persist in a comercial application\nmAboutData- setDeviceId(getDeviceId());\nmAboutData- setDeviceName( MyDeviceName );\n// the globally unique identifier for the application - recommend to use an online GUID generator to create\n// use a random value for this application, this should persist in a comercial application\nmAboutData- setAppId(getAppId());\nstd::vector qcc::String  languages(1);\nlanguages[0] =  en ;\nmAboutData- setSupportedLangs(languages);\nmAboutData- setDefaultLang( en );\nmAboutData- setAppName(appName);\nmAboutData- setModelNumber( Tutorial5000 );\nmAboutData- setDateOfManufacture( 8/15/2014 );\nmAboutData- setSoftwareVersion( 1.0 build 1 );\nmAboutData- setAjSoftwareVersion(ajn::GetVersion());\nmAboutData- setHardwareVersion( N/A );\nmAboutData- setDescription( This is the my first AllJoyn Application! ,  en );\nmAboutData- setManufacturer( Company ,  Me );\nmAboutData- setSupportUrl( http://www.allseenalliance.org );\n\n/* Initialize the About feature Service side */\nAboutServiceApi::Init(*mBusAttachment, *mAboutData);\n\n/* Register the port with About feature that was set when BindSession called */\nstatus = AboutServiceApi::getInstance()- Register(sp);\n/* Register the About feature with AllJoyn */\nstatus = mBusAttachment- RegisterBusObject(*AboutServiceApi::getInstance());  Our application is starting to come together, we have the foundation \nto allow other applications to find and connect to us.  Next, we create our  BusObjects  and then add them to the About data so \nthat applications can filter for just the interfaces we support.  /* Create and Register the developers BusObjects */\n/**\n * Here is where we add the objects we wish to expose.\n * A developer would modify this section to add different BusObjects.\n */\nmMyFirstBusObject = new MyFirstBusObject(*mBusAttachment);\n\n/* Now register the object with AllJoyn and About */\nQStatus status;\nstatus = mBusAttachment- RegisterBusObject(*mMyFirstBusObject);\nif (ER_OK != status) {\n    printf( Could not register the BusObject with the BusAttachment\\n );\n}\n\nstd::vector qcc::String  interfaces;\nfor( int i = 0; i   mMyFirstBusObject- getNumberOfInterfaces(); i++) {\n    interfaces.push_back(mMyFirstBusObject- getInterfaceName(i));\n}\nstatus = AboutServiceApi::getInstance()- AddObjectDescription(mMyFirstBusObject- GetPath(), interfaces);\nif (ER_OK != status) {\n    printf( Error returned by AddObjectDescription (%s).\\n , QCC_StatusText(status));\n}  The  BusObject   MyFirstBusObject  contains all of the information that \nwill allow us to interact with other \"first_app\" applications. It exposes \nthe API set that we implement.  Our  BusAttachment  is created, started, and connected.  The connection setup \ndone, device details set, and the Object has been registered. Now let's make \nthe registration call so that we can find other \"first_app\" applications. \nJust making the API call is not enough, we need to explictly tell the AllJoyn \nframework that we are interested in receiving Sessionless signals.  /* Now create a list of the interfaces used so that we can find just applications that use these interfaces */\nint len = interfacesUsed.size();\nconst char* interfaces[len];\nfor( int i = 0; i   len; i++) {\n   interfaces[i] = interfacesUsed[i].c_str();\n}\n\n/*\n * Register this class to receive AllJoyn About feature annoucements from the services we care about.\n * This performs service level discovery\n */\nAnnouncementRegistrar::RegisterAnnounceHandler(*mBusAttachment, *this, interfaces, len);  The list of interfaces is supplied so that we have filtering and find \njust the applications that have the interface support that we can interact with.  Lastly, we need to tell the world about our existance. To do this, we make \na call to the About feature to have it Announce.  /* With the objects registered and everything setup we Annouce to tell the world that we exist  */\nstatus = AboutServiceApi::getInstance()- Announce();\nif (ER_OK != status) {\n    printf( Failed to addMatch for sessionless signals: %s\\n , QCC_StatusText(status));\n}  The AllJoyn APIs have been used to set up all the interaction, but we \nstill need to define how we are going to interact. This is where we will \nimplement our AllJoyn interface and expose it on a  BusObject .  In designing this tutorial sample, we wanted to show a little variety of \nhow applications can interact.  We decided on a simple interface as follows:  node name= /my/first/busobject/communicate \n     interface name= org.example.my.first.alljoyn.interface.communicate \n         method name= Tell \n             arg name= thought  type= s  direction= in / \n             arg name= reply  type= s  direction= out / \n         /method \n         signal name= Share \n             arg name= thought  type= s / \n         /signal \n         signal name= Broadcast \n             arg name= thought  type= s / \n         /signal \n     /interface  /node   In the above interface, Share and Broadcast are identical! Why did we do that? \nThis was to help express and show how signals can be sent on a single session \nor as a Sessionless signal.  The \"Share\" signal in this example could have been \nsent as a Sessionless signal to reduce the number of signals defined.  Similarly, \nthe Broadcast could have been used instead of \"Share\". But for the sake of simplicty \nand understanding, \"Share\" takes place in a group and \"Broadcast\" is available to the world.  We now have our interface defined so we can implement it in the software.  static const char * MY_FIRST_OBJECT_PATH =  /my/first/busobject/communicate ;\nstatic const char * MY_FIRST_INTERFACE_NAMES[] = { org.example.my.first.alljoyn.interface.communicate };\nstatic const uint32_t MY_NUMBER_OF_INTERFACES = 1;\n...\n...\nQStatus status;\nInterfaceDescription* myFirstBusObjectIntf = NULL;\nif (!mBusAttachment.GetInterface(MY_FIRST_INTERFACE_NAMES[0])) {\n    status = mBusAttachment.CreateInterface(MY_FIRST_INTERFACE_NAMES[0], myFirstBusObjectIntf);\n\n    //Add BusMethods\n    myFirstBusObjectIntf- AddMethod( Tell ,  s ,  s ,  thought,reply , 0);\n    myFirstBusObjectIntf- AddSignal( Share ,  s ,  thought , 0);// on a session\n    myFirstBusObjectIntf- AddSignal( Broadcast ,  s ,  thought , 0);\n\n    myFirstBusObjectIntf- Activate();\n}  The interface is now activated and ready to be used. We can now add it to our \nBusObject so that the AllJoyn framework knows that this object implements the above interface.  /* Add the service interface to this object */\nconst InterfaceDescription* myFirstBusObjectTestIntf = mBusAttachment.GetInterface(MY_FIRST_INTERFACE_NAMES[0]);\nassert(myFirstBusObjectTestIntf);\nAddInterface(*myFirstBusObjectTestIntf);  The next step is to set up the method handlers for the BusMethod and the Signals \n(if used in your application).  /* Set the local methods to which BusMethod linkage */\nconst MethodEntry methodEntries[] = {\n    { myFirstBusObjectTestIntf- GetMember( Tell ), static_cast MessageReceiver::MethodHandler ( MyFirstBusObject::handleTell) },\n};\nstatus = AddMethodHandlers(methodEntries, sizeof(methodEntries)/sizeof(methodEntries[0])); \n\n/* Register the signal handlers */\nshareMember = myFirstBusObjectTestIntf- GetMember( Share );\nbroadcastMember = myFirstBusObjectTestIntf- GetMember( Broadcast );\nif (shareMember) {\n    status =  mBusAttachment.RegisterSignalHandler(this,\n        static_cast MessageReceiver::SignalHandler ( MyFirstBusObject::shareHandler),\n        shareMember,\n        NULL);\n}\nif (broadcastMember) {\n    status =  mBusAttachment.RegisterSignalHandler(this,\n        static_cast MessageReceiver::SignalHandler ( MyFirstBusObject::broadcastHandler),\n        broadcastMember,\n        NULL);\n}  The only thing missing now is in order to receive signals, much like \nwe had to do to receive the About Annoucement, we need to explictly \ntell the AllJoyn framework what we are interested in.  static const char * MY_FIRST_ADD_MATCH_RULE =  type='signal',interface='org.example.my.first.alljoyn.interface.communicate' ;\n...\n/* Make addMatch calls to complete the registration with the AllJoyn router */\nmBusAttachment.AddMatch(MY_FIRST_ADD_MATCH_RULE);\n...  Lastly, we implment the functions we assigned to handle the incoming responses.  void MyFirstBusObject::handleTell(const InterfaceDescription::Member* member, Message  msg)\n{\n    const char* receivedThought = msg- GetArg(0)- v_string.str;\n    printf( Someone(%s) told you (%s)\\n , msg- GetSender(), receivedThought);\n\n    MsgArg reply;\n    reply.Set( s ,  You're so funny! );\n    QStatus status = MethodReply(msg,  reply, 1);\n    if (status == ER_OK) {\n        printf( You let them know they are funny!\\n );\n    } else {\n        printf( An error occured and they do not know that they are funny.\\n );\n    }\n}\nvoid MyFirstBusObject::shareHandler(const InterfaceDescription::Member* member, const char* srcPath, Message  msg)\n{\n    const char* receivedThought = msg- GetArg(0)- v_string.str;\n    const char* fromUser = msg- GetSender();\n    printf( Received shared thought (%s) from %s on sessionId %d\\n , receivedThought, fromUser, msg- GetSessionId());\n}\nvoid MyFirstBusObject::broadcastHandler(const InterfaceDescription::Member* member, const char* srcPath, Message  msg)\n{\n    const char* receivedThought = msg- GetArg(0)- v_string.str;\n    const char* fromUser = msg- GetSender();\n    printf( Received a broudcast thought (%s) from %s\\n , receivedThought, fromUser);\n}  The above methods will be automatically triggered by the AllJoyn framework \nwhen an AllJoyn message comes in that is intended for us when the receipt \nfactors are met. Specifically, we are in the same session that the  Signal  \nor BusMethod call came in on, or the \"Broadcast\" sessionless signal came in.  The last thing that this application needs is a the code to place the  BusMethod  \ncall or to send the  Signals .\nTo execute a BusMethod call on another application, we need to create a  ProxyBusObject  that represents that application's software. In order to \ndo this, we need the UniqueName of the other application, the sessionId that \nwe are joined into, and the Path that the object lives. In this example, \nwe have a fixed path of \"/my/first/busobject/communicate\".  qcc::String MyFirstBusObject::doTell(qcc::String uniqueName, qcc::String thought, int sessionId)\n{\n    ProxyBusObject remoteObj = ProxyBusObject(*bus, uniqueName.c_str(), MY_FIRST_OBJECT_PATH, (SessionId)sessionId);    \n    remoteObj.AddInterface(MY_FIRST_INTERFACE_NAMES[0]);\n    Message reply(*bus);\n    MsgArg arg( s , thought.c_str());\n    QStatus status = remoteObj.MethodCall(MY_FIRST_INTERFACE_NAMES[0],  Tell ,  arg, 1, reply);\n    if (ER_OK == status) {\n        return reply- GetArg(0)- v_string.str; \n    }\n    return  ERROR ;\n}  Sending of a  Signal  is done through the  BusObject 's  Signal  method. \nWhat makes a signal bound to a session is by passing in a valid  SessionId . \nWhat makes it a Sessionless Signal is by setting the flag that describes it as such.  void MyFirstBusObject::doShare(qcc::String thought, int sessionId)\n{\n    MsgArg payload( s , thought.c_str());\n    uint8_t flags = 0;\n    Signal(NULL, sessionId, *shareMember,  payload, 1, 0, flags);\n}\nvoid MyFirstBusObject::doBroadcast(qcc::String thought)\n{\n    MsgArg payload( s , thought.c_str());\n    uint8_t flags = ALLJOYN_FLAG_SESSIONLESS;\n    Signal(NULL, 0, *broadcastMember,  payload, 1, 0, flags);\n}  These functions are nearly identical, but semantically VERY different. \nThe differences exist on who is eligible to receive the \"thought\". \nThe doShare method sends the Signal to just those who are joined together \nin a session. The doBroadcast method sends it to anyone who is interested and listening.  With the creation of the code to interact we now have everything set up \nfor the AllJoyn framework side of things. The remaining code in the tutorial \ndeals with tracking members who join a session via the  SessionListener  and \nhandling the command line input.",
            "title": "Tutorial"
        },
        {
            "location": "/learn/architecture/",
            "text": "\u7ed3\u6784\n\n\n\u7f51\u7edc\u7ed3\u6784\n\n\nThe AllJoyn\n framework runs on the local network. \nIt enables devices and apps to advertise and discover \neach other. This section explains the network architecture \nand the relationship between various AllJoyn components.\n\n\nAllJoyn\n\u67b6\u6784\u5728\u672c\u5730\u7f51\u7edc\u4e0a\u8fd0\u884c\uff0c\u4f7f\u8bbe\u5907\u548c\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u53d1\u9001\u901a\u77e5\u5e76\u4e14\u53d1\u73b0\u5f7c\u6b64\u3002\u672c\u7ae0\u89e3\u91ca\u4e86 Alljoyn \u7684\u7f51\u7edc\u7ed3\u6784\u548c\u4e0d\u540c AllJoyn \u7ec4\u4ef6\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\n\n\nApps and Routers \u5e94\u7528\u548c\u8def\u7531\n\n\nThe AllJoyn framework comprises AllJoyn Apps and AllJoyn \nRouters, or Apps and Routers for short. Apps communicate \nwith Routers and Routers communicate with Apps. Apps can \nonly communicate with other Apps by going through a Router.\nAllJoyn \u67b6\u6784\u5305\u542b\u4e86 Alljoyn \u5e94\u7528\u548c AllJoyn \u8def\u7531\uff0c\u7b80\u79f0\u5e94\u7528\u548c\u8def\u7531\u3002\u5e94\u7528\u548c\u8def\u7531\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u901a\u4fe1\u3002\u5e94\u7528\u53ea\u80fd\u901a\u8fc7\u8def\u7531\u6765\u4e0e\u53e6\u4e00\u4e2a\u5e94\u7528\u8fdb\u884c\u901a\u884c\u3002\n\n\nApps and Routers can live on the same physical device, or \non different devices. From an AllJoyn perspective, it doesn't \nmatter.  In reality, three common topologies exist:\n\u5e94\u7528\u548c\u8def\u7531\u53ef\u4ee5\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7269\u7406\u8bbe\u5907\uff0c\u4e5f\u53ef\u4ee5\u5206\u5e03\u5728\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\u3002\u4eceAlljoyn \u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u6ca1\u6709\u5f88\u5927\u533a\u522b\u3002\u5728\u73b0\u5b9e\u4e2d\uff0c\u5b58\u5728\u4e09\u4e2a\u5e38\u89c1\u7684\u62d3\u6251:\n1. An App uses its own Router. In this case, the Router is\ncalled a \"Bundled Router\" as it is bundled with the App. AllJoyn\nApps on mobile OSes like Android and iOS and desktop OSes like\nMac OS X and Windows generally fall in this group.\n1. \u5355\u4e00\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u81ea\u5df1\u7684\u8def\u7531\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u8def\u7531\u4e0e\u5e94\u7528\u4e4b\u95f4\u7684\u7ed1\u5b9a\u5173\u7cfb\uff0c\u8def\u7531\u88ab\u79f0\u4e4b\u4e3a\u201c\u7ed1\u5b9a\u8def\u7531\u201d\u3002\u5728\u5982 Android \u548c IOS \u7684\u624b\u673a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4ee5\u53ca\u5982 Mac OS X \u548c Windows \u7684\u684c\u9762\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u8fd0\u884c\u7684 Alljoyn \u5e94\u7528\u901a\u5e38\u90fd\u5c5e\u4e8e\u201c\u7ed1\u5b9a\u8def\u7531\u201d\u7684\u60c5\u51b5\u3002\n\n\n\n\nMultiple Apps on the same device use one Router.  In this \ncase, the Router is called a \"Standalone Router\" and it \ntypically runs in a background/service process.  This is \ncommon on Linux systems where the AllJoyn Router runs as a \ndaemon process and other AllJoyn apps connect to the Standalone \nRouter. By having multiple apps on the same device use the \ncommon AllJoyn Router, the device consumes less overall resources.\n\n\n\u5728\u540c\u4e00\u8bbe\u5907\u4e0a\u7684\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u4e00\u4e2a\u8def\u7531\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u8def\u7531\u88ab\u79f0\u4e4b\u4e3a\u201d\u72ec\u7acb\u8def\u7531\u5668\u201c\uff0c\u5b83\u901a\u5e38\u5728\u540e\u53f0/\u670d\u52a1\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u3002\u8fd9\u6837\u7684\u60c5\u51b5\u591a\u53d1\u751f\u5728 Linux \u7cfb\u7edf\u4e2d\u3002\u5728 Linux \u7cfb\u7edf\u4e2d\uff0cAllJoyn \u8def\u7531\u4f5c\u4e3a\u5b88\u62a4\u8fdb\u7a0b\u8fd0\u884c\uff0cAlljoyn \u5e94\u7528\u88ab\u8fde\u63a5\u5230\u72ec\u7acb\u8def\u7531\u5668\u3002\u901a\u8fc7\u628a\u540c\u4e00\u8bbe\u5907\u4e0a\u7684\u591a\u4e2a\u5e94\u7528\u8fde\u63a5\u5230\u4e00\u4e2a\u901a\u7528\u8def\u7531\u4e0a\uff0c\u8bbe\u5907\u51cf\u5c11\u4e86\u603b\u4f53\u8d44\u6e90\u7684\u6d88\u8017\u3002\n\n\nAn App uses a Router on a different device. Embedded \ndevices (which use the Thin variant of the AllJoyn framework, \nmore on this later) typically fall in this camp as the embedded \ndevice typically does not have enough CPU and memory to run \nthe AllJoyn router.\n\n\n\u67d0\u4e2a\u5e94\u7528\u4f7f\u7528\u4e0d\u540c\u8bbe\u5907\u4e0a\u7684\u8def\u7531\u3002\u5d4c\u5165\u5f0f\u8bbe\u5907\uff08\u901a\u5e38\u4f7f\u7528\u7cbe\u7b80 AllJoyn \u67b6\u6784\uff0c\u4e4b\u540e\u4f1a\u5177\u4f53\u8bf4\u660e\uff09\u901a\u5e38\u5c5e\u4e8e\u8fd9\u4e2a\u7c7b\u578b\u3002\u56e0\u4e3a\u5d4c\u5165\u5f0f\u8bbe\u5907\u901a\u5e38\u6ca1\u6709\u8db3\u591f\u5f3a\u5927\u7684 CPU \u548c \u5185\u5b58\u6765\u8fd0\u884c AllJoyn \u8def\u7531\u3002\n\n\n\n\n\n\nTransports \u4f20\u8f93\n\n\nThe AllJoyn framework runs on the local network.  It currently \nsupports Wi-Fi, Ethernet, serial, and Power Line (PLC), but since\nthe AllJoyn software was written to be transport-agnostic and\nsince the AllJoyn system is an evolving open-source project,\nsupport for more transports can be added in the future.\nAllJoyn \u67b6\u6784\u5728\u672c\u5730\u7f51\u7edc\u4e0a\u8fd0\u884c\u3002\u76ee\u524d\u5b83\u652f\u6301 Wi-Fi, Ethernet, serial, \u548c Power Line (PLC)\u3002\u4e0d\u8fc7\u7531\u4e8e AllJoyn \u8f6f\u4ef6\u662f\u534f\u8bae\u4e0d\u76f8\u5173\u7684\uff0c\u5e76\u4e14 AllJoyn \u7cfb\u7edf\u662f\u5728\u4e0d\u65ad\u5b8c\u5584\u7684\u5f00\u6e90\u5de5\u7a0b\u3002\u5728\u672a\u6765\uff0c\u66f4\u591a\u7684\u4f20\u8f93\u65b9\u5f0f\u5c06\u88ab\u52a0\u5165\u5176\u4e2d\u3002\n\n\nAdditionally, bridge software can be created to bridge the \nAllJoyn framework to other systems like Zigbee, Z-wave, or \nthe cloud. In fact, a Working Group is working on adding a \n\nGateway Agent\n as a standard AllJoyn service.\n\u9664\u6b64\u4e4b\u5916\uff0c\u4f7f\u7528\u6865\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5c06 AllJoyn \u67b6\u6784\u4e0e\u5176\u4ed6\u7c7b\u578b\u7684\u7cfb\u7edf\u4e92\u8054\uff0c\u5982 Zigbee, Z-wave \u548c\u4e91\u3002\u5b9e\u9645\u4e0a\uff0c\u6709\u4e00\u4e2a\u5de5\u4f5c\u7ec4\u6b63\u5728\u8d1f\u8d23\u5411\u6807\u51c6 AllJoyn \u670d\u52a1\u4e2d\u52a0\u5165\u4e00\u4e2a\n\u7f51\u5173\u4ee3\u7406\n\u3002\n\n\nSoftware Architecture \u8f6f\u4ef6\u7ed3\u6784\n\n\nThe AllJoyn network comprises AllJoyn Applications and AllJoyn Routers.\nAllJoyn \u67b6\u6784\u5305\u542b\u4e86 Alljoyn \u5e94\u7528\u548c AllJoyn \u8def\u7531\u3002\n\n\nAn AllJoyn Application comprises the following components:\n\u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u5305\u542b\u4e86\u4ee5\u4e0b\u7ec4\u4ef6\uff1a\n\n \nAllJoyn App Code\n\n\n \nAllJoyn Service Frameworks Libraries\n\n* \nAllJoyn Core Library\n\n\nAllJoyn Router\n can either run as standalone or is \nsometimes bundled with the AllJoyn Core Library.\n\nAllJoyn \u8def\u7531\n \u65e2\u53ef\u4ee5\u662f\u72ec\u7acb\u7684\uff0c\u4e5f\u53ef\u4ee5\u7ed1\u5b9a\u5230 AllJoyn \u5185\u6838\u8d44\u6e90\u5e93\u3002\n\n\n\n\nAllJoyn Router AllJoyn \u8def\u7531\n\n\nThe AllJoyn router routes AllJoyn messages between AllJoyn Routers \nand Applications, including between different transports.\nAllJoyn \u8def\u7531\u8d1f\u8d23\u8f6c\u53d1\u5176\u4e0e\u5e94\u7528\u4e4b\u95f4\u7684 AllJoyn \u4fe1\u606f\uff0c\u5305\u62ec\u4e0d\u540c\u4f20\u8f93\u65b9\u5f0f\u4e4b\u95f4\u7684\u4fe1\u606f\u3002\n\n\nAllJoyn Core Library AllJoyn \u6838\u5fc3\u8d44\u6e90\u5e93\n\n\nThe AllJoyn Core Library provides the lowest level set of APIs \nto interact with the AllJoyn network.  It provides direct access to:\nAllJoyn \u6838\u5fc3\u8d44\u6e90\u5e93\u63d0\u4f9b\u4e86\u4e0e AllJoyn \u7f51\u7edc\u4e92\u8054\u7684\u6700\u4f4e\u7ea7\u522b\u7684 API\u3002\u5b83\u4e3a\u4ee5\u4e0b\u5185\u5bb9\u63d0\u4f9b\u4e86\u76f4\u63a5\u8bbf\u95ee\u65b9\u5f0f\uff1a\n\n\n\n\nAdvertisements and discovery\n\n\nSession creation\n\n\nInterface defintion of methods, properties, and signals\n\n\nObject creation and handling\n\n\n\u901a\u77e5\u548c\u53d1\u73b0\n\n\n\u5efa\u7acb\u4f1a\u8bdd\n\n\n\u63a5\u53e3\u5b9a\u4e49\u7684\u65b9\u6cd5\u3001 \u5c5e\u6027\u548c\u4fe1\u53f7\n\n\n\u5bf9\u8c61\u7684\u521b\u5efa\u548c\u5904\u7406\nDevelopers use these APIs to implement AllJoyn service frameworks, or to implement private interfaces.\n\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u8fd9\u4e9b API \u6765\u5b9e\u73b0 AllJoyn \u670d\u52a1\u67b6\u6784\uff0c\u6216\u5efa\u7acb\u4e13\u7528\u63a5\u53e3\u3002\n\nLearn more about AllJoyn Core Frameworks\n.\n\n\u4e86\u89e3\u66f4\u591a\u5173\u4e8e AllJoyn \u6838\u5fc3\u67b6\u6784\n.\n\n\n\n\nAllJoyn Service Framework Libraries AllJoyn \u670d\u52a1\u6846\u67b6\u8d44\u6e90\u5e93\n\n\nThe AllJoyn Service Frameworks implement a set of common services, \nlike onboarding, notification, or control panel. By using the \ncommon AllJoyn service frameworks, apps and devices can properly \ninteroperate with each other to perform a specific functionality.\nAllJoyn \u670d\u52a1\u67b6\u6784\u63d0\u4f9b\u4e00\u5957\u901a\u7528\u670d\u52a1\uff0c\u4f8b\u5982\u7ba1\u7406\u3001\u901a\u77e5\u548c\u63a7\u5236\u9762\u677f\u3002\u901a\u8fc7\u4f7f\u7528\u901a\u7528 AllJoyn \u670d\u52a1\u67b6\u6784\uff0c\u5e94\u7528\u548c\u8bbe\u5907\u80fd\u591f\u8fdb\u884c\u534f\u4f5c\uff0c\u5b9e\u73b0\u7279\u5b9a\u7684\u529f\u80fd\u3002\n\n\nService frameworks are broken out into AllSeen Working Groups:\n\u670d\u52a1\u67b6\u6784\u88ab\u5206\u4e3a\u5982\u4e0b\u5de5\u4f5c\u7ec4\uff1a\n\n\n\n\nBase Services\n\n\n\n\nOnboarding\n. Provide a consistent way to bring a new device onto \n    the Wi-Fi network.\u4e3a\u65b0\u8bbe\u5907\u52a0\u5165 Wi-Fi \u7f51\u7edc\u63d0\u4f9b\u4e00\u4e2a\u7edf\u4e00\u7684\u65b9\u5f0f\u3002\n\n\n\n\n\n\nConfiguration\n. Allows one to configure certain attributes of \n    an application/device, such as its friendly name.\u5141\u8bb8\u7528\u6237\u8bbe\u7f6e\u5e94\u7528\uff0f\u8bbe\u5907\u7684\u7279\u5b9a\u5c5e\u6027\uff0c\u5982\u5b83\u7684\u522b\u540d\u3002\n\n\n\n\n\n\nNotifications\n. Allows text-based notifications to be sent and \n    received by devices on the AllJoyn network. Also supports audio and images\n    via URLs.\u5141\u8bb8\u57fa\u4e8e\u6587\u672c\u7684\u901a\u77e5\u5728 AllJoyn \u7f51\u7edc\u4e2d\u7684\u6536\u53d1\u3002\u901a\u8fc7URL\uff0c\u4e5f\u652f\u6301\u58f0\u97f3\u548c\u56fe\u50cf\u3002\n\n\n\n\n\n\nControl Panel\n. Allows devices to advertise a virtual control\n    panel to be controlled remotely.\u5141\u8bb8\u8bbe\u5907\u5e7f\u64ad\u4e00\u4e2a\u865a\u62df\u7684\u63a7\u5236\u9762\u677f\u4ee5\u88ab\u8fdc\u7a0b\u63a7\u5236\u3002\n\n\n\n\n\n\nMore Service Frameworks\n. More service frameworks are actively\n  being developed by the AllSeen Working Groups.Allseen \u5de5\u4f5c\u7ec4\u6b63\u5728\u79ef\u6781\u5f00\u53d1\u66f4\u591a\u7684\u670d\u52a1\u67b6\u6784\u3002\n\n\n\n\n\n\nDevelopers are encouraged to use AllJoyn Service Frameworks\nwhere possible. If an existing service is not available,\nthen the developer is encouraged to work with the AllSeen\nAlliance to create a standard service.  In some cases, using\nprivate services and intefaces makes the most sense; howerver,\nthose services would not be able to interoperate and take\nadvantage of the larger AllJoyn ecosystem of devices and apps.\n\u5982\u679c\u6761\u4ef6\u5141\u8bb8\uff0c\u6211\u4eec\u9f13\u52b1\u5f00\u53d1\u8005\u5c3d\u53ef\u80fd\u5730\u4f7f\u7528 AllJoyn \u670d\u52a1\u67b6\u6784\u3002\u5982\u679c\u73b0\u6709\u7684\u670d\u52a1\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\uff0c\u90a3\u4e48\u6211\u4eec\u9f13\u52b1\u5f00\u53d1\u8005\u4e0e Allseen \u8054\u76df\u5171\u540c\u5efa\u7acb\u4e00\u4e2a\u6807\u51c6\u670d\u52a1\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u79c1\u6709\u670d\u52a1\u548c\u63a5\u53e3\u6216\u8bb8\u6700\u80fd\u89e3\u51b3\u95ee\u9898\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u79c1\u6709\u670d\u52a1\u5c06\u4e0d\u80fd\u4e0e\u66f4\u5927\u7684 AllJoyn \u751f\u6001\u7cfb\u7edf\u7684\u8bbe\u5907\u548c\u5e94\u7528\u8fdb\u884c\u4e92\u901a\u3002\n\n\nAllJoyn App Code AllJoyn \u5e94\u7528\u4ee3\u7801\n\n\nThis is the application logic of the AllJoyn application. \nIt can be programmed to either the AllJoyn Service Frameworks \nLibraries, which provide higher level functionality, or the \nAllJoyn Core Library, which provides direct access to the AllJoyn Core APIs.\n\u8fd9\u662f AllJoyn \u5e94\u7528\u7684\u5e94\u7528\u903b\u8f91\u3002\u5b83\u65e2\u53ef\u4ee5\u7528 AllJoyn \u670d\u52a1\u770b\u67b6\u6784\u8d44\u6e90\u5e93\u8fdb\u884c\u7f16\u5199\u4ee5\u5b9e\u73b0\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u7528\u4e0e\u6838\u5fc3 API \u6709\u76f4\u63a5\u8054\u7cfb\u7684 Alljoyn \u6838\u5fc3\u8d44\u6e90\u5e93\u3002\n\n\nThin and Standard \u7cbe\u7b80\u4e0e\u6807\u51c6\n\n\nThe AllJoyn framework provides two variants:\nAllJoyn \u67b6\u6784\u63d0\u4f9b\u4e86\u4e24\u79cd\u7248\u672c\u9009\u62e9\uff1a\n\n\n\n\nStandard.  For non-embedded devices, like Android, iOS, Linux.\n\n\nThin.  For resource-constrained embedded devices, like Arduino, \nThreadX, Linux with limited memory.\n\n\n\u6807\u51c6\u7248  \u9002\u7528\u4e8e\u975e\u5d4c\u5165\u5f0f\u8bbe\u5907, \u5982 Android, iOS, Linux\u3002\n\n\n\u7cbe\u7b80\u7248  \u9002\u7528\u4e8e\u8d44\u6e90\u53d7\u9650\u7684\u5d4c\u5165\u5f0f\u7684\u8bbe\u5907\uff0c\u5982 Arduino, ThreadX, \u5185\u5b58\u8f83\u5c0f\u7684Linux.\n\n\n\n\n\n\nProgramming Models \u7f16\u7a0b\u6a21\u578b\n\n\nTypically, applications will be written using the AllJoyn Service\nFramework APIs so that the applications can be compatible with devices\nusing the same Service Frameworks. Only by using AllJoyn Service\nFrameworks developed by AllSeen Working Groups will the application\nbe compatible with other applications and devices in the AllSeen\necosystem.\n\u901a\u5e38\uff0c\u5efa\u8bae\u4f7f\u7528AllJoyn \u670d\u52a1\u67b6\u6784 API\u6765\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u6837\u4fbf\u4e8e\u4e0e\u4f7f\u7528\u76f8\u540c\u670d\u52a1\u67b6\u6784\u7684\u8bbe\u5907\u76f8\u517c\u5bb9\u3002\u53ea\u6709\u4f7f\u7528 AllSeen \u5de5\u4f5c\u7ec4\u5f00\u53d1\u7684 Alljoyn \u670d\u52a1\u6846\u67b6\u7f16\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u624d\u80fd\u4e0e Allseen \u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u5176\u4ed6\u5e94\u7528\u6216\u8bbe\u5907\u76f8\u517c\u5bb9\u3002\n\n\nIf an application wishes to implement its own service, it can do so\nby programming directly to the AllJoyn Core APIs. When doing so, it\nis recommended to follow the Events and Actions convention to enable\nad hoc interactions between other AllJoyn devices.\n\u5982\u679c\u5e94\u7528\u5e0c\u671b\u63a8\u51fa\u5b83\u4eec\u81ea\u5df1\u7684\u670d\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u5411 AllJoyn \u6838\u5fc3API\u7f16\u7a0b\u6765\u5b9e\u73b0\u3002\u5982\u679c\u8fd9\u6837\u505a\uff0c\u5efa\u8bae\u9075\u5b88 Events and Actions \u89c4\u5219\u4ee5\u5b9e\u73b0\u5e94\u7528\u4e0e\u5176\u4ed6 AllJoyn \u8bbe\u5907\u95f4\u7684\u4e34\u65f6\u901a\u4fe1\u3002\nThe application can use both the Service Framework and Core APIs\nside by side.\n\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u670d\u52a1\u67b6\u6784\u4e0e\u6838\u5fc3 API\u3002\n\n\n\u4e86\u89e3\u66f4\u591a\u5173\u4e8e Events and Actions\n.",
            "title": "Architecture"
        },
        {
            "location": "/learn/architecture/#_1",
            "text": "",
            "title": "\u7ed3\u6784"
        },
        {
            "location": "/learn/architecture/#_2",
            "text": "The AllJoyn  framework runs on the local network. \nIt enables devices and apps to advertise and discover \neach other. This section explains the network architecture \nand the relationship between various AllJoyn components.  AllJoyn \u67b6\u6784\u5728\u672c\u5730\u7f51\u7edc\u4e0a\u8fd0\u884c\uff0c\u4f7f\u8bbe\u5907\u548c\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u53d1\u9001\u901a\u77e5\u5e76\u4e14\u53d1\u73b0\u5f7c\u6b64\u3002\u672c\u7ae0\u89e3\u91ca\u4e86 Alljoyn \u7684\u7f51\u7edc\u7ed3\u6784\u548c\u4e0d\u540c AllJoyn \u7ec4\u4ef6\u4e4b\u95f4\u7684\u5173\u7cfb\u3002  Apps and Routers \u5e94\u7528\u548c\u8def\u7531  The AllJoyn framework comprises AllJoyn Apps and AllJoyn \nRouters, or Apps and Routers for short. Apps communicate \nwith Routers and Routers communicate with Apps. Apps can \nonly communicate with other Apps by going through a Router.\nAllJoyn \u67b6\u6784\u5305\u542b\u4e86 Alljoyn \u5e94\u7528\u548c AllJoyn \u8def\u7531\uff0c\u7b80\u79f0\u5e94\u7528\u548c\u8def\u7531\u3002\u5e94\u7528\u548c\u8def\u7531\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u901a\u4fe1\u3002\u5e94\u7528\u53ea\u80fd\u901a\u8fc7\u8def\u7531\u6765\u4e0e\u53e6\u4e00\u4e2a\u5e94\u7528\u8fdb\u884c\u901a\u884c\u3002  Apps and Routers can live on the same physical device, or \non different devices. From an AllJoyn perspective, it doesn't \nmatter.  In reality, three common topologies exist:\n\u5e94\u7528\u548c\u8def\u7531\u53ef\u4ee5\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7269\u7406\u8bbe\u5907\uff0c\u4e5f\u53ef\u4ee5\u5206\u5e03\u5728\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\u3002\u4eceAlljoyn \u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u6ca1\u6709\u5f88\u5927\u533a\u522b\u3002\u5728\u73b0\u5b9e\u4e2d\uff0c\u5b58\u5728\u4e09\u4e2a\u5e38\u89c1\u7684\u62d3\u6251:\n1. An App uses its own Router. In this case, the Router is\ncalled a \"Bundled Router\" as it is bundled with the App. AllJoyn\nApps on mobile OSes like Android and iOS and desktop OSes like\nMac OS X and Windows generally fall in this group.\n1. \u5355\u4e00\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u81ea\u5df1\u7684\u8def\u7531\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u8def\u7531\u4e0e\u5e94\u7528\u4e4b\u95f4\u7684\u7ed1\u5b9a\u5173\u7cfb\uff0c\u8def\u7531\u88ab\u79f0\u4e4b\u4e3a\u201c\u7ed1\u5b9a\u8def\u7531\u201d\u3002\u5728\u5982 Android \u548c IOS \u7684\u624b\u673a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4ee5\u53ca\u5982 Mac OS X \u548c Windows \u7684\u684c\u9762\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u8fd0\u884c\u7684 Alljoyn \u5e94\u7528\u901a\u5e38\u90fd\u5c5e\u4e8e\u201c\u7ed1\u5b9a\u8def\u7531\u201d\u7684\u60c5\u51b5\u3002   Multiple Apps on the same device use one Router.  In this \ncase, the Router is called a \"Standalone Router\" and it \ntypically runs in a background/service process.  This is \ncommon on Linux systems where the AllJoyn Router runs as a \ndaemon process and other AllJoyn apps connect to the Standalone \nRouter. By having multiple apps on the same device use the \ncommon AllJoyn Router, the device consumes less overall resources.  \u5728\u540c\u4e00\u8bbe\u5907\u4e0a\u7684\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u4e00\u4e2a\u8def\u7531\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u8def\u7531\u88ab\u79f0\u4e4b\u4e3a\u201d\u72ec\u7acb\u8def\u7531\u5668\u201c\uff0c\u5b83\u901a\u5e38\u5728\u540e\u53f0/\u670d\u52a1\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u3002\u8fd9\u6837\u7684\u60c5\u51b5\u591a\u53d1\u751f\u5728 Linux \u7cfb\u7edf\u4e2d\u3002\u5728 Linux \u7cfb\u7edf\u4e2d\uff0cAllJoyn \u8def\u7531\u4f5c\u4e3a\u5b88\u62a4\u8fdb\u7a0b\u8fd0\u884c\uff0cAlljoyn \u5e94\u7528\u88ab\u8fde\u63a5\u5230\u72ec\u7acb\u8def\u7531\u5668\u3002\u901a\u8fc7\u628a\u540c\u4e00\u8bbe\u5907\u4e0a\u7684\u591a\u4e2a\u5e94\u7528\u8fde\u63a5\u5230\u4e00\u4e2a\u901a\u7528\u8def\u7531\u4e0a\uff0c\u8bbe\u5907\u51cf\u5c11\u4e86\u603b\u4f53\u8d44\u6e90\u7684\u6d88\u8017\u3002  An App uses a Router on a different device. Embedded \ndevices (which use the Thin variant of the AllJoyn framework, \nmore on this later) typically fall in this camp as the embedded \ndevice typically does not have enough CPU and memory to run \nthe AllJoyn router.  \u67d0\u4e2a\u5e94\u7528\u4f7f\u7528\u4e0d\u540c\u8bbe\u5907\u4e0a\u7684\u8def\u7531\u3002\u5d4c\u5165\u5f0f\u8bbe\u5907\uff08\u901a\u5e38\u4f7f\u7528\u7cbe\u7b80 AllJoyn \u67b6\u6784\uff0c\u4e4b\u540e\u4f1a\u5177\u4f53\u8bf4\u660e\uff09\u901a\u5e38\u5c5e\u4e8e\u8fd9\u4e2a\u7c7b\u578b\u3002\u56e0\u4e3a\u5d4c\u5165\u5f0f\u8bbe\u5907\u901a\u5e38\u6ca1\u6709\u8db3\u591f\u5f3a\u5927\u7684 CPU \u548c \u5185\u5b58\u6765\u8fd0\u884c AllJoyn \u8def\u7531\u3002    Transports \u4f20\u8f93  The AllJoyn framework runs on the local network.  It currently \nsupports Wi-Fi, Ethernet, serial, and Power Line (PLC), but since\nthe AllJoyn software was written to be transport-agnostic and\nsince the AllJoyn system is an evolving open-source project,\nsupport for more transports can be added in the future.\nAllJoyn \u67b6\u6784\u5728\u672c\u5730\u7f51\u7edc\u4e0a\u8fd0\u884c\u3002\u76ee\u524d\u5b83\u652f\u6301 Wi-Fi, Ethernet, serial, \u548c Power Line (PLC)\u3002\u4e0d\u8fc7\u7531\u4e8e AllJoyn \u8f6f\u4ef6\u662f\u534f\u8bae\u4e0d\u76f8\u5173\u7684\uff0c\u5e76\u4e14 AllJoyn \u7cfb\u7edf\u662f\u5728\u4e0d\u65ad\u5b8c\u5584\u7684\u5f00\u6e90\u5de5\u7a0b\u3002\u5728\u672a\u6765\uff0c\u66f4\u591a\u7684\u4f20\u8f93\u65b9\u5f0f\u5c06\u88ab\u52a0\u5165\u5176\u4e2d\u3002  Additionally, bridge software can be created to bridge the \nAllJoyn framework to other systems like Zigbee, Z-wave, or \nthe cloud. In fact, a Working Group is working on adding a  Gateway Agent  as a standard AllJoyn service.\n\u9664\u6b64\u4e4b\u5916\uff0c\u4f7f\u7528\u6865\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5c06 AllJoyn \u67b6\u6784\u4e0e\u5176\u4ed6\u7c7b\u578b\u7684\u7cfb\u7edf\u4e92\u8054\uff0c\u5982 Zigbee, Z-wave \u548c\u4e91\u3002\u5b9e\u9645\u4e0a\uff0c\u6709\u4e00\u4e2a\u5de5\u4f5c\u7ec4\u6b63\u5728\u8d1f\u8d23\u5411\u6807\u51c6 AllJoyn \u670d\u52a1\u4e2d\u52a0\u5165\u4e00\u4e2a \u7f51\u5173\u4ee3\u7406 \u3002",
            "title": "\u7f51\u7edc\u7ed3\u6784"
        },
        {
            "location": "/learn/architecture/#software-architecture",
            "text": "The AllJoyn network comprises AllJoyn Applications and AllJoyn Routers.\nAllJoyn \u67b6\u6784\u5305\u542b\u4e86 Alljoyn \u5e94\u7528\u548c AllJoyn \u8def\u7531\u3002  An AllJoyn Application comprises the following components:\n\u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u5305\u542b\u4e86\u4ee5\u4e0b\u7ec4\u4ef6\uff1a   AllJoyn App Code    AllJoyn Service Frameworks Libraries \n*  AllJoyn Core Library  AllJoyn Router  can either run as standalone or is \nsometimes bundled with the AllJoyn Core Library. AllJoyn \u8def\u7531  \u65e2\u53ef\u4ee5\u662f\u72ec\u7acb\u7684\uff0c\u4e5f\u53ef\u4ee5\u7ed1\u5b9a\u5230 AllJoyn \u5185\u6838\u8d44\u6e90\u5e93\u3002   AllJoyn Router AllJoyn \u8def\u7531  The AllJoyn router routes AllJoyn messages between AllJoyn Routers \nand Applications, including between different transports.\nAllJoyn \u8def\u7531\u8d1f\u8d23\u8f6c\u53d1\u5176\u4e0e\u5e94\u7528\u4e4b\u95f4\u7684 AllJoyn \u4fe1\u606f\uff0c\u5305\u62ec\u4e0d\u540c\u4f20\u8f93\u65b9\u5f0f\u4e4b\u95f4\u7684\u4fe1\u606f\u3002  AllJoyn Core Library AllJoyn \u6838\u5fc3\u8d44\u6e90\u5e93  The AllJoyn Core Library provides the lowest level set of APIs \nto interact with the AllJoyn network.  It provides direct access to:\nAllJoyn \u6838\u5fc3\u8d44\u6e90\u5e93\u63d0\u4f9b\u4e86\u4e0e AllJoyn \u7f51\u7edc\u4e92\u8054\u7684\u6700\u4f4e\u7ea7\u522b\u7684 API\u3002\u5b83\u4e3a\u4ee5\u4e0b\u5185\u5bb9\u63d0\u4f9b\u4e86\u76f4\u63a5\u8bbf\u95ee\u65b9\u5f0f\uff1a   Advertisements and discovery  Session creation  Interface defintion of methods, properties, and signals  Object creation and handling  \u901a\u77e5\u548c\u53d1\u73b0  \u5efa\u7acb\u4f1a\u8bdd  \u63a5\u53e3\u5b9a\u4e49\u7684\u65b9\u6cd5\u3001 \u5c5e\u6027\u548c\u4fe1\u53f7  \u5bf9\u8c61\u7684\u521b\u5efa\u548c\u5904\u7406\nDevelopers use these APIs to implement AllJoyn service frameworks, or to implement private interfaces.\n\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u8fd9\u4e9b API \u6765\u5b9e\u73b0 AllJoyn \u670d\u52a1\u67b6\u6784\uff0c\u6216\u5efa\u7acb\u4e13\u7528\u63a5\u53e3\u3002 Learn more about AllJoyn Core Frameworks . \u4e86\u89e3\u66f4\u591a\u5173\u4e8e AllJoyn \u6838\u5fc3\u67b6\u6784 .   AllJoyn Service Framework Libraries AllJoyn \u670d\u52a1\u6846\u67b6\u8d44\u6e90\u5e93  The AllJoyn Service Frameworks implement a set of common services, \nlike onboarding, notification, or control panel. By using the \ncommon AllJoyn service frameworks, apps and devices can properly \ninteroperate with each other to perform a specific functionality.\nAllJoyn \u670d\u52a1\u67b6\u6784\u63d0\u4f9b\u4e00\u5957\u901a\u7528\u670d\u52a1\uff0c\u4f8b\u5982\u7ba1\u7406\u3001\u901a\u77e5\u548c\u63a7\u5236\u9762\u677f\u3002\u901a\u8fc7\u4f7f\u7528\u901a\u7528 AllJoyn \u670d\u52a1\u67b6\u6784\uff0c\u5e94\u7528\u548c\u8bbe\u5907\u80fd\u591f\u8fdb\u884c\u534f\u4f5c\uff0c\u5b9e\u73b0\u7279\u5b9a\u7684\u529f\u80fd\u3002  Service frameworks are broken out into AllSeen Working Groups:\n\u670d\u52a1\u67b6\u6784\u88ab\u5206\u4e3a\u5982\u4e0b\u5de5\u4f5c\u7ec4\uff1a   Base Services   Onboarding . Provide a consistent way to bring a new device onto \n    the Wi-Fi network.\u4e3a\u65b0\u8bbe\u5907\u52a0\u5165 Wi-Fi \u7f51\u7edc\u63d0\u4f9b\u4e00\u4e2a\u7edf\u4e00\u7684\u65b9\u5f0f\u3002    Configuration . Allows one to configure certain attributes of \n    an application/device, such as its friendly name.\u5141\u8bb8\u7528\u6237\u8bbe\u7f6e\u5e94\u7528\uff0f\u8bbe\u5907\u7684\u7279\u5b9a\u5c5e\u6027\uff0c\u5982\u5b83\u7684\u522b\u540d\u3002    Notifications . Allows text-based notifications to be sent and \n    received by devices on the AllJoyn network. Also supports audio and images\n    via URLs.\u5141\u8bb8\u57fa\u4e8e\u6587\u672c\u7684\u901a\u77e5\u5728 AllJoyn \u7f51\u7edc\u4e2d\u7684\u6536\u53d1\u3002\u901a\u8fc7URL\uff0c\u4e5f\u652f\u6301\u58f0\u97f3\u548c\u56fe\u50cf\u3002    Control Panel . Allows devices to advertise a virtual control\n    panel to be controlled remotely.\u5141\u8bb8\u8bbe\u5907\u5e7f\u64ad\u4e00\u4e2a\u865a\u62df\u7684\u63a7\u5236\u9762\u677f\u4ee5\u88ab\u8fdc\u7a0b\u63a7\u5236\u3002    More Service Frameworks . More service frameworks are actively\n  being developed by the AllSeen Working Groups.Allseen \u5de5\u4f5c\u7ec4\u6b63\u5728\u79ef\u6781\u5f00\u53d1\u66f4\u591a\u7684\u670d\u52a1\u67b6\u6784\u3002    Developers are encouraged to use AllJoyn Service Frameworks\nwhere possible. If an existing service is not available,\nthen the developer is encouraged to work with the AllSeen\nAlliance to create a standard service.  In some cases, using\nprivate services and intefaces makes the most sense; howerver,\nthose services would not be able to interoperate and take\nadvantage of the larger AllJoyn ecosystem of devices and apps.\n\u5982\u679c\u6761\u4ef6\u5141\u8bb8\uff0c\u6211\u4eec\u9f13\u52b1\u5f00\u53d1\u8005\u5c3d\u53ef\u80fd\u5730\u4f7f\u7528 AllJoyn \u670d\u52a1\u67b6\u6784\u3002\u5982\u679c\u73b0\u6709\u7684\u670d\u52a1\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\uff0c\u90a3\u4e48\u6211\u4eec\u9f13\u52b1\u5f00\u53d1\u8005\u4e0e Allseen \u8054\u76df\u5171\u540c\u5efa\u7acb\u4e00\u4e2a\u6807\u51c6\u670d\u52a1\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u79c1\u6709\u670d\u52a1\u548c\u63a5\u53e3\u6216\u8bb8\u6700\u80fd\u89e3\u51b3\u95ee\u9898\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u79c1\u6709\u670d\u52a1\u5c06\u4e0d\u80fd\u4e0e\u66f4\u5927\u7684 AllJoyn \u751f\u6001\u7cfb\u7edf\u7684\u8bbe\u5907\u548c\u5e94\u7528\u8fdb\u884c\u4e92\u901a\u3002  AllJoyn App Code AllJoyn \u5e94\u7528\u4ee3\u7801  This is the application logic of the AllJoyn application. \nIt can be programmed to either the AllJoyn Service Frameworks \nLibraries, which provide higher level functionality, or the \nAllJoyn Core Library, which provides direct access to the AllJoyn Core APIs.\n\u8fd9\u662f AllJoyn \u5e94\u7528\u7684\u5e94\u7528\u903b\u8f91\u3002\u5b83\u65e2\u53ef\u4ee5\u7528 AllJoyn \u670d\u52a1\u770b\u67b6\u6784\u8d44\u6e90\u5e93\u8fdb\u884c\u7f16\u5199\u4ee5\u5b9e\u73b0\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u7528\u4e0e\u6838\u5fc3 API \u6709\u76f4\u63a5\u8054\u7cfb\u7684 Alljoyn \u6838\u5fc3\u8d44\u6e90\u5e93\u3002  Thin and Standard \u7cbe\u7b80\u4e0e\u6807\u51c6  The AllJoyn framework provides two variants:\nAllJoyn \u67b6\u6784\u63d0\u4f9b\u4e86\u4e24\u79cd\u7248\u672c\u9009\u62e9\uff1a   Standard.  For non-embedded devices, like Android, iOS, Linux.  Thin.  For resource-constrained embedded devices, like Arduino, \nThreadX, Linux with limited memory.  \u6807\u51c6\u7248  \u9002\u7528\u4e8e\u975e\u5d4c\u5165\u5f0f\u8bbe\u5907, \u5982 Android, iOS, Linux\u3002  \u7cbe\u7b80\u7248  \u9002\u7528\u4e8e\u8d44\u6e90\u53d7\u9650\u7684\u5d4c\u5165\u5f0f\u7684\u8bbe\u5907\uff0c\u5982 Arduino, ThreadX, \u5185\u5b58\u8f83\u5c0f\u7684Linux.",
            "title": "Software Architecture \u8f6f\u4ef6\u7ed3\u6784"
        },
        {
            "location": "/learn/architecture/#programming-models",
            "text": "Typically, applications will be written using the AllJoyn Service\nFramework APIs so that the applications can be compatible with devices\nusing the same Service Frameworks. Only by using AllJoyn Service\nFrameworks developed by AllSeen Working Groups will the application\nbe compatible with other applications and devices in the AllSeen\necosystem.\n\u901a\u5e38\uff0c\u5efa\u8bae\u4f7f\u7528AllJoyn \u670d\u52a1\u67b6\u6784 API\u6765\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u6837\u4fbf\u4e8e\u4e0e\u4f7f\u7528\u76f8\u540c\u670d\u52a1\u67b6\u6784\u7684\u8bbe\u5907\u76f8\u517c\u5bb9\u3002\u53ea\u6709\u4f7f\u7528 AllSeen \u5de5\u4f5c\u7ec4\u5f00\u53d1\u7684 Alljoyn \u670d\u52a1\u6846\u67b6\u7f16\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u624d\u80fd\u4e0e Allseen \u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u5176\u4ed6\u5e94\u7528\u6216\u8bbe\u5907\u76f8\u517c\u5bb9\u3002  If an application wishes to implement its own service, it can do so\nby programming directly to the AllJoyn Core APIs. When doing so, it\nis recommended to follow the Events and Actions convention to enable\nad hoc interactions between other AllJoyn devices.\n\u5982\u679c\u5e94\u7528\u5e0c\u671b\u63a8\u51fa\u5b83\u4eec\u81ea\u5df1\u7684\u670d\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u5411 AllJoyn \u6838\u5fc3API\u7f16\u7a0b\u6765\u5b9e\u73b0\u3002\u5982\u679c\u8fd9\u6837\u505a\uff0c\u5efa\u8bae\u9075\u5b88 Events and Actions \u89c4\u5219\u4ee5\u5b9e\u73b0\u5e94\u7528\u4e0e\u5176\u4ed6 AllJoyn \u8bbe\u5907\u95f4\u7684\u4e34\u65f6\u901a\u4fe1\u3002\nThe application can use both the Service Framework and Core APIs\nside by side.\n\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u670d\u52a1\u67b6\u6784\u4e0e\u6838\u5fc3 API\u3002  \u4e86\u89e3\u66f4\u591a\u5173\u4e8e Events and Actions .",
            "title": "Programming Models \u7f16\u7a0b\u6a21\u578b"
        },
        {
            "location": "/learn/glossary/",
            "text": "Glossary \u672f\u8bed\u8868\n\n\nAbout Client\n\n\nThe implementation of the About feature that receives information \nfrom an About Server. About \u529f\u80fd\u4e2d\u7528\u4e8e\u4ece About Sever \u63a5\u6536\u4fe1\u606f\u7684\u5de5\u5177\u3002\n\n\nAbout feature\n\n\nOpen implementation built using the AllJoyn\n framework that \nallows for a broadcast of AboutData. \u4f7f\u7528 AllJoyn\ntrade \u67b6\u6784\u6784\u4ef6\u7684\u5f00\u653e\u5f0f\u5de5\u5177\uff0c\u7528\u4e8e\u5e7f\u64ad AboutData\u3002\n\n\nSoftware layer that enables devices to publish AllJoyn service \nframeworks' interfaces and metadata (AboutData) in an Announcement \nand in a session.\n\u8f6f\u4ef6\u5206\u5c42\u7ed3\u6784\u4f7f\u5f97\u8bbe\u5907\u53ef\u4ee5\u5728 Annoucement \u548c\u4f1a\u8bdd\u4e2d\u53d1\u5e03 AllJoyn \u670d\u52a1\u67b6\u6784\u7684\u63a5\u53e3\u548c\u5143\u6570\u636e\uff08AboutData\uff09\u3002\n\n\n\u4e86\u89e3\u66f4\u591a\n\n\nAboutData\n\n\nA Hash structure (key-value pair) of a String key to an AllJoyn \nVariant value that represents various device details.\nAllJoyn Variant \u503c\u7684\u5b57\u7b26\u4e32\u5bc6\u94a5\u7684\u54c8\u5e0c\u7ed3\u6784\uff08\u952e\uff0d\u503c\u5bf9\uff09\uff0c\u5b83\u8868\u793a\u5404\u79cd\u8bbe\u5907\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n\n\nAboutIcon\n\n\nAn image representing the device that can be obtained remotely \nvia the About interface.\n\u7528\u4e8e\u8868\u793a\u53ef\u88ab\u901a\u8fc7 About \u63a5\u53e3\u8fdc\u7a0b\u83b7\u53d6\u7684\u8bbe\u5907\u7684\u56fe\u50cf\u3002\n\n\nAboutService\n\n\nA class in the About feature that is used by a developer/OEM \nin either client mode or server mode. Server mode is used to \nbuild an application that advertises AboutData that is read \nfrom a PropertyStore. Client mode is used to build an application \nthat discovers advertised AboutData.\n\u5f00\u53d1\u8005\uff0fOEM \u5728\u5ba2\u6237\u7aef\u6a21\u5f0f\u6216\u8005\u670d\u52a1\u5668\u6a21\u5f0f\u4f7f\u7528\u7684 About \u529f\u80fd\u7684\u4e00\u4e2a\u7c7b\u3002\u670d\u52a1\u5668\u6a21\u5f0f\u7528\u6765\u5efa\u7acb\u5e7f\u544a AboutData \u7684\u5e94\u7528\u7a0b\u5e8f\uff0cAboutData \u4ece PropertyStore \u8bfb\u53d6\u3002\u5ba2\u6237\u7aef\u6a21\u5f0f\u7528\u6765\u5efa\u7acb\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\u5e7f\u544a\u7684 AboutData\u3002\n\n\nAbout Service\n\n\nThe implementation of the About feature that broadcasts About \ndetails. Traditionally, this is an embedded device, but can \nbe a TV, mobile, or any device that supports AllJoyn service frameworks.\nAbout feature \u7528\u4e8e\u5e7f\u64ad About \u7ec6\u8282\u7684\u5de5\u5177\u3002\u4f20\u7edf\u610f\u4e49\u4e0a\uff0c\u8fd9\u662f\u4e00\u4e2a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3002\u5f53\u7136\u5b83\u4e5f\u53ef\u4ee5\u662f\u4efb\u4f55\u652f\u6301 AllJoyn \u670d\u52a1\u67b6\u6784\u7684\u8bbe\u5907\uff0c\u5982 \u7535\u89c6\u3001\u624b\u673a\u7b49\u3002\n\n\nAction\n\n\nA function performed by an AllJoyn-enabled device. AllJoyn \u8bbe\u5907\u6267\u884c\u7684\u529f\u80fd\u3002\n\n\n\u4e86\u89e3\u66f4\u591a\n.\n\n\nAction descriptor\n\n\nAn introspectable human readable description contained in the action. Action \u4e2d\u5305\u542b\u7684\u5185\u7701\u7684\u53ef\u8bfb\u63cf\u8ff0\u3002\n\n\nAction-receiving device\n\n\nThe device that performs an action. Related to the \n\nEvents and Actions feature\n.\u6267\u884c\u67d0\u9879\u64cd\u4f5c\u7684\u8bbe\u5907\u3002\u6709\u5173 \nEvents and Actions feature\n\u3002\n\n\nAdapter\n\n\nThe Control Panel service framework layer that translates \nthe UI elements received to iOS UI elements. \u5c06\u63a5\u6536\u7684 UI \u5143\u7d20\u8f6c\u6362\u6210 iOS UI \u5143\u7d20\u7684\u63a7\u5236\u9762\u677f\u670d\u52a1\u67b6\u6784\u3002\n\n\nAJSCL\n\n\nAllJoyn Standard Core Library. An application or AllJoyn \ndaemon process that contains the full implementation \nof the AllJoyn message bus. AllJoyn \u6807\u51c6\u5185\u6838\u8d44\u6e90\u5e93\u3002\u5305\u542b\u5b8c\u6574 AllJoyn \u4fe1\u606f\u603b\u7ebf\u5de5\u5177\u7684\u5e94\u7528\u7a0b\u5e8f\u6216 AllJoyn \u5b88\u62a4\u8fdb\u7a0b\u3002\n\n\nAJTCL\n\n\nAllJoyn Thin Core Library. The version of the AllJoyn library \nthat runs on devices that are memory and processing power-constrained. \nThis is intended for devices that are powered by a Micro Controller Unit (MCU). AllJoyn \u7cbe\u7b80\u5185\u6838\u8d44\u6e90\u5e93\u3002\u5728\u5185\u5b58\u548c\u5904\u7406\u80fd\u529b\u53d7\u9650\u7684\u8bbe\u5907\u4e0a\u8fd0\u884c\u7684 AllJoyn \u8d44\u6e90\u5e93\u7248\u672c\u3002 \u5b83\u66f4\u503e\u5411\u4e8e\u652f\u6301\u91c7\u7528 Micro Controller Unit (MCU) \u4f9b\u7535\u7684\u8bbe\u5907\u3002\n\n\nAllJoyn App\n\n\nAn application that uses the AllJoyn framework. Apps use either the \nAllJoyn Core APIs or the AllJoyn Service Frameworks API. Apps \ncan either use the Standard Core or Thin Core implementations.\n\u4f7f\u7528 AllJoyn \u67b6\u6784\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u65e0\u8bba\u662f AllJoyn Core API \u6216\u8005 AllJoyn Service Framework\u3002\u5e94\u7528\u7a0b\u5e8f\u65e2\u53ef\u4ee5\u4f7f\u7528 Standard Core \u5de5\u5177\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Thin Core \u5de5\u5177\u3002\n\n\n\u4e86\u89e3\u66f4\u591a\n.\n\n\nAllJoyn client app\n\n\nAs part of a peer session, this application will take the role \nof requesting information through a peer session on a service \napplication. This does not correlate to a web client as the \nclient app may also expose service components.\n\u4f5c\u4e3a\u5bf9\u7b49\u4f1a\u8bdd\u7684\u4e00\u90e8\u5206\uff0c\u6b64\u5e94\u7528\u7a0b\u5e8f\u7684\u4f5c\u7528\u662f\u901a\u8fc7\u5bf9\u7b49\u56de\u8bdd\u8bf7\u6c42\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u7684\u4fe1\u606f\u3002\u5b83\u4e0e\u7f51\u9875\u5ba2\u6237\u7aef\u5e76\u4e0d\u76f8\u5173\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u80fd\u516c\u5f00\u7f51\u7edc\u7ec4\u4ef6\u3002\n\n\nAllJoyn core package\n\n\nAllJoyn software package AllJoyn \u8f6f\u4ef6\u5305\n\n\nAllJoyn-enabled device\n\n\nAn entity which has an AllJoyn application installed to send \nor receive notifications using the Notification service framework interface.\n\u5b89\u88c5\u4e86 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u7684\u8bbe\u5907\uff0c\u4f7f\u7528 Notification \u670d\u52a1\u67b6\u6784\u63a5\u53e3\uff0c\u53d1\u9001\u548c\u63a5\u6536\u901a\u77e5\u3002\n\n\nAllJoyn framework\n\n\nOpen-source, peer-to-peer framework that allows for abstraction \nof low-level network concepts and APIs. \n\u5f00\u6e90\u3001\u7aef\u5230\u7aef\u67b6\u6784\uff0c\u652f\u6301\u4f4e\u7b49\u89c4\u683c\u7f51\u7edc\u6982\u5ff5\u548cAPI\u3002\n\n\n\u4e86\u89e3\u66f4\u591a\n\n\nAllJoyn interface\n\n\nA collection of methods, signals and properties that make up \nthe contract of how applications communicate. \u7ec4\u6210\u5e94\u7528\u7a0b\u5e8f\u76f8\u4e92\u901a\u4fe1\u7684\u65b9\u6cd5\u3001\u4fe1\u53f7\u548c\u5c5e\u6027\u7684\u96c6\u5408\u3002\n\n\nAllJoyn Router\n\n\nAllJoyn network components that talk to each other to enable \napps on different routers to communicate in the AllJoyn network. \u5728 AllJoyn \u7f51\u7edc\u4e2d\uff0c\u76f8\u4e92\u901a\u4fe1\u7684 AllJoyn \u7f51\u7edc\u7ec4\u4ef6\u3002\u5b83\u80fd\u4f7f\u4e0d\u540c\u8def\u7531\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1\u3002\n\n\n\u4e86\u89e3\u66f4\u591a\n.\n\n\nAllJoyn service (frameworks)\n\n\nA collection of full-feature implementations using the AllJoyn \nframework that provides specific functionality. These are building \nblocks can be combined together to build interoperable devices \nand applications. \n\u4f7f\u7528 AllJoyn \u67b6\u6784\u63d0\u4f9b\u7279\u5b9a\u529f\u80fd\u7684\u5168\u529f\u80fd\u5de5\u5177\u7684\u96c6\u5408\u3002\u8fd9\u4e9b\u90fd\u662f\u6784\u5efa\u57fa\u5757\u53ef\u4ee5\u7ec4\u5408\u5728\u4e00\u8d77\u4ee5\u6784\u5efa\u53ef\u4e92\u64cd\u4f5c\u7684\u8bbe\u5907\n\u548c\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nAllJoyn Standard Core Library\n\n\nSee \nAJSCL\n \u8be6\u89c1 \nAJSCL\n\n\nAllJoyn Thin Core Library\n\n\nSee \nAJTCL\n \u8be6\u89c1 \nAJTCL\n\n\nAnnouncement\n\n\nA sessionless signal whose payload includes published services' \ninterfaces and metadata that are used for discovery. \u4e00\u79cd sessionless signal\uff0c\u5185\u5bb9\u5305\u542b\u4e86\u7528\u4e8e\u53d1\u73b0\u7684\u516c\u5f00\u670d\u52a1\u63a5\u53e3\u548c\u5143\u6570\u636e\u3002\n\n\n\u4e86\u89e3\u66f4\u591a\n\n\nARDP\n\n\nAllJoyn Reliable Datagram Protocol. ARDP is designed to provide,\namong other things, reliable delivery and ordering for UDP-based\nlayer 4 transport mechanisms. In particular, ARDP is used in the\nUDP Transport to provide guarantees appropriate to AllJoyn Messaging.\nARDP is modeled after RDP and extended for AllJoyn-specific requirements.\nAllJoyn Reliable Datagram Protocol\uff08AllJoyn \u53ef\u9760\u6570\u636e\u62a5\u534f\u8bae\uff09\u3002ARDP \u65e8\u5728\u63d0\u4f9b\u57fa\u4e8e UDP \u7684\u7b2c 4 \u5c42\u4f20\u8f93\u673a\u5236\u7684\u53ef\u9760\u9001\u8fbe\u548c\u547d\u4ee4\u3002ARDP \u7279\u522b\u7528\u6765\u4fdd\u8bc1\u5728 UDP \u4f20\u8f93\u4e2d\u4e3a AllJoyn messaging \u63d0\u4f9b\u9002\u5f53\u4fdd\u969c\u3002ARDP \u662f\u6548\u4eff RDP \u5efa\u7acb\u7684\uff0c\u5e76\u9488\u5bf9 AllJoyn \u7684\u9700\u6c42\u8fdb\u884c\u4e86\u6269\u5c55\u3002\n\n\nAudio service framework\n\n\nOpen implementation built using the AllJoyn framework that \nallows for synchronized audio to play back on one or many Sinks.\n\u5f00\u653e\u5de5\u5177\uff0c\u5141\u8bb8\u4f7f\u7528 AllJoyon \u6846\u67b6\u540c\u6b65\u64ad\u653e\u6765\u81ea\u4e00\u4e2a\u6216\u591a\u4e2a\u6e90\u7684\u97f3\u9891\u3002\n\n\nAuthoring app\n\n\nApplication that carries out the IFTTT rules. Related to the \n\nEvents and Actions feature\n.\u6267\u884c IFTTT \u89c4\u5219\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u6709\u5173 \nEvents and Actions feature\n.\n\n\nBandwidth-Delay Product\n\n\nRefers to the product of a data link\ufffds capacity in bits per second\nand its round-trip delay time. This characterizes the amount of data\nthat can be in transit (sometimes called in-flight) in the network.\n\u662f\u6307\u4ea7\u54c1\u6bcf\u79d2\u949f\u6570\u636e\u8fde\u63a5\u7684\u5bb9\u91cf\u548c\u5b83\u7684\u5f80\u8fd4\u5ef6\u8fdf\u3002\u5b83\u4ee3\u8868\u4e86\u7f51\u7edc\u4e2d\u53ef\u88ab\u4f20\u8f93\uff08\u6709\u65f6\u53eb\u505a\u7a7a\u4e2d\u4f20\u8f93\uff09\u7684\u6570\u636e\u91cf\u3002\n\n\nBase services\n\n\nA set of service frameworks that are common across a range\nof applications and product categories.\n\u517c\u5bb9\u5404\u79cd\u5e94\u7528\u7a0b\u5e8f\u548c\u4ea7\u54c1\u5206\u7c7b\u7684\u4e00\u5957\u670d\u52a1\u67b6\u6784\u3002\n\n\nBundled router\n\n\nAllJoyn router that includes an app on the same device. \nThe AllJoyn Standard Library supports bundled routers.\n\u5305\u542b\u4e86\u540c\u4e00\u4e2a\u8bbe\u5907\u4e0a\u5e94\u7528\u7a0b\u5e8f\u7684 AllJoyn Router\u3002\nAllJoyn Standard Library \u652f\u6301 Bundled Router\u3002\n\n\nCNG\n\n\nCryptography Next Generation. Windows feature.\u4e0b\u4e00\u4ee3\u52a0\u5bc6\u6280\u672f\u3002Windows \u529f\u80fd\u3002\n\n\nConfigClient\n\n\nA class in the AllJoyn Configuration service framework that is \nused by an application developer to remotely configure a peer \ndevice running an AllJoyn ConfigService.\nAllJoyn Configuration \u670d\u52a1\u67b6\u6784\u4e2d\u7684\u4e00\u4e2a\u7c7b\u3002\u901a\u8fc7\u5b83\uff0c\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u53ef\u4ee5\u8fdc\u7a0b\u914d\u7f6e\u8fd0\u884c\u4e86 AllJoyn ConfigService \u7684\u8bbe\u5907\u3002\n\n\nConfigData\n\n\nA Hash structure (key-value pair) of a String key to an AllJoyn \nVariant value that represents various device details that are \nremotely updateable and are persisted to some permanent \nstorage layer, such as NVRAM.\nAllJoyn Variant \u503c\u7684\u5b57\u7b26\u4e32\u5bc6\u94a5\u7684\u54c8\u5e0c\u7ed3\u6784\uff08\u952e\uff0d\u503c\u5bf9\uff09\uff0c\u5b83\u8868\u793a\u5404\u79cd\u8bbe\u5907\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u88ab\u8fdc\u7a0b\u66f4\u6539\uff0c\u5e76\u88ab\u4fdd\u5b58\u5230\u6c38\u4e45\u5b58\u50a8\u5c42\uff0c\u5982 NVRAM\u3002\n\n\nConfigService\n\n\nA module in the AllJoyn Configuration service framework that \nis used by a developer/OEM to build an application that \nexposes the ability to remotely modify ConfigData that is \nread from a PropertyStore and is persisted by it.\n\u8f6f\u4ef6\u5f00\u53d1\u8005\uff0fOEM \u5efa\u7acb\u5e94\u7528\u7a0b\u5e8f\u7684 AllJoyn Configuration \u670d\u52a1\u67b6\u6784\u4e2d\u7684\u4e00\u4e2a\u6a21\u5757\u3002\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5f00\u653e\u4e86\u8fdc\u7a0b\u4fee\u6539 ConfigData \u7684\u529f\u80fd\u3002ConfigData \u4ece PropertyStore \u8bfb\u53d6\uff0c\u5e76\u4fdd\u6301\u3002\n\n\nConfig Client\n\n\nThe implementation of the Configuration service framework \nthat remotely configures a peer device.\nConfiguration \u670d\u52a1\u67b6\u6784\u7684\u4e00\u4e2a\u7528\u4e8e\u8fdc\u7a0b\u914d\u7f6e\u8bbe\u5907\u7684\u5de5\u5177\u3002\n\n\nConfig Server\n\n\nThe implementation of the Configuration service framework \nthat exposes ConfigData and allows a peer device to modify it remotely.\n\u4e00\u4e2a Configuration \u670d\u52a1\u67b6\u6784\u7684\u5de5\u5177\u3002\u7528\u4e8e\u5f00\u653e ConfigData\uff0c\u5e76\u5141\u8bb8\u5176\u4ed6\u8bbe\u5907\u8fdc\u7a0b\u4fee\u6539\u3002\n\n\nConfiguration service framework\n\n\nSoftware layer that enables devices to provide remote \nconfiguration of AllJoyn service frameworks' metadata \n(ConfigData) in a session.\n\u4f7f\u8bbe\u5907\u80fd\u591f\u4e3a\u4f1a\u8bdd\u4e2d AllJoyn \u670d\u52a1\u67b6\u6784\u7684\u5143\u6570\u636e\uff08ConfigData\uff09\u63d0\u4f9b\u8fdc\u7a0b\u914d\u7f6e\u7684\u8f6f\u4ef6\u5c42\u3002\n\n\nConsumer\n\n\nAllJoyn application consuming services on the AllJoyn network\n\n\nDevice that receives the notification and has a way to notify \nuser such as a mobile phone or TV.\nAllJoyn \u7f51\u7edc\u4e2d\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u6d88\u8d39\u670d\u52a1\u3002\n\u8bbe\u5907\u6536\u5230\u901a\u77e5\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u544a\u77e5\u7528\u6237\uff0c\u5982\u624b\u673a\u548c\u7535\u89c6\u3002\n\n\nLearn more\n\n\nControl Panel\n\n\nCollection of Widgets that allow a user to interact with a \ndevice. A control panel is defined and announced by a \nControllee; and discovered and displayed by a Controller. \nA device can have more than one, and can be defined on a \nper-language basis.\nWidgets\u7684\u96c6\u5408\uff0c\u4f7f\u7528\u6237\u53ef\u4ee5\u4e0e\u8bbe\u5907\u8fdb\u884c\u4e92\u52a8\u3002\n\n\nLearn more\n\n\nControllee\n\n\nAn AllJoyn application that advertises its Control Panel \ninterfaces, so that other AllJoyn devices may control it.\n\u5e7f\u544a\u81ea\u5df1 Control Panel \u63a5\u53e3\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\uff0c\u6240\u4ee5\u5176\u5b83 AllJoyn \u8bbe\u5907\u80fd\u63a7\u5236\u5b83\u3002\n\n\nController\n\n\nAn AllJoyn application that controls another AllJoyn device \nthat advertises its Control Panel interfaces.\n\u63a7\u5236\u5e7f\u544a\u81ea\u5df1 Control Panel \u63a5\u53e3\u5e94\u7528\u7a0b\u5e8f\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nControlPanelEventsListener\n\n\nAn interface to listen for control panel-related events. \u7528\u4e8e\u76d1\u542c\u63a7\u5236\u9762\u677f\u76f8\u5173\u4e8b\u4ef6\u7684\u63a5\u53e3\u3002\n\n\nDeviceControlPanel\n\n\nA specific control panel of a controllable device. \n\u67d0\u4e00\u53ef\u63a7\u5236\u8bbe\u5907\u7684\u7279\u5b9a\u63a7\u5236\u9762\u677f\u3002\n\n\nDeviceEventsListener\n\n\nAn interface for listening to session events.\u76d1\u542c\u4f1a\u8bdd\u4e8b\u4ef6\u7684\u63a5\u53e3\u3002\n\n\nDevice-specific callbacks\n\n\nCode provided by the OEM specific to the Controllee that \nwill handle requests from Controllers to set property values, \nto get property values and/or execute actions. Additionally, \nit can initiate a refresh on the Controller by calling the \nControl Panel service framework's appropriate functions\n\u7531 OEM \u63d0\u4f9b\u7ed9\u53d7\u63a7\u8005\u7684\u7279\u5b9a\u4ee3\u7801\uff0c\u7528\u4e8e\u5904\u7406\u63a7\u5236\u8005\u7684\u8bf7\u6c42\uff0c\u8bbe\u5b9a\u9002\u5f53\u7684\u503c\u4ee5\u6267\u884c\u64cd\u4f5c\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u80fd\u901a\u8fc7\u8c03\u7528 Control Panel \u670d\u52a1\u67b6\u6784\u7684\u76f8\u5e94\u529f\u80fd\uff0c\u5237\u65b0\u63a7\u5236\u8005\u3002\n\n\nDevice passcode\n\n\nA secure passcode that is stored in the device's configuration \ninterface. This passcode ensures that the information being \npassed to the device, like the home Wi-Fi password is encrypted. \nThe passcode may be prepopulated by the OEM or by the end user. \nIf no value is provided, the field will default to six zeroes.\n\u4fdd\u5b58\u5728\u8bbe\u5907\u914d\u7f6e\u63a5\u53e3\u4e2d\u7684\u4e00\u4e2a\u5b89\u5168\u5bc6\u7801\u3002\u8be5\u5b89\u5168\u5bc6\u7801\u4fdd\u8bc1\u4e86\u4fe1\u606f\u88ab\u4f20\u9001\u81f3\u8bbe\u5907\uff0c\u7c7b\u4f3c\u5bb6\u4e2d WI-FI \u7684\u52a0\u5bc6\u65b9\u5f0f\u3002\u5bc6\u7801\u53ef\u4ee5\u88ab OEM \u6216 \u6700\u7ec8\u7528\u6237\u63d0\u524d\u586b\u5145\u3002\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u503c\uff0c\u90a3\u4e48\u8be5\u5b57\u6bb5\u5c06\u88ab\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u516d\u4e2a\u96f6\u3002\n\n\nLearn more\n\n\nDistributed AllJoyn bus\n\n\nA description of the AllJoyn network topology where AllJoyn \nApplications attach to AllJoyn Routers, and AllJoyn Routers\nconnect to each other. The entire network can be described\nas the Distributed AllJoyn bus\u3002\nAllJoyn Application \u8fde\u63a5 AllJoyn Router\uff0cAllJoyn Router \u4e4b\u95f4\u5f7c\u6b64\u76f8\u8fde\u3002\u8fd9\u6837\u7684\u7f51\u7edc\u6574\u4f53\u4e0a\u88ab\u79f0\u4e3a Distributed AllJoyn \u603b\u7ebf\u3002\n\n\nEvent\n\n\n(from system description) A message denoting that something has happened. \u4e00\u6761\u6d88\u606f\u8bf4\u660e\u67d0\u4e9b\u4e8b\u60c5\u53d1\u751f\u4e86\uff08\u6765\u81ea\u7cfb\u7edf\u63cf\u8ff0\uff09\u3002\n\n\nA signal on an AllJoyn interface that contains a human readable \ndescription. The arguments may also include description fields.\nAllJoyn \u63a5\u53e3\u4e2d\u5305\u542b\u53ef\u8bfb\u63cf\u8ff0\u7684\u4fe1\u53f7\u3002\u5176\u53c2\u6570\u4e5f\u53ef\u80fd\u5305\u542b\u63cf\u8ff0\u5b57\u6bb5\u3002\n\n\nEvent Consumer\n\n\nApplication that is set up to listen for events. \u4e3a\u76d1\u542c\u4e8b\u4ef6\u5efa\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nEvent descriptor\n\n\nHuman-readable string attached to the event. \u4e8b\u4ef6\u9644\u5e26\u7684\u53ef\u8bfb\u5b57\u6bb5\u3002\n\n\nEvent-emitting device\n\n\nThe device that sends the event. \u53d1\u9001\u4e8b\u4ef6\u7684\u8bbe\u5907\n\n\nEvent Picker app\n\n\nApplication that lets end users program actions to take when an event is sent.\n\u5f53\u67d0\u4e2a\u4e8b\u4ef6\u88ab\u53d1\u9001\u65f6\uff0c\u8ba9\u6700\u7ec8\u7528\u6237\u7684\u7a0b\u5e8f\u6267\u884c\u64cd\u4f5c\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nGUID\n\n\nGlobally Unique Identifier. A 128 bit identifier generated \nrandomly in a way that the probability of collision is negligible.\nGlobally Unique Identifier. \u4e00\u79cd\u968f\u673a\u751f\u6210\u7684 128 \u4f4d\u6807\u8bc6\u7b26\uff0c\u5176\u53d1\u751f\u51b2\u7a81\u7684\u53ef\u80fd\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002\n\n\nIFTTT\n\n\nIf This Then That. A logical construct that tests for a \ncertain condition and then performs an action if it is \"true\".\nIf This Then That\uff08\u5982\u679c\u8fd9\u6837\uff0c\u90a3\u4e48\uff09\u3002\u4e00\u79cd\u903b\u8f91\u7ed3\u6784\uff0c\u5982\u679c\u5b83\u4e3a \u201ctrue\u201d\u3002\u5e76\u4e14\u7b26\u5408\u67d0\u79cd\u7279\u5b9a\u60c5\u51b5\uff0c\u90a3\u4e48\u5c31\u8fdb\u884c\u4e00\u4e2a\u64cd\u4f5c\uff0c\n\n\nIoE application\n\n\nSee \nAllJoyn App\n \u67e5\u770b\nAllJoyn App\n \n\n\nIoE device\n\n\nA device that that is connected to Internet directly or via \nGateway. For the purpose of this document it implies the device \nthat has an AllJoyn application running on it.\n\u67d0\u4e2a\u76f4\u8fde\u6216\u8005\u901a\u8fc7\u7f51\u5173\u8fde\u63a5\u5230\u82f1\u7279\u7f51\u7684\u8bbe\u5907\u3002\u5728\u672c\u6587\u4ef6\u4e2d\u610f\u5473\u7740\u5b83\u662f\u4e00\u4e2a\u8fd0\u884c AllJoyn \u7a0b\u5e8f\u7684\u8bbe\u5907\u3002\n\n\nLogical distributed software bus\n\n\nSee \nDistributed AllJoyn bus\n \u67e5\u770b \nDistributed AllJoyn bus\n\n\nNotification message\n\n\nA message sent by a producer specifying details of the \nnotification including any notification text to be displayed to the user.\n\u4e00\u6761\u5305\u542b\u4e86\u6307\u5b9a\u7ec6\u8282\u7684\u4fe1\u606f\uff0c\u5305\u62ec\u663e\u793a\u7ed9\u7528\u6237\u7684\u901a\u77e5\u6587\u672c\u3002\n\n\nNotification service framework\n\n\nSoftware layer that enables devices to send or receive \nhuman-consumable notifications.\n\u4f7f\u8bbe\u5907\u80fd\u591f\u53d1\u9001\u548c\u63a5\u6536\u53ef\u6d88\u8d39\u901a\u77e5\u7684\u8f6f\u4ef6\u5c42\u3002\n\n\nLearn more\n\n\nOffboarding\n\n\nThe process of removing an AllJoyn device from a personal network. \nIt also removes the personal Access Point's (AP) SSID and password \nvalues from the AllJoyn device memory.\n\u5c06 AllJoyn \u8bbe\u5907\u79fb\u9664\u4e2a\u4eba\u7f51\u7edc\u7684\u8fc7\u7a0b\u3002\u540c\u65f6\u4e5f\u4ece AllJoyn \u8bbe\u5907\u5185\u5b58\u4e2d\u4f1a\u79fb\u9664\u4e2a\u4eba Access Point\uff08AP\uff09 \u7684 SSID \u548c\u5bc6\u7801\u3002\n\n\nOnboardee\n\n\nAn application using this side of the service framework is \nknown as the Onboardee.\n\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\n\n\nAn AllJoyn device that advertises that it implements the \nOnboarding interface.\n\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\n\n\nOnboarder\n\n\nAn application using this side of the service framework is \nknown as the Onboarder.\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\n\n\nA device, usually a handset, that is used to interact with \nthe onboardee to pass it the Wi-Fi credentials needed for \nonboarding. \u4e00\u4e2a\u8bbe\u5907\uff0c\u901a\u5e38\u662f\u4e00\u4e2a\u624b\u6301\u8bbe\u5907\uff0c\u4e0e onboardee \u8fdb\u884c\u4e92\u52a8\uff0c\u5e76\u5f97\u5230\u7528\u6765 onboard \u7684 Wi-Fi \u51ed\u636e\u3002\n\n\nOnboarding Client\n\n\nThe implementation of the Onboarding service framework that \nremotely onboards a peer device.\nOnboarding \u670d\u52a1\u67b6\u6784\u7684\u4e00\u4e2a\u5de5\u5177\uff0c\u7528\u6765\u8fdc\u7a0b onboard \u67d0\u8bbe\u5907\u3002\n\n\nOnboardingData\n\n\nA structure containing the relevant network configuration \ninformation and state that controls the device's onboarding \nprocess. The details that are remotely updateable are persisted \nto some permanent storage layer such as NVRAM.\n\u5305\u542b\u76f8\u5173\u7f51\u7edc\u914d\u7f6e\u4fe1\u606f\u548c\u63a7\u5236\u8bbe\u5907 onboard \u8fdb\u7a0b\u7684\u72b6\u6001\u7684\u4e00\u79cd\u7ed3\u6784\u3002\u8fdc\u7a0b\u66f4\u65b0\u7684\u8be6\u7ec6\u4fe1\u606f\u88ab\u4fdd\u5b58\u5230\u5982 NVRAM \u4e4b\u7c7b\u7684\u6c38\u4e45\u5b58\u50a8\u5c42\u3002\n\n\nOnboardingService\n\n\nA module in the Onboarding service framework that is used by \nthe developer/OEM to build an application that exposes the \nability to remotely modify OnboardingData that is persisted by it.\nOnboarding \u670d\u52a1\u67b6\u6784\u4e2d\u7684\u4e00\u4e2a\u6a21\u5757\uff0c\u5f00\u53d1\u8005\uff0fOEM \u7528\u5176\u5efa\u7acb\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u6837\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u8fdc\u7a0b\u4fee\u6539\u56fa\u5316\u5728\u5176\u4e2d\u7684 OnboardingData \u7684\u80fd\u529b\u3002\n\n\nOnboarding Server\n\n\nThe implementation of the Onboarding service framework that \nexposes OnboardingData and allows a peer device to modify it \nremotely and control the onboarding process.\nOnboarding \u670d\u52a1\u67b6\u6784\u7684\u4e00\u79cd\u5de5\u5177\u3002\u5b83\u5f00\u653e\u4e86 OnboradingData\uff0c\u5141\u8bb8\u8bbe\u5907\u8fdc\u7a0b\u4fee\u6539\u5e76\u4e14\u63a7\u5236 onboarding \u8fdb\u7a0b\u3002\n\n\nOnboarding service framework\n\n\nSoftware layer that enables devices to provide remote \nconfiguration (OnboardingData) and control (driver mode) \nover a device's onboarding process to a Wi-Fi AP over an \nAllJoyn session\u3002\n\u4e00\u79cd\u8f6f\u4ef6\u5c42\u3002\u5b83\u5141\u8bb8\u8bbe\u5907\u63d0\u4f9b\u8fdc\u7a0b\u914d\u7f6e\uff08OnboardingData\uff09\u548c\u63a7\u5236\uff08\u9a71\u52a8\u6a21\u5f0f\uff09\u8bbe\u5907\u901a\u8fc7 AllJoyn \u4f1a\u8bdd onboard \u4e00\u4e2a Wi-Fi AP \u7684\u8fdb\u7a0b\u3002\n\n\nA set of capabilities that enables an AllJoyn device to \nbe brought on or removed from a user's personal network \n(onboarding/offboarding).\n\u4f7f\u8bbe\u5907\u53ef\u4ee5\u8fdb\u5165\u548c\u9000\u51fa\uff08onboarding/offboarding\uff09\u7528\u6237\u4e2a\u4eba\u7f51\u7edc\u7684\u4e00\u7ec4\u529f\u80fd\u3002\n\n\nPersonal AP\n\n\nThe target network that the end user wants the AllJoyn \ndevice to join. This is typically an end user's personal \nnetwork (personal, work, office, etc.).\n\u6700\u7ec8\u7528\u6237\u5e0c\u671b AllJoyn \u8bbe\u5907\u52a0\u5165\u7684\u76ee\u6807\u7f51\u7edc\u3002\u8fd9\u901a\u5e38\u662f\u6700\u7ec8\u7528\u6237\u7684\u4e2a\u4eba\u7f51\u7edc\uff08\u4e2a\u4eba\u3001\u5de5\u4f5c\u3001\u529e\u516c\u5ba4\u7f51\u7edc\u7b49\uff09\n\n\nProducer\n\n\nAllJoyn application providing services on the AllJoyn network.\n\n\nDevice that generates and sends the notification to a device \nsuch as a household appliance.\n\u5728 AllJoyn \u7f51\u7edc\u4e2d\u63d0\u4f9b\u670d\u52a1\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002\n\u5411\u5982\u5bb6\u5ead\u7535\u5668\u7684\u8bbe\u5907\u751f\u6210\u5e76\u53d1\u9001\u901a\u77e5\u7684 AllJoyn \u8bbe\u5907\u3002\n\n\n\u4e86\u89e3\u66f4\u591a\n\n\nPropertyStore\n\n\n(from a thin app document) A module that maintains the default \nand runtime property values for the service frameworks.\uff08\u6839\u636e thin app document\uff09\u4e00\u79cd\u4e3a\u670d\u52a1\u67b6\u6784\u4fdd\u7559\u9ed8\u8ba4\u503c\u548c\u8fd0\u884c\u65f6\u7684\u5c5e\u6027\u503c\u7684\u6a21\u5757\u3002\n\n\nA module that maintains the values returned as AboutData that \nhas been merged with the values from ConfigData.\n\u8be5\u6a21\u5757\u4fdd\u7559\u7684\u503c\u4ee5 AboutData \u7684\u5f62\u5f0f\u8fd4\u56de\uff0c\u8fd9\u65f6 AboutData \u5df2\u7ecf\u4e0e ConfigData \u7684\u503c\u5408\u5e76\u4e86\u3002\n\n\nProximal network\n\n\nRefers to a network that does not include a cloud-based service\n\u4e0d\u5305\u542b\u4e91\u670d\u52a1\u7684\u7f51\u7edc\n\n\nProximal IoE network\n\n\nRefers to a network that includes a cloud-based service\n\u5305\u542b\u4e91\u670d\u52a1\u7684\u7f51\u7edc\n\n\nRDP\n\n\nReliable Data Protocol. An efficient reliable data transport\nservice for packet-based applications.\nReliable Data Protocol\uff08\u53ef\u9760\u6570\u636e\u534f\u8bae\uff09\u3002\u4e3a\u57fa\u4e8e\u5305\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7684\u4e00\u79cd\u9ad8\u6548\u53ef\u9760\u7684\u6570\u636e\u4f20\u8f93\u670d\u52a1\u3002\n\n\nReliable event\n\n\nAn event this is sent with guaranteed delivery to all interested consumers. \n\u4e00\u79cd\u4fdd\u8bc1\u4f20\u8f93\u5230\u76f8\u5173\u6d88\u8d39\u8005\u7684\u4e8b\u4ef6\u3002\n\n\nRemote application\n\n\nTypically, AllJoyn applications communicate with one another.\nA remote application is the peer that a particular application\nis communicating with.\n\u901a\u5e38\uff0cAllJoyn \u5e94\u7528\u7a0b\u5e8f\u4e0e\u53e6\u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u901a\u4fe1\u3002Remote application \u5c31\u662f\u6b63\u5728\u4e0e\u6b64\u5e94\u7528\u7a0b\u5e8f\u901a\u4fe1\u7684\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nRule\n\n\nThe pairing of an event with an action the user wants to have \noccur when a device supporting the Events interface performs \nan action defined by the OEM that warrants monitoring.\n\u67d0\u4e00\u4e8b\u4ef6\u4e0e\u7528\u6237\u5e0c\u671b\u7684\u52a8\u4f5c\u7684\u4e00\u7ec4\u5339\u914d\u5bf9\u3002\u5f53\u8bbe\u5907\u652f\u6301 Event \u63a5\u53e3\uff0c\u5e76\u901a\u8fc7 OEM \u9274\u6743\u65f6\uff0c\u5c31\u4f1a\u5b8c\u6210\u52a8\u4f5c\u3002\n\n\nSecurity\n\n\nFramework for AllJoyn applications to authenticate each other \nand send encrypted data between them.\nAllJoyn \u5e94\u7528\u7a0b\u5e8f\u7528\u4e8e\u76f8\u4e92\u9274\u6743\u5e76\u76f8\u4e92\u4f20\u9012\u52a0\u5bc6\u6570\u636e\u7684\u4e00\u79cd\u67b6\u6784\u3002\n\n\nService_Common\n\n\nA module that contains code shared by multiple services, \nincluding the PropertyStore API definition.\n\u4e00\u4e2a\u5305\u542b\u4e86\u591a\u79cd\u670d\u52a1\u5171\u4eab\u7684\u4ee3\u7801\u7684\u6a21\u5757\uff0c\u5305\u62ec PropertyStore API \u7684\u5b9a\u4e49\u3002\n\n\nSessionless signal\n\n\nA broadcast AllJoyn signal which is received by all devices \nlistening on the end user's home network (such as the Wi-Fi network). \nThe sessionless signals are broadcast on the network until an \nassociated time-to-live (TTL) value expires. The About feature \nsends Announcements as sessionless signals over the Wi-Fi network.\n\u4e00\u79cd\u5e7f\u64ad\u7684 AllJoyn \u4fe1\u53f7\uff0c\u53ef\u4ee5\u88ab\u6240\u6709\u5728\u6700\u7ec8\u7528\u6237\u5bb6\u5ead\u7f51\u7edc\uff08\u5982 Wi-Fi \u7f51\u7edc\uff09\u4e2d\u76d1\u542c\u7684\u8bbe\u5907\u63a5\u6536\u5230\u3002Sessionless sigal \u4f1a\u5728\u7f51\u7edc\u4e2d\u6301\u7eed\u5e7f\u64ad\uff0c\u76f4\u5230 time-to-live (TTL) \u65f6\u95f4\u8d85\u65f6\u3002About \u529f\u80fd\u901a\u8fc7 sessionless signal \u7684\u65b9\u5f0f\u5728 Wi-Fi \u7f51\u7edc\u4e2d\u53d1\u9001 Annoucement\u3002\n\n\nLearn more\n\n\nSoftAP\n\n\nWhen the AllJoyn device is not connected to a Wi-Fi Access Point \n(not onboarded) it broadcasts in access point mode.\n\u5f53 AllJoyn \u8bbe\u5907\u6ca1\u6709\u8fde\u63a5\u5230 Wi-Fi Access Point\uff08\u4e0d\u5728\u7ebf\uff09\u65f6\uff0c\u5b83\u4f1a\u4ee5 access point \u6a21\u5f0f\u53d1\u9001\u5e7f\u64ad\u3002\n\n\nSoftware-enabled Access Point that allows the device to work \nas both the AP and the client.\n\u8f6f\u4ef6\u5b9e\u73b0\u7684 Access Point \u5141\u8bb8\u8bbe\u5907\u65e2\u80fd\u5728 AP \u6a21\u5f0f\u5de5\u4f5c\uff0c\u4e5f\u80fd\u5728\u5ba2\u6237\u7aef\u6a21\u5f0f\u5de5\u4f5c\u3002\n\n\nStandalone router\n\n\nContains the main progrem, liballjoyn.so, and librouter.so files.\nIt is not bundled with an AllJoyn app.\n\u5305\u542b\u4e86\u4e3b\u7a0b\u5e8f\u3001liballjoyn.so \u548c librouter.so\u3002\u5b83\u4e0d\u4e0e AllJoyn \u5e94\u7528\u7a0b\u5e8f\u7ed1\u5b9a\u3002\n\n\nStandard app\n\n\nAllJoyn app that uses the AllJoyn Standard Library.\n\u4f7f\u7528 AllJoyn Standard Library \u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nStandard core\n\n\nContains the Standard library and router library\n\u5305\u542b\u4e86 Standard library \u548c router library\n\n\nSYN, SYN+ACK, ACK\n\n\nThe kinds of segments that are involved in a three-way handshake\nconnection establishment protocol. Used in TCP and ARDP.\n\u4e09\u8def\u63e1\u624b\u5efa\u7acb\u8fde\u63a5\u534f\u8bae\u7684\u51e0\u4e2a\u90e8\u5206\u3002\u7528\u4e8e TCP \u548c ARDP\u3002\n\n\nThin app\n\n\nAn AllJoyn application that incorporates the AllJoyn thin core library.\n\u5305\u542b AllJoyn thin core library \u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nThin core\n\n\nContains the Thin library\n\u5305\u542b Thin library\n\n\nThin Library service app\n\n\nAllJoyn app that exposes one set of features as part of a \npeer session. It does not correlate to a web service as the \nservice may play the role of a client at various times \n(depending on the implementation). The function of the AllJoyn \nservice is defined by the set of AllJoyn service frameworks used.\n\u4f5c\u4e3a\u4f1a\u8bdd\u7684\u4e00\u90e8\u5206\u516c\u5f00\u4e00\u7ec4\u529f\u80fd\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u4e0d\u4f1a\u5173\u8054\u5230 web \u670d\u52a1\uff0c\u56e0\u4e3a web \u670d\u52a1\u53ef\u80fd\u4f1a\u4f5c\u4e3a\u5ba2\u6237\u7aef\u591a\u6b21\u4f7f\u7528\uff08\u7531\u5de5\u5177\u800c\u5b9a\uff09\u3002AllJoyn \u670d\u52a1\u7684\u529f\u80fd\u7531\u5176\u4f7f\u7528\u7684\u4e00\u5957 AllJoyn \u670d\u52a1\u67b6\u6784\u800c\u5b9a\u3002\n\n\nTranslator\n\n\nCallback method a developer implements in order to provide \nlanguage translations or string manipulations.\n\n\n\u4e86\u89e3\u66f4\u591a\n\n\nUser\n\n\nHas many contexts.\u6709\u5f88\u591a\u60c5\u51b5\u3002\n\n\nIn Events and Actions, the individual using the device that \nhas the Event Picker application installed.\n\u5728 Events and Actions \u4e2d\uff0c\u4ed6\u662f\u4f7f\u7528\u6709 Event Picker \u5e94\u7528\u7a0b\u5e8f\u7684\u8bbe\u5907\u7684\u4eba\n\n\nWell-Known Name (WKN)\n\n\nWell Known names are used as the basis for AllJoyn discovery \nfor announcements. Typically applications will use About\nannouncements and not the lower level Well-Known Names.\nWell Known name \u662f AllJoyn \u53d1\u73b0 annoucement \u7684\u57fa\u7840\u3002\u901a\u5e38\u5e94\u7528\u7a0b\u5e8f\u4f1a\u4f7f\u7528 About annoucement \u800c\u4e0d\u662f\u66f4\u4f4e\u7ea7\u522b\u7684 Well-Known Name\u3002\n\n\nWidget\n\n\nA UI element in the control panel used to represent an interface. \nIt graphically enables a user to perform a function and/or \naccess properties.\n\u63a7\u5236\u9762\u677f\u4e2d\u7684\u7528\u4e8e\u8868\u793a\u63a5\u53e3\u7684 UI \u5143\u7d20\u3002\u5b83\u4ee5\u56fe\u5f62\u7684\u65b9\u5f0f\u8c03\u7528\u8bbe\u5907\u529f\u80fd\u548c\uff0f\u6216\u8bbf\u95ee\u8bbe\u5907\u5c5e\u6027\u3002\n\n\nWKN",
            "title": "Glossary"
        },
        {
            "location": "/learn/glossary/#glossary",
            "text": "About Client  The implementation of the About feature that receives information \nfrom an About Server. About \u529f\u80fd\u4e2d\u7528\u4e8e\u4ece About Sever \u63a5\u6536\u4fe1\u606f\u7684\u5de5\u5177\u3002  About feature  Open implementation built using the AllJoyn  framework that \nallows for a broadcast of AboutData. \u4f7f\u7528 AllJoyn trade \u67b6\u6784\u6784\u4ef6\u7684\u5f00\u653e\u5f0f\u5de5\u5177\uff0c\u7528\u4e8e\u5e7f\u64ad AboutData\u3002  Software layer that enables devices to publish AllJoyn service \nframeworks' interfaces and metadata (AboutData) in an Announcement \nand in a session.\n\u8f6f\u4ef6\u5206\u5c42\u7ed3\u6784\u4f7f\u5f97\u8bbe\u5907\u53ef\u4ee5\u5728 Annoucement \u548c\u4f1a\u8bdd\u4e2d\u53d1\u5e03 AllJoyn \u670d\u52a1\u67b6\u6784\u7684\u63a5\u53e3\u548c\u5143\u6570\u636e\uff08AboutData\uff09\u3002  \u4e86\u89e3\u66f4\u591a  AboutData  A Hash structure (key-value pair) of a String key to an AllJoyn \nVariant value that represents various device details.\nAllJoyn Variant \u503c\u7684\u5b57\u7b26\u4e32\u5bc6\u94a5\u7684\u54c8\u5e0c\u7ed3\u6784\uff08\u952e\uff0d\u503c\u5bf9\uff09\uff0c\u5b83\u8868\u793a\u5404\u79cd\u8bbe\u5907\u7684\u8be6\u7ec6\u4fe1\u606f\u3002  AboutIcon  An image representing the device that can be obtained remotely \nvia the About interface.\n\u7528\u4e8e\u8868\u793a\u53ef\u88ab\u901a\u8fc7 About \u63a5\u53e3\u8fdc\u7a0b\u83b7\u53d6\u7684\u8bbe\u5907\u7684\u56fe\u50cf\u3002  AboutService  A class in the About feature that is used by a developer/OEM \nin either client mode or server mode. Server mode is used to \nbuild an application that advertises AboutData that is read \nfrom a PropertyStore. Client mode is used to build an application \nthat discovers advertised AboutData.\n\u5f00\u53d1\u8005\uff0fOEM \u5728\u5ba2\u6237\u7aef\u6a21\u5f0f\u6216\u8005\u670d\u52a1\u5668\u6a21\u5f0f\u4f7f\u7528\u7684 About \u529f\u80fd\u7684\u4e00\u4e2a\u7c7b\u3002\u670d\u52a1\u5668\u6a21\u5f0f\u7528\u6765\u5efa\u7acb\u5e7f\u544a AboutData \u7684\u5e94\u7528\u7a0b\u5e8f\uff0cAboutData \u4ece PropertyStore \u8bfb\u53d6\u3002\u5ba2\u6237\u7aef\u6a21\u5f0f\u7528\u6765\u5efa\u7acb\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\u5e7f\u544a\u7684 AboutData\u3002  About Service  The implementation of the About feature that broadcasts About \ndetails. Traditionally, this is an embedded device, but can \nbe a TV, mobile, or any device that supports AllJoyn service frameworks.\nAbout feature \u7528\u4e8e\u5e7f\u64ad About \u7ec6\u8282\u7684\u5de5\u5177\u3002\u4f20\u7edf\u610f\u4e49\u4e0a\uff0c\u8fd9\u662f\u4e00\u4e2a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3002\u5f53\u7136\u5b83\u4e5f\u53ef\u4ee5\u662f\u4efb\u4f55\u652f\u6301 AllJoyn \u670d\u52a1\u67b6\u6784\u7684\u8bbe\u5907\uff0c\u5982 \u7535\u89c6\u3001\u624b\u673a\u7b49\u3002  Action  A function performed by an AllJoyn-enabled device. AllJoyn \u8bbe\u5907\u6267\u884c\u7684\u529f\u80fd\u3002  \u4e86\u89e3\u66f4\u591a .  Action descriptor  An introspectable human readable description contained in the action. Action \u4e2d\u5305\u542b\u7684\u5185\u7701\u7684\u53ef\u8bfb\u63cf\u8ff0\u3002  Action-receiving device  The device that performs an action. Related to the  Events and Actions feature .\u6267\u884c\u67d0\u9879\u64cd\u4f5c\u7684\u8bbe\u5907\u3002\u6709\u5173  Events and Actions feature \u3002  Adapter  The Control Panel service framework layer that translates \nthe UI elements received to iOS UI elements. \u5c06\u63a5\u6536\u7684 UI \u5143\u7d20\u8f6c\u6362\u6210 iOS UI \u5143\u7d20\u7684\u63a7\u5236\u9762\u677f\u670d\u52a1\u67b6\u6784\u3002  AJSCL  AllJoyn Standard Core Library. An application or AllJoyn \ndaemon process that contains the full implementation \nof the AllJoyn message bus. AllJoyn \u6807\u51c6\u5185\u6838\u8d44\u6e90\u5e93\u3002\u5305\u542b\u5b8c\u6574 AllJoyn \u4fe1\u606f\u603b\u7ebf\u5de5\u5177\u7684\u5e94\u7528\u7a0b\u5e8f\u6216 AllJoyn \u5b88\u62a4\u8fdb\u7a0b\u3002  AJTCL  AllJoyn Thin Core Library. The version of the AllJoyn library \nthat runs on devices that are memory and processing power-constrained. \nThis is intended for devices that are powered by a Micro Controller Unit (MCU). AllJoyn \u7cbe\u7b80\u5185\u6838\u8d44\u6e90\u5e93\u3002\u5728\u5185\u5b58\u548c\u5904\u7406\u80fd\u529b\u53d7\u9650\u7684\u8bbe\u5907\u4e0a\u8fd0\u884c\u7684 AllJoyn \u8d44\u6e90\u5e93\u7248\u672c\u3002 \u5b83\u66f4\u503e\u5411\u4e8e\u652f\u6301\u91c7\u7528 Micro Controller Unit (MCU) \u4f9b\u7535\u7684\u8bbe\u5907\u3002  AllJoyn App  An application that uses the AllJoyn framework. Apps use either the \nAllJoyn Core APIs or the AllJoyn Service Frameworks API. Apps \ncan either use the Standard Core or Thin Core implementations.\n\u4f7f\u7528 AllJoyn \u67b6\u6784\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u65e0\u8bba\u662f AllJoyn Core API \u6216\u8005 AllJoyn Service Framework\u3002\u5e94\u7528\u7a0b\u5e8f\u65e2\u53ef\u4ee5\u4f7f\u7528 Standard Core \u5de5\u5177\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Thin Core \u5de5\u5177\u3002  \u4e86\u89e3\u66f4\u591a .  AllJoyn client app  As part of a peer session, this application will take the role \nof requesting information through a peer session on a service \napplication. This does not correlate to a web client as the \nclient app may also expose service components.\n\u4f5c\u4e3a\u5bf9\u7b49\u4f1a\u8bdd\u7684\u4e00\u90e8\u5206\uff0c\u6b64\u5e94\u7528\u7a0b\u5e8f\u7684\u4f5c\u7528\u662f\u901a\u8fc7\u5bf9\u7b49\u56de\u8bdd\u8bf7\u6c42\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u7684\u4fe1\u606f\u3002\u5b83\u4e0e\u7f51\u9875\u5ba2\u6237\u7aef\u5e76\u4e0d\u76f8\u5173\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u80fd\u516c\u5f00\u7f51\u7edc\u7ec4\u4ef6\u3002  AllJoyn core package  AllJoyn software package AllJoyn \u8f6f\u4ef6\u5305  AllJoyn-enabled device  An entity which has an AllJoyn application installed to send \nor receive notifications using the Notification service framework interface.\n\u5b89\u88c5\u4e86 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u7684\u8bbe\u5907\uff0c\u4f7f\u7528 Notification \u670d\u52a1\u67b6\u6784\u63a5\u53e3\uff0c\u53d1\u9001\u548c\u63a5\u6536\u901a\u77e5\u3002  AllJoyn framework  Open-source, peer-to-peer framework that allows for abstraction \nof low-level network concepts and APIs. \n\u5f00\u6e90\u3001\u7aef\u5230\u7aef\u67b6\u6784\uff0c\u652f\u6301\u4f4e\u7b49\u89c4\u683c\u7f51\u7edc\u6982\u5ff5\u548cAPI\u3002  \u4e86\u89e3\u66f4\u591a  AllJoyn interface  A collection of methods, signals and properties that make up \nthe contract of how applications communicate. \u7ec4\u6210\u5e94\u7528\u7a0b\u5e8f\u76f8\u4e92\u901a\u4fe1\u7684\u65b9\u6cd5\u3001\u4fe1\u53f7\u548c\u5c5e\u6027\u7684\u96c6\u5408\u3002  AllJoyn Router  AllJoyn network components that talk to each other to enable \napps on different routers to communicate in the AllJoyn network. \u5728 AllJoyn \u7f51\u7edc\u4e2d\uff0c\u76f8\u4e92\u901a\u4fe1\u7684 AllJoyn \u7f51\u7edc\u7ec4\u4ef6\u3002\u5b83\u80fd\u4f7f\u4e0d\u540c\u8def\u7531\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1\u3002  \u4e86\u89e3\u66f4\u591a .  AllJoyn service (frameworks)  A collection of full-feature implementations using the AllJoyn \nframework that provides specific functionality. These are building \nblocks can be combined together to build interoperable devices \nand applications. \n\u4f7f\u7528 AllJoyn \u67b6\u6784\u63d0\u4f9b\u7279\u5b9a\u529f\u80fd\u7684\u5168\u529f\u80fd\u5de5\u5177\u7684\u96c6\u5408\u3002\u8fd9\u4e9b\u90fd\u662f\u6784\u5efa\u57fa\u5757\u53ef\u4ee5\u7ec4\u5408\u5728\u4e00\u8d77\u4ee5\u6784\u5efa\u53ef\u4e92\u64cd\u4f5c\u7684\u8bbe\u5907\n\u548c\u5e94\u7528\u7a0b\u5e8f\u3002  AllJoyn Standard Core Library  See  AJSCL  \u8be6\u89c1  AJSCL  AllJoyn Thin Core Library  See  AJTCL  \u8be6\u89c1  AJTCL  Announcement  A sessionless signal whose payload includes published services' \ninterfaces and metadata that are used for discovery. \u4e00\u79cd sessionless signal\uff0c\u5185\u5bb9\u5305\u542b\u4e86\u7528\u4e8e\u53d1\u73b0\u7684\u516c\u5f00\u670d\u52a1\u63a5\u53e3\u548c\u5143\u6570\u636e\u3002  \u4e86\u89e3\u66f4\u591a  ARDP  AllJoyn Reliable Datagram Protocol. ARDP is designed to provide,\namong other things, reliable delivery and ordering for UDP-based\nlayer 4 transport mechanisms. In particular, ARDP is used in the\nUDP Transport to provide guarantees appropriate to AllJoyn Messaging.\nARDP is modeled after RDP and extended for AllJoyn-specific requirements.\nAllJoyn Reliable Datagram Protocol\uff08AllJoyn \u53ef\u9760\u6570\u636e\u62a5\u534f\u8bae\uff09\u3002ARDP \u65e8\u5728\u63d0\u4f9b\u57fa\u4e8e UDP \u7684\u7b2c 4 \u5c42\u4f20\u8f93\u673a\u5236\u7684\u53ef\u9760\u9001\u8fbe\u548c\u547d\u4ee4\u3002ARDP \u7279\u522b\u7528\u6765\u4fdd\u8bc1\u5728 UDP \u4f20\u8f93\u4e2d\u4e3a AllJoyn messaging \u63d0\u4f9b\u9002\u5f53\u4fdd\u969c\u3002ARDP \u662f\u6548\u4eff RDP \u5efa\u7acb\u7684\uff0c\u5e76\u9488\u5bf9 AllJoyn \u7684\u9700\u6c42\u8fdb\u884c\u4e86\u6269\u5c55\u3002  Audio service framework  Open implementation built using the AllJoyn framework that \nallows for synchronized audio to play back on one or many Sinks.\n\u5f00\u653e\u5de5\u5177\uff0c\u5141\u8bb8\u4f7f\u7528 AllJoyon \u6846\u67b6\u540c\u6b65\u64ad\u653e\u6765\u81ea\u4e00\u4e2a\u6216\u591a\u4e2a\u6e90\u7684\u97f3\u9891\u3002  Authoring app  Application that carries out the IFTTT rules. Related to the  Events and Actions feature .\u6267\u884c IFTTT \u89c4\u5219\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u6709\u5173  Events and Actions feature .  Bandwidth-Delay Product  Refers to the product of a data link\ufffds capacity in bits per second\nand its round-trip delay time. This characterizes the amount of data\nthat can be in transit (sometimes called in-flight) in the network.\n\u662f\u6307\u4ea7\u54c1\u6bcf\u79d2\u949f\u6570\u636e\u8fde\u63a5\u7684\u5bb9\u91cf\u548c\u5b83\u7684\u5f80\u8fd4\u5ef6\u8fdf\u3002\u5b83\u4ee3\u8868\u4e86\u7f51\u7edc\u4e2d\u53ef\u88ab\u4f20\u8f93\uff08\u6709\u65f6\u53eb\u505a\u7a7a\u4e2d\u4f20\u8f93\uff09\u7684\u6570\u636e\u91cf\u3002  Base services  A set of service frameworks that are common across a range\nof applications and product categories.\n\u517c\u5bb9\u5404\u79cd\u5e94\u7528\u7a0b\u5e8f\u548c\u4ea7\u54c1\u5206\u7c7b\u7684\u4e00\u5957\u670d\u52a1\u67b6\u6784\u3002  Bundled router  AllJoyn router that includes an app on the same device. \nThe AllJoyn Standard Library supports bundled routers.\n\u5305\u542b\u4e86\u540c\u4e00\u4e2a\u8bbe\u5907\u4e0a\u5e94\u7528\u7a0b\u5e8f\u7684 AllJoyn Router\u3002\nAllJoyn Standard Library \u652f\u6301 Bundled Router\u3002  CNG  Cryptography Next Generation. Windows feature.\u4e0b\u4e00\u4ee3\u52a0\u5bc6\u6280\u672f\u3002Windows \u529f\u80fd\u3002  ConfigClient  A class in the AllJoyn Configuration service framework that is \nused by an application developer to remotely configure a peer \ndevice running an AllJoyn ConfigService.\nAllJoyn Configuration \u670d\u52a1\u67b6\u6784\u4e2d\u7684\u4e00\u4e2a\u7c7b\u3002\u901a\u8fc7\u5b83\uff0c\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u53ef\u4ee5\u8fdc\u7a0b\u914d\u7f6e\u8fd0\u884c\u4e86 AllJoyn ConfigService \u7684\u8bbe\u5907\u3002  ConfigData  A Hash structure (key-value pair) of a String key to an AllJoyn \nVariant value that represents various device details that are \nremotely updateable and are persisted to some permanent \nstorage layer, such as NVRAM.\nAllJoyn Variant \u503c\u7684\u5b57\u7b26\u4e32\u5bc6\u94a5\u7684\u54c8\u5e0c\u7ed3\u6784\uff08\u952e\uff0d\u503c\u5bf9\uff09\uff0c\u5b83\u8868\u793a\u5404\u79cd\u8bbe\u5907\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u88ab\u8fdc\u7a0b\u66f4\u6539\uff0c\u5e76\u88ab\u4fdd\u5b58\u5230\u6c38\u4e45\u5b58\u50a8\u5c42\uff0c\u5982 NVRAM\u3002  ConfigService  A module in the AllJoyn Configuration service framework that \nis used by a developer/OEM to build an application that \nexposes the ability to remotely modify ConfigData that is \nread from a PropertyStore and is persisted by it.\n\u8f6f\u4ef6\u5f00\u53d1\u8005\uff0fOEM \u5efa\u7acb\u5e94\u7528\u7a0b\u5e8f\u7684 AllJoyn Configuration \u670d\u52a1\u67b6\u6784\u4e2d\u7684\u4e00\u4e2a\u6a21\u5757\u3002\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5f00\u653e\u4e86\u8fdc\u7a0b\u4fee\u6539 ConfigData \u7684\u529f\u80fd\u3002ConfigData \u4ece PropertyStore \u8bfb\u53d6\uff0c\u5e76\u4fdd\u6301\u3002  Config Client  The implementation of the Configuration service framework \nthat remotely configures a peer device.\nConfiguration \u670d\u52a1\u67b6\u6784\u7684\u4e00\u4e2a\u7528\u4e8e\u8fdc\u7a0b\u914d\u7f6e\u8bbe\u5907\u7684\u5de5\u5177\u3002  Config Server  The implementation of the Configuration service framework \nthat exposes ConfigData and allows a peer device to modify it remotely.\n\u4e00\u4e2a Configuration \u670d\u52a1\u67b6\u6784\u7684\u5de5\u5177\u3002\u7528\u4e8e\u5f00\u653e ConfigData\uff0c\u5e76\u5141\u8bb8\u5176\u4ed6\u8bbe\u5907\u8fdc\u7a0b\u4fee\u6539\u3002  Configuration service framework  Software layer that enables devices to provide remote \nconfiguration of AllJoyn service frameworks' metadata \n(ConfigData) in a session.\n\u4f7f\u8bbe\u5907\u80fd\u591f\u4e3a\u4f1a\u8bdd\u4e2d AllJoyn \u670d\u52a1\u67b6\u6784\u7684\u5143\u6570\u636e\uff08ConfigData\uff09\u63d0\u4f9b\u8fdc\u7a0b\u914d\u7f6e\u7684\u8f6f\u4ef6\u5c42\u3002  Consumer  AllJoyn application consuming services on the AllJoyn network  Device that receives the notification and has a way to notify \nuser such as a mobile phone or TV.\nAllJoyn \u7f51\u7edc\u4e2d\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u6d88\u8d39\u670d\u52a1\u3002\n\u8bbe\u5907\u6536\u5230\u901a\u77e5\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u544a\u77e5\u7528\u6237\uff0c\u5982\u624b\u673a\u548c\u7535\u89c6\u3002  Learn more  Control Panel  Collection of Widgets that allow a user to interact with a \ndevice. A control panel is defined and announced by a \nControllee; and discovered and displayed by a Controller. \nA device can have more than one, and can be defined on a \nper-language basis.\nWidgets\u7684\u96c6\u5408\uff0c\u4f7f\u7528\u6237\u53ef\u4ee5\u4e0e\u8bbe\u5907\u8fdb\u884c\u4e92\u52a8\u3002  Learn more  Controllee  An AllJoyn application that advertises its Control Panel \ninterfaces, so that other AllJoyn devices may control it.\n\u5e7f\u544a\u81ea\u5df1 Control Panel \u63a5\u53e3\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\uff0c\u6240\u4ee5\u5176\u5b83 AllJoyn \u8bbe\u5907\u80fd\u63a7\u5236\u5b83\u3002  Controller  An AllJoyn application that controls another AllJoyn device \nthat advertises its Control Panel interfaces.\n\u63a7\u5236\u5e7f\u544a\u81ea\u5df1 Control Panel \u63a5\u53e3\u5e94\u7528\u7a0b\u5e8f\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002  ControlPanelEventsListener  An interface to listen for control panel-related events. \u7528\u4e8e\u76d1\u542c\u63a7\u5236\u9762\u677f\u76f8\u5173\u4e8b\u4ef6\u7684\u63a5\u53e3\u3002  DeviceControlPanel  A specific control panel of a controllable device. \n\u67d0\u4e00\u53ef\u63a7\u5236\u8bbe\u5907\u7684\u7279\u5b9a\u63a7\u5236\u9762\u677f\u3002  DeviceEventsListener  An interface for listening to session events.\u76d1\u542c\u4f1a\u8bdd\u4e8b\u4ef6\u7684\u63a5\u53e3\u3002  Device-specific callbacks  Code provided by the OEM specific to the Controllee that \nwill handle requests from Controllers to set property values, \nto get property values and/or execute actions. Additionally, \nit can initiate a refresh on the Controller by calling the \nControl Panel service framework's appropriate functions\n\u7531 OEM \u63d0\u4f9b\u7ed9\u53d7\u63a7\u8005\u7684\u7279\u5b9a\u4ee3\u7801\uff0c\u7528\u4e8e\u5904\u7406\u63a7\u5236\u8005\u7684\u8bf7\u6c42\uff0c\u8bbe\u5b9a\u9002\u5f53\u7684\u503c\u4ee5\u6267\u884c\u64cd\u4f5c\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u80fd\u901a\u8fc7\u8c03\u7528 Control Panel \u670d\u52a1\u67b6\u6784\u7684\u76f8\u5e94\u529f\u80fd\uff0c\u5237\u65b0\u63a7\u5236\u8005\u3002  Device passcode  A secure passcode that is stored in the device's configuration \ninterface. This passcode ensures that the information being \npassed to the device, like the home Wi-Fi password is encrypted. \nThe passcode may be prepopulated by the OEM or by the end user. \nIf no value is provided, the field will default to six zeroes.\n\u4fdd\u5b58\u5728\u8bbe\u5907\u914d\u7f6e\u63a5\u53e3\u4e2d\u7684\u4e00\u4e2a\u5b89\u5168\u5bc6\u7801\u3002\u8be5\u5b89\u5168\u5bc6\u7801\u4fdd\u8bc1\u4e86\u4fe1\u606f\u88ab\u4f20\u9001\u81f3\u8bbe\u5907\uff0c\u7c7b\u4f3c\u5bb6\u4e2d WI-FI \u7684\u52a0\u5bc6\u65b9\u5f0f\u3002\u5bc6\u7801\u53ef\u4ee5\u88ab OEM \u6216 \u6700\u7ec8\u7528\u6237\u63d0\u524d\u586b\u5145\u3002\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u503c\uff0c\u90a3\u4e48\u8be5\u5b57\u6bb5\u5c06\u88ab\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u516d\u4e2a\u96f6\u3002  Learn more  Distributed AllJoyn bus  A description of the AllJoyn network topology where AllJoyn \nApplications attach to AllJoyn Routers, and AllJoyn Routers\nconnect to each other. The entire network can be described\nas the Distributed AllJoyn bus\u3002\nAllJoyn Application \u8fde\u63a5 AllJoyn Router\uff0cAllJoyn Router \u4e4b\u95f4\u5f7c\u6b64\u76f8\u8fde\u3002\u8fd9\u6837\u7684\u7f51\u7edc\u6574\u4f53\u4e0a\u88ab\u79f0\u4e3a Distributed AllJoyn \u603b\u7ebf\u3002  Event  (from system description) A message denoting that something has happened. \u4e00\u6761\u6d88\u606f\u8bf4\u660e\u67d0\u4e9b\u4e8b\u60c5\u53d1\u751f\u4e86\uff08\u6765\u81ea\u7cfb\u7edf\u63cf\u8ff0\uff09\u3002  A signal on an AllJoyn interface that contains a human readable \ndescription. The arguments may also include description fields.\nAllJoyn \u63a5\u53e3\u4e2d\u5305\u542b\u53ef\u8bfb\u63cf\u8ff0\u7684\u4fe1\u53f7\u3002\u5176\u53c2\u6570\u4e5f\u53ef\u80fd\u5305\u542b\u63cf\u8ff0\u5b57\u6bb5\u3002  Event Consumer  Application that is set up to listen for events. \u4e3a\u76d1\u542c\u4e8b\u4ef6\u5efa\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f\u3002  Event descriptor  Human-readable string attached to the event. \u4e8b\u4ef6\u9644\u5e26\u7684\u53ef\u8bfb\u5b57\u6bb5\u3002  Event-emitting device  The device that sends the event. \u53d1\u9001\u4e8b\u4ef6\u7684\u8bbe\u5907  Event Picker app  Application that lets end users program actions to take when an event is sent.\n\u5f53\u67d0\u4e2a\u4e8b\u4ef6\u88ab\u53d1\u9001\u65f6\uff0c\u8ba9\u6700\u7ec8\u7528\u6237\u7684\u7a0b\u5e8f\u6267\u884c\u64cd\u4f5c\u7684\u5e94\u7528\u7a0b\u5e8f\u3002  GUID  Globally Unique Identifier. A 128 bit identifier generated \nrandomly in a way that the probability of collision is negligible.\nGlobally Unique Identifier. \u4e00\u79cd\u968f\u673a\u751f\u6210\u7684 128 \u4f4d\u6807\u8bc6\u7b26\uff0c\u5176\u53d1\u751f\u51b2\u7a81\u7684\u53ef\u80fd\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002  IFTTT  If This Then That. A logical construct that tests for a \ncertain condition and then performs an action if it is \"true\".\nIf This Then That\uff08\u5982\u679c\u8fd9\u6837\uff0c\u90a3\u4e48\uff09\u3002\u4e00\u79cd\u903b\u8f91\u7ed3\u6784\uff0c\u5982\u679c\u5b83\u4e3a \u201ctrue\u201d\u3002\u5e76\u4e14\u7b26\u5408\u67d0\u79cd\u7279\u5b9a\u60c5\u51b5\uff0c\u90a3\u4e48\u5c31\u8fdb\u884c\u4e00\u4e2a\u64cd\u4f5c\uff0c  IoE application  See  AllJoyn App  \u67e5\u770b AllJoyn App    IoE device  A device that that is connected to Internet directly or via \nGateway. For the purpose of this document it implies the device \nthat has an AllJoyn application running on it.\n\u67d0\u4e2a\u76f4\u8fde\u6216\u8005\u901a\u8fc7\u7f51\u5173\u8fde\u63a5\u5230\u82f1\u7279\u7f51\u7684\u8bbe\u5907\u3002\u5728\u672c\u6587\u4ef6\u4e2d\u610f\u5473\u7740\u5b83\u662f\u4e00\u4e2a\u8fd0\u884c AllJoyn \u7a0b\u5e8f\u7684\u8bbe\u5907\u3002  Logical distributed software bus  See  Distributed AllJoyn bus  \u67e5\u770b  Distributed AllJoyn bus  Notification message  A message sent by a producer specifying details of the \nnotification including any notification text to be displayed to the user.\n\u4e00\u6761\u5305\u542b\u4e86\u6307\u5b9a\u7ec6\u8282\u7684\u4fe1\u606f\uff0c\u5305\u62ec\u663e\u793a\u7ed9\u7528\u6237\u7684\u901a\u77e5\u6587\u672c\u3002  Notification service framework  Software layer that enables devices to send or receive \nhuman-consumable notifications.\n\u4f7f\u8bbe\u5907\u80fd\u591f\u53d1\u9001\u548c\u63a5\u6536\u53ef\u6d88\u8d39\u901a\u77e5\u7684\u8f6f\u4ef6\u5c42\u3002  Learn more  Offboarding  The process of removing an AllJoyn device from a personal network. \nIt also removes the personal Access Point's (AP) SSID and password \nvalues from the AllJoyn device memory.\n\u5c06 AllJoyn \u8bbe\u5907\u79fb\u9664\u4e2a\u4eba\u7f51\u7edc\u7684\u8fc7\u7a0b\u3002\u540c\u65f6\u4e5f\u4ece AllJoyn \u8bbe\u5907\u5185\u5b58\u4e2d\u4f1a\u79fb\u9664\u4e2a\u4eba Access Point\uff08AP\uff09 \u7684 SSID \u548c\u5bc6\u7801\u3002  Onboardee  An application using this side of the service framework is \nknown as the Onboardee.\n\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05  An AllJoyn device that advertises that it implements the \nOnboarding interface.\n\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05  Onboarder  An application using this side of the service framework is \nknown as the Onboarder.\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05\uff05  A device, usually a handset, that is used to interact with \nthe onboardee to pass it the Wi-Fi credentials needed for \nonboarding. \u4e00\u4e2a\u8bbe\u5907\uff0c\u901a\u5e38\u662f\u4e00\u4e2a\u624b\u6301\u8bbe\u5907\uff0c\u4e0e onboardee \u8fdb\u884c\u4e92\u52a8\uff0c\u5e76\u5f97\u5230\u7528\u6765 onboard \u7684 Wi-Fi \u51ed\u636e\u3002  Onboarding Client  The implementation of the Onboarding service framework that \nremotely onboards a peer device.\nOnboarding \u670d\u52a1\u67b6\u6784\u7684\u4e00\u4e2a\u5de5\u5177\uff0c\u7528\u6765\u8fdc\u7a0b onboard \u67d0\u8bbe\u5907\u3002  OnboardingData  A structure containing the relevant network configuration \ninformation and state that controls the device's onboarding \nprocess. The details that are remotely updateable are persisted \nto some permanent storage layer such as NVRAM.\n\u5305\u542b\u76f8\u5173\u7f51\u7edc\u914d\u7f6e\u4fe1\u606f\u548c\u63a7\u5236\u8bbe\u5907 onboard \u8fdb\u7a0b\u7684\u72b6\u6001\u7684\u4e00\u79cd\u7ed3\u6784\u3002\u8fdc\u7a0b\u66f4\u65b0\u7684\u8be6\u7ec6\u4fe1\u606f\u88ab\u4fdd\u5b58\u5230\u5982 NVRAM \u4e4b\u7c7b\u7684\u6c38\u4e45\u5b58\u50a8\u5c42\u3002  OnboardingService  A module in the Onboarding service framework that is used by \nthe developer/OEM to build an application that exposes the \nability to remotely modify OnboardingData that is persisted by it.\nOnboarding \u670d\u52a1\u67b6\u6784\u4e2d\u7684\u4e00\u4e2a\u6a21\u5757\uff0c\u5f00\u53d1\u8005\uff0fOEM \u7528\u5176\u5efa\u7acb\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u6837\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u8fdc\u7a0b\u4fee\u6539\u56fa\u5316\u5728\u5176\u4e2d\u7684 OnboardingData \u7684\u80fd\u529b\u3002  Onboarding Server  The implementation of the Onboarding service framework that \nexposes OnboardingData and allows a peer device to modify it \nremotely and control the onboarding process.\nOnboarding \u670d\u52a1\u67b6\u6784\u7684\u4e00\u79cd\u5de5\u5177\u3002\u5b83\u5f00\u653e\u4e86 OnboradingData\uff0c\u5141\u8bb8\u8bbe\u5907\u8fdc\u7a0b\u4fee\u6539\u5e76\u4e14\u63a7\u5236 onboarding \u8fdb\u7a0b\u3002  Onboarding service framework  Software layer that enables devices to provide remote \nconfiguration (OnboardingData) and control (driver mode) \nover a device's onboarding process to a Wi-Fi AP over an \nAllJoyn session\u3002\n\u4e00\u79cd\u8f6f\u4ef6\u5c42\u3002\u5b83\u5141\u8bb8\u8bbe\u5907\u63d0\u4f9b\u8fdc\u7a0b\u914d\u7f6e\uff08OnboardingData\uff09\u548c\u63a7\u5236\uff08\u9a71\u52a8\u6a21\u5f0f\uff09\u8bbe\u5907\u901a\u8fc7 AllJoyn \u4f1a\u8bdd onboard \u4e00\u4e2a Wi-Fi AP \u7684\u8fdb\u7a0b\u3002  A set of capabilities that enables an AllJoyn device to \nbe brought on or removed from a user's personal network \n(onboarding/offboarding).\n\u4f7f\u8bbe\u5907\u53ef\u4ee5\u8fdb\u5165\u548c\u9000\u51fa\uff08onboarding/offboarding\uff09\u7528\u6237\u4e2a\u4eba\u7f51\u7edc\u7684\u4e00\u7ec4\u529f\u80fd\u3002  Personal AP  The target network that the end user wants the AllJoyn \ndevice to join. This is typically an end user's personal \nnetwork (personal, work, office, etc.).\n\u6700\u7ec8\u7528\u6237\u5e0c\u671b AllJoyn \u8bbe\u5907\u52a0\u5165\u7684\u76ee\u6807\u7f51\u7edc\u3002\u8fd9\u901a\u5e38\u662f\u6700\u7ec8\u7528\u6237\u7684\u4e2a\u4eba\u7f51\u7edc\uff08\u4e2a\u4eba\u3001\u5de5\u4f5c\u3001\u529e\u516c\u5ba4\u7f51\u7edc\u7b49\uff09  Producer  AllJoyn application providing services on the AllJoyn network.  Device that generates and sends the notification to a device \nsuch as a household appliance.\n\u5728 AllJoyn \u7f51\u7edc\u4e2d\u63d0\u4f9b\u670d\u52a1\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002\n\u5411\u5982\u5bb6\u5ead\u7535\u5668\u7684\u8bbe\u5907\u751f\u6210\u5e76\u53d1\u9001\u901a\u77e5\u7684 AllJoyn \u8bbe\u5907\u3002  \u4e86\u89e3\u66f4\u591a  PropertyStore  (from a thin app document) A module that maintains the default \nand runtime property values for the service frameworks.\uff08\u6839\u636e thin app document\uff09\u4e00\u79cd\u4e3a\u670d\u52a1\u67b6\u6784\u4fdd\u7559\u9ed8\u8ba4\u503c\u548c\u8fd0\u884c\u65f6\u7684\u5c5e\u6027\u503c\u7684\u6a21\u5757\u3002  A module that maintains the values returned as AboutData that \nhas been merged with the values from ConfigData.\n\u8be5\u6a21\u5757\u4fdd\u7559\u7684\u503c\u4ee5 AboutData \u7684\u5f62\u5f0f\u8fd4\u56de\uff0c\u8fd9\u65f6 AboutData \u5df2\u7ecf\u4e0e ConfigData \u7684\u503c\u5408\u5e76\u4e86\u3002  Proximal network  Refers to a network that does not include a cloud-based service\n\u4e0d\u5305\u542b\u4e91\u670d\u52a1\u7684\u7f51\u7edc  Proximal IoE network  Refers to a network that includes a cloud-based service\n\u5305\u542b\u4e91\u670d\u52a1\u7684\u7f51\u7edc  RDP  Reliable Data Protocol. An efficient reliable data transport\nservice for packet-based applications.\nReliable Data Protocol\uff08\u53ef\u9760\u6570\u636e\u534f\u8bae\uff09\u3002\u4e3a\u57fa\u4e8e\u5305\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7684\u4e00\u79cd\u9ad8\u6548\u53ef\u9760\u7684\u6570\u636e\u4f20\u8f93\u670d\u52a1\u3002  Reliable event  An event this is sent with guaranteed delivery to all interested consumers. \n\u4e00\u79cd\u4fdd\u8bc1\u4f20\u8f93\u5230\u76f8\u5173\u6d88\u8d39\u8005\u7684\u4e8b\u4ef6\u3002  Remote application  Typically, AllJoyn applications communicate with one another.\nA remote application is the peer that a particular application\nis communicating with.\n\u901a\u5e38\uff0cAllJoyn \u5e94\u7528\u7a0b\u5e8f\u4e0e\u53e6\u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u901a\u4fe1\u3002Remote application \u5c31\u662f\u6b63\u5728\u4e0e\u6b64\u5e94\u7528\u7a0b\u5e8f\u901a\u4fe1\u7684\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u3002  Rule  The pairing of an event with an action the user wants to have \noccur when a device supporting the Events interface performs \nan action defined by the OEM that warrants monitoring.\n\u67d0\u4e00\u4e8b\u4ef6\u4e0e\u7528\u6237\u5e0c\u671b\u7684\u52a8\u4f5c\u7684\u4e00\u7ec4\u5339\u914d\u5bf9\u3002\u5f53\u8bbe\u5907\u652f\u6301 Event \u63a5\u53e3\uff0c\u5e76\u901a\u8fc7 OEM \u9274\u6743\u65f6\uff0c\u5c31\u4f1a\u5b8c\u6210\u52a8\u4f5c\u3002  Security  Framework for AllJoyn applications to authenticate each other \nand send encrypted data between them.\nAllJoyn \u5e94\u7528\u7a0b\u5e8f\u7528\u4e8e\u76f8\u4e92\u9274\u6743\u5e76\u76f8\u4e92\u4f20\u9012\u52a0\u5bc6\u6570\u636e\u7684\u4e00\u79cd\u67b6\u6784\u3002  Service_Common  A module that contains code shared by multiple services, \nincluding the PropertyStore API definition.\n\u4e00\u4e2a\u5305\u542b\u4e86\u591a\u79cd\u670d\u52a1\u5171\u4eab\u7684\u4ee3\u7801\u7684\u6a21\u5757\uff0c\u5305\u62ec PropertyStore API \u7684\u5b9a\u4e49\u3002  Sessionless signal  A broadcast AllJoyn signal which is received by all devices \nlistening on the end user's home network (such as the Wi-Fi network). \nThe sessionless signals are broadcast on the network until an \nassociated time-to-live (TTL) value expires. The About feature \nsends Announcements as sessionless signals over the Wi-Fi network.\n\u4e00\u79cd\u5e7f\u64ad\u7684 AllJoyn \u4fe1\u53f7\uff0c\u53ef\u4ee5\u88ab\u6240\u6709\u5728\u6700\u7ec8\u7528\u6237\u5bb6\u5ead\u7f51\u7edc\uff08\u5982 Wi-Fi \u7f51\u7edc\uff09\u4e2d\u76d1\u542c\u7684\u8bbe\u5907\u63a5\u6536\u5230\u3002Sessionless sigal \u4f1a\u5728\u7f51\u7edc\u4e2d\u6301\u7eed\u5e7f\u64ad\uff0c\u76f4\u5230 time-to-live (TTL) \u65f6\u95f4\u8d85\u65f6\u3002About \u529f\u80fd\u901a\u8fc7 sessionless signal \u7684\u65b9\u5f0f\u5728 Wi-Fi \u7f51\u7edc\u4e2d\u53d1\u9001 Annoucement\u3002  Learn more  SoftAP  When the AllJoyn device is not connected to a Wi-Fi Access Point \n(not onboarded) it broadcasts in access point mode.\n\u5f53 AllJoyn \u8bbe\u5907\u6ca1\u6709\u8fde\u63a5\u5230 Wi-Fi Access Point\uff08\u4e0d\u5728\u7ebf\uff09\u65f6\uff0c\u5b83\u4f1a\u4ee5 access point \u6a21\u5f0f\u53d1\u9001\u5e7f\u64ad\u3002  Software-enabled Access Point that allows the device to work \nas both the AP and the client.\n\u8f6f\u4ef6\u5b9e\u73b0\u7684 Access Point \u5141\u8bb8\u8bbe\u5907\u65e2\u80fd\u5728 AP \u6a21\u5f0f\u5de5\u4f5c\uff0c\u4e5f\u80fd\u5728\u5ba2\u6237\u7aef\u6a21\u5f0f\u5de5\u4f5c\u3002  Standalone router  Contains the main progrem, liballjoyn.so, and librouter.so files.\nIt is not bundled with an AllJoyn app.\n\u5305\u542b\u4e86\u4e3b\u7a0b\u5e8f\u3001liballjoyn.so \u548c librouter.so\u3002\u5b83\u4e0d\u4e0e AllJoyn \u5e94\u7528\u7a0b\u5e8f\u7ed1\u5b9a\u3002  Standard app  AllJoyn app that uses the AllJoyn Standard Library.\n\u4f7f\u7528 AllJoyn Standard Library \u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002  Standard core  Contains the Standard library and router library\n\u5305\u542b\u4e86 Standard library \u548c router library  SYN, SYN+ACK, ACK  The kinds of segments that are involved in a three-way handshake\nconnection establishment protocol. Used in TCP and ARDP.\n\u4e09\u8def\u63e1\u624b\u5efa\u7acb\u8fde\u63a5\u534f\u8bae\u7684\u51e0\u4e2a\u90e8\u5206\u3002\u7528\u4e8e TCP \u548c ARDP\u3002  Thin app  An AllJoyn application that incorporates the AllJoyn thin core library.\n\u5305\u542b AllJoyn thin core library \u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002  Thin core  Contains the Thin library\n\u5305\u542b Thin library  Thin Library service app  AllJoyn app that exposes one set of features as part of a \npeer session. It does not correlate to a web service as the \nservice may play the role of a client at various times \n(depending on the implementation). The function of the AllJoyn \nservice is defined by the set of AllJoyn service frameworks used.\n\u4f5c\u4e3a\u4f1a\u8bdd\u7684\u4e00\u90e8\u5206\u516c\u5f00\u4e00\u7ec4\u529f\u80fd\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u4e0d\u4f1a\u5173\u8054\u5230 web \u670d\u52a1\uff0c\u56e0\u4e3a web \u670d\u52a1\u53ef\u80fd\u4f1a\u4f5c\u4e3a\u5ba2\u6237\u7aef\u591a\u6b21\u4f7f\u7528\uff08\u7531\u5de5\u5177\u800c\u5b9a\uff09\u3002AllJoyn \u670d\u52a1\u7684\u529f\u80fd\u7531\u5176\u4f7f\u7528\u7684\u4e00\u5957 AllJoyn \u670d\u52a1\u67b6\u6784\u800c\u5b9a\u3002  Translator  Callback method a developer implements in order to provide \nlanguage translations or string manipulations.  \u4e86\u89e3\u66f4\u591a  User  Has many contexts.\u6709\u5f88\u591a\u60c5\u51b5\u3002  In Events and Actions, the individual using the device that \nhas the Event Picker application installed.\n\u5728 Events and Actions \u4e2d\uff0c\u4ed6\u662f\u4f7f\u7528\u6709 Event Picker \u5e94\u7528\u7a0b\u5e8f\u7684\u8bbe\u5907\u7684\u4eba  Well-Known Name (WKN)  Well Known names are used as the basis for AllJoyn discovery \nfor announcements. Typically applications will use About\nannouncements and not the lower level Well-Known Names.\nWell Known name \u662f AllJoyn \u53d1\u73b0 annoucement \u7684\u57fa\u7840\u3002\u901a\u5e38\u5e94\u7528\u7a0b\u5e8f\u4f1a\u4f7f\u7528 About annoucement \u800c\u4e0d\u662f\u66f4\u4f4e\u7ea7\u522b\u7684 Well-Known Name\u3002  Widget  A UI element in the control panel used to represent an interface. \nIt graphically enables a user to perform a function and/or \naccess properties.\n\u63a7\u5236\u9762\u677f\u4e2d\u7684\u7528\u4e8e\u8868\u793a\u63a5\u53e3\u7684 UI \u5143\u7d20\u3002\u5b83\u4ee5\u56fe\u5f62\u7684\u65b9\u5f0f\u8c03\u7528\u8bbe\u5907\u529f\u80fd\u548c\uff0f\u6216\u8bbf\u95ee\u8bbe\u5907\u5c5e\u6027\u3002  WKN",
            "title": "Glossary \u672f\u8bed\u8868"
        },
        {
            "location": "/learn/",
            "text": "Learn\n\n\nAllJoyn\n\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u534f\u4f5c\u8f6f\u4ef6\u6846\u67b6\uff0c\u4ed6\u5141\u8bb8\u5f00\u53d1\u8005\u5f00\u53d1\u53ef\u4ee5\u53d1\u73b0\u9644\u8fd1\u8bbe\u5907\u5e76\u5efa\u7acb\u6c9f\u901a\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u4e0d\u53d7\u8bbe\u5907\u54c1\u724c\uff0c\u79cd\u7c7b\u4ee5\u53ca\u64cd\u4f5c\u7cfb\u7edf\u7684\u9650\u5236\uff0c\u4e5f\u4e0d\u9700\u7528\u5230\u4e91\u7aef\u3002AllJoyn \u6846\u67b6\u7684\u7075\u6d3b\u6027\u548c\u591a\u529f\u80fd\u6027\u53ef\u4ee5\u5c06\u7269\u8054\u7f51\u6982\u5ff5\u5e26\u5165\u73b0\u5b9e\u3002\n\n\n\u8fd1\u7aef\u7f51\u7edc\n\n\nAllJoyn \u6846\u67b6\u53ef\u4ee5\u5904\u7406\u53d1\u73b0\u9644\u8fd1\u8bbe\u5907\uff0c\u5efa\u7acb\u4f1a\u8bdd\uff0c\u5efa\u7acb\u5b89\u5168\u901a\u4fe1\u673a\u5236\u7b49\u4e00\u7cfb\u5217\u590d\u6742\u95ee\u9898\u3002\u4ed6\u63d0\u53d6\u7269\u7406\u901a\u4fe1\u7684\u7ec6\u8282\u4fe1\u606f\u5e76\u63d0\u4f9b\u7b80\u5355\u6613\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3\uff0c\u5e76\u652f\u6301\u591a\u65b9\u63a5\u5165\u4f1a\u8bdd\u7ed3\u6784\uff0c\u5305\u62ec\u7aef\u5bf9\u7aef\u4ee5\u53ca\u7fa4\u7ec4\u4f1a\u8bdd\u3002\u5b89\u5168\u67b6\u6784\u7075\u6d3b\uff0c\u652f\u6301\u591a\u79cd\u4f1a\u8bdd\u673a\u5236\u548c\u4fe1\u4efb\u6a21\u5f0f\u3002\u6570\u636e\u4f20\u8f93\u5f62\u5f0f\u7075\u6d3b\uff0c\u652f\u6301\u539f\u59cb\u5957\u63a5\u5b57\u6216\u5e26\u6709\u5df2\u5b9a\u4e49\u63a5\u53e3\uff0c\u65b9\u6cd5\uff0c\u6743\u9650\u4ee5\u53ca\u4fe1\u53f7\u7684\u865a\u62df\u5bf9\u8c61\u3002\n\n\n\u7075\u6d3b\u6027\n\n\nAllJoyn \u56fa\u6709\u7684\u7075\u6d3b\u6027\u662f\u5176\u6700\u5177\u8bc6\u522b\u5ea6\u7684\u7279\u6027\u3002 AllJoyn \u88ab\u8bbe\u8ba1\u5e94\u7528\u4e8e\u591a\u79cd\u5e73\u53f0\uff1a\u4ece\u5c0f\u578b\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5230\u5168\u529f\u80fd\u64cd\u4f5c\u7cfb\u7edf\uff0c \u5e76\u652f\u6301\u591a\u79cd\u8bed\u8a00\u7ed1\u5b9a\u548c\u4f20\u8f93\u3002\u7531\u4e8e AllJoyn \u6846\u67b6\u7684\u5f00\u6e90\u7279\u6027\uff0c\u5176\u7075\u6d3b\u6027\u53ef\u5728\u672a\u6765\u88ab\u7ee7\u7eed\u6269\u5c55\u4ee5\u652f\u6301\u66f4\u591a\u4f20\u8f93\uff0c\u7ed1\u5b9a\u548c\u5176\u4ed6\u529f\u80fd\u3002\n\n\n\n\n\u4f20\u8f93\u5c42: Wi-Fi, Ethernet, Serial, Power Line (PLC)\n\n\n\u8bed\u8a00\u7ed1\u5b9a: C, C++, Obj-C, Java\n\n\n\u64cd\u4f5c\u5e73\u53f0: RTOS, Arduino, Linux, Android, iOS, Windows, Mac\n\n\n\u5b89\u5168\u673a\u5236: peer-to-peer encryption (AES128) and authentication (PSK, ECDSA)\n\n\n\n\n\u7269\u8054\u7f51\u901a\u7528\u8bed\u8a00\n\n\n\u4e3a\u4e86\u5706\u6ee1\u5b9e\u73b0\u7269\u8054\u7f51\u6784\u60f3\uff0c\u8bbe\u5907\u548c\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u9700\u8981\u4e00\u79cd\u5e38\u7528\u65b9\u5f0f\u6765\u5b9e\u73b0\u4e92\u52a8\u548c\u4ea4\u6d41\u3002 \u6211\u4eec\u76f8\u4fe1\u8fd9\u79cd\u5e38\u7528\u65b9\u5f0f\u4f1a\u662f AllJoyn \u6846\u67b6\uff1a\u4e00\u4e2a\u5c06\u5404\u79cd\u8bbe\u5907\u4e0e\u4f17\u591a\u516c\u53f8\u9ecf\u5408\u5230\u4e00\u8d77\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fd0\u884c\u5728\u591a\u79cd\u64cd\u4f5c\u7cfb\u7edf\uff0c\u7528\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u5b9e\u73b0\u7684\u6846\u67b6\u3002\u603b\u7684\u6765\u8bf4\uff0c\u4ed6\u89e3\u51b3\u95ee\u9898\u3002 \n\n\nThe AllSeen Alliance \u4e0e\u5f00\u6e90\u793e\u533a\u534f\u540c\u4f5c\u7528\uff0c\u6b63\u5728\u5b9a\u4e49\u5e76\u4e14\u5b9e\u73b0\u5e38\u89c4\u670d\u52a1\u7684\u4ee5\u53ca\u5bf9\u5e94\u7279\u5b9a\u7528\u9014\u7684\n\u63a5\u53e3\n\u670d\u52a1\uff0c\u4f8b\u5982\n\u9996\u6b21\u63a5\u5165\u65b0\u8bbe\u5907\n, \n\u53d1\u9001\u63d0\u9192\n, \u548c\n\u8bbe\u5907\u63a7\u5236\n. \u5f00\u53d1\u8005\u53ef\u9009\u62e9\u5c06\u4ee5\u4e0a\u529f\u80fd\u96c6\u6210\u5230\u4ed6\u4eec\u7684\u4ea7\u54c1\u4e2d\uff0c\u4e14\u4e0d\u7528\u62c5\u5fc3\u4e0e\u5176\u4ed6 AllJoyn \u751f\u6001\u5708\u8bbe\u5907\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u517c\u5bb9\u95ee\u9898\u3002\n\n\n\u9664\u5e38\u89c4\u670d\u52a1\u4e0e\u63a5\u53e3\u5916\uff0c\u79c1\u5bc6\u63a5\u53e3\u4e5f\u53ef\u88ab\u5e94\u7528\u7a0b\u5e8f\u6216\u8bbe\u5907\u5b9e\u73b0\u3002\u5982\u6b64\uff0c\u5e94\u7528\u7a0b\u5e8f\u65e2\u53ef\u8c03\u7528\u5e38\u89c4\u670d\u52a1\u4e0e\u63a5\u53e3\u53c2\u4e0e AllJoyn \u5927\u751f\u6001\u5708\uff0c \u4e5f\u53ef\u901a\u8fc7 AllJoyn \u67b6\u6784\u4e0e\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u548c\u8bbe\u5907\u8fdb\u884c\u79c1\u5bc6\u4f1a\u8bdd\u3002\u8fd9\u79cd\u7075\u6d3b\u6027\u56e0 AllJoyn \u67b6\u6784\u624d\u5f97\u4ee5\u5b9e\u73b0\u3002\n\n\n\u53ef\u9009\u4e91\n\n\nAllJoyn \u67b6\u6784\u8fd0\u884c\u5728\u672c\u5730\u7f51\u7edc\uff0c\u5e76\u4e0d\u9700\u8981\u4e91\u529f\u80fd\u4ecb\u5165\u3002\u5e94\u7528\u7a0b\u5e8f\u4ee5\u53ca\u8bbe\u5907\u53ef\u8fdb\u884c\u5feb\u6377\uff0c\u5b89\u5168\u7684\u76f4\u63a5\u901a\u8bdd\u3002\u8fd9\u610f\u5473\u7740\u5f53\u8bbe\u5907\u5c31\u5728\u773c\u524d\u65f6\uff0c\u65e0\u9700\u8df3\u51fa\u5e76\u7b49\u5f85\u4e91\u5c31\u4f4d\u3002\u5982\u679c\u4e00\u5b9a\u9700\u8981\u4e91\u4ecb\u5165\uff0cAllJoyn \u67b6\u6784\u4e5f\u63d0\u4f9b\u652f\u6301\uff0c\u8fd9\u9700\u8981\u901a\u8fc7\u4e00\u4e2a\n\u7f51\u5173\u4ee3\u7406\n. \u5b89\u5168\u6027\u662f\u6b64\u67b6\u6784\u7684\u4e00\u5927\u4f18\u52bf\uff1a\u53ea\u6709\u7f51\u7ba1\u4ee3\u7406\u88ab\u76f4\u8fde\u5230\u4e92\u8054\u7f51\uff0c\u8fd9\u51cf\u5c11\u4e86\u8fde\u63a5\u5230\u4e92\u8054\u7f51\u7684\u8bbe\u5907\u6570\u91cf\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u653b\u51fb\u9762\u3002\n\n\n\u751f\u957f\u6027\n\n\n\u4f5c\u4e3a\u4e00\u4e2a\u534f\u4f5c\u5f00\u6e90\u9879\u76ee\uff0c AllSeen \u751f\u6001\u7cfb\u7edf\u5728\u4e0d\u65ad\u751f\u957f\u8fdb\u5316\u3002\u4f34\u968f\u6bcf\u4e00\u6b21\u7248\u672c\u66f4\u65b0\u8d8a\u6765\u8d8a\u591a\u7684\u516c\u5171\u670d\u52a1\u88ab\u6dfb\u52a0\u8fdb\u6765\uff0c\u5305\u62ec\u5bf9\u591a\u79cd\u5e73\u53f0\u7684\u5b9e\u73b0\u3002AllSean \u7684\u52bf\u5934\u5f3a\u5927\uff0c\u4f34\u968f\u7740\u4f60\u4eec\u7684\u5e2e\u52a9 AllJoyn \u67b6\u6784\u4f1a\u6210\u4e3a\u975e\u5e38\u6d41\u884c\u7684\u7269\u8054\u7f51\u8bed\u8a00\u3002\n\n\n\u4e0b\u4e00\u6b65\n\n\n\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\n\u7528\u4f8b\n \u7684\u77e5\u8bc6\u3002 \u7136\u540e\u8df3\u8f6c\u5230\u5173\u4e8e\u603b\u4f53\n\u7ed3\u6784\n, \n\u6838\u5fc3\u6846\u67b6\n, \u4ee5\u53ca \n\u57fa\u7840\u670d\u52a1\n.",
            "title": "Home"
        },
        {
            "location": "/learn/#learn",
            "text": "AllJoyn \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u534f\u4f5c\u8f6f\u4ef6\u6846\u67b6\uff0c\u4ed6\u5141\u8bb8\u5f00\u53d1\u8005\u5f00\u53d1\u53ef\u4ee5\u53d1\u73b0\u9644\u8fd1\u8bbe\u5907\u5e76\u5efa\u7acb\u6c9f\u901a\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u4e0d\u53d7\u8bbe\u5907\u54c1\u724c\uff0c\u79cd\u7c7b\u4ee5\u53ca\u64cd\u4f5c\u7cfb\u7edf\u7684\u9650\u5236\uff0c\u4e5f\u4e0d\u9700\u7528\u5230\u4e91\u7aef\u3002AllJoyn \u6846\u67b6\u7684\u7075\u6d3b\u6027\u548c\u591a\u529f\u80fd\u6027\u53ef\u4ee5\u5c06\u7269\u8054\u7f51\u6982\u5ff5\u5e26\u5165\u73b0\u5b9e\u3002",
            "title": "Learn"
        },
        {
            "location": "/learn/#_1",
            "text": "AllJoyn \u6846\u67b6\u53ef\u4ee5\u5904\u7406\u53d1\u73b0\u9644\u8fd1\u8bbe\u5907\uff0c\u5efa\u7acb\u4f1a\u8bdd\uff0c\u5efa\u7acb\u5b89\u5168\u901a\u4fe1\u673a\u5236\u7b49\u4e00\u7cfb\u5217\u590d\u6742\u95ee\u9898\u3002\u4ed6\u63d0\u53d6\u7269\u7406\u901a\u4fe1\u7684\u7ec6\u8282\u4fe1\u606f\u5e76\u63d0\u4f9b\u7b80\u5355\u6613\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3\uff0c\u5e76\u652f\u6301\u591a\u65b9\u63a5\u5165\u4f1a\u8bdd\u7ed3\u6784\uff0c\u5305\u62ec\u7aef\u5bf9\u7aef\u4ee5\u53ca\u7fa4\u7ec4\u4f1a\u8bdd\u3002\u5b89\u5168\u67b6\u6784\u7075\u6d3b\uff0c\u652f\u6301\u591a\u79cd\u4f1a\u8bdd\u673a\u5236\u548c\u4fe1\u4efb\u6a21\u5f0f\u3002\u6570\u636e\u4f20\u8f93\u5f62\u5f0f\u7075\u6d3b\uff0c\u652f\u6301\u539f\u59cb\u5957\u63a5\u5b57\u6216\u5e26\u6709\u5df2\u5b9a\u4e49\u63a5\u53e3\uff0c\u65b9\u6cd5\uff0c\u6743\u9650\u4ee5\u53ca\u4fe1\u53f7\u7684\u865a\u62df\u5bf9\u8c61\u3002",
            "title": "\u8fd1\u7aef\u7f51\u7edc"
        },
        {
            "location": "/learn/#_2",
            "text": "AllJoyn \u56fa\u6709\u7684\u7075\u6d3b\u6027\u662f\u5176\u6700\u5177\u8bc6\u522b\u5ea6\u7684\u7279\u6027\u3002 AllJoyn \u88ab\u8bbe\u8ba1\u5e94\u7528\u4e8e\u591a\u79cd\u5e73\u53f0\uff1a\u4ece\u5c0f\u578b\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5230\u5168\u529f\u80fd\u64cd\u4f5c\u7cfb\u7edf\uff0c \u5e76\u652f\u6301\u591a\u79cd\u8bed\u8a00\u7ed1\u5b9a\u548c\u4f20\u8f93\u3002\u7531\u4e8e AllJoyn \u6846\u67b6\u7684\u5f00\u6e90\u7279\u6027\uff0c\u5176\u7075\u6d3b\u6027\u53ef\u5728\u672a\u6765\u88ab\u7ee7\u7eed\u6269\u5c55\u4ee5\u652f\u6301\u66f4\u591a\u4f20\u8f93\uff0c\u7ed1\u5b9a\u548c\u5176\u4ed6\u529f\u80fd\u3002   \u4f20\u8f93\u5c42: Wi-Fi, Ethernet, Serial, Power Line (PLC)  \u8bed\u8a00\u7ed1\u5b9a: C, C++, Obj-C, Java  \u64cd\u4f5c\u5e73\u53f0: RTOS, Arduino, Linux, Android, iOS, Windows, Mac  \u5b89\u5168\u673a\u5236: peer-to-peer encryption (AES128) and authentication (PSK, ECDSA)",
            "title": "\u7075\u6d3b\u6027"
        },
        {
            "location": "/learn/#_3",
            "text": "\u4e3a\u4e86\u5706\u6ee1\u5b9e\u73b0\u7269\u8054\u7f51\u6784\u60f3\uff0c\u8bbe\u5907\u548c\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u9700\u8981\u4e00\u79cd\u5e38\u7528\u65b9\u5f0f\u6765\u5b9e\u73b0\u4e92\u52a8\u548c\u4ea4\u6d41\u3002 \u6211\u4eec\u76f8\u4fe1\u8fd9\u79cd\u5e38\u7528\u65b9\u5f0f\u4f1a\u662f AllJoyn \u6846\u67b6\uff1a\u4e00\u4e2a\u5c06\u5404\u79cd\u8bbe\u5907\u4e0e\u4f17\u591a\u516c\u53f8\u9ecf\u5408\u5230\u4e00\u8d77\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fd0\u884c\u5728\u591a\u79cd\u64cd\u4f5c\u7cfb\u7edf\uff0c\u7528\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u5b9e\u73b0\u7684\u6846\u67b6\u3002\u603b\u7684\u6765\u8bf4\uff0c\u4ed6\u89e3\u51b3\u95ee\u9898\u3002   The AllSeen Alliance \u4e0e\u5f00\u6e90\u793e\u533a\u534f\u540c\u4f5c\u7528\uff0c\u6b63\u5728\u5b9a\u4e49\u5e76\u4e14\u5b9e\u73b0\u5e38\u89c4\u670d\u52a1\u7684\u4ee5\u53ca\u5bf9\u5e94\u7279\u5b9a\u7528\u9014\u7684 \u63a5\u53e3 \u670d\u52a1\uff0c\u4f8b\u5982 \u9996\u6b21\u63a5\u5165\u65b0\u8bbe\u5907 ,  \u53d1\u9001\u63d0\u9192 , \u548c \u8bbe\u5907\u63a7\u5236 . \u5f00\u53d1\u8005\u53ef\u9009\u62e9\u5c06\u4ee5\u4e0a\u529f\u80fd\u96c6\u6210\u5230\u4ed6\u4eec\u7684\u4ea7\u54c1\u4e2d\uff0c\u4e14\u4e0d\u7528\u62c5\u5fc3\u4e0e\u5176\u4ed6 AllJoyn \u751f\u6001\u5708\u8bbe\u5907\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u517c\u5bb9\u95ee\u9898\u3002  \u9664\u5e38\u89c4\u670d\u52a1\u4e0e\u63a5\u53e3\u5916\uff0c\u79c1\u5bc6\u63a5\u53e3\u4e5f\u53ef\u88ab\u5e94\u7528\u7a0b\u5e8f\u6216\u8bbe\u5907\u5b9e\u73b0\u3002\u5982\u6b64\uff0c\u5e94\u7528\u7a0b\u5e8f\u65e2\u53ef\u8c03\u7528\u5e38\u89c4\u670d\u52a1\u4e0e\u63a5\u53e3\u53c2\u4e0e AllJoyn \u5927\u751f\u6001\u5708\uff0c \u4e5f\u53ef\u901a\u8fc7 AllJoyn \u67b6\u6784\u4e0e\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u548c\u8bbe\u5907\u8fdb\u884c\u79c1\u5bc6\u4f1a\u8bdd\u3002\u8fd9\u79cd\u7075\u6d3b\u6027\u56e0 AllJoyn \u67b6\u6784\u624d\u5f97\u4ee5\u5b9e\u73b0\u3002",
            "title": "\u7269\u8054\u7f51\u901a\u7528\u8bed\u8a00"
        },
        {
            "location": "/learn/#_4",
            "text": "AllJoyn \u67b6\u6784\u8fd0\u884c\u5728\u672c\u5730\u7f51\u7edc\uff0c\u5e76\u4e0d\u9700\u8981\u4e91\u529f\u80fd\u4ecb\u5165\u3002\u5e94\u7528\u7a0b\u5e8f\u4ee5\u53ca\u8bbe\u5907\u53ef\u8fdb\u884c\u5feb\u6377\uff0c\u5b89\u5168\u7684\u76f4\u63a5\u901a\u8bdd\u3002\u8fd9\u610f\u5473\u7740\u5f53\u8bbe\u5907\u5c31\u5728\u773c\u524d\u65f6\uff0c\u65e0\u9700\u8df3\u51fa\u5e76\u7b49\u5f85\u4e91\u5c31\u4f4d\u3002\u5982\u679c\u4e00\u5b9a\u9700\u8981\u4e91\u4ecb\u5165\uff0cAllJoyn \u67b6\u6784\u4e5f\u63d0\u4f9b\u652f\u6301\uff0c\u8fd9\u9700\u8981\u901a\u8fc7\u4e00\u4e2a \u7f51\u5173\u4ee3\u7406 . \u5b89\u5168\u6027\u662f\u6b64\u67b6\u6784\u7684\u4e00\u5927\u4f18\u52bf\uff1a\u53ea\u6709\u7f51\u7ba1\u4ee3\u7406\u88ab\u76f4\u8fde\u5230\u4e92\u8054\u7f51\uff0c\u8fd9\u51cf\u5c11\u4e86\u8fde\u63a5\u5230\u4e92\u8054\u7f51\u7684\u8bbe\u5907\u6570\u91cf\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u653b\u51fb\u9762\u3002",
            "title": "\u53ef\u9009\u4e91"
        },
        {
            "location": "/learn/#_5",
            "text": "\u4f5c\u4e3a\u4e00\u4e2a\u534f\u4f5c\u5f00\u6e90\u9879\u76ee\uff0c AllSeen \u751f\u6001\u7cfb\u7edf\u5728\u4e0d\u65ad\u751f\u957f\u8fdb\u5316\u3002\u4f34\u968f\u6bcf\u4e00\u6b21\u7248\u672c\u66f4\u65b0\u8d8a\u6765\u8d8a\u591a\u7684\u516c\u5171\u670d\u52a1\u88ab\u6dfb\u52a0\u8fdb\u6765\uff0c\u5305\u62ec\u5bf9\u591a\u79cd\u5e73\u53f0\u7684\u5b9e\u73b0\u3002AllSean \u7684\u52bf\u5934\u5f3a\u5927\uff0c\u4f34\u968f\u7740\u4f60\u4eec\u7684\u5e2e\u52a9 AllJoyn \u67b6\u6784\u4f1a\u6210\u4e3a\u975e\u5e38\u6d41\u884c\u7684\u7269\u8054\u7f51\u8bed\u8a00\u3002",
            "title": "\u751f\u957f\u6027"
        },
        {
            "location": "/learn/#_6",
            "text": "\u4e86\u89e3\u66f4\u591a\u5173\u4e8e \u7528\u4f8b  \u7684\u77e5\u8bc6\u3002 \u7136\u540e\u8df3\u8f6c\u5230\u5173\u4e8e\u603b\u4f53 \u7ed3\u6784 ,  \u6838\u5fc3\u6846\u67b6 , \u4ee5\u53ca  \u57fa\u7840\u670d\u52a1 .",
            "title": "\u4e0b\u4e00\u6b65"
        },
        {
            "location": "/learn/use-cases/",
            "text": "Use Cases\n\n\nUse Cases will be added very soon. Stay tuned!",
            "title": "Use cases"
        },
        {
            "location": "/learn/use-cases/#use-cases",
            "text": "Use Cases will be added very soon. Stay tuned!",
            "title": "Use Cases"
        },
        {
            "location": "/learn/base-services/",
            "text": "Base Services \u57fa\u7840\u670d\u52a1\n\n\nBase Services are common services used by many devices, providing a \nset of interfaces for different devices to interact and interoperate\nwith one another. Below are the currently supported base services. \nThis list will continue to expand as more contributions are made to \nthe AllSeen Alliance project.\n\u57fa\u7840\u670d\u52a1\u662f\u8bb8\u591a\u8bbe\u5907\u4f7f\u7528\u7684\u5e38\u7528\u670d\u52a1\uff0c\u4e3a\u4e0d\u540c\u8bbe\u5907\u95f4\u4e92\u52a8\u548c\u4e92\u64cd\u4f5c\u63d0\u4f9b\u4e86\u4e00\u5957\u63a5\u53e3\u3002\u4e0b\u65b9\u5217\u51fa\u4e86\u76ee\u524d\u652f\u6301\u7684\u57fa\u7840\u670d\u52a1\u3002\u968f\u7740 AllSeen Alliance \u7684\u4e0d\u65ad\u53d1\u5c55\uff0c\u8be5\u5217\u8868\u5c06\u4f1a\u6301\u7eed\u6269\u5c55\u3002\n\n\n\n\n\n\nOnboarding\n. Provide a consistent way to bring a new device onto \n  the Wi-Fi network. \u89c4\u5b9a\u4e86\u5c06\u65b0\u8bbe\u5907\u63a5\u5165 Wi-Fi \u7f51\u7edc\u7684\u7edf\u4e00\u65b9\u5f0f\u3002\n\n\n\n\n\n\nConfiguration\n. Allows one to configure certain attributes of \n  an application/device, such as its friendly name. \u5141\u8bb8\u7528\u6237\u914d\u7f6e\u67d0\u4e00\u5e94\u7528\u6216\u8bbe\u5907\u7684\u7279\u5b9a\u5c5e\u6027\uff0c\u5982\u5b83\u7684\u53cb\u597d\u540d\u79f0\u3002\n\n\n\n\n\n\nNotification\n. Allows text-based notifications to be sent and \n  received by devices on the AllJoyn\n network. Also supports audio and images\n  via URLs. \u63d0\u4f9b\u5728 AllJoyn\ntrade \u4e2d\u8bbe\u5907\u95f4\u6536\u53d1\u57fa\u4e8e\u6587\u672c\u7684\u901a\u77e5\u4fe1\u606f\u7684\u529f\u80fd\u3002\n\n\n\n\n\n\nControl Panel\n. Allows devices to advertise a virtual control\n  panel to be controlled remotely. \u4e3a\u8bbe\u5907\u63d0\u4f9b\u4e86\u4e00\u5957\u865a\u62df\u7684\u63a7\u5236\u9762\u677f\uff0c\u4f7f\u5176\u53ef\u4ee5\u88ab\u8fdc\u7a0b\u63a7\u5236\u3002\n\n\n\n\n\n\nAudio Streaming\n. Allows for synchronized audio playback on one or many Sinks. \u63d0\u4f9b\u4e86\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u6e90\u540c\u6b65\u64ad\u653e\u97f3\u9891\u7684\u529f\u80fd\u3002",
            "title": "Home"
        },
        {
            "location": "/learn/base-services/#base-services",
            "text": "Base Services are common services used by many devices, providing a \nset of interfaces for different devices to interact and interoperate\nwith one another. Below are the currently supported base services. \nThis list will continue to expand as more contributions are made to \nthe AllSeen Alliance project.\n\u57fa\u7840\u670d\u52a1\u662f\u8bb8\u591a\u8bbe\u5907\u4f7f\u7528\u7684\u5e38\u7528\u670d\u52a1\uff0c\u4e3a\u4e0d\u540c\u8bbe\u5907\u95f4\u4e92\u52a8\u548c\u4e92\u64cd\u4f5c\u63d0\u4f9b\u4e86\u4e00\u5957\u63a5\u53e3\u3002\u4e0b\u65b9\u5217\u51fa\u4e86\u76ee\u524d\u652f\u6301\u7684\u57fa\u7840\u670d\u52a1\u3002\u968f\u7740 AllSeen Alliance \u7684\u4e0d\u65ad\u53d1\u5c55\uff0c\u8be5\u5217\u8868\u5c06\u4f1a\u6301\u7eed\u6269\u5c55\u3002    Onboarding . Provide a consistent way to bring a new device onto \n  the Wi-Fi network. \u89c4\u5b9a\u4e86\u5c06\u65b0\u8bbe\u5907\u63a5\u5165 Wi-Fi \u7f51\u7edc\u7684\u7edf\u4e00\u65b9\u5f0f\u3002    Configuration . Allows one to configure certain attributes of \n  an application/device, such as its friendly name. \u5141\u8bb8\u7528\u6237\u914d\u7f6e\u67d0\u4e00\u5e94\u7528\u6216\u8bbe\u5907\u7684\u7279\u5b9a\u5c5e\u6027\uff0c\u5982\u5b83\u7684\u53cb\u597d\u540d\u79f0\u3002    Notification . Allows text-based notifications to be sent and \n  received by devices on the AllJoyn  network. Also supports audio and images\n  via URLs. \u63d0\u4f9b\u5728 AllJoyn trade \u4e2d\u8bbe\u5907\u95f4\u6536\u53d1\u57fa\u4e8e\u6587\u672c\u7684\u901a\u77e5\u4fe1\u606f\u7684\u529f\u80fd\u3002    Control Panel . Allows devices to advertise a virtual control\n  panel to be controlled remotely. \u4e3a\u8bbe\u5907\u63d0\u4f9b\u4e86\u4e00\u5957\u865a\u62df\u7684\u63a7\u5236\u9762\u677f\uff0c\u4f7f\u5176\u53ef\u4ee5\u88ab\u8fdc\u7a0b\u63a7\u5236\u3002    Audio Streaming . Allows for synchronized audio playback on one or many Sinks. \u63d0\u4f9b\u4e86\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u6e90\u540c\u6b65\u64ad\u653e\u97f3\u9891\u7684\u529f\u80fd\u3002",
            "title": "Base Services \u57fa\u7840\u670d\u52a1"
        },
        {
            "location": "/learn/base-services/audiostreaming/",
            "text": "Audio Streaming\n\n\nThe AllJoyn\n Audio service framework is a full-feature implementation\nusing the AllJoyn framework that allows for synchronized audio playback on\none or many Sinks. An application using the Audio service framework can\ndiscover nearby Sinks and by adding them have the ability to stream audio\n(PCM data) by calling a single command to play on all added Sinks. The\nservice provides controls to pause, stop, play, volume up/down, and mute.\n\n\nConcepts and Terminology\n\n\nSink and Source\n\n\nTwo roles exist:\n\n Sink. This is who receives the raw audio data.\n\n Source. This is who sends the raw audio data.\n\n\nHow Does It Work?\n\n\nThe Audio Service framework uses the interfaces standardized in this\nsoftware framework in order to move PCM data to each device. When PCM\ndata is sent is is done so via an AllJoyn Signal. The Source will form\na point-to-point session with each Sink that it wishes to send audio.\nIt will then send a Signal on each session that includes the audio\ndata chunk and a timestamp. The timestamp is used to provide an simple\nsynchronization between the multiple speakers.\n\n\nPrior to being able to send audio, a Source must first tell the Sink\nthe details of the audio that it wishes to send. The Source is\nresponsible for requesting the capabilities of each Sink in addition\nto the FIFO size. The Source then prefills the FIFO and starts the\nprocess of sending more data chunks as the song plays.\n\n\nWhen media and volume controls are used the function on a separate\nAllJoyn Interface for each respective part. For example, volume control\non a Sink specifies the current volume via an AllJoyn Property that is\nread/write and a volume range represented by a structure that defines\nthe max, min, and step values.\n\n\nIn addition to providing the audio data a Source can provide the audio\nmetadata. For example the icon, album, artist, and/or track name.\nDoing this allows for a Sink, if capable, to display the content.\nThe metadata is optional and not mandatory to a Source application.\n\n\nLearn More\n\n\n\n\nLearn more about the Audio Streaming Interface Definition\n\n\nDownload the SDK\n and \nbuild\n\n\nLearn more about the APIs",
            "title": "Home"
        },
        {
            "location": "/learn/base-services/audiostreaming/#audio-streaming",
            "text": "The AllJoyn  Audio service framework is a full-feature implementation\nusing the AllJoyn framework that allows for synchronized audio playback on\none or many Sinks. An application using the Audio service framework can\ndiscover nearby Sinks and by adding them have the ability to stream audio\n(PCM data) by calling a single command to play on all added Sinks. The\nservice provides controls to pause, stop, play, volume up/down, and mute.",
            "title": "Audio Streaming"
        },
        {
            "location": "/learn/base-services/audiostreaming/#concepts-and-terminology",
            "text": "Sink and Source  Two roles exist:  Sink. This is who receives the raw audio data.  Source. This is who sends the raw audio data.",
            "title": "Concepts and Terminology"
        },
        {
            "location": "/learn/base-services/audiostreaming/#how-does-it-work",
            "text": "The Audio Service framework uses the interfaces standardized in this\nsoftware framework in order to move PCM data to each device. When PCM\ndata is sent is is done so via an AllJoyn Signal. The Source will form\na point-to-point session with each Sink that it wishes to send audio.\nIt will then send a Signal on each session that includes the audio\ndata chunk and a timestamp. The timestamp is used to provide an simple\nsynchronization between the multiple speakers.  Prior to being able to send audio, a Source must first tell the Sink\nthe details of the audio that it wishes to send. The Source is\nresponsible for requesting the capabilities of each Sink in addition\nto the FIFO size. The Source then prefills the FIFO and starts the\nprocess of sending more data chunks as the song plays.  When media and volume controls are used the function on a separate\nAllJoyn Interface for each respective part. For example, volume control\non a Sink specifies the current volume via an AllJoyn Property that is\nread/write and a volume range represented by a structure that defines\nthe max, min, and step values.  In addition to providing the audio data a Source can provide the audio\nmetadata. For example the icon, album, artist, and/or track name.\nDoing this allows for a Sink, if capable, to display the content.\nThe metadata is optional and not mandatory to a Source application.",
            "title": "How Does It Work?"
        },
        {
            "location": "/learn/base-services/audiostreaming/#learn-more",
            "text": "Learn more about the Audio Streaming Interface Definition  Download the SDK  and  build  Learn more about the APIs",
            "title": "Learn More"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/",
            "text": "Audio Interface Definition\n\n\nRelease History\n\n\n\n\n\n\n\n\nRelease version\n\n\nDate\n\n\nWhat changed\n\n\n\n\n\n\n\n\n\n\nPre-14.06\n\n\nN/A\n\n\nThe following interfaces were added:\nStream interface version 1\nStream.Port interface version 1\nStream.Port.AudioSource interface version 1\nStream.Port.AudioSink interface version 1\nStream.Port.ImageSource interface version 1\nStream.Port.ImageSink interface version 1\nStream.Port.Application.MetadataSource interface version 1\nStream.Port.Application.MetadataSink interface version 1\nStream.Clock interface version 1\n\n\n\n\n\n\n14.06\n\n\n6/30/2014\n\n\nNo updates\n\n\n\n\n\n\n14.06 Update 1\n\n\n9/29/2014\n\n\nUpdated the document title and Overview chapter title (changed Specification to Definition).\nAdded the release version number to the document title for version tracking.\nAdded a note in the Definition Overview chapter to address the AllSeen Alliance Compliance and Certification program.\nAdded a Mandatory column for method and signal parameters to support the AllSeen Alliance Compliance and Certification program.\nIncluded the object path for each interface.\nAdded the Close method to the Stream interface.\nUpdated the following data points:\nConnect method's path parameter signature (o)\nPause method's parameter name (timeNanos)\nFlush method's input parameter name and specified output parameter name (numBytesFlushed)\nData signal's parameter name (bytes) for the AudioSource and ImageSource interfaces\nData signal's parameter name (dictionary) for the MetadataSource interface\nAdjustTime method parameter name (adjustNanos)\nSeparated the following interfaces to address the information unique to the relevant Sink and Source interfaces:\nStream.Port.Audio\nStream.Port.Image\nStream.Port.ApplicationMetadata\nUpdated the Introspection XML to reflect the Control.Volume output.\n\n\n\n\n\n\n14.12\n\n\n12/17/2014\n\n\nCleanup to make requirements for methods and signals more clear.\n\n\n\n\n\n\n\n\nDefinition Overview\n\n\nA stream consists of one or more elementary streams; an \nelementary stream consists of one type of media (audio, \nimage, or metadata).\n\n\nNOTE:\n All methods and signals are considered mandatory to \nsupport the AllSeen Alliance Compliance and Certification \nprogram. \n\n\nStream Object\n\n\nA stream object is a BusObject implementing the \norg.alljoyn.Stream\n \ninterface. It has one child port object for each elementary stream. \nA port object is a BusObject implementing the \norg.alljoyn.Stream.Port\n \ninterface and one of the media type-specific port interfaces \n(\norg.alljoyn.Stream.Port.AudioSink\n, etc.). Port objects send or \nreceive elementary streams.\n\n\nExample objects and interfaces used by a speaker\n\n\n\n\n/Speaker/In is a stream object\n\n\n/Speaker/In/Audio, /Speaker/In/Image, and /Speaker/In/Metadata \nare child port objects.\n\n\n\n\n\n\n\n\n\n\nObject path\n\n\nInterfaces implemented\n\n\n\n\n\n\n\n\n\n\n/Speaker/In\n\n\norg.alljoyn.Stream\n\n\n\n\n\n\n/Speaker/In/Audio\n\n\norg.alljoyn.Stream.Port\norg.alljoyn.Stream.Port.AudioSink\n\n\n\n\n\n\n/Speaker/In/Image\n\n\norg.alljoyn.Stream.Port\norg.alljoyn.Stream.Port.ImageSink\n\n\n\n\n\n\n/Speaker/In/Metadata\n\n\norg.alljoyn.Stream.Port\norg.alljoyn.Stream.Port.Application.MetadataSink\n\n\n\n\n\n\n\n\nExample objects and interfaces used by a media player\n\n\n\n\n\n\n\n\nObject path\n\n\nInterfaces implemented\n\n\n\n\n\n\n\n\n\n\n/Player/Out\n\n\norg.alljoyn.Stream\n\n\n\n\n\n\n/Player/Out/Audio\n\n\norg.alljoyn.Stream.Port\norg.alljoyn.Stream.Port.AudioSource\n\n\n\n\n\n\n/Player/Out/Image\n\n\norg.alljoyn.Stream.Port\norg.alljoyn.Stream.Port.ImageSource\n\n\n\n\n\n\n/Player/Out/Metadata\n\n\norg.alljoyn.Stream.Port\norg.alljoyn.Stream.Port.Application.MetadataSource\n\n\n\n\n\n\n\n\nThe following figure illustrates how source ports are connect \nto sink ports to enable streaming.\n\n\n\n\nFigure:\n Connected media player and speaker\n\n\nTypical Stream Flows\n\n\nOne source and one sink\n\n\nThe following figure illustrates a typical call flow for one \nsource and one sink.\n\n\n\n\nFigure:\n Typical call flow for one source and one sink\n\n\nOne source and two sinks\n\n\nThe following figure illustrates the typical call flow for one \nsource and two sinks.\n\n\n\n\nFigure:\n Typical call flow for one source and two sinks\n\n\nDiscovery\n\n\nTo be discovered by interested client applications on other \ndevices, an audio implementation advertises its existence \nusing the About feature. See the \nAbout Feature Interface \nDefinition\n for more information.\n\n\nBusObject paths\n\n\nImplementations of audio should publish the object paths of the \nBusObjects that implement \norg.alljoyn.Stream\n and the object paths \nof BusObjects that implement the \norg.alljoyn.Stream.Port\n interfaces \nusing the \norg.alljoyn.About\n interface. See \nExample objects and interfaces used by a speaker\n \nand \nExample objects and interfaces used by a media player\n \nfor examples of published BusObjects.\n\n\nSession port value\n\n\nIn addition to the object paths, the implementation should also \npublish the session port value that the service uses to listen \nfor incoming client connections. Use this port value in the \"port\" \nparameter of the \norg.alljoyn.About.Announce\n signal.\n\n\nStream Interface\n\n\nThe Stream interface is responsible for stream creation and \ncontrol over a stream's ports.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Stream\n\n\n1\n\n\nno\n\n\nAny object path\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-Only\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\nThe following methods are exposed by a BusObject that implements \nthe \norg.alljoyn.Stream\n interface.\n\n\nOpen\n\n\nReturns an error if not implemented or called more than once.\n\n\nMessage arguments\n\n\nNone.\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nOpen the stream.\n\n\nClose\n\n\nReturns an error if not implemented or called more than once.\n\n\nMessage arguments\n\n\nNone.\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nClose the stream.\n\n\nStream.Port Interface\n\n\nThe Stream.Port interface is responsible for control over an \nelementary stream. A port object implements this interface \ntogether with a media-specific port interface such as Stream.Port.AudioSource \nor Stream.Port.AudioSink.\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Stream.Port\n\n\n1\n\n\nno\n\n\nChild node of node implementing the Stream interface.\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\nDirection\n\n\ny\n\n\n0 - sink\n1 - source\n\n\nRead-only\n\n\nIndicates if this port is a source or sink port.\nSource ports send elementary streams, sink ports receive them.\n\n\n\n\n\n\nCapabilities\n\n\na(sa{sv})\n\n\nSee \nMedia Types\n for more information.\n\n\nRead-only\n\n\nDefines the supported capabilities of this port.\nThe capabilities of unknown media types should be ignored.\n\n\n\n\n\n\n\n\nMethods\n\n\nThe following methods are exposed by a BusObject that implements \nthe \norg.alljoyn.Stream.Port\n interface.\n\n\nConnect('so(sa{sv})')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nhost\n\n\ns\n\n\nAllJoyn name\n\n\nThe AllJoyn\n name of the remote stream port host to connect to.\n\n\n\n\n\n\n1\n\n\npath\n\n\no\n\n\nObject path\n\n\nThe AllJoyn object path of the remote port on the host to connect to.\n\n\n\n\n\n\n2\n\n\nconfiguration\n\n\n(sa{sv})\n\n\nSee \nMedia Types\n\n\nA media type and the values to configure its parameters with.\n\n\n\n\n\n\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nConnects this port to a remote port and configures the ports to \nsend or receive an elementary stream.\n\n\nIf the configuration is not compatible with the capabilities, \nthis method should return an error.\n\n\nIf this port is already connected to the remote port, this \nmethod should return an error. To reconfigure a connected port, \nfirst close the stream, then open and connect with the new configuration.\n\n\nSignals\n\n\nThe following signals are emitted by a BusObject that implements \nthe \norg.alljoyn.Stream.Port\n interface.\n\n\nOwnershipLost('s')\n\n\nOwnershipLost signal is not a Sessionless signal.\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nnewOwner\n\n\ns\n\n\nA String\n\n\nAllJoyn name of the new remote port.\n\n\n\n\n\n\n\n\nDescription\n\n\nThe port emits this signal to the currently connected remote \nport when it connects to a new remote port.\n\n\nStream.Port.Audio Interfaces\n\n\nThe Stream.Port.AudioSource and Stream.Port.AudioSink interfaces \ndefine the data format for audio/\n media. The interfaces are \nimplemented by port objects that support audio/\n capabilities.\n\n\nFIFO control\n\n\nAn audio sink exposes a FIFO to receive streamed data from an \naudio source. Control of the FIFO is implemented as a state machine. \nThe following figure illustrates the states of the FIFO.\n\n\n\n\nFigure:\n Audio sink diagram\n\n\nFilling an audio sink's FIFO is accomplished using the Data \nsignal, FifoSize and FifoPosition properties, and FifoPositionChanged \nsignal. On receipt of each FifoPositionChanged signal, the audio \nsource can send (FifoSize - FifoPosition) more bytes of data. \nThe audio source should not send more than this; doing so can \nlead to blocking the receipt of other BusMethods and BusSignals \nby the audio sink, or the audio sink discarding the data.\n\n\nUse the Flush method to tell the audio sink to discard all the \ndata in its FIFO in preparation for new data.\n\n\nSynchronization\n\n\nIf an audio sink supports synchronized playback (by implementing \nthe Stream.Clock interface), use the timestamp parameter of the \nData signal to determine the correct time to render the data. \nThe audio source computes a timestamp sufficient to ensure that \nit is greater than the network latency plus the rendering latency \nof each audio sink. Audio sinks should discard data that cannot \nbe rendered in time.\n\n\nStream.Port.AudioSink interface\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Stream.Port.AudioSink\n\n\n1\n\n\nno\n\n\nChild node of node implementing the Stream interface.\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\nFifoSize\n\n\nu\n\n\nSize in bytes\n\n\nRead-only\n\n\nThe size of the sink's FIFO in bytes. The size in samples may be computed from the configured Channels, Format, and Rate.\n\n\n\n\n\n\nFifiPosition\n\n\nu\n\n\nPosition in bytes\n\n\nRead-only\n\n\nThe current position of the FIFO in bytes. Bytes read from this position are submitted to the audio device.\n\n\n\n\n\n\nDelay\n\n\n(uu)\n\n\nPosition in bytes\nSize in bytes\n\n\nRead-only\n\n\nUse the sum of these values and the configured Channels, Format, and Rate properties to compute the delay in seconds from when a sample is received to when it is heard.\nThe first value is FifoPosition.\nThe second value is the size of the audio device's FIFO in bytes.\n\n\n\n\n\n\nPlayState\n\n\ny\n\n\n0 - idle\n1 - playing\n2 - paused\n\n\nRead-only\n\n\nThe current rendering state.\n\n\n\n\n\n\n\n\nMethods\n\n\nThe following methods provide control of the audio sink's FIFO state machine.\n\n\nu Flush('t')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\ntimeNanos\n\n\nt\n\n\nTimestamp in nanoseconds since the UNIX epoch\n\n\nTimestamp in nanoseconds since the UNIX epoch to flush at.\nIf an audio sink does not support synchronized playback (by not implementing the Stream.Clock interface), this value should be 0 and the sink should immediately flush.\nIf an audio sink supports synchronized playback, this method should not return a reply until the flush is complete.\n\n\n\n\n\n\n\n\nReply arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nReturn signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nnumBytesFlushed\n\n\nu\n\n\nNumber of bytes flushed from the FIFO. When \ntimeNanos\n is not 0, this value is the number of bytes flushed after the flush is complete.\n\n\n\n\n\n\n\n\nDescription\n\n\nFlushes the FIFO of this instance. FifoPositionChanged should \nbe emitted after the flush is complete.\n\n\nPause('t')\n\n\nMesage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\ntimeNanos\n\n\nt\n\n\nTimestamp in nanoseconds since the UNIX epoch\n\n\nTimestamp in nanoseconds since the UNIX epoch to stop rendering data at.\nIf an audio sink does not support synchronized playback (by not implementing the Stream.Clock interface), this value should be 0 and the audio sink should immediately stop rendering.\nIf an audio sink supports synchronized playback, this method should not return a reply until the pause is complete.\n\n\n\n\n\n\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nTell the port to stop rendering data from the FIFO. The FIFO is not flushed.\n\n\nPlay\n\n\nMessage argumemts\n\n\nNone.\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nTells the port to start rendering data from the FIFO.\n\n\nIf the configuration is not compatible with the capabilities, this method should return an error.\n\n\nSignals\n\n\nFifoPositionStateChanged\n\n\nFifoPositionStateChanged is not a Sessionless signal.\n\n\nMessage arguments\n\n\nNone.\n\n\nDescription\n\n\nAn audio sink emits this signal when its FIFO position crosses the low watermark.\n\n\nPlayStateChanged('yy')\n\n\nPlayStateChanged is not a Sessionless signal.\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\noldState\n\n\ny\n\n\npositive\n\n\nPrevious PlayState value.\n\n\n\n\n\n\n1\n\n\nnewState\n\n\ny\n\n\npositive\n\n\nCurrent PlayState value.\n\n\n\n\n\n\n\n\nDescription\n\n\nEmitted when the PlayState property changes.\n\n\nStream/Port.AudioSource Interface\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Stream.Port.Audio\n\n\n1\n\n\nno\n\n\nChild node of node implementing the Stream interface.\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\nNo methods are exposed by this interface.\n\n\nSignals\n\n\nData('tay')\n\n\nData signal is not a Sessionless signal.\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\ntimeStamp\n\n\nt\n\n\npositive\n\n\nTimestamp in nanoseconds since the UNIX epoch to render the data. If an audio sink does not support synchronized playback (by not implementing the Stream.Clock interface), this value should be 0.\n\n\n\n\n\n\n1\n\n\nbytes\n\n\nay\n\n\narray of bytes\n\n\nInterleaved sample data.\n\n\n\n\n\n\n\n\nDescription\n\n\nThis signal is sent by the audio source to the audio sink.\n\n\nStream.Port.Image Interfaces\n\n\nThe Stream.Port.ImageSource and Stream.Port.ImageSink interfaces \ndefine the data format for image/\n media types. The interfaces \nare implemented by port objects that support image/\n capabilities.\n\n\nStream.Port.ImageSink interface\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Stream.Port.ImageSink\n\n\n1\n\n\nno\n\n\nChild node of the node implementing the Stream interface.\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\nNo methods are exposed by this interface.\n\n\nSignals\n\n\nNo signals are emitted by this interface.\n\n\nStream.Port.ImageSource interface\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Stream.Port.ImageSource\n\n\n1\n\n\nno\n\n\nChild node of the node implementing the Stream interface.\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\nNo methods are exposed by this interface.\n\n\nSignals\n\n\nData is not a Sessionless signal.\n\n\nData('ay')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nbytes\n\n\nay\n\n\narray of bytes\n\n\nSegment of the image data.\n\n\n\n\n\n\n\n\nDescription\n\n\nThis signal is sent by the source to the sink.\n\n\nStream.Port.Application.Metadata Interfaces\n\n\nThe Application.MetadataSource and Application.MetadataSink \ninterfaces define the data format for application/x-metadata \nmedia types. The interfaces are implemented by port objects \nthat support the application/x-metadata capability.\n\n\nStream.Port.Application.MetadataSink interface\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Stream.Application.MetadataSink\n\n\n1\n\n\nno\n\n\nChild node of the node implementing the Stream interface.\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\nNo methods are exposed by this interface.\n\n\nSignals\n\n\nNo signals are emitted by this interface.\n\n\nStream.Port.Application.MetadataSource interface\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Stream.Port.Application.MetadataSource\n\n\n1\n\n\nno\n\n\nChild node of the node implementing the Stream interface.\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\nNo methods are exposed by this interface.\n\n\nSignals\n\n\nData('a{sv}')\n\n\nData is not a Sessionless signal.\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\ndictionary\n\n\na{sv}\n\n\narray of pairs of a string and variant\n\n\nMetadata key/value pairs. See \nMedia Types\n for metadata keys and relevant values.\n\n\n\n\n\n\n\n\nDescription\n\n\nThis signal is sent by the source to the sink.\n\n\nControl.Volume interface\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Control.Volume\n\n\n1\n\n\nno\n\n\nMust be the same as the path implementing the AudioSink interface.\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\nVolume\n\n\nn\n\n\nSigned integers\n\n\nRead-write\n\n\nCurrent volume of the device\n\n\n\n\n\n\nVolumeRange\n\n\n(nnn)\n\n\nSigned integers\nhigh\nlow\nstep\n\n\nRead-only\n\n\nMaximum (high) and minimum (low) values of the volume.\nThe step value is the incremental unit, the value of Volume is always a multiple of the step.\n\n\n\n\n\n\nMute\n\n\nb\n\n\ntrue\nfalse\n\n\nRead-write\n\n\nWhether or not this device is muted.\n\n\n\n\n\n\nEnabled\n\n\nb\n\n\ntrue\nfalse\n\n\nRead-only\n\n\nIndicates whether or not Volume control is enabled. If this value is false, all methods that change the playback volume will return an error.\n\n\n\n\n\n\n\n\nMethods\n\n\nThe following methods are exposed by a BusObject that implements \nthe \norg.alljoyn.VolumeControl\n interface.\n\n\nAdjustVolume('n')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\ndelta\n\n\nn\n\n\nSigned integer\n\n\nThe amount by which to increase or decrease the volume.\n\n\n\n\n\n\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nAdjusts the volume by a certain amount. The new volume will be equal to old volume + delta.\n\n\nAdjustVolumePercent('d')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nchange\n\n\nd\n\n\ndouble precision floating point value\n\n\nFor values greater than 0 and smaller than 1, the percentage by which to raise the volume.\nFor values smaller than 0 and bigger than -1, the percentage by which to reduce the volume.\nFor values greater than or equal to 1, increase volume to maximum.\nFor values smaller than or equal to -1, decrease volume to the minimum.\n\n\n\n\n\n\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nAdjusts the volume by a certain percentage. \n\n\nSignals\n\n\nVolumeChanged('b')\n\n\nVolumeChanged signal is not a Sessionless signal.\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nnewVolume\n\n\nb\n\n\ntrue\nfalse\n\n\nEmitted when the volume changes\n\n\n\n\n\n\n\n\nDescription\n\n\nSignal sent when the volume has changed.\n\n\nMuteChanged('b')\n\n\nMuteChanged signal is not a Sessionless signal.\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nnewMute\n\n\nb\n\n\nTrue or False\n\n\nEmitted when the mute changes to on or off\n\n\n\n\n\n\n\n\nDescription\n\n\nSignal sent when the volume's mute state has changed.\n\n\nEnableChanged('b')\n\n\nEnableChanged signal is not a Sessionless signal.\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nenabled\n\n\nb\n\n\nTrue or False\n\n\nEmitted when when the volume control is enabled or disabled\n\n\n\n\n\n\n\n\nDescription\n\n\nSignal sent when the volume control is enabled or disabled.\n\n\nStream.Clock interface\n\n\nThe Stream.Clock interface provides the ability to set the \nclock used for synchronized playback. It can be implemented \nby a stream object.\n\n\nThe following sequence defines the clock synchronization process.\n\n\n\n\nRecord the current time as t0.\n\n\nCall SetTime(t0) and wait for the method reply.\n\n\nRecord the current time as t1.\n\n\nCall AdjustTime((t1 - t0) / 2).\n\n\n\n\nThe maximum error of the clock skew is the value passed to AdjustTime, (t1 - t0) / 2.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Stream.Clock\n\n\n1\n\n\nno\n\n\nChild node of the node implementing the Stream interface.\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\nThe following methods are exposed by a BusObject that implements \nthe \norg.alljoyn.Stream.Clock\n interface.\n\n\nSetTime('t')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\ntimeNanos\n\n\nt\n\n\nTimestamp in nanoseconds since the UNIX epoch\n\n\nThe time to set the clock used for synchronized playback.\n\n\n\n\n\n\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nSets the time of the clock used for synchronized playback.\n\n\nAdjustTime('x')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nadjustNanos\n\n\nx\n\n\nPositive or negative time in nanoseconds.\n\n\nThe amount, positive or negative, to adjust the time.\nFor values smaller than 0 and bigger than -1, the percentage by which to reduce the volume.\nFor values greater than or equal to 1, increase volume to maximum.\nFor values smaller than or equal to -1, decrease volume to the minimum.\n\n\n\n\n\n\n\n\nReply argments\n\n\nNone.\n\n\nDescription\n\n\nAdjusts the time of the clock used for synchronized playback \nforwards or backwards from its current value. \n\n\nSignals\n\n\nNo signals are emitted by this interface.\n\n\nMedia Types\n\n\nThe following sections define the values of the (sa{sv}) used \nin the Stream.Port.Capabilities and Stream.Port.Connect interfaces.\n\n\n\n\nFor a capability, the first parameter of the struct is the \nmedia type (such as audio/x-raw). The second parameter is a \ndictionary of configurable parameters for the media type. \nThe value of the dictionary entry for a configurable parameter \nis an array of the supported values of the configurable parameter.\n\n\nA configuration is identical to a capability except that the \nvalue of the dictionary entry for a configurable parameter is \nonly one of the supported values listed in the capability.\nIn addition to the media types defined below, additional media \ntypes may be defined in  future revisions of this interface \ndefinition or in addition to this interface definition.\n\n\n\n\naudio/x-raw\n\n\nRaw interleaved PCM data. If audio is supported, this media \ntype is mandatory.\n\n\n\n\n\n\n\n\nKey\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nChannels\n\n\ny\n\n\nPositive integer\n\n\nNumber of channels. Support for 1 and 2 channels is mandatory.\n\n\n\n\n\n\nFormat\n\n\ns\n\n\nSample format\n\n\nSample formats.\ns16le - PCM signed 16-bit wide little endian samples. Support for s16le is mandatory.\n\n\n\n\n\n\nRate\n\n\nq\n\n\nSample rate\n\n\nSample rate. Support for 44100 and 48000 sample rates is mandatory.\n\n\n\n\n\n\n\n\naudio/x-alac\n\n\nApple Lossless. Support for this media type is optional.\n\n\n\n\n\n\n\n\nKey\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nChannels\n\n\ny\n\n\nPositive integer\n\n\nNumber of channels. Support for 1 and 2 channels is mandatory.\n\n\n\n\n\n\nFormat\n\n\ns\n\n\nSample format\n\n\nSample formats.\ns16le - PCM signed 16-bit wide little endian samples. Support for s16le is mandatory.\n\n\n\n\n\n\nRate\n\n\nq\n\n\nSample rate\n\n\nSample rate. Support for 44100 and 48000 sample rates is mandatory.\n\n\n\n\n\n\nMagicCookie\n\n\nay\n\n\nArray of bytes\n\n\nMagic cookie. Used only in configuration.\n\n\n\n\n\n\nFramesPerPacket\n\n\nu\n\n\nFrames per packet\n\n\nFrames per packet. Used only in configuration.\n\n\n\n\n\n\n\n\nimage/jpeg\n\n\nJPEG image data. Support for this media type is optional.\n\n\napplication/x-metadata\n\n\nStream metadata. Support for this media type is optional.\n\n\nMedia Item Keys\n\n\nThe following table lists the keys and values that can be \nused in a metadata dictionary entry.\n\n\nDate values are to only be represented as strings in one of \nthe following ISO 8601 formats:\n\n\n\n\nYear only: \"\nyear\n\" where \nyear\n includes all digits of \nthe year.\n\n\nDate: \"\nyear\nmonth\nday\n\" where:\n\n\nyear\n includes all digits of the year\n\n\nmonth\n is a 2-digit representation of month (\"01\" = January)\n\n\nday\n is the day of the month (e.g., \"09\").\n\n\nDate and time: \"\nyear\nmonth\nday\nT\nhour\nminute\nsecond\n+/-\noffset\n\" where:\n\n\nyear\n, \nmonth\n, and \nday\n are the same as the date previously specified\n\n\nhour\n is the hour (\"00\" through \"23\")\n\n\nminute\n is the minute (\"00\" through \"59\")\n\n\nsecond\n is the second (\"00\" through \"59\")\n\n\noffset\n is the offset from UTC (\"-0800\" corresponds to Pacific \n  Standard Time)\n\n\nDate and time: \"\nyear\nmonth\nday\nT\nhour\nminute\n+/-\noffset\n\" \nis the same as the previous date and time specification except \nwithout the \n (seconds) portion.\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nName\n\n\ns\n\n\nN/A\n\n\nName or title of the item\n\n\n\n\n\n\nAlbum\n\n\ns\n\n\nN/A\n\n\nAlbum title\n\n\n\n\n\n\nAlbumArtist\n\n\ns\n\n\nN/A\n\n\nAlbum artist\n\n\n\n\n\n\nAlbumRating\n\n\ny\n\n\n0-5\n\n\n\"Start\" rating\n\n\n\n\n\n\nArtist\n\n\ns\n\n\nN/A\n\n\nArtist that performed the item\n\n\n\n\n\n\nBpm\n\n\ng\n\n\nN/A\n\n\nBeats per minute\n\n\n\n\n\n\nCompilation\n\n\nb\n\n\nN/A\n\n\nIndicates if item is part of a compilation\n\n\n\n\n\n\nComposer\n\n\ns\n\n\nN/A\n\n\nComposer of the item\n\n\n\n\n\n\nDiscCount\n\n\ng\n\n\nN/A\n\n\nTotal number of discs in a multi-disc release\n\n\n\n\n\n\nDiscNumber\n\n\ng\n\n\nN/A\n\n\nDisc number in a multi-disc release\n\n\n\n\n\n\nDuration\n\n\nu\n\n\nN/A\n\n\nDuration of the item in milliseconds\n\n\n\n\n\n\nGenre\n\n\ns\n\n\nN/A\n\n\nGenre of the item\n\n\n\n\n\n\nRating\n\n\ny\n\n\n0-5\n\n\n\"Star\" rating\n\n\n\n\n\n\nReleaseDate\n\n\ns\n\n\nDate\n\n\nDate item was first released\n\n\n\n\n\n\nTrackCount\n\n\ng\n\n\nN/A\n\n\nTotal number of tracks on the album\n\n\n\n\n\n\nTrackNumber\n\n\ng\n\n\nN/A\n\n\nTrack number of the item within the album\n\n\n\n\n\n\n\n\nIntrospection XML\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n \nxsi:noNamespaceSchemaLocation=\nhttp://www.allseenalliance.org/schemas/introspect.xsd\n\n\n   \ninterface name=\norg.alljoyn.Stream\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nmethod name=\nOpen\n/\n\n      \nmethod name=\nClose\n/\n\n   \n/interface\n\n\n   \ninterface name=\norg.alljoyn.Stream.Port\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nDirection\n type=\ny\n access=\nread\n/\n\n      \nproperty name=\nCapabilities\n type=\na(sa{sv})\n access=\nread\n/\n\n      \nsignal name=\nOwnershipLost\n\n         \narg name=\nnewOwner\n type=\ns\n/\n\n      \n/signal\n\n      \nmethod name=\nConnect\n\n         \narg name=\nhost\n type=\ns\n direction=\nin\n/\n\n         \narg name=\npath\n type=\no\n direction=\nin\n/\n\n         \narg name=\nconfiguration\n type=\n(sa{sv})\n direction=\nin\n/\n\n      \n/method\n\n   \n/interface\n\n\n   \ninterface name=\norg.alljoyn.Stream.Port.AudioSink\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nFifoSize\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nFifoPosition\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nDelay\n type=\n(uu)\n access=\nread\n/\n\n      \nsignal name=\nFifoPositionChanged\n/\n\n      \nproperty name=\nPlayState\n type=\ny\n access=\nread\n/\n\n      \nsignal name=\nPlayStateChanged\n\n         \narg name=\noldState\n type=\ny\n/\n\n         \narg name=\nnewState\n type=\ny\n/\n\n      \n/signal\n\n      \nmethod name=\nPlay\n/\n\n      \nmethod name=\nPause\n\n         \narg name=\ntimeNanos\n type=\nt\n direction=\nin\n/\n\n      \n/method\n\n      \nmethod name=\nFlush\n\n         \narg name=\ntimeNanos\n type=\nt\n direction=\nin\n/\n\n         \narg name=\nnumBytesFlushed\n type=\nu\n direction=\nout\n/\n\n      \n/method\n\n   \n/interface\n\n\n   \ninterface name=\norg.alljoyn.Stream.Port.AudioSource\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nsignal name=\nData\n\n         \narg name=\ntimestamp\n type=\nt\n/\n\n         \narg name=\nbytes\n type=\nay\n/\n\n      \n/signal\n\n   \n/interface\n\n\n   \ninterface name=\norg.alljoyn.Stream.Port.ImageSink\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n   \n/interface\n\n\n   \ninterface name=\norg.alljoyn.Stream.Port.ImageSource\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nsignal name=\nData\n\n         \narg name=\nbytes\n type=\nay\n/\n\n      \n/signal\n\n   \n/interface\n\n\n   \ninterface name=\norg.alljoyn.Stream.Port.Application.MetadataSink\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n   \n/interface\n\n\n   \ninterface name=\norg.alljoyn.Stream.Port.Application.MetadataSource\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nsignal name=\nData\n\n         \narg name=\ndictionary\n type=\na{sv}\n/\n\n      \n/signal\n\n   \n/interface\n\n\n   \ninterface name=\norg.alljoyn.Stream.Clock\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nmethod name=\nSetTime\n\n         \narg name=\ntimeNanos\n type=\nt\n direction=\nin\n/\n\n      \n/method\n\n      \nmethod name=\nAdjustTime\n\n         \narg name=\nadjustNanos\n type=\nx\n direction=\nin\n/\n\n      \n/method\n\n   \n/interface\n\n\n   \ninterface name=\norg.alljoyn.Control.Volume\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nVolume\n type=\nn\n access=\nreadwrite\n/\n\n      \nproperty name=\nVolumeRange\n type=\n(nnn)\n access=\nread\n/\n\n      \nproperty name=\nMute\n type=\nb\n access=\nreadwrite\n/\n\n      \nsignal name=\nVolumeChanged\n\n         \narg name=\nnewVolume\n type=\nn\n/\n\n         \nsignal name=\nMutedChanged\n\n         \narg name=\nnewMute\n type=\nb\n/\n\n      \n/signal\n\n      \nmethod name=\nAdjustVolume\n\n         \narg name=\ndelta\n type=\nn\n direction=\nin\n/\n\n      \n/method\n\n      \nmethod name=\nAdjustVolumePercent\n\n         \narg name=\nchange\n type=\nd\n direction=\nin\n/\n\n      \n/method\n\n      \nproperty name=\nEnabled\n type=\nb\n access=\nread\n/\n\n      \nsignal name=\nEnableChanged\n\n         \narg name=\nenabled\n type=\nb\n/\n\n      \n/signal\n\n   \n/interface\n\n\n\n\n/node",
            "title": "Interface"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#audio-interface-definition",
            "text": "",
            "title": "Audio Interface Definition"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#release-history",
            "text": "Release version  Date  What changed      Pre-14.06  N/A  The following interfaces were added: Stream interface version 1 Stream.Port interface version 1 Stream.Port.AudioSource interface version 1 Stream.Port.AudioSink interface version 1 Stream.Port.ImageSource interface version 1 Stream.Port.ImageSink interface version 1 Stream.Port.Application.MetadataSource interface version 1 Stream.Port.Application.MetadataSink interface version 1 Stream.Clock interface version 1    14.06  6/30/2014  No updates    14.06 Update 1  9/29/2014  Updated the document title and Overview chapter title (changed Specification to Definition). Added the release version number to the document title for version tracking. Added a note in the Definition Overview chapter to address the AllSeen Alliance Compliance and Certification program. Added a Mandatory column for method and signal parameters to support the AllSeen Alliance Compliance and Certification program. Included the object path for each interface. Added the Close method to the Stream interface. Updated the following data points: Connect method's path parameter signature (o) Pause method's parameter name (timeNanos) Flush method's input parameter name and specified output parameter name (numBytesFlushed) Data signal's parameter name (bytes) for the AudioSource and ImageSource interfaces Data signal's parameter name (dictionary) for the MetadataSource interface AdjustTime method parameter name (adjustNanos) Separated the following interfaces to address the information unique to the relevant Sink and Source interfaces: Stream.Port.Audio Stream.Port.Image Stream.Port.ApplicationMetadata Updated the Introspection XML to reflect the Control.Volume output.    14.12  12/17/2014  Cleanup to make requirements for methods and signals more clear.",
            "title": "Release History"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#definition-overview",
            "text": "A stream consists of one or more elementary streams; an \nelementary stream consists of one type of media (audio, \nimage, or metadata).  NOTE:  All methods and signals are considered mandatory to \nsupport the AllSeen Alliance Compliance and Certification \nprogram.",
            "title": "Definition Overview"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#stream-object",
            "text": "A stream object is a BusObject implementing the  org.alljoyn.Stream  \ninterface. It has one child port object for each elementary stream. \nA port object is a BusObject implementing the  org.alljoyn.Stream.Port  \ninterface and one of the media type-specific port interfaces \n( org.alljoyn.Stream.Port.AudioSink , etc.). Port objects send or \nreceive elementary streams.  Example objects and interfaces used by a speaker   /Speaker/In is a stream object  /Speaker/In/Audio, /Speaker/In/Image, and /Speaker/In/Metadata \nare child port objects.      Object path  Interfaces implemented      /Speaker/In  org.alljoyn.Stream    /Speaker/In/Audio  org.alljoyn.Stream.Port org.alljoyn.Stream.Port.AudioSink    /Speaker/In/Image  org.alljoyn.Stream.Port org.alljoyn.Stream.Port.ImageSink    /Speaker/In/Metadata  org.alljoyn.Stream.Port org.alljoyn.Stream.Port.Application.MetadataSink     Example objects and interfaces used by a media player     Object path  Interfaces implemented      /Player/Out  org.alljoyn.Stream    /Player/Out/Audio  org.alljoyn.Stream.Port org.alljoyn.Stream.Port.AudioSource    /Player/Out/Image  org.alljoyn.Stream.Port org.alljoyn.Stream.Port.ImageSource    /Player/Out/Metadata  org.alljoyn.Stream.Port org.alljoyn.Stream.Port.Application.MetadataSource     The following figure illustrates how source ports are connect \nto sink ports to enable streaming.   Figure:  Connected media player and speaker",
            "title": "Stream Object"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#typical-stream-flows",
            "text": "One source and one sink  The following figure illustrates a typical call flow for one \nsource and one sink.   Figure:  Typical call flow for one source and one sink  One source and two sinks  The following figure illustrates the typical call flow for one \nsource and two sinks.   Figure:  Typical call flow for one source and two sinks",
            "title": "Typical Stream Flows"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#discovery",
            "text": "To be discovered by interested client applications on other \ndevices, an audio implementation advertises its existence \nusing the About feature. See the  About Feature Interface \nDefinition  for more information.  BusObject paths  Implementations of audio should publish the object paths of the \nBusObjects that implement  org.alljoyn.Stream  and the object paths \nof BusObjects that implement the  org.alljoyn.Stream.Port  interfaces \nusing the  org.alljoyn.About  interface. See  Example objects and interfaces used by a speaker  \nand  Example objects and interfaces used by a media player  \nfor examples of published BusObjects.  Session port value  In addition to the object paths, the implementation should also \npublish the session port value that the service uses to listen \nfor incoming client connections. Use this port value in the \"port\" \nparameter of the  org.alljoyn.About.Announce  signal.",
            "title": "Discovery"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#stream-interface",
            "text": "The Stream interface is responsible for stream creation and \ncontrol over a stream's ports.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Stream  1  no  Any object path     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-Only  Interface version number",
            "title": "Stream Interface"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#methods",
            "text": "The following methods are exposed by a BusObject that implements \nthe  org.alljoyn.Stream  interface.  Open  Returns an error if not implemented or called more than once.  Message arguments  None.  Reply arguments  None.  Description  Open the stream.  Close  Returns an error if not implemented or called more than once.  Message arguments  None.  Reply arguments  None.  Description  Close the stream.",
            "title": "Methods"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#streamport-interface",
            "text": "The Stream.Port interface is responsible for control over an \nelementary stream. A port object implements this interface \ntogether with a media-specific port interface such as Stream.Port.AudioSource \nor Stream.Port.AudioSink.     Interface name  Version  Secured  Object path      org.alljoyn.Stream.Port  1  no  Child node of node implementing the Stream interface.     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number    Direction  y  0 - sink 1 - source  Read-only  Indicates if this port is a source or sink port. Source ports send elementary streams, sink ports receive them.    Capabilities  a(sa{sv})  See  Media Types  for more information.  Read-only  Defines the supported capabilities of this port. The capabilities of unknown media types should be ignored.     Methods  The following methods are exposed by a BusObject that implements \nthe  org.alljoyn.Stream.Port  interface.  Connect('so(sa{sv})')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  host  s  AllJoyn name  The AllJoyn  name of the remote stream port host to connect to.    1  path  o  Object path  The AllJoyn object path of the remote port on the host to connect to.    2  configuration  (sa{sv})  See  Media Types  A media type and the values to configure its parameters with.     Reply arguments  None.  Description  Connects this port to a remote port and configures the ports to \nsend or receive an elementary stream.  If the configuration is not compatible with the capabilities, \nthis method should return an error.  If this port is already connected to the remote port, this \nmethod should return an error. To reconfigure a connected port, \nfirst close the stream, then open and connect with the new configuration.  Signals  The following signals are emitted by a BusObject that implements \nthe  org.alljoyn.Stream.Port  interface.  OwnershipLost('s')  OwnershipLost signal is not a Sessionless signal.  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  newOwner  s  A String  AllJoyn name of the new remote port.     Description  The port emits this signal to the currently connected remote \nport when it connects to a new remote port.",
            "title": "Stream.Port Interface"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#streamportaudio-interfaces",
            "text": "The Stream.Port.AudioSource and Stream.Port.AudioSink interfaces \ndefine the data format for audio/  media. The interfaces are \nimplemented by port objects that support audio/  capabilities.  FIFO control  An audio sink exposes a FIFO to receive streamed data from an \naudio source. Control of the FIFO is implemented as a state machine. \nThe following figure illustrates the states of the FIFO.   Figure:  Audio sink diagram  Filling an audio sink's FIFO is accomplished using the Data \nsignal, FifoSize and FifoPosition properties, and FifoPositionChanged \nsignal. On receipt of each FifoPositionChanged signal, the audio \nsource can send (FifoSize - FifoPosition) more bytes of data. \nThe audio source should not send more than this; doing so can \nlead to blocking the receipt of other BusMethods and BusSignals \nby the audio sink, or the audio sink discarding the data.  Use the Flush method to tell the audio sink to discard all the \ndata in its FIFO in preparation for new data.  Synchronization  If an audio sink supports synchronized playback (by implementing \nthe Stream.Clock interface), use the timestamp parameter of the \nData signal to determine the correct time to render the data. \nThe audio source computes a timestamp sufficient to ensure that \nit is greater than the network latency plus the rendering latency \nof each audio sink. Audio sinks should discard data that cannot \nbe rendered in time.",
            "title": "Stream.Port.Audio Interfaces"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#streamportaudiosink-interface",
            "text": "Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Stream.Port.AudioSink  1  no  Child node of node implementing the Stream interface.     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number    FifoSize  u  Size in bytes  Read-only  The size of the sink's FIFO in bytes. The size in samples may be computed from the configured Channels, Format, and Rate.    FifiPosition  u  Position in bytes  Read-only  The current position of the FIFO in bytes. Bytes read from this position are submitted to the audio device.    Delay  (uu)  Position in bytes Size in bytes  Read-only  Use the sum of these values and the configured Channels, Format, and Rate properties to compute the delay in seconds from when a sample is received to when it is heard. The first value is FifoPosition. The second value is the size of the audio device's FIFO in bytes.    PlayState  y  0 - idle 1 - playing 2 - paused  Read-only  The current rendering state.     Methods  The following methods provide control of the audio sink's FIFO state machine.  u Flush('t')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  timeNanos  t  Timestamp in nanoseconds since the UNIX epoch  Timestamp in nanoseconds since the UNIX epoch to flush at. If an audio sink does not support synchronized playback (by not implementing the Stream.Clock interface), this value should be 0 and the sink should immediately flush. If an audio sink supports synchronized playback, this method should not return a reply until the flush is complete.     Reply arguments     Argument  Parameter name  Return signature  Description      0  numBytesFlushed  u  Number of bytes flushed from the FIFO. When  timeNanos  is not 0, this value is the number of bytes flushed after the flush is complete.     Description  Flushes the FIFO of this instance. FifoPositionChanged should \nbe emitted after the flush is complete.  Pause('t')  Mesage arguments     Argument  Parameter name  Signature  List of values  Description      0  timeNanos  t  Timestamp in nanoseconds since the UNIX epoch  Timestamp in nanoseconds since the UNIX epoch to stop rendering data at. If an audio sink does not support synchronized playback (by not implementing the Stream.Clock interface), this value should be 0 and the audio sink should immediately stop rendering. If an audio sink supports synchronized playback, this method should not return a reply until the pause is complete.     Reply arguments  None.  Description  Tell the port to stop rendering data from the FIFO. The FIFO is not flushed.  Play  Message argumemts  None.  Reply arguments  None.  Description  Tells the port to start rendering data from the FIFO.  If the configuration is not compatible with the capabilities, this method should return an error.  Signals  FifoPositionStateChanged  FifoPositionStateChanged is not a Sessionless signal.  Message arguments  None.  Description  An audio sink emits this signal when its FIFO position crosses the low watermark.  PlayStateChanged('yy')  PlayStateChanged is not a Sessionless signal.     Argument  Parameter name  Signature  List of values  Description      0  oldState  y  positive  Previous PlayState value.    1  newState  y  positive  Current PlayState value.     Description  Emitted when the PlayState property changes.",
            "title": "Stream.Port.AudioSink interface"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#streamportaudiosource-interface",
            "text": "Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Stream.Port.Audio  1  no  Child node of node implementing the Stream interface.     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number     Methods  No methods are exposed by this interface.  Signals  Data('tay')  Data signal is not a Sessionless signal.     Argument  Parameter name  Signature  List of values  Description      0  timeStamp  t  positive  Timestamp in nanoseconds since the UNIX epoch to render the data. If an audio sink does not support synchronized playback (by not implementing the Stream.Clock interface), this value should be 0.    1  bytes  ay  array of bytes  Interleaved sample data.     Description  This signal is sent by the audio source to the audio sink.",
            "title": "Stream/Port.AudioSource Interface"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#streamportimage-interfaces",
            "text": "The Stream.Port.ImageSource and Stream.Port.ImageSink interfaces \ndefine the data format for image/  media types. The interfaces \nare implemented by port objects that support image/  capabilities.  Stream.Port.ImageSink interface  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Stream.Port.ImageSink  1  no  Child node of the node implementing the Stream interface.     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number     Methods  No methods are exposed by this interface.  Signals  No signals are emitted by this interface.  Stream.Port.ImageSource interface  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Stream.Port.ImageSource  1  no  Child node of the node implementing the Stream interface.     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  no  Interface version number     Methods  No methods are exposed by this interface.  Signals  Data is not a Sessionless signal.  Data('ay')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  bytes  ay  array of bytes  Segment of the image data.     Description  This signal is sent by the source to the sink.",
            "title": "Stream.Port.Image Interfaces"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#streamportapplicationmetadata-interfaces",
            "text": "The Application.MetadataSource and Application.MetadataSink \ninterfaces define the data format for application/x-metadata \nmedia types. The interfaces are implemented by port objects \nthat support the application/x-metadata capability.  Stream.Port.Application.MetadataSink interface  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Stream.Application.MetadataSink  1  no  Child node of the node implementing the Stream interface.     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number     Methods  No methods are exposed by this interface.  Signals  No signals are emitted by this interface.  Stream.Port.Application.MetadataSource interface  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Stream.Port.Application.MetadataSource  1  no  Child node of the node implementing the Stream interface.     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  Read-only  Interface version number     Methods  No methods are exposed by this interface.  Signals  Data('a{sv}')  Data is not a Sessionless signal.  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  dictionary  a{sv}  array of pairs of a string and variant  Metadata key/value pairs. See  Media Types  for metadata keys and relevant values.     Description  This signal is sent by the source to the sink.",
            "title": "Stream.Port.Application.Metadata Interfaces"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#controlvolume-interface",
            "text": "Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Control.Volume  1  no  Must be the same as the path implementing the AudioSink interface.     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number    Volume  n  Signed integers  Read-write  Current volume of the device    VolumeRange  (nnn)  Signed integers high low step  Read-only  Maximum (high) and minimum (low) values of the volume. The step value is the incremental unit, the value of Volume is always a multiple of the step.    Mute  b  true false  Read-write  Whether or not this device is muted.    Enabled  b  true false  Read-only  Indicates whether or not Volume control is enabled. If this value is false, all methods that change the playback volume will return an error.     Methods  The following methods are exposed by a BusObject that implements \nthe  org.alljoyn.VolumeControl  interface.  AdjustVolume('n')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  delta  n  Signed integer  The amount by which to increase or decrease the volume.     Reply arguments  None.  Description  Adjusts the volume by a certain amount. The new volume will be equal to old volume + delta.  AdjustVolumePercent('d')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  change  d  double precision floating point value  For values greater than 0 and smaller than 1, the percentage by which to raise the volume. For values smaller than 0 and bigger than -1, the percentage by which to reduce the volume. For values greater than or equal to 1, increase volume to maximum. For values smaller than or equal to -1, decrease volume to the minimum.     Reply arguments  None.  Description  Adjusts the volume by a certain percentage.   Signals  VolumeChanged('b')  VolumeChanged signal is not a Sessionless signal.  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  newVolume  b  true false  Emitted when the volume changes     Description  Signal sent when the volume has changed.  MuteChanged('b')  MuteChanged signal is not a Sessionless signal.     Argument  Parameter name  Signature  List of values  Description      0  newMute  b  True or False  Emitted when the mute changes to on or off     Description  Signal sent when the volume's mute state has changed.  EnableChanged('b')  EnableChanged signal is not a Sessionless signal.     Argument  Parameter name  Signature  List of values  Description      0  enabled  b  True or False  Emitted when when the volume control is enabled or disabled     Description  Signal sent when the volume control is enabled or disabled.",
            "title": "Control.Volume interface"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#streamclock-interface",
            "text": "The Stream.Clock interface provides the ability to set the \nclock used for synchronized playback. It can be implemented \nby a stream object.  The following sequence defines the clock synchronization process.   Record the current time as t0.  Call SetTime(t0) and wait for the method reply.  Record the current time as t1.  Call AdjustTime((t1 - t0) / 2).   The maximum error of the clock skew is the value passed to AdjustTime, (t1 - t0) / 2.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Stream.Clock  1  no  Child node of the node implementing the Stream interface.     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number     Methods  The following methods are exposed by a BusObject that implements \nthe  org.alljoyn.Stream.Clock  interface.  SetTime('t')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  timeNanos  t  Timestamp in nanoseconds since the UNIX epoch  The time to set the clock used for synchronized playback.     Reply arguments  None.  Description  Sets the time of the clock used for synchronized playback.  AdjustTime('x')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  adjustNanos  x  Positive or negative time in nanoseconds.  The amount, positive or negative, to adjust the time. For values smaller than 0 and bigger than -1, the percentage by which to reduce the volume. For values greater than or equal to 1, increase volume to maximum. For values smaller than or equal to -1, decrease volume to the minimum.     Reply argments  None.  Description  Adjusts the time of the clock used for synchronized playback \nforwards or backwards from its current value.   Signals  No signals are emitted by this interface.",
            "title": "Stream.Clock interface"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#media-types",
            "text": "The following sections define the values of the (sa{sv}) used \nin the Stream.Port.Capabilities and Stream.Port.Connect interfaces.   For a capability, the first parameter of the struct is the \nmedia type (such as audio/x-raw). The second parameter is a \ndictionary of configurable parameters for the media type. \nThe value of the dictionary entry for a configurable parameter \nis an array of the supported values of the configurable parameter.  A configuration is identical to a capability except that the \nvalue of the dictionary entry for a configurable parameter is \nonly one of the supported values listed in the capability.\nIn addition to the media types defined below, additional media \ntypes may be defined in  future revisions of this interface \ndefinition or in addition to this interface definition.   audio/x-raw  Raw interleaved PCM data. If audio is supported, this media \ntype is mandatory.     Key  Signature  List of values  Description      Channels  y  Positive integer  Number of channels. Support for 1 and 2 channels is mandatory.    Format  s  Sample format  Sample formats. s16le - PCM signed 16-bit wide little endian samples. Support for s16le is mandatory.    Rate  q  Sample rate  Sample rate. Support for 44100 and 48000 sample rates is mandatory.     audio/x-alac  Apple Lossless. Support for this media type is optional.     Key  Signature  List of values  Description      Channels  y  Positive integer  Number of channels. Support for 1 and 2 channels is mandatory.    Format  s  Sample format  Sample formats. s16le - PCM signed 16-bit wide little endian samples. Support for s16le is mandatory.    Rate  q  Sample rate  Sample rate. Support for 44100 and 48000 sample rates is mandatory.    MagicCookie  ay  Array of bytes  Magic cookie. Used only in configuration.    FramesPerPacket  u  Frames per packet  Frames per packet. Used only in configuration.     image/jpeg  JPEG image data. Support for this media type is optional.  application/x-metadata  Stream metadata. Support for this media type is optional.",
            "title": "Media Types"
        },
        {
            "location": "/learn/base-services/audiostreaming/interface/#media-item-keys",
            "text": "The following table lists the keys and values that can be \nused in a metadata dictionary entry.  Date values are to only be represented as strings in one of \nthe following ISO 8601 formats:   Year only: \" year \" where  year  includes all digits of \nthe year.  Date: \" year month day \" where:  year  includes all digits of the year  month  is a 2-digit representation of month (\"01\" = January)  day  is the day of the month (e.g., \"09\").  Date and time: \" year month day T hour minute second +/- offset \" where:  year ,  month , and  day  are the same as the date previously specified  hour  is the hour (\"00\" through \"23\")  minute  is the minute (\"00\" through \"59\")  second  is the second (\"00\" through \"59\")  offset  is the offset from UTC (\"-0800\" corresponds to Pacific \n  Standard Time)  Date and time: \" year month day T hour minute +/- offset \" \nis the same as the previous date and time specification except \nwithout the   (seconds) portion.      Key  Signature  List of values  Description      Name  s  N/A  Name or title of the item    Album  s  N/A  Album title    AlbumArtist  s  N/A  Album artist    AlbumRating  y  0-5  \"Start\" rating    Artist  s  N/A  Artist that performed the item    Bpm  g  N/A  Beats per minute    Compilation  b  N/A  Indicates if item is part of a compilation    Composer  s  N/A  Composer of the item    DiscCount  g  N/A  Total number of discs in a multi-disc release    DiscNumber  g  N/A  Disc number in a multi-disc release    Duration  u  N/A  Duration of the item in milliseconds    Genre  s  N/A  Genre of the item    Rating  y  0-5  \"Star\" rating    ReleaseDate  s  Date  Date item was first released    TrackCount  g  N/A  Total number of tracks on the album    TrackNumber  g  N/A  Track number of the item within the album     Introspection XML  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  \nxsi:noNamespaceSchemaLocation= http://www.allseenalliance.org/schemas/introspect.xsd \n\n    interface name= org.alljoyn.Stream \n       property name= Version  type= q  access= read / \n       method name= Open / \n       method name= Close / \n    /interface \n\n    interface name= org.alljoyn.Stream.Port \n       property name= Version  type= q  access= read / \n       property name= Direction  type= y  access= read / \n       property name= Capabilities  type= a(sa{sv})  access= read / \n       signal name= OwnershipLost \n          arg name= newOwner  type= s / \n       /signal \n       method name= Connect \n          arg name= host  type= s  direction= in / \n          arg name= path  type= o  direction= in / \n          arg name= configuration  type= (sa{sv})  direction= in / \n       /method \n    /interface \n\n    interface name= org.alljoyn.Stream.Port.AudioSink \n       property name= Version  type= q  access= read / \n       property name= FifoSize  type= u  access= read / \n       property name= FifoPosition  type= u  access= read / \n       property name= Delay  type= (uu)  access= read / \n       signal name= FifoPositionChanged / \n       property name= PlayState  type= y  access= read / \n       signal name= PlayStateChanged \n          arg name= oldState  type= y / \n          arg name= newState  type= y / \n       /signal \n       method name= Play / \n       method name= Pause \n          arg name= timeNanos  type= t  direction= in / \n       /method \n       method name= Flush \n          arg name= timeNanos  type= t  direction= in / \n          arg name= numBytesFlushed  type= u  direction= out / \n       /method \n    /interface \n\n    interface name= org.alljoyn.Stream.Port.AudioSource \n       property name= Version  type= q  access= read / \n       signal name= Data \n          arg name= timestamp  type= t / \n          arg name= bytes  type= ay / \n       /signal \n    /interface \n\n    interface name= org.alljoyn.Stream.Port.ImageSink \n       property name= Version  type= q  access= read / \n    /interface \n\n    interface name= org.alljoyn.Stream.Port.ImageSource \n       property name= Version  type= q  access= read / \n       signal name= Data \n          arg name= bytes  type= ay / \n       /signal \n    /interface \n\n    interface name= org.alljoyn.Stream.Port.Application.MetadataSink \n       property name= Version  type= q  access= read / \n    /interface \n\n    interface name= org.alljoyn.Stream.Port.Application.MetadataSource \n       property name= Version  type= q  access= read / \n       signal name= Data \n          arg name= dictionary  type= a{sv} / \n       /signal \n    /interface \n\n    interface name= org.alljoyn.Stream.Clock \n       property name= Version  type= q  access= read / \n       method name= SetTime \n          arg name= timeNanos  type= t  direction= in / \n       /method \n       method name= AdjustTime \n          arg name= adjustNanos  type= x  direction= in / \n       /method \n    /interface \n\n    interface name= org.alljoyn.Control.Volume \n       property name= Version  type= q  access= read / \n       property name= Volume  type= n  access= readwrite / \n       property name= VolumeRange  type= (nnn)  access= read / \n       property name= Mute  type= b  access= readwrite / \n       signal name= VolumeChanged \n          arg name= newVolume  type= n / \n          signal name= MutedChanged \n          arg name= newMute  type= b / \n       /signal \n       method name= AdjustVolume \n          arg name= delta  type= n  direction= in / \n       /method \n       method name= AdjustVolumePercent \n          arg name= change  type= d  direction= in / \n       /method \n       property name= Enabled  type= b  access= read / \n       signal name= EnableChanged \n          arg name= enabled  type= b / \n       /signal \n    /interface  /node",
            "title": "Media Item Keys"
        },
        {
            "location": "/learn/base-services/configuration/",
            "text": "Configuration Service\n\n\nThe Configuration Service provides an ability to\nconfigure a device, like its device name or passcode.\n\n\nConcepts and Terminology\n\n\nTwo roles exist:\n* \nConfig Server\n. This runs on the device that is being configured,\n  the device that is offering the Configuration service.\n\n\n\n\nConfig Client\n. This runs on the device or app that is used to\n  configure a remote device.\n\n\n\n\nThe following configurations can be configured:\n\n\n\n\n\n\nFactory Reset\n. Restores the device to its original\n  factory settings. All configurable data is restored;\n  if the device supports the Onboarding service, then\n  the device will enter its original offboarded state.\n\n\n\n\n\n\nSet Passcode\n. Sets the device's passcode, which\n  is used when accessing secure interfaces.\n\n\n\n\n\n\nDefault Language\n. Sets the default language used\n  by the device if a specific language is not requested.\n\n\n\n\n\n\nDevice Name\n. Sets the device's name.\n\n\n\n\n\n\nThe Configuration Service exposes a simple secured\ninterface to provide this service. See the\n\nConfiguration Interface Definition\n\nfor more details.\n\n\nLearn More\n\n\n\n\nLearn more about the Configuration Interface Definition\n\n\nDownload the SDK\n and \nbuild\n\n\nLearn more about the Configuration APIs",
            "title": "Home"
        },
        {
            "location": "/learn/base-services/configuration/#configuration-service",
            "text": "The Configuration Service provides an ability to\nconfigure a device, like its device name or passcode.",
            "title": "Configuration Service"
        },
        {
            "location": "/learn/base-services/configuration/#concepts-and-terminology",
            "text": "Two roles exist:\n*  Config Server . This runs on the device that is being configured,\n  the device that is offering the Configuration service.   Config Client . This runs on the device or app that is used to\n  configure a remote device.   The following configurations can be configured:    Factory Reset . Restores the device to its original\n  factory settings. All configurable data is restored;\n  if the device supports the Onboarding service, then\n  the device will enter its original offboarded state.    Set Passcode . Sets the device's passcode, which\n  is used when accessing secure interfaces.    Default Language . Sets the default language used\n  by the device if a specific language is not requested.    Device Name . Sets the device's name.    The Configuration Service exposes a simple secured\ninterface to provide this service. See the Configuration Interface Definition \nfor more details.",
            "title": "Concepts and Terminology"
        },
        {
            "location": "/learn/base-services/configuration/#learn-more",
            "text": "Learn more about the Configuration Interface Definition  Download the SDK  and  build  Learn more about the Configuration APIs",
            "title": "Learn More"
        },
        {
            "location": "/learn/base-services/configuration/interface-14-02/",
            "text": "Configuration Interface Definition - 14.02\n\n\nWarning: This is not the latest interface definition.\n\n\nGo here for latest Configuration Interface Definition\n\n\nIntroduction\n\n\nPurpose\n\n\nThis document provides the specification for the AllJoyn\n \nConfig interface. The Config interface is a secure interface \nthat provides the functionality to perform device-specific\nconfiguration and actions. It is expected that an OEM's developed \napplication for the device (referred to as System App) will \nbundle this service framework.\n\n\nScope\n\n\nThis document is targeted for OEMs who develop AllJoyn-enabled \napplications that configure and perform device specific actions. \nThis interface specification is useful if the OEMs intend to \ndevelop or extend the Configuration service framework on their own.\n\n\nReferences\n\n\nExcept for supporting information, the following are reference \ndocuments found on the AllSeen Alliance web site's Docs/Downloads section.\n\n\n\n\nAllJoyn\n Framework Tutorial\n\n\nIntroduction to AllJoyn\n Thin Client\n\n\nAllJoyn\n Data Type Signature\n\n\nRFC 5646: Tags for Identifying Languages\n\n\n\n\nSpecification Overview\n\n\nThe Configuration service framework exposes device-specific \nmethods such as restart and factory reset, device passcode, \nand device-specific settable attributes such as friendly name \nand default language. It is expected that OEM of the device \nwould take this service framework and bundle it with a single \napplication (system app). The enforcement of singleton instance \nof the Configuration service framework must be performed using \nexplicit guidelines provided to OEMs and application developers \nregarding the usage of the Configuration service framework.\n\n\nFigure 1 illustrates the relationship between software stack \non the device hosting the AllJoyn service framework and \nthe device hosting the AllJoyn client application.\n\n\n\n\nFigure: Configuration service framework architecture within the AllJoyn framework\n\n\nFigure 1 describes the scope of Configuration service \nframework and About feature in a multiple applications-per-device \nscenario. The following system behavior should be noted:\n\n\n\n\nThe system application bundles the Configuration service \nframework and provides a remote mechanism to invoke device-specific \nconfiguration.\n\n\nIt could be that OEMs provide equivalent (as exposed by the \nConfiguration service framework) functionality via the local \nuser interface.\n\n\n\n\nTypical Call Flows\n\n\nThis section highlights call flows that involve the Configuration \nservice framework. The system app on the AllJoyn service framework \ndevice is involved in these call flows.\n\n\nDevice configuration change\n\n\nFigure 2 illustrates a sample call flow where an Alljoyn \napp executing on an AllJoyn client device discovers the Configuration \nservice framework via announcement and subsequently performs methods \nas specified in the Config interface to retrieve and update configuration \ndata. See \nConfig Interface\n for complete details.\n\n\n\n\nFigure: Device configuration change call flow\n\n\nFactory reset\n\n\nFigure 3 illustrates a sample call flow where an Alljoyn \napp executing on an AllJoyn client device discovers the Configuration \nservice framework via announcement, and subsequently performs methods \nas specified in the Config interface to retrieve the configuration \ndata and perform factory reset action if needed. See \nConfig Interface\n \nfor complete details.\n\n\n\n\nFigure: Device factory reset call flow\n\n\nError handling\n\n\nThe method calls in the Config interface use the AllJoyn error \nmessage handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE) to set \nthe error name and error message.\n\n\nTable 1 lists the possible errors raised by the Config interface.\n\n\nTable 1. Configuration service framework interface errors\n\n\n\n\n\n\n\n\nError name\n\n\nError message\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.InvalidValue\n\n\nInvalid value\n\n\n\n\n\n\norg.alljoyn.Error.FeatureNotAvailable\n\n\nFeature not available\n\n\n\n\n\n\norg.alljoyn.Error.LanguageNotSupported\n\n\nThe language specified is not supported\n\n\n\n\n\n\n\n\nConfig Interface\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Config\n\n\n1\n\n\nyes\n\n\n/Config\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\nThe following methods are exposed by the object that implements \nthe org.alljoyn.Config interface.\n\n\nFactoryReset\n\n\nInputs\n\n\nNone.\n\n\nOutput\n\n\nNone.\n\n\nDescription\n\n\nDirect the device to disconnect from the personal AP, clear all \npreviously configured data, and start the softAP mode.\n\n\nSome devices may not support this feature. In such a case, \nthe error org.alljoyn.Error.FeatureNotAvailable will be returned \nin the AllJoyn response.\n\n\nSetPasscode\n\n\nInputs\n\n\n\n\n\n\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndaemonRealm\n\n\ns\n\n\nN/A\n\n\nIdentifies the daemon's identity for secure access. This parameter is currently ignored by the Configuration service framework.\n\n\n\n\n\n\nnewPasscode\n\n\ns\n\n\nN/A\n\n\nPassphrase that will be utilized for the secure Config interface.\n\n\n\n\n\n\n\n\nOutput\n\n\nNone.\n\n\nDescription\n\n\nUpdate the passcode to be used for the org.alljoyn.Config interface \nwhich is secure. The default passcode is 000000 until it is overwritten \nby SetPasscode method.\n\n\nGetConfigurations\n\n\nInputs\n\n\n\n\n\n\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlanguageTag\n\n\ns\n\n\nIETF language tags specified by RFC 5646\n\n\nLanguage tag used to retrieve Config fields.\n\n\n\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nParameter name\n\n\nReturn signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nconfigData\n\n\na{sv}\n\n\nReturns configuration fields in the form of dictionary. See \nConfiguration map fields\n for the default set of Configuration map fields.\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nReturn all the configurable fields specified within the scope of \nthe Config interface.\n\n\nError handling regarding the input parameter:\n\n\n\n\nIf language tag is not specified (i.e., \"\"), configuration \nfields based on device's default language are returned.\n\n\nIf a language tag is not supported by the device, AllJoyn \nerror org.alljoyn.Error.LanguageNotSupported is returned.\n\n\n\n\nUpdateConfigurations\n\n\nInputs\n\n\n\n\n\n\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlanguageTag\n\n\ns\n\n\nIETF language tags specified by RFC 5646\n\n\nIdentifies the language tag.\n\n\n\n\n\n\nconfigMap\n\n\na{sv}\n\n\nSee \nConfiguration map fields\n\n\nSet of configuration fields being updated.\n\n\n\n\n\n\n\n\nOutputs\n\n\nNone.\n\n\nDescription\n\n\nProvide a mechanism to update the configuration fields.\n\n Whenever there is an error in updating the value for a specific \nfield in the configMap, the error org.alljoyn.Error.InvalidValue \nwill be returned. The error message will contain the field name \nof the invalid field.\n\n If a language tag is not supported by the device, the error \norg.alljoyn.Error.LanguageNotSupported is returned.\n\n\nResetConfigurations\n\n\nInputs\n\n\n\n\n\n\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlanguageTag\n\n\ns\n\n\nIETF language tags specified by RFC 5646\n\n\nIdentifies the language tag.\n\n\n\n\n\n\nfieldList\n\n\nas\n\n\nN/A\n\n\nList of fields or configuration items that are being reset.\n\n\n\n\n\n\n\n\nOutputs\n\n\nNone.\n\n\nDescription\n\n\nProvide a mechanism to reset (i.e., value is restored to factory \ndefault but the field itself is retained) values of configuration fields.\n\n\n\n\nWhenever there is an error related to fieldList, the error \norg.alljoyn.Error.InvalidValue will be returned. The error \nmessage will contain the field name of the invalid field.\n\n\nIf a language tag is not supported by the device, the error \norg.alljoyn.Error.LanguageNotSupported is returned.\n\n\n\n\nConfiguration map fields\n\n\nTable 2 lists the known configuration fields that \nare part of the configMap parameter fields. The OEM or \napplication developer can add additional fields.\n\n\nTable 2: configMap parameter fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nLocalized\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nno\n\n\ns\n\n\nDefault language supported by the device. IETF language tags specified by RFC 5646.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* If the parameter is not set as per the RFC, the error org.alljoyn.Error.InvalidValue is returned.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* If a language tag is not supported by the device, the error org.alljoyn.Error.LanguageNotSupported is returned.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this case, the default language on the device is unchanged.\n\n\n\n\n\n\nDeviceName\n\n\nno\n\n\nyes\n\n\ns\n\n\nDevice name assigned by the user. The device name appears on the UI as the friendly name of the device.\n\n\n\n\n\n\n\n\nIntrospection XML\n\n\nnode name=\n/Config\n xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n \nxsi:noNamespaceSchemaLocation=\nhttp://www.allseenalliance.org/schemas/introspect.xsd\n\n\n   \ninterface name=\norg.alljoyn.Config\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nmethod name=\nFactoryReset\n\n         \nannotation name=\norg.freedesktop.DBus.Method.NoReply\n value=\ntrue\n/\n\n      \n/method\n\n      \nmethod name=\nRestart\n\n         \nannotation name=\norg.freedesktop.DBus.Method.NoReply\n value=\ntrue\n/\n\n      \n/method\n\n      \nmethod name=\nSetPasscode\n\n         \narg name=\ndaemonRealm\n type=\ns\n direction=\nin\n/\n\n         \narg name=\nnewPasscode\n type=\nay\n direction=\nin\n/\n\n      \n/method\n\n      \nmethod name=\nGetConfigurations\n\n         \narg name=\nlanguageTag\n type=\ns\n direction=\nin\n/\n\n         \narg name=\nconfigData\n type=\na{sv}\n direction=\nout\n/\n\n      \n/method\n\n      \nmethod name=\nUpdateConfigurations\n\n         \narg name=\nlanguageTag\n type=\ns\n direction=\nin\n/\n\n         \narg name=\nconfigMap\n type=\na{sv}\n direction=\nin\n/\n\n      \n/method\n\n      \nmethod name=\nResetConfigurations\n\n         \narg name=\nlanguageTag\n type=\ns\n direction=\nin\n/\n\n         \narg name=\nfieldList\n type=\nas\n direction=\nin\n/\n\n      \n/method\n\n   \n/interface\n\n\n/node",
            "title": "Interface 14 02"
        },
        {
            "location": "/learn/base-services/configuration/interface-14-02/#configuration-interface-definition-1402",
            "text": "Warning: This is not the latest interface definition.  Go here for latest Configuration Interface Definition",
            "title": "Configuration Interface Definition - 14.02"
        },
        {
            "location": "/learn/base-services/configuration/interface-14-02/#introduction",
            "text": "Purpose  This document provides the specification for the AllJoyn  \nConfig interface. The Config interface is a secure interface \nthat provides the functionality to perform device-specific\nconfiguration and actions. It is expected that an OEM's developed \napplication for the device (referred to as System App) will \nbundle this service framework.  Scope  This document is targeted for OEMs who develop AllJoyn-enabled \napplications that configure and perform device specific actions. \nThis interface specification is useful if the OEMs intend to \ndevelop or extend the Configuration service framework on their own.  References  Except for supporting information, the following are reference \ndocuments found on the AllSeen Alliance web site's Docs/Downloads section.   AllJoyn  Framework Tutorial  Introduction to AllJoyn  Thin Client  AllJoyn  Data Type Signature  RFC 5646: Tags for Identifying Languages",
            "title": "Introduction"
        },
        {
            "location": "/learn/base-services/configuration/interface-14-02/#specification-overview",
            "text": "The Configuration service framework exposes device-specific \nmethods such as restart and factory reset, device passcode, \nand device-specific settable attributes such as friendly name \nand default language. It is expected that OEM of the device \nwould take this service framework and bundle it with a single \napplication (system app). The enforcement of singleton instance \nof the Configuration service framework must be performed using \nexplicit guidelines provided to OEMs and application developers \nregarding the usage of the Configuration service framework.  Figure 1 illustrates the relationship between software stack \non the device hosting the AllJoyn service framework and \nthe device hosting the AllJoyn client application.   Figure: Configuration service framework architecture within the AllJoyn framework  Figure 1 describes the scope of Configuration service \nframework and About feature in a multiple applications-per-device \nscenario. The following system behavior should be noted:   The system application bundles the Configuration service \nframework and provides a remote mechanism to invoke device-specific \nconfiguration.  It could be that OEMs provide equivalent (as exposed by the \nConfiguration service framework) functionality via the local \nuser interface.",
            "title": "Specification Overview"
        },
        {
            "location": "/learn/base-services/configuration/interface-14-02/#typical-call-flows",
            "text": "This section highlights call flows that involve the Configuration \nservice framework. The system app on the AllJoyn service framework \ndevice is involved in these call flows.  Device configuration change  Figure 2 illustrates a sample call flow where an Alljoyn \napp executing on an AllJoyn client device discovers the Configuration \nservice framework via announcement and subsequently performs methods \nas specified in the Config interface to retrieve and update configuration \ndata. See  Config Interface  for complete details.   Figure: Device configuration change call flow  Factory reset  Figure 3 illustrates a sample call flow where an Alljoyn \napp executing on an AllJoyn client device discovers the Configuration \nservice framework via announcement, and subsequently performs methods \nas specified in the Config interface to retrieve the configuration \ndata and perform factory reset action if needed. See  Config Interface  \nfor complete details.   Figure: Device factory reset call flow  Error handling  The method calls in the Config interface use the AllJoyn error \nmessage handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE) to set \nthe error name and error message.  Table 1 lists the possible errors raised by the Config interface.  Table 1. Configuration service framework interface errors     Error name  Error message      org.alljoyn.Error.InvalidValue  Invalid value    org.alljoyn.Error.FeatureNotAvailable  Feature not available    org.alljoyn.Error.LanguageNotSupported  The language specified is not supported",
            "title": "Typical Call Flows"
        },
        {
            "location": "/learn/base-services/configuration/interface-14-02/#config-interface",
            "text": "Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Config  1  yes  /Config     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number     Methods  The following methods are exposed by the object that implements \nthe org.alljoyn.Config interface.  FactoryReset  Inputs  None.  Output  None.  Description  Direct the device to disconnect from the personal AP, clear all \npreviously configured data, and start the softAP mode.  Some devices may not support this feature. In such a case, \nthe error org.alljoyn.Error.FeatureNotAvailable will be returned \nin the AllJoyn response.  SetPasscode  Inputs     Parameter name  Signature  List of values  Description      daemonRealm  s  N/A  Identifies the daemon's identity for secure access. This parameter is currently ignored by the Configuration service framework.    newPasscode  s  N/A  Passphrase that will be utilized for the secure Config interface.     Output  None.  Description  Update the passcode to be used for the org.alljoyn.Config interface \nwhich is secure. The default passcode is 000000 until it is overwritten \nby SetPasscode method.  GetConfigurations  Inputs     Parameter name  Signature  List of values  Description      languageTag  s  IETF language tags specified by RFC 5646  Language tag used to retrieve Config fields.     Outputs     Parameter name  Return signature  Description       configData  a{sv}  Returns configuration fields in the form of dictionary. See  Configuration map fields  for the default set of Configuration map fields.      Description  Return all the configurable fields specified within the scope of \nthe Config interface.  Error handling regarding the input parameter:   If language tag is not specified (i.e., \"\"), configuration \nfields based on device's default language are returned.  If a language tag is not supported by the device, AllJoyn \nerror org.alljoyn.Error.LanguageNotSupported is returned.   UpdateConfigurations  Inputs     Parameter name  Signature  List of values  Description      languageTag  s  IETF language tags specified by RFC 5646  Identifies the language tag.    configMap  a{sv}  See  Configuration map fields  Set of configuration fields being updated.     Outputs  None.  Description  Provide a mechanism to update the configuration fields.  Whenever there is an error in updating the value for a specific \nfield in the configMap, the error org.alljoyn.Error.InvalidValue \nwill be returned. The error message will contain the field name \nof the invalid field.  If a language tag is not supported by the device, the error \norg.alljoyn.Error.LanguageNotSupported is returned.  ResetConfigurations  Inputs     Parameter name  Signature  List of values  Description      languageTag  s  IETF language tags specified by RFC 5646  Identifies the language tag.    fieldList  as  N/A  List of fields or configuration items that are being reset.     Outputs  None.  Description  Provide a mechanism to reset (i.e., value is restored to factory \ndefault but the field itself is retained) values of configuration fields.   Whenever there is an error related to fieldList, the error \norg.alljoyn.Error.InvalidValue will be returned. The error \nmessage will contain the field name of the invalid field.  If a language tag is not supported by the device, the error \norg.alljoyn.Error.LanguageNotSupported is returned.   Configuration map fields  Table 2 lists the known configuration fields that \nare part of the configMap parameter fields. The OEM or \napplication developer can add additional fields.  Table 2: configMap parameter fields     Field name  Required  Localized  Signature  Description      DefaultLanguage  yes  no  s  Default language supported by the device. IETF language tags specified by RFC 5646.        * If the parameter is not set as per the RFC, the error org.alljoyn.Error.InvalidValue is returned.        * If a language tag is not supported by the device, the error org.alljoyn.Error.LanguageNotSupported is returned.        In this case, the default language on the device is unchanged.    DeviceName  no  yes  s  Device name assigned by the user. The device name appears on the UI as the friendly name of the device.",
            "title": "Config Interface"
        },
        {
            "location": "/learn/base-services/configuration/interface-14-02/#introspection-xml",
            "text": "node name= /Config  xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  \nxsi:noNamespaceSchemaLocation= http://www.allseenalliance.org/schemas/introspect.xsd \n\n    interface name= org.alljoyn.Config \n       property name= Version  type= q  access= read / \n       method name= FactoryReset \n          annotation name= org.freedesktop.DBus.Method.NoReply  value= true / \n       /method \n       method name= Restart \n          annotation name= org.freedesktop.DBus.Method.NoReply  value= true / \n       /method \n       method name= SetPasscode \n          arg name= daemonRealm  type= s  direction= in / \n          arg name= newPasscode  type= ay  direction= in / \n       /method \n       method name= GetConfigurations \n          arg name= languageTag  type= s  direction= in / \n          arg name= configData  type= a{sv}  direction= out / \n       /method \n       method name= UpdateConfigurations \n          arg name= languageTag  type= s  direction= in / \n          arg name= configMap  type= a{sv}  direction= in / \n       /method \n       method name= ResetConfigurations \n          arg name= languageTag  type= s  direction= in / \n          arg name= fieldList  type= as  direction= in / \n       /method \n    /interface  /node",
            "title": "Introspection XML"
        },
        {
            "location": "/learn/base-services/configuration/interface/",
            "text": "Configuration Interface Definition\n\n\nRelease History\n\n\nTo access a previous version of this document, click the release version link below.\n\n\n\n\n\n\n\n\nRelease version\n\n\nDate\n\n\nWhat changed\n\n\n\n\n\n\n\n\n\n\n14.02\n\n\n2/28/2014\n\n\nConfig interface version 1 was added.\n\n\n\n\n\n\n14.06\n\n\n6/30/2014\n\n\nNo updates\n\n\n\n\n\n\n14.06 Update 1\n\n\n9/29/2014\n\n\nUpdated the document title and Overview chapter title (changed from Specification to Definition).\nAdded the release version number to the document title for version tracking.\nAdded a note in the Definition Overview chapter to address the AllSeen Alliance Compliance and Certification program.\nAdded a Mandatory column for method and signal parameters to support the AllSeen Alliance Compliance and Certification program.\nAdded configData output parameter information to the GetConfigurations method.\n\n\n\n\n\n\n14.12\n\n\n12/17/2014\n\n\nCleanup to make requirements for methods and signals more clear.\n\n\n\n\n\n\n\n\nDefinition Overview\n\n\nThe Configuration service framework exposes device-specific \nmethods such as restart and factory reset, device passcode, \nand device-specific settable attributes such as friendly name \nand default language. It is expected that OEM of the device \nwould take this service framework and bundle it with a single \napplication (system app). The enforcement of singleton instance \nof the Configuration service framework must be performed using \nexplicit guidelines provided to OEMs and application developers \nregarding the usage of the Configuration service framework.\n\n\nThe following figure  illustrates the relationship between \nsoftware stack on the device hosting the AllJoyn\n service \nframework and the device hosting the AllJoyn client application.\n\n\n\n\nFigure:\n Configuration service framework architecture within the AllJoyn framework\n\n\nThe figure describes the scope of Configuration service \nframework and About feature in a multiple applications-per-device \nscenario. The following system behavior should be noted:\n\n\n\n\nThe system application bundles the Configuration service \nframework and provides a remote mechanism to invoke device-specific \nconfiguration.\n\n\nIt could be that OEMs provide equivalent (as exposed by the \nConfiguration service framework) functionality via the local \nuser interface.\n\n\n\n\nNOTE:\n All methods and signals are considered mandatory to support \nthe AllSeen Alliance Compliance and Certification program. \n\n\nTypical Call Flows\n\n\nThis section highlights call flows that involve the Configuration \nservice framework. The system app on the AllJoyn service framework \ndevice is involved in these call flows.\n\n\nDevice configuration change\n\n\nThe following figure illustrates a sample call flow where an Alljoyn \napp executing on an AllJoyn client device discovers the Configuration \nservice framework via announcement and subsequently performs methods \nas specified in the Config interface to retrieve and update configuration \ndata. See \nConfig Interface\n for complete details.\n\n\n\n\nFigure:\n Device configuration change call flow\n\n\nFactory reset\n\n\nThe following figure illustrates a sample call flow where an Alljoyn \napp executing on an AllJoyn client device discovers the Configuration \nservice framework via announcement, and subsequently performs methods \nas specified in the Config interface to retrieve the configuration \ndata and perform factory reset action if needed. See \nConfig Interface\n \nfor complete details.\n\n\n\n\nFigure:\n Device factory reset call flow\n\n\nError handling\n\n\nThe method calls in the Config interface use the AllJoyn error \nmessage handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE) to set \nthe error name and error message.\n\n\n\n\n\n\n\n\nError name\n\n\nError message\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.InvalidValue\n\n\nInvalid value\n\n\n\n\n\n\norg.alljoyn.Error.FeatureNotAvailable\n\n\nFeature not available\n\n\n\n\n\n\norg.alljoyn.Error.LanguageNotSupported\n\n\nThe language specified is not supported\n\n\n\n\n\n\n\n\nConfig Interface\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Config\n\n\n1\n\n\nyes\n\n\n/Config\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\nThe following methods are exposed by the object that implements \nthe \norg.alljoyn.Config\n interface.\n\n\nFactoryReset\n\n\nMessage arguments\n\n\nNone.\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nDirects the device to disconnect from the personal AP, clear all \npreviously configured data, and start the softAP mode.\n\n\nError reply\n\n\n\n\n\n\n\n\nError\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.FeatureNotAvailable\n\n\nReturned in the AllJoyn response if the device does not support this feature.\n\n\n\n\n\n\n\n\nSetPasscode('say')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\ndaemonRealm\n\n\ns\n\n\nN/A\n\n\nIdentifies the daemon's identity for secure access. This parameter is currently ignored by the Configuration service framework.\n\n\n\n\n\n\n1\n\n\nnewPasscode\n\n\nay\n\n\nN/A\n\n\nPassphrase that will be utilized for the secure Config interface.\n\n\n\n\n\n\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nUpdates the passcode to be used for the \norg.alljoyn.Config\n interface \nwhich is secure. The default passcode is 000000 until it is overwritten \nby \nSetPasscode\n.\n\n\na{sv} GetConfigurations('s')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nlanguageTag\n\n\ns\n\n\nIETF language tags specified by RFC 5646.\n\n\nLanguage tag used to retrieve Config fields.\n\n\n\n\n\n\n\n\nReply arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nReturn signature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nconfigData\n\n\na{sv}\n\n\nN/A\n\n\nReturns configuration fields in the form of dictionary. See \nConfiguration map fields\n for the default set of Configuration map fields.\n\n\n\n\n\n\n\n\nDescription\n\n\nReturns all the configurable fields specified within the scope of \nthe Config interface. If language tag is not specified (i.e., \"\"), \nconfiguration fields based on the device's default language are returned.\n\n\nError reply**\n\n\n\n\n\n\n\n\nError\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.LanguageNotSupported\n\n\nReturned if a language tag is not supported by the device.\n\n\n\n\n\n\n\n\nUpdateConfigurations('sa{sv}')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nlanguageTag\n\n\ns\n\n\nIETF language tags specified by RFC 5646.\n\n\nIdentifies the language tag.\n\n\n\n\n\n\n1\n\n\nconfigMap\n\n\na{sv}\n\n\nSee \nConfiguration map fields\n\n\nSet of configuration fields being updated.\n\n\n\n\n\n\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nProvides a mechanism to update the configuration fields.\n\n\nError reply\n\n\n\n\n\n\n\n\nError\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.InvalidValue\n\n\nReturned whenever there is an error in updating the value for a specific field in the configMap. The error message will contain the field name of the invalid field.\n\n\n\n\n\n\norg.alljoyn.Error.LanguageNotSupported\n\n\nReturned if a language tag is not supported by the device.\n\n\n\n\n\n\n\n\nResetConfigurations('sas')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nlanguageTag\n\n\ns\n\n\nIETF language tags specified by RFC 5646.\n\n\nIdentifies the language tag.\n\n\n\n\n\n\n1\n\n\nfieldList\n\n\nas\n\n\nN/A\n\n\nList of fields or configuration items that are being reset.\n\n\n\n\n\n\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nProvides a mechanism to reset (i.e., value is restored to factory \ndefault but the field itself is retained) values of configuration fields.\n\n\nError reply\n\n\n\n\n\n\n\n\nError\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.InvalidValue\n\n\nReturned whenever there is an error related to fieldList. The error message will contain the field name of the invalid field.\n\n\n\n\n\n\norg.alljoyn.Error.LanguageNotSupported\n\n\nReturned if a language tag is not supported by the device.\n\n\n\n\n\n\n\n\nConfiguration map fields\n\n\nThe following table lists the known configuration fields that \nare part of the configMap parameter fields. The OEM or \napplication developer can add additional fields.\n\n\n\n\n\n\n\n\nField name\n\n\nMandatory\n\n\nLocalized\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nno\n\n\ns\n\n\nDefault language supported by the device. IETF language tags specified by RFC 5646.\nIf the parameter is not set as per the RFC, the error \norg.alljoyn.Error.InvalidValue\n is returned.\nIf a language tag is not supported by the device, the error \norg.alljoyn.Error.LanguageNotSupported\n is returned.\nIn this case, the default language on the device is unchanged.\n\n\n\n\n\n\nDeviceName\n\n\nno\n\n\nyes\n\n\ns\n\n\nDevice name assigned by the user. The device name appears on the UI as the friendly name of the device.\n\n\n\n\n\n\n\n\nIntrospection XML\n\n\nnode name=\n/Config\n xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n \nxsi:noNamespaceSchemaLocation=\nhttp://www.allseenalliance.org/schemas/introspect.xsd\n\n\n   \ninterface name=\norg.alljoyn.Config\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nmethod name=\nFactoryReset\n\n         \nannotation name=\norg.freedesktop.DBus.Method.NoReply\n value=\ntrue\n/\n\n      \n/method\n\n      \nmethod name=\nRestart\n\n         \nannotation name=\norg.freedesktop.DBus.Method.NoReply\n value=\ntrue\n/\n\n      \n/method\n\n      \nmethod name=\nSetPasscode\n\n         \narg name=\ndaemonRealm\n type=\ns\n direction=\nin\n/\n\n         \narg name=\nnewPasscode\n type=\nay\n direction=\nin\n/\n\n      \n/method\n\n      \nmethod name=\nGetConfigurations\n\n         \narg name=\nlanguageTag\n type=\ns\n direction=\nin\n/\n\n         \narg name=\nconfigData\n type=\na{sv}\n direction=\nout\n/\n\n      \n/method\n\n      \nmethod name=\nUpdateConfigurations\n\n         \narg name=\nlanguageTag\n type=\ns\n direction=\nin\n/\n\n         \narg name=\nconfigMap\n type=\na{sv}\n direction=\nin\n/\n\n      \n/method\n\n      \nmethod name=\nResetConfigurations\n\n         \narg name=\nlanguageTag\n type=\ns\n direction=\nin\n/\n\n         \narg name=\nfieldList\n type=\nas\n direction=\nin\n/\n\n      \n/method\n\n   \n/interface\n\n\n/node",
            "title": "Interface"
        },
        {
            "location": "/learn/base-services/configuration/interface/#configuration-interface-definition",
            "text": "",
            "title": "Configuration Interface Definition"
        },
        {
            "location": "/learn/base-services/configuration/interface/#release-history",
            "text": "To access a previous version of this document, click the release version link below.     Release version  Date  What changed      14.02  2/28/2014  Config interface version 1 was added.    14.06  6/30/2014  No updates    14.06 Update 1  9/29/2014  Updated the document title and Overview chapter title (changed from Specification to Definition). Added the release version number to the document title for version tracking. Added a note in the Definition Overview chapter to address the AllSeen Alliance Compliance and Certification program. Added a Mandatory column for method and signal parameters to support the AllSeen Alliance Compliance and Certification program. Added configData output parameter information to the GetConfigurations method.    14.12  12/17/2014  Cleanup to make requirements for methods and signals more clear.",
            "title": "Release History"
        },
        {
            "location": "/learn/base-services/configuration/interface/#definition-overview",
            "text": "The Configuration service framework exposes device-specific \nmethods such as restart and factory reset, device passcode, \nand device-specific settable attributes such as friendly name \nand default language. It is expected that OEM of the device \nwould take this service framework and bundle it with a single \napplication (system app). The enforcement of singleton instance \nof the Configuration service framework must be performed using \nexplicit guidelines provided to OEMs and application developers \nregarding the usage of the Configuration service framework.  The following figure  illustrates the relationship between \nsoftware stack on the device hosting the AllJoyn  service \nframework and the device hosting the AllJoyn client application.   Figure:  Configuration service framework architecture within the AllJoyn framework  The figure describes the scope of Configuration service \nframework and About feature in a multiple applications-per-device \nscenario. The following system behavior should be noted:   The system application bundles the Configuration service \nframework and provides a remote mechanism to invoke device-specific \nconfiguration.  It could be that OEMs provide equivalent (as exposed by the \nConfiguration service framework) functionality via the local \nuser interface.   NOTE:  All methods and signals are considered mandatory to support \nthe AllSeen Alliance Compliance and Certification program.",
            "title": "Definition Overview"
        },
        {
            "location": "/learn/base-services/configuration/interface/#typical-call-flows",
            "text": "This section highlights call flows that involve the Configuration \nservice framework. The system app on the AllJoyn service framework \ndevice is involved in these call flows.  Device configuration change  The following figure illustrates a sample call flow where an Alljoyn \napp executing on an AllJoyn client device discovers the Configuration \nservice framework via announcement and subsequently performs methods \nas specified in the Config interface to retrieve and update configuration \ndata. See  Config Interface  for complete details.   Figure:  Device configuration change call flow  Factory reset  The following figure illustrates a sample call flow where an Alljoyn \napp executing on an AllJoyn client device discovers the Configuration \nservice framework via announcement, and subsequently performs methods \nas specified in the Config interface to retrieve the configuration \ndata and perform factory reset action if needed. See  Config Interface  \nfor complete details.   Figure:  Device factory reset call flow  Error handling  The method calls in the Config interface use the AllJoyn error \nmessage handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE) to set \nthe error name and error message.     Error name  Error message      org.alljoyn.Error.InvalidValue  Invalid value    org.alljoyn.Error.FeatureNotAvailable  Feature not available    org.alljoyn.Error.LanguageNotSupported  The language specified is not supported",
            "title": "Typical Call Flows"
        },
        {
            "location": "/learn/base-services/configuration/interface/#config-interface",
            "text": "Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Config  1  yes  /Config     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number     Methods  The following methods are exposed by the object that implements \nthe  org.alljoyn.Config  interface.  FactoryReset  Message arguments  None.  Reply arguments  None.  Description  Directs the device to disconnect from the personal AP, clear all \npreviously configured data, and start the softAP mode.  Error reply     Error  Description      org.alljoyn.Error.FeatureNotAvailable  Returned in the AllJoyn response if the device does not support this feature.     SetPasscode('say')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  daemonRealm  s  N/A  Identifies the daemon's identity for secure access. This parameter is currently ignored by the Configuration service framework.    1  newPasscode  ay  N/A  Passphrase that will be utilized for the secure Config interface.     Reply arguments  None.  Description  Updates the passcode to be used for the  org.alljoyn.Config  interface \nwhich is secure. The default passcode is 000000 until it is overwritten \nby  SetPasscode .  a{sv} GetConfigurations('s')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  languageTag  s  IETF language tags specified by RFC 5646.  Language tag used to retrieve Config fields.     Reply arguments     Argument  Parameter name  Return signature  List of values  Description      0  configData  a{sv}  N/A  Returns configuration fields in the form of dictionary. See  Configuration map fields  for the default set of Configuration map fields.     Description  Returns all the configurable fields specified within the scope of \nthe Config interface. If language tag is not specified (i.e., \"\"), \nconfiguration fields based on the device's default language are returned.",
            "title": "Config Interface"
        },
        {
            "location": "/learn/base-services/configuration/interface/#error-reply",
            "text": "Error  Description      org.alljoyn.Error.LanguageNotSupported  Returned if a language tag is not supported by the device.     UpdateConfigurations('sa{sv}')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  languageTag  s  IETF language tags specified by RFC 5646.  Identifies the language tag.    1  configMap  a{sv}  See  Configuration map fields  Set of configuration fields being updated.     Reply arguments  None.  Description  Provides a mechanism to update the configuration fields.  Error reply     Error  Description      org.alljoyn.Error.InvalidValue  Returned whenever there is an error in updating the value for a specific field in the configMap. The error message will contain the field name of the invalid field.    org.alljoyn.Error.LanguageNotSupported  Returned if a language tag is not supported by the device.     ResetConfigurations('sas')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  languageTag  s  IETF language tags specified by RFC 5646.  Identifies the language tag.    1  fieldList  as  N/A  List of fields or configuration items that are being reset.     Reply arguments  None.  Description  Provides a mechanism to reset (i.e., value is restored to factory \ndefault but the field itself is retained) values of configuration fields.  Error reply     Error  Description      org.alljoyn.Error.InvalidValue  Returned whenever there is an error related to fieldList. The error message will contain the field name of the invalid field.    org.alljoyn.Error.LanguageNotSupported  Returned if a language tag is not supported by the device.     Configuration map fields  The following table lists the known configuration fields that \nare part of the configMap parameter fields. The OEM or \napplication developer can add additional fields.     Field name  Mandatory  Localized  Signature  Description      DefaultLanguage  yes  no  s  Default language supported by the device. IETF language tags specified by RFC 5646. If the parameter is not set as per the RFC, the error  org.alljoyn.Error.InvalidValue  is returned. If a language tag is not supported by the device, the error  org.alljoyn.Error.LanguageNotSupported  is returned. In this case, the default language on the device is unchanged.    DeviceName  no  yes  s  Device name assigned by the user. The device name appears on the UI as the friendly name of the device.",
            "title": "Error reply**"
        },
        {
            "location": "/learn/base-services/configuration/interface/#introspection-xml",
            "text": "node name= /Config  xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  \nxsi:noNamespaceSchemaLocation= http://www.allseenalliance.org/schemas/introspect.xsd \n\n    interface name= org.alljoyn.Config \n       property name= Version  type= q  access= read / \n       method name= FactoryReset \n          annotation name= org.freedesktop.DBus.Method.NoReply  value= true / \n       /method \n       method name= Restart \n          annotation name= org.freedesktop.DBus.Method.NoReply  value= true / \n       /method \n       method name= SetPasscode \n          arg name= daemonRealm  type= s  direction= in / \n          arg name= newPasscode  type= ay  direction= in / \n       /method \n       method name= GetConfigurations \n          arg name= languageTag  type= s  direction= in / \n          arg name= configData  type= a{sv}  direction= out / \n       /method \n       method name= UpdateConfigurations \n          arg name= languageTag  type= s  direction= in / \n          arg name= configMap  type= a{sv}  direction= in / \n       /method \n       method name= ResetConfigurations \n          arg name= languageTag  type= s  direction= in / \n          arg name= fieldList  type= as  direction= in / \n       /method \n    /interface  /node",
            "title": "Introspection XML"
        },
        {
            "location": "/learn/base-services/controlpanel/",
            "text": "Control Panel Service \u63a7\u5236\u9762\u677f\u670d\u52a1\n\n\nThe AllJoyn\n Control Panel Service framework provides a\nsimple way for applications to render a UI widget set to\ninteract with remote devices. The framework is composed of\na standard set of interfaces, that when implemented on specific\nobject paths, allows for dynamic rendering of widgets in a UI\non remote devices. The Control Panel Service abstracts the\ndetails of the AllJoyn Control Panel interface by allowing\nthe use of higher level APIs and a Code Generator to create\nthe widget elements. A Control Panel does not dictate how a\nUI should look; it provides hints/information about what an\nelement is capable of, where it should be rendered on a screen,\nand synchronization with other applications.\nAllJoyn\n \u63a7\u5236\u9762\u677f\u670d\u52a1\u67b6\u6784\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4fbf\u6377\u7684\u4e0e\u8fdc\u7a0b\u8bbe\u5907\u8fdb\u884c\u4e92\u52a8\u7684\u7528\u6237\u754c\u9762\u5c0f\u90e8\u4ef6\u3002\u8be5\u67b6\u6784\u662f\u6807\u51c6\u63a5\u53e3\u7684\u4e00\u90e8\u5206\uff0c\u5f53\u88ab\u8bbe\u5b9a\u4e86\u7279\u5b9a\u7684\u5bf9\u8c61\u8def\u5f84\u65f6\uff0c\u80fd\u591f\u52a8\u6001\u5448\u73b0\u5728\u8fdc\u7a0b\u8bbe\u5907\u4e0a\u7684\u7528\u6237\u754c\u9762\u4e2d\u7684\u5c0f\u90e8\u4ef6\u3002\u63a7\u5236\u9762\u677f\u670d\u52a1\u901a\u8fc7\u5141\u8bb8\u4f7f\u7528\u8f83\u9ad8\u7ea7\u7684 API \u548c\u4ee3\u7801\u751f\u6210\u5668\u521b\u5efa\u5c0f\u90e8\u4ef6\u5143\u7d20\uff0c\u62bd\u8c61 AllJoyn \u63a7\u5236\u9762\u677f\u63a5\u53e3\u7684\u7ec6\u8282\u3002\n\n\nConcepts and Terminology \u6982\u5ff5\u548c\u672f\u8bed\n\n\nController and Controllee \u63a7\u5236\u8005\u548c\u53d7\u63a7\u5236\u8005\n\n\nTwo roles exist: \u6709\u4e24\u4e2a\u89d2\u8272\uff1a\n\n Controller. This is the application that renders the control panel. \u63a7\u5236\u8005\u3002\u64cd\u7eb5\u63a7\u5236\u9762\u677f\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\n Controlee. This is the application that advertises the control panel. \u53d7\u63a7\u5236\u548c\u3002\u5e7f\u544a\u63a7\u5236\u9762\u677f\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nControl Panel \u63a7\u5236\u9762\u677f\n\n\nCollection of Widgets that allow a user to interact with a device.\nA control panel is defined and announced by a Controllee; and\ndiscovered and displayed by a Controller. A device can have more\nthan one, and can be defined on a per-language basis.\n\u5141\u8bb8\u7528\u6237\u4e0e\u8bbe\u5907\u8fdb\u884c\u4e92\u52a8\u7684\u4e00\u7ec4\u5c0f\u90e8\u4ef6\u3002\u63a7\u5236\u9762\u677f\u7531\u53d7\u63a7\u5236\u8005\u5b9a\u4e49\u548c\u53d1\u5e03\uff1b\u88ab\u63a7\u5236\u8005\u53d1\u73b0\u548c\u663e\u793a\u3002\u4e00\u4e2a\u8bbe\u5907\u53ef\u4ee5\u6709\u591a\u4e2a\u63a7\u5236\u9762\u677f\uff0c\u53ef\u4ee5\u5206\u522b\u5b9a\u4e49\u8bed\u8a00\u3002\n\n\nControl Panel Service Code Generator \u63a7\u5236\u9762\u677f\u670d\u52a1\u4ee3\u7801\u751f\u6210\u5668\n\n\nA tool that aids in the generation of code that will represent a\nControl Panel. This tool takes in an XML file that defines\nthe control panel widgets and generates corresponding code that\nimplements a specific control panel. Note that XML is not\nused as the internal representation of the widgets in the\nControl Panel Service, nor is it sent over the wire to the\nController. \u4e00\u4e2a\u7528\u6765\u8f85\u52a9\u751f\u6210\u63a7\u5236\u9762\u677f\u7684\u5de5\u5177\u3002\u8fd9\u4e2a\u5de5\u5177\u628a\u5b9a\u4e49\u63a7\u5236\u9762\u677f\u5c0f\u90e8\u4ef6\u7684 XML \u6587\u4ef6\u751f\u6210\u76f8\u5e94\u7684\u4ee3\u7801\u4ee5\u751f\u6210\u7279\u5b9a\u7684\u63a7\u5236\u9762\u677f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cXML \u65e2\u4e0d\u662f\u4e00\u79cd\u5c0f\u90e8\u4ef6\u5728\u63a7\u5236\u9762\u677f\u670d\u52a1\u4e2d\u7684\u5185\u90e8\u8868\u73b0\u5f62\u5f0f\uff0c\u4e5f\u4e0d\u4f1a\u88ab\u53d1\u9001\u7ed9\u63a7\u5236\u8005\u3002\n\n\nTypes of widgets modules \u5c0f\u90e8\u4ef6\u6a21\u5757\u7684\u7c7b\u578b\n\n\nA Control Panel can be expressed in XML, fed through the Code\nGenerator, and connected to developer software. The following\nUI elements make up a Control Panel:\n\u63a7\u5236\u9762\u677f\u4ee5 XML \u5f62\u5f0f\u8868\u793a\uff0c\u7531\u4ee3\u7801\u751f\u6210\u5668\u751f\u6210\uff0c\u8fde\u63a5\u5230\u5f00\u53d1\u8005\u7684\u8f6f\u4ef6\u3002\u4ee5\u4e0b\u7528\u6237\u754c\u9762\u5143\u7d20\u7ec4\u6210\u4e86\u63a7\u5236\u9762\u677f\uff1a\n\n\n\n\nContainer. Container UI element. Allows grouping of widgets\n  together. Must contain at least one child element. Container\u3002Container\u3002Container \u7528\u6237\u754c\u9762\u5143\u7d20\u3002\u5b83\u628a\u5c0f\u90e8\u4ef6\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u5fc5\u987b\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u5b50\u5143\u7d20\u3002\n\n\nLabel. UI element that functions as a read only label of text. Label\u3002\u7528\u4f5c\u53ea\u8bfb\u6807\u7b7e\u7684\u7528\u6237\u754c\u9762\u5143\u7d20\u3002\n\n\nAction. UI element represented by a button that either executes\n  code on the Controllee, or opens a Dialog Widget as a confirmation\n  before executing. Action\u3002\u4f5c\u4e3a\u53d7\u63a7\u5236\u8005\u7684\u4e00\u4e2a\u53ef\u4ee5\u6267\u884c\u4ee3\u7801\u7684\u6309\u94ae\uff0c\u6216\u8005\u5728\u6267\u884c\u524d\u6253\u5f00\u7684\u4e00\u4e2a\u7528\u4e8e\u786e\u8ba4\u7684\u5bf9\u8bdd\u6846\u5c0f\u90e8\u4ef6\u7684\u7528\u6237\u754c\u9762\u5143\u7d20\u3002\n\n\nDialog. UI dialog element. Has a dialog message and up to 3\n  choices of buttons. Dialog. \u7528\u6237\u754c\u9762\u5bf9\u8bdd\u6846\u5143\u7d20\u3002\u6709\u4e00\u4e2a\u5bf9\u8bdd\u6846\u6d88\u606f\u548c 3 \u4e2a\u9009\u9879\u6309\u94ae\u3002\n\n\nProperty. UI element used to display a value and possibly edit\n  it. This widgets via the hints attribute is used to represent a\n  slider, spinner, radio button, etc. Property\u3002\u7528\u4e8e\u663e\u793a\u67d0\u4e00\u503c\u6216\u7f16\u8f91\u5b83\u7684\u7528\u6237\u754c\u9762\u5143\u7d20\u3002\u8fd9\u4e2a\u90e8\u4ef6\u901a\u8fc7\u7ec6\u5fae\u5c5e\u6027\uff0c\u8868\u793a\u6ed1\u5757\u3001\u5fae\u8c03\u6846\u3001\u5355\u9009\u6309\u94ae\u7b49\u3002\n\n\n\n\nUI Adaptive Layer UI \u81ea\u9002\u5e94\u5c42\n\n\nIn order to aid in use and interact with a Control Panel, a helper\nlibrary of sorts is available as part of the framework. The purpose\nof this software layer is to facilitate the discovery of the widget\nelements using AllJoyn Introspection which starts at the object\npath of the Control Panel interface found through\n\nService Level Discovery\n. It then parses each child of\nthis path to determine what each child is and creates the native\nplatform UI element to interact with each discovered widget.\nThe native platform elements are the default UI for the given\nplatform, on Android a button looks like a default Android Button;\non iOS the device will have a native look and feel for and not\nlook like another OS. Developers have the option to overload the\ngeneration of the platform widgets to provide a custom look and feel.\n\u4e3a\u4e86\u8f85\u52a9\u8fd0\u884c\u63a7\u5236\u9762\u677f\uff0c\u6216\u4e0e\u4e4b\u8fdb\u884c\u4e92\u52a8\uff0c\u67b6\u6784\u4e2d\u52a0\u5165\u4e86\u8f85\u52a9\u5206\u5c42\u3002\u8fd9\u4e2a\u8f6f\u4ef6\u5206\u5c42\u7684\u76ee\u7684\u662f\u4fc3\u8fdb\u53d1\u73b0\u4f7f\u7528 AllJoyn \u81ea\u7701\u673a\u5236\u7684\u5c0f\u90e8\u4ef6\u5143\u7d20\u3002\u81ea\u7701\u673a\u5236\u5728\u63a7\u5236\u9762\u677f\u63a5\u53e3\u5bf9\u8c61\u8def\u5f84\u4e2d\u542f\u7528\uff0c\u8fd9\u4e9b\u63a5\u53e3\u5728 \nService Level Discovery\n \u4f53\u73b0\u3002\u5b83\u89e3\u6790\u6bcf\u4e00\u4e2a\u8fd9\u4e2a\u8def\u5f84\u7684\u6bcf\u4e00\u4e2a child\uff0c\u4e86\u89e3 child \u7684\u5185\u5bb9\uff0c\u968f\u540e\u5efa\u7acb\u672c\u5730\u7684\u7528\u6237\u754c\u9762\u5143\u7d20\u7528\u6765\u4e0e\u6bcf\u4e00\u4e2a\u53d1\u73b0\u7684\u5c0f\u90e8\u4ef6\u8fdb\u884c\u4e92\u52a8\u3002\u672c\u5730\u5e73\u53f0\u5143\u7d20\u662f\u7ed9\u5b9a\u5e73\u53f0\u7684\u9ed8\u8ba4\u7528\u6237\u754c\u9762\uff0c\u5728 Android \u4e2d\u7684\u6309\u94ae\u5c5e\u4e8e Android \u98ce\u683c\uff1b\u76f8\u5e94\u7684\uff0cIOS \u8bbe\u5907\u4e5f\u6709\u81ea\u5df1\u7279\u5b9a\u7684\u533a\u522b\u4e8e\u5176\u5b83\u8bbe\u5907\u7684\u6837\u5f0f\u3002\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9a\u5236\u5e73\u53f0\u5c0f\u90e8\u4ef6\u7684\u5916\u89c2\u548c\u98ce\u683c\u3002\n\n\nHow Does It Work? \u8fd0\u884c\u65b9\u5f0f\n\n\nUnder the hood, there are many interfaces that make up the\nbuilding blocks to create complex widgets. These interfaces,\nwhen implemented by a BusObject on a specific object path,\ndetermine the language, widget, text, and constraints.\nThe service, through the APIs and helper classes, allows\nfor simple use of the AllJoyn framework to register BusObjets\nthat implement certain widgets and automatically provide hints\non how the widget should render, signals to synchronize between\napplications, and default values/constraints.\n\u5728\u5185\u90e8\uff0c\u6709\u5f88\u591a\u63a5\u53e3\u7ec4\u6210\u6784\u9020\u5757\u6765\u521b\u5efa\u590d\u6742\u7684\u5c0f\u90e8\u4ef6\u3002\u8fd9\u4e9b\u63a5\u53e3\uff0c\u5f53\u88ab\u7279\u5b9a\u5bf9\u8c61\u8def\u5f84\u7684\u603b\u7ebf\u5bf9\u8c61\u4f7f\u7528\u65f6\uff0c\u51b3\u5b9a\u4e86\u8bed\u8a00\uff0c\u5c0f\u90e8\u4ef6\uff0c\u6587\u672c\u548c\u7ea6\u675f\u3002\u8fd9\u9879\u670d\u52a1\uff0c\u901a\u8fc7 API \u548c\u5e2e\u52a9\u7c7b\uff0c\u5141\u8bb8\u7b80\u5355\u5730\u4f7f\u7528 AllJoyn \u67b6\u6784\u6ce8\u518c\u603b\u7ebf\u5bf9\u8c61\uff0c\u6267\u884c\u7279\u5b9a\u5c0f\u90e8\u4ef6\uff0c\u63a7\u5236\u5c0f\u90e8\u4ef6\u7684\u7ec6\u8282\uff0c\u5e94\u7528\u7a0b\u5e8f\u95f4\u4fe1\u53f7\u540c\u6b65\u548c\u9ed8\u8ba4\u503c\uff0f\u7ea6\u675f\u3002\n\n\nTo implement a Control Panel, the simple and most common way\nis to generate an XML file to represent the Control Panel.\nThis file is then passed into the Code Generator which will take\nas input a header file that contains the developer methods to be\nconnected when widgets are interacted with. The Code Generator\nwill produce a generated folder that contains software that makes\nuse of the Control Panel Service APIs and classes to offer the\nContorl Panel.\n\u914d\u7f6e\u63a7\u5236\u9762\u677f\uff0c\u6700\u7b80\u5355\u7684\u548c\u5e38\u7528\u7684\u529e\u6cd5\u662f\u751f\u6210\u4e00\u4e2a\u4ee3\u8868\u63a7\u5236\u9762\u677f\u7684 XML \u6587\u4ef6\u3002\u8fd9\u4e2a\u6587\u4ef6\u88ab\u53d1\u7ed9\u4ee3\u7801\u751f\u6210\u5668\u3002\u5b83\u5c06\u5176\u5f53\u505a\u5305\u542b\u5f00\u53d1\u8005\u65b9\u6cd5\u7684\u5934\u6587\u4ef6\uff0c\u5e76\u4e0e\u548c\u5b83\u53d1\u751f\u4e92\u52a8\u7684\u5c0f\u90e8\u4ef6\u76f8\u8fde\u63a5\u3002\u4ee3\u7801\u751f\u6210\u5668\u5c06\u5efa\u7acb\u4e00\u4e2a\u751f\u6210\u6587\u4ef6\u5939\u5305\u542b\u4e86\u4f7f\u7528\u63a7\u5236\u9762\u677f\u670d\u52a1 API \u7684\u8f6f\u4ef6\u548c\u63d0\u4f9b\u63a7\u5236\u9762\u677f\u7684\u7c7b\u3002\n\n\nOnce an application discovers a Control Panel, the Control\nPanel Service is used to perform AllJoyn Introspection to navigate\nthe AllJoyn BusObject tree to collect the details needed to render.\nThis information is passed into the UI Adaptive Layer for processing\nto create a root UI element. The UI elements can then be traversed\nand the native elements added to a display.\n\u4e00\u65e6\u6709\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\u4e86\u4e00\u4e2a\u63a7\u5236\u9762\u677f\uff0c\u63a7\u5236\u9762\u677f\u670d\u52a1\u4f1a\u4f7f\u7528 AllJoyn \u81ea\u7701\u673a\u5236\u5e2e\u52a9 AllJoyn \u603b\u7ebf\u5bf9\u8c61\u6811\u8fdb\u884c\u5bfc\u822a\uff0c\u6536\u96c6\u9700\u8981\u5904\u7406\u7684\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u88ab\u4f20\u81f3 UI \u81ea\u9002\u5e94\u5c42\uff0c\u4f7f\u8fdb\u7a0b\u80fd\u591f\u751f\u6210\u4e00\u4e2a\u6839\u7528\u6237\u754c\u9762\u5143\u7d20\u3002\u968f\u540e\u7528\u6237\u754c\u9762\u5143\u7d20\u5c31\u53ef\u4ee5\u88ab\u4f20\u8f93\uff0c\u5e76\u4e14\u672c\u5730\u5143\u7d20\u88ab\u52a0\u5165\u663e\u793a\u3002\n\n\nWhen any UI widget is interacted with by a user it causes an\nAllJoyn Bus Method call to be made back to the Controlee device.\nThis then changes the state of the UI accordingly, causes the\ndevice code to execute for the given method, and and sends an\nAllJoyn signal to maintain state with other connected applications.\nThe signal is built into the system and allows for sliders, spinners,\netc. to always be synchronized to avoid confusion when multiple\nusers are interacting with the same device.\n\u5f53\u7528\u6237\u754c\u9762\u5c0f\u90e8\u4ef6\u4e0e\u7528\u6237\u53d1\u751f\u4e86\u4e92\u52a8\uff0c\u5c31\u4f1a\u901a\u8fc7 AllJoyn Bus Method \u544a\u77e5\u53d7\u63a7\u8bbe\u5907\u3002\u8fd9\u4f1a\u76f8\u5e94\u5730\u6539\u53d8\u7528\u6237\u754c\u9762\u7684\u72b6\u6001\uff0c\u4f7f\u8bbe\u5907\u4ee3\u7801\u4e4b\u884c\u6307\u5b9a\u7684\u65b9\u6cd5\uff0c\u53d1\u9001 AllJoyn \u4fe1\u53f7\uff0c\u4ee5\u4fdd\u6301\u4e0e\u5176\u4ed6\u8fde\u63a5\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u72b6\u6001\u3002\u4e3a\u4e86\u907f\u514d\u5f53\u591a\u4e2a\u7528\u6237\u4e0e\u76f8\u540c\u7684\u8bbe\u5907\u8fdb\u884c\u4ea4\u4e92\u65f6\u53d1\u751f\u6df7\u6dc6\uff0c\u4fe1\u53f7\u88ab\u690d\u5165\u7cfb\u7edf\uff0c\u5141\u8bb8\u4f7f\u7528\u6ed1\u5757\u548c\u8c03\u8282\u6309\u94ae\u7b49\u3002\n\n\nLearn More \u4e86\u89e3\u66f4\u591a\n\n\n\n\nLearn more about the Control Panel Interface Definition\n\n\nDownload the SDK\n, \nbuild\n and\n  \nrun the sample apps\n\n\nLearn more about the APIs",
            "title": "Home"
        },
        {
            "location": "/learn/base-services/controlpanel/#control-panel-service",
            "text": "The AllJoyn  Control Panel Service framework provides a\nsimple way for applications to render a UI widget set to\ninteract with remote devices. The framework is composed of\na standard set of interfaces, that when implemented on specific\nobject paths, allows for dynamic rendering of widgets in a UI\non remote devices. The Control Panel Service abstracts the\ndetails of the AllJoyn Control Panel interface by allowing\nthe use of higher level APIs and a Code Generator to create\nthe widget elements. A Control Panel does not dictate how a\nUI should look; it provides hints/information about what an\nelement is capable of, where it should be rendered on a screen,\nand synchronization with other applications.\nAllJoyn  \u63a7\u5236\u9762\u677f\u670d\u52a1\u67b6\u6784\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4fbf\u6377\u7684\u4e0e\u8fdc\u7a0b\u8bbe\u5907\u8fdb\u884c\u4e92\u52a8\u7684\u7528\u6237\u754c\u9762\u5c0f\u90e8\u4ef6\u3002\u8be5\u67b6\u6784\u662f\u6807\u51c6\u63a5\u53e3\u7684\u4e00\u90e8\u5206\uff0c\u5f53\u88ab\u8bbe\u5b9a\u4e86\u7279\u5b9a\u7684\u5bf9\u8c61\u8def\u5f84\u65f6\uff0c\u80fd\u591f\u52a8\u6001\u5448\u73b0\u5728\u8fdc\u7a0b\u8bbe\u5907\u4e0a\u7684\u7528\u6237\u754c\u9762\u4e2d\u7684\u5c0f\u90e8\u4ef6\u3002\u63a7\u5236\u9762\u677f\u670d\u52a1\u901a\u8fc7\u5141\u8bb8\u4f7f\u7528\u8f83\u9ad8\u7ea7\u7684 API \u548c\u4ee3\u7801\u751f\u6210\u5668\u521b\u5efa\u5c0f\u90e8\u4ef6\u5143\u7d20\uff0c\u62bd\u8c61 AllJoyn \u63a7\u5236\u9762\u677f\u63a5\u53e3\u7684\u7ec6\u8282\u3002",
            "title": "Control Panel Service \u63a7\u5236\u9762\u677f\u670d\u52a1"
        },
        {
            "location": "/learn/base-services/controlpanel/#concepts-and-terminology",
            "text": "Controller and Controllee \u63a7\u5236\u8005\u548c\u53d7\u63a7\u5236\u8005  Two roles exist: \u6709\u4e24\u4e2a\u89d2\u8272\uff1a  Controller. This is the application that renders the control panel. \u63a7\u5236\u8005\u3002\u64cd\u7eb5\u63a7\u5236\u9762\u677f\u7684\u5e94\u7528\u7a0b\u5e8f\u3002  Controlee. This is the application that advertises the control panel. \u53d7\u63a7\u5236\u548c\u3002\u5e7f\u544a\u63a7\u5236\u9762\u677f\u7684\u5e94\u7528\u7a0b\u5e8f\u3002  Control Panel \u63a7\u5236\u9762\u677f  Collection of Widgets that allow a user to interact with a device.\nA control panel is defined and announced by a Controllee; and\ndiscovered and displayed by a Controller. A device can have more\nthan one, and can be defined on a per-language basis.\n\u5141\u8bb8\u7528\u6237\u4e0e\u8bbe\u5907\u8fdb\u884c\u4e92\u52a8\u7684\u4e00\u7ec4\u5c0f\u90e8\u4ef6\u3002\u63a7\u5236\u9762\u677f\u7531\u53d7\u63a7\u5236\u8005\u5b9a\u4e49\u548c\u53d1\u5e03\uff1b\u88ab\u63a7\u5236\u8005\u53d1\u73b0\u548c\u663e\u793a\u3002\u4e00\u4e2a\u8bbe\u5907\u53ef\u4ee5\u6709\u591a\u4e2a\u63a7\u5236\u9762\u677f\uff0c\u53ef\u4ee5\u5206\u522b\u5b9a\u4e49\u8bed\u8a00\u3002  Control Panel Service Code Generator \u63a7\u5236\u9762\u677f\u670d\u52a1\u4ee3\u7801\u751f\u6210\u5668  A tool that aids in the generation of code that will represent a\nControl Panel. This tool takes in an XML file that defines\nthe control panel widgets and generates corresponding code that\nimplements a specific control panel. Note that XML is not\nused as the internal representation of the widgets in the\nControl Panel Service, nor is it sent over the wire to the\nController. \u4e00\u4e2a\u7528\u6765\u8f85\u52a9\u751f\u6210\u63a7\u5236\u9762\u677f\u7684\u5de5\u5177\u3002\u8fd9\u4e2a\u5de5\u5177\u628a\u5b9a\u4e49\u63a7\u5236\u9762\u677f\u5c0f\u90e8\u4ef6\u7684 XML \u6587\u4ef6\u751f\u6210\u76f8\u5e94\u7684\u4ee3\u7801\u4ee5\u751f\u6210\u7279\u5b9a\u7684\u63a7\u5236\u9762\u677f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cXML \u65e2\u4e0d\u662f\u4e00\u79cd\u5c0f\u90e8\u4ef6\u5728\u63a7\u5236\u9762\u677f\u670d\u52a1\u4e2d\u7684\u5185\u90e8\u8868\u73b0\u5f62\u5f0f\uff0c\u4e5f\u4e0d\u4f1a\u88ab\u53d1\u9001\u7ed9\u63a7\u5236\u8005\u3002  Types of widgets modules \u5c0f\u90e8\u4ef6\u6a21\u5757\u7684\u7c7b\u578b  A Control Panel can be expressed in XML, fed through the Code\nGenerator, and connected to developer software. The following\nUI elements make up a Control Panel:\n\u63a7\u5236\u9762\u677f\u4ee5 XML \u5f62\u5f0f\u8868\u793a\uff0c\u7531\u4ee3\u7801\u751f\u6210\u5668\u751f\u6210\uff0c\u8fde\u63a5\u5230\u5f00\u53d1\u8005\u7684\u8f6f\u4ef6\u3002\u4ee5\u4e0b\u7528\u6237\u754c\u9762\u5143\u7d20\u7ec4\u6210\u4e86\u63a7\u5236\u9762\u677f\uff1a   Container. Container UI element. Allows grouping of widgets\n  together. Must contain at least one child element. Container\u3002Container\u3002Container \u7528\u6237\u754c\u9762\u5143\u7d20\u3002\u5b83\u628a\u5c0f\u90e8\u4ef6\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u5fc5\u987b\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u5b50\u5143\u7d20\u3002  Label. UI element that functions as a read only label of text. Label\u3002\u7528\u4f5c\u53ea\u8bfb\u6807\u7b7e\u7684\u7528\u6237\u754c\u9762\u5143\u7d20\u3002  Action. UI element represented by a button that either executes\n  code on the Controllee, or opens a Dialog Widget as a confirmation\n  before executing. Action\u3002\u4f5c\u4e3a\u53d7\u63a7\u5236\u8005\u7684\u4e00\u4e2a\u53ef\u4ee5\u6267\u884c\u4ee3\u7801\u7684\u6309\u94ae\uff0c\u6216\u8005\u5728\u6267\u884c\u524d\u6253\u5f00\u7684\u4e00\u4e2a\u7528\u4e8e\u786e\u8ba4\u7684\u5bf9\u8bdd\u6846\u5c0f\u90e8\u4ef6\u7684\u7528\u6237\u754c\u9762\u5143\u7d20\u3002  Dialog. UI dialog element. Has a dialog message and up to 3\n  choices of buttons. Dialog. \u7528\u6237\u754c\u9762\u5bf9\u8bdd\u6846\u5143\u7d20\u3002\u6709\u4e00\u4e2a\u5bf9\u8bdd\u6846\u6d88\u606f\u548c 3 \u4e2a\u9009\u9879\u6309\u94ae\u3002  Property. UI element used to display a value and possibly edit\n  it. This widgets via the hints attribute is used to represent a\n  slider, spinner, radio button, etc. Property\u3002\u7528\u4e8e\u663e\u793a\u67d0\u4e00\u503c\u6216\u7f16\u8f91\u5b83\u7684\u7528\u6237\u754c\u9762\u5143\u7d20\u3002\u8fd9\u4e2a\u90e8\u4ef6\u901a\u8fc7\u7ec6\u5fae\u5c5e\u6027\uff0c\u8868\u793a\u6ed1\u5757\u3001\u5fae\u8c03\u6846\u3001\u5355\u9009\u6309\u94ae\u7b49\u3002   UI Adaptive Layer UI \u81ea\u9002\u5e94\u5c42  In order to aid in use and interact with a Control Panel, a helper\nlibrary of sorts is available as part of the framework. The purpose\nof this software layer is to facilitate the discovery of the widget\nelements using AllJoyn Introspection which starts at the object\npath of the Control Panel interface found through Service Level Discovery . It then parses each child of\nthis path to determine what each child is and creates the native\nplatform UI element to interact with each discovered widget.\nThe native platform elements are the default UI for the given\nplatform, on Android a button looks like a default Android Button;\non iOS the device will have a native look and feel for and not\nlook like another OS. Developers have the option to overload the\ngeneration of the platform widgets to provide a custom look and feel.\n\u4e3a\u4e86\u8f85\u52a9\u8fd0\u884c\u63a7\u5236\u9762\u677f\uff0c\u6216\u4e0e\u4e4b\u8fdb\u884c\u4e92\u52a8\uff0c\u67b6\u6784\u4e2d\u52a0\u5165\u4e86\u8f85\u52a9\u5206\u5c42\u3002\u8fd9\u4e2a\u8f6f\u4ef6\u5206\u5c42\u7684\u76ee\u7684\u662f\u4fc3\u8fdb\u53d1\u73b0\u4f7f\u7528 AllJoyn \u81ea\u7701\u673a\u5236\u7684\u5c0f\u90e8\u4ef6\u5143\u7d20\u3002\u81ea\u7701\u673a\u5236\u5728\u63a7\u5236\u9762\u677f\u63a5\u53e3\u5bf9\u8c61\u8def\u5f84\u4e2d\u542f\u7528\uff0c\u8fd9\u4e9b\u63a5\u53e3\u5728  Service Level Discovery  \u4f53\u73b0\u3002\u5b83\u89e3\u6790\u6bcf\u4e00\u4e2a\u8fd9\u4e2a\u8def\u5f84\u7684\u6bcf\u4e00\u4e2a child\uff0c\u4e86\u89e3 child \u7684\u5185\u5bb9\uff0c\u968f\u540e\u5efa\u7acb\u672c\u5730\u7684\u7528\u6237\u754c\u9762\u5143\u7d20\u7528\u6765\u4e0e\u6bcf\u4e00\u4e2a\u53d1\u73b0\u7684\u5c0f\u90e8\u4ef6\u8fdb\u884c\u4e92\u52a8\u3002\u672c\u5730\u5e73\u53f0\u5143\u7d20\u662f\u7ed9\u5b9a\u5e73\u53f0\u7684\u9ed8\u8ba4\u7528\u6237\u754c\u9762\uff0c\u5728 Android \u4e2d\u7684\u6309\u94ae\u5c5e\u4e8e Android \u98ce\u683c\uff1b\u76f8\u5e94\u7684\uff0cIOS \u8bbe\u5907\u4e5f\u6709\u81ea\u5df1\u7279\u5b9a\u7684\u533a\u522b\u4e8e\u5176\u5b83\u8bbe\u5907\u7684\u6837\u5f0f\u3002\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9a\u5236\u5e73\u53f0\u5c0f\u90e8\u4ef6\u7684\u5916\u89c2\u548c\u98ce\u683c\u3002",
            "title": "Concepts and Terminology \u6982\u5ff5\u548c\u672f\u8bed"
        },
        {
            "location": "/learn/base-services/controlpanel/#how-does-it-work",
            "text": "Under the hood, there are many interfaces that make up the\nbuilding blocks to create complex widgets. These interfaces,\nwhen implemented by a BusObject on a specific object path,\ndetermine the language, widget, text, and constraints.\nThe service, through the APIs and helper classes, allows\nfor simple use of the AllJoyn framework to register BusObjets\nthat implement certain widgets and automatically provide hints\non how the widget should render, signals to synchronize between\napplications, and default values/constraints.\n\u5728\u5185\u90e8\uff0c\u6709\u5f88\u591a\u63a5\u53e3\u7ec4\u6210\u6784\u9020\u5757\u6765\u521b\u5efa\u590d\u6742\u7684\u5c0f\u90e8\u4ef6\u3002\u8fd9\u4e9b\u63a5\u53e3\uff0c\u5f53\u88ab\u7279\u5b9a\u5bf9\u8c61\u8def\u5f84\u7684\u603b\u7ebf\u5bf9\u8c61\u4f7f\u7528\u65f6\uff0c\u51b3\u5b9a\u4e86\u8bed\u8a00\uff0c\u5c0f\u90e8\u4ef6\uff0c\u6587\u672c\u548c\u7ea6\u675f\u3002\u8fd9\u9879\u670d\u52a1\uff0c\u901a\u8fc7 API \u548c\u5e2e\u52a9\u7c7b\uff0c\u5141\u8bb8\u7b80\u5355\u5730\u4f7f\u7528 AllJoyn \u67b6\u6784\u6ce8\u518c\u603b\u7ebf\u5bf9\u8c61\uff0c\u6267\u884c\u7279\u5b9a\u5c0f\u90e8\u4ef6\uff0c\u63a7\u5236\u5c0f\u90e8\u4ef6\u7684\u7ec6\u8282\uff0c\u5e94\u7528\u7a0b\u5e8f\u95f4\u4fe1\u53f7\u540c\u6b65\u548c\u9ed8\u8ba4\u503c\uff0f\u7ea6\u675f\u3002  To implement a Control Panel, the simple and most common way\nis to generate an XML file to represent the Control Panel.\nThis file is then passed into the Code Generator which will take\nas input a header file that contains the developer methods to be\nconnected when widgets are interacted with. The Code Generator\nwill produce a generated folder that contains software that makes\nuse of the Control Panel Service APIs and classes to offer the\nContorl Panel.\n\u914d\u7f6e\u63a7\u5236\u9762\u677f\uff0c\u6700\u7b80\u5355\u7684\u548c\u5e38\u7528\u7684\u529e\u6cd5\u662f\u751f\u6210\u4e00\u4e2a\u4ee3\u8868\u63a7\u5236\u9762\u677f\u7684 XML \u6587\u4ef6\u3002\u8fd9\u4e2a\u6587\u4ef6\u88ab\u53d1\u7ed9\u4ee3\u7801\u751f\u6210\u5668\u3002\u5b83\u5c06\u5176\u5f53\u505a\u5305\u542b\u5f00\u53d1\u8005\u65b9\u6cd5\u7684\u5934\u6587\u4ef6\uff0c\u5e76\u4e0e\u548c\u5b83\u53d1\u751f\u4e92\u52a8\u7684\u5c0f\u90e8\u4ef6\u76f8\u8fde\u63a5\u3002\u4ee3\u7801\u751f\u6210\u5668\u5c06\u5efa\u7acb\u4e00\u4e2a\u751f\u6210\u6587\u4ef6\u5939\u5305\u542b\u4e86\u4f7f\u7528\u63a7\u5236\u9762\u677f\u670d\u52a1 API \u7684\u8f6f\u4ef6\u548c\u63d0\u4f9b\u63a7\u5236\u9762\u677f\u7684\u7c7b\u3002  Once an application discovers a Control Panel, the Control\nPanel Service is used to perform AllJoyn Introspection to navigate\nthe AllJoyn BusObject tree to collect the details needed to render.\nThis information is passed into the UI Adaptive Layer for processing\nto create a root UI element. The UI elements can then be traversed\nand the native elements added to a display.\n\u4e00\u65e6\u6709\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\u4e86\u4e00\u4e2a\u63a7\u5236\u9762\u677f\uff0c\u63a7\u5236\u9762\u677f\u670d\u52a1\u4f1a\u4f7f\u7528 AllJoyn \u81ea\u7701\u673a\u5236\u5e2e\u52a9 AllJoyn \u603b\u7ebf\u5bf9\u8c61\u6811\u8fdb\u884c\u5bfc\u822a\uff0c\u6536\u96c6\u9700\u8981\u5904\u7406\u7684\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u88ab\u4f20\u81f3 UI \u81ea\u9002\u5e94\u5c42\uff0c\u4f7f\u8fdb\u7a0b\u80fd\u591f\u751f\u6210\u4e00\u4e2a\u6839\u7528\u6237\u754c\u9762\u5143\u7d20\u3002\u968f\u540e\u7528\u6237\u754c\u9762\u5143\u7d20\u5c31\u53ef\u4ee5\u88ab\u4f20\u8f93\uff0c\u5e76\u4e14\u672c\u5730\u5143\u7d20\u88ab\u52a0\u5165\u663e\u793a\u3002  When any UI widget is interacted with by a user it causes an\nAllJoyn Bus Method call to be made back to the Controlee device.\nThis then changes the state of the UI accordingly, causes the\ndevice code to execute for the given method, and and sends an\nAllJoyn signal to maintain state with other connected applications.\nThe signal is built into the system and allows for sliders, spinners,\netc. to always be synchronized to avoid confusion when multiple\nusers are interacting with the same device.\n\u5f53\u7528\u6237\u754c\u9762\u5c0f\u90e8\u4ef6\u4e0e\u7528\u6237\u53d1\u751f\u4e86\u4e92\u52a8\uff0c\u5c31\u4f1a\u901a\u8fc7 AllJoyn Bus Method \u544a\u77e5\u53d7\u63a7\u8bbe\u5907\u3002\u8fd9\u4f1a\u76f8\u5e94\u5730\u6539\u53d8\u7528\u6237\u754c\u9762\u7684\u72b6\u6001\uff0c\u4f7f\u8bbe\u5907\u4ee3\u7801\u4e4b\u884c\u6307\u5b9a\u7684\u65b9\u6cd5\uff0c\u53d1\u9001 AllJoyn \u4fe1\u53f7\uff0c\u4ee5\u4fdd\u6301\u4e0e\u5176\u4ed6\u8fde\u63a5\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u72b6\u6001\u3002\u4e3a\u4e86\u907f\u514d\u5f53\u591a\u4e2a\u7528\u6237\u4e0e\u76f8\u540c\u7684\u8bbe\u5907\u8fdb\u884c\u4ea4\u4e92\u65f6\u53d1\u751f\u6df7\u6dc6\uff0c\u4fe1\u53f7\u88ab\u690d\u5165\u7cfb\u7edf\uff0c\u5141\u8bb8\u4f7f\u7528\u6ed1\u5757\u548c\u8c03\u8282\u6309\u94ae\u7b49\u3002",
            "title": "How Does It Work? \u8fd0\u884c\u65b9\u5f0f"
        },
        {
            "location": "/learn/base-services/controlpanel/#learn-more",
            "text": "Learn more about the Control Panel Interface Definition  Download the SDK ,  build  and\n   run the sample apps  Learn more about the APIs",
            "title": "Learn More \u4e86\u89e3\u66f4\u591a"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/",
            "text": "Control Panel Interface Definition - 14.02\n\n\nWarning: This is not the latest interface definition.\n\n\nGo here for latest Control Panel Interface Definition\n\n\nIntroduction\n\n\nPurpose\n\n\nThis document describes the specification of the Control Panel \nservice framework's collection of interfaces. Implementing these \ninterfaces provides the Control Panel service framework a mechanism \nto allow for a controller application like the AllJoyn\n On \napplication to render the UI based on the controllee application's \nwidget metadata. The controller application does not know the \nsemantics of the remote widgets. It relies on the end user to understand\nand perform the actions on the rendered user interface. A typical \naction is selecting a field or pressing a button.\n\n\nScope\n\n\nThis document is targeted to developers of AllJoyn applications \nwho want to build controller and controllee applications without \nusing the tools provided by the Control Panel service framework.\n\n\nReferences\n\n\nExcept for supporting information, the following are reference \ndocuments found on the AllSeen Alliance web site's Docs/Downloads section.\n\n\n\n\nAllJoyn\n Framework Tutorial\n\n\nIntroduction to AllJoyn\n Thin Client\n\n\nAllJoyn Data Type Signature\n\n\nRFC3339: (Date and Time on the Internet: Timestamps)\n\n\n\n\nAcronyms and terms\n\n\n\n\n\n\n\n\nTerm\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nAllJoyn device\n\n\nA device that supports the AllJoyn framework and can connect to a personal network.\n\n\n\n\n\n\nControl panel\n\n\nCollection of Widgets that allow a user to interact with a device. A control panel is defined and announced by a Controllee; and discovered and displayed Control panel by a Controller. A device can have more than one, and can be defined on a per-language basis.\n\n\n\n\n\n\nControllee\n\n\nAn AllJoyn application that advertises its Control Panel interfaces, so that other AllJoyn devices may control it.\n\n\n\n\n\n\nController\n\n\nAn AllJoyn application that controls another AllJoyn device that advertises its Control Panel interfaces.\n\n\n\n\n\n\n\n\nSpecification Overview\n\n\nThe Control Panel interfaces must be implemented by an \napplication on a controllee. Figure 1 illustrates \nthe relationship between a controllee app and a controller app.\n\n\n\n\nFigure: Control Panel service framework architecture within \nthe AllJoyn\n framework\n\n\nThe OEM is responsible for writing the Control interfaces and \nthe Control Panel service framework metadata.\n\n\nThe UI Toolkit Adaption Layer, a library used to map the metadata \nto platform-specific UI elements, is made available as part of the \nControl Panel service framework release.\n\n\nDiscovery\n\n\nControllees are discovered via an AllJoyn announcement. Each AllJoyn \ndevice uses the About feature to announce basic app information like \napp name, device name, manufacturer, and model number. The announcement \nalso contains the list of object paths and service interfaces to allow \nthe controller to determine whether the controllee provides \nfunctionality of interest.\n\n\nThe About announcement is propagated using a sessionless signal.\n\n\nCall Flows\n\n\nStatic Control Panel flow\n\n\nFigure 2 illustrates a typical call flow for a control \npanel that does not change once rendered.\n\n\n\n\nFigure: Static Control Panel call flow\n\n\nDynamic Control Panel flow\n\n\nFigure 3 illustrates a call flow for a control panel that \nchanges as the end user interacts with the widgets.\n\n\n\n\nFigure: Dynamic Control Panel call flow\n\n\nError Handling\n\n\nThe method calls in the Control Panel interfaces use the AllJoyn \nerror message handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE) \nto set the error name and error message.\n\n\nTable 1 lists the possible errors raised by the Control Panel service framework interfaces.\n\n\nTable 1: Control Panel service framework interface errors\n\n\n\n\n\n\n\n\nError name\n\n\nError message\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.OutOfRange\n\n\nValue out of range\n\n\n\n\n\n\norg.alljoyn.Error.InvalidState\n\n\nInvalid state\n\n\n\n\n\n\norg.alljoyn.Error.InvalidProperty\n\n\nInvalid property\n\n\n\n\n\n\norg.alljoyn.Error.InvalidValue\n\n\nInvalid value\n\n\n\n\n\n\norg.alljoyn.Error.MethodNotAllowed\n\n\nMethod call not allowed\n\n\n\n\n\n\n\n\nBusObject Map\n\n\nBusObject structure\n\n\nFigure 4 shows the tree structure diagram that \nrepresents the basic organization of AllJoyn objects used in \nthe support of the Control Panel service framework. A control \npanel is implemented using several AllJoyn objects.\n\n\n\n\nFigure: BusObject map\n\n\nThe objects are organized to support multiple units and multiple \nlanguages. Only the top-level panels should be listed in the announcement.\n\n\nSince the IETF language tag allows for hyphen (-) which is not \nallowed in the bus object path, any language tag in the object \npath replaces a hyphen (-) with an underscore (_).\n\n\nIn addition to the control panels, the Control Panel service \nframework can also support other panels such as a notification \npanel. These panels are not required to be advertised in the announcement.\n\n\nIt is the controller's job to introspect and walk the object \ntree of a control panel to retrieve all the metadata for that \ncontrol panel.\n\n\nBusObject map examples\n\n\nThe following subsections illustrate a few sample BusObject map structures.\n\n\nWashing machine example\n\n\nFigure 5 illustrates a sample bus object map for a washing machine.\n\n\n\n\nFigure: Washing machine example\n\n\nSprinkler system example\n\n\nFigure 6 illustrates a sample bus object map for a sprinkler system.\n\n\n\n\nFigure: Sprinkler system example\n\n\nControl Panel Service Framework Interfaces\n\n\nThe Control Panel service framework comprises a set of interfaces \nas illustrated in Figure 4.\n\n\nControlPanel Interface\n\n\nThis interface indicates whether the object is a control panel. \nThis object will support at least one language. The service only \nneeds to advertise this type of object in the About announcement. \nNo other objects in the Control Panel service framework tree \nshould be announced.\n\n\nNOTE: It's the responsibility of the controller to introspect \nthe children objects to locate the corresponding root container \nof the given panel for the specific language code.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.ControlPanel\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit)/{panelName}\n\n\n\n\n\n\n\n\n\n\n\n\nExample: /ControlPanel/washing/consolePanel\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\n\n\nIntrospect XML\n\n\nThe following XML defines the ControlPanel interface.\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.ControlPanel\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nContainer Interface\n\n\nThis interface provides all the metadata to guide the \ncontroller to render the UI for a container widget.\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.Container\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit)/{panelName}/{language}/.../{containerName}\n\n\n\n\n\n\n\n\n\n\n\n\nExamples:\n\n\n\n\n\n\n\n\n\n\n\n\n/ControlPanel/washing/consolePanel/en\n\n\n\n\n\n\n\n\n\n\n\n\n/ControlPanel/sprinkler/mainPanel/en/Schedules/InputForm/RunOnDays\n\n\n\n\n\n\norg.alljoyn.ControlPanel.SecuredContainer\n\n\n1\n\n\nyes\n\n\n/ControlPanel/{unit)/{panelName}/{language}/.../{containerName}\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\nStates\n\n\nu\n\n\nBit mask\n\n\nno\n\n\nBit mask for various widget states\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMask\n / \nName\n / \nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0x01 / enabled / Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.\n\n\n\n\n\n\nOptParams\n\n\na{qv}\n\n\nN/A\n\n\nno\n\n\nMetadata dictionary. See \nContainer widget metadata\n for more information.\n\n\n\n\n\n\n\n\nContainer widget metadata\n\n\nThe following table defines the metadata of a container widget.\n\n\n\n\n\n\n\n\nDictionary key\n\n\nField name\n\n\nValue type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nLabel\n\n\ns\n\n\nLabel\n\n\n\n\n\n\n1\n\n\nbgColor\n\n\nu\n\n\nBackground color expressed as RGB value. If not specified, then the background color of the enclosing container is used.\n\n\n\n\n\n\n2\n\n\nlayoutHints\n\n\naq\n\n\nLayout hints. See \nContainer widget layout hints\n for more information.\n\n\n\n\n\n\n\n\nContainer widget layout hints\n\n\nThe following table lists layout hints for a container widget.\n\n\n\n\n\n\n\n\nHint ID\n\n\nHint name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nVertical Linear\n\n\nA layout that aligns all components in a vertical direction.\n\n\n\n\n\n\n2\n\n\nHorizontal Linear\n\n\nA layout that aligns all components in a horizontal direction.\n\n\n\n\n\n\n\n\nMethods\n\n\nNo methods are exposed by this interface.\n\n\nSignals\n\n\n\n\n\n\n\n\nSignal name\n\n\nParameters\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMetadataChanged\n\n\nNone\n\n\nThe metadata has changed. This can occur due to changes in any of the property objects.\n\n\n\n\n\n\n\n\nIntrospect XML\n\n\nThe following XML defines the Container interface.\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.Container\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n\n      \nsignal name=\nMetadataChanged\n /\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nProperty Interface\n\n\nThis interface provides the control mechanism for the property widget. \nEach widget is represented by an AllJoyn object implementing this interface.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.Property\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit)/{panel}/{language}/.../{object name}\n\n\n\n\n\n\n\n\n\n\n\n\nExamples:\n\n\n\n\n\n\n\n\n\n\n\n\n/ControlPanel/washing/consolePanel/en/Mode\n\n\n\n\n\n\n\n\n\n\n\n\n/ControlPanel/sprinkler/mainPanel/en/Schedules/InputForm/ScheduleName\n\n\n\n\n\n\norg.alljoyn.ControlPanel.SecuredProperty\n\n\n1\n\n\nyes\n\n\n/ControlPanel/{unit}/{panel}/.../{object name}\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\nStates\n\n\nu\n\n\nBit mask\n\n\nno\n\n\nBit mask for various widget states\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMask\n / \nName\n / \nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0x01 / enabled / Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0x02 / writable / Indicates whether the widget is writable.\n\n\n\n\n\n\nOptParams\n\n\na{qv}\n\n\nN/A\n\n\nno\n\n\nMetadata dictionary. See \nProperty widget metadata\n for more information.\n\n\n\n\n\n\nValues\n\n\nv\n\n\nN/A\n\n\nyes\n\n\nActual value of the property. When modifying the property, the device may give the AllJoyn error org.alljoyn.Error.MethodNotAllowed if the property is ReadOnly. The supported data types are listed in \nSupported data types\n.\n\n\n\n\n\n\n\n\nProperty widget metatdata\n\n\nThe following table lists property widget metadata.\n\n\n\n\n\n\n\n\nDictionary key\n\n\nField name\n\n\nValue type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nLabel\n\n\ns\n\n\nLabel\n\n\n\n\n\n\n1\n\n\nbgColor\n\n\nu\n\n\nBackground color expressed as RGB value. If not specified, then the background color of the enclosing container is used.\n\n\n\n\n\n\n2\n\n\nhints\n\n\naq\n\n\nThe widget rendering hints. See \nProperty widget hints\n for more information.\n\n\n\n\n\n\n3\n\n\nunitOfMeasure\n\n\ns\n\n\nUnit of measurement.\n\n\n\n\n\n\n4\n\n\nconstrainToValue\n\n\na(vs)\n\n\nConstraint on the value as a list of values. Any value of the property must match one of the values in this list. See \nList of values\n for more information.\n\n\n\n\n\n\n5\n\n\nrange\n\n\nvv\n\n\nConstraint on the value as a range; a value of this property  must stay within the range. See \nProperty widget ranges\n for more information.\n\n\n\n\n\n\n\n\nProperty widget hints\n\n\n\n\n\n\n\n\nHint ID\n\n\nHint name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nSwitch\n\n\nTwo-state buttons allowing the end-user to toggle the state of a single settings option.\n\n\n\n\n\n\n2\n\n\nCheckBox\n\n\nWidget for multi-select. It allows the end user to select multiple options from a list.\n\n\n\n\n\n\n3\n\n\nSpinner\n\n\nWidget for single-select. It allows the end user to select a single option from a list.\n\n\n\n\n\n\n4\n\n\nRadioButton\n\n\nWidget for single-select. It allows the end user to select a single option from a list.\n\n\n\n\n\n\n5\n\n\nSlider\n\n\nAllows the end user to select a value from a continuous or discrete range. The appearance is linear, either horizontal or vertical.\n\n\n\n\n\n\n6\n\n\nTimePicker\n\n\nAllows the end user to specify a time value.\n\n\n\n\n\n\n7\n\n\nDatePicker\n\n\nAllows the end user to specify a date value.\n\n\n\n\n\n\n8\n\n\nNumberPicker\n\n\nAllows the end user to specify a numeric value\n\n\n\n\n\n\n9\n\n\nNumericKeypad\n\n\nProvides the end user with a numeric entry field and buttons for 0-9 digits, to enter a numeric value. The developer must know the min/max number of digits allowed in the entry field.\n\n\n\n\n\n\n10\n\n\nRotaryKnob\n\n\nAn alternate way to represent a slider.\n\n\n\n\n\n\n11\n\n\nTextLabel\n\n\nRead-only text label.\n\n\n\n\n\n\n12\n\n\nNumericView\n\n\nProvides a read-only, numeric field with an optional label and numbers. For example, a washing machine display shows the time remaining for wash is 35:00 minutes.\n\n\n\n\n\n\n13\n\n\nEditText\n\n\nProvides the end user with a text entry field and keyboard. The developer must know the min/max number of letters allowed in the entry field.\n\n\n\n\n\n\n\n\nSupported data types\n\n\nThe following table lists the data types supported by the Control Panel service framework.\n\n\n\n\n\n\n\n\nCategory\n\n\nSupported data types\n\n\n\n\n\n\n\n\n\n\nScalar types\n\n\n* BOOLEAN - b\n\n\n\n\n\n\n\n\n* BYTE - y\n\n\n\n\n\n\n\n\n* BYTE ARRAY - ay\n\n\n\n\n\n\n\n\n* Numeric types:\n\n\n\n\n\n\n\n\n* INT16 - n\n\n\n\n\n\n\n\n\n* UINT16 - q\n\n\n\n\n\n\n\n\n* INT32 - i\n\n\n\n\n\n\n\n\n* UNT32 - u\n\n\n\n\n\n\n\n\n* INT64 - x\n\n\n\n\n\n\n\n\n* UINT64 - t\n\n\n\n\n\n\n\n\n* DOUBLE - d\n\n\n\n\n\n\n\n\n* STRING - s\n\n\n\n\n\n\nComposite types\n\n\nAll composite data type must have the following signature--q(type)--where the first value is an enum value indicating the composite type\n\n\n\n\n\n\n\n\nComposite type enum\n / \nComposite type name\n / \nSignature\n / \nDescription\n\n\n\n\n\n\n\n\n0 / Date / q(qqq) / Data type per RFC3339. There are three fields: date-mday (1-31); date-month (1-12); and date-fullyear (4-digit year).\n\n\n\n\n\n\n\n\n1 / Time / q(qqq) / Time type per RFC3339. There are three fields: time-hour (0-23); time-minute (0-59); and time-second (0-59).\n\n\n\n\n\n\nCollection of records\n\n\nArray of records of only scalar and supported composite types. All records in the array must be of the same record type.\n\n\n\n\n\n\n\n\nList of values\n\n\nA list of values is an array of structs.\n\n\n\n\n\n\n\n\nField name\n\n\nData type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nValue\n\n\nv\n\n\nValue with the same data type of the property.\n\n\n\n\n\n\nLabel\n\n\ns\n\n\nDisplay label.\n\n\n\n\n\n\n\n\nProperty widget ranges\n\n\nThe following table lists Property widget ranges.\n\n\n\n\n\n\n\n\nField name\n\n\nData type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmin\n\n\nv\n\n\nMinimum value with the same data type as that of the property.\n\n\n\n\n\n\nmax\n\n\nv\n\n\nMaximum value with the same data type as that of the property.\n\n\n\n\n\n\nincrement\n\n\nv\n\n\nValue to increment/decrement by. It has the same data type as that of the property.\n\n\n\n\n\n\n\n\nMethods\n\n\nNo methods are exposed by this interface.\n\n\nSignals\n\n\n\n\n\n\n\n\nSignal name\n\n\nParameters\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nName\n / \nData type\n\n\n\n\n\n\n\n\nValueChanged\n\n\nnewValue / v\n\n\nThe property's value has changed.\n\n\n\n\n\n\nValueChanged\n\n\nnone\n\n\nThe metadata has changed. This can occur due to changes in any of the property objects.\n\n\n\n\n\n\n\n\nIntrospect XML\n\n\nThe following XML defines the Property interface.\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.Property\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n\n      \nproperty name=\nValue\n type=\nv\n access=\nreadwrite\n/\n\n      \nsignal name=\nMetadataChanged\n /\n\n      \nsignal name=\nValueChanged\n\n         \narg type=\nv\n/\n\n      \n/signal\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nLabelProperty Interface\n\n\nThis interface provides the control mechanism for the label \nproperty widget (a text label). Each widget is represented \nby an AllJoyn object implementing this interface.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.LabelProperty\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit}/{panel}/{language}/.../ {object name}\n\n\n\n\n\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n/ControlPanel/airconditioner/consolel/Warning\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\nStates\n\n\nu\n\n\nBit mask\n\n\nno\n\n\nBit mask for various widget states\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMask\n / \nName\n / \nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0x01 / enabled / Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.\n\n\n\n\n\n\nLabel\n\n\ns\n\n\nN/A\n\n\nno\n\n\nText label\n\n\n\n\n\n\nOptParams\n\n\na{qv}\n\n\nN/A\n\n\nno\n\n\nMetadata dictionary. See \nLabelProperty widget metadata\n for more information.\n\n\n\n\n\n\n\n\nLabelProperty widget metadata\n\n\nThe following table lists LabelProperty widget metadata.\n\n\n\n\n\n\n\n\nDictionary key\n\n\nField name\n\n\nValue type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nbgColor\n\n\nu\n\n\nBackground color expressed as RGB value. If not specified, then the background color of the enclosing container is used.\n\n\n\n\n\n\n2\n\n\nhints\n\n\naq\n\n\nThe widget rendering hints. See \nLabelProperty widget hints\n for more information.\n\n\n\n\n\n\n\n\nLabelProperty widget hints\n\n\nThe following table lists LabelProperty widget hints.\n\n\n\n\n\n\n\n\nHint ID\n\n\nHint name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nTextLabel\n\n\nRead-only text label.\n\n\n\n\n\n\n\n\nMethods\n\n\nNo methods are exposed by this interface.\n\n\nSignals\n\n\n\n\n\n\n\n\nSignal name\n\n\nParameters\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMetadataChanged\n\n\nnone\n\n\nThe metadata has changed. This can occur due to changes in any of the property objects.\n\n\n\n\n\n\n\n\nIntrospect XML\n\n\nThe following XML defines the LabelProperty interface.\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.LabelProperty\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nLabel\n type=\ns\n access=\nread\n/\n\n      \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n\n      \nsignal name=\nMetadataChanged\n /\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nAction Interface\n\n\nThis interface provides the control mechanism for the Action widget. \nEach Action widget is represented by an AllJoyn object implementing \nthis interface. An action widget can optionally provide a confirmation \ndialog widget in its object sub-tree to allow for a pop-up dialog to \nappear whenever the UI presentation of this action is activated. \nThe action taken on the confirmation dialog will take place instead \nof the Exec() method call for this Action widget.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.Action\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit}//{panel}/{language}/.../{object name}\n\n\n\n\n\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n/ControlPanel/{unit}/{panel}/{language}/.../{object name}\n\n\n\n\n\n\norg.alljoyn.ControlPanel.SecuredAction\n\n\n1\n\n\nyes\n\n\n/ControlPanel/{unit}/{panel}/{language}/.../{object name}\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\nStates\n\n\nu\n\n\nBit mask\n\n\nno\n\n\nBit mask for various widget states\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMask\n / \nName\n / \nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0x01 / enabled / Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.\n\n\n\n\n\n\nOptParams\n\n\na{qv}\n\n\nN/A\n\n\nno\n\n\nMetadata dictionary. See \nAction widget metadata\n for more information.\n\n\n\n\n\n\n\n\nAction widget metadata\n\n\nThe following table lists action widget metadata.\n\n\n\n\n\n\n\n\nDictionary key\n\n\nField name\n\n\nValue type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nlabel\n\n\ns\n\n\nLabel\n\n\n\n\n\n\n1\n\n\nbgColor\n\n\nu\n\n\nBackground color expressed as RGB value. If not specified, then the background color of the enclosing container is used.\n\n\n\n\n\n\n2\n\n\nhints\n\n\naq\n\n\nThe widget rendering hints. See \nAction widget hints\n for more information.\n\n\n\n\n\n\n\n\nAction widget hints\n\n\nThe following table lists Action widget hints.\n\n\n\n\n\n\n\n\nHint ID\n\n\nHint name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nActionButton\n\n\nButton associated with an action or a method call, for example, \"submit\".\n\n\n\n\n\n\n\n\nMethods\n\n\nExec\n\n\nInputs\n \n\n\nNone.\n\n\nOutput\n\n\nNone.\n\n\nDescription\n\n\nExecute the action command.\n\n\nSignals\n\n\n\n\n\n\n\n\nSignal name\n\n\nParameters\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMetadataChanged\n\n\nnone\n\n\nThe metadata has changed. This can occur due to changes in any of the property objects.\n\n\n\n\n\n\n\n\nIntrospect XML\n\n\nThe following XML defines the Action interface.\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\nxsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.Action\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n\n      \nsignal name=\nMetadataChanged\n /\n\n      \nmethod name=\nExec\n/\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nNotificationAction Interface\n\n\nThis interface indicates whether the object is a notification \naction object. A notification object is typically referenced \nin a notification message. Upon receiving such notification, \nthe controller can generate the notification action panel \nbased on the metadata provided by this type of object. \nThis object is different from a regular control panel since \nit allows the controllee to send a signal to tell the controller \nto dismiss the panel.\n\n\nThis object supports at least one language. It's the responsibility \nof the controller to introspect the children objects to locate \nthe corresponding root container of the given panel for the \nspecific language code.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.NotificationAction\n\n\n1\n\n\nno\n\n\n/NotificationPanel/{unit}/{actionPanelName}\n\n\n\n\n\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n/NotificationPanel/washing/CycleCompleted\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\n\n\nSignals\n\n\n\n\n\n\n\n\nSignal name\n\n\nParameters\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDismiss\n\n\nnone\n\n\nThe controller must dismiss this notification panel.\n\n\n\n\n\n\n\n\nIntrospection XML\n\n\nThe following XML defines the NotificationAction interface.\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.NotificationAction\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nsignal name=\nDismiss\n /\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nDialog Interface\n\n\nThis interface provides all the metadata to guide the controller \nto render the UI for a dialog widget. A dialog widget typically \nhas a message and up to three action buttons.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.Dialog\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit)/{panelName}/{language}/.../{dialogName}\n\n\n\n\n\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n/ControlPanel/washing/mainPanel/en/Confirmation\n\n\n\n\n\n\norg.alljoyn.ControlPanel.SecuredDialog\n\n\n1\n\n\nyes\n\n\n/ControlPanel/{unit}/{panel}/{language}/.../{dialogName}\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\nStates\n\n\nu\n\n\nBit mask\n\n\nno\n\n\nBit mask for various widget states\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMask\n / \nName\n / \nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0x01 / enabled / Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.\n\n\n\n\n\n\nOptParams\n\n\na{qv}\n\n\nN/A\n\n\nno\n\n\nMetadata dictionary. See \nDialog widget metadata\n for more information.\n\n\n\n\n\n\nMessage\n\n\nq\n\n\nN/A\n\n\nno\n\n\nDisplay message.\n\n\n\n\n\n\nNumActions\n\n\nq\n\n\n1-3\n\n\nno\n\n\nNumber of available actions.\n\n\n\n\n\n\n\n\nDialog widget metadata\n\n\nThe following table lists Dialog widget metadata.\n\n\n\n\n\n\n\n\nDictionary key\n\n\nField name\n\n\nValue type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nlabel\n\n\ns\n\n\nLabel or title of the dialog.\n\n\n\n\n\n\n1\n\n\nbgColor\n\n\nu\n\n\nBackground color expressed as RGB value. If not specified, then the background color of the enclosing container is used.\n\n\n\n\n\n\n2\n\n\nhints\n\n\naq\n\n\nLayout hints. See \nDialog widget layout hints\n for more information.\n\n\n\n\n\n\n6\n\n\nlabelAction1\n\n\ns\n\n\nLabel of the action1 widget.\n\n\n\n\n\n\n7\n\n\nlabelAction2\n\n\ns\n\n\nLabel of the action2 widget.\n\n\n\n\n\n\n8\n\n\nlabelAction3\n\n\ns\n\n\nLabel of the action3 widget.\n\n\n\n\n\n\n\n\nDialog widget layout hints\n\n\nThe following table lists Dialog layout hints.\n\n\n\n\n\n\n\n\nHint ID\n\n\nHint name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nAlertDialog\n\n\nWidget that combines a label, text data, and buttons in a single dialog box. A minimum of 1 button is required. A maximum of 3 buttons is supported.\n\n\n\n\n\n\n\n\nMethods\n\n\nAction1\n\n\nInputs\n\n\nNone.\n\n\nOutput\n\n\nNone.\n\n\nDescription\n\n\nExecute the action number 1.\n\n\nAction2\n\n\nInputs\n\n\nNone.\n\n\nOutput\n\n\nNone.\n\n\nDescription\n\n\nExecute the action number 2. If the NumActions property is \nless than 2, the org.alljoyn.Error.MethodNotAllowed error \nwill be raised.\n\n\nAction3\n\n\nInputs\n\n\nNone.\n\n\nOutput\n\n\nNone.\n\n\nDescription\n\n\nExecute the action number 3. If the NumActions property \nis less than 3, the org.alljoyn.Error.MethodNotAllowed \nerror will be raised.\n\n\nSignals\n\n\n\n\n\n\n\n\nSignal name\n\n\nParameters\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMetadataChanged\n\n\nnone\n\n\nThe metadata has changed. This can occur due to changes in any of the property objects.\n\n\n\n\n\n\n\n\nIntrospection XML\n\n\nThe following XML defines the Dialog interface.\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.Dialog\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n\n      \nproperty name=\nMessage\n type=\ns\n access=\nread\n/\n\n      \nproperty name=\nNumActions\n type=\nq\n access=\nread\n/\n\n      \nsignal name=\nMetadataChanged\n /\n\n      \nmethod name=\nAction1\n/\n\n      \nmethod name=\nAction2\n/\n\n      \nmethod name=\nAction3\n/\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nListProperty Interface\n\n\nThis interface provides the control mechanism for the list \nproperty widget. A list property widget holds a list of \nrecords and a container representing the UI of the record \ndisplay/input form.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.ListProperty\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit}/{language}/{panel}/{object name}\n\n\n\n\n\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n/ControlPanel/sprinkler/mainPanel/en/Schedules\n\n\n\n\n\n\norg.alljoyn.ControlPanel.SecuredListProperty\n\n\n1\n\n\nyes\n\n\n/ControlPanel/{unit}/{language}/{panel}/.../{object name}\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\nStates\n\n\nu\n\n\nBit mask\n\n\nno\n\n\nBit mask for various widget states\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMask\n / \nName\n / \nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0x01 / enabled / Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.\n\n\n\n\n\n\nOptParams\n\n\na{qv}\n\n\nN/A\n\n\nno\n\n\nMetadata dictionary. See \nListProperty widget metadata\n for more information.\n\n\n\n\n\n\nValue\n\n\na{qs}\n\n\nN/A\n\n\nno\n\n\nList of records. Each record in the list holds the following fields:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* recordID (q): the record ID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* label (s): the label to display on the list\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe record data are not exposed in this property. The View() method call can be used to view each record.\n\n\n\n\n\n\n\n\nListProperty widget metadata\n\n\nThe following table lists ListProperty widget metadata.\n\n\n\n\n\n\n\n\nDictionary key\n\n\nField name\n\n\nValue type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nlabel\n\n\ns\n\n\nLabel\n\n\n\n\n\n\n1\n\n\nbgColor\n\n\nu\n\n\nBackground color expressed as RGB value. If not specified, then the background color of the enclosing container is used.\n\n\n\n\n\n\n2\n\n\nhints\n\n\naq\n\n\nWidget rendering hints. See \nListProperty widget hints\n for more information.\n\n\n\n\n\n\n\n\nListProperty widget hints\n\n\nThe following table lists ListProperty widget hints.\n\n\n\n\n\n\n\n\nHint ID\n\n\nHint name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nDynamicSpinner\n\n\nWidget that allows the end user to select an option from a list, add a new option, delete an option, and update an option.\n\n\n\n\n\n\n\n\nMethods\n\n\nAdd\n\n\nInputs\n\n\nNone.\n\n\nOutput\n\n\nNone.\n\n\nDescription\n\n\nPrepare the input form for adding a new record to the list. \nUI requirements follow:\n\n\n\n\nThe controller must present an OK button and tie it to the \nConfirm() method call. Completing the add action on the input \nform will add the new record to the list.\n\n\nThe controller must present a Cancel button and tie to the \nCancel() method call to allow for discarding the operation.\n\n\n\n\nDelete\n\n\nInputs\n\n\n\n\n\n\n\n\nParameter name\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrecordID\n\n\nq\n\n\nThe record ID.\n\n\n\n\n\n\n\n\nOutput\n\n\nNone.\n\n\nDescription\n\n\nPrepare the form for view the record prior to the delete action. \nUI requirements follow:\n\n The controller must present an OK button and tie it to the \nConfirm() method call. A confirm action deletes the record \nfrom the list.\n\n The controller must present a Cancel button and tie to the \nCancel() method call to allow for discarding the operation.\n\n\nView\n\n\nInputs\n\n\n\n\n\n\n\n\nParameter name\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrecordID\n\n\nq\n\n\nThe record ID.\n\n\n\n\n\n\n\n\nOutput\n\n\nNone.\n\n\nDescription\n\n\nPrepare the display form to view the record identified by the recordID. \n\n\nThe controller must present an OK button to dismiss the view form.\n\n\nUpdate\n\n\nInputs\n\n\n\n\n\n\n\n\nParameter name\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrecordID\n\n\nq\n\n\nThe record ID.\n\n\n\n\n\n\n\n\nOutput\n\n\nNone.\n\n\nDescription\n\n\nPrepare the input form to view the record identified by the \nrecordID and allow the end user to modify the fields. \nUI requirements follow:\n\n\n\n\nThe controller must present an OK button and tie it to the \nConfirm() method call. A confirm action updates the given \nrecord with new information.\n\n\nThe controller must present a Cancel button and tie to the \nCancel() method call to allow for discarding the operation.\n\n\n\n\nConfirm\n\n\nInputs\n\n\nNone.\n\n\nOutput\n\n\nNone.\n\n\nDescription\n\n\nConfirm the action and save the change requested.\n\n\nThe controller must present an OK button to dismiss the view form.\n\n\nCancel\n\n\nInputs\n\n\nNone.\n\n\nOutput\n\n\nNone.\n\n\nDescription\n\n\nCancel the current action.\n\n\nThe controller must present a Cancel button to dismiss the input form.\n\n\nSignals\n\n\n\n\n\n\n\n\nSignal name\n\n\nParameters\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nValueChanged\n\n\nnone\n\n\nThe property's value has changed. Because the list data can be large, the signal does not send the current value.\n\n\n\n\n\n\nMetadataChanged\n\n\nnone\n\n\nThe metadata has changed. This can occur due to changes in any of the property objects.\n\n\n\n\n\n\n\n\nIntrospect XML\n\n\nThe following XML defines the ListProperty interface.\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.ListProperty\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n\n      \nproperty name=\nValue\n type=\na(qs)\n access=\nread\n/\n\n      \nmethod name=\nAdd\n/\n\n      \nmethod name=\nDelete\n\n         \narg name=\nrecordID\n type=\nq\n direction=\nin\n/\n\n      \n/method\n\n      \nmethod name=\nView\n\n         \narg name=\nrecordID\n type=\nq\n direction=\nin\n/\n\n      \n/method\n\n      \nmethod name=\nUpdate\n\n         \narg name=\nrecordID\n type=\nq\n direction=\nin\n/\n\n      \n/method\n\n      \nmethod name=\nConfirm\n\n      \n/method\n\n      \nmethod name=\nCancel\n\n      \n/method\n\n\n      \nsignal name=\nMetadataChanged\n/\n\n      \nsignal name=\nValueChanged\n/\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nSupport of Existing HTTP Control Pages\n\n\nShould a device already have HTTP control pages hosted \non the device itself, it can advertise those pages using \nthe HTTPControl interface.\n\n\nThis interface provides all the information about the \nhosted HTTP control pages on the device.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.HTTPControl\n\n\n1\n\n\nno\n\n\n/Control/{unit}/HTTPControl\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\nGetRootURL\n\n\nInputs\n\n\nNone.\n\n\nOutput\n\n\n\n\n\n\n\n\nReturn signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ns\n\n\nRoot URL of the control pages.\n\n\n\n\n\n\n\n\nSignals\n\n\nThere is no signal in this interface.\n\n\nIntrospection XML\n\n\nThe following XML defines the HTTPControl interface.\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.Control.HTTPControl\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nmethod name=\nGetRootURL\n\n         \narg name=\nurl\n type=\ns\n direction=\nout\n/\n\n      \n/method\n\n   \n/interface\n\n\n/node",
            "title": "Interface 14 02"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#control-panel-interface-definition-1402",
            "text": "Warning: This is not the latest interface definition.  Go here for latest Control Panel Interface Definition",
            "title": "Control Panel Interface Definition - 14.02"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#introduction",
            "text": "Purpose  This document describes the specification of the Control Panel \nservice framework's collection of interfaces. Implementing these \ninterfaces provides the Control Panel service framework a mechanism \nto allow for a controller application like the AllJoyn  On \napplication to render the UI based on the controllee application's \nwidget metadata. The controller application does not know the \nsemantics of the remote widgets. It relies on the end user to understand\nand perform the actions on the rendered user interface. A typical \naction is selecting a field or pressing a button.  Scope  This document is targeted to developers of AllJoyn applications \nwho want to build controller and controllee applications without \nusing the tools provided by the Control Panel service framework.  References  Except for supporting information, the following are reference \ndocuments found on the AllSeen Alliance web site's Docs/Downloads section.   AllJoyn  Framework Tutorial  Introduction to AllJoyn  Thin Client  AllJoyn Data Type Signature  RFC3339: (Date and Time on the Internet: Timestamps)   Acronyms and terms     Term  Definition      AllJoyn device  A device that supports the AllJoyn framework and can connect to a personal network.    Control panel  Collection of Widgets that allow a user to interact with a device. A control panel is defined and announced by a Controllee; and discovered and displayed Control panel by a Controller. A device can have more than one, and can be defined on a per-language basis.    Controllee  An AllJoyn application that advertises its Control Panel interfaces, so that other AllJoyn devices may control it.    Controller  An AllJoyn application that controls another AllJoyn device that advertises its Control Panel interfaces.",
            "title": "Introduction"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#specification-overview",
            "text": "The Control Panel interfaces must be implemented by an \napplication on a controllee. Figure 1 illustrates \nthe relationship between a controllee app and a controller app.   Figure: Control Panel service framework architecture within \nthe AllJoyn  framework  The OEM is responsible for writing the Control interfaces and \nthe Control Panel service framework metadata.  The UI Toolkit Adaption Layer, a library used to map the metadata \nto platform-specific UI elements, is made available as part of the \nControl Panel service framework release.",
            "title": "Specification Overview"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#discovery",
            "text": "Controllees are discovered via an AllJoyn announcement. Each AllJoyn \ndevice uses the About feature to announce basic app information like \napp name, device name, manufacturer, and model number. The announcement \nalso contains the list of object paths and service interfaces to allow \nthe controller to determine whether the controllee provides \nfunctionality of interest.  The About announcement is propagated using a sessionless signal.",
            "title": "Discovery"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#call-flows",
            "text": "Static Control Panel flow  Figure 2 illustrates a typical call flow for a control \npanel that does not change once rendered.   Figure: Static Control Panel call flow  Dynamic Control Panel flow  Figure 3 illustrates a call flow for a control panel that \nchanges as the end user interacts with the widgets.   Figure: Dynamic Control Panel call flow",
            "title": "Call Flows"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#error-handling",
            "text": "The method calls in the Control Panel interfaces use the AllJoyn \nerror message handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE) \nto set the error name and error message.  Table 1 lists the possible errors raised by the Control Panel service framework interfaces.  Table 1: Control Panel service framework interface errors     Error name  Error message      org.alljoyn.Error.OutOfRange  Value out of range    org.alljoyn.Error.InvalidState  Invalid state    org.alljoyn.Error.InvalidProperty  Invalid property    org.alljoyn.Error.InvalidValue  Invalid value    org.alljoyn.Error.MethodNotAllowed  Method call not allowed",
            "title": "Error Handling"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#busobject-map",
            "text": "BusObject structure  Figure 4 shows the tree structure diagram that \nrepresents the basic organization of AllJoyn objects used in \nthe support of the Control Panel service framework. A control \npanel is implemented using several AllJoyn objects.   Figure: BusObject map  The objects are organized to support multiple units and multiple \nlanguages. Only the top-level panels should be listed in the announcement.  Since the IETF language tag allows for hyphen (-) which is not \nallowed in the bus object path, any language tag in the object \npath replaces a hyphen (-) with an underscore (_).  In addition to the control panels, the Control Panel service \nframework can also support other panels such as a notification \npanel. These panels are not required to be advertised in the announcement.  It is the controller's job to introspect and walk the object \ntree of a control panel to retrieve all the metadata for that \ncontrol panel.  BusObject map examples  The following subsections illustrate a few sample BusObject map structures.  Washing machine example  Figure 5 illustrates a sample bus object map for a washing machine.   Figure: Washing machine example  Sprinkler system example  Figure 6 illustrates a sample bus object map for a sprinkler system.   Figure: Sprinkler system example",
            "title": "BusObject Map"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#control-panel-service-framework-interfaces",
            "text": "The Control Panel service framework comprises a set of interfaces \nas illustrated in Figure 4.",
            "title": "Control Panel Service Framework Interfaces"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#controlpanel-interface",
            "text": "This interface indicates whether the object is a control panel. \nThis object will support at least one language. The service only \nneeds to advertise this type of object in the About announcement. \nNo other objects in the Control Panel service framework tree \nshould be announced.  NOTE: It's the responsibility of the controller to introspect \nthe children objects to locate the corresponding root container \nof the given panel for the specific language code.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.ControlPanel  1  no  /ControlPanel/{unit)/{panelName}       Example: /ControlPanel/washing/consolePanel     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number     Introspect XML  The following XML defines the ControlPanel interface.  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.ControlPanel \n       property name= Version  type= q  access= read / \n    /interface  /node",
            "title": "ControlPanel Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#container-interface",
            "text": "This interface provides all the metadata to guide the \ncontroller to render the UI for a container widget.     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.Container  1  no  /ControlPanel/{unit)/{panelName}/{language}/.../{containerName}       Examples:       /ControlPanel/washing/consolePanel/en       /ControlPanel/sprinkler/mainPanel/en/Schedules/InputForm/RunOnDays    org.alljoyn.ControlPanel.SecuredContainer  1  yes  /ControlPanel/{unit)/{panelName}/{language}/.../{containerName}     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number    States  u  Bit mask  no  Bit mask for various widget states        Mask  /  Name  /  Description        0x01 / enabled / Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.    OptParams  a{qv}  N/A  no  Metadata dictionary. See  Container widget metadata  for more information.     Container widget metadata  The following table defines the metadata of a container widget.     Dictionary key  Field name  Value type  Description      0  Label  s  Label    1  bgColor  u  Background color expressed as RGB value. If not specified, then the background color of the enclosing container is used.    2  layoutHints  aq  Layout hints. See  Container widget layout hints  for more information.     Container widget layout hints  The following table lists layout hints for a container widget.     Hint ID  Hint name  Description      1  Vertical Linear  A layout that aligns all components in a vertical direction.    2  Horizontal Linear  A layout that aligns all components in a horizontal direction.     Methods  No methods are exposed by this interface.  Signals     Signal name  Parameters  Description      MetadataChanged  None  The metadata has changed. This can occur due to changes in any of the property objects.     Introspect XML  The following XML defines the Container interface.  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.Container \n       property name= Version  type= q  access= read / \n       property name= States  type= u  access= read / \n       property name= OptParams  type= a{qv}  access= read / \n       signal name= MetadataChanged  / \n    /interface  /node",
            "title": "Container Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#property-interface",
            "text": "This interface provides the control mechanism for the property widget. \nEach widget is represented by an AllJoyn object implementing this interface.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.Property  1  no  /ControlPanel/{unit)/{panel}/{language}/.../{object name}       Examples:       /ControlPanel/washing/consolePanel/en/Mode       /ControlPanel/sprinkler/mainPanel/en/Schedules/InputForm/ScheduleName    org.alljoyn.ControlPanel.SecuredProperty  1  yes  /ControlPanel/{unit}/{panel}/.../{object name}     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number    States  u  Bit mask  no  Bit mask for various widget states        Mask  /  Name  /  Description        0x01 / enabled / Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.        0x02 / writable / Indicates whether the widget is writable.    OptParams  a{qv}  N/A  no  Metadata dictionary. See  Property widget metadata  for more information.    Values  v  N/A  yes  Actual value of the property. When modifying the property, the device may give the AllJoyn error org.alljoyn.Error.MethodNotAllowed if the property is ReadOnly. The supported data types are listed in  Supported data types .     Property widget metatdata  The following table lists property widget metadata.     Dictionary key  Field name  Value type  Description      0  Label  s  Label    1  bgColor  u  Background color expressed as RGB value. If not specified, then the background color of the enclosing container is used.    2  hints  aq  The widget rendering hints. See  Property widget hints  for more information.    3  unitOfMeasure  s  Unit of measurement.    4  constrainToValue  a(vs)  Constraint on the value as a list of values. Any value of the property must match one of the values in this list. See  List of values  for more information.    5  range  vv  Constraint on the value as a range; a value of this property  must stay within the range. See  Property widget ranges  for more information.     Property widget hints     Hint ID  Hint name  Description      1  Switch  Two-state buttons allowing the end-user to toggle the state of a single settings option.    2  CheckBox  Widget for multi-select. It allows the end user to select multiple options from a list.    3  Spinner  Widget for single-select. It allows the end user to select a single option from a list.    4  RadioButton  Widget for single-select. It allows the end user to select a single option from a list.    5  Slider  Allows the end user to select a value from a continuous or discrete range. The appearance is linear, either horizontal or vertical.    6  TimePicker  Allows the end user to specify a time value.    7  DatePicker  Allows the end user to specify a date value.    8  NumberPicker  Allows the end user to specify a numeric value    9  NumericKeypad  Provides the end user with a numeric entry field and buttons for 0-9 digits, to enter a numeric value. The developer must know the min/max number of digits allowed in the entry field.    10  RotaryKnob  An alternate way to represent a slider.    11  TextLabel  Read-only text label.    12  NumericView  Provides a read-only, numeric field with an optional label and numbers. For example, a washing machine display shows the time remaining for wash is 35:00 minutes.    13  EditText  Provides the end user with a text entry field and keyboard. The developer must know the min/max number of letters allowed in the entry field.     Supported data types  The following table lists the data types supported by the Control Panel service framework.     Category  Supported data types      Scalar types  * BOOLEAN - b     * BYTE - y     * BYTE ARRAY - ay     * Numeric types:     * INT16 - n     * UINT16 - q     * INT32 - i     * UNT32 - u     * INT64 - x     * UINT64 - t     * DOUBLE - d     * STRING - s    Composite types  All composite data type must have the following signature--q(type)--where the first value is an enum value indicating the composite type     Composite type enum  /  Composite type name  /  Signature  /  Description     0 / Date / q(qqq) / Data type per RFC3339. There are three fields: date-mday (1-31); date-month (1-12); and date-fullyear (4-digit year).     1 / Time / q(qqq) / Time type per RFC3339. There are three fields: time-hour (0-23); time-minute (0-59); and time-second (0-59).    Collection of records  Array of records of only scalar and supported composite types. All records in the array must be of the same record type.     List of values  A list of values is an array of structs.     Field name  Data type  Description      Value  v  Value with the same data type of the property.    Label  s  Display label.     Property widget ranges  The following table lists Property widget ranges.     Field name  Data type  Description      min  v  Minimum value with the same data type as that of the property.    max  v  Maximum value with the same data type as that of the property.    increment  v  Value to increment/decrement by. It has the same data type as that of the property.     Methods  No methods are exposed by this interface.  Signals     Signal name  Parameters  Description       Name  /  Data type     ValueChanged  newValue / v  The property's value has changed.    ValueChanged  none  The metadata has changed. This can occur due to changes in any of the property objects.     Introspect XML  The following XML defines the Property interface.  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.Property \n       property name= Version  type= q  access= read / \n       property name= States  type= u  access= read / \n       property name= OptParams  type= a{qv}  access= read / \n       property name= Value  type= v  access= readwrite / \n       signal name= MetadataChanged  / \n       signal name= ValueChanged \n          arg type= v / \n       /signal \n    /interface  /node",
            "title": "Property Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#labelproperty-interface",
            "text": "This interface provides the control mechanism for the label \nproperty widget (a text label). Each widget is represented \nby an AllJoyn object implementing this interface.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.LabelProperty  1  no  /ControlPanel/{unit}/{panel}/{language}/.../ {object name}       Example:       /ControlPanel/airconditioner/consolel/Warning     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number    States  u  Bit mask  no  Bit mask for various widget states        Mask  /  Name  /  Description        0x01 / enabled / Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.    Label  s  N/A  no  Text label    OptParams  a{qv}  N/A  no  Metadata dictionary. See  LabelProperty widget metadata  for more information.     LabelProperty widget metadata  The following table lists LabelProperty widget metadata.     Dictionary key  Field name  Value type  Description      1  bgColor  u  Background color expressed as RGB value. If not specified, then the background color of the enclosing container is used.    2  hints  aq  The widget rendering hints. See  LabelProperty widget hints  for more information.     LabelProperty widget hints  The following table lists LabelProperty widget hints.     Hint ID  Hint name  Description      1  TextLabel  Read-only text label.     Methods  No methods are exposed by this interface.  Signals     Signal name  Parameters  Description      MetadataChanged  none  The metadata has changed. This can occur due to changes in any of the property objects.     Introspect XML  The following XML defines the LabelProperty interface.  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.LabelProperty \n       property name= Version  type= q  access= read / \n       property name= States  type= u  access= read / \n       property name= Label  type= s  access= read / \n       property name= OptParams  type= a{qv}  access= read / \n       signal name= MetadataChanged  / \n    /interface  /node",
            "title": "LabelProperty Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#action-interface",
            "text": "This interface provides the control mechanism for the Action widget. \nEach Action widget is represented by an AllJoyn object implementing \nthis interface. An action widget can optionally provide a confirmation \ndialog widget in its object sub-tree to allow for a pop-up dialog to \nappear whenever the UI presentation of this action is activated. \nThe action taken on the confirmation dialog will take place instead \nof the Exec() method call for this Action widget.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.Action  1  no  /ControlPanel/{unit}//{panel}/{language}/.../{object name}       Example:       /ControlPanel/{unit}/{panel}/{language}/.../{object name}    org.alljoyn.ControlPanel.SecuredAction  1  yes  /ControlPanel/{unit}/{panel}/{language}/.../{object name}     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number    States  u  Bit mask  no  Bit mask for various widget states        Mask  /  Name  /  Description        0x01 / enabled / Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.    OptParams  a{qv}  N/A  no  Metadata dictionary. See  Action widget metadata  for more information.     Action widget metadata  The following table lists action widget metadata.     Dictionary key  Field name  Value type  Description      0  label  s  Label    1  bgColor  u  Background color expressed as RGB value. If not specified, then the background color of the enclosing container is used.    2  hints  aq  The widget rendering hints. See  Action widget hints  for more information.     Action widget hints  The following table lists Action widget hints.     Hint ID  Hint name  Description      1  ActionButton  Button associated with an action or a method call, for example, \"submit\".     Methods  Exec  Inputs    None.  Output  None.  Description  Execute the action command.  Signals     Signal name  Parameters  Description      MetadataChanged  none  The metadata has changed. This can occur due to changes in any of the property objects.     Introspect XML  The following XML defines the Action interface.  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \nxsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.Action \n       property name= Version  type= q  access= read / \n       property name= States  type= u  access= read / \n       property name= OptParams  type= a{qv}  access= read / \n       signal name= MetadataChanged  / \n       method name= Exec / \n    /interface  /node",
            "title": "Action Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#notificationaction-interface",
            "text": "This interface indicates whether the object is a notification \naction object. A notification object is typically referenced \nin a notification message. Upon receiving such notification, \nthe controller can generate the notification action panel \nbased on the metadata provided by this type of object. \nThis object is different from a regular control panel since \nit allows the controllee to send a signal to tell the controller \nto dismiss the panel.  This object supports at least one language. It's the responsibility \nof the controller to introspect the children objects to locate \nthe corresponding root container of the given panel for the \nspecific language code.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.NotificationAction  1  no  /NotificationPanel/{unit}/{actionPanelName}       Example:       /NotificationPanel/washing/CycleCompleted     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number     Signals     Signal name  Parameters  Description      Dismiss  none  The controller must dismiss this notification panel.     Introspection XML  The following XML defines the NotificationAction interface.  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.NotificationAction \n       property name= Version  type= q  access= read / \n       signal name= Dismiss  / \n    /interface  /node",
            "title": "NotificationAction Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#dialog-interface",
            "text": "This interface provides all the metadata to guide the controller \nto render the UI for a dialog widget. A dialog widget typically \nhas a message and up to three action buttons.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.Dialog  1  no  /ControlPanel/{unit)/{panelName}/{language}/.../{dialogName}       Example:       /ControlPanel/washing/mainPanel/en/Confirmation    org.alljoyn.ControlPanel.SecuredDialog  1  yes  /ControlPanel/{unit}/{panel}/{language}/.../{dialogName}     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number    States  u  Bit mask  no  Bit mask for various widget states        Mask  /  Name  /  Description        0x01 / enabled / Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.    OptParams  a{qv}  N/A  no  Metadata dictionary. See  Dialog widget metadata  for more information.    Message  q  N/A  no  Display message.    NumActions  q  1-3  no  Number of available actions.     Dialog widget metadata  The following table lists Dialog widget metadata.     Dictionary key  Field name  Value type  Description      0  label  s  Label or title of the dialog.    1  bgColor  u  Background color expressed as RGB value. If not specified, then the background color of the enclosing container is used.    2  hints  aq  Layout hints. See  Dialog widget layout hints  for more information.    6  labelAction1  s  Label of the action1 widget.    7  labelAction2  s  Label of the action2 widget.    8  labelAction3  s  Label of the action3 widget.     Dialog widget layout hints  The following table lists Dialog layout hints.     Hint ID  Hint name  Description      1  AlertDialog  Widget that combines a label, text data, and buttons in a single dialog box. A minimum of 1 button is required. A maximum of 3 buttons is supported.     Methods  Action1  Inputs  None.  Output  None.  Description  Execute the action number 1.  Action2  Inputs  None.  Output  None.  Description  Execute the action number 2. If the NumActions property is \nless than 2, the org.alljoyn.Error.MethodNotAllowed error \nwill be raised.  Action3  Inputs  None.  Output  None.  Description  Execute the action number 3. If the NumActions property \nis less than 3, the org.alljoyn.Error.MethodNotAllowed \nerror will be raised.  Signals     Signal name  Parameters  Description      MetadataChanged  none  The metadata has changed. This can occur due to changes in any of the property objects.     Introspection XML  The following XML defines the Dialog interface.  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.Dialog \n       property name= Version  type= q  access= read / \n       property name= States  type= u  access= read / \n       property name= OptParams  type= a{qv}  access= read / \n       property name= Message  type= s  access= read / \n       property name= NumActions  type= q  access= read / \n       signal name= MetadataChanged  / \n       method name= Action1 / \n       method name= Action2 / \n       method name= Action3 / \n    /interface  /node",
            "title": "Dialog Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#listproperty-interface",
            "text": "This interface provides the control mechanism for the list \nproperty widget. A list property widget holds a list of \nrecords and a container representing the UI of the record \ndisplay/input form.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.ListProperty  1  no  /ControlPanel/{unit}/{language}/{panel}/{object name}       Example:       /ControlPanel/sprinkler/mainPanel/en/Schedules    org.alljoyn.ControlPanel.SecuredListProperty  1  yes  /ControlPanel/{unit}/{language}/{panel}/.../{object name}     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number    States  u  Bit mask  no  Bit mask for various widget states        Mask  /  Name  /  Description        0x01 / enabled / Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.    OptParams  a{qv}  N/A  no  Metadata dictionary. See  ListProperty widget metadata  for more information.    Value  a{qs}  N/A  no  List of records. Each record in the list holds the following fields:        * recordID (q): the record ID        * label (s): the label to display on the list        The record data are not exposed in this property. The View() method call can be used to view each record.     ListProperty widget metadata  The following table lists ListProperty widget metadata.     Dictionary key  Field name  Value type  Description      0  label  s  Label    1  bgColor  u  Background color expressed as RGB value. If not specified, then the background color of the enclosing container is used.    2  hints  aq  Widget rendering hints. See  ListProperty widget hints  for more information.     ListProperty widget hints  The following table lists ListProperty widget hints.     Hint ID  Hint name  Description      1  DynamicSpinner  Widget that allows the end user to select an option from a list, add a new option, delete an option, and update an option.     Methods  Add  Inputs  None.  Output  None.  Description  Prepare the input form for adding a new record to the list. \nUI requirements follow:   The controller must present an OK button and tie it to the \nConfirm() method call. Completing the add action on the input \nform will add the new record to the list.  The controller must present a Cancel button and tie to the \nCancel() method call to allow for discarding the operation.   Delete  Inputs     Parameter name  Signature  Description      recordID  q  The record ID.     Output  None.  Description  Prepare the form for view the record prior to the delete action. \nUI requirements follow:  The controller must present an OK button and tie it to the \nConfirm() method call. A confirm action deletes the record \nfrom the list.  The controller must present a Cancel button and tie to the \nCancel() method call to allow for discarding the operation.  View  Inputs     Parameter name  Signature  Description      recordID  q  The record ID.     Output  None.  Description  Prepare the display form to view the record identified by the recordID.   The controller must present an OK button to dismiss the view form.  Update  Inputs     Parameter name  Signature  Description      recordID  q  The record ID.     Output  None.  Description  Prepare the input form to view the record identified by the \nrecordID and allow the end user to modify the fields. \nUI requirements follow:   The controller must present an OK button and tie it to the \nConfirm() method call. A confirm action updates the given \nrecord with new information.  The controller must present a Cancel button and tie to the \nCancel() method call to allow for discarding the operation.   Confirm  Inputs  None.  Output  None.  Description  Confirm the action and save the change requested.  The controller must present an OK button to dismiss the view form.  Cancel  Inputs  None.  Output  None.  Description  Cancel the current action.  The controller must present a Cancel button to dismiss the input form.  Signals     Signal name  Parameters  Description      ValueChanged  none  The property's value has changed. Because the list data can be large, the signal does not send the current value.    MetadataChanged  none  The metadata has changed. This can occur due to changes in any of the property objects.     Introspect XML  The following XML defines the ListProperty interface.  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.ListProperty \n       property name= Version  type= q  access= read / \n       property name= States  type= u  access= read / \n       property name= OptParams  type= a{qv}  access= read / \n       property name= Value  type= a(qs)  access= read / \n       method name= Add / \n       method name= Delete \n          arg name= recordID  type= q  direction= in / \n       /method \n       method name= View \n          arg name= recordID  type= q  direction= in / \n       /method \n       method name= Update \n          arg name= recordID  type= q  direction= in / \n       /method \n       method name= Confirm \n       /method \n       method name= Cancel \n       /method \n\n       signal name= MetadataChanged / \n       signal name= ValueChanged / \n    /interface  /node",
            "title": "ListProperty Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface-14-02/#support-of-existing-http-control-pages",
            "text": "Should a device already have HTTP control pages hosted \non the device itself, it can advertise those pages using \nthe HTTPControl interface.  This interface provides all the information about the \nhosted HTTP control pages on the device.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.HTTPControl  1  no  /Control/{unit}/HTTPControl     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number     Methods  GetRootURL  Inputs  None.  Output     Return signature  Description      s  Root URL of the control pages.     Signals  There is no signal in this interface.  Introspection XML  The following XML defines the HTTPControl interface.  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.Control.HTTPControl \n       property name= Version  type= q  access= read / \n       method name= GetRootURL \n          arg name= url  type= s  direction= out / \n       /method \n    /interface  /node",
            "title": "Support of Existing HTTP Control Pages"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/",
            "text": "Control Panel Interface Definition\n\n\nRelease History\n\n\nTo access a previous version of this document, click the release version link below.\n\n\n\n\n\n\n\n\nRelease version\n\n\nDate\n\n\nWhat changed\n\n\n\n\n\n\n\n\n\n\n14.02\n\n\n2/28/2014\n\n\nThe following interfaces were added:\nControlPanel.ControlPanel interface version 1\nControlPanel.Container interface version 1\nControlPanel.SecuredContainer interface version 1\nControlPanel.Property interface version 1\nControlPanel.SecuredProperty interface version 1\nControlPanel.LabelProperty interface version 1\nControlPanel.Action interface version 1\nControlPanel.SecuredAction interface version 1\nControlPanel.NotificationAction interface version 1\nControlPanel.Dialog interface version 1\nControlPanel.SecuredDialog interface version 1\nControlPanel.ListProperty interface version 1\nControlPanel.SecuredListProperty interface version 1\nControlPanel.HTTPControl interface version 1\n\n\n\n\n\n\n14.06\n\n\n6/30/2014\n\n\nNo updates\n\n\n\n\n\n\n14.06 Update 1\n\n\n9/29/2014\n\n\nUpdated the document title and Overview chapter title (changed Specification to Definition)\nAdded the release version number to the document title for version tracking.\nAdded a note in the Definition Overview chapter to address the AllSeen Alliance Compliance and Certification program.\nAdded a Mandatory column for method and signal parameters to support the AllSeen Alliance Compliance and Certification program.\n\n\n\n\n\n\n14.12\n\n\n12/17/2014\n\n\nCleanup to make requirements for methods and signals more clear.\n\n\n\n\n\n\n\n\nDefinition Overview\n\n\nThe Control Panel interfaces must be implemented by an \napplication on a controllee. The following figure illustrates \nthe relationship between a controllee app and a controller app.\n\n\n\n\nFigure:\n Control Panel service framework architecture within \nthe AllJoyn\n framework\n\n\nThe OEM is responsible for writing the Control interfaces and \nthe Control Panel service framework metadata.\n\n\nThe UI Toolkit Adaption Layer, a library used to map the metadata \nto platform-specific UI elements, is made available as part of the \nControl Panel service framework release.\n\n\nNOTE:\n All methods and signals are considered mandatory to support \nthe AllSeen Alliance Compliance and Certification program. \n\n\nDiscovery\n\n\nControllees are discovered via an AllJoyn announcement. Each AllJoyn \ndevice uses the About feature to announce basic app information like \napp name, device name, manufacturer, and model number. The announcement \nalso contains the list of object paths and service interfaces to allow \nthe controller to determine whether the controllee provides \nfunctionality of interest.\n\n\nThe About announcement is propagated using a sessionless signal.\n\n\nCall Flows\n\n\nStatic Control Panel flow\n\n\nThe following figure illustrates a typical call flow for a control \npanel that does not change once rendered.\n\n\n\n\nFigure:\n Static Control Panel call flow\n\n\nDynamic Control Panel flow\n\n\nThe following figure illustrates a call flow for a control panel that \nchanges as the end user interacts with the widgets.\n\n\n\n\nFigure:\n Dynamic Control Panel call flow\n\n\nError Handling\n\n\nThe method calls in the Control Panel interfaces use the AllJoyn \nerror message handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE) \nto set the error name and error message.\n\n\n\n\n\n\n\n\nError name\n\n\nError message\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.OutOfRange\n\n\nValue out of range\n\n\n\n\n\n\norg.alljoyn.Error.InvalidState\n\n\nInvalid state\n\n\n\n\n\n\norg.alljoyn.Error.InvalidProperty\n\n\nInvalid property\n\n\n\n\n\n\norg.alljoyn.Error.InvalidValue\n\n\nInvalid value\n\n\n\n\n\n\norg.alljoyn.Error.MethodNotAllowed\n\n\nMethod call not allowed\n\n\n\n\n\n\n\n\nBusObject Map\n\n\nBusObject structure\n\n\nThe following figure shows the tree structure diagram that \nrepresents the basic organization of AllJoyn objects used in \nthe support of the Control Panel service framework. A control \npanel is implemented using several AllJoyn objects.\n\n\n\n\nFigure:\n BusObject map\n\n\nThe objects are organized to support multiple units and multiple \nlanguages. Only the top-level panels should be listed in the announcement.\n\n\nSince the IETF language tag allows for hyphen (-) which is not \nallowed in the bus object path, any language tag in the object \npath replaces a hyphen (-) with an underscore (_).\n\n\nIn addition to the control panels, the Control Panel service \nframework can also support other panels such as a notification \npanel. These panels are not required to be advertised in the announcement.\n\n\nIt is the controller's job to introspect and walk the object \ntree of a control panel to retrieve all the metadata for that \ncontrol panel.\n\n\nBusObject map examples\n\n\nWashing machine example\n\n\n\n\nFigure:\n Washing machine example\n\n\nSprinkler system example\n\n\n\n\nFigure:\n Sprinkler system example\n\n\nControlPanel Interface\n\n\nThis interface indicates whether the object is a control panel. \nThis object will support at least one language. The service only \nneeds to advertise this type of object in the About announcement. \nNo other objects in the Control Panel service framework tree \nshould be announced.\n\n\nNOTE:\n It's the responsibility of the controller to introspect \nthe children objects to locate the corresponding root container \nof the given panel for the specific language code.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.ControlPanel\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit)/{panelName}\n\n\n\n\n\n\n\n\n\n\n\n\nExample: /ControlPanel/washing/consolePanel\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\n\n\nIntrospect XML\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.ControlPanel\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nContainer Interface\n\n\nThis interface provides all the metadata to guide the \ncontroller to render the UI for a container widget.\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.Container\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit)/{panelName}/{language}/.../{containerName}\nExamples:\n/ControlPanel/washing/consolePanel/en\n/ControlPanel/sprinkler/mainPanel/en/Schedules/InputForm/RunOnDays\n\n\n\n\n\n\norg.alljoyn.ControlPanel.SecuredContainer\n\n\n1\n\n\nyes\n\n\n/ControlPanel/{unit)/{panelName}/{language}/.../{containerName}\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\nStates\n\n\nu\n\n\nBit mask\n\n\nRead-only\n\n\nBit mask for various widget states. States bit mask information is detailed below.\n\n\n\n\n\n\nOptParams\n\n\na{qv}\n\n\nN/A\n\n\nRead-only\n\n\nMetadata dictionary. See \nContainer widget metadata\n for more information.\n\n\n\n\n\n\n\n\nStates property bit mask information\n\n\n\n\n\n\n\n\nMask\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0x01\n\n\nenabled\n\n\nIndicates whether the widget is enabled. A disabled widget should be grayed out or invisible.\n\n\n\n\n\n\n\n\nContainer widget metadata\n\n\n\n\n\n\n\n\nDictionary key\n\n\nField name\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nLabel\n\n\ns\n\n\nLabel\n\n\n\n\n\n\n1\n\n\nbgColor\n\n\nu\n\n\nBackground color expressed as RGB value. If not specified, then the background color of the enclosing container is used.\n\n\n\n\n\n\n2\n\n\nlayoutHints\n\n\naq\n\n\nLayout hints. See \nContainer widget layout hints\n for more information.\n\n\n\n\n\n\n\n\nContainer widget layout hints\n\n\n\n\n\n\n\n\nHint ID\n\n\nHint name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nVertical Linear\n\n\nA layout that aligns all components in a vertical direction.\n\n\n\n\n\n\n2\n\n\nHorizontal Linear\n\n\nA layout that aligns all components in a horizontal direction.\n\n\n\n\n\n\n\n\nMethods\n\n\nNo methods are exposed by this interface.\n\n\nSignals\n\n\nMetadataChanged\n\n\nMetadataChanged signal is not a Sessionless signal.\n\n\nMessage arguments\n\n\nNone.\n\n\nDescription\n\n\nThe metadata has changed. This can occur due to changes in \nany of the property objects.\n\n\nIntrospect XML\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.Container\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n\n      \nsignal name=\nMetadataChanged\n /\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nProperty Interface\n\n\nThis interface provides the control mechanism for the property widget. \nEach widget is represented by an AllJoyn object implementing this interface.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.Property\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit)/{panel}/{language}/.../{object name}\nExamples:\n/ControlPanel/washing/consolePanel/en/Mode\n/ControlPanel/sprinkler/mainPanel/en/Schedules/InputForm/ScheduleName\n\n\n\n\n\n\norg.alljoyn.ControlPanel.SecuredProperty\n\n\n1\n\n\nyes\n\n\n/ControlPanel/{unit}/{panel}/.../{object name}\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\nStates\n\n\nu\n\n\nBit mask\n\n\nRead-only\n\n\nBit mask for various widget states. States bit mask information is detailed below.\n\n\n\n\n\n\nOptParams\n\n\na{qv}\n\n\nN/A\n\n\nRead-only\n\n\nMetadata dictionary. See \nProperty widget metadata\n for more information.\n\n\n\n\n\n\nValues\n\n\nv\n\n\nN/A\n\n\nRead-write\n\n\nActual value of the property. When modifying the property, the device may give the AllJoyn error \norg.alljoyn.Error.MethodNotAllowed\n if the property is ReadOnly. The supported data types are listed in \nSupported data types\n.\n\n\n\n\n\n\n\n\nStates property bit mask information\n\n\n\n\n\n\n\n\nMask\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0x01\n\n\nenabled\n\n\nIndicates whether the widget is enabled. A disabled widget should be grayed out or invisible.\n\n\n\n\n\n\n0x02\n\n\nwritable\n\n\nIndicates whether the widget is writable.\n\n\n\n\n\n\n\n\nProperty widget metatdata\n\n\n\n\n\n\n\n\nDictionary key\n\n\nField name\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nLabel\n\n\ns\n\n\nLabel\n\n\n\n\n\n\n1\n\n\nbgColor\n\n\nu\n\n\nBackground color expressed as RGB value. If not specified, then the background color of the enclosing container is used.\n\n\n\n\n\n\n2\n\n\nhints\n\n\naq\n\n\nThe widget rendering hints. See \nProperty widget hints\n for more information.\n\n\n\n\n\n\n3\n\n\nunitOfMeasure\n\n\ns\n\n\nUnit of measurement.\n\n\n\n\n\n\n4\n\n\nconstrainToValue\n\n\na(vs)\n\n\nConstraint on the value as a list of values. Any value of the property must match one of the values in this list. See \nList of values\n for more information.\n\n\n\n\n\n\n5\n\n\nrange\n\n\nvv\n\n\nConstraint on the value as a range; a value of this property  must stay within the range. See \nProperty widget ranges\n for more information.\n\n\n\n\n\n\n\n\nProperty widget hints\n\n\n\n\n\n\n\n\nHint ID\n\n\nHint name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nSwitch\n\n\nTwo-state buttons allowing the end-user to toggle the state of a single settings option.\n\n\n\n\n\n\n2\n\n\nCheckBox\n\n\nWidget for multi-select. It allows the end user to select multiple options from a list.\n\n\n\n\n\n\n3\n\n\nSpinner\n\n\nWidget for single-select. It allows the end user to select a single option from a list.\n\n\n\n\n\n\n4\n\n\nRadioButton\n\n\nWidget for single-select. It allows the end user to select a single option from a list.\n\n\n\n\n\n\n5\n\n\nSlider\n\n\nAllows the end user to select a value from a continuous or discrete range. The appearance is linear, either horizontal or vertical.\n\n\n\n\n\n\n6\n\n\nTimePicker\n\n\nAllows the end user to specify a time value.\n\n\n\n\n\n\n7\n\n\nDatePicker\n\n\nAllows the end user to specify a date value.\n\n\n\n\n\n\n8\n\n\nNumberPicker\n\n\nAllows the end user to specify a numeric value\n\n\n\n\n\n\n9\n\n\nNumericKeypad\n\n\nProvides the end user with a numeric entry field and buttons for 0-9 digits, to enter a numeric value. The developer must know the min/max number of digits allowed in the entry field.\n\n\n\n\n\n\n10\n\n\nRotaryKnob\n\n\nAn alternate way to represent a slider.\n\n\n\n\n\n\n11\n\n\nTextLabel\n\n\nRead-only text label.\n\n\n\n\n\n\n12\n\n\nNumericView\n\n\nProvides a read-only, numeric field with an optional label and numbers. For example, a washing machine display shows the time remaining for wash is 35:00 minutes.\n\n\n\n\n\n\n13\n\n\nEditText\n\n\nProvides the end user with a text entry field and keyboard. The developer must know the min/max number of letters allowed in the entry field.\n\n\n\n\n\n\n\n\nSupported data types\n\n\n\n\n\n\n\n\nCategory\n\n\nSupported data types\n\n\n\n\n\n\n\n\n\n\nScalar types\n\n\nBOOLEAN - b\nBYTE - y\nBYTE ARRAY - ay\nNumeric types (types listed below)\nSTRING - s\n\n\n\n\n\n\nComposite types\n\n\nAll composite data type must have the following signature--q(type)--where the first value is an enum value indicating the composite type. Details provided below.\n\n\n\n\n\n\nCollection of records\n\n\nArray of records of only scalar and supported composite types. All records in the array must be of the same record type.\n\n\n\n\n\n\n\n\nNumeric types\n\n\n\n\nINT16 - n\n\n\nUINT16 - q\n\n\nINT32 - i\n\n\nUNT32 - u\n\n\nINT64 - x\n\n\nUINT64 - t\n\n\nDOUBLE - d\n\n\n\n\nComposite types information\n\n\n\n\n\n\n\n\nComposite type enum\n\n\nComposite type name\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nDate\n\n\nq(qqq)\n\n\nData type per RFC3339. There are three fields: date-mday (1-31); date-month (1-12); and date-fullyear (4-digit year).\n\n\n\n\n\n\n1\n\n\nTime\n\n\nq(qqq)\n\n\nTime type per RFC3339. There are three fields: time-hour (0-23); time-minute (0-59); and time-second (0-59).\n\n\n\n\n\n\n\n\nList of values\n\n\nA list of values is an array of structs.\n\n\n\n\n\n\n\n\nField name\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nValue\n\n\nv\n\n\nValue with the same data type of the property.\n\n\n\n\n\n\nLabel\n\n\ns\n\n\nDisplay label.\n\n\n\n\n\n\n\n\nProperty widget ranges\n\n\n\n\n\n\n\n\nField name\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmin\n\n\nv\n\n\nMinimum value with the same data type as that of the property.\n\n\n\n\n\n\nmax\n\n\nv\n\n\nMaximum value with the same data type as that of the property.\n\n\n\n\n\n\nincrement\n\n\nv\n\n\nValue to increment/decrement by. It has the same data type as that of the property.\n\n\n\n\n\n\n\n\nMethods\n\n\nNo methods are exposed by this interface.\n\n\nSignals\n\n\nMetadataChanged\n\n\nMetadataChanged signal is not a Sessionless signal.\n\n\nMessage arguments\n\n\nNone.\n\n\nDescription\n\n\nThe metadata has changed. This can occur due to changes in any of the property objects.\n\n\nValueChanged\n\n\nValueChanged signal is not a Sessionless signal.\n\n\nMessage arguments\n\n\nNone.\n\n\nDescription\n\n\nThe property's value has changed.\n\n\nIntrospect XML\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.Property\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n\n      \nproperty name=\nValue\n type=\nv\n access=\nreadwrite\n/\n\n      \nsignal name=\nMetadataChanged\n /\n\n      \nsignal name=\nValueChanged\n\n         \narg type=\nv\n/\n\n      \n/signal\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nLabelProperty Interface\n\n\nThis interface provides the control mechanism for the label \nproperty widget (a text label). Each widget is represented \nby an AllJoyn object implementing this interface.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.LabelProperty\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit}/{panel}/{language}/.../ {object name}\nExample:\n/ControlPanel/airconditioner/consolel/Warning\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\nStates\n\n\nu\n\n\nBit mask\n\n\nRead-only\n\n\nBit mask for various widget states. States bit mask information is detailed below.\n\n\n\n\n\n\nLabel\n\n\ns\n\n\nN/A\n\n\nRead-only\n\n\nText label\n\n\n\n\n\n\nOptParams\n\n\na{qv}\n\n\nN/A\n\n\nRead-only\n\n\nMetadata dictionary. See \nLabelProperty widget metadata\n for more information.\n\n\n\n\n\n\n\n\nStates bit mask information\n\n\n\n\n\n\n\n\nMask\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0x01\n\n\nenabled\n\n\nIndicates whether the widget is enabled. A disabled widget should be grayed out or invisible.\n\n\n\n\n\n\n\n\nLabelProperty widget metadata\n\n\n\n\n\n\n\n\nDictionary key\n\n\nField name\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nbgColor\n\n\nu\n\n\nBackground color expressed as RGB value. If not specified, then the background color of the enclosing container is used.\n\n\n\n\n\n\n2\n\n\nhints\n\n\naq\n\n\nThe widget rendering hints. See \nLabelProperty widget hints\n for more information.\n\n\n\n\n\n\n\n\nLabelProperty widget hints\n\n\n\n\n\n\n\n\nHint ID\n\n\nHint name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nTextLabel\n\n\nRead-only text label.\n\n\n\n\n\n\n\n\nMethods\n\n\nNo methods are exposed by this interface.\n\n\nSignals\n\n\nMetadataChanged\n\n\nMetadataChanged signal is not a Sessionless signal.\n\n\nMessage arguments\n\n\nNone.\n\n\nDescription\n\n\nThe metadata has changed. This can occur due to changes in any of the property objects.\n\n\nIntrospect XML\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.LabelProperty\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nLabel\n type=\ns\n access=\nread\n/\n\n      \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n\n      \nsignal name=\nMetadataChanged\n /\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nAction Interface\n\n\nThis interface provides the control mechanism for the Action widget. \nEach Action widget is represented by an AllJoyn object implementing \nthis interface. An action widget can optionally provide a confirmation \ndialog widget in its object sub-tree to allow for a pop-up dialog to \nappear whenever the UI presentation of this action is activated. \nThe action taken on the confirmation dialog will take place instead \nof the \nExec\n method call for this Action widget.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.Action\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit}//{panel}/{language}/.../{object name}\nExample:\n/ControlPanel/{unit}/{panel}/{language}/.../{object name}\n\n\n\n\n\n\norg.alljoyn.ControlPanel.SecuredAction\n\n\n1\n\n\nyes\n\n\n/ControlPanel/{unit}/{panel}/{language}/.../{object name}\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\nStates\n\n\nu\n\n\nBit mask\n\n\nRead-only\n\n\nBit mask for various widget states. States bit mask information is detailed below.\n\n\n\n\n\n\nOptParams\n\n\na{qv}\n\n\nN/A\n\n\nRead-only\n\n\nMetadata dictionary. See \nAction widget metadata\n for more information.\n\n\n\n\n\n\n\n\nStates bit mask information\n\n\n\n\n\n\n\n\nMask\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0x01\n\n\nenabled\n\n\nIndicates whether the widget is enabled. A disabled widget should be grayed out or invisible.\n\n\n\n\n\n\n\n\nAction widget metadata\n\n\n\n\n\n\n\n\nDictionary key\n\n\nField name\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nlabel\n\n\ns\n\n\nLabel\n\n\n\n\n\n\n1\n\n\nbgColor\n\n\nu\n\n\nBackground color expressed as RGB value. If not specified, then the background color of the enclosing container is used.\n\n\n\n\n\n\n2\n\n\nhints\n\n\naq\n\n\nThe widget rendering hints. See \nAction widget hints\n for more information.\n\n\n\n\n\n\n\n\nAction widget hints\n\n\n\n\n\n\n\n\nHint ID\n\n\nHint name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nActionButton\n\n\nButton associated with an action or a method call, for example, \"submit\".\n\n\n\n\n\n\n\n\nMethods\n\n\nExec\n\n\nMessage arguments\n \n\n\nNone.\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nExecutes the action command.\n\n\nSignals\n\n\nMetadataChanged\n\n\nMetadataChanged signal is not a Sessionless signal.\n\n\nMessage arguments\n\n\nNone.\n\n\nDescription\n\n\nThe metadata has changed. This can occur due to changes in any of the property objects.\n\n\nIntrospect XML\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.Action\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n\n      \nsignal name=\nMetadataChanged\n /\n\n      \nmethod name=\nExec\n/\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nNotificationAction Interface\n\n\nThis interface indicates whether the object is a notification \naction object. A notification object is typically referenced \nin a notification message. Upon receiving such notification, \nthe controller can generate the notification action panel \nbased on the metadata provided by this type of object. \nThis object is different from a regular control panel since \nit allows the controllee to send a signal to tell the controller \nto dismiss the panel.\n\n\nThis object supports at least one language. It's the responsibility \nof the controller to introspect the children objects to locate \nthe corresponding root container of the given panel for the \nspecific language code.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.NotificationAction\n\n\n1\n\n\nno\n\n\n/NotificationPanel/{unit}/{actionPanelName}\nExample:\n/NotificationPanel/washing/CycleCompleted\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\n\n\nSignals\n\n\nDismiss\n\n\nDismess signal is not a Sessionless signal.\n\n\nMessage arguments\n\n\nNone.\n\n\nDescription\n\n\nThe controller must dismiss this notification panel.\n\n\nIntrospection XML\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.NotificationAction\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nsignal name=\nDismiss\n /\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nDialog Interface\n\n\nThis interface provides all the metadata to guide the controller \nto render the UI for a dialog widget. A dialog widget typically \nhas a message and up to three action buttons.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.Dialog\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit)/{panelName}/{language}/.../{dialogName}\nExample:\n/ControlPanel/washing/mainPanel/en/Confirmation\n\n\n\n\n\n\norg.alljoyn.ControlPanel.SecuredDialog\n\n\n1\n\n\nyes\n\n\n/ControlPanel/{unit}/{panel}/{language}/.../{dialogName}\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\nStates\n\n\nu\n\n\nBit mask\n\n\nRead-only\n\n\nBit mask for various widget states. States bit mask information is detailed below.\n\n\n\n\n\n\nOptParams\n\n\na{qv}\n\n\nN/A\n\n\nRead-only\n\n\nMetadata dictionary. See \nDialog widget metadata\n for more information.\n\n\n\n\n\n\nMessage\n\n\nq\n\n\nN/A\n\n\nRead-only\n\n\nDisplay message.\n\n\n\n\n\n\nNumActions\n\n\nq\n\n\n1-3\n\n\nRead-only\n\n\nNumber of available actions.\n\n\n\n\n\n\n\n\nStates bit mask information\n\n\n\n\n\n\n\n\nMask\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0x01\n\n\nenabled\n\n\nIndicates whether the widget is enabled. A disabled widget should be grayed out or invisible.\n\n\n\n\n\n\n\n\nDialog widget metadata\n\n\n\n\n\n\n\n\nDictionary key\n\n\nField name\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nlabel\n\n\ns\n\n\nLabel or title of the dialog.\n\n\n\n\n\n\n1\n\n\nbgColor\n\n\nu\n\n\nBackground color expressed as RGB value. If not specified, then the background color of the enclosing container is used.\n\n\n\n\n\n\n2\n\n\nhints\n\n\naq\n\n\nLayout hints. See \nDialog widget layout hints\n for more information.\n\n\n\n\n\n\n6\n\n\nlabelAction1\n\n\ns\n\n\nLabel of the action1 widget.\n\n\n\n\n\n\n7\n\n\nlabelAction2\n\n\ns\n\n\nLabel of the action2 widget.\n\n\n\n\n\n\n8\n\n\nlabelAction3\n\n\ns\n\n\nLabel of the action3 widget.\n\n\n\n\n\n\n\n\nDialog widget layout hints\n\n\n\n\n\n\n\n\nHint ID\n\n\nHint name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nAlertDialog\n\n\nWidget that combines a label, text data, and buttons in a single dialog box. A minimum of 1 button is required. A maximum of 3 buttons is supported.\n\n\n\n\n\n\n\n\nMethods\n\n\nAction1\n\n\nMessage arguments\n\n\nNone.\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nExecutes the action number 1.\n\n\nAction2\n\n\nMessage arguments\n\n\nNone.\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nExecutes the action number 2. \n\n\nError reply\n\n\n\n\n\n\n\n\nError\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.MethodNotAllowed\n\n\nReturned if the NumActions property is less than 2.\n\n\n\n\n\n\n\n\nAction3\n\n\nMessage arguments\n\n\nNone.\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nExecutes the action number 3. \n\n\nError reply\n\n\n\n\n\n\n\n\nError\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.MethodNotAllowed\n\n\nReturned if the NumActions property is less than 3.\n\n\n\n\n\n\n\n\nSignals\n\n\nMetadataChanged\n\n\nMetadataChanged signal is not a Sessionless signal.\n\n\nMessage arguments\n\n\nNone.\n\n\nDescription\n\n\nThe metadata has changed. This can occur due to changes in any of the property objects.\n\n\nIntrospection XML\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.Dialog\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n\n      \nproperty name=\nMessage\n type=\ns\n access=\nread\n/\n\n      \nproperty name=\nNumActions\n type=\nq\n access=\nread\n/\n\n      \nsignal name=\nMetadataChanged\n /\n\n      \nmethod name=\nAction1\n/\n\n      \nmethod name=\nAction2\n/\n\n      \nmethod name=\nAction3\n/\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nListProperty Interface\n\n\nThis interface provides the control mechanism for the list \nproperty widget. A list property widget holds a list of \nrecords and a container representing the UI of the record \ndisplay/input form.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.ListProperty\n\n\n1\n\n\nno\n\n\n/ControlPanel/{unit}/{language}/{panel}/{object name}\nExample:\n/ControlPanel/sprinkler/mainPanel/en/Schedules\n\n\n\n\n\n\norg.alljoyn.ControlPanel.SecuredListProperty\n\n\n1\n\n\nyes\n\n\n/ControlPanel/{unit}/{language}/{panel}/.../{object name}\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\nStates\n\n\nu\n\n\nBit mask\n\n\nRead-only\n\n\nBit mask for various widget states. States bit mask information is detailed below.\n\n\n\n\n\n\nOptParams\n\n\na{qv}\n\n\nN/A\n\n\nRead-only\n\n\nMetadata dictionary. See \nListProperty widget metadata\n for more information.\n\n\n\n\n\n\nValue\n\n\na{qs}\n\n\nN/A\n\n\nRead-only\n\n\nList of records. Each record in the list holds the following fields:\nrecordID ('q'): the record ID\nlabel ('s'): the label to display on the list\nThe record data are not exposed in this property. The \nView\n method call can be used to view each record.\n\n\n\n\n\n\n\n\nStates bit mask information\n\n\n\n\n\n\n\n\nMask\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0x01\n\n\nenabled\n\n\nIndicates whether the widget is enabled. A disabled widget should be grayed out or invisible.\n\n\n\n\n\n\n\n\nListProperty widget metadata\n\n\n\n\n\n\n\n\nDictionary key\n\n\nField name\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nlabel\n\n\ns\n\n\nLabel\n\n\n\n\n\n\n1\n\n\nbgColor\n\n\nu\n\n\nBackground color expressed as RGB value. If not specified, then the background color of the enclosing container is used.\n\n\n\n\n\n\n2\n\n\nhints\n\n\naq\n\n\nWidget rendering hints. See \nListProperty widget hints\n for more information.\n\n\n\n\n\n\n\n\nListProperty widget hints\n\n\n\n\n\n\n\n\nHint ID\n\n\nHint name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nDynamicSpinner\n\n\nWidget that allows the end user to select an option from a list, add a new option, delete an option, and update an option.\n\n\n\n\n\n\n\n\nMethods\n\n\nAdd\n\n\nMessage arguments\n\n\nNone.\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nPrepares the input form for adding a new record to the list. \nUI requirements follow:\n\n\n\n\nThe controller must present an OK button and tie it to the \n\nConfirm\n method call. Completing the add action on the input \nform will add the new record to the list.\n\n\nThe controller must present a Cancel button and tie to the \n\nCancel\n method call to allow for discarding the operation.\n\n\n\n\nDelete('q')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nrecordID\n\n\nq\n\n\npositive\n\n\nThe record ID.\n\n\n\n\n\n\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nPrepares the form for view the record prior to the delete action. \nUI requirements follow:\n\n The controller must present an OK button and tie it to the \n\nConfirm\n method call. A confirm action deletes the record \nfrom the list.\n\n The controller must present a Cancel button and tie to the \n\nCancel\n method call to allow for discarding the operation.\n\n\nView('q')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nrecordID\n\n\nq\n\n\npositive\n\n\nThe record ID.\n\n\n\n\n\n\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nPrepares the display form to view the record identified by the recordID. \n\n\nThe controller must present an OK button to dismiss the view form.\n\n\nUpdate('q')\n\n\nInputs\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrecordID\n\n\nyes\n\n\nq\n\n\npositive\n\n\nThe record ID.\n\n\n\n\n\n\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nPrepares the input form to view the record identified by the \nrecordID and allow the end user to modify the fields. \nUI requirements follow:\n\n\n\n\nThe controller must present an OK button and tie it to the \n\nConfirm\n method call. A confirm action updates the given \nrecord with new information.\n\n\nThe controller must present a Cancel button and tie to the \n\nCancel\n method call to allow for discarding the operation.\n\n\n\n\nConfirm\n\n\nMessage arguments\n\n\nNone.\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nConfirms the action and save the change requested.\n\n\nThe controller must present an OK button to dismiss the view form.\n\n\nCancel\n\n\nMessage arguments\n\n\nNone.\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nCancels the current action.\n\n\nThe controller must present a Cancel button to dismiss the input form.\n\n\nSignals\n\n\nMetadataChanged\n\n\nMetadataChanged signal is not a Sessionless signal.\n\n\nMessage arguments\n\n\nNone.\n\n\nDescription\n\n\nThe metadata has changed. This can occur due to changes in any of the property objects.\n\n\nValueChanged\n\n\nValueChanged signal is not a Sessionless signal.\n\n\nMessage arguments\n\n\nNone.\n\n\nDescription\n\n\nThe property's value has changed. Because the list data can \nbe large, the signal does not send the current value.\n\n\nIntrospect XML\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.ControlPanel.ListProperty\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nStates\n type=\nu\n access=\nread\n/\n\n      \nproperty name=\nOptParams\n type=\na{qv}\n access=\nread\n/\n\n      \nproperty name=\nValue\n type=\na(qs)\n access=\nread\n/\n\n      \nmethod name=\nAdd\n/\n\n      \nmethod name=\nDelete\n\n         \narg name=\nrecordID\n type=\nq\n direction=\nin\n/\n\n      \n/method\n\n      \nmethod name=\nView\n\n         \narg name=\nrecordID\n type=\nq\n direction=\nin\n/\n\n      \n/method\n\n      \nmethod name=\nUpdate\n\n         \narg name=\nrecordID\n type=\nq\n direction=\nin\n/\n\n      \n/method\n\n      \nmethod name=\nConfirm\n\n      \n/method\n\n      \nmethod name=\nCancel\n\n      \n/method\n\n\n      \nsignal name=\nMetadataChanged\n/\n\n      \nsignal name=\nValueChanged\n/\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nSupport of Existing HTTP Control Pages\n\n\nShould a device already have HTTP control pages hosted \non the device itself, it can advertise those pages using \nthe HTTPControl interface.\n\n\nThis interface provides all the information about the \nhosted HTTP control pages on the device.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.ControlPanel.HTTPControl\n\n\n1\n\n\nno\n\n\n/Control/{unit}/HTTPControl\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\ns GetRootURL\n\n\nMessage arguments\n\n\nNone.\n\n\nReply arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nReturn signature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nurl\n\n\ns\n\n\nN/A\n\n\nRoot URL of the control pages.\n\n\n\n\n\n\n\n\nSignals\n\n\nNo signals are emitted from this interface.\n\n\nIntrospection XML\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.Control.HTTPControl\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nmethod name=\nGetRootURL\n\n         \narg name=\nurl\n type=\ns\n direction=\nout\n/\n\n      \n/method\n\n   \n/interface\n\n\n/node",
            "title": "Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#control-panel-interface-definition",
            "text": "",
            "title": "Control Panel Interface Definition"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#release-history",
            "text": "To access a previous version of this document, click the release version link below.     Release version  Date  What changed      14.02  2/28/2014  The following interfaces were added: ControlPanel.ControlPanel interface version 1 ControlPanel.Container interface version 1 ControlPanel.SecuredContainer interface version 1 ControlPanel.Property interface version 1 ControlPanel.SecuredProperty interface version 1 ControlPanel.LabelProperty interface version 1 ControlPanel.Action interface version 1 ControlPanel.SecuredAction interface version 1 ControlPanel.NotificationAction interface version 1 ControlPanel.Dialog interface version 1 ControlPanel.SecuredDialog interface version 1 ControlPanel.ListProperty interface version 1 ControlPanel.SecuredListProperty interface version 1 ControlPanel.HTTPControl interface version 1    14.06  6/30/2014  No updates    14.06 Update 1  9/29/2014  Updated the document title and Overview chapter title (changed Specification to Definition) Added the release version number to the document title for version tracking. Added a note in the Definition Overview chapter to address the AllSeen Alliance Compliance and Certification program. Added a Mandatory column for method and signal parameters to support the AllSeen Alliance Compliance and Certification program.    14.12  12/17/2014  Cleanup to make requirements for methods and signals more clear.",
            "title": "Release History"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#definition-overview",
            "text": "The Control Panel interfaces must be implemented by an \napplication on a controllee. The following figure illustrates \nthe relationship between a controllee app and a controller app.   Figure:  Control Panel service framework architecture within \nthe AllJoyn  framework  The OEM is responsible for writing the Control interfaces and \nthe Control Panel service framework metadata.  The UI Toolkit Adaption Layer, a library used to map the metadata \nto platform-specific UI elements, is made available as part of the \nControl Panel service framework release.  NOTE:  All methods and signals are considered mandatory to support \nthe AllSeen Alliance Compliance and Certification program.",
            "title": "Definition Overview"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#discovery",
            "text": "Controllees are discovered via an AllJoyn announcement. Each AllJoyn \ndevice uses the About feature to announce basic app information like \napp name, device name, manufacturer, and model number. The announcement \nalso contains the list of object paths and service interfaces to allow \nthe controller to determine whether the controllee provides \nfunctionality of interest.  The About announcement is propagated using a sessionless signal.",
            "title": "Discovery"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#call-flows",
            "text": "Static Control Panel flow  The following figure illustrates a typical call flow for a control \npanel that does not change once rendered.   Figure:  Static Control Panel call flow  Dynamic Control Panel flow  The following figure illustrates a call flow for a control panel that \nchanges as the end user interacts with the widgets.   Figure:  Dynamic Control Panel call flow",
            "title": "Call Flows"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#error-handling",
            "text": "The method calls in the Control Panel interfaces use the AllJoyn \nerror message handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE) \nto set the error name and error message.     Error name  Error message      org.alljoyn.Error.OutOfRange  Value out of range    org.alljoyn.Error.InvalidState  Invalid state    org.alljoyn.Error.InvalidProperty  Invalid property    org.alljoyn.Error.InvalidValue  Invalid value    org.alljoyn.Error.MethodNotAllowed  Method call not allowed",
            "title": "Error Handling"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#busobject-map",
            "text": "BusObject structure  The following figure shows the tree structure diagram that \nrepresents the basic organization of AllJoyn objects used in \nthe support of the Control Panel service framework. A control \npanel is implemented using several AllJoyn objects.   Figure:  BusObject map  The objects are organized to support multiple units and multiple \nlanguages. Only the top-level panels should be listed in the announcement.  Since the IETF language tag allows for hyphen (-) which is not \nallowed in the bus object path, any language tag in the object \npath replaces a hyphen (-) with an underscore (_).  In addition to the control panels, the Control Panel service \nframework can also support other panels such as a notification \npanel. These panels are not required to be advertised in the announcement.  It is the controller's job to introspect and walk the object \ntree of a control panel to retrieve all the metadata for that \ncontrol panel.  BusObject map examples  Washing machine example   Figure:  Washing machine example  Sprinkler system example   Figure:  Sprinkler system example",
            "title": "BusObject Map"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#controlpanel-interface",
            "text": "This interface indicates whether the object is a control panel. \nThis object will support at least one language. The service only \nneeds to advertise this type of object in the About announcement. \nNo other objects in the Control Panel service framework tree \nshould be announced.  NOTE:  It's the responsibility of the controller to introspect \nthe children objects to locate the corresponding root container \nof the given panel for the specific language code.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.ControlPanel  1  no  /ControlPanel/{unit)/{panelName}       Example: /ControlPanel/washing/consolePanel     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number     Introspect XML  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.ControlPanel \n       property name= Version  type= q  access= read / \n    /interface  /node",
            "title": "ControlPanel Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#container-interface",
            "text": "This interface provides all the metadata to guide the \ncontroller to render the UI for a container widget.     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.Container  1  no  /ControlPanel/{unit)/{panelName}/{language}/.../{containerName} Examples: /ControlPanel/washing/consolePanel/en /ControlPanel/sprinkler/mainPanel/en/Schedules/InputForm/RunOnDays    org.alljoyn.ControlPanel.SecuredContainer  1  yes  /ControlPanel/{unit)/{panelName}/{language}/.../{containerName}     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number    States  u  Bit mask  Read-only  Bit mask for various widget states. States bit mask information is detailed below.    OptParams  a{qv}  N/A  Read-only  Metadata dictionary. See  Container widget metadata  for more information.     States property bit mask information     Mask  Name  Description      0x01  enabled  Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.     Container widget metadata     Dictionary key  Field name  Signature  Description      0  Label  s  Label    1  bgColor  u  Background color expressed as RGB value. If not specified, then the background color of the enclosing container is used.    2  layoutHints  aq  Layout hints. See  Container widget layout hints  for more information.     Container widget layout hints     Hint ID  Hint name  Description      1  Vertical Linear  A layout that aligns all components in a vertical direction.    2  Horizontal Linear  A layout that aligns all components in a horizontal direction.     Methods  No methods are exposed by this interface.  Signals  MetadataChanged  MetadataChanged signal is not a Sessionless signal.  Message arguments  None.  Description  The metadata has changed. This can occur due to changes in \nany of the property objects.  Introspect XML  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.Container \n       property name= Version  type= q  access= read / \n       property name= States  type= u  access= read / \n       property name= OptParams  type= a{qv}  access= read / \n       signal name= MetadataChanged  / \n    /interface  /node",
            "title": "Container Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#property-interface",
            "text": "This interface provides the control mechanism for the property widget. \nEach widget is represented by an AllJoyn object implementing this interface.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.Property  1  no  /ControlPanel/{unit)/{panel}/{language}/.../{object name} Examples: /ControlPanel/washing/consolePanel/en/Mode /ControlPanel/sprinkler/mainPanel/en/Schedules/InputForm/ScheduleName    org.alljoyn.ControlPanel.SecuredProperty  1  yes  /ControlPanel/{unit}/{panel}/.../{object name}     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number    States  u  Bit mask  Read-only  Bit mask for various widget states. States bit mask information is detailed below.    OptParams  a{qv}  N/A  Read-only  Metadata dictionary. See  Property widget metadata  for more information.    Values  v  N/A  Read-write  Actual value of the property. When modifying the property, the device may give the AllJoyn error  org.alljoyn.Error.MethodNotAllowed  if the property is ReadOnly. The supported data types are listed in  Supported data types .     States property bit mask information     Mask  Name  Description      0x01  enabled  Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.    0x02  writable  Indicates whether the widget is writable.     Property widget metatdata     Dictionary key  Field name  Signature  Description      0  Label  s  Label    1  bgColor  u  Background color expressed as RGB value. If not specified, then the background color of the enclosing container is used.    2  hints  aq  The widget rendering hints. See  Property widget hints  for more information.    3  unitOfMeasure  s  Unit of measurement.    4  constrainToValue  a(vs)  Constraint on the value as a list of values. Any value of the property must match one of the values in this list. See  List of values  for more information.    5  range  vv  Constraint on the value as a range; a value of this property  must stay within the range. See  Property widget ranges  for more information.     Property widget hints     Hint ID  Hint name  Description      1  Switch  Two-state buttons allowing the end-user to toggle the state of a single settings option.    2  CheckBox  Widget for multi-select. It allows the end user to select multiple options from a list.    3  Spinner  Widget for single-select. It allows the end user to select a single option from a list.    4  RadioButton  Widget for single-select. It allows the end user to select a single option from a list.    5  Slider  Allows the end user to select a value from a continuous or discrete range. The appearance is linear, either horizontal or vertical.    6  TimePicker  Allows the end user to specify a time value.    7  DatePicker  Allows the end user to specify a date value.    8  NumberPicker  Allows the end user to specify a numeric value    9  NumericKeypad  Provides the end user with a numeric entry field and buttons for 0-9 digits, to enter a numeric value. The developer must know the min/max number of digits allowed in the entry field.    10  RotaryKnob  An alternate way to represent a slider.    11  TextLabel  Read-only text label.    12  NumericView  Provides a read-only, numeric field with an optional label and numbers. For example, a washing machine display shows the time remaining for wash is 35:00 minutes.    13  EditText  Provides the end user with a text entry field and keyboard. The developer must know the min/max number of letters allowed in the entry field.     Supported data types     Category  Supported data types      Scalar types  BOOLEAN - b BYTE - y BYTE ARRAY - ay Numeric types (types listed below) STRING - s    Composite types  All composite data type must have the following signature--q(type)--where the first value is an enum value indicating the composite type. Details provided below.    Collection of records  Array of records of only scalar and supported composite types. All records in the array must be of the same record type.     Numeric types   INT16 - n  UINT16 - q  INT32 - i  UNT32 - u  INT64 - x  UINT64 - t  DOUBLE - d   Composite types information     Composite type enum  Composite type name  Signature  Description      0  Date  q(qqq)  Data type per RFC3339. There are three fields: date-mday (1-31); date-month (1-12); and date-fullyear (4-digit year).    1  Time  q(qqq)  Time type per RFC3339. There are three fields: time-hour (0-23); time-minute (0-59); and time-second (0-59).     List of values  A list of values is an array of structs.     Field name  Signature  Description      Value  v  Value with the same data type of the property.    Label  s  Display label.     Property widget ranges     Field name  Signature  Description      min  v  Minimum value with the same data type as that of the property.    max  v  Maximum value with the same data type as that of the property.    increment  v  Value to increment/decrement by. It has the same data type as that of the property.     Methods  No methods are exposed by this interface.  Signals  MetadataChanged  MetadataChanged signal is not a Sessionless signal.  Message arguments  None.  Description  The metadata has changed. This can occur due to changes in any of the property objects.  ValueChanged  ValueChanged signal is not a Sessionless signal.  Message arguments  None.  Description  The property's value has changed.  Introspect XML  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.Property \n       property name= Version  type= q  access= read / \n       property name= States  type= u  access= read / \n       property name= OptParams  type= a{qv}  access= read / \n       property name= Value  type= v  access= readwrite / \n       signal name= MetadataChanged  / \n       signal name= ValueChanged \n          arg type= v / \n       /signal \n    /interface  /node",
            "title": "Property Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#labelproperty-interface",
            "text": "This interface provides the control mechanism for the label \nproperty widget (a text label). Each widget is represented \nby an AllJoyn object implementing this interface.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.LabelProperty  1  no  /ControlPanel/{unit}/{panel}/{language}/.../ {object name} Example: /ControlPanel/airconditioner/consolel/Warning     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number    States  u  Bit mask  Read-only  Bit mask for various widget states. States bit mask information is detailed below.    Label  s  N/A  Read-only  Text label    OptParams  a{qv}  N/A  Read-only  Metadata dictionary. See  LabelProperty widget metadata  for more information.     States bit mask information     Mask  Name  Description      0x01  enabled  Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.     LabelProperty widget metadata     Dictionary key  Field name  Signature  Description      1  bgColor  u  Background color expressed as RGB value. If not specified, then the background color of the enclosing container is used.    2  hints  aq  The widget rendering hints. See  LabelProperty widget hints  for more information.     LabelProperty widget hints     Hint ID  Hint name  Description      1  TextLabel  Read-only text label.     Methods  No methods are exposed by this interface.  Signals  MetadataChanged  MetadataChanged signal is not a Sessionless signal.  Message arguments  None.  Description  The metadata has changed. This can occur due to changes in any of the property objects.  Introspect XML  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.LabelProperty \n       property name= Version  type= q  access= read / \n       property name= States  type= u  access= read / \n       property name= Label  type= s  access= read / \n       property name= OptParams  type= a{qv}  access= read / \n       signal name= MetadataChanged  / \n    /interface  /node",
            "title": "LabelProperty Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#action-interface",
            "text": "This interface provides the control mechanism for the Action widget. \nEach Action widget is represented by an AllJoyn object implementing \nthis interface. An action widget can optionally provide a confirmation \ndialog widget in its object sub-tree to allow for a pop-up dialog to \nappear whenever the UI presentation of this action is activated. \nThe action taken on the confirmation dialog will take place instead \nof the  Exec  method call for this Action widget.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.Action  1  no  /ControlPanel/{unit}//{panel}/{language}/.../{object name} Example: /ControlPanel/{unit}/{panel}/{language}/.../{object name}    org.alljoyn.ControlPanel.SecuredAction  1  yes  /ControlPanel/{unit}/{panel}/{language}/.../{object name}     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number    States  u  Bit mask  Read-only  Bit mask for various widget states. States bit mask information is detailed below.    OptParams  a{qv}  N/A  Read-only  Metadata dictionary. See  Action widget metadata  for more information.     States bit mask information     Mask  Name  Description      0x01  enabled  Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.     Action widget metadata     Dictionary key  Field name  Signature  Description      0  label  s  Label    1  bgColor  u  Background color expressed as RGB value. If not specified, then the background color of the enclosing container is used.    2  hints  aq  The widget rendering hints. See  Action widget hints  for more information.     Action widget hints     Hint ID  Hint name  Description      1  ActionButton  Button associated with an action or a method call, for example, \"submit\".     Methods  Exec  Message arguments    None.  Reply arguments  None.  Description  Executes the action command.  Signals  MetadataChanged  MetadataChanged signal is not a Sessionless signal.  Message arguments  None.  Description  The metadata has changed. This can occur due to changes in any of the property objects.  Introspect XML  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.Action \n       property name= Version  type= q  access= read / \n       property name= States  type= u  access= read / \n       property name= OptParams  type= a{qv}  access= read / \n       signal name= MetadataChanged  / \n       method name= Exec / \n    /interface  /node",
            "title": "Action Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#notificationaction-interface",
            "text": "This interface indicates whether the object is a notification \naction object. A notification object is typically referenced \nin a notification message. Upon receiving such notification, \nthe controller can generate the notification action panel \nbased on the metadata provided by this type of object. \nThis object is different from a regular control panel since \nit allows the controllee to send a signal to tell the controller \nto dismiss the panel.  This object supports at least one language. It's the responsibility \nof the controller to introspect the children objects to locate \nthe corresponding root container of the given panel for the \nspecific language code.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.NotificationAction  1  no  /NotificationPanel/{unit}/{actionPanelName} Example: /NotificationPanel/washing/CycleCompleted     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number     Signals  Dismiss  Dismess signal is not a Sessionless signal.  Message arguments  None.  Description  The controller must dismiss this notification panel.  Introspection XML  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.NotificationAction \n       property name= Version  type= q  access= read / \n       signal name= Dismiss  / \n    /interface  /node",
            "title": "NotificationAction Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#dialog-interface",
            "text": "This interface provides all the metadata to guide the controller \nto render the UI for a dialog widget. A dialog widget typically \nhas a message and up to three action buttons.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.Dialog  1  no  /ControlPanel/{unit)/{panelName}/{language}/.../{dialogName} Example: /ControlPanel/washing/mainPanel/en/Confirmation    org.alljoyn.ControlPanel.SecuredDialog  1  yes  /ControlPanel/{unit}/{panel}/{language}/.../{dialogName}     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number    States  u  Bit mask  Read-only  Bit mask for various widget states. States bit mask information is detailed below.    OptParams  a{qv}  N/A  Read-only  Metadata dictionary. See  Dialog widget metadata  for more information.    Message  q  N/A  Read-only  Display message.    NumActions  q  1-3  Read-only  Number of available actions.     States bit mask information     Mask  Name  Description      0x01  enabled  Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.     Dialog widget metadata     Dictionary key  Field name  Signature  Description      0  label  s  Label or title of the dialog.    1  bgColor  u  Background color expressed as RGB value. If not specified, then the background color of the enclosing container is used.    2  hints  aq  Layout hints. See  Dialog widget layout hints  for more information.    6  labelAction1  s  Label of the action1 widget.    7  labelAction2  s  Label of the action2 widget.    8  labelAction3  s  Label of the action3 widget.     Dialog widget layout hints     Hint ID  Hint name  Description      1  AlertDialog  Widget that combines a label, text data, and buttons in a single dialog box. A minimum of 1 button is required. A maximum of 3 buttons is supported.     Methods  Action1  Message arguments  None.  Reply arguments  None.  Description  Executes the action number 1.  Action2  Message arguments  None.  Reply arguments  None.  Description  Executes the action number 2.   Error reply     Error  Description      org.alljoyn.Error.MethodNotAllowed  Returned if the NumActions property is less than 2.     Action3  Message arguments  None.  Reply arguments  None.  Description  Executes the action number 3.   Error reply     Error  Description      org.alljoyn.Error.MethodNotAllowed  Returned if the NumActions property is less than 3.     Signals  MetadataChanged  MetadataChanged signal is not a Sessionless signal.  Message arguments  None.  Description  The metadata has changed. This can occur due to changes in any of the property objects.  Introspection XML  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.Dialog \n       property name= Version  type= q  access= read / \n       property name= States  type= u  access= read / \n       property name= OptParams  type= a{qv}  access= read / \n       property name= Message  type= s  access= read / \n       property name= NumActions  type= q  access= read / \n       signal name= MetadataChanged  / \n       method name= Action1 / \n       method name= Action2 / \n       method name= Action3 / \n    /interface  /node",
            "title": "Dialog Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#listproperty-interface",
            "text": "This interface provides the control mechanism for the list \nproperty widget. A list property widget holds a list of \nrecords and a container representing the UI of the record \ndisplay/input form.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.ListProperty  1  no  /ControlPanel/{unit}/{language}/{panel}/{object name} Example: /ControlPanel/sprinkler/mainPanel/en/Schedules    org.alljoyn.ControlPanel.SecuredListProperty  1  yes  /ControlPanel/{unit}/{language}/{panel}/.../{object name}     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number    States  u  Bit mask  Read-only  Bit mask for various widget states. States bit mask information is detailed below.    OptParams  a{qv}  N/A  Read-only  Metadata dictionary. See  ListProperty widget metadata  for more information.    Value  a{qs}  N/A  Read-only  List of records. Each record in the list holds the following fields: recordID ('q'): the record ID label ('s'): the label to display on the list The record data are not exposed in this property. The  View  method call can be used to view each record.     States bit mask information     Mask  Name  Description      0x01  enabled  Indicates whether the widget is enabled. A disabled widget should be grayed out or invisible.     ListProperty widget metadata     Dictionary key  Field name  Signature  Description      0  label  s  Label    1  bgColor  u  Background color expressed as RGB value. If not specified, then the background color of the enclosing container is used.    2  hints  aq  Widget rendering hints. See  ListProperty widget hints  for more information.     ListProperty widget hints     Hint ID  Hint name  Description      1  DynamicSpinner  Widget that allows the end user to select an option from a list, add a new option, delete an option, and update an option.     Methods  Add  Message arguments  None.  Reply arguments  None.  Description  Prepares the input form for adding a new record to the list. \nUI requirements follow:   The controller must present an OK button and tie it to the  Confirm  method call. Completing the add action on the input \nform will add the new record to the list.  The controller must present a Cancel button and tie to the  Cancel  method call to allow for discarding the operation.   Delete('q')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  recordID  q  positive  The record ID.     Reply arguments  None.  Description  Prepares the form for view the record prior to the delete action. \nUI requirements follow:  The controller must present an OK button and tie it to the  Confirm  method call. A confirm action deletes the record \nfrom the list.  The controller must present a Cancel button and tie to the  Cancel  method call to allow for discarding the operation.  View('q')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  recordID  q  positive  The record ID.     Reply arguments  None.  Description  Prepares the display form to view the record identified by the recordID.   The controller must present an OK button to dismiss the view form.  Update('q')  Inputs     Argument  Parameter name  Signature  List of values  Description      recordID  yes  q  positive  The record ID.     Reply arguments  None.  Description  Prepares the input form to view the record identified by the \nrecordID and allow the end user to modify the fields. \nUI requirements follow:   The controller must present an OK button and tie it to the  Confirm  method call. A confirm action updates the given \nrecord with new information.  The controller must present a Cancel button and tie to the  Cancel  method call to allow for discarding the operation.   Confirm  Message arguments  None.  Reply arguments  None.  Description  Confirms the action and save the change requested.  The controller must present an OK button to dismiss the view form.  Cancel  Message arguments  None.  Reply arguments  None.  Description  Cancels the current action.  The controller must present a Cancel button to dismiss the input form.  Signals  MetadataChanged  MetadataChanged signal is not a Sessionless signal.  Message arguments  None.  Description  The metadata has changed. This can occur due to changes in any of the property objects.  ValueChanged  ValueChanged signal is not a Sessionless signal.  Message arguments  None.  Description  The property's value has changed. Because the list data can \nbe large, the signal does not send the current value.  Introspect XML  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.ControlPanel.ListProperty \n       property name= Version  type= q  access= read / \n       property name= States  type= u  access= read / \n       property name= OptParams  type= a{qv}  access= read / \n       property name= Value  type= a(qs)  access= read / \n       method name= Add / \n       method name= Delete \n          arg name= recordID  type= q  direction= in / \n       /method \n       method name= View \n          arg name= recordID  type= q  direction= in / \n       /method \n       method name= Update \n          arg name= recordID  type= q  direction= in / \n       /method \n       method name= Confirm \n       /method \n       method name= Cancel \n       /method \n\n       signal name= MetadataChanged / \n       signal name= ValueChanged / \n    /interface  /node",
            "title": "ListProperty Interface"
        },
        {
            "location": "/learn/base-services/controlpanel/interface/#support-of-existing-http-control-pages",
            "text": "Should a device already have HTTP control pages hosted \non the device itself, it can advertise those pages using \nthe HTTPControl interface.  This interface provides all the information about the \nhosted HTTP control pages on the device.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.ControlPanel.HTTPControl  1  no  /Control/{unit}/HTTPControl     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number     Methods  s GetRootURL  Message arguments  None.  Reply arguments     Argument  Parameter name  Return signature  List of values  Description      0  url  s  N/A  Root URL of the control pages.     Signals  No signals are emitted from this interface.  Introspection XML  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.Control.HTTPControl \n       property name= Version  type= q  access= read / \n       method name= GetRootURL \n          arg name= url  type= s  direction= out / \n       /method \n    /interface  /node",
            "title": "Support of Existing HTTP Control Pages"
        },
        {
            "location": "/learn/base-services/notification/",
            "text": "Notification\n\n\nThe AllJoyn\n Notification Service framework provides a common mechanism for\ndevices/apps to send human-readable text to be displayed or otherwise rendered\n(e.g., text to speech can render the text as audio). Notifications are broadcasted\non the AllJoyn network for all devices/apps to receive, and persists for a\nspecified TTL defined by the producer of the notification. In addition to text,\nother metadata like audio, images, control panel objects, or other custom\nattributes can be sent; it is up to the receipient to determine the best\nway to handle and render custom attributes. Also, Notifications can be\nglobally dismissed on all consumers.\nThe AllJoyn\n Notification Service \u67b6\u6784\u4e3a\u8bbe\u5907\uff0f\u5e94\u7528\u53d1\u9001\u7684\u53ef\u8bfb\u6587\u672c\u63d0\u4f9b\u4e86\u4e00\u5957\u901a\u7528\u7684\u663e\u793a\u6216\u6e32\u67d3\u673a\u5236\u3002\u901a\u77e5\u88ab\u5e7f\u64ad\u5728 AllJoyn \u7f51\u7edc\u4e2d\uff0c\u6240\u6709\u8bbe\u5907\uff0f\u5e94\u7528\u90fd\u80fd\u591f\u63a5\u6536\uff0c\u5b83\u7684\u6301\u7eed\u65f6\u95f4\u6839\u636e\u901a\u77e5\u7684\u53d1\u51fa\u8005\u8bbe\u5b9a\u7684 TTL \u51b3\u5b9a\u3002\u9664\u4e86\u6587\u672c\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u53d1\u9001\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5982\u97f3\u9891\u3001\u56fe\u50cf\u3001\u63a7\u5236\u9762\u677f\u5bf9\u8c61\u6216\u5176\u4ed6\u81ea\u5b9a\u4e49\u5c5e\u6027\uff1b\u7531\u63a5\u6536\u8005\u51b3\u5b9a\u5904\u7406\u548c\u6e32\u67d3\u81ea\u5b9a\u4e49\u5c5e\u6027\u7684\u6700\u597d\u65b9\u5f0f\u3002\u53e6\u5916\uff0c\u63a5\u53d7\u8005\u53ef\u4ee5\u5168\u5c40\u62d2\u6536\u901a\u77e5\u3002\n\n\nConcepts and Terminology \u6982\u5ff5\u548c\u672f\u8bed\n\n\nProducer and Consumer \u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\n\n\nTwo roles exist: \u4e24\u4e2a\u89d2\u8272\uff1a\n\n Producer. This is who sends the notification. \u751f\u4ea7\u8005\u3002\u5b83\u53d1\u9001\u901a\u77e5\u3002\n\n Consumer. This is who receives the notification.  \u6d88\u8d39\u8005\u3002\u5b83\u63a5\u6536\u901a\u77e5\u3002\n\n\nMessage Types \u6d88\u606f\u7c7b\u578b\n\n\nNotifications can be one of three types: Info, Warning, and Emergency. Info\nshould be used most of the time. When appropriate, a Warning can be used to\ndraw more attention to the notification. Similary, Emergency can be used\nprudently in situations when extreme attention is required.\n\u901a\u77e5\u53ef\u4ee5\u5c5e\u4e8e\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b\uff1a\u4fe1\u606f\u3001\u8b66\u544a\u3001\u7d27\u6025\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u4fe1\u606f\u7684\u65b9\u5f0f\u53d1\u9001\u3002\u5f53\u60c5\u51b5\u5408\u9002\u65f6\uff0c\u53ef\u4ee5\u7528\u8b66\u544a\u4f7f\u901a\u77e5\u83b7\u5f97\u66f4\u591a\u5173\u6ce8\u3002\u540c\u6837\uff0c\u5728\u7d27\u6025\u60c5\u51b5\u53d1\u751f\u65f6\uff0c\u53ef\u4ee5\u8c28\u614e\u5730\u4f7f\u7528\u7d27\u6025\u65b9\u5f0f\u3002\n\n\nTime-to-live (TTL) \u5b58\u6d3b\u65f6\u95f4\uff08TTL\uff09\n\n\nEach message is sent with a specific Time-to-live (TTL), in units of\nmilliseconds. The message will persist on the network until its TTL\nexpires. If a Consumer joins the network within the TTL, he will\nreceive the message.\n\u53d1\u9001\u7684\u6bcf\u4e00\u6761\u4fe1\u606f\u90fd\u4f1a\u4f34\u968f\u4e00\u4e2a\u7279\u5b9a\u7684 Time-to-live (TTL)\uff0c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u3002\u6d88\u606f\u4f1a\u4fdd\u6301\u5728\u7f51\u7edc\u4e2d\u76f4\u5230\u5b83\u7684 TTL \u8d85\u65f6\u3002\u5982\u679c\u6d88\u8d39\u8005\u5728 TTL \u4e4b\u5185\u52a0\u5165\u4e86\u7f51\u7edc\uff0c\u5b83\u5c06\u80fd\u591f\u6536\u5230\u6d88\u606f\u3002\n\n\nAdditionally, messages using the same Message Type overwrite one\nanother. So, at any given time, no more than 1 message from each of\nthe 3 Message Types can be valid for a given Producer. For example,\nif a Producer sends an Info message 20 seconds after sending the\nprevious Info message that had a 100-second TTL, the new message will\noverwrite the previous message. Consumers from this point forward\nwould only receive the new message and not the old message, even\nthough the TTL of the old message did not yet expire.\n\u6b64\u5916\uff0c\u4f7f\u7528\u76f8\u540c\u7c7b\u578b\u7684\u6d88\u606f\u5c06\u4f1a\u88ab\u8986\u76d6\u3002\u6240\u4ee5\uff0c\u5728\u4efb\u610f\u65f6\u95f4\uff0c\u751f\u4ea7\u8005\u53d1\u9001\u7684\u540c\u7c7b\u578b\u6d88\u606f\u81f3\u591a\u6709\u4e00\u4e2a\u751f\u6548\u3002\u4e3e\u4f8b\u8bf4\u660e\uff0c\u5982\u679c\u751f\u4ea7\u8005\u53d1\u9001\u4e86\u4e00\u6761\u4fe1\u606f\u7c7b\u578b\u7684\u6d88\u606f\uff0c\u5e76\u4e14\u5728 20 \u79d2\u4e4b\u524d\u5b83\u53d1\u9001\u4e86\u4e00\u6761 100 \u79d2 TTL \u7684\u4fe1\u606f\u7c7b\u578b\u7684\u7a0b\u5e8f\u3002\u90a3\u4e48\u65b0\u7684\u6d88\u606f\u5c06\u4f1a\u8986\u76d6\u4e4b\u524d\u7684\u6d88\u606f\u3002\u6d88\u8d39\u8005\u53ea\u80fd\u63a5\u6536\u5230\u65b0\u7684\u6d88\u606f\uff0c\u5c3d\u7ba1\u65e7\u6d88\u606f\u7684 TTl \u4ecd\u6ca1\u6709\u8fc7\u671f\u3002\n\n\nMultiple Language Support \u591a\u8bed\u8a00\u652f\u6301\n\n\nLike all AllJoyn services, Notification supports multiple languages. The\nProducer sends the notification string in all supported lanugages. The\nConsumer can use whatever supported language is most appropriate for\nits needs.\n\u5982\u6240\u6709 AllJoyn \u670d\u52a1\u4e00\u6837\uff0c\u901a\u77e5\u670d\u52a1\u652f\u6301\u591a\u8bed\u8a00\u3002\u751f\u4ea7\u8005\u7528\u6240\u6709\u652f\u6301\u7684\u8bed\u8a00\u53d1\u9001\u901a\u77e5\u5b57\u7b26\u4e32\u3002\u6d88\u8d39\u8005\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u9009\u62e9\u6700\u5408\u9002\u7684\u8bed\u8a00\u3002\n\n\nDismiss \u9a73\u56de\n\n\nDismissing notifications can occur in 3 ways: \u6709\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f\u9a73\u56de\u901a\u77e5\uff1a\n\n\n\n\nA Consumer can dismiss the notification locally by\n   removing the notification from its user interface so that its uses\n   no longer see the notifications. This will have no bearing on if the notification is visibile by other Consumers on the network.\n\n\n\n\n\u6d88\u8d39\u8005\u53ef\u4ee5\u5c06\u901a\u77e5\u79fb\u9664\u5b83\u7684\u7528\u6237\u63a5\u53e3\uff0c\u90a3\u4e48\u5b83\u7684\u7528\u6237\u5c31\u4e0d\u4f1a\u6536\u5230\u901a\u77e5\uff0c\u5c31\u8fbe\u5230\u4e86\u62d2\u7edd\u901a\u77e5\u7684\u76ee\u7684\u3002\u5f53\u8fd9\u4e2a\u901a\u77e5\u53ef\u4ee5\u88ab\u7f51\u7edc\u4e0a\u7684\u5176\u5b83\u6d88\u8d39\u8005\u6536\u5230\u65f6\uff0c\u90a3\u4e48\u6b64\u65b9\u6cd5\u4e0d\u9002\u7528\u3002\n\n\n\n\n\n\nConsumers or Producers, can send a signal to all\n   Consumers on the network to dimiss. Consumers, upon receiving this\n   signal, is expected to remove the notification from view.\n\n\n\n\n\n\n\u6d88\u8d39\u8005\u6216\u751f\u4ea7\u8005\uff0c\u80fd\u591f\u901a\u8fc7\u5411\u6240\u6709\u7f51\u7edc\u4e2d\u7684\u6d88\u8d39\u8005\u53d1\u9001\u4e00\u4e2a\u4fe1\u606f\u4ee5\u62d2\u7edd\u901a\u77e5\u3002\u5728\u6536\u5230\u6b64\u4fe1\u53f7\u540e\uff0c\u6d88\u8d39\u8005\u9884\u8ba1\u5c06\u79fb\u9664\u8be5\u901a\u77e5\u3002\n\n\n\n\n\n\nA Consumer can tell the Producer to stop broadcasting the notification\n   Subsequently, new Consumers will no longer receive the notification.\n\n\n\n\n\u6d88\u8d39\u8005\u80fd\u591f\u901a\u77e5\u751f\u4ea7\u8005\u505c\u6b62\u5e7f\u64ad\u901a\u77e5\u3002\u968f\u540e\uff0c\u65b0\u6d88\u8d39\u8005\u5c06\u4e0d\u4f1a\u6536\u5230\u8fd9\u4e2a\u901a\u77e5\u3002\n\n\n\n\nAudio and Image \u58f0\u97f3\u548c\u56fe\u50cf\n\n\nNotifications allows for attributes to be specified. This gives the\nnotification an extra dimension beyond just text. Most common attributes\nare audio and image. The attribute can either be specified as a URL or as\nan AllJoyn object path. If the URL is provided, the consumer can optionally\nfetch the audio and/or image via the specified URL and render it locally as\nappropriate.\n\u901a\u77e5\u5141\u8bb8\u6307\u5b9a\u7c7b\u578b\u3002\u8fd9\u4e3a\u901a\u77e5\u63d0\u4f9b\u4e86\u8d85\u8d8a\u6587\u672c\u7684\u989d\u5916\u7ef4\u5ea6\u3002\u6700\u5e38\u89c1\u7684\u7c7b\u578b\u662f\u58f0\u97f3\u548c\u56fe\u50cf\u3002\u5b83\u4eec\u53ef\u4ee5\u88ab\u6307\u5b9a\u4e3a\u7279\u5b9a URL \u6216\u8005\u4f5c\u4e3a\u4e00\u4e2a AllJoyn \u5bf9\u8c61\u8def\u5f84\u3002\u5982\u679c\u63d0\u4f9b\u4e86 URL\uff0c\u6d88\u8d39\u8005\u53ef\u4ee5\u9009\u62e9\u901a\u8fc7\u6307\u5b9a\u7684 URL \u4e2d\u63d0\u53d6\u7684\u97f3\u9891\u6216\u56fe\u50cf\u5e76\u914c\u60c5\u5728\u672c\u5730\u6e32\u67d3\u3002\n\n\nControl Panel Object Path \u63a7\u5236\u9762\u677f\u5bf9\u8c61\u8def\u5f84\n\n\nA special attribute is the control panel object path. The producer fills\nout this attribute to provide extra direction to the consumer. When the\nconsumer receives this notificaiton, if it supports the Control Panel service, it\nis encouraged to fetch the control panel at the object path and render\nit to the user. Typically this is done to allow the consumer to perform\nan action associated with a notification.\n\u63a7\u5236\u9762\u677f\u5bf9\u8c61\u8def\u5f84\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5c5e\u6027\u3002\u751f\u4ea7\u8005\u586b\u5199\u8fd9\u4e2a\u5c5e\u6027\uff0c\u4e3a\u6d88\u8d39\u8005\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u6307\u793a\u3002\u5f53\u6d88\u8d39\u8005\u6536\u5230\u6b64\u901a\u77e5\uff0c\u5982\u679c\u5b83\u652f\u6301\u63a7\u5236\u9762\u677f\u670d\u52a1\uff0c\u5c31\u53ef\u4ee5\u4ece\u5bf9\u8c61\u8def\u5f84\u5f97\u5230\u63a7\u5236\u9762\u677f\u5e76\u63d0\u4f9b\u7ed9\u7528\u6237\u4f7f\u7528\u3002\u901a\u5e38\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u4f7f\u6d88\u8d39\u8005\u80fd\u591f\u6267\u884c\u4e0e\u901a\u77e5\u5173\u8054\u7684\u64cd\u4f5c\u3002\n\n\nAn example is if the oven has been left on for some, in addition to\nsending a notification, it can include a control panel to be rendered\nto provide to the user the option of turning off the oven.\n\u4e3e\u4f8b\u8bf4\u660e\uff0c \u5982\u679c\u4e00\u4e2a\u70e4\u7bb1\u88ab\u7559\u5728\u67d0\u5730\uff0c\u5e76\u4e14\u662f\u6253\u5f00\u7684\u72b6\u6001\u3002\u5b83\u53ef\u4ee5\u53d1\u9001\u4e00\u4e2a\u5e26\u6709\u63a7\u5236\u9762\u677f\u7684\u901a\u77e5\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u5c06\u5b83\u5173\u95ed\u7684\u9009\u9879\u3002\n\n\nCustom Attributes \u5b9a\u5236\u5c5e\u6027\n\n\nA notification can contain any number of custom key/value pair attributes.\nThe Consumer can optionally use this information to display a richer\nnotification. Custom attributes are application-specific, so\nthe Consumer needs to have special informationa about the\nProducer in order to properly use the custom attributes\n\u901a\u77e5\u80fd\u591f\u5305\u542b\u4efb\u610f\u6570\u91cf\u7684\u5b9a\u5236\u952e\uff0f\u503c\u5bf9\u5c5e\u6027\u3002\u6d88\u8d39\u8005\u80fd\u591f\u9009\u62e9\u6027\u5730\u5229\u7528\u8fd9\u4e9b\u4fe1\u606f\u83b7\u5f97\u66f4\u591a\u7684\u901a\u77e5\u3002\u5b9a\u5236\u5c5e\u6027\u662f\u9488\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\uff0c\u6240\u4ee5\u6d88\u8d39\u8005\u9700\u8981\u6709\u5173\u4e8e\u751f\u4ea7\u8005\u7684\u7279\u5b9a\u4fe1\u606f\uff0c\u4ee5\u9002\u5f53\u5730\u4f7f\u7528\u5b9a\u5236\u5c5e\u6027\u3002\n\n\nAs an example, imagine a radio sent a notification every time a\nnew song was played. This notification contains the artist and\ntitle as the notification text and a custom attribute for the\nalbum art URL. A normal Consumer would receive the notification\nand only display the notification text, that is, the artist and\ntitle. But a Consumer that is aware of this Producer, could also\nget the album art URL and display that along with the\nnotification text to provide a richer custom notificaiton.\n\u4e3e\u4f8b\u8bf4\u660e\uff0c\u8bd5\u60f3\u4e00\u4e2a\u6536\u97f3\u673a\u6bcf\u64ad\u653e\u4e00\u4e2a\u65b0\u4e50\u66f2\u65f6\u53d1\u9001\u4e00\u4e2a\u901a\u77e5\u3002\u8fd9\u4e2a\u901a\u77e5\u5305\u542b\u4e86\u901a\u77e5\u6587\u672c\u5f62\u5f0f\u7684\u827a\u672f\u5bb6\u548c\u66f2\u540d\uff0c\u4ee5\u53ca\u4e00\u4efd\u4e13\u8f91\u5c01\u9762 URL \u7684\u5b9a\u5236\u5c5e\u6027\u3002\u666e\u901a\u6d88\u8d39\u8005\u5728\u6536\u5230\u8be5\u901a\u77e5\u540e\u53ea\u4f1a\u73b0\u5b9e\u901a\u77e5\u6587\u672c\u5f62\u5f0f\u7684\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u827a\u672f\u5bb6\u548c\u66f2\u540d\u3002\u4f46\u662f\u90a3\u4e9b\u66f4\u52a0\u5173\u6ce8\u751f\u4ea7\u8005\u7684\u6d88\u8d39\u8005\uff0c\u4e5f\u80fd\u591f\u4ece\u901a\u77e5\u4e2d\u83b7\u5f97\u4e13\u8f91\u5c01\u9762 URL \u5e76\u663e\u793a\u51fa\u6765\u4ee5\u63d0\u4f9b\u66f4\u4e30\u5bcc\u7684\u5b9a\u5236\u901a\u77e5\u3002\n\n\nHow It Works \u8fd0\u884c\u65b9\u5f0f\n\n\nUnder the hood, notifications are sent using AllJoyn Sessionless Signals.\nSessionless Signals provide everything that is needed to send and receive\nthe notification:\n\u4ece\u5185\u90e8\u6765\u770b\uff0c\u901a\u77e5\u901a\u8fc7 AllJoyn Sessionless Signal \u4fe1\u53f7\u8fdb\u884c\u53d1\u9001\u3002Sessionless Signal \u6ee1\u8db3\u4e86\u53d1\u9001\u548c\u63a5\u6536\u901a\u77e5\u7684\u4e00\u5207\u9700\u8981\uff1a\n\n\n\n\n\n\nA mechanism for a Producer to broadcast information to AllJoyn\n  apps/devices on the AllJoyn network. \u4f7f\u751f\u4ea7\u8005\u80fd\u591f\u5728 AllJoyn \u7f51\u7edc\u4e2d\u5411 AllJoyn \u5e94\u7528\u7a0b\u5e8f\uff0f\u8bbe\u5907\u5e7f\u64ad\u4fe1\u606f\u7684\u673a\u5236\u3002\n\n\n\n\n\n\nA concept of a TTL. TTL \u7684\u6982\u5ff5\n\n\n\n\n\n\nA mechanism for new Consumers to join the network to be informed\n  of previously broadcasted notifications whose TTL had not expired. \u5f53\u65b0\u6d88\u8d39\u8005\u52a0\u5165\u7f51\u7edc\u65f6\uff0c\u80fd\u88ab TTL \u5c1a\u672a\u5230\u671f\u7684\u5e7f\u64ad\u901a\u77e5\u5230\u7684\u673a\u5236\u3002\n\n\n\n\n\n\nThe sessionless signal contains the full notification, including\nall supported languages, and full metadata. Refer to the \nNotification\nInterface Definition\n for more details on the specific\ncontents of the signal.\nSessionless signal \u5305\u542b\u5b8c\u5168\u7248\u672c\u7684\u901a\u77e5\uff0c\u5305\u542b\u6240\u6709\u652f\u6301\u7684\u8bed\u8a00\u548c\u6240\u6709\u7684\u5143\u6570\u636e\u3002\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u548c\u4fe1\u53f7\u7684\u5177\u4f53\u5185\u5bb9\u8bf7\u53c2\u9605 \nNotification\nInterface Definition\n\u3002\n\n\nDismissing notifications are also handled by sessionless signals.\n\u62d2\u7edd\u901a\u77e5\u4e5f\u7531 sessionless signal \u5904\u7406\u3002\n\n\nIn summary, this is how things work: \u7efc\u4e0a\u6240\u8ff0\uff0c\u4ee5\u4e0b\u662f\u5b83\u5de5\u4f5c\u7684\u65b9\u6cd5\uff1a\n\n\n\n\n\n\nA Producer sends a sessionless signal containing the notification. \u751f\u4ea7\u8005\u53d1\u9001\u5305\u542b\u901a\u77e5\u7684 sessionless signal\u3002\n\n\n\n\n\n\nConsumers will receive this signal and display the notification. \u6d88\u8d39\u8005\u5728\u63a5\u6536\u4fe1\u53f7\u540e\u663e\u793a\u901a\u77e5\u3002\n\n\n\n\n\n\nConsumers joining the network later will also receive this signal\n  and display the information. \u7a0d\u665a\u63a5\u5165\u7f51\u7edc\u7684\u6d88\u8d39\u8005\u4e5f\u4f1a\u63a5\u6536\u5e76\u663e\u793a\u8be5\u4fe1\u606f\u3002\n\n\n\n\n\n\nWhen the TTL expires, the Procuder will stop broadcasting this\n  sessionless signal. Consumers will stop displaying the notification \u5f53 TTL \u8d85\u65f6\u540e\uff0c\u751f\u4ea7\u8005\u5c06\u4f1a\u505c\u6b62\u5e7f\u64ad sessionless signal\u3002\u6d88\u8d39\u8005\u5c06\u505c\u6b62\u663e\u793a\u8be5\u901a\u77e5\u3002\n\n\n\n\n\n\nAt any time, a Producer or Consumer can send a sessionless signal\n  to dismiss the notificaiton. Consumers, upon receiving this, will\n  stop displaying the notification. \u4efb\u4f55\u65f6\u95f4\uff0c\u751f\u4ea7\u8005\u6216\u8005\u6d88\u8d39\u8005\u90fd\u53ef\u4ee5\u901a\u8fc7\u53d1\u9001\u4e00\u4e2a sessionless signal \u4ee5\u505c\u6b62\u901a\u77e5\u3002\u6d88\u8d39\u8005\uff0c\u4e00\u65e6\u63a5\u6536\u5230\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u5c06\u4f1a\u505c\u6b62\u663e\u793a\u8be5\u901a\u77e5\u3002\n\n\n\n\n\n\nA Consumer can connect to the Producer to request that the\n  notification stop being broadcasted. \u6d88\u8d39\u8005\u53ef\u4ee5\u8054\u7cfb\u751f\u4ea7\u8005\uff0c\u8981\u6c42\u505c\u6b62\u5e7f\u64ad\u67d0\u4e00\u901a\u77e5\u3002\n\n\n\n\n\n\nLearn More \u66f4\u591a\n\n\n\n\nLearn more about the Notification Interface Definition\n\n\nDownload the SDK\n, \nbuild\n and\n  \nrun the sample apps\n\n\nLearn more about the APIs",
            "title": "Home"
        },
        {
            "location": "/learn/base-services/notification/#notification",
            "text": "The AllJoyn  Notification Service framework provides a common mechanism for\ndevices/apps to send human-readable text to be displayed or otherwise rendered\n(e.g., text to speech can render the text as audio). Notifications are broadcasted\non the AllJoyn network for all devices/apps to receive, and persists for a\nspecified TTL defined by the producer of the notification. In addition to text,\nother metadata like audio, images, control panel objects, or other custom\nattributes can be sent; it is up to the receipient to determine the best\nway to handle and render custom attributes. Also, Notifications can be\nglobally dismissed on all consumers.\nThe AllJoyn  Notification Service \u67b6\u6784\u4e3a\u8bbe\u5907\uff0f\u5e94\u7528\u53d1\u9001\u7684\u53ef\u8bfb\u6587\u672c\u63d0\u4f9b\u4e86\u4e00\u5957\u901a\u7528\u7684\u663e\u793a\u6216\u6e32\u67d3\u673a\u5236\u3002\u901a\u77e5\u88ab\u5e7f\u64ad\u5728 AllJoyn \u7f51\u7edc\u4e2d\uff0c\u6240\u6709\u8bbe\u5907\uff0f\u5e94\u7528\u90fd\u80fd\u591f\u63a5\u6536\uff0c\u5b83\u7684\u6301\u7eed\u65f6\u95f4\u6839\u636e\u901a\u77e5\u7684\u53d1\u51fa\u8005\u8bbe\u5b9a\u7684 TTL \u51b3\u5b9a\u3002\u9664\u4e86\u6587\u672c\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u53d1\u9001\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5982\u97f3\u9891\u3001\u56fe\u50cf\u3001\u63a7\u5236\u9762\u677f\u5bf9\u8c61\u6216\u5176\u4ed6\u81ea\u5b9a\u4e49\u5c5e\u6027\uff1b\u7531\u63a5\u6536\u8005\u51b3\u5b9a\u5904\u7406\u548c\u6e32\u67d3\u81ea\u5b9a\u4e49\u5c5e\u6027\u7684\u6700\u597d\u65b9\u5f0f\u3002\u53e6\u5916\uff0c\u63a5\u53d7\u8005\u53ef\u4ee5\u5168\u5c40\u62d2\u6536\u901a\u77e5\u3002",
            "title": "Notification"
        },
        {
            "location": "/learn/base-services/notification/#concepts-and-terminology",
            "text": "Producer and Consumer \u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005  Two roles exist: \u4e24\u4e2a\u89d2\u8272\uff1a  Producer. This is who sends the notification. \u751f\u4ea7\u8005\u3002\u5b83\u53d1\u9001\u901a\u77e5\u3002  Consumer. This is who receives the notification.  \u6d88\u8d39\u8005\u3002\u5b83\u63a5\u6536\u901a\u77e5\u3002  Message Types \u6d88\u606f\u7c7b\u578b  Notifications can be one of three types: Info, Warning, and Emergency. Info\nshould be used most of the time. When appropriate, a Warning can be used to\ndraw more attention to the notification. Similary, Emergency can be used\nprudently in situations when extreme attention is required.\n\u901a\u77e5\u53ef\u4ee5\u5c5e\u4e8e\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b\uff1a\u4fe1\u606f\u3001\u8b66\u544a\u3001\u7d27\u6025\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u4fe1\u606f\u7684\u65b9\u5f0f\u53d1\u9001\u3002\u5f53\u60c5\u51b5\u5408\u9002\u65f6\uff0c\u53ef\u4ee5\u7528\u8b66\u544a\u4f7f\u901a\u77e5\u83b7\u5f97\u66f4\u591a\u5173\u6ce8\u3002\u540c\u6837\uff0c\u5728\u7d27\u6025\u60c5\u51b5\u53d1\u751f\u65f6\uff0c\u53ef\u4ee5\u8c28\u614e\u5730\u4f7f\u7528\u7d27\u6025\u65b9\u5f0f\u3002  Time-to-live (TTL) \u5b58\u6d3b\u65f6\u95f4\uff08TTL\uff09  Each message is sent with a specific Time-to-live (TTL), in units of\nmilliseconds. The message will persist on the network until its TTL\nexpires. If a Consumer joins the network within the TTL, he will\nreceive the message.\n\u53d1\u9001\u7684\u6bcf\u4e00\u6761\u4fe1\u606f\u90fd\u4f1a\u4f34\u968f\u4e00\u4e2a\u7279\u5b9a\u7684 Time-to-live (TTL)\uff0c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u3002\u6d88\u606f\u4f1a\u4fdd\u6301\u5728\u7f51\u7edc\u4e2d\u76f4\u5230\u5b83\u7684 TTL \u8d85\u65f6\u3002\u5982\u679c\u6d88\u8d39\u8005\u5728 TTL \u4e4b\u5185\u52a0\u5165\u4e86\u7f51\u7edc\uff0c\u5b83\u5c06\u80fd\u591f\u6536\u5230\u6d88\u606f\u3002  Additionally, messages using the same Message Type overwrite one\nanother. So, at any given time, no more than 1 message from each of\nthe 3 Message Types can be valid for a given Producer. For example,\nif a Producer sends an Info message 20 seconds after sending the\nprevious Info message that had a 100-second TTL, the new message will\noverwrite the previous message. Consumers from this point forward\nwould only receive the new message and not the old message, even\nthough the TTL of the old message did not yet expire.\n\u6b64\u5916\uff0c\u4f7f\u7528\u76f8\u540c\u7c7b\u578b\u7684\u6d88\u606f\u5c06\u4f1a\u88ab\u8986\u76d6\u3002\u6240\u4ee5\uff0c\u5728\u4efb\u610f\u65f6\u95f4\uff0c\u751f\u4ea7\u8005\u53d1\u9001\u7684\u540c\u7c7b\u578b\u6d88\u606f\u81f3\u591a\u6709\u4e00\u4e2a\u751f\u6548\u3002\u4e3e\u4f8b\u8bf4\u660e\uff0c\u5982\u679c\u751f\u4ea7\u8005\u53d1\u9001\u4e86\u4e00\u6761\u4fe1\u606f\u7c7b\u578b\u7684\u6d88\u606f\uff0c\u5e76\u4e14\u5728 20 \u79d2\u4e4b\u524d\u5b83\u53d1\u9001\u4e86\u4e00\u6761 100 \u79d2 TTL \u7684\u4fe1\u606f\u7c7b\u578b\u7684\u7a0b\u5e8f\u3002\u90a3\u4e48\u65b0\u7684\u6d88\u606f\u5c06\u4f1a\u8986\u76d6\u4e4b\u524d\u7684\u6d88\u606f\u3002\u6d88\u8d39\u8005\u53ea\u80fd\u63a5\u6536\u5230\u65b0\u7684\u6d88\u606f\uff0c\u5c3d\u7ba1\u65e7\u6d88\u606f\u7684 TTl \u4ecd\u6ca1\u6709\u8fc7\u671f\u3002  Multiple Language Support \u591a\u8bed\u8a00\u652f\u6301  Like all AllJoyn services, Notification supports multiple languages. The\nProducer sends the notification string in all supported lanugages. The\nConsumer can use whatever supported language is most appropriate for\nits needs.\n\u5982\u6240\u6709 AllJoyn \u670d\u52a1\u4e00\u6837\uff0c\u901a\u77e5\u670d\u52a1\u652f\u6301\u591a\u8bed\u8a00\u3002\u751f\u4ea7\u8005\u7528\u6240\u6709\u652f\u6301\u7684\u8bed\u8a00\u53d1\u9001\u901a\u77e5\u5b57\u7b26\u4e32\u3002\u6d88\u8d39\u8005\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u9009\u62e9\u6700\u5408\u9002\u7684\u8bed\u8a00\u3002  Dismiss \u9a73\u56de  Dismissing notifications can occur in 3 ways: \u6709\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f\u9a73\u56de\u901a\u77e5\uff1a   A Consumer can dismiss the notification locally by\n   removing the notification from its user interface so that its uses\n   no longer see the notifications. This will have no bearing on if the notification is visibile by other Consumers on the network.   \u6d88\u8d39\u8005\u53ef\u4ee5\u5c06\u901a\u77e5\u79fb\u9664\u5b83\u7684\u7528\u6237\u63a5\u53e3\uff0c\u90a3\u4e48\u5b83\u7684\u7528\u6237\u5c31\u4e0d\u4f1a\u6536\u5230\u901a\u77e5\uff0c\u5c31\u8fbe\u5230\u4e86\u62d2\u7edd\u901a\u77e5\u7684\u76ee\u7684\u3002\u5f53\u8fd9\u4e2a\u901a\u77e5\u53ef\u4ee5\u88ab\u7f51\u7edc\u4e0a\u7684\u5176\u5b83\u6d88\u8d39\u8005\u6536\u5230\u65f6\uff0c\u90a3\u4e48\u6b64\u65b9\u6cd5\u4e0d\u9002\u7528\u3002    Consumers or Producers, can send a signal to all\n   Consumers on the network to dimiss. Consumers, upon receiving this\n   signal, is expected to remove the notification from view.    \u6d88\u8d39\u8005\u6216\u751f\u4ea7\u8005\uff0c\u80fd\u591f\u901a\u8fc7\u5411\u6240\u6709\u7f51\u7edc\u4e2d\u7684\u6d88\u8d39\u8005\u53d1\u9001\u4e00\u4e2a\u4fe1\u606f\u4ee5\u62d2\u7edd\u901a\u77e5\u3002\u5728\u6536\u5230\u6b64\u4fe1\u53f7\u540e\uff0c\u6d88\u8d39\u8005\u9884\u8ba1\u5c06\u79fb\u9664\u8be5\u901a\u77e5\u3002    A Consumer can tell the Producer to stop broadcasting the notification\n   Subsequently, new Consumers will no longer receive the notification.   \u6d88\u8d39\u8005\u80fd\u591f\u901a\u77e5\u751f\u4ea7\u8005\u505c\u6b62\u5e7f\u64ad\u901a\u77e5\u3002\u968f\u540e\uff0c\u65b0\u6d88\u8d39\u8005\u5c06\u4e0d\u4f1a\u6536\u5230\u8fd9\u4e2a\u901a\u77e5\u3002   Audio and Image \u58f0\u97f3\u548c\u56fe\u50cf  Notifications allows for attributes to be specified. This gives the\nnotification an extra dimension beyond just text. Most common attributes\nare audio and image. The attribute can either be specified as a URL or as\nan AllJoyn object path. If the URL is provided, the consumer can optionally\nfetch the audio and/or image via the specified URL and render it locally as\nappropriate.\n\u901a\u77e5\u5141\u8bb8\u6307\u5b9a\u7c7b\u578b\u3002\u8fd9\u4e3a\u901a\u77e5\u63d0\u4f9b\u4e86\u8d85\u8d8a\u6587\u672c\u7684\u989d\u5916\u7ef4\u5ea6\u3002\u6700\u5e38\u89c1\u7684\u7c7b\u578b\u662f\u58f0\u97f3\u548c\u56fe\u50cf\u3002\u5b83\u4eec\u53ef\u4ee5\u88ab\u6307\u5b9a\u4e3a\u7279\u5b9a URL \u6216\u8005\u4f5c\u4e3a\u4e00\u4e2a AllJoyn \u5bf9\u8c61\u8def\u5f84\u3002\u5982\u679c\u63d0\u4f9b\u4e86 URL\uff0c\u6d88\u8d39\u8005\u53ef\u4ee5\u9009\u62e9\u901a\u8fc7\u6307\u5b9a\u7684 URL \u4e2d\u63d0\u53d6\u7684\u97f3\u9891\u6216\u56fe\u50cf\u5e76\u914c\u60c5\u5728\u672c\u5730\u6e32\u67d3\u3002  Control Panel Object Path \u63a7\u5236\u9762\u677f\u5bf9\u8c61\u8def\u5f84  A special attribute is the control panel object path. The producer fills\nout this attribute to provide extra direction to the consumer. When the\nconsumer receives this notificaiton, if it supports the Control Panel service, it\nis encouraged to fetch the control panel at the object path and render\nit to the user. Typically this is done to allow the consumer to perform\nan action associated with a notification.\n\u63a7\u5236\u9762\u677f\u5bf9\u8c61\u8def\u5f84\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5c5e\u6027\u3002\u751f\u4ea7\u8005\u586b\u5199\u8fd9\u4e2a\u5c5e\u6027\uff0c\u4e3a\u6d88\u8d39\u8005\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u6307\u793a\u3002\u5f53\u6d88\u8d39\u8005\u6536\u5230\u6b64\u901a\u77e5\uff0c\u5982\u679c\u5b83\u652f\u6301\u63a7\u5236\u9762\u677f\u670d\u52a1\uff0c\u5c31\u53ef\u4ee5\u4ece\u5bf9\u8c61\u8def\u5f84\u5f97\u5230\u63a7\u5236\u9762\u677f\u5e76\u63d0\u4f9b\u7ed9\u7528\u6237\u4f7f\u7528\u3002\u901a\u5e38\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u4f7f\u6d88\u8d39\u8005\u80fd\u591f\u6267\u884c\u4e0e\u901a\u77e5\u5173\u8054\u7684\u64cd\u4f5c\u3002  An example is if the oven has been left on for some, in addition to\nsending a notification, it can include a control panel to be rendered\nto provide to the user the option of turning off the oven.\n\u4e3e\u4f8b\u8bf4\u660e\uff0c \u5982\u679c\u4e00\u4e2a\u70e4\u7bb1\u88ab\u7559\u5728\u67d0\u5730\uff0c\u5e76\u4e14\u662f\u6253\u5f00\u7684\u72b6\u6001\u3002\u5b83\u53ef\u4ee5\u53d1\u9001\u4e00\u4e2a\u5e26\u6709\u63a7\u5236\u9762\u677f\u7684\u901a\u77e5\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u5c06\u5b83\u5173\u95ed\u7684\u9009\u9879\u3002  Custom Attributes \u5b9a\u5236\u5c5e\u6027  A notification can contain any number of custom key/value pair attributes.\nThe Consumer can optionally use this information to display a richer\nnotification. Custom attributes are application-specific, so\nthe Consumer needs to have special informationa about the\nProducer in order to properly use the custom attributes\n\u901a\u77e5\u80fd\u591f\u5305\u542b\u4efb\u610f\u6570\u91cf\u7684\u5b9a\u5236\u952e\uff0f\u503c\u5bf9\u5c5e\u6027\u3002\u6d88\u8d39\u8005\u80fd\u591f\u9009\u62e9\u6027\u5730\u5229\u7528\u8fd9\u4e9b\u4fe1\u606f\u83b7\u5f97\u66f4\u591a\u7684\u901a\u77e5\u3002\u5b9a\u5236\u5c5e\u6027\u662f\u9488\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\uff0c\u6240\u4ee5\u6d88\u8d39\u8005\u9700\u8981\u6709\u5173\u4e8e\u751f\u4ea7\u8005\u7684\u7279\u5b9a\u4fe1\u606f\uff0c\u4ee5\u9002\u5f53\u5730\u4f7f\u7528\u5b9a\u5236\u5c5e\u6027\u3002  As an example, imagine a radio sent a notification every time a\nnew song was played. This notification contains the artist and\ntitle as the notification text and a custom attribute for the\nalbum art URL. A normal Consumer would receive the notification\nand only display the notification text, that is, the artist and\ntitle. But a Consumer that is aware of this Producer, could also\nget the album art URL and display that along with the\nnotification text to provide a richer custom notificaiton.\n\u4e3e\u4f8b\u8bf4\u660e\uff0c\u8bd5\u60f3\u4e00\u4e2a\u6536\u97f3\u673a\u6bcf\u64ad\u653e\u4e00\u4e2a\u65b0\u4e50\u66f2\u65f6\u53d1\u9001\u4e00\u4e2a\u901a\u77e5\u3002\u8fd9\u4e2a\u901a\u77e5\u5305\u542b\u4e86\u901a\u77e5\u6587\u672c\u5f62\u5f0f\u7684\u827a\u672f\u5bb6\u548c\u66f2\u540d\uff0c\u4ee5\u53ca\u4e00\u4efd\u4e13\u8f91\u5c01\u9762 URL \u7684\u5b9a\u5236\u5c5e\u6027\u3002\u666e\u901a\u6d88\u8d39\u8005\u5728\u6536\u5230\u8be5\u901a\u77e5\u540e\u53ea\u4f1a\u73b0\u5b9e\u901a\u77e5\u6587\u672c\u5f62\u5f0f\u7684\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u827a\u672f\u5bb6\u548c\u66f2\u540d\u3002\u4f46\u662f\u90a3\u4e9b\u66f4\u52a0\u5173\u6ce8\u751f\u4ea7\u8005\u7684\u6d88\u8d39\u8005\uff0c\u4e5f\u80fd\u591f\u4ece\u901a\u77e5\u4e2d\u83b7\u5f97\u4e13\u8f91\u5c01\u9762 URL \u5e76\u663e\u793a\u51fa\u6765\u4ee5\u63d0\u4f9b\u66f4\u4e30\u5bcc\u7684\u5b9a\u5236\u901a\u77e5\u3002",
            "title": "Concepts and Terminology \u6982\u5ff5\u548c\u672f\u8bed"
        },
        {
            "location": "/learn/base-services/notification/#how-it-works",
            "text": "Under the hood, notifications are sent using AllJoyn Sessionless Signals.\nSessionless Signals provide everything that is needed to send and receive\nthe notification:\n\u4ece\u5185\u90e8\u6765\u770b\uff0c\u901a\u77e5\u901a\u8fc7 AllJoyn Sessionless Signal \u4fe1\u53f7\u8fdb\u884c\u53d1\u9001\u3002Sessionless Signal \u6ee1\u8db3\u4e86\u53d1\u9001\u548c\u63a5\u6536\u901a\u77e5\u7684\u4e00\u5207\u9700\u8981\uff1a    A mechanism for a Producer to broadcast information to AllJoyn\n  apps/devices on the AllJoyn network. \u4f7f\u751f\u4ea7\u8005\u80fd\u591f\u5728 AllJoyn \u7f51\u7edc\u4e2d\u5411 AllJoyn \u5e94\u7528\u7a0b\u5e8f\uff0f\u8bbe\u5907\u5e7f\u64ad\u4fe1\u606f\u7684\u673a\u5236\u3002    A concept of a TTL. TTL \u7684\u6982\u5ff5    A mechanism for new Consumers to join the network to be informed\n  of previously broadcasted notifications whose TTL had not expired. \u5f53\u65b0\u6d88\u8d39\u8005\u52a0\u5165\u7f51\u7edc\u65f6\uff0c\u80fd\u88ab TTL \u5c1a\u672a\u5230\u671f\u7684\u5e7f\u64ad\u901a\u77e5\u5230\u7684\u673a\u5236\u3002    The sessionless signal contains the full notification, including\nall supported languages, and full metadata. Refer to the  Notification\nInterface Definition  for more details on the specific\ncontents of the signal.\nSessionless signal \u5305\u542b\u5b8c\u5168\u7248\u672c\u7684\u901a\u77e5\uff0c\u5305\u542b\u6240\u6709\u652f\u6301\u7684\u8bed\u8a00\u548c\u6240\u6709\u7684\u5143\u6570\u636e\u3002\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u548c\u4fe1\u53f7\u7684\u5177\u4f53\u5185\u5bb9\u8bf7\u53c2\u9605  Notification\nInterface Definition \u3002  Dismissing notifications are also handled by sessionless signals.\n\u62d2\u7edd\u901a\u77e5\u4e5f\u7531 sessionless signal \u5904\u7406\u3002  In summary, this is how things work: \u7efc\u4e0a\u6240\u8ff0\uff0c\u4ee5\u4e0b\u662f\u5b83\u5de5\u4f5c\u7684\u65b9\u6cd5\uff1a    A Producer sends a sessionless signal containing the notification. \u751f\u4ea7\u8005\u53d1\u9001\u5305\u542b\u901a\u77e5\u7684 sessionless signal\u3002    Consumers will receive this signal and display the notification. \u6d88\u8d39\u8005\u5728\u63a5\u6536\u4fe1\u53f7\u540e\u663e\u793a\u901a\u77e5\u3002    Consumers joining the network later will also receive this signal\n  and display the information. \u7a0d\u665a\u63a5\u5165\u7f51\u7edc\u7684\u6d88\u8d39\u8005\u4e5f\u4f1a\u63a5\u6536\u5e76\u663e\u793a\u8be5\u4fe1\u606f\u3002    When the TTL expires, the Procuder will stop broadcasting this\n  sessionless signal. Consumers will stop displaying the notification \u5f53 TTL \u8d85\u65f6\u540e\uff0c\u751f\u4ea7\u8005\u5c06\u4f1a\u505c\u6b62\u5e7f\u64ad sessionless signal\u3002\u6d88\u8d39\u8005\u5c06\u505c\u6b62\u663e\u793a\u8be5\u901a\u77e5\u3002    At any time, a Producer or Consumer can send a sessionless signal\n  to dismiss the notificaiton. Consumers, upon receiving this, will\n  stop displaying the notification. \u4efb\u4f55\u65f6\u95f4\uff0c\u751f\u4ea7\u8005\u6216\u8005\u6d88\u8d39\u8005\u90fd\u53ef\u4ee5\u901a\u8fc7\u53d1\u9001\u4e00\u4e2a sessionless signal \u4ee5\u505c\u6b62\u901a\u77e5\u3002\u6d88\u8d39\u8005\uff0c\u4e00\u65e6\u63a5\u6536\u5230\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u5c06\u4f1a\u505c\u6b62\u663e\u793a\u8be5\u901a\u77e5\u3002    A Consumer can connect to the Producer to request that the\n  notification stop being broadcasted. \u6d88\u8d39\u8005\u53ef\u4ee5\u8054\u7cfb\u751f\u4ea7\u8005\uff0c\u8981\u6c42\u505c\u6b62\u5e7f\u64ad\u67d0\u4e00\u901a\u77e5\u3002",
            "title": "How It Works \u8fd0\u884c\u65b9\u5f0f"
        },
        {
            "location": "/learn/base-services/notification/#learn-more",
            "text": "Learn more about the Notification Interface Definition  Download the SDK ,  build  and\n   run the sample apps  Learn more about the APIs",
            "title": "Learn More \u66f4\u591a"
        },
        {
            "location": "/learn/base-services/notification/interface-14-02/",
            "text": "Notification Interface Definition - 14.02\n\n\nWarning: This is not the latest interface definition.\n\n\nGo here for latest Notification Interface Definition\n\n\nIntroduction\n\n\nPurpose\n\n\nThis document provides the specification for the AllJoyn\n \nNotification interface. This interface is used by an AllJoyn \napplication to send events or state update notifications to\nother devices connected to an end user's home network, such \nas a Wi-Fi network.\n\n\nScope\n\n\nThis document is targeted to the developers for AllJoyn applications.\n\n\nRelease history\n\n\n\n\n\n\n\n\nRelease version\n\n\nWhat changed\n\n\n\n\n\n\n\n\n\n\nPre-14.02\n\n\nNotification interface version 1 was added.\n\n\n\n\n\n\n14.02\n\n\nThe following interfaces were added:\n\n\n\n\n\n\n\n\n* Dismisser interface version 1\n\n\n\n\n\n\n\n\n* Producer interface version 1\n\n\n\n\n\n\n\n\nReferences\n\n\nExcept for supporting information, the following are reference \ndocuments found on the AllSeen Alliance web site's Docs/Downloads section.\n\n\n\n\nAllJoyn\n Framework Tutorial\n\n\nIntroduction to AllJoyn\n Thin Library\n\n\nAllJoyn Data Type Signature\n\n\nAllJoyn\n About Feature Interface Specification\n\n\n\n\nAcronyms and terms\n\n\n\n\n\n\n\n\nTerm\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nAllJoyn device\n\n\nAn entity which has an AllJoyn application installed to send or receive notifications using the Notification service framework interface.\n\n\n\n\n\n\nConsumer\n\n\nDevice that receives the notification and has a way to notify user such as a mobile phone or TV.\n\n\n\n\n\n\nNotification message\n\n\nA message sent by a producer specifying details of the notification including any notification text to be displayed to the user.\n\n\n\n\n\n\nNotification service framework\n\n\nSoftware layer that enables devices to send or receive human-consumable notifications.\n\n\n\n\n\n\nProducer\n\n\nDevice that generates and sends the notification to a device such as a household appliance.\n\n\n\n\n\n\nSessionless signal\n\n\nA broadcast AllJoyn signal which is received by all devices listening on the end user's home network (such as the Wi-Fi network). The Sessionless signal sessionless signals are broadcast on the network until an associated time-to-live (TTL) value expires. The Notification service framework sends notification messages as sessionless signals over the Wi-Fi network.\n\n\n\n\n\n\n\n\nOverview\n\n\nThis document captures the design for the Notification service framework, \nwhich is a software layer that enables AllJoyn\n devices \nto send notifications to other AllJoyn devices. These devices \nare categorized as producers and consumers. Producers produce \nand send notifications, while consumers consume and display \nthese notifications. An end user's home (Wi-Fi) network can \nhave multiple producers connected and generating notification \nmessages, as well as multiple consumers connected and consuming \nthese messages.\n\n\nThe Notification service framework design supports text \nnotification payload as well as rich notification media \n(icon and audio). For rich media, the notification message \npayload can include URL links or AllJoyn object path references \nto rich notification media. The consumer app receiving the \nnotification message will fetch the rich notification media \nfrom the object path or the producer device.\n\n\nThe Notification service framework uses the AllJoyn framework \nsessionless signal to deliver notification messages. The \nNotification service framework exposes the Notification Service \nAPI for application developers to deliver and receive notification \nmessages. The device OEM uses the Notification service framework \nProducer API to send notification messages. The Notification \nservice framework sends these notification messages over the \nAllJoyn sessionless signal transport mechanism and makes them \navailable to consumer devices listening for sessionless signals. \nThe consumer running the Notification service framework registers \nwith the AllJoyn framework to receive notification messages. \nThe application developer for the consumer device uses the \nNotification service framework Consumer API to register and \nreceive notifications from any producer that is sending \nnotification on the Wi-Fi network.\n\n\nArchitecture\n\n\nThe Notification service framework implements the Notification \ninterface which is the over-the-wire interface to deliver messages \nfrom producers to consumers. Application developers making use of \nthe Notification service framework implement against the\nNotification service framework APIs (producer and consumer side). \nThey do not implement the Notification interface.\n\n\nFigure 1 illustrates the Notification service \nframework API and Notification interface on producers and consumers.\n\n\n\n\nFigure: Notification service framework architecture within the AllJoyn framework\n\n\nTypical call flow\n\n\nFigure 2 illustrates a typical Notification service \nframework call flow with a single producer app generating a notification \nmessage. The message is then acquired by two consumer apps on the \nAllJoyn network.\n\n\n\n\nFigure: Typical Notification service framework call flow\n\n\nThe AllJoyn framework on the producer device does a sessionless \nsignal broadcast for the notification message. This is received \nby the AllJoyn framework on the consumer devices. The AllJoyn \nframework then fetches the notification message over unicast \nsession from the producer AllJoyn core and delivers to the \nconsumer application.\n\n\nSpecification\n\n\nNotification messages\n\n\nThe notification message comprises a set of fields including \nmessage type and message TTL. These notification fields are \nspecified by the producer app when sending notification message \nas part of Notification service framework Producer API.\n\n\nMessage type and TTL fields\n\n\nThe message type defines the type of notification messages \n(emergency, warning and information). Multiple types of \nnotification messages can be sent at the same time by a producer. \nThe message TTL defines the validity period of the notification message.\nNotification messages can be received by consumers that connect \nduring the defined message TTL value.\n\n\nMessages with the same message type will overwrite each other \non the producer, so a consumer that connects to the network \nafter the notification was sent will receive only the last \nof each message type.\n\n\nNotification message behavior\n\n\nThe following behavior is supported using the Notification \nservice framework.\n\n\n\n\nIf another notification message of the same message type \nis sent by a producer app within the TTL period, the new message \noverwrites the existing message.\n\n\nIf a consumer connects to the network after the TTL period \nexpires, that consumer will not receive the message. For example, \nwhen a consumer such as a mobile phone is on the home network \nand the end user leaves the home; the consumer is no longer on \nthe home network. The mobile phone will not receive notification \nmessages when it reacquires the home network and the TTL of \nthose notifications have expired.\n\n\n\n\nNOTE: The value is only used for message validity on the producer \ndevice. The TTL field is not sent as part of the notification \nmessage payload data over the end user's home network.\n\n\nSee \nNotification Service Framework Use Cases\n \nfor use case scenarios related to notification message behavior.\n\n\nDismissing a notification\n\n\nThe dismiss notification is an option for consumers that have \nreceived the notification to let the producer know that this \nnotification has been seen and there is no need to continue \nsending. It also lets other consumers know that the notification \ncan be removed from the user display.\n\n\nWhen a consumer attempts to dismiss a notification, the service \nframework creates a session with the producer using the original \nsender field sent in the notification.\n\n\nUsing the original sender field confirms that the notification \nis received by the actual producer and not the super agent in \ncase the consumer received the notification from the super agent.\n\n\nThe producer will then send out a dismiss sessionless signal \nto notify the rest of the consumers in the network that this \nnotification has been dismissed.\n\n\nIf the producer is not reachable, the consumer will send out \nthe dismiss sessionless signal on its own.\n\n\nNotification Interface\n\n\nThe Notification interface is announced such that when a \ndevice scans the network, it can find all producer devices.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Notification\n\n\n1\n\n\nno\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\n\n\nSignals\n\n\n\n\n\n\n\n\nSignal name\n\n\nParameters\n\n\nSessionless\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nName\n / \nSignature\n\n\n\n\n\n\n\n\n\n\nNotify\n\n\n(listed below)\n\n\nyes\n\n\nAllJoyn signal carrying notification message.\n\n\n\n\n\n\n\n\nnotifMsg / q\n\n\nSee \nData types\n\n\n\n\n\n\n\n\n\n\nData types\n\n\n\n\n\n\n\n\nSignature\n\n\nDefinition\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnotificationMsg\n\n\nversion\n\n\nshort\n\n\nVersion of the Notification protocol.\n\n\n\n\n\n\n\n\nmsgId\n\n\ninteger\n\n\nUnique identification assigned to the notification message by the Notification service framework.\n\n\n\n\n\n\n\n\nmsgType\n\n\nshort\n\n\nType of notification message.\n\n\n\n\n\n\n\n\n\n\n\n\n* 0 - Emergency\n\n\n\n\n\n\n\n\n\n\n\n\n* 1 - Warning\n\n\n\n\n\n\n\n\n\n\n\n\n* 2 - Information\n\n\n\n\n\n\n\n\ndeviceId\n\n\nstring\n\n\nGlobally unique identifier for a given AllJoyn-enabled device.\n\n\n\n\n\n\n\n\ndeviceName\n\n\nstring\n\n\nName for a given AllJoyn-enabled device.\n\n\n\n\n\n\n\n\nappId\n\n\narray of bytes\n\n\nGlobally unique identifier for a given AllJoyn application.\n\n\n\n\n\n\n\n\nappName\n\n\nstring\n\n\nName for a given AllJoyn-enabled device.\n\n\n\n\n\n\n\n\nList\n\n\nattributes\n\n\nSet of attribute and value pair. This is used to hold optional fields in the notification message payload. See \nAttributes\n.\n\n\n\n\n\n\n\n\nList\n\n\ncustomAttributes\n\n\nSet of attribute and value pair. This can be used by the OEMs to add OEM-specific fields to the notification message.\n\n\n\n\n\n\nlangText\n\n\nlangTag\n\n\nstring\n\n\nLanguage associated with the notification text. This is set as per RFC 5646.\n\n\n\n\n\n\n\n\ntext\n\n\nstring\n\n\nNotification message text in UTF-8 character encoding.\n\n\n\n\n\n\nattributes\n\n\nattrName\n\n\nstring\n\n\nName of the attribute.\n\n\n\n\n\n\n\n\nattrValue\n\n\nvariant\n\n\nValue of the attribute.\n\n\n\n\n\n\ncustomAttributes\n\n\nattrName\n\n\nstring\n\n\nName of the attribute.\n\n\n\n\n\n\n\n\nattrValue\n\n\nvariant\n\n\nValue of the attribute.\n\n\n\n\n\n\n\n\nNOTE: If the richIconUrl, richAudioUrl, richIconObjectPath, \nrichAudioObjectPath, or respObjectPath fields were specified \nby the producer app for a notification message, the Notification \nservice framework sends this information as attributes in the \nattributes field, as per \nAttributes\n.\n\n\nAttributes\n\n\n\n\n\n\n\n\nAttribute\n\n\nValues\n\n\n\n\n\n\n\n\n\n\nRich Notification Url\n\n\n* attrName=0\n\n\n\n\n\n\n\n\n* attrValue=\n\n\n\n\n\n\n\n\n* variant signature=s\n\n\n\n\n\n\n\n\n* value=\n\n\n\n\n\n\nRich Notification Audio Url\n\n\n* attrName=1\n\n\n\n\n\n\n\n\n* attrValue=\n\n\n\n\n\n\n\n\n* variant signature=a{ss}\n\n\n\n\n\n\n\n\n* value=List\n\n\n\n\n\n\nRich Notification Icon Object Path\n\n\n* attrName=2\n\n\n\n\n\n\n\n\n* attrValue=\n\n\n\n\n\n\n\n\n* variant signature=o\n\n\n\n\n\n\n\n\n* value=\n\n\n\n\n\n\nRich Notification Audio Object Path\n\n\n* attrName=3\n\n\n\n\n\n\n\n\n* attrValue=\n\n\n\n\n\n\n\n\n* variant signature=o\n\n\n\n\n\n\n\n\n* value=\n\n\n\n\n\n\nResponse Object Path\n\n\n* attrName=4\n\n\n\n\n\n\n\n\n* attrValue=\n\n\n\n\n\n\n\n\n* variant signature=o\n\n\n\n\n\n\n\n\n* value=\n\n\n\n\n\n\nOriginal Sender\n\n\n* attrName=5\n\n\n\n\n\n\n\n\n* attrValue=\n\n\n\n\n\n\n\n\n* variant signature=s\n\n\n\n\n\n\n\n\n* value=\n\n\n\n\n\n\n\n\nIntrospection XML\n\n\nThe following XML provides the Notification interface introspection XML.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n ?\n\n\nnode xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n      xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n   \ninterface name=\norg.alljoyn.Notification\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nsignal name=\nnotify\n\n         \narg name=\nversion\n type=\nq\n/\n\n         \narg name=\nmsgId\n type=\ni\n/\n\n         \narg name=\nmsgType\n type=\nq\n/\n\n         \narg name=\ndeviceId\n type=\ns\n/\n\n         \narg name=\ndeviceName\n type=\ns\n/\n\n         \narg name=\nappId\n type=\nay\n/\n\n         \narg name=\nappName\n type=\ns\n/\n\n         \narg name=\nattributes\n type=\na{iv}\n/\n\n         \narg name=\ncustomAttributes\n type=\na{ss}\n/\n\n         \narg name=\nlangText\n type=\na(ss)\n/\n\n      \n/signal\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nNotification Producer Interface\n\n\nThe Notification Producer interface is announced such that, \nwhen a device scans the network, it can find all producer devices.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Notification.Producer\n\n\n1\n\n\nno\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\n\nMethod name\n\n\nParameters\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nName\n / \nData type\n\n\n\n\n\n\n\n\nDismiss\n\n\nmsgId / integer\n\n\nA way to notify the producer that a notification was dismissed.\n\n\n\n\n\n\n\n\nIntrospection XML\n\n\nThe following XML provides the Notification Producer interface introspection XML.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n ?\n\n\nnode xsi:noNamespaceSchemaLocation=\nhttps://www.alljoyn.org/schemas/introspect.xsd\n\n      xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n   \ninterface name=\norg.alljoyn.Notification.Producer\n\n      \nmethod name=\nDismiss\n\n         \narg name=\nmsgId\n type=\ni\n direction=\nin\n/\n\n      \n/method\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nDismisser Interface\n\n\nThe Dismiss sessionless signals are sent to notify other \nconsumers on the proximal network that a notification has \nbeen dismissed.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Notification.Dismisser\n\n\n1\n\n\nno\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\n\n\nSignals\n\n\n\n\n\n\n\n\nSignal name\n\n\nParameters\n\n\nSessionless\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nName\n / \nSignature\n\n\n\n\n\n\n\n\n\n\nDismiss\n\n\n(listed below)\n\n\nyes\n\n\nA way to notify consumers that the notification has been dismissed.\n\n\n\n\n\n\n\n\nmsgId / i\n\n\n\n\n\n\n\n\n\n\n\n\nappId / array of bytes\n\n\n\n\n\n\n\n\n\n\n\n\nIntrospect XML\n\n\nThe following XML provides the Notification Dismisser interface introspection XML.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n ?\n\n\nnode xsi:noNamespaceSchemaLocation=\nhttps://www.alljoyn.org/schemas/introspect.xsd\n\n      xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n   \ninterface name=\norg.alljoyn.Notification.Dismisser\n\n      \nsignal name=\nDismiss\n\n         \narg name=\nmsgId\n type=\ni\n direction=\nin\n/\n\n         \narg name=\nappId\n type=\nay\n direction=\nin\n/\n\n      \n/signal\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nNotification Service Framework Use Cases\n\n\nDevice connecting within and outside the TTL period\n\n\nFigure 3 illustrates two consumers (television and \ntablet) connecting within the notification message TTL period \nand a third consumer (smartphone) connecting after the TTL period. \nThe first two consumers receive the notification message, the \nthird consumer does not.\n\n\nNOTE: The AllJoyn core block represents the collective AllJoyn \nframework functionality on various producers and consumers.\n\n\n\n\nFigure: Notification message behavior within and outside the TTL period\n\n\nNotification message handling based on message types\n\n\nFigure 4 illustrates how a notification message \noverwrites a notification message of the same type, and how \nnotification messages of different types can coexist using \nthe AllJoyn framework.\n\n\nNOTE: The AllJoyn core block represents the collective AllJoyn \nframework functionality on various producers and consumers.\n\n\n\n\nFigure: Notification message handling based on message type\n\n\nNotifications dismissed when producer is on network\n\n\nFigure 5 illustrates the flow of dismissing a \nnotification from the consumer until it is received by other \nconsumers on the network.\n\n\n\n\nFigure: Notifications that are dismissed when the producer is on the network",
            "title": "Interface 14 02"
        },
        {
            "location": "/learn/base-services/notification/interface-14-02/#notification-interface-definition-1402",
            "text": "Warning: This is not the latest interface definition.  Go here for latest Notification Interface Definition",
            "title": "Notification Interface Definition - 14.02"
        },
        {
            "location": "/learn/base-services/notification/interface-14-02/#introduction",
            "text": "Purpose  This document provides the specification for the AllJoyn  \nNotification interface. This interface is used by an AllJoyn \napplication to send events or state update notifications to\nother devices connected to an end user's home network, such \nas a Wi-Fi network.  Scope  This document is targeted to the developers for AllJoyn applications.  Release history     Release version  What changed      Pre-14.02  Notification interface version 1 was added.    14.02  The following interfaces were added:     * Dismisser interface version 1     * Producer interface version 1     References  Except for supporting information, the following are reference \ndocuments found on the AllSeen Alliance web site's Docs/Downloads section.   AllJoyn  Framework Tutorial  Introduction to AllJoyn  Thin Library  AllJoyn Data Type Signature  AllJoyn  About Feature Interface Specification   Acronyms and terms     Term  Definition      AllJoyn device  An entity which has an AllJoyn application installed to send or receive notifications using the Notification service framework interface.    Consumer  Device that receives the notification and has a way to notify user such as a mobile phone or TV.    Notification message  A message sent by a producer specifying details of the notification including any notification text to be displayed to the user.    Notification service framework  Software layer that enables devices to send or receive human-consumable notifications.    Producer  Device that generates and sends the notification to a device such as a household appliance.    Sessionless signal  A broadcast AllJoyn signal which is received by all devices listening on the end user's home network (such as the Wi-Fi network). The Sessionless signal sessionless signals are broadcast on the network until an associated time-to-live (TTL) value expires. The Notification service framework sends notification messages as sessionless signals over the Wi-Fi network.",
            "title": "Introduction"
        },
        {
            "location": "/learn/base-services/notification/interface-14-02/#overview",
            "text": "This document captures the design for the Notification service framework, \nwhich is a software layer that enables AllJoyn  devices \nto send notifications to other AllJoyn devices. These devices \nare categorized as producers and consumers. Producers produce \nand send notifications, while consumers consume and display \nthese notifications. An end user's home (Wi-Fi) network can \nhave multiple producers connected and generating notification \nmessages, as well as multiple consumers connected and consuming \nthese messages.  The Notification service framework design supports text \nnotification payload as well as rich notification media \n(icon and audio). For rich media, the notification message \npayload can include URL links or AllJoyn object path references \nto rich notification media. The consumer app receiving the \nnotification message will fetch the rich notification media \nfrom the object path or the producer device.  The Notification service framework uses the AllJoyn framework \nsessionless signal to deliver notification messages. The \nNotification service framework exposes the Notification Service \nAPI for application developers to deliver and receive notification \nmessages. The device OEM uses the Notification service framework \nProducer API to send notification messages. The Notification \nservice framework sends these notification messages over the \nAllJoyn sessionless signal transport mechanism and makes them \navailable to consumer devices listening for sessionless signals. \nThe consumer running the Notification service framework registers \nwith the AllJoyn framework to receive notification messages. \nThe application developer for the consumer device uses the \nNotification service framework Consumer API to register and \nreceive notifications from any producer that is sending \nnotification on the Wi-Fi network.  Architecture  The Notification service framework implements the Notification \ninterface which is the over-the-wire interface to deliver messages \nfrom producers to consumers. Application developers making use of \nthe Notification service framework implement against the\nNotification service framework APIs (producer and consumer side). \nThey do not implement the Notification interface.  Figure 1 illustrates the Notification service \nframework API and Notification interface on producers and consumers.   Figure: Notification service framework architecture within the AllJoyn framework",
            "title": "Overview"
        },
        {
            "location": "/learn/base-services/notification/interface-14-02/#typical-call-flow",
            "text": "Figure 2 illustrates a typical Notification service \nframework call flow with a single producer app generating a notification \nmessage. The message is then acquired by two consumer apps on the \nAllJoyn network.   Figure: Typical Notification service framework call flow  The AllJoyn framework on the producer device does a sessionless \nsignal broadcast for the notification message. This is received \nby the AllJoyn framework on the consumer devices. The AllJoyn \nframework then fetches the notification message over unicast \nsession from the producer AllJoyn core and delivers to the \nconsumer application.",
            "title": "Typical call flow"
        },
        {
            "location": "/learn/base-services/notification/interface-14-02/#specification",
            "text": "Notification messages  The notification message comprises a set of fields including \nmessage type and message TTL. These notification fields are \nspecified by the producer app when sending notification message \nas part of Notification service framework Producer API.  Message type and TTL fields  The message type defines the type of notification messages \n(emergency, warning and information). Multiple types of \nnotification messages can be sent at the same time by a producer. \nThe message TTL defines the validity period of the notification message.\nNotification messages can be received by consumers that connect \nduring the defined message TTL value.  Messages with the same message type will overwrite each other \non the producer, so a consumer that connects to the network \nafter the notification was sent will receive only the last \nof each message type.  Notification message behavior  The following behavior is supported using the Notification \nservice framework.   If another notification message of the same message type \nis sent by a producer app within the TTL period, the new message \noverwrites the existing message.  If a consumer connects to the network after the TTL period \nexpires, that consumer will not receive the message. For example, \nwhen a consumer such as a mobile phone is on the home network \nand the end user leaves the home; the consumer is no longer on \nthe home network. The mobile phone will not receive notification \nmessages when it reacquires the home network and the TTL of \nthose notifications have expired.   NOTE: The value is only used for message validity on the producer \ndevice. The TTL field is not sent as part of the notification \nmessage payload data over the end user's home network.  See  Notification Service Framework Use Cases  \nfor use case scenarios related to notification message behavior.  Dismissing a notification  The dismiss notification is an option for consumers that have \nreceived the notification to let the producer know that this \nnotification has been seen and there is no need to continue \nsending. It also lets other consumers know that the notification \ncan be removed from the user display.  When a consumer attempts to dismiss a notification, the service \nframework creates a session with the producer using the original \nsender field sent in the notification.  Using the original sender field confirms that the notification \nis received by the actual producer and not the super agent in \ncase the consumer received the notification from the super agent.  The producer will then send out a dismiss sessionless signal \nto notify the rest of the consumers in the network that this \nnotification has been dismissed.  If the producer is not reachable, the consumer will send out \nthe dismiss sessionless signal on its own.",
            "title": "Specification"
        },
        {
            "location": "/learn/base-services/notification/interface-14-02/#notification-interface",
            "text": "The Notification interface is announced such that when a \ndevice scans the network, it can find all producer devices.  Interface name     Interface name  Version  Secured      org.alljoyn.Notification  1  no     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number     Signals     Signal name  Parameters  Sessionless  Description       Name  /  Signature      Notify  (listed below)  yes  AllJoyn signal carrying notification message.     notifMsg / q  See  Data types      Data types     Signature  Definition  Signature  Description      notificationMsg  version  short  Version of the Notification protocol.     msgId  integer  Unique identification assigned to the notification message by the Notification service framework.     msgType  short  Type of notification message.       * 0 - Emergency       * 1 - Warning       * 2 - Information     deviceId  string  Globally unique identifier for a given AllJoyn-enabled device.     deviceName  string  Name for a given AllJoyn-enabled device.     appId  array of bytes  Globally unique identifier for a given AllJoyn application.     appName  string  Name for a given AllJoyn-enabled device.     List  attributes  Set of attribute and value pair. This is used to hold optional fields in the notification message payload. See  Attributes .     List  customAttributes  Set of attribute and value pair. This can be used by the OEMs to add OEM-specific fields to the notification message.    langText  langTag  string  Language associated with the notification text. This is set as per RFC 5646.     text  string  Notification message text in UTF-8 character encoding.    attributes  attrName  string  Name of the attribute.     attrValue  variant  Value of the attribute.    customAttributes  attrName  string  Name of the attribute.     attrValue  variant  Value of the attribute.     NOTE: If the richIconUrl, richAudioUrl, richIconObjectPath, \nrichAudioObjectPath, or respObjectPath fields were specified \nby the producer app for a notification message, the Notification \nservice framework sends this information as attributes in the \nattributes field, as per  Attributes .  Attributes     Attribute  Values      Rich Notification Url  * attrName=0     * attrValue=     * variant signature=s     * value=    Rich Notification Audio Url  * attrName=1     * attrValue=     * variant signature=a{ss}     * value=List    Rich Notification Icon Object Path  * attrName=2     * attrValue=     * variant signature=o     * value=    Rich Notification Audio Object Path  * attrName=3     * attrValue=     * variant signature=o     * value=    Response Object Path  * attrName=4     * attrValue=     * variant signature=o     * value=    Original Sender  * attrName=5     * attrValue=     * variant signature=s     * value=     Introspection XML  The following XML provides the Notification interface introspection XML.  ?xml version= 1.0  encoding= UTF-8  ?  node xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n      xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    interface name= org.alljoyn.Notification \n       property name= Version  type= q  access= read / \n       signal name= notify \n          arg name= version  type= q / \n          arg name= msgId  type= i / \n          arg name= msgType  type= q / \n          arg name= deviceId  type= s / \n          arg name= deviceName  type= s / \n          arg name= appId  type= ay / \n          arg name= appName  type= s / \n          arg name= attributes  type= a{iv} / \n          arg name= customAttributes  type= a{ss} / \n          arg name= langText  type= a(ss) / \n       /signal \n    /interface  /node",
            "title": "Notification Interface"
        },
        {
            "location": "/learn/base-services/notification/interface-14-02/#notification-producer-interface",
            "text": "The Notification Producer interface is announced such that, \nwhen a device scans the network, it can find all producer devices.  Interface name     Interface name  Version  Secured      org.alljoyn.Notification.Producer  1  no     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number     Methods     Method name  Parameters  Description       Name  /  Data type     Dismiss  msgId / integer  A way to notify the producer that a notification was dismissed.     Introspection XML  The following XML provides the Notification Producer interface introspection XML.  ?xml version= 1.0  encoding= UTF-8  ?  node xsi:noNamespaceSchemaLocation= https://www.alljoyn.org/schemas/introspect.xsd \n      xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    interface name= org.alljoyn.Notification.Producer \n       method name= Dismiss \n          arg name= msgId  type= i  direction= in / \n       /method \n       property name= Version  type= q  access= read / \n    /interface  /node",
            "title": "Notification Producer Interface"
        },
        {
            "location": "/learn/base-services/notification/interface-14-02/#dismisser-interface",
            "text": "The Dismiss sessionless signals are sent to notify other \nconsumers on the proximal network that a notification has \nbeen dismissed.  Interface name     Interface name  Version  Secured      org.alljoyn.Notification.Dismisser  1  no     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number     Signals     Signal name  Parameters  Sessionless  Description       Name  /  Signature      Dismiss  (listed below)  yes  A way to notify consumers that the notification has been dismissed.     msgId / i       appId / array of bytes       Introspect XML  The following XML provides the Notification Dismisser interface introspection XML.  ?xml version= 1.0  encoding= UTF-8  ?  node xsi:noNamespaceSchemaLocation= https://www.alljoyn.org/schemas/introspect.xsd \n      xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    interface name= org.alljoyn.Notification.Dismisser \n       signal name= Dismiss \n          arg name= msgId  type= i  direction= in / \n          arg name= appId  type= ay  direction= in / \n       /signal \n       property name= Version  type= q  access= read / \n    /interface  /node",
            "title": "Dismisser Interface"
        },
        {
            "location": "/learn/base-services/notification/interface-14-02/#notification-service-framework-use-cases",
            "text": "Device connecting within and outside the TTL period  Figure 3 illustrates two consumers (television and \ntablet) connecting within the notification message TTL period \nand a third consumer (smartphone) connecting after the TTL period. \nThe first two consumers receive the notification message, the \nthird consumer does not.  NOTE: The AllJoyn core block represents the collective AllJoyn \nframework functionality on various producers and consumers.   Figure: Notification message behavior within and outside the TTL period  Notification message handling based on message types  Figure 4 illustrates how a notification message \noverwrites a notification message of the same type, and how \nnotification messages of different types can coexist using \nthe AllJoyn framework.  NOTE: The AllJoyn core block represents the collective AllJoyn \nframework functionality on various producers and consumers.   Figure: Notification message handling based on message type  Notifications dismissed when producer is on network  Figure 5 illustrates the flow of dismissing a \nnotification from the consumer until it is received by other \nconsumers on the network.   Figure: Notifications that are dismissed when the producer is on the network",
            "title": "Notification Service Framework Use Cases"
        },
        {
            "location": "/learn/base-services/notification/interface/",
            "text": "Notification Interface Definition\n\n\nRelease History\n\n\nTo access a previous version of this document, click the release version link below.\n\n\n\n\n\n\n\n\nRelease version\n\n\nDate\n\n\nWhat changed\n\n\n\n\n\n\n\n\n\n\nPre-14.02\n\n\nN/A\n\n\nNotification interface version 1 was added.\n\n\n\n\n\n\n14.02\n\n\n2/28/2014\n\n\nThe following interfaces were added:\nDismisser interface version 1\nProducer interface version 1\n\n\n\n\n\n\n14.06\n\n\n6/30/2014\n\n\nNo updates\n\n\n\n\n\n\n14.06 Update 1\n\n\n9/29/2014\n\n\nUpdated the document title (changed from Specification to Definition)\nAdded the release version number to the document title for version tracking.\nAdded a note in the Definition Overview chapter to address the AllSeen Alliance Compliance and Certification program.\nAdded a Mandatory column for method and signal parameters to support the AllSeen Alliance Compliance and Certification program.\n\n\n\n\n\n\n14.12\n\n\n12/17/2014\n\n\nCleanup to make requirements for methods and signals more clear.\n\n\n\n\n\n\n\n\nDefinition Overview\n\n\nThe AllJoyn\n Notification service framework is a software layer that \nenables AllJoyn devices to send notifications to other \nAllJoyn devices. These devices are categorized as producers \nand consumers. Producers produce and send notifications, while \nconsumers consume and display these notifications. An end user's \nhome (Wi-Fi) network can have multiple producers connected and \ngenerating notification messages, as well as multiple consumers \nconnected and consuming these messages.\n\n\nThe Notification service framework design supports text \nnotification payload as well as rich notification media \n(icon and audio). For rich media, the notification message \npayload can include URL links or AllJoyn object path references \nto rich notification media. The consumer app receiving the \nnotification message will fetch the rich notification media \nfrom the object path or the producer device.\n\n\nThe Notification service framework uses the AllJoyn framework \nsessionless signal to deliver notification messages. The \nNotification service framework exposes the Notification Service \nAPI for application developers to deliver and receive notification \nmessages. The device OEM uses the Notification service framework \nProducer API to send notification messages. The Notification \nservice framework sends these notification messages over the \nAllJoyn sessionless signal transport mechanism and makes them \navailable to consumer devices listening for sessionless signals. \nThe consumer running the Notification service framework registers \nwith the AllJoyn framework to receive notification messages. \nThe application developer for the consumer device uses the \nNotification service framework Consumer API to register and \nreceive notifications from any producer that is sending \nnotification on the Wi-Fi network.\n\n\nNOTE:\n All methods and signals are considered mandatory to \nsupport the AllSeen Alliance Compliance and Certification program. \n\n\nArchitecture\n\n\nThe Notification service framework implements the Notification \ninterface which is the over-the-wire interface to deliver messages \nfrom producers to consumers. Application developers making use of \nthe Notification service framework implement against the\nNotification service framework APIs (producer and consumer side). \nThey do not implement the Notification interface.\n\n\nThe following figure illustrates the Notification service \nframework API and Notification interface on producers and consumers.\n\n\n\n\nFigure:\n Notification service framework architecture within the AllJoyn framework\n\n\nTypical call flow\n\n\nThe following figure illustrates a typical Notification service \nframework call flow with a single producer app generating a notification \nmessage. The message is then acquired by two consumer apps on the \nAllJoyn network.\n\n\n\n\nFigure:\n Typical Notification service framework call flow\n\n\nThe AllJoyn framework on the producer device does a sessionless \nsignal broadcast for the notification message. This is received \nby the AllJoyn framework on the consumer devices. The AllJoyn \nframework then fetches the notification message over unicast \nsession from the producer AllJoyn core and delivers to the \nconsumer application.\n\n\nSpecification\n\n\nNotification messages\n\n\nThe notification message comprises a set of fields including \nmessage type and message TTL. These notification fields are \nspecified by the producer app when sending notification message \nas part of Notification service framework Producer API.\n\n\nMessage type and TTL fields\n\n\nThe message type defines the type of notification messages \n(emergency, warning and information). Multiple types of \nnotification messages can be sent at the same time by a producer. \nThe message TTL defines the validity period of the notification message.\nNotification messages can be received by consumers that connect \nduring the defined message TTL value.\n\n\nMessages with the same message type will overwrite each other \non the producer, so a consumer that connects to the network \nafter the notification was sent will receive only the last \nof each message type.\n\n\nNotification message behavior\n\n\nThe following behavior is supported using the Notification \nservice framework.\n\n\n\n\nIf another notification message of the same message type \nis sent by a producer app within the TTL period, the new message \noverwrites the existing message.\n\n\nIf a consumer connects to the network after the TTL period \nexpires, that consumer will not receive the message. For example, \nwhen a consumer such as a mobile phone is on the home network \nand the end user leaves the home; the consumer is no longer on \nthe home network. The mobile phone will not receive notification \nmessages when it reacquires the home network and the TTL of \nthose notifications have expired.\n\n\n\n\nNOTE:\n The value is only used for message validity on the producer \ndevice. The TTL field is not sent as part of the notification \nmessage payload data over the end user's home network.\n\n\nSee \nNotification Service Framework Use Cases\n \nfor use case scenarios related to notification message behavior.\n\n\nDismissing a notification\n\n\nThe dismiss notification is an option for consumers that have \nreceived the notification to let the producer know that this \nnotification has been seen and there is no need to continue \nsending. It also lets other consumers know that the notification \ncan be removed from the user display.\n\n\nWhen a consumer attempts to dismiss a notification, the service \nframework creates a session with the producer using the original \nsender field sent in the notification.\n\n\nUsing the original sender field confirms that the notification \nis received by the actual producer and not the super agent in \ncase the consumer received the notification from the super agent.\n\n\nThe producer will then send out a dismiss sessionless signal \nto notify the rest of the consumers in the network that this \nnotification has been dismissed.\n\n\nIf the producer is not reachable, the consumer will send out \nthe dismiss sessionless signal on its own.\n\n\nNotification Interface\n\n\nThe Notification interface is announced such that when a \ndevice scans the network, it can find all producer devices.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Notification\n\n\n1\n\n\nyes\n\n\n/emergency\n/warning\n/info\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\nNo methods are exposed by this interface.\n\n\nSignals\n\n\nnotify('qiqssaysa{ss}a{iv}a(ss)')\n\n\nNotify signal is a Sessionless signal.\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nversion\n\n\nq\n\n\npositive\n\n\nVersion of the Notification protocol.\n\n\n\n\n\n\n1\n\n\nmsgId\n\n\ni\n\n\npositive\n\n\nUnique identification assigned to the notification message by the Notification service framework.\n\n\n\n\n\n\n2\n\n\nmsgType\n\n\nq\n\n\ninteger\n\n\nType of notification message.\n0 - Emergency\n1 - Warning\n2 - Information\n\n\n\n\n\n\n3\n\n\ndeviceId\n\n\ns\n\n\npositive\n\n\nGlobally unique identifier for a given AllJoyn-enabled device.\n\n\n\n\n\n\n4\n\n\ndeviceName\n\n\ns\n\n\npositive\n\n\nName for a given AllJoyn-enabled device.\n\n\n\n\n\n\n5\n\n\nAppId\n\n\nay\n\n\npositive\n\n\nGlobally unique identifier (GUID) for a given AllJoyn application.\n\n\n\n\n\n\n6\n\n\nappName\n\n\ns\n\n\nstring\n\n\nName for a given AllJoyn-enabled device.\n\n\n\n\n\n\n7\n\n\nattributes\n\n\na{iv}\n\n\npositive\n\n\nSet of attribute and value pair. This is used to hold optional fields in the notification message payload. See \nAttributes\n.\n\n\n\n\n\n\n8\n\n\ncustomAttributes\n\n\na{ss}\n\n\npositive\n\n\nSet of attribute and value pair. This can be used by the OEMs to add OEM-specific fields to the notification message.\n\n\n\n\n\n\n9\n\n\nlangText\n\n\na{ss}\n\n\nstring\n\n\nLanguage-specific notification text.\n\n\n\n\n\n\n\n\n Description\n\n\nAllJoyn signal-carrying notification message.\n\n\nData types\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnotificationMsg\n\n\nversion\n\n\nshort\n\n\nVersion of the Notification protocol.\n\n\n\n\n\n\n\n\nmsgId\n\n\ninteger\n\n\nUnique identification assigned to the notification message by the Notification service framework.\n\n\n\n\n\n\n\n\nmsgType\n\n\nshort\n\n\nType of notification message.\n0 - Emergency\n1 - Warning\n2 - Information\n\n\n\n\n\n\n\n\ndeviceId\n\n\nstring\n\n\nGlobally unique identifier for a given AllJoyn-enabled device.\n\n\n\n\n\n\n\n\ndeviceName\n\n\nstring\n\n\nName for a given AllJoyn-enabled device.\n\n\n\n\n\n\n\n\nappId\n\n\narray of bytes\n\n\nGlobally unique identifier for a given AllJoyn application.\n\n\n\n\n\n\n\n\nappName\n\n\nstring\n\n\nName for a given AllJoyn-enabled device.\n\n\n\n\n\n\n\n\nList\n\n\nattributes\n\n\nSet of attribute and value pair. This is used to hold optional fields in the notification message payload. See \nAttributes\n.\n\n\n\n\n\n\n\n\nList\n\n\ncustomAttributes\n\n\nSet of attribute and value pair. This can be used by the OEMs to add OEM-specific fields to the notification message.\n\n\n\n\n\n\nlangText\n\n\nlangTag\n\n\nstring\n\n\nLanguage associated with the notification text. This is set as per RFC 5646.\n\n\n\n\n\n\n\n\ntext\n\n\nstring\n\n\nNotification message text in UTF-8 character encoding.\n\n\n\n\n\n\nattributes\n\n\nattrName\n\n\nstring\n\n\nName of the attribute.\n\n\n\n\n\n\n\n\nattrValue\n\n\nvariant\n\n\nValue of the attribute.\n\n\n\n\n\n\ncustomAttributes\n\n\nattrName\n\n\nstring\n\n\nName of the attribute.\n\n\n\n\n\n\n\n\nattrValue\n\n\nvariant\n\n\nValue of the attribute.\n\n\n\n\n\n\n\n\nNOTE:\n If the richIconUrl, richAudioUrl, richIconObjectPath, \nrichAudioObjectPath, or respObjectPath fields were specified \nby the producer app for a notification message, the Notification \nservice framework sends this information as attributes in the \nattributes field, as per \nAttributes\n.\n\n\nAttributes\n\n\n\n\n\n\n\n\nAttribute\n\n\nValues\n\n\n\n\n\n\n\n\n\n\nRich Notification Url\n\n\nattrName=0\nattrValue= \nvariant signature=s\nvalue=\nIcon URL\n\n\n\n\n\n\nRich Notification Audio Url\n\n\nattrName=1\nattrValue= \nvariant signature=a{ss}\nvalue=List\nlangTag, Audio URL\n\n\n\n\n\n\nRich Notification Icon Object Path\n\n\nattrName=2 \nattrValue= (values detailed below)\n\n\n\n\n\n\nRich Notification Audio Object Path\n\n\nattrName=3\nattrValue= (values detailed below)\n\n\n\n\n\n\nResponse Object Path\n\n\nattrName=4\nattrValue= (values detailed below) \n\n\n\n\n\n\nOriginal Sender\n\n\nattrName=5\nattrValue= (values detailed below) \n\n\n\n\n\n\n\n\nattrValue information\n\n\n\n\n\n\n\n\nAttribute name\n\n\nValues\n\n\n\n\n\n\n\n\n\n\nRich Notification Icon Object Path\n\n\nvariant signature=o\nvalue=\nRich notification icon object path\n\n\n\n\n\n\nRich Notification Audio Object Path\n\n\nvariant signature=o\nvalue=\nRich notification audio object path\n\n\n\n\n\n\nResponse Object Path\n\n\nvariant signature=o\nvalue=\nResponse object path\n\n\n\n\n\n\nOriginal Sender\n\n\nvariant signature=s\nvalue=\nProducer bus name\n\n\n\n\n\n\n\n\nIntrospection XML\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n ?\n\n\nnode xsi:noNamespaceSchemaLocation=\nhttps://www.allseenalliance.org/schemas/introspect.xsd\n\n      xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n   \ninterface name=\norg.alljoyn.Notification\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nsignal name=\nnotify\n\n         \narg name=\nversion\n type=\nq\n/\n\n         \narg name=\nmsgId\n type=\ni\n/\n\n         \narg name=\nmsgType\n type=\nq\n/\n\n         \narg name=\ndeviceId\n type=\ns\n/\n\n         \narg name=\ndeviceName\n type=\ns\n/\n\n         \narg name=\nappId\n type=\nay\n/\n\n         \narg name=\nappName\n type=\ns\n/\n\n         \narg name=\nattributes\n type=\na{iv}\n/\n\n         \narg name=\ncustomAttributes\n type=\na{ss}\n/\n\n         \narg name=\nlangText\n type=\na(ss)\n/\n\n      \n/signal\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nProducer Interface\n\n\nThe Notification Producer interface is announced such that, \nwhen a device scans the network, it can find all producer devices.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Notification.Producer\n\n\n1\n\n\nno\n\n\n/notificationProducer\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\nThe following methods are exposed by the object that implements \nthe \norg.alljoyn.Notification.Producer\n interface.\n\n\nDismiss('i')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nmsgId\n\n\ninteger\n\n\nN/A\n\n\nA way to notify the producer that a notification was dismissed.\n\n\n\n\n\n\n\n\nReply arguments\n\n\nNone.\n\n\nDescription\n\n\nThe consumer asks the producer to send a dismiss signal and \nstop advertising a given notification.\n\n\nIntrospection XML\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n ?\n\n\nnode xsi:noNamespaceSchemaLocation=\nhttps://www.alljoyn.org/schemas/introspect.xsd\n\n      xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n   \ninterface name=\norg.alljoyn.Notification.Producer\n\n      \nmethod name=\nDismiss\n\n         \narg name=\nmsgId\n type=\ni\n direction=\nin\n/\n\n      \n/method\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nDismisser Interface\n\n\nThe Dismiss sessionless signals are sent to notify other \nconsumers on the proximal network that a notification has \nbeen dismissed.\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Notification.Dismisser\n\n\n1\n\n\nno\n\n\n/notification/Dismisser\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\n\n\nSignals\n\n\nDismiss('iay')\n\n\nDismiss signal is a Sessionless signal.\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nmsgId\n\n\ni\n\n\npositive\n\n\n\n\n\n\n\n\n1\n\n\nappId\n\n\nay\n\n\npositive\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nNotifies consumers that the notification has been dismissed.\n\n\nIntrospect XML\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n ?\n\n\nnode xsi:noNamespaceSchemaLocation=\nhttps://www.alljoyn.org/schemas/introspect.xsd\n\n     xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n   \ninterface name=\norg.alljoyn.Notification.Dismisser\n\n      \nsignal name=\nDismiss\n\n         \narg name=\nmsgId\n type=\ni\n direction=\nin\n/\n\n         \narg name=\nappId\n type=\nay\n direction=\nin\n/\n\n      \n/signal\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nNotification Service Framework Use Cases\n\n\nDevice connecting within and outside the TTL period\n\n\nThe following figure illustrates two consumers (television and \ntablet) connecting within the notification message TTL period \nand a third consumer (smartphone) connecting after the TTL period. \nThe first two consumers receive the notification message, the \nthird consumer does not.\n\n\nNOTE:\n The AllJoyn core block represents the collective AllJoyn \nframework functionality on various producers and consumers.\n\n\n\n\nFigure:\n Notification message behavior within and outside the TTL period\n\n\nNotification message handling based on message types\n\n\nThe following figure illustrates how a notification message \noverwrites a notification message of the same type, and how \nnotification messages of different types can coexist using \nthe AllJoyn framework.\n\n\nNOTE:\n The AllJoyn core block represents the collective AllJoyn \nframework functionality on various producers and consumers.\n\n\n\n\nFigure:\n Notification message handling based on message type\n\n\nNotifications dismissed when producer is on network\n\n\nThe following figure illustrates the flow of dismissing a \nnotification from the consumer until it is received by other \nconsumers on the network.\n\n\n\n\nFigure:\n Notifications that are dismissed when the producer is on the network",
            "title": "Interface"
        },
        {
            "location": "/learn/base-services/notification/interface/#notification-interface-definition",
            "text": "",
            "title": "Notification Interface Definition"
        },
        {
            "location": "/learn/base-services/notification/interface/#release-history",
            "text": "To access a previous version of this document, click the release version link below.     Release version  Date  What changed      Pre-14.02  N/A  Notification interface version 1 was added.    14.02  2/28/2014  The following interfaces were added: Dismisser interface version 1 Producer interface version 1    14.06  6/30/2014  No updates    14.06 Update 1  9/29/2014  Updated the document title (changed from Specification to Definition) Added the release version number to the document title for version tracking. Added a note in the Definition Overview chapter to address the AllSeen Alliance Compliance and Certification program. Added a Mandatory column for method and signal parameters to support the AllSeen Alliance Compliance and Certification program.    14.12  12/17/2014  Cleanup to make requirements for methods and signals more clear.",
            "title": "Release History"
        },
        {
            "location": "/learn/base-services/notification/interface/#definition-overview",
            "text": "The AllJoyn  Notification service framework is a software layer that \nenables AllJoyn devices to send notifications to other \nAllJoyn devices. These devices are categorized as producers \nand consumers. Producers produce and send notifications, while \nconsumers consume and display these notifications. An end user's \nhome (Wi-Fi) network can have multiple producers connected and \ngenerating notification messages, as well as multiple consumers \nconnected and consuming these messages.  The Notification service framework design supports text \nnotification payload as well as rich notification media \n(icon and audio). For rich media, the notification message \npayload can include URL links or AllJoyn object path references \nto rich notification media. The consumer app receiving the \nnotification message will fetch the rich notification media \nfrom the object path or the producer device.  The Notification service framework uses the AllJoyn framework \nsessionless signal to deliver notification messages. The \nNotification service framework exposes the Notification Service \nAPI for application developers to deliver and receive notification \nmessages. The device OEM uses the Notification service framework \nProducer API to send notification messages. The Notification \nservice framework sends these notification messages over the \nAllJoyn sessionless signal transport mechanism and makes them \navailable to consumer devices listening for sessionless signals. \nThe consumer running the Notification service framework registers \nwith the AllJoyn framework to receive notification messages. \nThe application developer for the consumer device uses the \nNotification service framework Consumer API to register and \nreceive notifications from any producer that is sending \nnotification on the Wi-Fi network.  NOTE:  All methods and signals are considered mandatory to \nsupport the AllSeen Alliance Compliance and Certification program.   Architecture  The Notification service framework implements the Notification \ninterface which is the over-the-wire interface to deliver messages \nfrom producers to consumers. Application developers making use of \nthe Notification service framework implement against the\nNotification service framework APIs (producer and consumer side). \nThey do not implement the Notification interface.  The following figure illustrates the Notification service \nframework API and Notification interface on producers and consumers.   Figure:  Notification service framework architecture within the AllJoyn framework",
            "title": "Definition Overview"
        },
        {
            "location": "/learn/base-services/notification/interface/#typical-call-flow",
            "text": "The following figure illustrates a typical Notification service \nframework call flow with a single producer app generating a notification \nmessage. The message is then acquired by two consumer apps on the \nAllJoyn network.   Figure:  Typical Notification service framework call flow  The AllJoyn framework on the producer device does a sessionless \nsignal broadcast for the notification message. This is received \nby the AllJoyn framework on the consumer devices. The AllJoyn \nframework then fetches the notification message over unicast \nsession from the producer AllJoyn core and delivers to the \nconsumer application.",
            "title": "Typical call flow"
        },
        {
            "location": "/learn/base-services/notification/interface/#specification",
            "text": "Notification messages  The notification message comprises a set of fields including \nmessage type and message TTL. These notification fields are \nspecified by the producer app when sending notification message \nas part of Notification service framework Producer API.  Message type and TTL fields  The message type defines the type of notification messages \n(emergency, warning and information). Multiple types of \nnotification messages can be sent at the same time by a producer. \nThe message TTL defines the validity period of the notification message.\nNotification messages can be received by consumers that connect \nduring the defined message TTL value.  Messages with the same message type will overwrite each other \non the producer, so a consumer that connects to the network \nafter the notification was sent will receive only the last \nof each message type.  Notification message behavior  The following behavior is supported using the Notification \nservice framework.   If another notification message of the same message type \nis sent by a producer app within the TTL period, the new message \noverwrites the existing message.  If a consumer connects to the network after the TTL period \nexpires, that consumer will not receive the message. For example, \nwhen a consumer such as a mobile phone is on the home network \nand the end user leaves the home; the consumer is no longer on \nthe home network. The mobile phone will not receive notification \nmessages when it reacquires the home network and the TTL of \nthose notifications have expired.   NOTE:  The value is only used for message validity on the producer \ndevice. The TTL field is not sent as part of the notification \nmessage payload data over the end user's home network.  See  Notification Service Framework Use Cases  \nfor use case scenarios related to notification message behavior.  Dismissing a notification  The dismiss notification is an option for consumers that have \nreceived the notification to let the producer know that this \nnotification has been seen and there is no need to continue \nsending. It also lets other consumers know that the notification \ncan be removed from the user display.  When a consumer attempts to dismiss a notification, the service \nframework creates a session with the producer using the original \nsender field sent in the notification.  Using the original sender field confirms that the notification \nis received by the actual producer and not the super agent in \ncase the consumer received the notification from the super agent.  The producer will then send out a dismiss sessionless signal \nto notify the rest of the consumers in the network that this \nnotification has been dismissed.  If the producer is not reachable, the consumer will send out \nthe dismiss sessionless signal on its own.",
            "title": "Specification"
        },
        {
            "location": "/learn/base-services/notification/interface/#notification-interface",
            "text": "The Notification interface is announced such that when a \ndevice scans the network, it can find all producer devices.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Notification  1  yes  /emergency /warning /info     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number     Methods  No methods are exposed by this interface.  Signals  notify('qiqssaysa{ss}a{iv}a(ss)')  Notify signal is a Sessionless signal.  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  version  q  positive  Version of the Notification protocol.    1  msgId  i  positive  Unique identification assigned to the notification message by the Notification service framework.    2  msgType  q  integer  Type of notification message. 0 - Emergency 1 - Warning 2 - Information    3  deviceId  s  positive  Globally unique identifier for a given AllJoyn-enabled device.    4  deviceName  s  positive  Name for a given AllJoyn-enabled device.    5  AppId  ay  positive  Globally unique identifier (GUID) for a given AllJoyn application.    6  appName  s  string  Name for a given AllJoyn-enabled device.    7  attributes  a{iv}  positive  Set of attribute and value pair. This is used to hold optional fields in the notification message payload. See  Attributes .    8  customAttributes  a{ss}  positive  Set of attribute and value pair. This can be used by the OEMs to add OEM-specific fields to the notification message.    9  langText  a{ss}  string  Language-specific notification text.      Description  AllJoyn signal-carrying notification message.  Data types     Name  Definition  Signature  Description      notificationMsg  version  short  Version of the Notification protocol.     msgId  integer  Unique identification assigned to the notification message by the Notification service framework.     msgType  short  Type of notification message. 0 - Emergency 1 - Warning 2 - Information     deviceId  string  Globally unique identifier for a given AllJoyn-enabled device.     deviceName  string  Name for a given AllJoyn-enabled device.     appId  array of bytes  Globally unique identifier for a given AllJoyn application.     appName  string  Name for a given AllJoyn-enabled device.     List  attributes  Set of attribute and value pair. This is used to hold optional fields in the notification message payload. See  Attributes .     List  customAttributes  Set of attribute and value pair. This can be used by the OEMs to add OEM-specific fields to the notification message.    langText  langTag  string  Language associated with the notification text. This is set as per RFC 5646.     text  string  Notification message text in UTF-8 character encoding.    attributes  attrName  string  Name of the attribute.     attrValue  variant  Value of the attribute.    customAttributes  attrName  string  Name of the attribute.     attrValue  variant  Value of the attribute.     NOTE:  If the richIconUrl, richAudioUrl, richIconObjectPath, \nrichAudioObjectPath, or respObjectPath fields were specified \nby the producer app for a notification message, the Notification \nservice framework sends this information as attributes in the \nattributes field, as per  Attributes .  Attributes     Attribute  Values      Rich Notification Url  attrName=0 attrValue=  variant signature=s value= Icon URL    Rich Notification Audio Url  attrName=1 attrValue=  variant signature=a{ss} value=List langTag, Audio URL    Rich Notification Icon Object Path  attrName=2  attrValue= (values detailed below)    Rich Notification Audio Object Path  attrName=3 attrValue= (values detailed below)    Response Object Path  attrName=4 attrValue= (values detailed below)     Original Sender  attrName=5 attrValue= (values detailed below)      attrValue information     Attribute name  Values      Rich Notification Icon Object Path  variant signature=o value= Rich notification icon object path    Rich Notification Audio Object Path  variant signature=o value= Rich notification audio object path    Response Object Path  variant signature=o value= Response object path    Original Sender  variant signature=s value= Producer bus name     Introspection XML  ?xml version= 1.0  encoding= UTF-8  ?  node xsi:noNamespaceSchemaLocation= https://www.allseenalliance.org/schemas/introspect.xsd \n      xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    interface name= org.alljoyn.Notification \n       property name= Version  type= q  access= read / \n       signal name= notify \n          arg name= version  type= q / \n          arg name= msgId  type= i / \n          arg name= msgType  type= q / \n          arg name= deviceId  type= s / \n          arg name= deviceName  type= s / \n          arg name= appId  type= ay / \n          arg name= appName  type= s / \n          arg name= attributes  type= a{iv} / \n          arg name= customAttributes  type= a{ss} / \n          arg name= langText  type= a(ss) / \n       /signal \n    /interface  /node",
            "title": "Notification Interface"
        },
        {
            "location": "/learn/base-services/notification/interface/#producer-interface",
            "text": "The Notification Producer interface is announced such that, \nwhen a device scans the network, it can find all producer devices.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Notification.Producer  1  no  /notificationProducer     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number     Methods  The following methods are exposed by the object that implements \nthe  org.alljoyn.Notification.Producer  interface.  Dismiss('i')  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  msgId  integer  N/A  A way to notify the producer that a notification was dismissed.     Reply arguments  None.  Description  The consumer asks the producer to send a dismiss signal and \nstop advertising a given notification.  Introspection XML  ?xml version= 1.0  encoding= UTF-8  ?  node xsi:noNamespaceSchemaLocation= https://www.alljoyn.org/schemas/introspect.xsd \n      xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    interface name= org.alljoyn.Notification.Producer \n       method name= Dismiss \n          arg name= msgId  type= i  direction= in / \n       /method \n       property name= Version  type= q  access= read / \n    /interface  /node",
            "title": "Producer Interface"
        },
        {
            "location": "/learn/base-services/notification/interface/#dismisser-interface",
            "text": "The Dismiss sessionless signals are sent to notify other \nconsumers on the proximal network that a notification has \nbeen dismissed.  Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Notification.Dismisser  1  no  /notification/Dismisser     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number     Signals  Dismiss('iay')  Dismiss signal is a Sessionless signal.  Message arguments     Argument  Parameter name  Signature  List of values  Description      0  msgId  i  positive     1  appId  ay  positive      Description  Notifies consumers that the notification has been dismissed.  Introspect XML  ?xml version= 1.0  encoding= UTF-8  ?  node xsi:noNamespaceSchemaLocation= https://www.alljoyn.org/schemas/introspect.xsd \n     xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    interface name= org.alljoyn.Notification.Dismisser \n       signal name= Dismiss \n          arg name= msgId  type= i  direction= in / \n          arg name= appId  type= ay  direction= in / \n       /signal \n       property name= Version  type= q  access= read / \n    /interface  /node",
            "title": "Dismisser Interface"
        },
        {
            "location": "/learn/base-services/notification/interface/#notification-service-framework-use-cases",
            "text": "Device connecting within and outside the TTL period  The following figure illustrates two consumers (television and \ntablet) connecting within the notification message TTL period \nand a third consumer (smartphone) connecting after the TTL period. \nThe first two consumers receive the notification message, the \nthird consumer does not.  NOTE:  The AllJoyn core block represents the collective AllJoyn \nframework functionality on various producers and consumers.   Figure:  Notification message behavior within and outside the TTL period  Notification message handling based on message types  The following figure illustrates how a notification message \noverwrites a notification message of the same type, and how \nnotification messages of different types can coexist using \nthe AllJoyn framework.  NOTE:  The AllJoyn core block represents the collective AllJoyn \nframework functionality on various producers and consumers.   Figure:  Notification message handling based on message type  Notifications dismissed when producer is on network  The following figure illustrates the flow of dismissing a \nnotification from the consumer until it is received by other \nconsumers on the network.   Figure:  Notifications that are dismissed when the producer is on the network",
            "title": "Notification Service Framework Use Cases"
        },
        {
            "location": "/learn/base-services/onboarding/",
            "text": "Onboarding Service\n\n\nThe Onboarding service provides a common and simple way for new device\nto be brought onto the Wi-Fi network. This is especially useful for\ndevices that have a limited user interface, like a SmartPlug.\n\n\nHow Does it Work?\n\n\nThe current onboarding mechanism leverages Wi-Fi only, though the system\ncan evolve to leverages additional hardware (like BTLE) as they become\nmore prelevant in these class of devices.\n\n\nTwo roles are supported:\n\n\n\n\n\n\nOnboardee\n. This is the device that is unconfigured and needs to be\n  brought onto the Wi-Fi network.\n\n\n\n\n\n\nOnboarder\n. This is the device is configuring the Onboardee device,\n  typically a mobile application or PC.\n\n\n\n\n\n\nThe following are the steps to onboard a device.\n\n\n1. Onboardee broadcasts its SSID\n\n\nWhen an Onboardee device is first plugged in, it will advertise its SSID\nover Wi-Fi. The SSID is either prefixed with \"AJ_\" or postfixed with \"_AJ\"\nto help indicate that this device that supports the AllJoyn\n Onboarding service.\n\n\n2. Onboarder connects to Onboardee\n\n\nThe Onboarder will scan for unconfigured AllJoyn devices by looking for\nSSID names with \"AJ_\" or \"_AJ\". A user can then choose to onboard a specific\nOnboardee device. The first step is to connect to the Onboardee device's\nSSID. Depending on the Onboarder platform, this may be done\nautomatically by the application.\n\n\n3. Onboarder sends Wi-Fi credentials\n\n\nAfter connecting to the Onboardee's SSID, the Onboarder will listen for\n\nAllJoyn About announcements\n. Then, the Onboarder will\nuse the Onboarding service interfaces to send the target Wi-Fi network\ncredentials to the Onboardee device.\n\n\n4. Switch to target Wi-Fi network\n\n\nBoth devices will then switch to the target Wi-Fi network.\n\n\n5. Onboarder listens for Onboardee device\n\n\nAs a final step, the Onboader will listen to receive About announcements\nfrom the Onboardee device. When received, the Onboarder considers\nthe Onboardee device fully onboarded.\n\n\n\n\nLearn More\n\n\n\n\nLearn more about the Onboarding Interface Definition\n\n\nDownload the SDK\n, \nbuild\n and\n  \nrun the sample apps\n\n\nLearn more about the Onboarding APIs",
            "title": "Home"
        },
        {
            "location": "/learn/base-services/onboarding/#onboarding-service",
            "text": "The Onboarding service provides a common and simple way for new device\nto be brought onto the Wi-Fi network. This is especially useful for\ndevices that have a limited user interface, like a SmartPlug.",
            "title": "Onboarding Service"
        },
        {
            "location": "/learn/base-services/onboarding/#how-does-it-work",
            "text": "The current onboarding mechanism leverages Wi-Fi only, though the system\ncan evolve to leverages additional hardware (like BTLE) as they become\nmore prelevant in these class of devices.  Two roles are supported:    Onboardee . This is the device that is unconfigured and needs to be\n  brought onto the Wi-Fi network.    Onboarder . This is the device is configuring the Onboardee device,\n  typically a mobile application or PC.    The following are the steps to onboard a device.  1. Onboardee broadcasts its SSID  When an Onboardee device is first plugged in, it will advertise its SSID\nover Wi-Fi. The SSID is either prefixed with \"AJ_\" or postfixed with \"_AJ\"\nto help indicate that this device that supports the AllJoyn  Onboarding service.  2. Onboarder connects to Onboardee  The Onboarder will scan for unconfigured AllJoyn devices by looking for\nSSID names with \"AJ_\" or \"_AJ\". A user can then choose to onboard a specific\nOnboardee device. The first step is to connect to the Onboardee device's\nSSID. Depending on the Onboarder platform, this may be done\nautomatically by the application.  3. Onboarder sends Wi-Fi credentials  After connecting to the Onboardee's SSID, the Onboarder will listen for AllJoyn About announcements . Then, the Onboarder will\nuse the Onboarding service interfaces to send the target Wi-Fi network\ncredentials to the Onboardee device.  4. Switch to target Wi-Fi network  Both devices will then switch to the target Wi-Fi network.  5. Onboarder listens for Onboardee device  As a final step, the Onboader will listen to receive About announcements\nfrom the Onboardee device. When received, the Onboarder considers\nthe Onboardee device fully onboarded.",
            "title": "How Does it Work?"
        },
        {
            "location": "/learn/base-services/onboarding/#learn-more",
            "text": "Learn more about the Onboarding Interface Definition  Download the SDK ,  build  and\n   run the sample apps  Learn more about the Onboarding APIs",
            "title": "Learn More"
        },
        {
            "location": "/learn/base-services/onboarding/interface-14-02/",
            "text": "Onboarding Interface Definition - 14.02\n\n\nWarning: This is not the latest interface definition.\n\n\nGo here for latest Onboarding Interface Definition\n\n\nIntroduction\n\n\nPurpose\n\n\nThis document describes the specification of the AllJoyn\n\nOnboarding interface. This interface is used by an Onboarder\napplication to provide the Wi-Fi configuration data to another device.\n\n\nScope\n\n\nThis document is targeted to the developers to build the\nOnboarding service framework or extend the provided Onboarding service framework codes.\n\n\nReferences\n\n\nExcept for supporting information, the following are reference\ndocuments found on the AllSeen Alliance web site's Docs/Downloads section.\n\n\n\n\nAllJoyn\n Framework Tutorial\n\n\nIntroduction to AllJoyn\n Thin Client\n\n\nAllJoyn Data Type Signature\n\n\n\n\nAcronyms and terms\n\n\n\n\n\n\n\n\nTerm\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nAllJoyn device\n\n\nA device that supports the AllJoyn framework and can connect to a personal network.\n\n\n\n\n\n\nOnboardee\n\n\nA device that requires credential information to join the personal Wi-Fi network.\n\n\n\n\n\n\nOnboarder\n\n\nAn application that provides credential information to onboard other device to the personal Wi-Fi network.\n\n\n\n\n\n\nOnboarding service framework\n\n\nAn AllJoyn service framework on the onboardee that receives Wi-Fi credentials.\n\n\n\n\n\n\nPersonal AP\n\n\nPersonal or home Wi-Fi access point.\n\n\n\n\n\n\nSoft AP\n\n\nThe device can provide a software-enabled access point.\n\n\n\n\n\n\n\n\nSpecification Overview\n\n\nThe Onboarding interface is implemented by an application on\na target device, referred to as an onboardee. A typical\nonboardee is an AllJoyn\n thin client device. This\ninterface allows the onboarder to send the Wi-Fi credentials\nto the onboardee to allow it to join the personal access point.\nFigure 1 illustrates the relationship between an onboardee and an onboarder.\n\n\n\n\nFigure: Onboarding service framework architecture within the AllJoyn framework\n\n\nOnboarding Call Flows\n\n\nOnboarding call flow using an Android onboarder\n\n\nFigure 2 illustrates a call flow for onboarding\nan onboardee using an Android onboarder.\n\n\n\n\nFigure: Onboarding a device using an Android onboarder\n\n\nOnboarding call flow using an iOS onboarder\n\n\nFigure 3 illustrates a call flow for onboarding\nan onboardee using an iOS onboarder.\n\n\n\n\nFigure: Onboarding a device using an iOS onboarder\n\n\nError Handling\n\n\nThe method calls in the Onboarding interface use the AllJoyn\nerror message handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE)\nto set the error name and error message.\n\n\nTable 1 lists the possible errors raised by the Onboarding interface.\n\n\nTable 1: Onboarding service framework interface errors\n\n\n\n\n\n\n\n\nError name\n\n\nError message\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.OutOfRange\n\n\nValue out of range\n\n\n\n\n\n\norg.alljoyn.Error.InvalidValue\n\n\nInvalid value\n\n\n\n\n\n\norg.alljoyn.Error.FeatureNotAvailable\n\n\nFeature not available\n\n\n\n\n\n\n\n\nOnboarding Interface\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Onboarding\n\n\n1\n\n\nyes\n\n\n/Onboarding\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\nState\n\n\nn\n\n\n* 0 - Personal AP Not Configured\n\n\nno\n\n\nThe configuration state\n\n\n\n\n\n\n\n\n\n\n* 1 - Personal AP Configured/Not Validated\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* 2 - Personal AP Configured/Validating\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* 3 - Personal AP Configured/Validated\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* 4 - Personal AP Configured/Error\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* 5 - Personal AP Configured/Retry\n\n\n\n\n\n\n\n\n\n\nLastError\n\n\nns\n\n\n0 - Validated\n\n\nno\n\n\nThe last error code and error message. Error_message is the error message received from the underlying Wi-Fi layer.\n\n\n\n\n\n\n\n\n\n\n* 1 - Unreachable\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* 2 - Unsupported_protocol\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* 3 - Unauthorized\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* 4 - Error_message\n\n\n\n\n\n\n\n\n\n\n\n\nMethods\n\n\nThe following methods are exposed by a BusObject that\nimplements the Onboarding interface.\n\n\nConfigWifi\n\n\nInputs\n\n\n\n\n\n\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSSID\n\n\ns\n\n\nN/A\n\n\nAccess point SSID\n\n\n\n\n\n\npassphrase\n\n\ns\n\n\nN/A\n\n\nAccess point passphrase in hex format\n\n\n\n\n\n\nauthType\n\n\nn\n\n\n* -3 - WPA2_AUTO\n\n\nAuthentication type.\n\n\n\n\n\n\n\n\n\n\n* -2 - WPA_AUTO\n\n\n*When it is equal to any, the onboardee must attempt all possible authentication types it supports to connect to the AP.\n\n\n\n\n\n\n\n\n\n\n* -1 - Any\n\n\n*When it is equal to -3 or -2 (WPA2_AUTO or WPA_AUTO), the onboardee attempts to connect to the AP with TKIP cipher and then AES-CCMP cipher.\n\n\n\n\n\n\n\n\n\n\n* 0 - Open\n\n\n*WPA_TKIP indicates WPA with TKIP cipher.\n\n\n\n\n\n\n\n\n\n\n* 1 - WEP\n\n\n*WPA2_CCMP indicates WPA2 with AES-CCMP cipher.\n\n\n\n\n\n\n\n\n\n\n* 2 - WPA_TKIP\n\n\n*If the value is invalid, the AllJoyn error code org.alljoyn.Error.OutOfRange will be returned.\n\n\n\n\n\n\n\n\n\n\n* 3 - WPA_CCMP\n\n\n\n\n\n\n\n\n\n\n\n\n* 4 - WPA2_TKIP\n\n\n\n\n\n\n\n\n\n\n\n\n* 5 - WPA2_CCMP\n\n\n\n\n\n\n\n\n\n\n\n\n* 6 - WPS\n\n\n\n\n\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\n\nReturn signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nn\n\n\nThe possible values for the connection result status are:\n\n\n\n\n\n\n\n\n* 1 - Current SoftAP mode will be disabled upon receipt of Connect. In this case, the Onboarder application must wait for the device to connect on the personal AP and query the State and LastError properties.\n\n\n\n\n\n\n\n\n* 2 - Concurrent step used to validate the personal AP connection. In this case, the Onboarder application must wait for the ConnectionResult signal to arrive over the AllJoyn session established over the SoftAP link.\n\n\n\n\n\n\n\n\nDescription\n\n\nSend the personal AP information to the onboardee. When the\nauthType is equal to -1 (any), the onboardee must try out\nall the possible authentication types it supports to connect to the personal AP.\n\n\nIf authType parameter is invalid, the AllJoyn error code\norg.alljoyn.Error.OutOfRange will be returned in the\nAllJoyn method call reply.\n\n\nConnect\n\n\nInputs\n\n\nNone.\n\n\nOutputs\n\n\nThis method does not have any reply message. It's a fire-and-forget\nmethod call.\n\n\nDescription\n\n\nTell the onboardee to connect to the personal AP. It is\nrecommended that the onboardee use the concurrency feature,\nif it is available.\n\n\nOffboard\n\n\nInputs\n\n\nNone.\n\n\nOutputs\n\n\nThis method does not have any reply message. It's a fire-and-forget\nmethod call.\n\n\nDescription\n\n\nTell the onboardee to disconnect from the personal AP, clear\nthe personal AP configuration fields, and start the soft AP mode.\n\n\nGetScanInfo\n\n\nInputs\n\n\nNone.\n\n\nOutputs\n\n\n\n\n\n\n\n\nParameter name\n\n\nOutput signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nage\n\n\nq\n\n\nAge of the scan information in minutes. It reflects how long ago the scan procedure was performed by the device.\n\n\n\n\n\n\nscanList\n\n\na(sn)\n\n\nScan list. It's an array of records holding SSID and authType.\n\n\n\n\n\n\n\n\nDescription\n\n\nScan all the Wi-Fi access points in the onboardee's proximity.\n\n\nSome devices may not support this feature. In such a case,\nthe AllJoyn error code org.alljoyn.Error.FeatureNotAvailable\nwill be returned in the AllJoyn response.\n\n\nSignals\n\n\nConnectionResult\n\n\n\n\n\n\n\n\nData type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nns\n\n\nConnect result code and message. The list of values for the result code is:\n\n\n\n\n\n\n\n\n* 0 - Validated\n\n\n\n\n\n\n\n\n* 1 - Unreachable\n\n\n\n\n\n\n\n\n* 2 - Unsupported_protocol\n\n\n\n\n\n\n\n\n* 3 - Unauthorized\n\n\n\n\n\n\n\n\n* 4 - Error_message\n\n\n\n\n\n\n\n\nDescription\n\n\nThis signal is emitted when the connection attempt against\nthe personal AP is completed. The signal is sent over the\nAllJoyn session established over the SoftAP link.\n\n\nThis signal will be received only if the concurrency feature\nis supported by the onboardee.\n\n\nIntrospect XML\n\n\nThe following XML defines the Onboarding interface.\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttp://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.Onboarding\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nState\n type=\nn\n access=\nread\n/\n\n      \nproperty name=\nLastError\n type=\n(ns)\n access=\nread\n/\n\n      \nmethod name=\nConfigureWifi\n\n         \narg name=\nSSID\n type=\ns\n direction=\nin\n/\n\n         \narg name=\npassphrase\n type=\ns\n direction=\nin\n/\n\n         \narg name=\nauthType\n type=\nn\n direction=\nin\n/\n\n         \narg name=\nstatus\n type=\nn\n direction=\nout\n/\n\n      \n/method\n\n      \nmethod name=\nConnect\n\n\nannotation name=\norg.freedesktop.DBus.Method.NoReply\n value=\ntrue\n /\n\n      \n/method\n\n      \nmethod name=\nOffboard\n\n         \nannotation name=\norg.freedesktop.DBus.Method.NoReply\n value=\ntrue\n /\n\n      \n/method\n\n      \nmethod name=\nGetScanInfo\n\n         \narg name=\nage\n type=\nq\n direction=\nout\n/\n\n         \narg name=\nscanList\n type=\na(sn)\n direction=\nout\n/\n\n      \n/method\n\n      \nsignal name=\nConnectionResult\n\n         \narg type=\n(ns)\n /\n\n      \n/signal\n\n   \n/interface\n\n\n/node",
            "title": "Interface 14 02"
        },
        {
            "location": "/learn/base-services/onboarding/interface-14-02/#onboarding-interface-definition-1402",
            "text": "Warning: This is not the latest interface definition.  Go here for latest Onboarding Interface Definition",
            "title": "Onboarding Interface Definition - 14.02"
        },
        {
            "location": "/learn/base-services/onboarding/interface-14-02/#introduction",
            "text": "Purpose  This document describes the specification of the AllJoyn \nOnboarding interface. This interface is used by an Onboarder\napplication to provide the Wi-Fi configuration data to another device.  Scope  This document is targeted to the developers to build the\nOnboarding service framework or extend the provided Onboarding service framework codes.  References  Except for supporting information, the following are reference\ndocuments found on the AllSeen Alliance web site's Docs/Downloads section.   AllJoyn  Framework Tutorial  Introduction to AllJoyn  Thin Client  AllJoyn Data Type Signature   Acronyms and terms     Term  Definition      AllJoyn device  A device that supports the AllJoyn framework and can connect to a personal network.    Onboardee  A device that requires credential information to join the personal Wi-Fi network.    Onboarder  An application that provides credential information to onboard other device to the personal Wi-Fi network.    Onboarding service framework  An AllJoyn service framework on the onboardee that receives Wi-Fi credentials.    Personal AP  Personal or home Wi-Fi access point.    Soft AP  The device can provide a software-enabled access point.",
            "title": "Introduction"
        },
        {
            "location": "/learn/base-services/onboarding/interface-14-02/#specification-overview",
            "text": "The Onboarding interface is implemented by an application on\na target device, referred to as an onboardee. A typical\nonboardee is an AllJoyn  thin client device. This\ninterface allows the onboarder to send the Wi-Fi credentials\nto the onboardee to allow it to join the personal access point.\nFigure 1 illustrates the relationship between an onboardee and an onboarder.   Figure: Onboarding service framework architecture within the AllJoyn framework",
            "title": "Specification Overview"
        },
        {
            "location": "/learn/base-services/onboarding/interface-14-02/#onboarding-call-flows",
            "text": "Onboarding call flow using an Android onboarder  Figure 2 illustrates a call flow for onboarding\nan onboardee using an Android onboarder.   Figure: Onboarding a device using an Android onboarder  Onboarding call flow using an iOS onboarder  Figure 3 illustrates a call flow for onboarding\nan onboardee using an iOS onboarder.   Figure: Onboarding a device using an iOS onboarder",
            "title": "Onboarding Call Flows"
        },
        {
            "location": "/learn/base-services/onboarding/interface-14-02/#error-handling",
            "text": "The method calls in the Onboarding interface use the AllJoyn\nerror message handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE)\nto set the error name and error message.  Table 1 lists the possible errors raised by the Onboarding interface.  Table 1: Onboarding service framework interface errors     Error name  Error message      org.alljoyn.Error.OutOfRange  Value out of range    org.alljoyn.Error.InvalidValue  Invalid value    org.alljoyn.Error.FeatureNotAvailable  Feature not available",
            "title": "Error Handling"
        },
        {
            "location": "/learn/base-services/onboarding/interface-14-02/#onboarding-interface",
            "text": "Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Onboarding  1  yes  /Onboarding     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number    State  n  * 0 - Personal AP Not Configured  no  The configuration state      * 1 - Personal AP Configured/Not Validated        * 2 - Personal AP Configured/Validating        * 3 - Personal AP Configured/Validated        * 4 - Personal AP Configured/Error        * 5 - Personal AP Configured/Retry      LastError  ns  0 - Validated  no  The last error code and error message. Error_message is the error message received from the underlying Wi-Fi layer.      * 1 - Unreachable        * 2 - Unsupported_protocol        * 3 - Unauthorized        * 4 - Error_message       Methods  The following methods are exposed by a BusObject that\nimplements the Onboarding interface.  ConfigWifi  Inputs     Parameter name  Signature  List of values  Description      SSID  s  N/A  Access point SSID    passphrase  s  N/A  Access point passphrase in hex format    authType  n  * -3 - WPA2_AUTO  Authentication type.      * -2 - WPA_AUTO  *When it is equal to any, the onboardee must attempt all possible authentication types it supports to connect to the AP.      * -1 - Any  *When it is equal to -3 or -2 (WPA2_AUTO or WPA_AUTO), the onboardee attempts to connect to the AP with TKIP cipher and then AES-CCMP cipher.      * 0 - Open  *WPA_TKIP indicates WPA with TKIP cipher.      * 1 - WEP  *WPA2_CCMP indicates WPA2 with AES-CCMP cipher.      * 2 - WPA_TKIP  *If the value is invalid, the AllJoyn error code org.alljoyn.Error.OutOfRange will be returned.      * 3 - WPA_CCMP       * 4 - WPA2_TKIP       * 5 - WPA2_CCMP       * 6 - WPS      Output     Return signature  Description      n  The possible values for the connection result status are:     * 1 - Current SoftAP mode will be disabled upon receipt of Connect. In this case, the Onboarder application must wait for the device to connect on the personal AP and query the State and LastError properties.     * 2 - Concurrent step used to validate the personal AP connection. In this case, the Onboarder application must wait for the ConnectionResult signal to arrive over the AllJoyn session established over the SoftAP link.     Description  Send the personal AP information to the onboardee. When the\nauthType is equal to -1 (any), the onboardee must try out\nall the possible authentication types it supports to connect to the personal AP.  If authType parameter is invalid, the AllJoyn error code\norg.alljoyn.Error.OutOfRange will be returned in the\nAllJoyn method call reply.  Connect  Inputs  None.  Outputs  This method does not have any reply message. It's a fire-and-forget\nmethod call.  Description  Tell the onboardee to connect to the personal AP. It is\nrecommended that the onboardee use the concurrency feature,\nif it is available.  Offboard  Inputs  None.  Outputs  This method does not have any reply message. It's a fire-and-forget\nmethod call.  Description  Tell the onboardee to disconnect from the personal AP, clear\nthe personal AP configuration fields, and start the soft AP mode.  GetScanInfo  Inputs  None.  Outputs     Parameter name  Output signature  Description      age  q  Age of the scan information in minutes. It reflects how long ago the scan procedure was performed by the device.    scanList  a(sn)  Scan list. It's an array of records holding SSID and authType.     Description  Scan all the Wi-Fi access points in the onboardee's proximity.  Some devices may not support this feature. In such a case,\nthe AllJoyn error code org.alljoyn.Error.FeatureNotAvailable\nwill be returned in the AllJoyn response.  Signals  ConnectionResult     Data type  Description      ns  Connect result code and message. The list of values for the result code is:     * 0 - Validated     * 1 - Unreachable     * 2 - Unsupported_protocol     * 3 - Unauthorized     * 4 - Error_message     Description  This signal is emitted when the connection attempt against\nthe personal AP is completed. The signal is sent over the\nAllJoyn session established over the SoftAP link.  This signal will be received only if the concurrency feature\nis supported by the onboardee.",
            "title": "Onboarding Interface"
        },
        {
            "location": "/learn/base-services/onboarding/interface-14-02/#introspect-xml",
            "text": "The following XML defines the Onboarding interface.  node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= http://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.Onboarding \n       property name= Version  type= q  access= read / \n       property name= State  type= n  access= read / \n       property name= LastError  type= (ns)  access= read / \n       method name= ConfigureWifi \n          arg name= SSID  type= s  direction= in / \n          arg name= passphrase  type= s  direction= in / \n          arg name= authType  type= n  direction= in / \n          arg name= status  type= n  direction= out / \n       /method \n       method name= Connect  annotation name= org.freedesktop.DBus.Method.NoReply  value= true  / \n       /method \n       method name= Offboard \n          annotation name= org.freedesktop.DBus.Method.NoReply  value= true  / \n       /method \n       method name= GetScanInfo \n          arg name= age  type= q  direction= out / \n          arg name= scanList  type= a(sn)  direction= out / \n       /method \n       signal name= ConnectionResult \n          arg type= (ns)  / \n       /signal \n    /interface  /node",
            "title": "Introspect XML"
        },
        {
            "location": "/learn/base-services/onboarding/interface/",
            "text": "Onboarding Interface Definition\n\n\nRelease History\n\n\nTo access a previous version of this document, click the release version link below.\n\n\n\n\n\n\n\n\nRelease version\n\n\nDate\n\n\nWhat changed\n\n\n\n\n\n\n\n\n\n\n14.02\n\n\n2/28/2014\n\n\nOnboarding interface version 1 was added.\n\n\n\n\n\n\n14.06\n\n\n6/30/2014\n\n\nNo updates\n\n\n\n\n\n\n14.06 Update 1\n\n\n9/29/2014\n\n\nUpdated the document title and Overview chapter title (changed from Specification to Definition)\nAdded the release version number to the document title for version tracking.\nAdded a note in the Definition Overview chapter to address the AllSeen Alliance Compliance and Certification program.\nAdded a Mandatory column for method and signal parameters to support the AllSeen Alliance Compliance and Certification program.\n\n\n\n\n\n\n14.12\n\n\n12/17/2014\n\n\nCleanup to make requirements for methods and signals more clear.\n\n\n\n\n\n\n\n\nDefinition Overview\n\n\nThe Onboarding interface is implemented by an application on\na target device, referred to as an onboardee. A typical\nonboardee is an AllJoyn\n thin client device. This\ninterface allows the onboarder to send the Wi-Fi credentials\nto the onboardee to allow it to join the personal access point.\n\n\n\n\nFigure:\n Onboarding service framework architecture within the AllJoyn framework\n\n\nNOTE:\n All methods and signals are considered mandatory to\nsupport the AllSeen Alliance Compliance and Certification program.\n\n\nOnboarding Call Flows\n\n\nOnboarding call flow using an Android onboarder\n\n\nThe following figure illustrates a call flow for onboarding\nan onboardee using an Android onboarder.\n\n\n\n\nFigure:\n Onboarding a device using an Android onboarder\n\n\nOnboarding call flow using an iOS onboarder\n\n\nThe following figure illustrates a call flow for onboarding\nan onboardee using an iOS onboarder.\n\n\n\n\nFigure:\n Onboarding a device using an iOS onboarder\n\n\nError Handling\n\n\nThe method calls in the Onboarding interface use the AllJoyn\nerror message handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE)\nto set the error name and error message.\n\n\n\n\n\n\n\n\nError name\n\n\nError message\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.OutOfRange\n\n\nValue out of range\n\n\n\n\n\n\norg.alljoyn.Error.InvalidValue\n\n\nInvalid value\n\n\n\n\n\n\norg.alljoyn.Error.FeatureNotAvailable\n\n\nFeature not available\n\n\n\n\n\n\n\n\nOnboarding Interface\n\n\nInterface name\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\nObject path\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Onboarding\n\n\n1\n\n\nyes\n\n\n/Onboarding\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nRead/Write\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead-only\n\n\nInterface version number\n\n\n\n\n\n\nState\n\n\nn\n\n\n0 - Personal AP Not Configured\n1 - Personal AP Configured/Not Validated\n2 - Personal AP Configured/Validating\n3 - Personal AP Configured/Validated\n4 - Personal AP Configured/Error\n5 - Personal AP Configured/Retry\n\n\nRead-only\n\n\nThe configuration state\n\n\n\n\n\n\nLastError\n\n\nns\n\n\n0 - Validated\n1 - Unreachable\n2 - Unsupported_protocol\n3 - Unauthorized\n4 - Error_message\n\n\nRead-only\n\n\nThe last error code and error message. Error_message is the error message received from the underlying Wi-Fi layer.\n\n\n\n\n\n\n\n\nMethods\n\n\nThe following methods are exposed by a BusObject that\nimplements the Onboarding interface.\n\n\nn ConfigWifi('ssn')\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\nSSID\n\n\ns\n\n\nN/A\n\n\nAccess point SSID\n\n\n\n\n\n\n\n\n1\n\n\npassphrase\n\n\ns\n\n\nN/A\n\n\nAccess point passphrase  in hex format\n\n\n\n\n\n\n\n\n2\n\n\nauthType\n\n\nn\n\n\n-3 - WPA2_AUTO\n-2 - WPA_AUTO\n-1 - Any\n0 - Open\n1 - WEP\n2 - WPA_TKIP\n3 - WPA_CCMP\n4 - WPA2_TKIP\n5 - WPA2_CCMP\n6 - WPS\n\n\nAuthentication type.\nWhen it is equal to any, the onboardee must attempt all possible authentication types it supports to connect to the AP.\nWhen it is equal to -3 or -2 (WPA2_AUTO or WPA_AUTO), the onboardee attempts to connect to the AP with TKIP cipher and then AES-CCMP cipher.\nWPA_TKIP indicates WPA with TKIP cipher.\nWPA2_CCMP indicates WPA2 with AES-CCMP cipher.\nIf the value is invalid, the AllJoyn error \norg.alljoyn.Error.OutOfRange\n will be returned.\n\n\n\n\n\n\n\n\n\n\nReply arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nReturn signature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nstatus\n\n\nn\n\n\nThe possible values for the connection result status are:\n1 - Current SoftAP mode will be disabled upon receipt of Connect. In this case, the Onboarder application must wait for the device to connect on the personal AP and query the State and LastError properties.\n2 - Concurrent step used to validate the personal AP connection. In this case, the Onboarder application must wait for the ConnectionResult signal to arrive over the AllJoyn session established over the SoftAP link.\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nSends the personal AP information to the onboardee. When the\nauthType is equal to -1 (any), the onboardee must try out\nall the possible authentication types it supports to connect to the personal AP.\n\n\nError reply\n\n\n\n\n\n\n\n\nError\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.OutOfRange\n\n\nReturned in the AllJoyn method call reply if authType parameter is invalid.\n\n\n\n\n\n\n\n\nConnect\n\n\nMessage arguments\n\n\nNone.\n\n\nReply arguments\n\n\nThis method does not have any reply message. It's a fire-and-forget\nmethod call.\n\n\nDescription\n\n\nTells the onboardee to connect to the personal AP. It is\nrecommended that the onboardee use the concurrency feature,\nif it is available.\n\n\nOffboard\n\n\nMessage arguments\n\n\nNone.\n\n\nReply arguments\n\n\nThis method does not have any reply message. It's a fire-and-forget\nmethod call.\n\n\nDescription\n\n\nTells the onboardee to disconnect from the personal AP, clear\nthe personal AP configuration fields, and start the soft AP mode.\n\n\nqa(sn) GetScanInfo\n\n\nMessage arguments\n\n\nNone.\n\n\nReply arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nReturn signature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nage\n\n\nq\n\n\npositive number\n\n\nAge of the scan information in minutes. Reflects how long ago the scan procedure was performed by the device.\n\n\n\n\n\n\n1\n\n\nscanList\n\n\na(sn)\n\n\nThe SSID string and one of the following values:\n0 - Open\n1 - WEP\n2 - WPA_TKIP\n3 - WPA_CCMP\n4 - WPA2_TKIP\n5 - WPA2_CCMP\n6 - WPS\n\n\nArray of records containing the SSID and authType.\nWPA_TKIP indicates WPA with TKIP cipher.\nWPA2_CCMP indicates WPA2 with AES-CCMP cipher.\nIf the value is invalid, the AllJoyn error \norg.alljoyn.Error.OutOfRange\n will be returned.\n\n\n\n\n\n\n\n\nDescription\n\n\nScans all the Wi-Fi access points in the onboardee's proximity.\n\n\nError reply\n\n\n\n\n\n\n\n\nError\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.FeatureNotAvailable\n\n\nReturned in the AllJoyn response if the device does not support this feature.\n\n\n\n\n\n\n\n\nSignals\n\n\nConnectionResult(ns)\n\n\nConnectionResult signal is not a Sessionless signal.\n\n\nMessage arguments\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nReturn signature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nresultCode\n\n\nn\n\n\n0 - Validated\n1 - Unreachable\n2 - Unsupported_protocol\n3 - Unauthorized\n4 - Error_message\n\n\nConnection result code.\n\n\n\n\n\n\n1\n\n\nresultMessage\n\n\ns\n\n\nstring\n\n\nText that describes the connection result.\n\n\n\n\n\n\n\n\nDescription\n\n\nThis signal is emitted when the connection attempt against\nthe personal AP is completed. The signal is sent over the\nAllJoyn session established over the SoftAP link.\n\n\nThis signal will be received only if the concurrency feature\nis supported by the onboardee.\n\n\nIntrospect XML\n\n\nnode xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttp://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.Onboarding\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nproperty name=\nState\n type=\nn\n access=\nread\n/\n\n      \nproperty name=\nLastError\n type=\n(ns)\n access=\nread\n/\n\n      \nmethod name=\nConfigureWifi\n\n         \narg name=\nSSID\n type=\ns\n direction=\nin\n/\n\n         \narg name=\npassphrase\n type=\ns\n direction=\nin\n/\n\n         \narg name=\nauthType\n type=\nn\n direction=\nin\n/\n\n         \narg name=\nstatus\n type=\nn\n direction=\nout\n/\n\n      \n/method\n\n      \nmethod name=\nConnect\n\n\nannotation name=\norg.freedesktop.DBus.Method.NoReply\n value=\ntrue\n /\n\n      \n/method\n\n      \nmethod name=\nOffboard\n\n         \nannotation name=\norg.freedesktop.DBus.Method.NoReply\n value=\ntrue\n /\n\n      \n/method\n\n      \nmethod name=\nGetScanInfo\n\n         \narg name=\nage\n type=\nq\n direction=\nout\n/\n\n         \narg name=\nscanList\n type=\na(sn)\n direction=\nout\n/\n\n      \n/method\n\n      \nsignal name=\nConnectionResult\n\n         \narg type=\n(ns)\n /\n\n      \n/signal\n\n   \n/interface\n\n\n/node",
            "title": "Interface"
        },
        {
            "location": "/learn/base-services/onboarding/interface/#onboarding-interface-definition",
            "text": "",
            "title": "Onboarding Interface Definition"
        },
        {
            "location": "/learn/base-services/onboarding/interface/#release-history",
            "text": "To access a previous version of this document, click the release version link below.     Release version  Date  What changed      14.02  2/28/2014  Onboarding interface version 1 was added.    14.06  6/30/2014  No updates    14.06 Update 1  9/29/2014  Updated the document title and Overview chapter title (changed from Specification to Definition) Added the release version number to the document title for version tracking. Added a note in the Definition Overview chapter to address the AllSeen Alliance Compliance and Certification program. Added a Mandatory column for method and signal parameters to support the AllSeen Alliance Compliance and Certification program.    14.12  12/17/2014  Cleanup to make requirements for methods and signals more clear.",
            "title": "Release History"
        },
        {
            "location": "/learn/base-services/onboarding/interface/#definition-overview",
            "text": "The Onboarding interface is implemented by an application on\na target device, referred to as an onboardee. A typical\nonboardee is an AllJoyn  thin client device. This\ninterface allows the onboarder to send the Wi-Fi credentials\nto the onboardee to allow it to join the personal access point.   Figure:  Onboarding service framework architecture within the AllJoyn framework  NOTE:  All methods and signals are considered mandatory to\nsupport the AllSeen Alliance Compliance and Certification program.",
            "title": "Definition Overview"
        },
        {
            "location": "/learn/base-services/onboarding/interface/#onboarding-call-flows",
            "text": "Onboarding call flow using an Android onboarder  The following figure illustrates a call flow for onboarding\nan onboardee using an Android onboarder.   Figure:  Onboarding a device using an Android onboarder  Onboarding call flow using an iOS onboarder  The following figure illustrates a call flow for onboarding\nan onboardee using an iOS onboarder.   Figure:  Onboarding a device using an iOS onboarder",
            "title": "Onboarding Call Flows"
        },
        {
            "location": "/learn/base-services/onboarding/interface/#error-handling",
            "text": "The method calls in the Onboarding interface use the AllJoyn\nerror message handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE)\nto set the error name and error message.     Error name  Error message      org.alljoyn.Error.OutOfRange  Value out of range    org.alljoyn.Error.InvalidValue  Invalid value    org.alljoyn.Error.FeatureNotAvailable  Feature not available",
            "title": "Error Handling"
        },
        {
            "location": "/learn/base-services/onboarding/interface/#onboarding-interface",
            "text": "Interface name     Interface name  Version  Secured  Object path      org.alljoyn.Onboarding  1  yes  /Onboarding     Properties     Property name  Signature  List of values  Read/Write  Description      Version  q  Positive integers  Read-only  Interface version number    State  n  0 - Personal AP Not Configured 1 - Personal AP Configured/Not Validated 2 - Personal AP Configured/Validating 3 - Personal AP Configured/Validated 4 - Personal AP Configured/Error 5 - Personal AP Configured/Retry  Read-only  The configuration state    LastError  ns  0 - Validated 1 - Unreachable 2 - Unsupported_protocol 3 - Unauthorized 4 - Error_message  Read-only  The last error code and error message. Error_message is the error message received from the underlying Wi-Fi layer.     Methods  The following methods are exposed by a BusObject that\nimplements the Onboarding interface.  n ConfigWifi('ssn')  Message arguments     Argument  Parameter name  Signature  List of values  Description       0  SSID  s  N/A  Access point SSID     1  passphrase  s  N/A  Access point passphrase  in hex format     2  authType  n  -3 - WPA2_AUTO -2 - WPA_AUTO -1 - Any 0 - Open 1 - WEP 2 - WPA_TKIP 3 - WPA_CCMP 4 - WPA2_TKIP 5 - WPA2_CCMP 6 - WPS  Authentication type. When it is equal to any, the onboardee must attempt all possible authentication types it supports to connect to the AP. When it is equal to -3 or -2 (WPA2_AUTO or WPA_AUTO), the onboardee attempts to connect to the AP with TKIP cipher and then AES-CCMP cipher. WPA_TKIP indicates WPA with TKIP cipher. WPA2_CCMP indicates WPA2 with AES-CCMP cipher. If the value is invalid, the AllJoyn error  org.alljoyn.Error.OutOfRange  will be returned.      Reply arguments     Argument  Parameter name  Return signature  List of values  Description      0  status  n  The possible values for the connection result status are: 1 - Current SoftAP mode will be disabled upon receipt of Connect. In this case, the Onboarder application must wait for the device to connect on the personal AP and query the State and LastError properties. 2 - Concurrent step used to validate the personal AP connection. In this case, the Onboarder application must wait for the ConnectionResult signal to arrive over the AllJoyn session established over the SoftAP link.      Description  Sends the personal AP information to the onboardee. When the\nauthType is equal to -1 (any), the onboardee must try out\nall the possible authentication types it supports to connect to the personal AP.  Error reply     Error  Description      org.alljoyn.Error.OutOfRange  Returned in the AllJoyn method call reply if authType parameter is invalid.     Connect  Message arguments  None.  Reply arguments  This method does not have any reply message. It's a fire-and-forget\nmethod call.  Description  Tells the onboardee to connect to the personal AP. It is\nrecommended that the onboardee use the concurrency feature,\nif it is available.  Offboard  Message arguments  None.  Reply arguments  This method does not have any reply message. It's a fire-and-forget\nmethod call.  Description  Tells the onboardee to disconnect from the personal AP, clear\nthe personal AP configuration fields, and start the soft AP mode.  qa(sn) GetScanInfo  Message arguments  None.  Reply arguments     Argument  Parameter name  Return signature  List of values  Description      0  age  q  positive number  Age of the scan information in minutes. Reflects how long ago the scan procedure was performed by the device.    1  scanList  a(sn)  The SSID string and one of the following values: 0 - Open 1 - WEP 2 - WPA_TKIP 3 - WPA_CCMP 4 - WPA2_TKIP 5 - WPA2_CCMP 6 - WPS  Array of records containing the SSID and authType. WPA_TKIP indicates WPA with TKIP cipher. WPA2_CCMP indicates WPA2 with AES-CCMP cipher. If the value is invalid, the AllJoyn error  org.alljoyn.Error.OutOfRange  will be returned.     Description  Scans all the Wi-Fi access points in the onboardee's proximity.  Error reply     Error  Description      org.alljoyn.Error.FeatureNotAvailable  Returned in the AllJoyn response if the device does not support this feature.     Signals  ConnectionResult(ns)  ConnectionResult signal is not a Sessionless signal.  Message arguments     Argument  Parameter name  Return signature  List of values  Description      0  resultCode  n  0 - Validated 1 - Unreachable 2 - Unsupported_protocol 3 - Unauthorized 4 - Error_message  Connection result code.    1  resultMessage  s  string  Text that describes the connection result.     Description  This signal is emitted when the connection attempt against\nthe personal AP is completed. The signal is sent over the\nAllJoyn session established over the SoftAP link.  This signal will be received only if the concurrency feature\nis supported by the onboardee.",
            "title": "Onboarding Interface"
        },
        {
            "location": "/learn/base-services/onboarding/interface/#introspect-xml",
            "text": "node xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= http://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.Onboarding \n       property name= Version  type= q  access= read / \n       property name= State  type= n  access= read / \n       property name= LastError  type= (ns)  access= read / \n       method name= ConfigureWifi \n          arg name= SSID  type= s  direction= in / \n          arg name= passphrase  type= s  direction= in / \n          arg name= authType  type= n  direction= in / \n          arg name= status  type= n  direction= out / \n       /method \n       method name= Connect  annotation name= org.freedesktop.DBus.Method.NoReply  value= true  / \n       /method \n       method name= Offboard \n          annotation name= org.freedesktop.DBus.Method.NoReply  value= true  / \n       /method \n       method name= GetScanInfo \n          arg name= age  type= q  direction= out / \n          arg name= scanList  type= a(sn)  direction= out / \n       /method \n       signal name= ConnectionResult \n          arg type= (ns)  / \n       /signal \n    /interface  /node",
            "title": "Introspect XML"
        },
        {
            "location": "/learn/core/events-and-actions/",
            "text": "Events and Actions\n\n\nThe Events and Actions feature is a generic mechanism that\nsimple interoperability between AllJoyn apps and devices. It\nenables apps and devices to send events that can be easily\ndiscovered and received by other apps and devices. Similarly,\napps and devices can offer actions for other apps and devices\nto discover and invoke. For example, a proximity sensor can emit\nan event when someone walks by and a lamp can accept an action\nto turn on the light. By being able to discover these events\nand actions, one can create an app to turn on the light when\nthe sensor trips. This simple mechanism, with its discoverability,\nenables apps to create dynamic ad hoc interactions.\n\n\nEvents and Actions build on top of the AllJoyn\n Core.\nAn event is merely a signal within an AllJoyn interface with\nan associated human readable \ndescription\n that explains what\nthe event is. Similarly, an action is just a method with a\n\ndescription\n in an AllJoyn interface. Standard AllJoyn Core\nAPIs are used to send and receive events and to invoke and\nprocess actions.\n\n\nHere is an example of what an interface with a \ndescription\n\nlooks like:\n\n\ninterface name=\ncom.example.LightBulb\n\n  \nmethod name=\nToggleSwitch\n\n     \ndescription\nToggle light switch\n/description\n\n  \n/method\n\n  \nsignal name=\nLightOn\n sessionless=\ntrue\n\n     \ndescription\nThe light has been turned on\n/description\n\n  \n/signal\n\n\n/interface\n\n\n\n\n\nSince all AllJoyn interfaces are introspectable, so are events\nand actions. The \ndescription\n tag, which supports multiple\nlanguages, is provided to give the user some information about\nwhat the event and action is.\n\n\nWhen an event is connected to an action a sentence is formed.\nUsing the above example a connection of the two creates \"The light\nhas been turned on, Toggle the light switch\".\n\n\nLike with all AllJoyn interfaces, events and actions can require\nsecurity, thus limiting those who can receive events and call\nactions.\n\n\nLearn more\n\n\nSee the \nEvents and Actions API Guide\n to more\nlearn how to add Events and Actions into your application.",
            "title": "Events and actions"
        },
        {
            "location": "/learn/core/events-and-actions/#events-and-actions",
            "text": "The Events and Actions feature is a generic mechanism that\nsimple interoperability between AllJoyn apps and devices. It\nenables apps and devices to send events that can be easily\ndiscovered and received by other apps and devices. Similarly,\napps and devices can offer actions for other apps and devices\nto discover and invoke. For example, a proximity sensor can emit\nan event when someone walks by and a lamp can accept an action\nto turn on the light. By being able to discover these events\nand actions, one can create an app to turn on the light when\nthe sensor trips. This simple mechanism, with its discoverability,\nenables apps to create dynamic ad hoc interactions.  Events and Actions build on top of the AllJoyn  Core.\nAn event is merely a signal within an AllJoyn interface with\nan associated human readable  description  that explains what\nthe event is. Similarly, an action is just a method with a description  in an AllJoyn interface. Standard AllJoyn Core\nAPIs are used to send and receive events and to invoke and\nprocess actions.  Here is an example of what an interface with a  description \nlooks like:  interface name= com.example.LightBulb \n   method name= ToggleSwitch \n      description Toggle light switch /description \n   /method \n   signal name= LightOn  sessionless= true \n      description The light has been turned on /description \n   /signal  /interface   Since all AllJoyn interfaces are introspectable, so are events\nand actions. The  description  tag, which supports multiple\nlanguages, is provided to give the user some information about\nwhat the event and action is.  When an event is connected to an action a sentence is formed.\nUsing the above example a connection of the two creates \"The light\nhas been turned on, Toggle the light switch\".  Like with all AllJoyn interfaces, events and actions can require\nsecurity, thus limiting those who can receive events and call\nactions.",
            "title": "Events and Actions"
        },
        {
            "location": "/learn/core/events-and-actions/#learn-more",
            "text": "See the  Events and Actions API Guide  to more\nlearn how to add Events and Actions into your application.",
            "title": "Learn more"
        },
        {
            "location": "/learn/core/",
            "text": "Core Framework\n\n\n\u6b64\u7ae0\u8282\u63cf\u8ff0\u5173\u4e8e AllJoyn\n \u7684\u6838\u5fc3\u6982\u5ff5\u3002\u5efa\u8bae AllJoyn \u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u6df1\u5165\u4e86\u89e3\u6b64\u7ae0\u8282\uff0c\u5373\u4fbf\u53ea\u5f00\u53d1\u6d89\u53ca AllJoyn \u670d\u52a1\u67b6\u6784\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\nThis section describes the AllJoyn\n Core concepts. A base high-level\nunderstanding is suggested for anyone developing AllJoyn applications,\neven if the application is only using AllJoyn Service Frameworks.\n\n\nBus Attachment\n\n\nAllJoyn \u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528 AllJoyn Bus Attachment \u8fdb\u884c\u4ea4\u4e92\u4ee5\u53ca\u8fde\u63a5\u5230 AllJoyn \u8def\u7531\u5668\u3002\n\n\n\u63a8\u5e7f\u548c\u53d1\u73b0\n\n\nAllJoyn \u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u4e24\u79cd\u673a\u5236\u6765\u63a8\u5e7f\u81ea\u5df1\u7684\u670d\u52a1\uff1a \u53d1\u5e03\u516c\u544a\u4ee5\u53ca\u8457\u540d\u540d\u79f0\u3002\u6309\u7167\u4f20\u8f93\u65b9\u5f0f\u7684\u53ef\u884c\u6027\uff0cAllJoyn \u67b6\u6784\u5c06\u5e94\u7528\u76f8\u5e94\u7684\u673a\u5236\u4ee5\u786e\u4fdd\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u5176\u4ed6 AllJoyn \u7684\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\u3002\u5bf9\u4e8e\u57fa\u4e8e IP \u534f\u8bae\u7684\u4f20\u8f93\u5c42\uff0c mDNS \u4ee5\u53ca\u591a\u8def\u4f20\u9001\u548c UDP \u5e7f\u64ad\u7684\u7ed3\u5408\u5c06\u88ab\u4f7f\u7528\u3002\nAllJoyn applications can advertise its services via two mechanisms:\nAbout Announcements and Well-Known Name. Depending on available\ntransports, the AllJoyn framework will use different mechanisms\nto ensure that the application can be discovered by other AllJoyn\napplications. For IP-based transports, mDNS and a combination of\nmulticast and broadcast UDP packets are used.\n\n\nAbout Announcements\n \u8fd9\u662f\u4e00\u79cd\u63a8\u8350\u7684\u63a8\u5e7f\u65b9\u5f0f\u3002About Announcements \u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u5bf9\u5176\u6240\u611f\u5174\u8da3\u7684\u7ec4\u7ec7\u53d1\u5e03\u4e0e\u8be5\u5e94\u7528\u7a0b\u5e8f\u4fe1\u606f\u4e00\u81f4\u7684\u4e00\u7ec4\u5143\u6570\u636e\uff0c\u4f8b\u5982\u6837\u5f0f\uff0c\u6a21\u578b\uff0c\u652f\u6301\u63a5\u53e3\u79cd\u7c7b\uff0c\u56fe\u6807\u7b49\u7b49\u3002\n\n\nWell-Known Name\n \u8fd9\u662f\u4e00\u79cd\u66f4\u52a0\u539f\u59cb\u7684\u63a8\u5e7f\u65b9\u5f0f\u3002About Announcements \u4f7f\u7528\u6b64\u673a\u5236\u3002\u9664\u5bf9\u5e95\u5c42\u529f\u80fd\u6709\u7279\u6b8a\u9700\u6c42\u7684\u5e94\u7528\u7a0b\u5e8f\u5916\uff0c\u5e94\u7528\u7a0b\u5e8f\u63a8\u8350\u4f7f\u7528 About Announcements \u673a\u5236\u3002\n\n\n\u5728\u4e24\u79cd\u673a\u5236\u4e2d\uff0c\u53d1\u73b0\u8fc7\u7a0b\u4f1a\u5bf9\u6240\u8bc6\u522b\u7684 UniqueName \u8fd4\u56de\u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u5217\u8868\u3002\u6b64\u5217\u8868\u5c06\u4f1a\u88ab\u7528\u4e8e\u672a\u6765\u4f1a\u8bdd\u7684\u521b\u5efa\u3002\n\n\n\u4e86\u89e3\u66f4\u591a\u5173\u4e8e About Announcements\n.\n\n\n\u4f1a\u8bdd\u548c\u7aef\u53e3\n\n\nAllJoyn \u67b6\u6784\u8d1f\u8d23\u5904\u7406\u4e0d\u540c AllJoyn \u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u8054\u7cfb\u7684\u5efa\u7acb\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u6b63\u5728\u88ab\u63d0\u4f9b\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u901a\u8fc7 About Announcements \u673a\u5236\u6765\u81ea\u6211\u63a8\u5e7f\u3002\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u5728\u53d1\u73b0\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff08\u4ee5\u53ca\u4ed6\u7684 UniqueName \uff09\u65f6\uff0c\u53ef\u4ee5\u521b\u5efa\u4f1a\u8bdd\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u79f0\u4f5c JoinSession. \u63d0\u4f9b\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u65b9\u53ef\u4ee5\u9009\u62e9\u63a5\u53d7\u6216\u62d2\u7edd JoinSession \u8bf7\u6c42\u3002\n\n\n\u4f1a\u8bdd\u53ef\u4ee5\u65f6\u7aef\u5bf9\u7aef\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u591a\u7aef\u7684\u3002\u7aef\u5bf9\u7aef\u4f1a\u8bdd\u5141\u8bb8\u5efa\u7acb\u4e00\u5bf9\u4e00\u7684\u8fde\u63a5\uff0c\u800c\u591a\u7aef\u4f1a\u8bdd\u5141\u8bb8\u591a\u4e2a\u8bbe\u5907\uff0f\u5e94\u7528\u7a0b\u5e8f\u5728\u4e00\u4e2a\u5bf9\u8bdd\u5185\u8fdb\u884c\u4f1a\u8bdd\u3002\n\n\n\u4e00\u4e2a\u7279\u6b8a\u7aef\u53e3\u5c06\u88ab\u7528\u4e8e\u5efa\u7acb\u4f1a\u8bdd\u3002\u4e0d\u540c\u7684\u7aef\u53e3\u88ab\u7528\u6765\u5b9e\u73b0\u7aef\u5bf9\u7aef\u4f1a\u8bdd\u548c\u591a\u7aef\u4f1a\u8bdd\u7684\u8fde\u63a5\u7ed3\u6784\u3002\u5728\u4e0b\u56fe\u5de6\u4fa7\u4e2d\uff0cA \u548c B \u540c\u65f6\u4e0e S\u7aef\u53e3 \u7684 port 1\u7aef\u5bf9\u7aef\u76f8\u8fde\u3002\u5728\u53f3\u4fa7\u4e2d\uff0cA, B, C \u5168\u90e8\u5df2\u591a\u7aef\u4f1a\u8bdd\u7684\u65b9\u5f0f\u8fde\u63a5\u5728 S \u7aef\u53e3\u7684 port 2\u4e0a\u3002\n\n\n\n\nBusObject\n\n\nAllJoyn \u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 BusObject \u7684\u62bd\u8c61\u5316\u8fdb\u884c\u4ea4\u4e92\u901a\u4fe1\u3002\u6b64\u62bd\u8c61\u5316\u4e0e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u53ef\u81ea\u7531\u8f6c\u6362\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5bf9\u8c61\u53ef\u901a\u8fc7\u5df2\u5b9a\u4e49\u63a5\u53e3\u88ab\u521b\u5efa\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6b63\u5728\u88ab\u63d0\u4f9b\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u521b\u5efa\u4e00\u4e2a BusObject . \u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u53ef\u5728\u8fdc\u7aef\u6253\u5f00 BusObject \u5e76\u8c03\u7528\u5176\u4e2d\u7684\u65b9\u6cd5\uff0c\u7c7b\u4f3c\u4e8e\u8fdc\u7aef\u8fc7\u7a0b\u8c03\u7528\u3002\n\n\nBusObject \u53ef\u4ee5\u5b9e\u73b0\u4e00\u7cfb\u5217\u7684\u63a5\u53e3\u3002\u6bcf\u4e00\u4e2a\u63a5\u53e3\u6e05\u6670\u5b9a\u4e49\u4e00\u7cfb\u5217\u7684 BusMethods, BusProperties \u548c BusSignals. BusMethods \u5141\u8bb8\u8fdc\u7aef\u5b9e\u4f53\u8c03\u7528\u5176\u4e2d\u7684\u65b9\u6cd5\u3002BusProperties \u53ef\u4ee5\u88ab\u83b7\u5f97\u5e76\u8bbe\u5b9a\u3002BusSignals \u6307\u6b63\u5728\u88ab\u63d0\u4f9b\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u53d1\u51fa\u7684\u4fe1\u53f7\u3002\n\n\nBusObject \u88ab\u9644\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u603b\u7ebf\u8def\u5f84\u4e0a\u3002\u8fd9\u6837\u505a\u53ef\u4ee5\u4f7f\u540c\u4e00\u5bf9\u8c61\u88ab\u9644\u52a0\u5728\u6709\u7740\u4e0d\u540c\u76ee\u7684\u7684\u4e0d\u540c\u7684\u603b\u7ebf\u8def\u5f84\u4e0a\uff0c\u4ece\u800c\u5e26\u6765\u5de8\u5927\u7684\u4fbf\u5229\u6027\u3002\u4f8b\u5982\uff0c\u4e00\u5e94\u7528\u7a0b\u5e8f\u6b63\u5728\u5b9e\u73b0\u7076\u53f0\u63a7\u5236\u670d\u52a1\uff0cStoveBurner BusObject\u5373\u53ef\u88ab\u9644\u5728\u591a\u4e2a\u603b\u7ebf\u8def\u5f84\u4e0a\uff0c\u5982 \u2018\uff0frange/left\u2019 \u548c \u2018\uff0frange/right\u2019\u53ef\u4ee5\u88ab\u521b\u5efa\u7528\u6765\u63a7\u5236\u5404\u4e2a\u7076\u773c\u3002\n\n\nProxyBusObject \u5bf9\u8c61\u53ef\u88ab\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u521b\u5efa\uff0c\u6765\u5b9e\u73b0\u5bf9 BusObject \u7684\u63a5\u5165\u3002\n\n\n\u603b\u7684\u6765\u8bf4\uff0c\u88ab\u63d0\u4f9b\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5efa\u7acb BusObject \u4f7f\u4ed6\u7684\u4e00\u7cfb\u5217\u670d\u52a1\u5f97\u4ee5\u63a5\u5165\u3002\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6b64\u5e94\u7528\u7a0b\u5e8f\u5efa\u7acb\u4f1a\u8bdd\u5e76\u901a\u8fc7\u5efa\u7acb ProxyBusObject\uff0c\u5728\u7279\u5b9a\u7684\u5bf9\u8c61\u8def\u5f84\u4e0a\u8fde\u63a5\u5230\u5176 BusObject. \u901a\u8fc7\u4ee5\u4e0a\u52a8\u4f5c\uff0c\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8c03\u7528 BusMethods\uff0c \u63a5\u5165 BusProperties \u5e76\u63a5\u53d7 BusSignals.\n\n\n\n\nSessionless Signal\n\n\nSessionless Signal \u662f\u4e00\u4e2a\u65e0\u9700\u624b\u52a8\u5efa\u7acb\u4f1a\u8bdd\u7684\u4fe1\u53f7\u63a5\u6536\u673a\u5236\u3002\u5728\u540e\u53f0\uff0cWell-Known Name \u63a8\u5e7f\u673a\u5236\u88ab\u7528\u6765\u544a\u77e5\u65b0\u4fe1\u53f7\u7684\u5b58\u5728\u3002\u8fdc\u7aef\u5b9e\u4f53\u81ea\u52a8\u5efa\u7acb\u4e34\u65f6\u4f1a\u8bdd\u63a5\u53d7\u6570\u636e\uff0c\u63a5\u53d7\u5b8c\u6210\u540e\u4f1a\u8bdd\u5c06\u88ab\u79fb\u9664\u3002AllJoyn Core APIs \u63d0\u4f9b\u8fd9\u4e9b\u529f\u80fd\u7684\u865a\u62df\u5316\u3002\n\n\n\u5185\u7701\u673a\u5236\n\n\n\u5185\u7701\u673a\u5236\u5185\u7f6e\u4e8e AllJoyn \u67b6\u6784\u4e2d\u3002 API \u88ab\u7528\u4e8e\u5bf9\u8fdc\u7aef AllJoyn \u5e94\u7528\u7a0b\u5e8f\u7684\u5185\u7701\uff0c\u4ece\u800c\u53d1\u73b0\u5176\u5bf9\u8c61\u8def\u5f84\u4ee5\u53ca\u5bf9\u8c61\uff1b\u6b64\u63a5\u53e3\u5305\u62ec\u6240\u6709\u65b9\u6cd5\uff1b\u6240\u6709\u53c2\u6570\u53ca\u5176\u5bf9\u5e94\u5c5e\u6027\uff0c\u4ee5\u53ca\u4fe1\u53f7\u3002\u901a\u8fc7\u81ea\u7701\u673a\u5236\uff0c\u4e00\u65b9\u53ef\u4e86\u89e3\u8fdc\u7aef\u673a\u5236\u5e76\u4e0e\u5176\u901a\u4fe1\uff0c\u800c\u65e0\u9700\u63d0\u524d\u9884\u77e5\u8fdc\u7aef\u8bbe\u5907\u7684\u5177\u4f53\u4fe1\u606f\u3002\n\n\n\u5e94\u7528\u7a0b\u5e8f\u7684\u63a5\u53e3\u4ee5\u53ca\u76f8\u5173\u65b9\u6cd5\uff0c\u4fe1\u53f7\u548c\u5c5e\u6027\u7531 XML \u8bed\u8a00\u7ec4\u7ec7\u5e76\u5b9a\u4e49\u3002\u5173\u4e8e XML \u5185\u7701\u6a21\u5f0f\u53ef\u53c2\u9605 AllSeen Alliance \u7684\u7f51\u7ad9\uff1a\nhttps://allseenalliance.org/schemas/introspect.xsd\n\n\nEvents and Actions\n\n\nEvents and Actions \u662f\u63cf\u8ff0\u5e94\u7528\u7a0b\u5e8f\u7684\u4e8b\u4ef6\u4e0e\u884c\u4e3a\u7684\u5e38\u89c4\u3002\u901a\u8fc7\u5bf9\u4fe1\u53f7\u548c\u65b9\u6cd5\u6dfb\u52a0\u7b80\u5355\u7684\u5143\u6570\u636e\u63cf\u8ff0\u7b26\uff0c\u5176\u4ed6\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u77e5\u6653\u8be5\u5e94\u7528\u7a0b\u5e8f\u5c06\u8981\u53d1\u51fa\u7684\u4e8b\u4ef6\uff0c\u4ee5\u53ca\u4f55\u79cd\u884c\u4e3a\u53ef\u88ab\u8be5\u5e94\u7528\u7a0b\u5e8f\u6240\u63a5\u53d7\u3002\u6b64\u529f\u80fd\u5b9e\u73b0\u4e86\u4e0d\u540c\u8bbe\u5907\u95f4\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0e\u4e8b\u4ef6\u4e0e\u884c\u4e3a\u7684\u52a8\u6001\u4e92\u8054\uff0c\u4ece\u800c\u5b9e\u73b0\u66f4\u590d\u6742\u7684 if-this-then-that \u63a5\u53e3\u3002\n\n\n\u4e86\u89e3\u66f4\u591a\u5173\u4e8e Events and Actions\n.\n\n\n\u5b89\u5168\u6027\n\n\nAllJoyn \u7684\u5b89\u5168\u673a\u5236\u8fd0\u4f5c\u5728\u5e94\u7528\u7ea7\u522b\uff1b\u5728\u8bbe\u5907\u7ea7\u522b\u5e76\u6ca1\u6709\u4efb\u4f55\u4fe1\u4efb\u3002\u6bcf\u4e00\u4e2a\u63a5\u53e3\u53ef\u9009\u62e9\u662f\u5426\u8981\u6c42\u5b89\u5168\u673a\u5236\u3002\u5982\u679c\u8981\u6c42\uff0c\u5728\u4e24\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u8c03\u7528\u51fd\u6570\u6216\u8005\u63a5\u53d7\u4fe1\u53f7\u65f6\u4f1a\u8981\u6c42\u8ba4\u8bc1\u3002 \u8ba4\u8bc1\u652f\u6301\u591a\u79cd\u5b89\u5168\u673a\u5236\uff0c\u5305\u62ec PIN \u7801, PSK, \u4ee5\u53ca ECDSA (Elliptical Curve Digital\nSignature Algorithm). \u4e00\u65e6\u8ba4\u8bc1\u5b8c\u6210\uff0c\u6240\u6709\u8bbe\u5907\u95f4\u7684\u4ea4\u4e92\u4fe1\u606f\u5c06\u88ab\u7528 AES\uff0d128 CCM \u52a0\u5bc6\u3002\n\n\nPutting It All Together\n\n\nAllJoyn \u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 Bus Attachment \u4e0e AllJoyn \u67b6\u6784\u4ea4\u4e92\u3002\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 About Announcement \u5ba3\u4f20\u5176\u670d\u52a1\uff0c\u8fd9\u5c06\u4f1a\u5217\u51fa\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u5143\u6570\u636e\uff0c\u5305\u62ec\u6240\u6709\u88ab\u652f\u6301\u7684\u63a5\u53e3\u3002\u5728\u53d1\u73b0\u8fc7\u7a0b\u4e2d\uff0cUniqueName \u5c06\u4f1a\u4f5c\u4e3a\u8fd4\u56de\u503c\u7528\u6765\u8bc6\u522b\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n\u5f53\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c \u4e00\u4e2a\u7531\u6307\u5b9a\u7aef\u53e3\u8fde\u63a5\u7684\u4f1a\u8bdd\u53ef\u88ab\u521b\u5efa\u3002\u6b64\u4f1a\u8bdd\u53ef\u4ee5\u662f\u7aef\u5bf9\u7aef\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u591a\u7aef\u7684\u3002AllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u63a5\u53d7\u6216\u62d2\u7edd\u8be5\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u53d1\u51fa\u7684\u4f1a\u8bdd\u8bf7\u6c42\u3002\n\n\n\u5728\u521b\u5efa\u4f1a\u8bdd\u524d\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5efa\u7acb\u4efb\u610f\u4e2a\u603b\u7ebf\u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u7f6e\u5165\u6307\u5b9a\u7684\u5bf9\u8c61\u8def\u5f84\u4e2d\u3002\u6bcf\u4e00\u4e2a\u603b\u7ebf\u5bf9\u8c61\u53ef\u5b9e\u73b0\u7531\u4e00\u7cfb\u5217\u65b9\u6cd5\uff0c\u5c5e\u6027\u53ca\u4fe1\u53f7\u5b9a\u4e49\u7684\u63a5\u53e3\u3002\n\n\n\u4f1a\u8bdd\u521b\u5efa\u540e\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u4f1a\u521b\u5efa\u4e00\u4e2a\u672c\u5730\u7684 ProxyBusObject \u901a\u8fc7\u8c03\u7528\u65b9\u6cd5\uff0c\u83b7\u53d6\u53ca\u8bbe\u5b9a\u5c5e\u6027\u4ee5\u53ca\u63a5\u6536\u4fe1\u53f7\u4e0e BusObject \u4ea4\u4e92\uff0c\u4ece\u800c\u5b9e\u73b0\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u901a\u8bdd\u3002\n\n\n\n\n\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u5ba2\u6237\u7aef\u53d1\u73b0\uff0c\u4f1a\u8bdd\u5efa\u7acb\u4ee5\u53ca\u4ee3\u7406\u5bf9\u8c61\u7ba1\u7406\u90fd\u9075\u5faa\u4e00\u4e2a\u901a\u8fc7\u5e94\u7528\u7a0b\u5e8f\u7684\u516c\u5171\u7684\uff0c\u7b80\u5355\u7684\u6a21\u5f0f\u3002Standard Core \u8d44\u6e90\u5e93\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684 API \uff0c \u5b9a\u4e49\u5728 \nObserver\n \u7c7b\u4e2d\u3002 Observer \u7c7b\u5b9e\u73b0\u4e86\u5ba2\u6237\u5e94\u7528\u7a0b\u5e8f\u5bf9\u4e8e About Announcement \u53e5\u6cd5\u5206\u6790\uff0c\u4f1a\u8bdd\u7ba1\u7406\u4ee5\u53ca\u4ee3\u7406\u5bf9\u8c61\u521b\u5efa\u7684\u81ea\u52a8\u5316\u64cd\u4f5c\u3002\n\n\n\u4e86\u89e3\u66f4\u591a\n\n\n\n\n\u4e86\u89e3\u66f4\u591a\u5173\u4e8e AllJoyn Standard Core\n\n\n\u4e86\u89e3\u66f4\u591a\u5173\u4e8e AllJoyn Thin Core\n\n\n\u4e86\u89e3\u66f4\u591a\u5173\u4e8e AllJoyn system \u7684\u5e95\u5c42\u7ec6\u8282",
            "title": "Home"
        },
        {
            "location": "/learn/core/#core-framework",
            "text": "\u6b64\u7ae0\u8282\u63cf\u8ff0\u5173\u4e8e AllJoyn  \u7684\u6838\u5fc3\u6982\u5ff5\u3002\u5efa\u8bae AllJoyn \u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u6df1\u5165\u4e86\u89e3\u6b64\u7ae0\u8282\uff0c\u5373\u4fbf\u53ea\u5f00\u53d1\u6d89\u53ca AllJoyn \u670d\u52a1\u67b6\u6784\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\nThis section describes the AllJoyn  Core concepts. A base high-level\nunderstanding is suggested for anyone developing AllJoyn applications,\neven if the application is only using AllJoyn Service Frameworks.",
            "title": "Core Framework"
        },
        {
            "location": "/learn/core/#bus-attachment",
            "text": "AllJoyn \u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528 AllJoyn Bus Attachment \u8fdb\u884c\u4ea4\u4e92\u4ee5\u53ca\u8fde\u63a5\u5230 AllJoyn \u8def\u7531\u5668\u3002",
            "title": "Bus Attachment"
        },
        {
            "location": "/learn/core/#_1",
            "text": "AllJoyn \u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u4e24\u79cd\u673a\u5236\u6765\u63a8\u5e7f\u81ea\u5df1\u7684\u670d\u52a1\uff1a \u53d1\u5e03\u516c\u544a\u4ee5\u53ca\u8457\u540d\u540d\u79f0\u3002\u6309\u7167\u4f20\u8f93\u65b9\u5f0f\u7684\u53ef\u884c\u6027\uff0cAllJoyn \u67b6\u6784\u5c06\u5e94\u7528\u76f8\u5e94\u7684\u673a\u5236\u4ee5\u786e\u4fdd\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u5176\u4ed6 AllJoyn \u7684\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\u3002\u5bf9\u4e8e\u57fa\u4e8e IP \u534f\u8bae\u7684\u4f20\u8f93\u5c42\uff0c mDNS \u4ee5\u53ca\u591a\u8def\u4f20\u9001\u548c UDP \u5e7f\u64ad\u7684\u7ed3\u5408\u5c06\u88ab\u4f7f\u7528\u3002\nAllJoyn applications can advertise its services via two mechanisms:\nAbout Announcements and Well-Known Name. Depending on available\ntransports, the AllJoyn framework will use different mechanisms\nto ensure that the application can be discovered by other AllJoyn\napplications. For IP-based transports, mDNS and a combination of\nmulticast and broadcast UDP packets are used.  About Announcements  \u8fd9\u662f\u4e00\u79cd\u63a8\u8350\u7684\u63a8\u5e7f\u65b9\u5f0f\u3002About Announcements \u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u5bf9\u5176\u6240\u611f\u5174\u8da3\u7684\u7ec4\u7ec7\u53d1\u5e03\u4e0e\u8be5\u5e94\u7528\u7a0b\u5e8f\u4fe1\u606f\u4e00\u81f4\u7684\u4e00\u7ec4\u5143\u6570\u636e\uff0c\u4f8b\u5982\u6837\u5f0f\uff0c\u6a21\u578b\uff0c\u652f\u6301\u63a5\u53e3\u79cd\u7c7b\uff0c\u56fe\u6807\u7b49\u7b49\u3002  Well-Known Name  \u8fd9\u662f\u4e00\u79cd\u66f4\u52a0\u539f\u59cb\u7684\u63a8\u5e7f\u65b9\u5f0f\u3002About Announcements \u4f7f\u7528\u6b64\u673a\u5236\u3002\u9664\u5bf9\u5e95\u5c42\u529f\u80fd\u6709\u7279\u6b8a\u9700\u6c42\u7684\u5e94\u7528\u7a0b\u5e8f\u5916\uff0c\u5e94\u7528\u7a0b\u5e8f\u63a8\u8350\u4f7f\u7528 About Announcements \u673a\u5236\u3002  \u5728\u4e24\u79cd\u673a\u5236\u4e2d\uff0c\u53d1\u73b0\u8fc7\u7a0b\u4f1a\u5bf9\u6240\u8bc6\u522b\u7684 UniqueName \u8fd4\u56de\u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u5217\u8868\u3002\u6b64\u5217\u8868\u5c06\u4f1a\u88ab\u7528\u4e8e\u672a\u6765\u4f1a\u8bdd\u7684\u521b\u5efa\u3002  \u4e86\u89e3\u66f4\u591a\u5173\u4e8e About Announcements .",
            "title": "\u63a8\u5e7f\u548c\u53d1\u73b0"
        },
        {
            "location": "/learn/core/#_2",
            "text": "AllJoyn \u67b6\u6784\u8d1f\u8d23\u5904\u7406\u4e0d\u540c AllJoyn \u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u8054\u7cfb\u7684\u5efa\u7acb\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u6b63\u5728\u88ab\u63d0\u4f9b\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u901a\u8fc7 About Announcements \u673a\u5236\u6765\u81ea\u6211\u63a8\u5e7f\u3002\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u5728\u53d1\u73b0\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff08\u4ee5\u53ca\u4ed6\u7684 UniqueName \uff09\u65f6\uff0c\u53ef\u4ee5\u521b\u5efa\u4f1a\u8bdd\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u79f0\u4f5c JoinSession. \u63d0\u4f9b\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u65b9\u53ef\u4ee5\u9009\u62e9\u63a5\u53d7\u6216\u62d2\u7edd JoinSession \u8bf7\u6c42\u3002  \u4f1a\u8bdd\u53ef\u4ee5\u65f6\u7aef\u5bf9\u7aef\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u591a\u7aef\u7684\u3002\u7aef\u5bf9\u7aef\u4f1a\u8bdd\u5141\u8bb8\u5efa\u7acb\u4e00\u5bf9\u4e00\u7684\u8fde\u63a5\uff0c\u800c\u591a\u7aef\u4f1a\u8bdd\u5141\u8bb8\u591a\u4e2a\u8bbe\u5907\uff0f\u5e94\u7528\u7a0b\u5e8f\u5728\u4e00\u4e2a\u5bf9\u8bdd\u5185\u8fdb\u884c\u4f1a\u8bdd\u3002  \u4e00\u4e2a\u7279\u6b8a\u7aef\u53e3\u5c06\u88ab\u7528\u4e8e\u5efa\u7acb\u4f1a\u8bdd\u3002\u4e0d\u540c\u7684\u7aef\u53e3\u88ab\u7528\u6765\u5b9e\u73b0\u7aef\u5bf9\u7aef\u4f1a\u8bdd\u548c\u591a\u7aef\u4f1a\u8bdd\u7684\u8fde\u63a5\u7ed3\u6784\u3002\u5728\u4e0b\u56fe\u5de6\u4fa7\u4e2d\uff0cA \u548c B \u540c\u65f6\u4e0e S\u7aef\u53e3 \u7684 port 1\u7aef\u5bf9\u7aef\u76f8\u8fde\u3002\u5728\u53f3\u4fa7\u4e2d\uff0cA, B, C \u5168\u90e8\u5df2\u591a\u7aef\u4f1a\u8bdd\u7684\u65b9\u5f0f\u8fde\u63a5\u5728 S \u7aef\u53e3\u7684 port 2\u4e0a\u3002",
            "title": "\u4f1a\u8bdd\u548c\u7aef\u53e3"
        },
        {
            "location": "/learn/core/#busobject",
            "text": "AllJoyn \u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 BusObject \u7684\u62bd\u8c61\u5316\u8fdb\u884c\u4ea4\u4e92\u901a\u4fe1\u3002\u6b64\u62bd\u8c61\u5316\u4e0e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u53ef\u81ea\u7531\u8f6c\u6362\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5bf9\u8c61\u53ef\u901a\u8fc7\u5df2\u5b9a\u4e49\u63a5\u53e3\u88ab\u521b\u5efa\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6b63\u5728\u88ab\u63d0\u4f9b\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u521b\u5efa\u4e00\u4e2a BusObject . \u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u53ef\u5728\u8fdc\u7aef\u6253\u5f00 BusObject \u5e76\u8c03\u7528\u5176\u4e2d\u7684\u65b9\u6cd5\uff0c\u7c7b\u4f3c\u4e8e\u8fdc\u7aef\u8fc7\u7a0b\u8c03\u7528\u3002  BusObject \u53ef\u4ee5\u5b9e\u73b0\u4e00\u7cfb\u5217\u7684\u63a5\u53e3\u3002\u6bcf\u4e00\u4e2a\u63a5\u53e3\u6e05\u6670\u5b9a\u4e49\u4e00\u7cfb\u5217\u7684 BusMethods, BusProperties \u548c BusSignals. BusMethods \u5141\u8bb8\u8fdc\u7aef\u5b9e\u4f53\u8c03\u7528\u5176\u4e2d\u7684\u65b9\u6cd5\u3002BusProperties \u53ef\u4ee5\u88ab\u83b7\u5f97\u5e76\u8bbe\u5b9a\u3002BusSignals \u6307\u6b63\u5728\u88ab\u63d0\u4f9b\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u53d1\u51fa\u7684\u4fe1\u53f7\u3002  BusObject \u88ab\u9644\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u603b\u7ebf\u8def\u5f84\u4e0a\u3002\u8fd9\u6837\u505a\u53ef\u4ee5\u4f7f\u540c\u4e00\u5bf9\u8c61\u88ab\u9644\u52a0\u5728\u6709\u7740\u4e0d\u540c\u76ee\u7684\u7684\u4e0d\u540c\u7684\u603b\u7ebf\u8def\u5f84\u4e0a\uff0c\u4ece\u800c\u5e26\u6765\u5de8\u5927\u7684\u4fbf\u5229\u6027\u3002\u4f8b\u5982\uff0c\u4e00\u5e94\u7528\u7a0b\u5e8f\u6b63\u5728\u5b9e\u73b0\u7076\u53f0\u63a7\u5236\u670d\u52a1\uff0cStoveBurner BusObject\u5373\u53ef\u88ab\u9644\u5728\u591a\u4e2a\u603b\u7ebf\u8def\u5f84\u4e0a\uff0c\u5982 \u2018\uff0frange/left\u2019 \u548c \u2018\uff0frange/right\u2019\u53ef\u4ee5\u88ab\u521b\u5efa\u7528\u6765\u63a7\u5236\u5404\u4e2a\u7076\u773c\u3002  ProxyBusObject \u5bf9\u8c61\u53ef\u88ab\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u521b\u5efa\uff0c\u6765\u5b9e\u73b0\u5bf9 BusObject \u7684\u63a5\u5165\u3002  \u603b\u7684\u6765\u8bf4\uff0c\u88ab\u63d0\u4f9b\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5efa\u7acb BusObject \u4f7f\u4ed6\u7684\u4e00\u7cfb\u5217\u670d\u52a1\u5f97\u4ee5\u63a5\u5165\u3002\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6b64\u5e94\u7528\u7a0b\u5e8f\u5efa\u7acb\u4f1a\u8bdd\u5e76\u901a\u8fc7\u5efa\u7acb ProxyBusObject\uff0c\u5728\u7279\u5b9a\u7684\u5bf9\u8c61\u8def\u5f84\u4e0a\u8fde\u63a5\u5230\u5176 BusObject. \u901a\u8fc7\u4ee5\u4e0a\u52a8\u4f5c\uff0c\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8c03\u7528 BusMethods\uff0c \u63a5\u5165 BusProperties \u5e76\u63a5\u53d7 BusSignals.",
            "title": "BusObject"
        },
        {
            "location": "/learn/core/#sessionless-signal",
            "text": "Sessionless Signal \u662f\u4e00\u4e2a\u65e0\u9700\u624b\u52a8\u5efa\u7acb\u4f1a\u8bdd\u7684\u4fe1\u53f7\u63a5\u6536\u673a\u5236\u3002\u5728\u540e\u53f0\uff0cWell-Known Name \u63a8\u5e7f\u673a\u5236\u88ab\u7528\u6765\u544a\u77e5\u65b0\u4fe1\u53f7\u7684\u5b58\u5728\u3002\u8fdc\u7aef\u5b9e\u4f53\u81ea\u52a8\u5efa\u7acb\u4e34\u65f6\u4f1a\u8bdd\u63a5\u53d7\u6570\u636e\uff0c\u63a5\u53d7\u5b8c\u6210\u540e\u4f1a\u8bdd\u5c06\u88ab\u79fb\u9664\u3002AllJoyn Core APIs \u63d0\u4f9b\u8fd9\u4e9b\u529f\u80fd\u7684\u865a\u62df\u5316\u3002",
            "title": "Sessionless Signal"
        },
        {
            "location": "/learn/core/#_3",
            "text": "\u5185\u7701\u673a\u5236\u5185\u7f6e\u4e8e AllJoyn \u67b6\u6784\u4e2d\u3002 API \u88ab\u7528\u4e8e\u5bf9\u8fdc\u7aef AllJoyn \u5e94\u7528\u7a0b\u5e8f\u7684\u5185\u7701\uff0c\u4ece\u800c\u53d1\u73b0\u5176\u5bf9\u8c61\u8def\u5f84\u4ee5\u53ca\u5bf9\u8c61\uff1b\u6b64\u63a5\u53e3\u5305\u62ec\u6240\u6709\u65b9\u6cd5\uff1b\u6240\u6709\u53c2\u6570\u53ca\u5176\u5bf9\u5e94\u5c5e\u6027\uff0c\u4ee5\u53ca\u4fe1\u53f7\u3002\u901a\u8fc7\u81ea\u7701\u673a\u5236\uff0c\u4e00\u65b9\u53ef\u4e86\u89e3\u8fdc\u7aef\u673a\u5236\u5e76\u4e0e\u5176\u901a\u4fe1\uff0c\u800c\u65e0\u9700\u63d0\u524d\u9884\u77e5\u8fdc\u7aef\u8bbe\u5907\u7684\u5177\u4f53\u4fe1\u606f\u3002  \u5e94\u7528\u7a0b\u5e8f\u7684\u63a5\u53e3\u4ee5\u53ca\u76f8\u5173\u65b9\u6cd5\uff0c\u4fe1\u53f7\u548c\u5c5e\u6027\u7531 XML \u8bed\u8a00\u7ec4\u7ec7\u5e76\u5b9a\u4e49\u3002\u5173\u4e8e XML \u5185\u7701\u6a21\u5f0f\u53ef\u53c2\u9605 AllSeen Alliance \u7684\u7f51\u7ad9\uff1a\nhttps://allseenalliance.org/schemas/introspect.xsd",
            "title": "\u5185\u7701\u673a\u5236"
        },
        {
            "location": "/learn/core/#events-and-actions",
            "text": "Events and Actions \u662f\u63cf\u8ff0\u5e94\u7528\u7a0b\u5e8f\u7684\u4e8b\u4ef6\u4e0e\u884c\u4e3a\u7684\u5e38\u89c4\u3002\u901a\u8fc7\u5bf9\u4fe1\u53f7\u548c\u65b9\u6cd5\u6dfb\u52a0\u7b80\u5355\u7684\u5143\u6570\u636e\u63cf\u8ff0\u7b26\uff0c\u5176\u4ed6\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u77e5\u6653\u8be5\u5e94\u7528\u7a0b\u5e8f\u5c06\u8981\u53d1\u51fa\u7684\u4e8b\u4ef6\uff0c\u4ee5\u53ca\u4f55\u79cd\u884c\u4e3a\u53ef\u88ab\u8be5\u5e94\u7528\u7a0b\u5e8f\u6240\u63a5\u53d7\u3002\u6b64\u529f\u80fd\u5b9e\u73b0\u4e86\u4e0d\u540c\u8bbe\u5907\u95f4\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0e\u4e8b\u4ef6\u4e0e\u884c\u4e3a\u7684\u52a8\u6001\u4e92\u8054\uff0c\u4ece\u800c\u5b9e\u73b0\u66f4\u590d\u6742\u7684 if-this-then-that \u63a5\u53e3\u3002  \u4e86\u89e3\u66f4\u591a\u5173\u4e8e Events and Actions .",
            "title": "Events and Actions"
        },
        {
            "location": "/learn/core/#_4",
            "text": "AllJoyn \u7684\u5b89\u5168\u673a\u5236\u8fd0\u4f5c\u5728\u5e94\u7528\u7ea7\u522b\uff1b\u5728\u8bbe\u5907\u7ea7\u522b\u5e76\u6ca1\u6709\u4efb\u4f55\u4fe1\u4efb\u3002\u6bcf\u4e00\u4e2a\u63a5\u53e3\u53ef\u9009\u62e9\u662f\u5426\u8981\u6c42\u5b89\u5168\u673a\u5236\u3002\u5982\u679c\u8981\u6c42\uff0c\u5728\u4e24\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u8c03\u7528\u51fd\u6570\u6216\u8005\u63a5\u53d7\u4fe1\u53f7\u65f6\u4f1a\u8981\u6c42\u8ba4\u8bc1\u3002 \u8ba4\u8bc1\u652f\u6301\u591a\u79cd\u5b89\u5168\u673a\u5236\uff0c\u5305\u62ec PIN \u7801, PSK, \u4ee5\u53ca ECDSA (Elliptical Curve Digital\nSignature Algorithm). \u4e00\u65e6\u8ba4\u8bc1\u5b8c\u6210\uff0c\u6240\u6709\u8bbe\u5907\u95f4\u7684\u4ea4\u4e92\u4fe1\u606f\u5c06\u88ab\u7528 AES\uff0d128 CCM \u52a0\u5bc6\u3002",
            "title": "\u5b89\u5168\u6027"
        },
        {
            "location": "/learn/core/#putting-it-all-together",
            "text": "AllJoyn \u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 Bus Attachment \u4e0e AllJoyn \u67b6\u6784\u4ea4\u4e92\u3002\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 About Announcement \u5ba3\u4f20\u5176\u670d\u52a1\uff0c\u8fd9\u5c06\u4f1a\u5217\u51fa\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u5143\u6570\u636e\uff0c\u5305\u62ec\u6240\u6709\u88ab\u652f\u6301\u7684\u63a5\u53e3\u3002\u5728\u53d1\u73b0\u8fc7\u7a0b\u4e2d\uff0cUniqueName \u5c06\u4f1a\u4f5c\u4e3a\u8fd4\u56de\u503c\u7528\u6765\u8bc6\u522b\u5e94\u7528\u7a0b\u5e8f\u3002  \u5f53\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c \u4e00\u4e2a\u7531\u6307\u5b9a\u7aef\u53e3\u8fde\u63a5\u7684\u4f1a\u8bdd\u53ef\u88ab\u521b\u5efa\u3002\u6b64\u4f1a\u8bdd\u53ef\u4ee5\u662f\u7aef\u5bf9\u7aef\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u591a\u7aef\u7684\u3002AllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u63a5\u53d7\u6216\u62d2\u7edd\u8be5\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u53d1\u51fa\u7684\u4f1a\u8bdd\u8bf7\u6c42\u3002  \u5728\u521b\u5efa\u4f1a\u8bdd\u524d\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5efa\u7acb\u4efb\u610f\u4e2a\u603b\u7ebf\u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u7f6e\u5165\u6307\u5b9a\u7684\u5bf9\u8c61\u8def\u5f84\u4e2d\u3002\u6bcf\u4e00\u4e2a\u603b\u7ebf\u5bf9\u8c61\u53ef\u5b9e\u73b0\u7531\u4e00\u7cfb\u5217\u65b9\u6cd5\uff0c\u5c5e\u6027\u53ca\u4fe1\u53f7\u5b9a\u4e49\u7684\u63a5\u53e3\u3002  \u4f1a\u8bdd\u521b\u5efa\u540e\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u8fdc\u7aef\u5e94\u7528\u7a0b\u5e8f\u4f1a\u521b\u5efa\u4e00\u4e2a\u672c\u5730\u7684 ProxyBusObject \u901a\u8fc7\u8c03\u7528\u65b9\u6cd5\uff0c\u83b7\u53d6\u53ca\u8bbe\u5b9a\u5c5e\u6027\u4ee5\u53ca\u63a5\u6536\u4fe1\u53f7\u4e0e BusObject \u4ea4\u4e92\uff0c\u4ece\u800c\u5b9e\u73b0\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u901a\u8bdd\u3002   \u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u5ba2\u6237\u7aef\u53d1\u73b0\uff0c\u4f1a\u8bdd\u5efa\u7acb\u4ee5\u53ca\u4ee3\u7406\u5bf9\u8c61\u7ba1\u7406\u90fd\u9075\u5faa\u4e00\u4e2a\u901a\u8fc7\u5e94\u7528\u7a0b\u5e8f\u7684\u516c\u5171\u7684\uff0c\u7b80\u5355\u7684\u6a21\u5f0f\u3002Standard Core \u8d44\u6e90\u5e93\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684 API \uff0c \u5b9a\u4e49\u5728  Observer  \u7c7b\u4e2d\u3002 Observer \u7c7b\u5b9e\u73b0\u4e86\u5ba2\u6237\u5e94\u7528\u7a0b\u5e8f\u5bf9\u4e8e About Announcement \u53e5\u6cd5\u5206\u6790\uff0c\u4f1a\u8bdd\u7ba1\u7406\u4ee5\u53ca\u4ee3\u7406\u5bf9\u8c61\u521b\u5efa\u7684\u81ea\u52a8\u5316\u64cd\u4f5c\u3002",
            "title": "Putting It All Together"
        },
        {
            "location": "/learn/core/#_5",
            "text": "\u4e86\u89e3\u66f4\u591a\u5173\u4e8e AllJoyn Standard Core  \u4e86\u89e3\u66f4\u591a\u5173\u4e8e AllJoyn Thin Core  \u4e86\u89e3\u66f4\u591a\u5173\u4e8e AllJoyn system \u7684\u5e95\u5c42\u7ec6\u8282",
            "title": "\u4e86\u89e3\u66f4\u591a"
        },
        {
            "location": "/learn/core/standard-core/",
            "text": "AllJoyn\n Standard Core\n\n\n\u6982\u89c8\n\n\nAllJoyn \u6846\u67b6\u662f\u4e00\u4e2a\u5f00\u6e90\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e3a\u5f3a\u8c03\u79fb\u52a8\u6027\uff0c\u5b89\u5168\u6027\u4ee5\u53ca\u52a8\u6001\u914d\u7f6e\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u8fd0\u884c\u73af\u5883\u3002AllJoyn \u7cfb\u7edf\u53ef\u5904\u7406\u5f02\u6784\u5206\u5e03\u5f0f\u7cfb\u7edf\u6240\u56fa\u6709\u7684\u590d\u6742 \u95ee\u9898\uff0c\u5305\u62ec\u53ef\u79fb\u52a8\u6027\u4ecb\u5165\u540e\u6240\u5e26\u6765\u7684\u7279\u6b8a\u95ee\u9898\u3002\u501f\u6b64\u5e2e\u52a9\uff0c\u7a0b\u5e8f\u5f00\u53d1\u8005\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u89e3\u51b3\u6838\u5fc3\u95ee\u9898\u3002\n\n\nAllJoyn \u6846\u67b6\u662f\u201c\u5e73\u53f0\u65e0\u5173\u201d\u7684\uff0c\u5176\u8bbe\u8ba1\u521d\u8877\u4e3a\u5c3d\u6700\u5927\u53ef\u80fd\u72ec\u7acb\u4e8e\u8fd0\u884c\u8bbe\u5907\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u786c\u4ef6\u53ca\u8f6f\u4ef6\u7279\u6027\u3002AllJoyn \u6846\u67b6\u88ab\u8bbe\u8ba1\u5e94\u7528\u4e8e Microsoft Windows, Li- nux, Android, iOS, OS X, \u4ee5\u53ca OpenWRT \u5e73\u53f0\u3002\n\n\n\u4eb2\u8fd1\u6027\u4e0e\u79fb\u52a8\u6027\u4e00\u503c\u4fdd\u7559\u5728 AllJoyn \u6846\u67b6\u7684\u8bbe\u8ba1\u7406\u5ff5\u5f53\u4e2d\u3002\u5728\u79fb\u52a8\u73af\u5883\u4e2d\uff0c\u8bbe\u5907\u4f1a\u4e0d\u505c\u5730\u8fdb\u5165\uff0c\u79bb\u5f00\u5176\u4ed6\u8bbe\u5907\u7684\u90bb\u57df\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u57fa\u7840\u7f51\u7edc\u5bb9\u91cf\u4e5f\u4f1a\u53d1\u751f\u53d8\u5316\u3002\n\n\nAllJoyn SDKs \u53ef\u5728\u4ee5\u4e0b\u7f51\u5740\u83b7\u5f97 (http://www.allseenalliance.org).\n\n\n\u53ef\u7528 AllJoyn \u6846\u67b6\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\u7c7b\u522b\u4ec5\u4ec5\u53d7\u9650\u4e8e\u5f00\u53d1\u8005\u7684\u60f3\u50cf\u529b\u3002\u4f8b\u5982\u793e\u4ea4\u7f51\u7edc\u7684\u62d3\u5c55\u3002\u7528\u6237\u53ef\u4ee5\u5efa\u7acb\u4e2a\u4eba\u7b80\u4ecb\u5e76\u5b9a\u4e49\u559c\u597d\u548c\u5174\u8da3\u3002\u5728\u8fdb\u5165\u4e00\u4e2a\u4f4d\u7f6e\u65f6\uff0c\u652f\u6301 AllJoyn \u7684\u8bbe\u5907\u5c06\u4f1a\u7acb\u5373\u53d1\u73b0\u5468\u8fb9\u6709\u7740\u5171\u540c\u5174\u8da3\u7684\u540c\u597d\uff0c\u5e76\u4e0e\u5176\u5efa\u7acb\u901a\u4fe1\u7f51\u7edc\u4ee5\u5b9e\u73b0\u901a\u4fe1\u53ca\u4fe1\u606f\u4ea4\u6362\u3002\n\n\n\u73b0\u5982\u4eca\u5927\u591a\u6570\u8bbe\u5907\u90fd\u5df2\u96c6\u6210 Wi-Fi\uff0c\u5982\u6b64\uff0c\u5f53\u4e24\u540d\u7528\u6237\u6b65\u5165\u5e26\u6709 Wi-Fi \u70ed\u70b9\u7684\u4f4f\u5b85\u6216\u529e\u516c\u5ba4\u65f6\uff0c\u4ed6\u4eec\u7684\u8bbe\u5907\u53ef\u8fde\u63a5\u5230\u63a5\u89e6\u7f51\u7edc\u63a5\u5165\u70b9\uff0c\u5e76\u516c \u5f00\u5229\u7528\u9644\u52a0\u7684\u7f51\u7edc\u5bb9\u91cf\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u8bbe\u5907\u8fd8\u53ef\u4ee5\u5728\u5176\u53ef\u89c1\u57df\u5185\uff08\u53d6\u51b3\u4e8eWi-Fi\u7684\u8986\u76d6\u9762\u79ef\uff09\u5bf9\u5176\u4ed6\u8bbe\u5907\u8fdb\u884c\u5b9a\u4f4d\uff0c\u540c\u65f6\u53ef\u9009\u62e9\u53d1\u73b0\u5e76\u4f7f\u7528\u5176\u4ed6 \u8bbe\u5907\u63d0\u4f9b\u7684\u5404\u79cd\u670d\u52a1\u3002\u8fdb\u4e00\u6b65\uff0c\u501f\u52a9\u6df7\u5408\u62d3\u8865\u7ed3\u6784\uff0c\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5e94\u7528\u4e86 AllJoyn Thin\u5e93\u7684\u8bbe\u5907\u5b9a\u4e49\u4e3a\u5e94\u7528\u84dd\u7259\u7684\u4f20\u8f93\u673a\uff0c\u7531\u6b64\u4fbf\u53ef\u4e0e\u5176\u4ed6\u8fde \u63a5\u5230 Wi-Fi \u7684\u8bbe\u5907\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\n\n\n\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\u662f\u5728\u5b9e\u65f6\u591a\u73a9\u5bb6\u6e38\u620f\u4e0a\u7684\u5e94\u7528\u3002\u4f8b\u5982\uff0c\u4e00\u6b3e\u591a\u73a9\u5bb6\u6e38\u620f\u53ef\u4ee5\u8fd0\u884c\u5728\u8bf8\u5982\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u5e73\u677f\u7535\u8111\u4ee5\u53ca\u624b\u6301\u8bbe\u5907\u4e0a\uff0c\u57fa\u7840\u7f51\u7edc\u6280\u672f\uff08\u4f8b\u5982 Wi-Fi\uff09\u4e5f\u4e0d\u5c3d\u76f8\u540c\u3002\u8fd9\u4e9b\u6240\u6709\u7684\u57fa\u7840\u8bbe\u65bd\u7ec6\u8282\u7ba1\u7406\u90fd\u53ef\u4ee5\u7ecf\u7531 AllJoyn \u67b6\u6784\u5904\u7406\uff0c\u8fd9\u4f7f\u5f97\u6e38\u620f\u4f5c\u8005\u53ef\u4ee5\u5c06\u5168\u90e8\u7cbe\u529b\u6295\u5165\u6e38\u620f\u8bbe\u8ba1\u4e0e \u4e0e\u5b9e\u73b0\u4e0a\uff0c\u800c\u4e0d\u5fc5\u8003\u8651\u70b9\u5bf9\u70b9\u7f51\u7edc\u7684\u590d\u6742\u5ea6\u3002\n\n\n\u4f5c\u4e3a AllJoyn \u751f\u6001\u7cfb\u7edf\u7684\u5ef6\u4f38\uff0c \u8fd8\u6709\u5f88\u591a\u5e94\u7528\u7a0b\u5e8f\u521b\u610f\u3002\u4f8b\u5982\uff1a\n\n\n\n\n\u521b\u5efa\u4e00\u4e2a\u97f3\u4e50\u64ad\u653e\u5217\u8868\uff0c\u5c06\u6b4c\u66f2\u5171\u4eab\u5230\u652f\u6301 AllJoyn \u7684\u8f66\u8f7d\u97f3\u54cd\u7cfb\u7edf\u4e2d\uff0c\u6216\u8005\u5c06\u6b4c\u66f2\u50a8\u5b58\u5230\u5bb6\u5ead\u97f3\u54cd\u4e2d \uff08\u53d7\u5230\u6570\u5b57\u7248\u6743\u4fdd\u62a4\uff09\u3002\n\n\n\u5728\u6d3b\u52a8\u6216\u65c5\u7a0b\u7ed3\u675f\u540e\u7684\u7684\u8fd4\u7a0b\u8def\u4e0a\uff0c\u5c06\u7167\u7247\u6216\u5176\u4ed6\u5a92\u4f53\u6587\u4ef6\u540c\u6b65\u81f3\u652f\u6301 AllJoyn \u7684\u7535\u89c6\u4e2d\n\n\n\u8fdc\u7a0b\u63a7\u5236\u5bb6\u7528\u7535\u5668\uff0c\u4f8b\u5982\u7535\u89c6\u673a\uff0c\u6570\u5b57\u76d1\u63a7\u7cfb\u7edf\uff0c\u6e38\u620f\u673a\u7b49\u3002\n\n\n\u5728\u5c40\u57df\u7f51\u5185\u4e0e\u7b14\u8bb0\u672c\u7535\u8111\u548c\u53f0\u5f0f\u673a\u4e92\u52a8\u5e76\u5206\u4eab\u5185\u5bb9\u3002\n\n\n\u5728\u4f01\u4e1a\u6216\u6559\u80b2\u573a\u666f\u4e2d\uff0c\u5b8c\u6210\u540c\u4e8b\u6216\u5b66\u751f\u4e4b\u95f4\u9879\u76ee\u5408\u4f5c\u3002\n\n\n\u63d0\u4f9b\u9002\u5730\u6027\u670d\u52a1\uff0c\u4f8b\u5982\u53d1\u653e\u4f18\u60e0\u5238\u6216 vcards. \n\n\n\n\nAllJoyn \u67b6\u6784\u7684\u4f18\u52bf\n\n\n\u4e4b\u524d\u5df2\u63d0\u53ca\uff0cAllJoyn \u67b6\u6784\u662f\u4e00\u4e2a\u5e73\u53f0\u65e0\u5173\u7684\u7cfb\u7edf\uff0c\u65e8\u5728\u7b80\u5316\u5206\u5e03\u5728\u5f02\u6784\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e0a\u7684\u90bb\u8fd1\u7f51\u7edc\u3002\n\n\n\u5f02\u6784\u5728\u8fd9\u91cc\u4e0d\u4ec5\u6307\u4ee3\u4e0d\u540c\u8bbe\u5907\uff0c\u8fd8\u6307\u8fd0\u884c\u5728\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u5e94\u7528\u4e0d\u540c\u901a\u4fe1\u673a\u5236\u7684\u4e0d\u540c\u79cd\u7c7b\u7684\u8bbe\u5907\uff08\u4f8b\u5982\uff0c\u4e2a\u4eba\u7535\u8111\uff0c\u624b\u6301\u8bbe\u5907\uff0c\u5e73\u677f\u7535\u8111\uff0c\u6d88\u8d39\u7c7b\u7535\u5b50\u4ea7\u54c1\uff09\u3002\n\n\n\u5f00\u6e90\n\n\nAllJoyn \u67b6\u6784\u4e00\u8d2f\u662f\u5f00\u6e90\u5f00\u53d1\u3002\u6240\u6709\u7684 AllJoyn \u4ee3\u7801\u5e93\u90fd\u5f00\u653e\u68c0\u89c6\u5e76\u6b22\u8fce\u5f00\u53d1\u8005\u8fdb\u884c\u8865\u5145\u548c\u5b8c\u5584\u3002\u5982\u679c AllJoyn \u67b6\u6784\u7f3a\u5931\u67d0\u4e00\u529f\u80fd\uff0c\u4f60\u53ef \u4ee5\u6dfb\u52a0\u3002\u5982\u679c\u4f60\u5728\u5e94\u7528 AllJoyn \u6846\u67b6\u65f6\u9047\u5230\u4e86\u56f0\u96be\u6216\u8005\u6280\u672f\u95ee\u9898\uff0c\u5f00\u6e90\u793e\u533a\u4e2d\u7684\u5176\u4ed6\u53c2\u4e0e\u8005\u4f1a\u53ca\u65f6\u63d0\u4f9b\u5584\u610f\u7684\u5e2e\u52a9\u548c\u6307\u5bfc\u3002AllJoyn \u7684\u4ee3\u7801 \u5e93\u53ef\u4ee5\u5728\u4ee5\u4e0b\u7f51\u5740\u83b7\u5f97 (http://www.allseenalliance.org).\n\n\n\u64cd\u4f5c\u7cfb\u7edf\u65e0\u5173\u6027\n\n\nAllJoyn \u6846\u67b6\u6240\u63d0\u4f9b\u7684\u62bd\u8c61\u5c42\u4f7f\u5176\u4ee3\u7801\u548c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5728\u591a\u79cd\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u8fd0\u884c\u3002\u622a\u6b62\u5230\u672c\u534f\u8bae\u7f16\u5199\u65f6\uff0cAllJoyn \u6846\u67b6\u5df2\u652f\u6301\u5927\u591a\u6570 Linux \u53d1\u884c\u7248\u5305\u62ec Ubuntu\uff0c\u5e76\u53ef\u4ee5\u8fd0\u884c\u5728 Android 2.3 \uff08\u59dc\u997c\uff09 \u4ee5\u53ca\u540e\u7eed\u667a\u80fd\u624b\u673a\u548c\u5e73\u677f\u7535\u8111\u4e0a\u3002AllJoyn \u6846\u67b6\u4ee3\u7801\u4e5f\u53ef\u8fd0\u884c\u5728\u4f17\u591a\u6d41\u884c\u7684\u5fae\u8f6f \u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\u4e0a\uff0c\u5305\u62ec Windows XP, Windows 7, Windows RT, \u548c Windows 8. \u6b64\u5916\uff0cAllJoyn \u6846\u67b6\u4ee3\u7801\u53ef\u8fd0\u884c\u5728 Apple \u64cd\u4f5c\u7cfb\u7edf iOS \u4ee5\u53ca OS X\u4e0a\uff0c\u4ee5\u53ca\u8bf8\u5982 OpenWRT \u7684\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u3002\n\n\n\u8bed\u8a00\u65e0\u5173\u6027\n\n\n\u5f00\u53d1\u8005\u76ee\u524d\u4f7f\u7528 C++,Java, C#, JavaScript \u4ee5\u53ca Objective-C \u8bed\u8a00\u6765\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n\u7269\u7406\u7f51\u7edc\u53ca\u534f\u8bae\u65e0\u5173\u6027\n\n\n\u76ee\u524d\u6709\u8bb8\u591a\u53ef\u4f9b\u8054\u7f51\u8bbe\u5907\u4f7f\u7528\u7684\u6280\u672f\u3002AllJoyn \u6846\u67b6\u63d0\u4f9b\u7684\u62bd\u8c61\u5c42\u5b9a\u4e49\u4e86\u63a5\u5165\u5230\u57fa\u7840\u7f51\u7edc\u7ad9\u7684\u6e05\u6670\u63a5\u53e3\uff0c\u4f7f\u5f97\u4e3b\u7ba1\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u6dfb\u52a0\u65b0\u7684\u7f51\u7edc \u5b9e\u73b0\u5de5\u5177\u53d8\u5f97\u76f8\u5bf9\u5bb9\u6613\u3002\n\n\n\u4f8b\u5982\uff0c\u622a\u6b62\u672c\u534f\u8bae\u7f16\u5199\u65f6\uff0cWi-Fi \u8054\u76df\u5df2\u7ecf\u53d1\u5e03\u4e86\u652f\u6301\u70b9\u5bf9\u70b9\u8fde\u63a5\u7684 Wi-Fi Direct \u6280\u672f\u7684\u53c2\u6570\u660e\u7ec6\u3002Wi-Fi Direct \u7684\u7f51\u7edc\u6a21\u5757\u6b63\u5728\u5bc6\u96c6\u7684 \u88ab\u5f00\u53d1\uff0c\u5f88\u660e\u663e\u4ed6\u4f1a\u5c06 Wi-Fi Direct \u4ee5\u53ca\u9884\u5148\u5173\u8054\u7684\u53d1\u73b0\u673a\u5236\u52a0\u5165\u5230\u53ef\u9009\u7f51\u7edc\u9009\u9879\u4e2d\uff0c\u4f9b AllJoyn \u7684\u5f00\u53d1\u8005\u9009\u62e9\u3002\n\n\n\u52a8\u6001\u914d\u7f6e\n\n\n\u79fb\u52a8\u8bbe\u5907\u5728\u5176\u5bff\u547d\u4e2d\u5e38\u4f1a\u7ecf\u8fc7\u591a\u91cd\u5730\u70b9\uff0c\u7f51\u7edc\u5173\u8054\u5efa\u7acb\u540e\u53c8\u65ad\u5f00\u3002\u8fd9\u610f\u5473\u7740 IP\uff08Internet Protocal\uff09\u5730\u5740\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u7f51\u7edc\u63a5\u53e3\u4f1a\u5931\u6548 \uff0c\u670d\u52a1\u4e5f\u4f1a\u4e0d\u7a33\u5b9a\u3002\n\n\n\u5f53\u65e7\u670d\u52a1\u5931\u6548\u4ee5\u53ca\u65b0\u670d\u52a1\u51fa\u73b0\u65f6\uff0cAllJoyn \u6846\u67b6\u4f1a\u53d1\u51fa\u63d0\u9192\uff0c\u5982\u6709\u5fc5\u8981\u4e5f\u5c06\u5efa\u7acb\u65b0\u7684\u5173\u8054\u3002AllJoyn \u6846\u67b6\u5df2\u505a\u597d\u6210\u4e3aWi-Fi Hotspot 2.0 \uff08\u4f7f\u79fb\u52a8\u7535\u8bdd\uff0c\u79fb\u52a8\u57fa\u7ad9\u4e0e Wi-Fi \u70ed\u70b9\u900f\u660e\u8fde\u63a5\u7684\u6280\u672f\uff09\u5e94\u7528\u5c42\u7684\u51c6\u5907\u3002\n\n\n\u5e7f\u544a\u670d\u52a1\u53ca\u53d1\u73b0\n\n\n\u65e0\u8bba\u4f55\u65f6\uff0c\u8bbe\u5907\u7684\u901a\u4fe1\u4e00\u5b9a\u4f34\u968f\u7740\u670d\u52a1\u7684\u63a8\u5e7f\u4e0e\u53d1\u73b0\u3002\u5728\u8fc7\u53bb\u7684\u9759\u6001\u7f51\u65f6\u4ee3\uff0c\u8bbe\u5907\u95f4\u7684\u901a\u4fe1\u7531\u4eba\u5de5\u7ba1\u7406\u5458\u505a\u51fa\u660e\u786e\u7684\u5206\u914d\u5b9e\u73b0\u3002\u73b0\u4eca\u65f6\u4ee3\uff0c\u96f6\u914d\u7f6e\u7f51\u7edc\u7684\u6982\u5ff5\u5df2\u5341\u5206\u6d41\u884c\uff0c\u7279\u522b\u662f\u501f\u52a9\u4e8e Apple Bonjour \u4ee5\u53ca Microsoft Universal Plug and Play \u7684\u5e2e\u52a9\u3002\n\n\n\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u89c1\u5230\u4e86\u5982 Bluetooth Service Discovery Protocol \u7684\u5df2\u7ecf\u5b58\u5728\u7684\u53d1\u73b0\u673a\u5236\uff0c\u4ee5\u53ca\u6b63\u5728\u53d1\u5c55\u7684\u5982 Wi-Fi Direct P2P \u7684\u53d1\u73b0\u673a\n\u5236\u3002AllJoyn \u67b6\u6784\u63d0\u4f9b\u670d\u52a1\u63a8\u5e7f\u53ca\u53d1\u73b0\u7684\u865a\u62df\u5316\uff0c\u4ee5\u7b80\u5316\u5b9a\u4f4d\u53ca\u4f7f\u7528\u670d\u52a1\u7684\u8fc7\u7a0b\u3002\n\n\n\u5b89\u5168\u6027\n\n\n\u5728\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5b89\u5168\u6027\u7684\u81ea\u7136\u6a21\u578b\u662f\u5e94\u7528\u7a0b\u5e8f\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u3002\u4e0d\u5e78\u7684\u4e8b\uff0c\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u7f51\u7edc\u5b89\u5168\u6a21\u578b\u5e76\u4e0d\u9002\u7528\u4e8e\u6b64\u6a21\u578b\u3002\u4f8b\u5982\uff0c\u84dd\u7259\u534f\u8bae\u5728\u5b8c\u6210\u8bbe\u5907\u914d\u5bf9\u65f6\uff0c\u4f1a\u5c06\u53cc\u65b9\u8bbe\u5907\u4e2d\u7684\u6240\u6709\u5e94\u7528\u7a0b\u5e8f\u5168\u90e8\u6388\u6743\u3002\u4f46\u5982\u679c\u53cc\u65b9\u8bbe\u5907\u6bd4\u84dd\u7259\u8033\u673a\u66f4\u590d\u6742\uff0c\u5982\u4e24\u53f0\u7b14\u8bb0\u672c\u7535\u8111\u901a\u8fc7\u84dd\u7259\u76f8\u8fde\uff0c\u8fd9\u79cd\u6388\u6743\u6a21\u5f0f\u5c06\u4f1a\u53d8\u5f97\u4e0d\u7406\u60f3\uff0c\u8f6c\u800c\u9700\u8981\u66f4\u7cbe\u7ec6\u7684\u7c92\u5ea6\u3002AllJoyn \u6846\u67b6\u53ef\u5bf9\u8bf8\u5982\u6b64\u7c7b\u5f3a\u8c03\u5e94\u7528\u5bf9\u5e94\u7528\u901a\u4fe1\u7684\u590d\u6742\u5b89\u5168\u6a21\u578b\u63d0\u4f9b\u5e7f\u6cdb\u652f\u6301\u3002\n\n\n\u5bf9\u8c61\u6a21\u578b\u4ee5\u53ca\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\n\n\nAllJoyn \u6846\u67b6\u5e94\u7528\u4e86\u7b80\u5355\u660e\u4e86\u7684\u5bf9\u8c61\u6a21\u578b\u4ee5\u53ca\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08 RMI \uff09\u673a\u5236\u3002AllJoyn \u6a21\u5f0f\u91cd\u65b0\u5b9e\u73b0\u5e76\u6269\u5c55\u4e86 D-Bus \u6807\u51c6\u5b9a\u4e49\u7684\u6709\u7ebf\u534f\u8bae\uff0c\u4ee5\u5b9e\u73b0\u5bf9\u5206\u5e03\u5f0f\u8bbe\u5907\u7684\u652f\u6301\u3002\n\n\n\u8f6f\u4ef6\u5143\u4ef6\n\n\n\u4f34\u968f\u7740\u6807\u51c6\u5316\u5bf9\u8c61\u6a21\u578b\u548c\u6709\u7ebf\u534f\u8bae\uff0c\u968f\u4e4b\u800c\u6765\u662f\u5c06\u5404\u7c7b\u63a5\u53e3\u6807\u51c6\u5316\u4e3a\u5143\u4ef6\u7684\u80fd\u529b\u3002\u4e0e Java \u63a5\u53e3\u58f0\u660e\u673a\u5236\u6240\u63d0\u4f9b\u7684\u4e0e\u672c\u5730\u5b9e\u4f8b\u4ea4\u4e92\u529f\u80fd\u7684\u5b9e \u73b0\u89c4\u8303\u7c7b\u4f3c\uff0cAllJoyn \u7684\u5bf9\u8c61\u6a21\u578b\u63d0\u4f9b\u4e86\u4e0e\u7f16\u7a0b\u8bed\u8a00\u65e0\u5173\u7684\uff0c\u4e0e\u8fdc\u7a0b\u5b9e\u73b0\u4ea4\u4e92\u7684\u89c4\u8303\u3002\n\n\n\u6709\u4e86\u6210\u578b\u7684\u89c4\u8303\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f17\u591a\u63a5\u53e3\u7684\u5b9e\u73b0\uff0c\u4ece\u800c\u4f7f\u5e94\u7528\u7a0b\u5e8f\u901a\u4fe1\u7684\u6807\u51c6\u5efa\u7acb\u53d8\u5f97\u53ef\u884c\u3002\u8fd9\u9879\u6280\u672f\u5bf9\u8f6f\u4ef6\u7ec4\u4ef6\u5f88\u6709\u5e2e\u52a9\u3002\u8f6f\u4ef6\u90e8\u5206\u662f\u8bb8\u591a\u73b0\u4ee3\u7cfb\u7edf\u7684\u4e2d\u5fc3\uff0c\u5728\u7c7b\u4f3c Android \u7684\u7cfb\u7edf\u4e2d\u5219\u66f4\u4e3a\u660e\u663e\u3002\u5728 Android \u4e2d\u5b9a\u4e49\u4e864\u79cd\u4e3b\u8981\u6210\u5206\u7c7b\u578b\uff0c\u4f5c\u4e3a\u4ec5\u6709\u7684\u80fd\u63a5\u5165 Android Application Framework \u7684\u65b9\u5f0f\uff0c\u540c\u7406\u5728\u5fae\u8f6f\u7cfb\u7edf\u4e2d\uff0cComponent Object Model \uff08 COM \uff09\u7684\u7ee7\u4efb\u7248\u672c\u88ab\u7528\u4f5c\u6b64\u529f\u80fd\u3002\n\n\n\u4e3a\u4e86\u5b9e\u73b0\u5728 \n\u6982\u8ff0\n\u4e2d\u6240\u63cf\u7ed8\u7684\u573a\u666f\uff0c\u6211\u4eec\u671f\u76fc\u63a5\u53e3\u5b9a\u4e49\u5c06\u4f1a\u51fa\u73b0\u4e30\u5bcc\u7684\u201c\u6d77\u6d0b\u201d\u3002 AllJoyn \u9879\u76ee\u671f\u671b\u80fd\u4e0e\u4f17\u591a\u7528\u6237\u4e00\u8d77\u5b8c\u6210\u63a5\u53e3 \u7684\u5b9a\u4e49\u4e0e\u6807\u51c6\u5316\uff0c\u5e76\u534f\u52a9\u5b9e\u73b0\u65b9\u6cd5\u7684\u5171\u4eab\u3002\n\n\n\u6982\u5ff5\u6027\u6982\u8ff0\n\n\nAllJoyn \u67b6\u6784\u5305\u542b\u4e00\u7cfb\u5217\u53ef\u4f9b\u4f7f\u7528\u7684\u62bd\u8c61\u5c42\u4ee5\u4fbf\u4e8e\u7406\u89e3\u5e76\u5c06\u5b50\u6a21\u5757\u5173\u8054\u8d77\u6765\u3002\u5176\u4e2d\u53ea\u6709\u5f88\u5c0f\u90e8\u5206\u7684\u62bd\u8c61\u5c42\u662f\u7406\u89e3\u57fa\u4e8e AllJoyn \u7684\u7cfb\u7edf\u6240\u5fc5\u987b\u7684\u3002\n\n\n\u8fd9\u4e00\u7ae0\u63d0\u4f9b\u4e86\u4e00\u4e2a AllJoyn \u67b6\u6784\u9ad8\u5c42\u6b21\u7684\u89c6\u89d2\u4e3a\u4e4b\u540e\u7684\u6587\u6863\u5982 API \u8be6\u89e3\u63d0\u4f9b\u5fc5\u8981\u7684\u57fa\u7840\u3002\n\n\n\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\n\n\n\u5206\u5e03\u5f0f\u7cfb\u7edf\u662f\u4ee5\u5b8c\u6210\u540c\u4e00\u76ee\u6807\u4e3a\u76ee\u7684\u7684\u4f7f\u7528\u4e00\u5b9a\u5f62\u5f0f\u7684\u7f51\u7edc\u8fde\u63a5\u8d77\u6765\u7684\u72ec\u7acb\u8ba1\u7b97\u673a\u7fa4\uff0c\u56e0\u6b64\u9700\u8981\u6709\u4e00\u53f0\u673a\u5668\u4e0a\u7684\u4e00\u5b9a\u5730\u5740\u7a7a\u95f4\u4e0b\u7684\u67d0\u4e2a\u7a0b\u5e8f\u4ee5\u7c7b\u4f3c\u4e8e\u672c\u5730\u8c03\u7528\u7684\u65b9\u5f0f\u4f7f\u7528\u4f4d\u4e8e\u53e6\u4e00\u53f0\u7269\u7406\u5206\u79bb\u7684\u673a\u5668\u4e0a\u7684\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4\u4e0b\u7684\u8fdb\u7a0b\u7684\u80fd\u529b\u3002\u8fd9\u901a\u5e38\u662f\u901a\u8fc7\u8fdc\u7a0b\u51fd\u6570\u8c03\u7528\uff08RPC\uff09\u6216\u8005\u4ee5\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u6765\u8bf4\u79f0\u4f5c\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08RMI\uff09\u6216\u8fdc\u7a0b\u8c03\u7528\uff08RI\uff09\u7684\u65b9\u5f0f\u6765\u5b8c\u6210\u3002\n\n\nRPC \u7684\u6a21\u578b\u901a\u5e38\u9700\u8981\u4e00\u4e2a\u5ba2\u6237\u7aef\u4e5f\u5c31\u662f RPC \u7684\u8c03\u7528\u8005\u548c\u4e00\u4e2a\u670d\u52a1\u5668\u7aef\uff08AllJoyn\u6a21\u578b\u4e2d\u79f0\u4e3a\u670d\u52a1\u5668\uff09\u4e5f\u5c31\u662f\u5b9e\u9645\u4e0a\u6267\u884c\u6240\u671f\u671b\u7684\u8fdc\u7a0b\u51fd\u6570\u7684 \u7a0b\u5e8f\u3002\u8c03\u7528\u8005\u6267\u884c\u4e00\u4e2a\u770b\u4e0a\u53bb\u548c\u672c\u5730\u7cfb\u7edf\u4e0a\u7684\u51fd\u6570\u4e00\u6837\u7684\u5ba2\u6237\u7aef\u7684\u5b58\u6839\uff0c\u5b83\u4f1a\u5c06\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u6253\u5305\uff08\u79f0\u4e3a\u5bf9\u53c2\u6570\u7684\u7f16\u7ec4\u6216\u4e32\u884c\u5316\uff09\u4e3a\u67d0\u4e2a\u683c\u5f0f\u7684\u6d88\u606f\u7136\u540e\u53d1\u9001\u7ed9 RPC \u7cfb\u7edf\u5c06\u5176\u901a\u8fc7\u5982\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff08TCP\uff09\u4e00\u7c7b\u7684\u6807\u51c6\u673a \u5236\u9001\u8fbe\u670d\u52a1\u7aef\u3002\u5728\u8fdc\u7aef\u673a\u5668\u4e0a\u4f1a\u6709\u76f8\u5e94\u7684 RPC \u7cfb\u7edf\u5728\u8fd0\u884c \uff0c\u53c2\u6570\u5c06\u4f1a\u88ab\u53cd\u7f16\u7ec4\uff08\u53cd\u5e8f\u5217\u5316\uff09\u5e76\u5c06\u6d88\u606f\u53d1\u9001\u7ed9\u670d\u52a1\u7aef\u5b58\u6839\uff0c\u5b83\u4f1a\u5b89\u6392\u6267\u884c\u671f\u671b\u7684\u51fd\u6570\u3002\u5982\u679c\u88ab\u8c03\u7528\u7684\u51fd\u6570\u9700\u8981\u8fd4\u56de\u4efb\u4f55\u4fe1\u606f\uff0c\u4f1a\u4f7f\u7528\u76f8\u4f3c\u7684\u8fc7\u7a0b\u5c06\u8fd4\u56de\u503c\u8f6c\u8fd0\u7ed9\u5ba2\u6237\u7aef\u5b58\u6839\u5e76\u5c06\u5176\u53d1\u9001\u7ed9\u539f\u59cb\u7684\u8c03\u7528\u8005\u3002\n\n\n\u6ce8\u610f\u8fd9\u91cc\u5e76\u6ca1\u6709\u8981\u6c42\u4e00\u4e2a\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u7aef\u529f\u80fd\u53ea\u80fd\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u5b9e\u73b0\u3002\u5982\u679c\u4e24\u4e2a\u6216\u66f4\u591a\u7ebf\u7a0b\u5b9e\u73b0\u540c\u4e00\u4e2a\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u7aef\u529f\u80fd\u7684\u67d0\u4e2a\u65b9\u9762\uff0c\u8fd9\u4e9b\u7ebf\u7a0b\u88ab\u770b\u6210\u7aef\u70b9\u3002\u5728\u5f88\u591a\u60c5\u51b5\u4e0b AllJoyn \u5e94\u7528\u4f1a\u5b9e\u73b0\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u8fd9\u65f6\u5b83\u4eec\u4e5f\u4f1a\u88ab\u4f5c\u4e3a\u7aef\u70b9\u6765\u770b\u5f85\u3002AllJoyn \u67b6\u6784\u80fd\u591f\u652f\u6301\u7ecf\u5178\u7684\u5ba2\u6237\u7aef \u548c\u670d\u52a1\u5668\u7aef\u7684\u529f\u80fd\uff0c\u540c\u65f6\u4e5f\u80fd\u652f\u6301\u7aef\u5230\u7aef\u7684\u7f51\u7edc\u529f\u80fd\u3002\n\n\nAllJoyn bus\n\n\nAllJoyn \u7cfb\u7edf\u4e2d\u6700\u57fa\u672c\u7684\u62bd\u8c61\u6982\u5ff5\u5c31\u662f AllJoyn \u603b\u7ebf\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2d\u5feb\u901f\u8f7b\u91cf\u7684\u65b9\u6cd5\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u4f20\u8f93\u7f16\u7ec4\u8fc7\u7684\u6d88\u606f\u3002\u53ef\u4ee5\u5c06 AllJoyn \u603b\u7ebf\u770b\u6210\u662f\u4e00\u79cd\u6d88\u606f\u6d41\u7684\u201c\u9ad8\u901f\u516c\u8def\u201d\u3002\u4e0b\u56fe\u4ece\u6982\u5ff5\u4e0a\u5c55\u793a\u4e86\u4e00\u4e2a AllJoyn \u603b\u7ebf\u5728\u540c\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684\u5b9e\u4f8b\u3002\n\n\n\n\nFigure:\n Prototypical AllJoyn bus\n\n\nAllJoyn \u603b\u7ebf\u539f\u7406\u4e0a\u8bb2\u5305\u542b\u4e00\u4e0b\u51e0\u70b9\uff1a\n \u2022 \u56fe\u4e2d\u8f83\u7c97\u7684\u9ed1\u8272\u6a2a\u7ebf\u8868\u793a\u603b\u7ebf\u81ea\u8eab\uff0c\u7ad6\u7ebf\u53ef\u4ee5\u88ab\u7406\u89e3\u4e3a\u6d41\u7ecf\u603b\u7ebf\u7684\u6d88\u606f\u6d41\u7684\u6e90\u5934\u548c/\u6216\u76ee\u7684\u5730\u201c\u51fa\u53e3\u201d\u3002\n \u2022 \u4e0e\u603b\u7ebf\u7684\u8fde\u63a5\u7528\u516d\u8fb9\u5f62\u8868\u793a\u3002\u548c\u9ad8\u901f\u516c\u8def\u4e0a\u7684\u51fa\u53e3\u901a\u5e38\u4f1a\u88ab\u7f16\u53f7\u7c7b\u4f3c\uff0c\u6bcf\u4e00\u4e2a\u8fde\u63a5\u4f1a\u88ab\u8d4b\u4e88\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u5b57\u3002\u56fe\u4e2d\u4f7f\u7528\u4e86\u7b80\u5316\u7684\u5f62\u5f0f\u6765\u547d\u540d\u8fde\u63a5\u7528\u4ee5\u8bf4\u660e\u3002\n \u2022 \u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u5230\u603b\u7ebf\u7684\u8fde\u63a5\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u548c\u7ebf\u7a0b\u5171\u9a7b\u5185\u5b58\u7684\u3002\u56e0\u6b64\uff0c\u552f\u4e00\u8fde\u63a5\u540d:1.1\u53ef\u80fd\u88ab\u8d4b\u4e88\u7ed9\u4e86\u4e00\u4e2a\u8fd0\u884c\u7740\u67d0\u4e2a\u5e94\u7528\u5b9e\u4f8b\u7684\u7ebf\u7a0b\u6240\u5728\u7684\u8fde\u63a5\uff0c\u800c\u552f\u4e00\u8fde\u63a5\u540d:1.4\u53ef\u80fd\u88ab\u8d4b\u4e88\u7ed9\u4e86\u53e6\u4e00\u4e2a\u8fd0\u884c\u7740\u67d0\u4e2a\u5e94\u7528\u5b9e\u4f8b\u7684\u7ebf\u7a0b\u6240\u5728\u7684\u8fde\u63a5\u3002AllJoyn \u603b\u7ebf\u7684\u76ee\u6807\u5c31\u662f\u4f7f\u4e24\u4e2a\u5e94\u7528\u53ef\u4ee5\u5728\u4e0d \u9700\u8981\u5904\u7406\u5e95\u5c42\u5177\u4f53\u7684\u4ea4\u6362\u673a\u5236\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u901a\u4fe1\u3002\u4e00\u7aef\u7684\u8fde\u63a5\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u5ba2\u6237\u7aef\u5b58\u6839\u800c\u53e6\u4e00\u7aef\u5219\u5b8c\u6210\u6240\u6709\u670d\u52a1\u7aef\u5b58\u6839\u6240\u8981\u6c42\u7684\u6240\u6709\u4efb\u52a1\u3002\n\n\n\u539f\u59cb\u7684 AllJoyn \u603b\u7ebf\u56fe\u8868\u8fbe\u4e86\u4e00\u4e2a AllJoyz \u603b\u7ebf\u7684\u6848\u4f8b\uff0c\u5e76\u63cf\u7ed8\u4e86\u8f6f\u4ef6\u603b\u7ebf\u4e3a\u63a5\u9a73\u5728\u5176\u4e0a\u7684\u4e0d\u540c\u7ec4\u4ef6\u63d0\u4f9b\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u3002\u4e00\n\u822c\u60c5\u51b5\u4e0b\uff0c AllJoyn \u603b\u7ebf\u4f1a\u88ab\u5ef6\u4f38\u5230\u4e0b\u56fe\u6240\u793a\u7684\u8bbe\u5907\u4e2d\u3002\u5f53\u7ec4\u4ef6\u9700\u8981\u65f6\uff0c\u4e00\u6761\u901a\u4fe1\u94fe\u8def\u4f1a\u5efa\u7acb\u5728\u5206\u5e03\u5728\u667a\u80fd\u624b\u673a\u4e0a\u7684\u903b\u8f91\u603b\u7ebf\u7247\u6bb5\u548c\u5206\u5e03\u5728 Linux \u4e3b\u673a\u4e0a\u7684\u7ec4\u4ef6\u4e4b\u95f4\u3002\n\n\n\n\nFigure:\n \u7531 AllJoyn \u6846\u67b6\u64cd\u4f5c\u7684\u8bbe\u5907\u4e0e\u8bbe\u5907\u95f4\u901a\u4fe1\n\n\n\u6b64\u901a\u4fe1\u94fe\u8def\u7531 AllJoyn \u7cfb\u7edf\u7ba1\u7406\uff0c\u53ef\u4ee5\u7531\u5e95\u5c42\u6280\u672f\u5b9e\u73b0\uff0c\u8bf8\u5982 Wi-Fi \u6216 Wi-Fi Direct. \u5728 AllJoyn \u4e3b\u7ebf\u4e0a\u4f5c\u4e3a\u4e3b\u673a\u8fd0\u884c\u7684\u8bbe\u5907\u53ef\u4ee5\u6709\u591a\n\u4e2a\uff0c\u4f46\u5bf9\u4e8e\u5728\u5206\u5e03\u5f0f\u4e3b\u7ebf\u4e0a\u7684\u7528\u6237\u8fd9\u4e9b\u4e3b\u673a\u662f\u900f\u660e\u7684\u3002\u4ece\u4e3b\u7ebf\u7684\u4e00\u4e2a\u7ec4\u4ef6\u7684\u89d2\u5ea6\u770b\uff0c\u5206\u5e03\u5f0f AllJoyn \u7cfb\u7edf\u5c31\u50cf\u662f\u5728\u8bbe\u5907\u672c\u5730\u7684\u4e00\u6761\u4e3b\u7ebf\u3002\n\n\n\u4e0b\u56fe\u5c55\u793a\u4e86\u5206\u5e03\u5f0f\u4e3b\u7ebf\u5728\u7528\u6237\u89d2\u5ea6\u53ef\u80fd\u5448\u73b0\u7684\u6837\u5b50\u3002\u7ec4\u4ef6\uff08\u4f8b\u5982\u6807\u7b7e\u4e3a \n:1.1\n\u7684\u667a\u80fd\u624b\u673a\u8fde\u63a5\uff09\u53ef\u4ee5\u5bf9\u6807\u7b7e\u4e3a\n:1.7\n\u7684 Linux \u4e3b\u673a\u8fdb\u884c\u8fdc\n\u7a0b\u65b9\u6cd5\u8c03\u7528\uff0c\u800c\u65e0\u9700\u62c5\u5fc3\u8be5\u7ec4\u4ef6\u6240\u5904\u7684\u4f4d\u7f6e\u3002\n\n\n\n\nFigure:\n A distributed AllJoyn bus appears as a local bus\n\n\n\u603b\u7ebf\u8def\u7531\n\n\n\u5c31\u50cf\u8bbe\u5907\u5bf9\u8bbe\u5907\u901a\u4fe1\u56fe\u63cf\u7ed8\u7684\u90a3\u6837\uff0c\u903b\u8f91\u5206\u5e03\u5f0f\u603b\u7ebf\u4f1a\u88ab\u5206\u4e3a\u6570\u4e2a\u7247\u6bb5\uff0c\u6bcf\u4e00\u7247\u90fd\u8fd0\u884c\u5728\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\u3002\u5728 AllJoyn \u4e2d\uff0c\u5b9e\u73b0\u5bf9\u903b\u8f91\u603b\u7ebf\u5206\n\u5272\u529f\u80fd\u7684\u8bbe\u5907\u88ab\u79f0\u4f5c AllJoyn \u8def\u7531\u3002\n\n\n\u5b88\u62a4\u8fdb\u7a0b\u5728\u7531 Unix \u884d\u751f\u51fa\u7684\u7cfb\u7edf\u4e2d\u5f88\u5e38\u89c1\uff0c\u4ed6\u88ab\u7528\u4e8e\u63cf\u8ff0\u4e3a\u7535\u8111\u7cfb\u7edf\u63d0\u4f9b\u91cd\u8981\u529f\u80fd\u6027\u7684\u4e00\u4e9b\u7a0b\u5e8f\u3002\u5728 Linux \u7cfb\u7edf\u4e2d\u6211\u4eec\u5c06 daemon \u79f0\u4e3a\n\u72ec\u7acb\u8def\u7531\u3002\u5728 Windows \u7cfb\u7edf\u4e2d\u66f4\u503e\u5411\u4e8e\u7528\u201c\u670d\u52a1\u201d\u8fd9\u4e2a\u8bcd\uff0c\u4f46\u6211\u4eec\u7528 AllJoyn \u8def\u7531\u6765\u63cf\u8ff0\u4ed6\u3002\n\n\n\n\nFigure:\n \u76f8\u5173\u7684\u603b\u7ebf\u6ce1\u6ce1\u56fe\n\n\n\u521b\u5efa\u6ce1\u6ce1\u56fe\u53ef\u4ee5\u4f7f AllJoyn \u8def\u7531\u53ef\u89c6\u5316\u3002\u5982\u4e4b\u524d\u7684\u56fe\u6240\u793a\uff0c\u4e24\u4e2a AllJoyn \u603b\u7ebf\u7247\u6bb5\u5206\u522b\u4f4d\u4e8e\u667a\u80fd\u624b\u673a\u548c Linux \u4e3b\u673a\u4e0a\u3002\u6211\u4eec\u7528\u6237\uff08 C \uff09\u4ee5\u53ca\u670d\u52a1\uff08 S \uff09\u6765\u6807\u6ce8\u5230\u603b\u7ebf\u7684\u8fde\u63a5\uff0c\u8fd9\u91cc\u7528\u5230\u4e86 RMI \u4e2d \u7684\u7528\u6237\uff0f\u670d\u52a1\u7406\u5ff5\u6a21\u578b\u3002\u5b9e\u73b0\u6838\u5fc3\u5206\u5e03\u5f0f\u603b\u7ebf\u529f\u80fd\u7684 AllJoyn \u8def\u7531\u88ab\u6807\u8bb0\n\u4e3a \uff08 D \uff09\u3002\u56fe\u4e2d\u7684\u7ec4\u4ef6\u88ab\u8f6c\u6362\u6210\u4e0b\u56fe\u4e2d\u7684\u56fe\u6807\u3002\n\n\n\n\nFigure:\n AllJoyn \u6ce1\u6ce1\u56fe\n\n\n\u56fe\u4e2d\u7684\u6ce1\u6ce1\u53ef\u88ab\u770b\u4f5c\u662f\u8fd0\u884c\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e0a\u7684\u7535\u8111\u8fdb\u7a0b\u3002\u5de6\u8fb9\u7684\u4e24\u4e2a\u7528\u6237\uff08 C \uff09\u548c\u670d\u52a1\uff08 S \uff09\u8fdb\u7a0b\u8fd0\u884c\u5728\u667a\u80fd\u624b\u673a\u4e0a\u3002\u4f4d\u4e8e\u53f3\u4fa7\u7684\u8def\u7531 \u5668\u7528\u4e8e\u5b9e\u73b0\u5728 Linux \u4e3b\u673a\u4e0a\u7684 AllJoyn \u603b\u7ebf\u7684\u672c\u5730\u7247\u6bb5\u3002\n\n\n\u5982\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u56fe\u6240\u793a\uff0c\u8fd9\u4e24\u4e2a\u8def\u7531\u70b9\u534f\u8c03\u7740\u8de8\u8d8a\u903b\u8f91\u603b\u7ebf\u7684\u6d88\u606f\u6d41\uff0c\u5448\u73b0\u5230\u8fde\u63a5\u4e0a\u7684\u5219\u662f\u4e00\u4e2a\u6574\u4f53\u3002\u4e0e\u667a\u80fd\u624b\u673a\u7aef\u7684\u914d\u7f6e\u76f8\u540c\uff0c\u5728 Linux \u4e3b\u673a\u4e0a\u540c\u6837\u8bbe\u6709\u4e24\u4e2a\u670d\u52a1\u7ec4\u4ef6\u548c\u4e00\u4e2a\u7528\u6237\u7ec4\u4ef6\u3002\n\n\n\u5728\u8fd9\u79cd\u914d\u7f6e\u4e2d\uff0c\u7528\u6237\u7ec4\u4ef6 C1 \u53ef\u4ee5\u5bf9\u670d\u52a1\u7ec4\u4ef6 S1 \u8fdb\u884c\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff0c\u5c31\u50cf\u64cd\u4f5c\u672c\u5730\u5bf9\u8c61\u90a3\u6837\u4e00\u6837\u3002\u5e8f\u5217\u5316\u7684\u53c2\u6570\u7531\u6e90\u5934\u88ab\u8fd0\u884c\u5728\u667a\u80fd\u624b\u673a\u4e0a\n\u7684\u8def\u7531\u5668\u4f20\u9001\u51fa\u672c\u5730\u603b\u7ebf\u7247\u6bb5\u3002\u7ecf\u8fc7\u7f51\u7edc\u94fe\u8def\uff08\u5bf9\u7528\u6237\u900f\u660e\uff09\u53d1\u9001\u5230 Linux \u4e3b\u673a\u7684\u8def\u7531\u70b9\u3002Linux \u4e3b\u673a\u4e0a\u7684 AllJoyn \u8def\u7531\u8bc6\u522b\u51fa\u53c2\u6570\u76ee\u7684\u5730\n\u4e3a S1\uff0c\u968f\u540e\u5c06\u53c2\u6570\u89e3\u5e8f\u5217\u5316\u5e76\u6267\u884c\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u3002\u5982\u679c\u9700\u8981\u8fd4\u56de\u503c\uff0c\u6b64\u8fdb\u7a0b\u53ef\u88ab\u53cd\u8f6c\uff0c\u5c06\u8fd4\u56de\u503c\u9001\u56de\u5ba2\u6237\u7aef\u3002\n\n\n\u7531\u4e8e\u72ec\u7acb\u8def\u7531\u8fd0\u884c\u5728\u540e\u53f0\u8fdb\u7a0b\u4e2d\uff0c\u4e0d\u540c\u4e8e\u7528\u6237\u4e0e\u670d\u52a1\u6240\u5728\u7684\u8fdb\u7a0b\uff0c\u5728\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u9700\u8981\u6709\u4e00\u4e2a\u8def\u7531\u201c\u4ee3\u8868\u201d\u3002\u5728 AllJoyn \u6846\u67b6\u4e2d\u8fd9\u4e9b\u4ee3\u8868\u88ab\u79f0\n\u4e3a\u603b\u7ebf\u9644\u4ef6\u3002\n\n\n\u603b\u7ebf\u9644\u4ef6\n\n\n\u6bcf\u4e00\u4e2a\u5230 AllJoyn \u603b\u7ebf\u7684\u8fde\u63a5\u90fd\u4f1a\u7ecf\u8fc7\u7279\u5b9a\u7684 AllJoyn \u7ec4\u4ef6\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u88ab\u79f0\u4f5c\u603b\u7ebf\u9644\u4ef6\u3002\u603b\u7ebf\u9644\u4ef6\u5b58\u5728\u4e8e\u6bcf\u4e00\u4e2a\u9700\u8981\u8fde\u63a5\u5230 AllJoyn \u8f6f\u4ef6\n\u603b\u7ebf\u7684\u8fdb\u7a0b\u5f53\u4e2d\u3002\n\n\n\u5f53\u8ba8\u8bba\u8f6f\u4ef6\u7ec4\u4ef6\u65f6\uff0c\u5e38\u4f1a\u5728\u8f6f\u4ef6\u548c\u786c\u4ef6\u4e4b\u95f4\u505a\u4e00\u4e2a\u7c7b\u6bd4\u3002\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u4e0a\u7684\u672c\u5730\u7247\u6bb5\u5c31\u50cf\u662f\u53f0\u5f0f\u673a\u4e0a\u7684\u786c\u4ef6\u80cc\u677f\u603b\u7ebf\u3002\u786c\u4ef6\u603b\u7ebf\u53ef\u4f20\n\u9001\u7535\u5b50\u4fe1\u53f7\uff0c\u4e0e\u5176\u4ed6\u5361\u7247\u6709\u88ab\u79f0\u4e3a\u8fde\u63a5\u4f53\u7684\u63a5\u9a73\u70b9\u3002\u7c7b\u6bd4\u4e8e\u786c\u4ef6\uff0cAllJoyn \u6846\u67b6\u4e2d\u7684\u603b\u7ebf\u9644\u4ef6\u5c31\u50cf\u786c\u4ef6\u4e2d\u7684\u8fde\u63a5\u4f53\u3002\n\n\nAllJoyn \u603b\u7ebf\u9644\u4ef6\u662f\u4e00\u4e2a\u5df2\u5b9a\u4e49\u8bed\u8a00\u7684\u5bf9\u8c61\uff0c\u5bf9\u4e8e\u5ba2\u6237\u7aef\uff0c\u670d\u52a1\u6216\u8005\u4e00\u4e2a\u70b9\uff0c\u4ed6\u4ee3\u8868\u7740\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u3002\u4f8b\u5982\uff0cC++ \u8bed\u8a00\u4e2d\u4e3a\u7528\u6237\u63d0\u4f9b\n\u4e86\u603b\u7ebf\u9644\u4ef6\u7684\u4e00\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5728 Java \u4e2d\u5219\u6709\u53e6\u4e00\u79cd\u5b9e\u73b0\u65b9\u6cd5\u6765\u5b9e\u73b0\u540c\u4e00\u603b\u7ebf\u9644\u4ef6\u3002\u7531\u4e8e AllJoyn \u6846\u67b6\u6dfb\u52a0\u4e86\u8bed\u8a00\u8054\u7f16\uff0c\u66f4\u591a\u5df2\u5b9a\u4e49\u8bed\u8a00\u7684 \u5b9e\u73b0\u65b9\u6cd5\u5c06\u4f1a\u51fa\u73b0\u3002\n\n\n\u603b\u7ebf\u65b9\u6cd5\uff0c\u603b\u7ebf\u5c5e\u6027\u53ca\u603b\u7ebf\u4fe1\u53f7\n\n\nAllJoyn \u6846\u67b6\u662f\u4e00\u4e2a\u9762\u5411\u5bf9\u8c61\u7684\u7cfb\u7edf\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7684\u7cfb\u7edf\u4e2d\uff0c\u603b\u4f1a\u63d0\u53ca\u8c03\u7528\u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5 \uff08\u56e0\u6b64\uff0c\u5728\u63d0\u53ca\u5206\u5e03\u5f0f\u7cfb\u7edf\u65f6\u4e5f\u5e38\u4f1a\u63d0\u53ca\u8fdc\u7a0b\u65b9\u6cd5\n\u8c03\u7528\uff09\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7406\u5ff5\u4e2d\uff0c\u5bf9\u8c61\u6709\u4e00\u7cfb\u5217\u6210\u5458\u3002\u8fd9\u4e9b\u5bf9\u8c61\u65b9\u6cd5\u6216\u5c5e\u6027\uff0c\u5728 AllJoyn \u6846\u67b6\u4e2d\u88ab\u79f0\u4e3a\u603b\u7ebf\u65b9\u6cd5\u548c\u603b\u7ebf\u5c5e\u6027\u3002AllJoyn \u6846\u67b6\n\u540c\u65f6\u8fd8\u6709\u603b\u7ebf\u4fe1\u53f7\u7684\u6982\u5ff5\uff0c\u4f5c\u4e3a\u5728\u5bf9\u8c61\u4e2d\u4e00\u4e9b\u9879\u76ee\u6216\u72b6\u6001\u53d8\u5316\u7684\u5f02\u6b65\u63d0\u9192\u3002\n\n\n\u4e3a\u4e86\u505a\u5230\u5ba2\u6237\uff0c\u670d\u52a1\u4e0e\u70b9\u4e4b\u95f4\u7684\u901a\u4fe1\u5b89\u6392\u900f\u660e\u5316\uff0c\u8c03\u7528\u603b\u7ebf\u65b9\u6cd5\u548c\u603b\u7ebf\u4fe1\u53f7\u7684\u53c2\u6570\u4e00\u5b9a\u8981\u6709\u89c4\u8303\uff0c\u540c\u65f6\u4e5f\u9700\u8981\u5bf9\u603b\u7ebf\u5c5e\u6027\u5b9a\u4e49\u4e00\u4e9b\u79cd\u7c7b\u4fe1\u606f\u3002\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u8c03\u7528\u65b9\u6cd5\u6216\u4fe1\u53f7\u7684\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7c7b\u578b\u88ab\u79f0\u4e3a\u7c7b\u578b\u7b7e\u540d\u3002\n\n\n\u7c7b\u578b\u7b7e\u540d\u7531\u5b57\u7b26\u4e32\u5b9a\u4e49\u3002\u540c\u65f6\u7c7b\u578b\u7b7e\u540d\u53ef\u4ee5\u63cf\u8ff0\u5b57\u7b26\u4e32\uff0c\u4ee5\u53ca\u6240\u6709\u4e3b\u6d41\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u6570\u636e\u7c7b\u578b\u548c\u8bf8\u5982\u6570\u7ec4\uff0c\u7ed3\u6784\u4f53\u7684\u590d\u5408\u7c7b\u578b\u3002\u7c7b\u578b\u7b7e\u540d\u7684\u5177\u4f53\u4efb\u52a1\u53ca\u4f7f\u7528\u5df2\u8d85\u51fa\u4e86\u6b64\u7bc7\u7b80\u4ecb\u7684\u4ecb\u7ecd\u8303\u56f4\u3002\u603b\u7684\u6765\u8bf4\uff0c\u603b\u7ebf\u65b9\u6cd5\uff0c\u4fe1\u53f7\u6216\u5c5e\u6027\u7684\u7c7b\u578b\u7b7e\u540d\u53ef\u4ee5\u544a\u77e5\u5e95\u5c42 AllJoyn \u7cfb\u7edf\u5982\u4f55\u5c06\u4f20\u8f93\u53c2\u6570\u548c\u8fd4 \u56de\u503c\u4ece\u5df2\u5e8f\u5217\u5316\u7684\u8868\u8fbe\u65b9\u5f0f\u4e2d\u8f6c\u6362\u8fc7\u6765\u3002\n\n\n\u603b\u7ebf\u63a5\u53e3\n\n\n\u5728\u5927\u591a\u6570\u9762\u5411\u5bf9\u8c61\u7cfb\u7edf\u5f53\u4e2d\uff0c\u6709\u5185\u5728\u5171\u6027\u7684\u65b9\u6cd5\u96c6\u548c\u5c5e\u6027\u96c6\u4f1a\u88ab\u7f16\u5165\u5c0f\u7ec4\u3002\u8fd9\u4e9b\u529f\u80fd\u7ec4\u7684\u7edf\u4e00\u63cf\u8ff0\u88ab\u79f0\u4f5c\u63a5\u53e3\u3002\u63a5\u53e3\u662f\u4e00\u4e2a\u5728\u5b9e\u73b0\u63a5\u53e3\u89c4\u8303\u7684\n\u5b9e\u4f53\u548c\u5916\u754c\u4e16\u754c\u4e4b\u95f4\u7684\u5951\u7ea6\u3002\u4f9d\u6b64\uff0c\u63a5\u53e3\u662f\u901a\u8fc7\u5408\u9002\u7684\u6807\u51c6\u673a\u6784\u7684\u6807\u51c6\u5316\u7684\u5019\u9009\u4eba\u3002\u5404\u7c7b\u670d\u52a1\uff08\u4ece\u7535\u8bdd\u5230\u5a92\u4f53\u64ad\u653e\u63a7\u5236\uff09\u7684\u63a5\u53e3\u7684\u89c4\u8303\u53ef\u4ee5\u5728\u7f51\u7ad9\u4e0a\u627e\u5230\u3002\u6839\u636e D-Bus \u89c4\u8303\uff0c\u8fd9\u4e9b\u63a5\u53e3\u7531 XML \u63cf\u8ff0\u3002\n\n\n\u4e00\u4e2a\u63a5\u53e3\u5b9a\u4e49\u5c06\u4e00\u7ec4\u4e3b\u7ebf\u65b9\u6cd5\uff0c\u4e3b\u7ebf\u4fe1\u53f7\u548c\u4e3b\u7ebf\u5c5e\u6027\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5bf9\u5e94\u7684\u7c7b\u578b\u7b7e\u540d\u96c6\u6210\u5230\u4e00\u4e2a\u5df2\u547d\u540d\u7684\u7ec4\u4e2d\u3002\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u63a5\u53e3\u901a\u5e38\u7531\u5ba2\u6237\uff0c\u670d\u52a1\u6216\u8005\u70b9\u7684\u8fdb\u7a0b\u5b9e\u73b0\u3002\u5f53\u5df2\u547d\u540d\u7684\u63a5\u53e3\u88ab\u5b9e\u73b0\u540e\uff0c\u5728\u5b9e\u73b0\u65b9\u548c\u5916\u754c\u4e16\u754c\u4e4b\u95f4\u5c06\u751f\u6210\u4e00\u4e2a\u5185\u542b\u7684\u5951\u7ea6\uff0c\u5e76\u5c06\u652f\u6301\u6240\u6709\u8be5\u63a5\u53e3\u7684\u603b\u7ebf\u65b9\u6cd5\uff0c\u603b\u7ebf\u4fe1\u53f7\u53ca\u603b\u7ebf\u5c5e\u6027\u3002\n\n\n\u63a5\u53e3\u540d\u901a\u5e38\u53d6\u7528\u53cd\u8f6c\u7684\u57df\u540d\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a AllJoyn \u7684\u6807\u51c6\u63a5\u53e3\u662f\norg.alljoyn.Bus\n\u63a5\u53e3\uff0c\u7531\u8def\u7531\u5668\u521b\u5efa\uff0c\u5e76\u4e3a\u603b\u7ebf\u9644\u4ef6\u63d0\u4f9b\u4e00\u4e9b\u57fa\u7840\u670d\u52a1\u3002\n\n\n\u7531\u4efb\u610f\u547d\u540d\u7a7a\u95f4\u7684\u5b57\u7b26\u4e32\u521b\u5efa\u63a5\u53e3\u540d\u79f0\u662f\u4e0d\u53ef\u53d6\u7684\u3002\u63a5\u53e3\u540d\u79f0\u5b57\u7b26\u4e32\u4e3a\u4e00\u4e2a\u7279\u5b9a\u7684\u65b9\u6cd5\u670d\u52a1\uff0c\u4e0d\u53ef\u4ee5\u4e0e\u5176\u4ed6\u76f8\u4f3c\u7684\u5b57\u7b26\u4e32\u76f8\u6df7\u6dc6\uff0c\u5c24\u5176\u662f\u4e3b\u7ebf\u540d\u79f0\u3002\u4f8b\u5982\uff0c\norg.alljoyn.sample.chat\n \u53ef\u4ee5\u662f\u4e00\u4e2a\u6052\u5b9a\u4e0d\u53d8\u7684\u53ef\u4ee5\u7531\u7528\u6237\u641c\u7d22\u5230\u7684\u4e3b\u7ebf\u540d\u79f0\u3002\u540c\u65f6\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5728\u603b\u7ebf\u5bf9\u8c61\u4e2d\u5b9a\u4e49\u4e86\u4e0e\u5df2\u5b9a\u4e49\u4e86\u603b\u7ebf\u540d\u79f0\u7684\u603b\u7ebf\u9644\u4ef6\u76f8\u5173\u7684\uff0c\u53ef\u4f7f\u7528\u7684\u65b9\u6cd5\uff0c\u4fe1\u53f7\u53ca\u5c5e\u6027\u7684\u540d\u5b57\u3002\u88ab\u8d4b\u4e88\u540d\u79f0\u7684\u63a5\u53e3\u7684\u5b58\u5728\u6697\u542b\u5728\u4e3b\u7ebf\u540d\u79f0\u7684\u5b58\u5728\u5f53\u4e2d\uff0c\u867d\u7136\u4ed6\u4eec\u6709\u65f6\u770b\u8d77\u6765\u5b8c\u5168\u76f8\u540c\uff0c\u4f46\u4ed6\u4eec\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u4e24\u7c7b\u3002\n\n\n\u603b\u7ebf\u5bf9\u8c61\u548c\u603b\u7ebf\u8def\u5f84\n\n\n\u603b\u7ebf\u63a5\u53e3\u4e3a\u5de5\u4f5c\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e0a\u7684\u63a5\u53e3\u7684\u58f0\u660e\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6807\u51c6\u5316\u7684\u65b9\u5f0f\u3002\u603b\u7ebf\u5bf9\u8c61\u4e3a\u5b9e\u73b0\u7ed9\u5b9a\u89c4\u8303\u7684\u63a5\u53e3\u63d0\u4f9b\u4e86\u811a\u624b\u67b6\u3002\u603b\u7ebf\u5bf9\u8c61\u5b58\u5728\u4e8e\u603b\u7ebf\u9644\u4ef6\u4e2d\uff0c\u626e\u6f14\u901a\u4fe1\u7ec8\u70b9\u7684\u89d2\u8272\u3002\n\n\n\u7531\u4e8e\u5b9e\u73b0\u5b58\u5728\u4e8e\u4efb\u610f\u7ed9\u5b9a\u603b\u7ebf\u9644\u4ef6\u7684\u6307\u5b9a\u63a5\u53e3\u7684\u65b9\u6cd5\u4e0d\u6b62\u4e00\u79cd\uff0c\u6b64\u5904\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u8def\u5f84\u5b9e\u73b0\u7684\u9644\u52a0\u7ed3\u6784\uff0c\u7528\u4ee5\u533a\u5206\u8fd9\u4e9b\u4e0d\u540c\u7684\u63a5\u53e3\u5b9e\u73b0\u65b9\u6cd5\u3002\n\n\n\u5c31\u50cf\u5b58\u5728\u4e8e\u63a5\u53e3\u547d\u540d\u7a7a\u95f4\u7684\u63a5\u53e3\u540d\u5b57\u7b26\u4e32\u4e00\u6837\uff0c\u5bf9\u8c61\u8def\u5f84\u4e5f\u5b58\u5728\u4e8e\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u3002\u6b64\u547d\u540d\u7a7a\u95f4\u88ab\u89c4\u5212\u4e3a\u4e00\u4e2a\u6811\u578b\u7ed3\u6784\uff0c\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5bfb\u627e\u8def\u5f84\u7684\u6a21\u578b\u5219\u662f\u4e00\u4e2a\u76ee\u5f55\u6811\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u8c61\u8def\u5f84\u7684\u8def\u5f84\u5206\u9694\u7b26\u662f\u4e00\u4e2a\u6b63\u659c\u6760 (/)\uff0c\u4e0e Unix \u6587\u4ef6\u7cfb\u7edf\u4e2d\u76f8\u540c\u3002\u7531\u4e8e\u603b\u7ebf\u5bf9\u8c61\u662f\u603b\u7ebf\u63a5\u53e3\u7684\u5b9e\u73b0\uff0c\n\u5bf9\u8c61\u8def\u5f84\u53ef\u4ee5\u4e0e\u5176\u76f8\u5e94\u63a5\u53e3\u7684\u547d\u540d\u89c4\u5219\u4fdd\u6301\u4e00\u81f4\u3002\n\n\n\u5728\u5b9a\u4e49\u78c1\u76d8\u63a7\u5236\u5668\u63a5\u53e3\u65f6\uff08\u4f8b\u5982\uff0c\norg.freedesktop.DeviceKit.Disks\n\uff09\uff0c\u53ef\u4ee5\u60f3\u50cf\u7531\u4e0b\u5217\u5bf9\u8c61\u8def\u5f84\u6240\u63cf\u8ff0\u7684\u591a\u91cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u8def\u5f84\u5bf9\u5e94\u7740\u4e24\u4e2a\u4e0d\u540c\u7684\u7269\u7406\u78c1\u76d8\u63a5\u53e3\uff1a\n\n\n/org/freedesktop/DeviceKit/Disks/sda1\n\n/org/freedesktop/DeviceKit/Disks/sda2\n\n\n\n\n\u4ee3\u7406\u4e3b\u7ebf\u5bf9\u8c61\n\n\n\u5728 AllJoyn \u4e3b\u7ebf\u4e0a\u7684\u4e3b\u7ebf\u5bf9\u8c61\u901a\u8fc7\u4ee3\u7406\u88ab\u8bbf\u95ee\u3002\u4ee3\u7406\u662f\u4e00\u4e2a\u53ef\u88ab\u4e3b\u7ebf\u8bbf\u95ee\u7684\u8fdc\u7aef\u5bf9\u8c61\u7684\u672c\u5730\u4ee3\u8868\u3002\u4ee3\u7406\u5e76\u4e0d\u662f\u7531 AllJoyn \u7cfb\u7edf\u6240\u5b9a\u4e49\u7684\uff0c\u800c\n\u662f\u4e00\u4e2a\u88ab\u5e7f\u6cdb\u5e94\u7528\u7684\u540d\u8bcd\u3002\u5728 AllJoyn \u6846\u67b6\u4e2d\u4f60\u4f1a\u7ecf\u5e38\u9047\u5230 ProxyBusObject \u8fd9\u4e2a\u8bcd\uff0c\u4ed6\u6307\u793a\u7740\u4ee3\u7406\u7684\u4e00\u4e2a\u7279\u5b9a\u7684\u672c\u8d28\uff0d\u4ed6\u662f\u4e00\u4e2a\u8fdc\u7aef\u603b\u7ebf\n\u5bf9\u8c61\u7684\u672c\u5730\u4ee3\u7406\u3002\n\n\nProxyBusObject \u662f\u5e95\u5c42\u7ea7 AllJoyn \u4ee3\u7801\u7684\u4e00\u90e8\u5206\uff0c\u8d1f\u8d23\u5bf9\u8c61\u4ee3\u7406\u57fa\u672c\u529f\u80fd\u7684\u8fd0\u884c\u3002\n\n\n\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cRMI \u7cfb\u7edf\u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u4e2a\u5b9e\u73b0\u63a5\u53e3\u7684\u4ee3\u7406\uff0c\u4ed6\u770b\u8d77\u6765\u4e0e\u5c06\u8c03\u7528\u8fdc\u7a0b\u5bf9\u8c61\u7684\u90a3\u4e00\u4e2a\u975e\u5e38\u76f8\u8fd1\u3002\u4ee3\u7406\u5bf9\u8c61\u4e0e\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u540c\u4e00\u4e2a\u63a5\u53e3\uff0c\u4f46\u8fd0\u884c\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u53c2\u6570\u4ee5\u53ca\u5411\u670d\u52a1\u53d1\u9001\u6570\u636e\u7684\u8fdb\u7a0b\u3002\n\n\n\u5728 AllJoyn \u6846\u67b6\u4e2d\uff0c\u7528\u6237\u4e0e\u670d\u52a1\u8f6f\u4ef6\u5e38\u5e38\u901a\u8fc7\u7279\u5b9a\u7684\u7f16\u7a0b\u8bed\u8a00\u8054\u7f16\u6765\u5b9e\u73b0\u5177\u4f53\u7684\u7528\u6237\u5c42\u4ee3\u7406\u5bf9\u8c61\u3002\u7528\u6237\u5c42\u7684\u4ee3\u7406\u5bf9\u8c61\u5219\u901a\u8fc7 AllJoyn \u4ee3\u7406\u603b\u7ebf\u8def\u5f84\u7684\u5bb9\u91cf\u6765\u5b9e\u73b0\u5c40\u90e8\u900f\u660e\uff0f\u8fdc\u7a0b\u900f\u660e\u7684\u76ee\u6807\u3002\n\n\n\u603b\u7ebf\u540d\u79f0\n\n\nAllJoyn \u603b\u7ebf\u4e0a\u7684\u8fde\u63a5\u662f\u4e00\u79cd\u7528\u6765\u5b9e\u73b0\u88ab\u63a5\u53e3\u540d\u6240\u63cf\u8ff0\u7684\u63a5\u53e3\u7684\u670d\u52a1\u3002\u63a5\u53e3\u7684\u5b9e\u73b0\u88ab\u6574\u7406\u5230\u670d\u52a1\u4e2d\u63a5\u53e3\u603b\u7ebf\u5bf9\u8c61\u7684\u6811\u4e2d\u3002\u7528\u6237\u5e0c\u671b\u901a\u8fc7\u4ee3\u7406\u5bf9\u8c61\u6765\u6d88\u8d39\u670d\u52a1\uff0c\u8fd9\u5c06\u4f1a\u4f7f\u7528\u4f4e\u5c42\u6b21 AllJoyn \u4ee3\u7406\u4e3b\u7ebf\u5bf9\u8c61\u6765\u5b89\u6392\u903b\u8f91\u4e3b\u7ebf\u4e0a\u4e3b\u7ebf\u65b9\u6cd5\uff0c\u4e3b\u7ebf\u4fe1\u53f7\u548c\u4e3b\u7ebf\u5c5e\u6027\u76f8\u5173\u4fe1\u606f\u7684\u6295\u9012\u3002\n\n\n\u4e3a\u4e86\u5b8c\u6210\u4e3b\u7ebf\u5bfb\u5740\u6b65\u9aa4\uff0c\u4e0e\u4e3b\u7ebf\u7684\u8fde\u63a5\u5fc5\u987b\u6709\u552f\u4e00\u6807\u8bc6\u3002AllJoyn \u7cfb\u7edf\u4e3a\u6bcf\u4e00\u4e2a\u4e3b\u7ebf\u9644\u4ef6\u5206\u914d\u4e00\u4e2a\u4e34\u65f6\u7684\u552f\u4e00\u4e3b\u7ebf\u6807\u793a\uff0c\u6b64\u552f\u4e00\u6807\u8bc6\u5728\u670d\u52a1\u6bcf\n\u4e00\u6b21\u8fde\u63a5\u5230\u4e3b\u7ebf\u65f6\u81ea\u52a8\u751f\u6210\uff0c\u56e0\u6b64\u8be5\u6807\u793a\u5e76\u4e0d\u9002\u5408\u4f5c\u4e3a\u670d\u52a1\u7684\u6301\u4e45\u6807\u8bc6\u3002\u5e94\u8be5\u6709\u4e00\u79cd\u53ef\u4ee5\u6301\u4e45\u67e5\u9605\u5230\u670d\u52a1\u7684\u65b9\u5f0f\uff0c\nwell-known names\n \u88ab\u7528\n\u6765\u5145\u5f53\u670d\u52a1\u7684\u6301\u4e45\u6807\u793a\u3002\n\n\n\u5c31\u50cf\u53ef\u4ee5\u7ecf\u57df\u540d\u6307\u4ee3\u5728\u7f51\u7edc\u4e0a\u7684\u4e3b\u673a\u7cfb\u7edf\uff0c\u5e76\u4e14\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u4e0d\u4f1a\u53d8\u5316\u4e00\u6837\uff0c\u540c\u6837\u53ef\u4ee5\u901a\u8fc7 well-known bus name \u6307\u4ee3AllJoyn \u4e3b\u7ebf\u4e0a\u7684\u529f\n\u80fd\u6a21\u5757\u3002\u5c31\u50cf\u63a5\u53e3\u540d\u79f0\u662f\u5012\u5e8f\u7684\u57df\u540d\u4e00\u6837\uff0c\u4e3b\u7ebf\u540d\u79f0\u4e5f\u6709\u6b64\u79cd\u5448\u73b0\u65b9\u6cd5\u3002\u7531\u4e8e\u63a5\u53e3\u540d\u4e0e well-known bus names\u5728\u51fa\u4e8e\u65b9\u4fbf\u7684\u8003\u8651\u4e0b\u7ecf\u5e38\u88ab\u8bbe\n\u5b9a\u4e3a\u540c\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e9b\u6df7\u6dc6\u7684\u53d1\u751f\u3002\u8bf7\u8c28\u8bb0\uff0c\u4ed6\u4eec\u7684\u7528\u9014\u5b8c\u5168\u4e0d\u540c\uff1a\u63a5\u53e3\u540d\u5b9a\u4e49\u4e00\u4e2a\u7531\u4e3b\u7ebf\u5bf9\u8c61\u5b9e\u73b0\u7684\uff0c\u8fd0\u884c\u5728\u4e3b\u7ebf\u9644\u4ef6\u4e2d\u7684\uff0c\u63cf\u8ff0\u7528\u6237\u4e0e\u670d\u52a1\u7684\u5951\u7ea6\uff1bwell-known name \u5219\u6307\u4e3a\u60f3\u8fde\u63a5\u5230\u67d0\u670d\u52a1\u7684\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u7a33\u5b9a\u4e0d\u53d8\u7684\u8fde\u63a5\u65b9\u5f0f\u7684\u670d\u52a1\u3002\n\n\n\u5728\u5e94\u7528 well-known name \u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\uff08\u7ecf\u8fc7\u4e3b\u7ebf\u9644\u4ef6\uff09\u5fc5\u987b\u4e8b\u5148\u5bf9\u4e3b\u7ebf\u8def\u7531\u53d1\u51fa\u4f7f\u7528\u8be5\u6807\u8bc6\u7684\u8bf7\u6c42\u3002\u5982\u679c\u6b64 well-known name \u6682\u65e0\u5176\u4ed6\u7528\n\u6237\u5360\u7528\uff0c\u7533\u8bf7\u8005\u5c06\u4f1a\u88ab\u7ed9\u4e88\u8be5\u540d\u79f0\u7684\u72ec\u5bb6\u4f7f\u7528\u6743\u3002\u8be5\u673a\u5236\u786e\u4fdd well-known names \u5728\u4efb\u4f55\u65f6\u95f4\u90fd\u80fd\u552f\u4e00\u6307\u4ee3\u4e3b\u7ebf\u4e0a\u7684\u7279\u5b9a\u5730\u5740\u3002\n\n\n\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a well-known name \u610f\u5473\u7740\u76f8\u5173\u7684\u4e3b\u7ebf\u9644\u4ef6\u5b9e\u73b0\u4e00\u7cfb\u5217\u4e3b\u7ebf\u5bf9\u8c61\u4ee5\u53ca\u4e00\u4e9b\u53ef\u7528\u670d\u52a1\u6982\u5ff5\u7684\u5408\u7ea6\u3002\u7531\u4e8e\u4e3b\u7ebf\u540d\u79f0\u4e3a\u5206\u5e03\u5f0f\u4e3b\u7ebf\n\u63d0\u4f9b\u552f\u4e00\u5730\u5740\uff0c\u6240\u6709\u5728\u4e3b\u7ebf\u4e0a\u7684\u4e3b\u7ebf\u540d\u79f0\u5fc5\u987b\u662f\u72ec\u7279\u552f\u4e00\u3002\u4f8b\u5982\uff0c\norg.alljoyn.sample.chat\n\u53ef\u7528\u4f5c\u4e3b\u7ebf\u540d\u79f0\uff0c\u610f\u5473\u7740\u6709\u7740\u76f8\u540c\u540d\u79f0\u7684\u4e3b\u7ebf\n\u9644\u4ef6\u5c06\u53ef\u5b9e\u73b0\u4e00\u4e2a\u804a\u5929\u670d\u52a1\u3002\u6839\u636e\u8be5\u540d\u79f0\u5df2\u88ab\u5360\u7528\u7684\u4e8b\u5b9e\uff0c\u53ef\u4ee5\u63a8\u65ad\u51fa\u5728\u4ee5 \n/org/alljoyn/sample/chat\n \u4e3a\u4e3b\u7ebf\u8def\u5f84\u7684\u4e3b\u7ebf\u5bf9\u8c61\u4e0a\u5df2\u7ecf\u5b9e\u73b0\n\u4e86 \n/org/alljoyn/sample/chat\n \u63a5\u53e3\u3002\n\n\n\u5728\u5b9e\u73b0\u201c\u804a\u5929\u201d\u529f\u80fd\u65f6\uff0c\u4e00\u65b9\u5f80\u5f80\u671f\u671b\u7740\u5728 AllJoyn \u603b\u7ebf\u4e0a\u80fd\u53d1\u73b0\u53e6\u4e00\u4e2a\u540c\u6837\u652f\u6301\u804a\u5929\u529f\u80fd\u7684\u76f8\u4f3c\u7ec4\u4ef6\u3002\u7531\u4e8e\u4e3b\u7ebf\u540d\u79f0\u5fc5\u987b\u4f5c\u4e3a\u7ec4\u4ef6\u9644\u4ef6\u7684\u552f\n\u4e00\u8bc6\u522b\uff0c\u5728\u8fd9\u91cc\u5c31\u9700\u8981\u4ee5\u52a0\u5165\u540e\u7f00\u7684\u65b9\u5f0f\u786e\u4fdd\u552f\u4e00\u6027\u3002\u540e\u7f00\u53ef\u4ee5\u662f\u7528\u6237\u540d\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u552f\u4e00\u7684\u6570\u5b57\u3002\u5728\u804a\u5929\u670d\u52a1\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u603b\u7ebf\u9644\u4ef6\uff1a\n\n\norg.alljoyn.sample.chat.bob\n\norg.alljoyn.sample.chat.carol\n\n\n\n\n\u6b64\u5904\u7684 well-known name \u4e2d\uff0c\u524d\u7f00\norg.alljoyn.sample.chat.\n\u7684\u4f5c\u7528\u662f\u5145\u5f53\u670d\u52a1\u540d\uff0c\u53ef\u4ee5\u7531\u5176\u63a8\u65ad\u51fa\u804a\u5929\u670d\u52a1\u63a5\u53e3\u4ee5\u53ca\u5bf9\u8c61\u5b9e\u73b0\u7684\u5b58\u5728\u3002\u540e\u7f00 \nbob\n and \ncarol\n \u4f7f\u4e24\u4e2a\u5b9e\u4f8b\u7684 well-known name \u552f\u4e00\u3002\n\n\n\u968f\u4e4b\u800c\u6765\u7684\u95ee\u9898\u662f\uff0c\u5904\u4e8e\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e0a\u7684\u670d\u52a1\u5982\u4f55\u88ab\u5b9a\u4f4d\u3002\u7b54\u6848\u662f\u901a\u8fc7\u5ba2\u6237\u7aef\u7684\u670d\u52a1\u5e7f\u64ad\u4ee5\u53ca\u53d1\u73b0\u673a\u5236\u3002\n\n\n\u5e7f\u64ad\u53ca\u53d1\u73b0\n\n\n\u5173\u4e8e\u670d\u52a1\u5e7f\u64ad\u4e0e\u53d1\u73b0\u7684\u95ee\u9898\u4e3b\u8981\u6709\u4e24\u65b9\u9762\u3002\u4e4b\u524d\u63d0\u53ca\u5230\uff0c\u5373\u4fbf\u662f\u5bf9\u4e8e\u4f4d\u4e8e AllJoyn \u603b\u7ebf\u672c\u5730\u7247\u6bb5\u7684\u670d\u52a1\uff0c\u7528\u6237\u4ecd\u7136\u9700\u8981\u904d\u5386\u6240\u6709\u7684 well-known names\u6765\u641c\u5bfb\u81ea\u5df1\u6240\u9700\u8981\u7684\u670d\u52a1\u3002\u518d\u8005\uff0c\u5f53\u7528\u6237\u8bd5\u56fe\u53d1\u73b0\u5e76\u4e0d\u4f4d\u4e8e\u73b0\u6709\u7684\u4e3b\u7ebf\u7247\u6bb5\u4e0a\u7684\u670d\u52a1\u65f6\uff0c\u4f1a\u53d1\u751f\u66f4\u6709\u8da3\u7684\u95ee\u9898\u3002\n\n\n\u8bf7\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff1a\u5f53\u4e00\u65b9\u643a\u5e26\u7740\u8fd0\u884c AllJoyn \u6846\u67b6\u7684\u8bbe\u5907\u63a5\u8fd1\u53e6\u4e00\u65b9\u7684\u90bb\u8fd1\u573a\u65f6\u3002\u7531\u4e8e\u4e24\u8bbe\u5907\u5df2\u88ab\u7269\u7406\u5206\u79bb\u7684\uff0c\u6846\u67b6\u7684\u8bbe\u5907\u63a5\u8fd1\u53e6\u4e00\u65b9\u7684\u90bb \u8fd1\u573a\u65f6\u3002\u7531\u4e8e\u4e24\u8bbe\u5907\u5df2\u88ab\u7269\u7406\u5206\u79bb\u7684\u4e8b\u5b9e\uff0c\u7531\u90fd\u4e0d\u53ef\u80fd\u77e5\u9053\u5bf9\u65b9\u7684\u4efb\u4f55\u4fe1\u606f\u3002\u90a3\u4e48\u8def\u7531\u70b9\u662f\u5982\u4f55\u786e\u5b9a\u5bf9\u65b9\u8bbe\u5907\u7684\u5b58\u5728\uff0c\u5982\u4f55\u5224\u65ad\u662f\u5426\u6709\u5fc5\u8981\u8fdb\u884c\u8fde\u63a5\u5e76\u5efa\u7acb\u903b\u8f91\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u5462\uff1f\n\n\n\u7b54\u6848\u662f\u901a\u8fc7 AllJoyn \u670d\u52a1\u5e7f\u64ad\u548c\u53d1\u73b0\u8bbe\u5907\u3002\u5f53\u670d\u52a1\u5728\u672c\u5730\u8bbe\u5907\u4e0a\u5f00\u59cb\u65f6\uff0c\u4ed6\u9996\u5148\u5c06\u88ab\u8d4b\u4e88\u7684 well-known name \u53cd\u8f6c\uff0c\u968f\u540e\u5411\u4ed6\u90bb\u8fd1\u57df\u7684\u8bbe\u5907\n\u5e7f\u64ad\u5176\u5b58\u5728\u3002AllJoyn \u6846\u67b6\u63d0\u4f9b\u4e00\u4e2a\u62bd\u8c61\u5c42\uff0c\u4f7f\u670d\u52a1\u53ef\u4ee5\u901a\u8fc7\u5e95\u5c42\u6280\u672f\uff0c\u8bf8\u5982Wi-Fi, Wi-Fi Direct \u6216\u5176\u4ed6\u672a\u6765\u7684\u65e0\u7ebf\u4f20\u8f93\u65b9\u5f0f\u6765\u5b9e\u73b0\u900f\u660e\u5e7f\n\u64ad\u3002\n\n\n\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u8054\u7cfb\u4eba\u4ea4\u6362\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5176\u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u5c06 well-known name\uff1a\norg.alljoyn.sample.contacts.bob\n \u53cd\u8f6c\u5e76\u5e7f\u64ad\u3002\u5982\u6b64\n\u505a\u5c06\u89e6\u53d1\u4ee5\u4e0b\u4e00\u79cd\u6216\u591a\u79cd\u4e8b\u4ef6\uff1a\u901a\u8fc7 Wi-Fi \u63a5\u5165\u70b9\u8fdb\u884c UDP \u7ec4\u64ad\uff0c\u901a\u8fc7 Wi-Fi Direct \u8fdb\u884c\u9884\u5173\u8054\u670d\u52a1\u7684\u5e7f\u64ad\uff0c\u6216\u8005\u901a\u8fc7\u84dd\u7259\u670d\u52a1\u53d1\u73b0\u534f\u8bae\n\u53d1\u9001\u6d88\u606f\u3002\u5e7f\u64ad\u7684\u901a\u4fe1\u673a\u5236\u5e76\u4e0d\u9700\u8981\u8003\u8651\u5e7f\u64ad\u8005\u3002\u7531\u4e8e\u8054\u7cfb\u4eba\u4ea4\u6362\u5728\u6982\u5ff5\u4e0a\u662f\u4e00\u4e2a\u70b9\u5bf9\u70b9\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e00\u65b9\u901a\u5e38\u4f1a\u5e0c\u671b\u53e6\u4e00\u65b9\u4e5f\u5e7f\u64ad\u7c7b\u4f3c\u7684\u4ea4\u6362\u670d\u52a1\uff0c\u4f8b\u5982 \norg.alljoyn.sample.contacts.carol\n.\n\n\n\u5e94\u7528\u7a0b\u5e8f\u5ba2\u6237\u7aef\u4e5f\u53ef\u901a\u8fc7\u521d\u59cb\u5316\u4e00\u4e2a\u53d1\u73b0\u64cd\u4f5c\u6765\u58f0\u660e\u4ed6\u4eec\u5bf9\u63a5\u6536\u5e7f\u64ad\u7684\u5174\u8da3\u6240\u5728\u3002\u4f8b\u5982\uff0c\u7528\u6237\u53ef\u4ee5\u8981\u6c42\u6dfb\u52a0\u524d\u7f00\u4e3a\norg.alljoyn.sample.contacts\n\u7684\u8054\u7cfb\u4eba\u670d\u52a1\u5b9e\u4f8b\u3002\u82e5\u5982\u6b64\u505a\uff0c\u4e24\u65b9\u8bbe\u5907\u90fd\u4f1a\u53d1\u51fa\u8fd9\u79cd\u8bf7\u6c42\u3002\n\n\n\u5e95\u5c42 AllJoyn \u7cfb\u7edf\u5728\u79fb\u52a8\u7535\u8bdd\u8fdb\u5165\u5176\u4ed6\u8bbe\u5907\u7684\u90bb\u8fd1\u57df\u65f6\u7acb\u5373\u5f00\u59cb\u901a\u8fc7\u53ef\u7528\u4f20\u8f93\u6e20\u9053\u4f20\u8f93\u5e76\u63a5\u53d7\u5e7f\u64ad\u3002\u6bcf\u53f0\u8bbe\u5907\u5728\u76f8\u5e94\u670d\u52a1\u53ef\u4f7f\u7528\u65f6\u4e5f\u4f1a\u6536\u5230\u63d0\u9192\u3002\n\n\n\u7531\u4e8e\u670d\u52a1\u63a8\u5e7f\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u4f20\u8f93\u65b9\u5f0f\u63a5\u53d7\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u91cc\u8fd8\u9700\u8981\u9644\u52a0\u7684\u5e95\u5c42\u5de5\u4f5c\u4ee5\u4fbf\u751f\u6210\u5e95\u5c42\u901a\u4fe1\u673a\u5236\uff0c\u5bf9\u5df2\u53d1\u73b0\u670d\u52a1\u7684\u5e94\u7528\u8fd8\u6709\u53e6\u5916\u4e00\u90e8\u5206\u6982\u5ff5\u3002\u8fd9\u5c31\u662f\u901a\u4fe1\u4f1a\u8bdd\u3002\n\n\n\u4f1a\u8bdd\n\n\n\u5173\u4e8e\u603b\u7ebf\u540d\u79f0\uff0c\u5bf9\u8c61\u8def\u5f84\u4ee5\u53ca\u63a5\u53e3\u540d\u6210\u7684\u6982\u5ff5\u5df2\u7ecf\u88ab\u8ba8\u8bba\u8fc7\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u5b9e\u4f53\u8fde\u63a5\u5230 AllJoyn \u603b\u7ebf\u540e\u4f1a\u88ab\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u3002\u8fde\u63a5\uff08\u4e3b\u7ebf\n\u9644\u4ef6\uff09\u4e5f\u53ef\u7533\u8bf7\u4e00\u4e2a well-known name. \u6b64 well-known name \u53ef\u88ab\u7528\u6237\u7528\u4e8e\u5b9a\u4f4d\u6216\u53d1\u73b0\u603b\u7ebf\u4e0a\u7684\u670d\u52a1\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u670d\u52a1\u53ef\u4ee5\u8fde\u63a5\u5230 AllJoyn \u603b\u7ebf\u4e0a\u5e76\u88ab\u5206\u914d\u552f\u4e00\u8bc6\u522b\u7b26 \n:1.1\n. \u5982\u679c\u670d\u52a1\u5e0c\u671b\u4ed6\u53ef\u4ee5\u88ab\u5176\u4ed6\u5728\u603b\u7ebf\u4e0a\u7684\u5b9e\u4f53\u627e\u5230\uff0c\u6b64\u670d\u52a1\u5fc5\u987b\u4ece\u603b\u7ebf\u7533\u8bf7\u4e00\u4e2a well-known name\uff0c\u4f8b\u5982\n\ncom.companyA.ProductA\n\uff08\u540e\u9762\u5e38\u4f1a\u52a0\u4e0a\u4e00\u4e2a\u552f\u4e00\u7684\u5b9e\u4f53\u9650\u5b9a\u7b26\uff09\u3002\n\n\n\u6b64\u8bc6\u522b\u7b26\u81f3\u5c11\u6307\u793a\u4e00\u4e2a\u5b9e\u73b0\u4e86\u4e00\u4e9b well-known interface \u7684\u603b\u7ebf\u5bf9\u8c61\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5728\u8fde\u63a5\u5b9e\u4f8b\u5185\uff0c\u603b\u7ebf\u5bf9\u8c61\u53ef\u4ee5\u88ab\u4e00\u4e2a\u4e0e well-known name \u5305\u542b\u76f8\u540c\u7ec4\u4ef6\uff08\u6b64\u5904\u5e76\u975e\u662f\u5f3a\u5236\u8981\u6c42\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u65b9\u4fbf\uff09\u7684\u8def\u5f84\u8fa8\u8ba4\u51fa\u6765\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5bf9\u5e94\u603b\u7ebf\u8bc6\u522b\u7b26\ncom.companyA.ProductA\n\n\u7684\u8def\u5f84\u53ef\u4ee5\u662f\n/com/companyA/ProductA\n.\n\n\n\u4e3a\u4e86\u660e\u767d\u7528\u6237\u603b\u7ebf\u9644\u4ef6\u5230\u76f8\u4f3c\u7684\u670d\u52a1\u9644\u4ef6\u4e4b\u95f4\u7684\u901a\u4fe1\u4f1a\u8bdd\u7684\u5f62\u6210\u673a\u5236\uff0c\u4e5f\u4e3a\u4e86\u63d0\u4f9b\u4e00\u4e2a\u7ec8\u7aef\u5230\u7ec8\u7aef\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 AllJoyn \u673a\u5236\u4e0e\u4e00\u4e2a\n\u7c7b\u4f3c\u7684\u673a\u5236\u505a\u4e00\u4e0b\u6bd4\u5bf9\u3002\n\n\n\u90ae\u653f\u5730\u5740\u7684\u7c7b\u6bd4\n\n\n\u5728 AllJoyn \u6846\u67b6\u4e2d\uff0c\u670d\u52a1\u4f1a\u8bf7\u6c42\u4e00\u4e2a\u5bf9\u4eba\u7c7b\u53ef\u8bfb\u7684\u540d\u5b57\uff0c\u4ee5\u4fbf\u4e8e\u5c06\u81ea\u5df1\u4ee5\u4f17\u6240\u5468\u77e5\u7684\uff0c\u7b80\u5355\u6613\u61c2\u7684\u6807\u7b7e\u5e7f\u64ad\u51fa\u53bb\u3002\u4e3a\u4e86\u5e95\u5c42\u7f51\u7edc\u4e2d\u6d88\u606f\u4ea4\u6362\u7684\u6b63\u5e38\u8fd0\u8f6c\uff0cWell-known names \u4e00\u5b9a\u9700\u8981\u88ab\u7ffb\u8bd1\u6210\u552f\u4e00\u7684\u6807\u8bc6\uff0c\u4f8b\u5982\uff1a\n\n\nWell-known-name:org.alljoyn.sample.chat\n\nUnique name::1.1\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u5f97\u77e5\uff0c\u88ab\u4ee5\norg.alljoyn.sample.chat\n\u5e7f\u64ad\u7684 well-known name \u5bf9\u5e94\u7740\u5df2\u88ab\u5206\u914d\u552f\u4e00\u6807\u8bc6 \n:1.1\n \u7684\u603b\u7ebf\u9644\u4ef6\u3002\u8fd9\u79cd\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u6709\n\u7740\u540d\u5b57\u548c\u90ae\u5bc4\u5730\u5740\u7684\u751f\u610f\u3002\u7ee7\u7eed\u7c7b\u6bd4\uff1a\u6b64\u751f\u610f\u5f88\u53ef\u80fd\u4f1a\u5b58\u5728\u4e8e\u540c\u65f6\u6709\u7740\u5176\u4ed6\u751f\u610f\u7684\u5efa\u7b51\u4e2d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u751f\u610f\u7684\u5730\u5740\u53ef\u80fd\u4f1a\u88ab\u4e00\u4e2a\u66f4\u5177\u4f53\u7684\u623f\u95f4\u53f7\u6240\u63cf\u8ff0\u3002\u7531\u4e8e AllJoyn \u603b\u7ebf\u9644\u4ef6\u53ef\u4ee5\u63d0\u4f9b\u4e0d\u6b62\u4e00\u4e2a\u670d\u52a1\uff0c\u8fd9\u91cc\u4e00\u5b9a\u4e5f\u6709\u53ef\u4ee5\u8bc6\u522b\u591a\u4e2a\u5728\u7ed9\u5b9a\u9644\u4ef6\u4e0a\u7684\u76ee\u7684\u5730\u5740\u7684\u65b9\u6cd5\u3002\u201c contact port numbe \u201d\u5c31\u5bf9\u5e94\u7740\u90ae\u5bc4\u5730\u5740\u7c7b\u6bd4\u4e2d\u7684\u623f\u95f4\u53f7\u3002\n\n\n\u5c31\u50cf\u4eba\u4eec\u5728\u53d1\u9001\u4fe1\u4ef6\u65f6\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u56fd\u5bb6\u90ae\u4ef6\u7cfb\u7edf\uff08\u4f8b\u5982\u7f8e\u56fd\u90ae\u653f\u5c40\uff0c\u6cd5\u56fd\u90ae\u653f\u5c40\uff09\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u79c1\u4eba\u516c\u53f8\uff08\u8054\u90a6\u5feb\u9012\uff0c\u8054\u5408\u5305\u88f9\u670d\u52a1\u516c\u53f8\uff09\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u9009\u62e9\u7d27\u6025\u7a0b\u5ea6\uff08\u6b21\u65e5\u8fbe\uff0c\u4e24\u5de5\u4f5c\u65e5\uff0c\uff09\uff0c\u5728\u4f7f\u7528 AllJoyn \u6846\u67b6\u8054\u7cfb\u670d\u52a1\u65f6\uff0c\u4f7f\u7528\u8005\u5fc5\u987b\u660e\u786e\u63d0\u51fa\u60f3\u83b7\u53d6\u7684\u7f51\u7edc\u8fde\u63a5\u7684\u7279\u6027\uff08\n\u4f8b\u5982\uff0c\u53ef\u9760\u9001\u8fbe\u7684\u6d88\u606f\uff0c\u53ef\u9760\u9001\u8fbe\u5e76\u672a\u7ecf\u6392\u5217\u7684\u6d88\u606f\uff0c\u4e0d\u53ef\u9760\u9001\u8fbe\u5e76\u672a\u7ecf\u6392\u5217\u7684\u6d88\u606f\uff09\u4ee5\u4fbf\u63d0\u4f9b\u8be6\u5c3d\u7684\u914d\u9001\u89c4\u8303\u3002\n\n\n\u8bf7\u6ce8\u610f\u4ee5\u4e0a\u4f8b\u5b50\u4e2d\u5730\u5740\u4fe1\u606f\u7684\u5206\u9694\u4ee5\u53ca\u4fe1\u606f\u7684\u6295\u9012\u3002\u540c\u7406\u4e8e\u7528\u6237\u53ef\u8003\u8651\u5728\u8bf8\u591a\u5feb\u9012\u65b9\u5f0f\u4e2d\u9009\u62e9\u4e00\u79cd\u5b8c\u6210\u4fe1\u4ef6\u4f20\u9001\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u5728 AllJoyn \u7cfb\u7edf\u4e2d\u9009\u62e9\u4e00\u79cd\u65b9\u5f0f\u5b8c\u6210\u6570\u636e\u4f20\u9001\u3002\n\n\nAllJoyn \u4f1a\u8bdd\n\n\n\u4e0e\u4e00\u5c01\u89c4\u8303\u5217\u51fa\u201c\u5bc4\u51fa\u5730\u201d\u548c\u201c\u76ee\u7684\u5730\u201d\u5730\u5740\u7684\u4fe1\u540c\u7406\uff0cAllJoyn \u4f1a\u8bdd\u4e5f\u9700\u8981\u4e0e\u201c\u5bc4\u51fa\u5730\u201d\u548c\u201c\u76ee\u7684\u5730\u201d\u76f8\u7b49\u4ef7\u7684\u4fe1\u606f\u3002\u5728 AllJoyn \u7cfb\u7edf\u4e2d\uff0c\u5bc4\u51fa\u5730\u5730\u5740\u5bf9\u5e94\u7740\u7528\u6237\u7ec4\u4ef6\u7684\u4f4d\u7f6e\uff0c\u76ee\u7684\u5730\u5730\u5740\u5219\u5bf9\u5e94\u670d\u52a1\u7684\u4f4d\u7f6e\u3002\n\n\n\u4e25\u683c\u5730\u8bf4\uff0c\u8fd9\u4e9b\u5730\u5740\u5728\u7535\u8111\u7f51\u7edc\u4e2d\u5e94\u8be5\u88ab\u6210\u4e3a half-associations. \u5728 AllJoyn \u6846\u67b6\u4e2d\uff0c\u6536\u4ef6\u4eba\uff08\u670d\u52a1\u7aef\uff09\u5730\u5740\u901a\u5e38\u662f\u5982\u4e0b\u5f62\u5f0f\u7684\uff1a\n\n\n{session options, bus name, session port}\n\n\n\n\n\u7b2c\u4e00\u4e2a\u533a\u57df\u662f\u4f1a\u8bdd\u9009\u9879\uff0c\u51b3\u5b9a\u7740\u6570\u636e\u7684\u4f20\u9001\u65b9\u5f0f\u3002\u5728 IP \u7f51\u7edc\u4e2d\uff0c\u4f1a\u8bdd\u9009\u9879\u53ef\u4ee5\u4f7f TCP \u6216\u8005 UDP. \u5728 AllJoyn \u6846\u67b6\u4e2d\u8fd9\u4e9b\u7ec6\u8282\u4f1a\u88ab\u865a\u62df\u5316\uff0c\n\u5bf9\u5e94\u7684\u9009\u9879\u5219\u4f1a\u53d8\u4e3a\u201c\u57fa\u4e8e\u6d88\u606f\u7684\u201d\uff0c\u201c\u672a\u6392\u5217\u7684\u6570\u636e\u201d\uff0c\u6216\u8005\u201c\u4e0d\u7a33\u5b9a\u7684\u672a\u6392\u5217\u6570\u636e\u201d\u3002\u670d\u52a1\u7684\u76ee\u7684\u5730\u7531\u76f8\u5173\u4e3b\u7ebf\u9644\u4ef6\u6240\u8bf7\u6c42\u7684 well-known name \u7ed9\u51fa\u3002\n\n\n\u4e0e\u4e4b\u524d\u90ae\u7f16\u5730\u5740\u4f8b\u5b50\u4e2d\u7684\u623f\u95f4\u53f7\u7c7b\u4f3c\uff0cAllJoyn \u6a21\u578b\u4e2d\u4e5f\u6709\u5728\u4e3b\u7ebf\u9644\u4ef6\u201c\u91cc\u9762\u201d\u7684\u4f20\u9001\u70b9\u6982\u5ff5\u3002\u6b64\u6982\u5ff5\u5728 AllJoyn \u6846\u67b6\u4e2d\u88ab\u79f0\u4e3a\u4f1a\u8bdd\u7aef\u53e3\u3002\u623f\n\u95f4\u53f7\u53ea\u6709\u5728\u7ed9\u5b9a\u5efa\u7b51\u5185\u624d\u6709\u610f\u4e49\uff0c\u4f1a\u8bdd\u7aef\u53e3\u53f7\u540c\u7406\uff0c\u5fc5\u987b\u8981\u5728\u7ed9\u5b9a\u7684\u603b\u7ebf\u9644\u4ef6\u8303\u56f4\u5185\u5b9a\u4e49\u3002\u8054\u7cfb\u7aef\u53e3\u7684\u5b58\u5728\u4e0e\u6570\u503c\u88ab\u4e3b\u7ebf\u6807\u8bc6\u6240\u95f4\u63a5\u6307\u51fa\uff0c\u8fd9\u4e0e\u5e95\u5c42\u7684\u5bf9\u8c61\u548c\u63a5\u53e3\u7ec4\u88ab\u95f4\u63a5\u6307\u51fa\u7684\u65b9\u5f0f\u76f8\u540c\u3002\n\n\n\u5bc4\u4ef6\u4eba\u5730\u5740\u5bf9\u5e94\u5ba2\u6237\u7aef\u4fe1\u606f\uff0c\u4e5f\u662f\u7531\u76f8\u4f3c\u7684\u539f\u7406\u751f\u6210\u3002\u4e3a\u4e86\u548c\u670d\u52a1\u7aef\u6b63\u5e38\u901a\u4fe1\uff0c\u5ba2\u6237\u7aef\u5fc5\u987b\u6709\u81ea\u5df1\u7684 half-association.\n\n\n{session options, unique name, session ID}\n\n\n\n\n\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u7533\u8bf7 well-known \u4e3b\u7ebf\u540d\u79f0\uff0c\u6240\u4ee5\u4ed6\u4eec\u53ef\u4ee5\u63d0\u4f9b\u81ea\u5df1\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff08\u4f8b\u5982\n:1.1\n\uff09\u3002\u7531\u4e8e\u5ba2\u6237\u7aef\u4e0d\u662f\u4f1a\u8bdd\u7684\u7ec8\u70b9\uff0c\u4ed6\u4eec\u4e5f\u4e0d\u9700\u8981\u63d0\u4f9b\u4f1a\u8bdd\u7aef\u53e3\uff0c\u4f46\u662f\u5728\u8fde\u63a5\u5efa\u7acb\u5b8c\u6210\u540e\u4f1a\u88ab\u5206\u914d\u4f1a\u8bdd ID. \u5728\u4f1a\u8bdd\u5efa\u7acb\u6b65\u9aa4\u4e2d\u6b64\u4f1a\u8bdd ID \u4e5f\u4f1a\u88ab\u8fd4\u56de\u5230\u670d\u52a1\u5668\u7aef\u3002\u5bf9\u4e8e\u719f\u6089 TCP \u7f51\u7edc\u7ed3\u6784\u7684\u4eba\n\uff0c\u6b64\u64cd\u4f5c\u4e0e TCP \u4e2d\u5efa\u7acb\u8fde\u63a5\u7684\u64cd\u4f5c\u662f\u5bf9\u7b49\u7684\uff0c\u670d\u52a1\u5668\u7aef\u901a\u8fc7 well-known \u7aef\u53e3\u88ab\u8bbf\u95ee\u3002\u5728\u4f1a\u8bdd\u5efa\u7acb\u540e\uff0c\u5ba2\u6237\u7aef\u7528\u4e00\u4e2a\u4e34\u65f6\u7aef\u53e3\u63cf\u8ff0\u76f8\u4f3c\u7684 half-association.\n\n\n\u5728\u5efa\u7acb\u4f1a\u8bdd\u65f6\uff0c\u4e24\u65b9\u7684 half-associations \u4f1a\u88ab\u805a\u5408\uff1a\n\n\n{session options, bus name, session port}   Service\n\n{session options, unique name, session ID}  Client\n\n\n\n\n\u6ce8\u610f\uff0c\u4f1a\u8bdd\u9009\u9879\u4e2d\u6709\u4e24\u4e2a\u9009\u62e9\u3002\u5728\u901a\u4fe1\u5efa\u7acb\u65f6\uff0c\u4f1a\u8bdd\u673a\u5236\u88ab\u770b\u4f5c\u662f\u670d\u52a1\u7aef\u6240\u80fd\u63d0\u4f9b\u7684\u4f1a\u8bdd\u9009\u9879\u4ee5\u53ca\u7531\u5ba2\u6237\u7aef\u6240\u8bf7\u6c42\u7684\u4f1a\u8bdd\u9009\u9879\u3002\u5728\u4f1a\u8bdd\u5efa\u7acb\u8fc7\u7a0b\u4e2d\uff0c\u6709\u4e00\u90e8\u5206\u662f\u7528\u6765\u534f\u5546\u4f55\u79cd\u4f1a\u8bdd\u9009\u9879\u5c06\u4f1a\u6700\u7ec8\u88ab\u91c7\u53d6\u3002\u4e00\u65e6\u4f1a\u8bdd\u5efa\u7acb\u5b8c\u6210\uff0c\u4e24\u65b9\u7684 half-associations \u4f1a\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684 AllJoyn \u901a\u4fe1\u8def\u5f84\uff1a\n\n\n{session options, bus name, unique name, session ID}\n\n\n\n\n\u5728\u4f1a\u8bdd\u5efa\u7acb\u7a0b\u5e8f\u4e2d\uff0c\u4e24\u4e2a\u6b63\u5728\u901a\u4fe1\u7684\u8def\u7531\u8282\u70b9\u4e4b\u95f4\u4f1a\u5f62\u6210\u4e00\u4e2a\u903b\u8f91\u7f51\u7edc\u8fde\u63a5\u3002\u8fd9\u5c06\u4f1a\u5f62\u6210\u4e00\u4e2a wireless radio topology management operation. \u5982\u679c\u4ee5\u4e0a\u8fde\u63a5\u5df2\u7ecf\u5b58\u5728\uff0c\u4ed6\u5c06\u4f1a\u88ab\u518d\u6b21\u4f7f\u7528\u3002\u65b0\u521b\u5efa\u7684\u5e95\u5c42\u8def\u7531\u5bf9\u8def\u7531\u8fde\u63a5\u88ab\u7528\u6765\u5b8c\u6210\u521d\u59cb\u5b89\u5168\u68c0\u67e5\uff0c\u68c0\u67e5\u5b8c\u6210\u540e\u4e24\u8def\u7531\u5c31\u5df2\u6210\u529f\u5c06\u4e24\u4e2a\u539f\u672c\u5206\u79bb\u7684 AllJoyn \u8f6f\u4ef6\u4e3b\u7ebf\u7247\u6bb5\u805a\u5408\u6210\u4e3a\u4e00\u4e2a\u66f4\u5927\u4e00\u4e9b\u7684\u865a\u62df\u4e3b\u7ebf\u3002\n\n\n\u7531\u4e8e\u5728\u67d0\u4e9b\u6280\u672f\u4e2d\uff0c\u6709\u5173\u7ec8\u7aef\u5bf9\u7ec8\u7aef\u7684\u5e95\u5c42\u8fde\u63a5\u6d41\u91cf\u63a7\u5236\u4e00\u5b9a\u8981\u7528\u62d3\u6251\u5b66\u8003\u8651\u4f7f\u5176\u5747\u8861\u5316\uff0c\u4e24\u4e2a\u7ec8\u7aef\u5b9e\u9645\u7684\u8fde\u63a5\uff08\u201c\u5bc4\u4ef6\u4eba\u201d\u5ba2\u6237\u7aef\u548c\u201c\u6536\u4ef6\u4eba\u201d\u670d\u52a1\u7aef\uff09\u53ef\u80fd\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u5bfc\u81f4\u53e6\u4e00\u4e2a\u72ec\u7acb\u7684\u901a\u4fe1\u4fe1\u9053\u88ab\u521b\u5efa\u3002\n\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e2d\uff0c\u7ecf\u8fc7 ad hoc \u62d3\u6251\u7ed3\u6784\u4f20\u9001\u4fe1\u606f\u4f1a\u8f83\u4e3a\u65b9\u4fbf\uff0c\u800c\u5728\u53e6\u5916\u4e00\u4e9b\u60c5\u51b5\u4e0b\u901a\u8fc7\u4e00\u4e2a\u65b0\u8fde\u63a5 \uff08TCP/IP\uff09\u8fdb\u884c\u76f4\u63a5\u4f20\u9001\u6bd4\u8f83\u65b9\u4fbf\u3002\u8fd9\u79cd\n\u60c5\u51b5\u4e0b\u9700\u8981\u5bf9\u5e95\u5c42\u6280\u672f\u6709\u6df1\u5165\u7684\u4e86\u89e3\uff0cAllJoyn \u6846\u67b6\u5f88\u4e50\u610f\u4e3a\u4f60\u5b8c\u6210\u8fd9\u4e00\u70b9\u3002\u7528\u6237\u6240\u8981\u505a\u7684\u4ec5\u4ec5\u662f\u786e\u4fdd\u6d88\u606f\u901a\u8fc7\u67d0\u79cd\u4f20\u9001\u673a\u5236\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u7684 \u62bd\u8c61\u9700\u6c42\u88ab\u6b63\u786e\u7684\u8f6c\u53d1\u3002\n\n\n\u81ea\u6211\u52a0\u5165\u529f\u80fd\n\n\n\u5728 AllJoyn R14.06 \u7684\u7248\u672c\u4e4b\u524d\uff0c\u5e94\u7528\u7a0b\u5e8f\u65e0\u6cd5\u53c2\u4e0e\u7531\u81ea\u5df1\u4f5c\u4e3b\u673a\u7684\u4f1a\u8bdd\u3002\u6709\u4e9b\u5e94\u7528\u7a0b\u5e8f\u4f1a\u4f7f\u7528\u81ea\u5df1\u63d0\u4f9b\u7684\u670d\u52a1\u6216\u4fe1\u606f\uff0c\u8fd9\u4f1a\u5e26\u6765\u4e00\u4e9b\u4e0d\u5bf9\u79f0\uff1a\u5bf9\u4e8e\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u81ea\u5df1\u4f5c\u4e3a\u4e3b\u673a\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u5bf9\u5176\u4ed6\u8bbe\u5907\u4f5c\u4e3b\u673a\u7684\u60c5\u51b5\u5fc5\u987b\u533a\u522b\u5bf9\u5f85\u3002\u81ea\u6211\u52a0\u5165\u529f\u80fd\u53ef\u4f7f\u5e94\u7528\u7a0b\u5e8f\u52a0\u5165\u5230\u81ea\u5df1\u4f5c\u4e3b\u673a\u7684\u4f1a\u8bdd\u4e2d\uff0c\u4ece\u800c\u6d88\u9664\u4e86\u8fd9\u4e00\u4e0d\u5bf9\u79f0\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u53ef\u4ee5\u7528\u4ee5\u5904\u7406\u8fdc\u7aef\u4e3b\u673a\u4e3b\u7ebf\u5bf9\u8c61\u7684\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\u4ee5\u672c\u5730\u4e3b\u673a\u7684\u4e3b\u7ebf\u5bf9\u8c61\u3002\n\n\n\u51b3\u5b9a peer \u7684\u51fa\u73b0 - pinging \u4ee5\u53ca auto-pinging\n\n\n\u6709\u4e9b\u65f6\u5019\uff0c\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u77e5\u6653\u54ea\u4e9b peer \u6b63\u5728\u4fe1\u9053\uff08\"the wire\"\uff09\u4e0a\u5b58\u5728\u7740\uff0c\u54ea\u4e9b\u6ca1\u6709\u5b58\u5728\u3002\u4e3a\u6b64\uff0c\u572814.06\u7248\u672c\u4e2d\u5f15\u5165\u4e86 PING API. PING API \u53ef\u4ee5\u5224\u65ad peer \u662f\u5426\u5b58\u5728\u3002\u4f46\u662f\u590d\u6d4b\u4f7f\u7528\u6b64 PING API \u7684\u662f\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ed6\u5c06\u4f1a\u9700\u8981\u5468\u671f\u6027\u7684 ping \u5176\u4ed6 peers.\u572814.12\u4ee5\u53ca\u4ee5\u540e\u7684\u7248\u672c\uff0c\u81ea\u52a8 ping \u6216\u8005\u88ab\u79f0\u4e3a Auto-Pinger \u7684\u529f\u80fd\u88ab\u52a0\u5165\u3002Auto-Pinger \u53ef\u4ee5\u5b8c\u6210\u5468\u671f\u6027\u7684 peer \u63a2\u6d4b\uff0c\u4ece\u800c\u89e3\u653e\u4e86\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nBringing it all together\n\n\nAllJoyn \u6846\u67b6\u81f4\u529b\u4e8e\u63d0\u4f9b\u53ef\u4ee5\u7ba1\u7406\u63a8\u5e7f\u548c\u53d1\u73b0\u670d\u52a1\u7684\u5f00\u53d1\u7684\u8f6f\u4ef6\u603b\u7ebf\uff0c\u63d0\u4f9b\u5b89\u5168\u7684\u73af\u5883\uff0c\u5e76\u5b9e\u73b0\u4e86\u4f4d\u7f6e\u900f\u660e\u7684\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u6a21\u5f0f\u3002\u540c\u65f6\u4e5f\u652f\u6301\u4f20\u7edf\u7684 client/service \u5e03\u7f6e\uff0c\u5e76\u901a\u8fc7\u7ed3\u5408 client \u4ee5\u53ca service \u5c42\u9762\u7684\u4fe1\u606f\u5b9e\u73b0\u70b9\u5bf9\u70b9\u901a\u4fe1\u3002\n\n\n\u5728 AllJoyn \u4e2d\u6700\u57fa\u672c\u7684\u62bd\u8c61\u5316\u5c31\u662f\u5c06\u4e00\u5207\u8fde\u63a5\u5728\u4e00\u8d77\u7684\u8f6f\u4ef6\u4e3b\u7ebf\u3002\u865a\u62df\u7684\u5206\u5e03\u5f0f\u4e3b\u7ebf\u7531\u5728\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u540e\u53f0\u8fd0\u884c\u7684 AllJoyn \u8def\u7531\u70b9\u5b9e\u73b0\u3002\u7528\u6237\u4ee5\u53ca\u670d\u52a1\uff08\u4ee5\n\u53ca peers\uff09\u901a\u8fc7\u4e3b\u7ebf\u9644\u4ef6\u8fde\u63a5\u5230\u4e3b\u7ebf\u3002\u4e3b\u7ebf\u9644\u4ef6\u5b58\u5728\u4e8e\u7528\u6237\u7aef\u53ca\u670d\u52a1\u7aef\u7684\u672c\u5730\u8fdb\u7a0b\u4e2d\uff0c\u63d0\u4f9b\u8fdb\u7a0b\u95f4\u901a\u4fe1\u529f\u80fd\uff0c\u4ee5\u4fbf\u5b9e\u73b0\u4e0e\u672c\u5730 AllJoyn \u8def\u7531\u901a\u4fe1\u3002\n\n\n\u5728\u8fde\u63a5\u540e\uff0c\u6bcf\u4e00\u4e2a\u4e3b\u7ebf\u9644\u4ef6\u90fd\u4f1a\u88ab\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u3002\u4e3b\u7ebf\u7b26\u53f7\u53ef\u4ee5\u7533\u8bf7\u4f7f\u7528\u4e00\u4e2a\u552f\u4e00\u7684\u4eba\u7c7b\u53ef\u8bfb\u7684\u4e3b\u7ebf\u540d\uff0c\u4ee5\u4fbf\u5bf9 AllJoyn \u4e16\u754c\u4e2d\u7684\u5176\u4ed6\u8bbe\u5907\u63a8\u9001\u81ea\u5df1\u7684\u670d\u52a1\u3002\u6b64 well-known \u4e3b\u7ebf\u540d\u5b58\u5728\u4e8e\u4e00\u4e2a\u770b\u8d77\u6765\u5f88\u50cf\u5012\u7f6e\u7684\u57df\u540d\uff0c\u5e76\u63d0\u5021 self-management \u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u3002\u6709\u7ed9\u5b9a\u6807\u8bc6\u7684\u4e3b\u7ebf\n\u9644\u4ef6\u6697\u793a\u7740\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5b9e\u73b0\u4e86\u81f3\u5c11\u4e00\u4e2a\u7ed9\u5b9a\u6807\u8bc6\u7684\u63a5\u53e3\u7684\u4e3b\u7ebf\u5bf9\u8c61\u3002\u63a5\u53e3\u540d\u79f0\u4e5f\u7531\u7c7b\u4f3c\u4e3b\u7ebf\u540d\u7684\u547d\u540d\u7a7a\u95f4\u5206\u914d\u51fa\uff0c\u4f46\u6709\u7740\u4e0d\u540c\u7684\u610f\u4e49\u3002\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u751f\u5b58\u5728\u4ee5\u4e3b\u7ebf\u9644\u4ef6\u4e3a\u6839\u8282\u70b9\u7684\u6811\u7ed3\u6784\u4e2d\uff0c\u5e76\u7531\u7c7b\u4f3c Unix \u6587\u4ef6\u8def\u5f84\u7684\u5bf9\u8c61\u8def\u5f84\u63cf\u8ff0\u3002\n\n\n\u4e0b\u56fe\u662f\u4e00\u4e2a\u5c55\u793a\u7247\u6bb5\u76f8\u5173\u6027\u7684\u5047\u60f3\u6392\u5217\uff1a\n\n\nThe following figure shows a hypothetical arrangement of how\nall of these pieces are related.\n\n\n\n\nFigure:\n \u5047\u8bbe\u7684 AllJoyn \u4e3b\u7ebf\u5b9e\u4f8b\u6982\u89c8\u3002\n\n\n\u5728\u4e2d\u5fc3\u7684\u6df1\u8272\u7ebf\u4ee3\u8868 AllJoyn \u4e3b\u7ebf\u3002\u4e3b\u7ebf\u7684\u201c\u51fa\u53e3\u201d\u662f\u7531 BusAttachment \u5206\u914d\u7684\u552f\u4e00\u6807\u8bc6\n:1.1\n \u548c \n:1.4\n. \u5982\u56fe\u6240\u793a\uff0c\u5728\u4ee5\n:1.1\n \u4e3a\u552f\u4e00\u6807\u8bc6\u7b26\u7684\u5df2\u8bf7\u6c42\n\u81ea\u5df1\u7684\u5730\u5740\u662f \norg.alljoyn.samples.chat.a\n\uff0c\u5e76\u5df2\u88ab\u5206\u914d\u5230\u5bf9\u5e94\u7684 well-known \u4e3b\u7ebf\u540d\u79f0\uff1a\norg.alljoyn.samples.chat.a\n\uff0c\u88ab\u52a0\u5728\u540e\u9762\u7684 \"a\" \u662f\u4e3a\u4e86\u786e\n\u4fdd\u4e3b\u7ebf\u540d\u7684\u552f\u4e00\u6027\u3002\n\n\n\u7531\u4e3b\u7ebf\u540d\u5b9a\u4e49\u6240\u6697\u793a\u7684\u4e1c\u897f\u8fd8\u6709\u5f88\u591a\u3002\u9996\u5148\uff0c\u5728\u4e0d\u7528\u7684\u8def\u5f84\u4e0a\u90fd\u6709\u4e3b\u7ebf\u5bf9\u8c61\u7684\u6811\u7ed3\u6784\u3002\u5728\u8fd9\u4e2a\u5047\u8bbe\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e00\u5171\u6709\u4e24\u4e2a\u4e3b\u7ebf\u5bf9\u8c61\u3002\u7b2c\u4e00\u4e2a\u5728 \n/org/alljoyn/samples/chat/chat\n \u8def\u5f84\u4e0a\uff0c\u63a8\u6d4b\u4e0a\u662f\u7528\u6765\u5b9e\u73b0\u804a\u5929\u529f\u80fd\u7684\u3002\u53e6\u4e00\u4e2a\u5728 \n/org/alljoyn/samples/chat/contacts\n \u8def\u5f84\u4e0a\uff0c\u5e76\u5b9e\u73b0\u4e86\u4ee5 \norg.alljoyn.samples.chat.contacts\n \u547d\u540d\u7684\u63a5\u53e3\u3002\u7531\u4e8e\u7ed9\u5b9a\u7684\u4e3b\u7ebf\u5bf9\u8c61\u5b9e\u73b0\u4e86\u63a5\u53e3\uff0c\u4ed6\u5fc5\u987b\u540c\u65f6\u63d0\u4f9b\u76f8\u5e94\u7684\u4e3b\u7ebf\u65b9\u6cd5\uff0c\u4e3b\u7ebf\u4fe1\u53f7\u4ee5\u53ca\u4e3b\u7ebf\u5c5e\u6027\u7684\u5b9e\u73b0\u3002\n\n\n42\u4ee3\u8868\u7740\u7528\u6237\u7aef\u7528\u6765\u521d\u59cb\u5316\u901a\u4fe1\u4f1a\u8bdd\u7684\u901a\u4fe1\u4f1a\u8bdd\u7aef\u53e3\u3002\u4f1a\u8bdd\u7aef\u53e3\u4ec5\u4ec5\u5728\u7279\u5b9a\u7684\u4e3b\u7ebf\u9644\u4ef6\u73af\u5883\u4e2d\u624d\u4fdd\u6709\u552f\u4e00\u6027\uff0c\u8fd9\u610f\u5473\u7740\u5728\u5176\u4ed6\u7684\u4e3b\u7ebf\u9644\u4ef6\u4e2d\u4e5f\u53ef\u4ee5\u752842\u4f5c\u4e3a\u4f1a\u8bdd\u7aef\u53e3\u3002\n\n\n\u5728\u7533\u8bf7\u5e76\u83b7\u6279 well-known \u4e3b\u7ebf\u540d\u4e4b\u540e\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u670d\u52a1\u4f1a\u5c06\u8fd9\u4e2a\u540d\u5b57\u63a8\u5e7f\uff0c\u4ee5\u4fbf\u5176\u4ed6\u7528\u6237\u53d1\u73b0\u8be5\u670d\u52a1\u3002\u4e0b\u56fe\u5c55\u793a\u4e86\u670d\u52a1\u5411\u672c\u5730\u8def\u7531\u53d1\u51fa\u63a8\u5e7f\u7533\u8bf7\u7684\u6d41\u7a0b\u3002\u57fa\u4e8e\u670d\u52a1\u8f93\u5165\u7684\u8def\u7531\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e00\u4e2a network medium-specific mechanism \u6765\u63a8\u5e7f\u670d\u52a1\u5e76\u5f00\u59cb\u3002\n\n\n\n\nFigure:\n \u670d\u52a1\u6b63\u5728\u8fdb\u884c\u63a8\u5e7f\n\n\n\u5f53\u672a\u6765\u7528\u6237\u60f3\u8981\u5b9a\u4f4d\u4e00\u4e2a\u670d\u52a1\u65f6\uff0c\u4ed6\u4f1a\u53d1\u51fa\u4e00\u4e2a\u5bfb\u627e\u540d\u5b57\u7684\u8bf7\u6c42\u3002\u57fa\u4e8e\u7528\u6237\u7aef\u8f93\u5165\u7684\u672c\u5730\u8def\u7531\u8bbe\u5907\u51b3\u5b9a\u4f7f\u7528\u54ea\u79cd\u5e7f\u544a\u4ee5\u53ca\u5e7f\u544a\u63a2\u5934\u3002\n\n\n\n\nFigure:\n \u7528\u6237\u5411 Find Name \u53d1\u9001\u8bf7\u6c42\u3002\n\n\n\u4e00\u65e6\u8bbe\u5907\u8fdb\u5165\u5230\u4e34\u8fd1\u57df\uff0c\u4ed6\u4eec\u5c31\u5f00\u59cb\u76d1\u542c\u5176\u4ed6\u8bbe\u5907\u53d1\u51fa\u7684\u63a8\u5e7f\uff0c\u5e76\u901a\u8fc7\u4efb\u610f\u53ef\u7528\u7684\u5a92\u4f53\u6765\u53d1\u73b0\u8bf7\u6c42\u3002\u4e0b\u56fe\u5c55\u793a\u4e86\u670d\u52a1\u7aef\u4e3b\u673a\u8def\u7531\u76d1\u542c\u53d1\u73b0\u8bf7\u6c42\u5e76\u7ed9\u4e88\u56de\u5e94\u7684\u8fc7\u7a0b\u3002\n\n\n\n\nFigure:\n \u8def\u7531\u62a5\u544a Found Name\n\n\n\u6700\u540e\uff0c\u4e0b\u56fe\u5c55\u793a\u4e86\u7528\u6237\u7aef\u63a5\u6536\u5230\u6307\u793a\u7740\u5728\u6b64\u5730\u533a\u5185\u6709\u4e00\u4e2a\u65b0\u7684\u8def\u7531\u5668\u6b63\u5728\u63d0\u4f9b\u6240\u60f3\u8981\u7684\u670d\u52a1\u7684\u6d88\u606f\u3002\n\n\n\n\nFigure:\n \u7528\u6237\u53d1\u73b0\u670d\u52a1\n\n\n\u7528\u6237\u548c\u670d\u52a1\u4e24\u7aef\u7684\u5f00\u53d1\u573a\u666f\u90fd\u7528\u5230\u5404\u81ea\u4e3b\u7ebf\u9644\u4ef6\u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\u548c\u56de\u53eb\u4fe1\u53f7\uff0c\u4ee5\u4fbf\u53d1\u51fa\u5bf9\u5e7f\u64ad\u53ca\u53d1\u73b0\u8fdb\u7a0b\u8fdb\u884c\u96c6\u7fa4\u7ba1\u7406\u7684\u8bf7\u6c42\u3002\u670d\u52a1\u7aef\u5b9e\u73b0\u4e3b\u7ebf\u5bf9\u8c61\u4ee5\u63d0\u4f9b\u4ed6\u7684\u670d\u52a1\uff0c\u7528\u6237\u7aef\u5219\u671f\u5f85\u7740\u4f7f\u7528\u4ee3\u7406\u5bf9\u8c61\u4ee5\u63d0\u4f9b\u80fd\u548c\u670d\u52a1\u7aef\u901a\u4fe1\u7684\u7b80\u6d01\u6613\u7528\u7684\u63a5\u53e3\u3002\u6b64\u4ee3\u7406\u5bf9\u8c61\u5c06\u4f7f\u7528 AllJoyn ProxyBusObject \u6765\u96c6\u7fa4\u7ba1\u7406\u4e0e\u670d\u52a1\u7aef\u7684\u901a\u4fe1\uff0c\u5e76\n\u63d0\u4f9b\u5bf9\u65b9\u6cd5\u53c2\u6570\u5e8f\u5217\u5316\uff0c\u53cd\u5e8f\u5217\u5316\uff0c\u4ee5\u53ca\u8fd4\u56de\u503c\u7684\u529f\u80fd\u3002\n\n\n\u5728\u8fdc\u7a0b\u65b9\u6cd5\u53ef\u88ab\u8c03\u7528\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u5efa\u7acb\u4e00\u4e2a\u901a\u4fe1\u4f1a\u8bdd\uff0c\u7528\u6765\u5c06\u5206\u79bb\u7684\u4e3b\u7ebf\u7247\u6bb5\u6c47\u96c6\u8d77\u6765\u3002\u5e7f\u64ad\u548c\u53d1\u73b0\u4e0e\u5efa\u7acb\u4f1a\u8bdd\u662f\u4e0d\u540c\u7684\u3002\u4e00\u65b9\u53ef\u4ee5\u5bf9\u6536\u5230\u7684\u5e7f\u64ad\u4e0d\u505a\u51fa\u56de\u5e94\u3002\u4ec5\u5f53\u7528\u6237\u6536\u5230\u5e7f\u64ad\uff0c\u5e76\u51b3\u5b9a\u52a0\u5165\u4f1a\u8bdd\u7684\u65f6\u5019\uff0c\u4e24\u6761\u4e3b\u7ebf\u624d\u4f1a\u88ab\u903b\u8f91\u5730\u6c47\u96c6\u5230\u4e00\u8d77\u3002\u4e3a\u4e86\u8fd9\u4e2a\u76ee\u6807\uff0c\u670d\u52a1\u7aef\u5fc5\u987b\u521b\u5efa\u901a\u4fe1\u4f1a\u8bdd\u7ec8\u70b9\u5e76\u5e7f\u64ad\u5b83\u7684\u5b58\u5728\uff1b\u5ba2\u6237\u7aef\u5fc5\u987b\u63a5\u6536\u5230\u6b64\u5e7f\u64ad\uff0c\u5e76\u8bf7\u6c42\u52a0\u5165\u8be5\u4f1a\u8bdd\u3002\u670d\u52a1\u7aef\u5728\u53d1\u51fa\u5e7f\u64ad\u4e4b\u524d\u5fc5\u987b\u5b9a\u4e49\u4e00\u4e2a half-association . \u62bd\u8c61\u5730\u8bf4\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\n\n\n{reliable IP messages, org.alljoyn.samples.chat.a, 42}\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u4e0e\u7528\u6237\u7aef\u7684\u5bf9\u8bdd\u662f\u7528\u8fc7\u4e00\u4e2a\u53ef\u9760\u7684\u57fa\u4e8e\u6d88\u606f\u7684\u4f20\u8f93\u7cfb\u7edf\u5b8c\u6210\u7684\uff0c\u5e76\u5df2\u8868\u660e well-known \u4e3b\u7ebf\u540d\uff0c\u5e76\u671f\u671b\u572842\u53f7\u4f1a\u8bdd\u7aef\u53e3\u88ab\u8054\u7edc\u3002\u8fd9\u5c31\u662f\u5728  bus instance figure \u4e2d\u6240\u89c1\u7684\u573a\u666f\u3002\n\n\n\u5047\u8bbe\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u4e3a \n:2.1\n \u7684\u4e3b\u7ebf\u9644\u4ef6\u8bd5\u56fe\u4ece\u7269\u7406\u8fdc\u7aef\u7684\u8def\u7531\u70b9\u8fde\u63a5\u3002\u4ed6\u5c06\u4f1a\u5bf9\u7cfb\u7edf\u63d0\u4f9b half association, \u4e00\u4e2a\u65b0\u7684\u4f1a\u8bdd ID \u4f1a\u88ab\u5206\u914d\u5e76\u4f20\u8f93\u5230\u4e24\u65b9\uff1a\n\n\n{reliable IP messages, org.alljoyn.samples.chat.a, :2.1, 1025}\n\n\n\n\n\u65b0\u751f\u7684\u901a\u4fe1\u4f1a\u8bdd\u5c06\u5b58\u5728\u4e8e\u540d\u4e3a\norg.alljoyn.samples.chat.a\n \uff08\u670d\u52a1\u7aef\uff09\u7684\u4e3b\u7ebf\u9644\u4ef6\u4ee5\u53ca\u540d\u4e3a2.1 \uff08\u7528\u6237\u7aef\uff09\u7684\u4e3b\u7ebf\u9644\u4ef6\u4e4b\u95f4\uff0c\u4f7f\u7528\u7531 IP \u534f\u8bae\u7ec4\u5b9e\u73b0\u7684\u53ef\n\u9760\u7684\u6d88\u606f\u534f\u8bae\u3002\u7528\u4e8e\u63cf\u8ff0\u4f1a\u8bdd\u7684\u4f1a\u8bdd ID \u7531\u7cfb\u7edf\u5206\u914d\uff0c\u5728\u6b64\u4f8b\u5b50\u4e2d\u4e3a1025.\n\n\n\u5728\u7ec8\u7aef\u5bf9\u7ec8\u7aef\u7684\u901a\u4fe1\u4f1a\u8bdd\u5efa\u7acb\u540e\uff0cAllJoyn \u4f1a\u505a\u51fa\u6240\u6709\u53ef\u884c\u7684\u52a8\u4f5c\u6765\u521b\u5efa\u865a\u62df\u8f6f\u4ef6\u603b\u7ebf\uff0c\u5982 distributed bus \u56fe\u4e2d\u6240\u793a\u3002\u8bf7\u6ce8\u610f\u8fd9\u53ea\u662f\u4e00\u5f20\u865a\u62df\u56fe\uff0c\u8fde\u63a5\u7684\u5efa \u7acb\u65b9\u5f0f\u53ef\u80fd\u662f\u7531 Wi-Fi Direct \u5efa\u7acb\u7684\u70b9\u5bf9\u70b9\u7684 TCP \u8fde\u63a5\uff0c\u6216\u662f\u7531\u65e0\u7ebf\u7f51\u7edc\u63a5\u5165\u70b9\u5efa\u7acb\u7684 UDP \u8fde\u63a5\uff0c \u8fd9\u53d6\u51b3\u4e8e\u4f1a\u8bdd\u6240\u63d0\u4f9b\u7684\u9009\u9879\u3002\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u90fd\u4e0d\u77e5\u6653\n\u8fd9\u5176\u4e2d\u7684\u590d\u6742\u8fc7\u7a0b\u3002\n\n\n\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u5982\u679c\u9700\u8981\u8ba4\u8bc1\u73af\u8282\uff0c\u5219\u53ef\u4ee5\u5c1d\u8bd5\u8ba4\u8bc1\u3002\u4e4b\u540e\u7528\u6237\u7aef\u548c\u670d\u52a1\u7aef\u5c31\u53ef\u4ee5\u7528 RMI \u6a21\u578b\u5f00\u59cb\u901a\u4fe1\u4e86\u3002\nAt this point, authentication can be attempted if desired\nand then the client and service begin communicating using the RMI model.\n\n\n\u8be5\u573a\u666f\u5f53\u7136\u4e0d\u662f\u4ec5\u4ec5\u9650\u4e8e\u4e00\u53f0\u8bbe\u5907\u4e0a\u7684\u4e00\u4e2a\u5ba2\u6237\u7aef\u4ee5\u53ca\u53e6\u4e00\u53f0\u8bbe\u5907\u4e0a\u7684\u4e00\u4e2a\u670d\u52a1\u5668\u7aef\u3002\u800c\u53ef\u4ee5\u662f\u4efb\u610f\u6570\u91cf\u7684\u5ba2\u6237\u7aef\u4ee5\u53ca\u4efb\u610f\u6570\u91cf\u7684\u670d\u52a1\u5668\u7aef\uff08\u9700\u8003\u8651\u8bbe\u5907\u9650\u989d\u53ca\u7f51\u7edc\u5bb9\u91cf\uff09\u7684\u7ed3\u5408\uff0c\u4ee5\u5b8c\u6210\u67d0\u79cd\u5408\u4f5c\u3002\u4e3b\u7ebf\u9644\u4ef6\u53ef\u80fd\u4f1a\u627f\u62c5\u5ba2\u6237\u7aef\u4ee5\u53ca\u670d\u52a1\u5668\u7aef\u53cc\u65b9\u7684\u7279\u8272\uff0c\u4ee5\u4fbf\u5b9e\u73b0\u70b9\u5bf9\u70b9\u670d\u52a1\u3002\n\n\nAllJoyn \u8def\u7531\u5668\u5c06\u5b8c\u5168\u4e0d\u540c\u7684\u7ec4\u4ef6\u548c\u8def\u7531\u6d88\u606f\u6c47\u96c6\u6210\u4e00\u4e2a\u6613\u5904\u7406\u7684\u903b\u8f91\u5355\u5143\u3002\u4e0d\u4ec5\u5982\u6b64\uff0c\u63a5\u53e3\u63cf\u8ff0\u4ee5\u53ca\u8bed\u8a00\u8054\u7f16\u7684\u81ea\u7136\u7279\u6027\u4e3a\u4e0d\u540c\u8bed\u8a00\u7f16\u5199\u7684\u7ec4\u4ef6\u5e26\u6765\u4e86\u4e92\u7528\u6027\u3002\n\n\n\u9ad8\u7ea7\u7cfb\u7edf\u67b6\u6784\n\n\n\u4ece AllJoyn \u7cfb\u7edf\u7528\u6237\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8be5\u4f53\u7cfb\u4e2d\u6700\u9700\u8981\u900f\u5f7b\u7406\u89e3\u7684\u6982\u5ff5\u5c31\u662f\u5ba2\u6237\uff0c\u670d\u52a1\u4ee5\u53ca peer. \u4ece\u7cfb\u7edf\u7684\u89d2\u5ea6\u770b\uff0c\u8fd9\u4e09\u4e2a\u6982\u5ff5\u5374\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff1b\u53ea\u662f\u5bf9\u7cfb\u7edf\u63d0\n\u4f9b\u7684\u529f\u80fd\u6709\u7740\u4e0d\u540c\u7684\u4f7f\u7528\u65b9\u5f0f\u3002\n\n\n\u7528\u6237\uff0c\u670d\u52a1\u4ee5\u53ca peers\n\n\n\u4e0b\u56fe\u4ece\u7528\u6237\uff08\u4e0d\u662f AllJoyn \u8def\u7531\uff09\u7684\u89d2\u5ea6\u63cf\u8ff0\u4e86\u8be5\u6846\u67b6\n\n\n\n\nFigure:\n \u5ba2\u6237\uff0c\u670d\u52a1\u548c peer \u7684\u57fa\u672c\u7ed3\u6784\n\n\n\u6700\u9ad8\u7684\u5c42\u6b21\u5c31\u662f\u8bed\u8a00\u8054\u7f16\u3002AllJoyn \u7cfb\u7edf\u662f\u7531 C++ \u7f16\u5199\u7684\uff0c\u5bf9\u4e8e C++ \u7684\u7528\u6237\u5c31\u4e0d\u9700\u8981\u4efb\u4f55\u8054\u7f16\u3002\u4f46\u5bf9\u4e8e\u7c7b\u4f3c Java \u6216\u8005 JavaScript \u7684\u5176\u4ed6\u8bed\u8a00\u4f7f\u7528\u8005\uff0c \u8fd9\u91cc\u63d0\u4f9b\u4e86\u8f83\u5c0f\u578b\u7684\u8f6c\u6362\u5c42\uff0c\u79f0\u4f5c\u8bed\u8a00\u8054\u7f16\u3002\u5728\u6709\u4e00\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6b64\u7ed1\u5b9a\u4f1a\u88ab\u9002\u5ea6\u5ef6\u4f38\u4ee5\u63d0\u4f9b\u5bf9\u7279\u5b9a\u7cfb\u7edf\u7684\u652f\u6301\u3002\u4f8b\u5982\uff0c\u666e\u901a\u7684 Java \u7ed1\u5b9a\u53ef\u4ee5\u4f7f AllJoyn \u7cfb\u7edf\u8fd0\u884c\u5728\u4e00\u822c\u7c7b\u522b\u7684 Java \u7cfb\u7edf\u4e0a\uff0c\u4f8b\u5982 Windows \u6216 Linux\uff1b\u800c Android \u7cfb\u7edf\u7684\u8054\u7f16\u4e5f\u53ef\u4ee5\u88ab\u63d0\u4f9b\uff0c\u4ed6\u5c06 AllJoyn \u7cfb\u7edf\u96c6\u6210\u5230\u7531 Android \u5b9a\u4e49\u7684\u7ed3\u6784\n\u91cc\uff0c\u4f8b\u5982\u4e00\u4e2a\u5728 Android \u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u91cc\u9762\u7684\u670d\u52a1\u7ec4\u4ef6\u3002\n\n\n\u8be5\u7cfb\u7edf\u4ee5\u53ca\u8bed\u8a00\u8054\u7f16\u88ab\u5efa\u7acb\u5728\u4e00\u4e2a\u5e26\u6709\u5e2e\u624b\u5bf9\u8c61\u7684\u5c42\u4e2d\uff0c\u8fd9\u4f7f\u5f97\u5728 AllJoyn \u7cfb\u7edf\u4e2d\u8fdb\u884c\u5e38\u89c4\u64cd\u4f5c\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\u4e0d\u540c\u8fd9\u4e9b\u5e2e\u52a9\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u5145\u5206\u4f7f\u7528 AllJoyn \u7cfb\u7edf\uff0c\u4f46\u662f\u6211\u4eec\u9f13\u52b1\u5bf9\u5e2e\u624b\u7684\u4f7f\u7528\uff0c\u56e0\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u4e86\u53e6\u4e00\u4e2a\u5c42\u7ea7\u7684\u865a\u62df\u63a5\u53e3\u3002\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u4e3b\u7ebf\u9644\u4ef6\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u5e2e\u624b\uff0c\u6ca1\u6709\u4ed6\u7cfb\u7edf\u5c06\u65e0\u6cd5\u4f7f\u7528\u3002\u9664\u4e86\u51e0\u9879\u5173\u952e\u529f\u80fd\u5916\uff0c\u603b\u7ebf\u9644\u4ef6\u8fd8\u63d0\u4f9b\u4e00\u7cfb\u5217\u7ba1\u7406\u5e95\u5c42\u8f6f\u4ef6\u603b\u7ebf\u5e76\u4e0e\u5176\u4ea4\u4e92\u7684\u4fbf\u6377\u529f\u80fd\u3002\n\n\n\u5728\u5e2e\u624b\u5c42\u4e0b\u9762\u7684\u662f\u4fe1\u606f\u548c\u8def\u7531\u5c42\u3002\u8fd9\u662f\u5e8f\u5217\u5316\uff0c\u89e3\u5e8f\u5217\u5316\uff0c\u4ee5\u53ca\u5411\u4fe1\u606f\u4e2d\u8fd4\u56de\u503c\u8fd9\u4e9b\u529f\u80fd\u7684\u5bb6\u3002\u8def\u7531\u5c42\u5b89\u6392\u5c06\u5165\u5883\u7684\u6d88\u606f\u6295\u9012\u5230\u5236\u5b9a\u7684\u603b\u7ebf\u5bf9\u8c61\u548c\u4ee3\u7406\uff0c\u5c06\u5f85\u53d1\u9001\u5230\u5176\u4ed6\u603b\u7ebf\u7684\u6d88\u606f\u53d1\u9001\u5230 AllJoyn \u8def\u7531\u5668\u4ee5\u5f85\u53d1\u9001\u3002\n\n\n\u4fe1\u606f\u548c\u8def\u7531\u5c42\u4e0e\u4e00\u4e2a\u7ec8\u70b9\u5c42\u901a\u8bdd\u3002\u5728 AllJoyn \u7cfb\u7edf\u8f83\u4f4e\u7684\u5c42\u7ea7\u4e2d\uff0c\u6570\u636e\u4ece\u4e00\u4e2a\u7ec8\u70b9\u6d41\u5411\u53e6\u4e00\u4e2a\u7ec8\u70b9\u3002\u4ece\u7f51\u7edc\u4ee3\u7801\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u865a\u62df\u7684\u901a\u4fe1\u7ec8\u70b9\u3002\u7f51\n\u7edc\u62bd\u8c61\u5316\u5728\u7ec8\u70b9\u5c42\u7684\u9876\u7aef\u5c31\u88ab\u5b8c\u6210\uff0c\u5728\u8fd9\u91cc\u901a\u8fc7\u975e Wi-Fi \u65e0\u7ebf\u8fde\u63a5\uff08\u84dd\u7259\uff09\u6216\u8005\u901a\u8fc7\u6709\u7ebf\u7684\u4ee5\u592a\u7f51\u8fde\u63a5\u6ca1\u6709\u672c\u8d28\u4e0a\u7684\u533a\u522b\u3002\n\n\n\u7ec8\u70b9\u662f\u5bf9\u4f20\u9001\u7279\u5b9a\u673a\u5236\u7684\u5b9e\u4f53\u5bf9\u8c61\u7684\u4e13\u95e8\u5316\uff0c\u4ed6\u63d0\u4f9b\u7740\u57fa\u672c\u7f51\u7edc\u529f\u80fd\u3002\u5728\u7528\u6237\uff0c\u670d\u52a1\u6216 peer \u7684\u5b9e\u4f8b\u4e2d\uff0c\u7f51\u7edc\u4f20\u8f93\u4ec5\u4ec5\u4f7f\u7528\u672c\u5730\u4f20\u8f93\u3002\u7ec8\u70b9\u662f\u672c\u5730\u8fdb\u7a0b\u95f4\u901a\u4fe1\n\u94fe\u8def\u63a5\u5165\u5230\u672c\u5730 AllJoyn \u603b\u7ebf\u8def\u7531\u3002\u5728\u57fa\u4e8e Linux \u7684\u7cfb\u7edf\u4e2d\uff0c\u7ec8\u70b9\u662f\u4e00\u4e2a Unix \u57df\u7684\u5957\u63a5\u5b57\u8fde\u63a5\u3002\u5728\u57fa\u4e8e Windows \u7684\u7cfb\u7edf\u4e2d\u7ec8\u70b9\u662f\u4e00\u4e2a\u5230\u672c\u5730\u8def\u7531\u7684 TCP \u8fde\u63a5\u3002\n\n\nAllJoyn \u6846\u67b6\u8fd8\u63d0\u4f9b OS \u62bd\u8c61\u5316\u5c42\u3002\u5728\u8fd9\u91cc\uff0c\u672c\u5730\u7cfb\u7edf\u88ab\u81f3\u4e8e\u6700\u5e95\u5c42\uff0c\u4f59\u4e0b\u7684\u7cfb\u7edf\u53ef\u4ee5\u5728\u8be5\u5c42\u7684\u5e73\u53f0\u4e0a\u5efa\u7acb\u3002\n\n\n\u8def\u7531\n\n\nAllJoyn \u7684\u8def\u7531\u662f\u5c06 AllJoyn \u7cfb\u7edf\u9ecf\u5408\u5728\u4e00\u8d77\u7684\u80f6\u6c34\u3002\u4e4b\u524d\u63d0\u53ca\u8fc7\uff0c\u8def\u7531\u5668\u662f\u8fd0\u884c\u5728\u540e\u53f0\u7684\u7a0b\u5e8f\uff0c\u5728\u4ed6\u4eec\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u53d1\u751f\u65f6\u4f5c\u51fa\u56de\u5e94\u3002\u7531\u4e8e\u8fd9\u4e9b\u4e8b\u4ef6\u901a\u5e38\u90fd\u662f\u5916\u90e8\u7684\uff0c\u901a\u8fc7\u81ea\u4e0b\u800c\u4e0a\u7684\u89c6\u89d2\u6765\u89c2\u5bdf\u8def\u7531\u7ed3\u6784\u4f1a\u6bd4\u8f83\u597d\u3002\n\n\n\u4e0b\u56fe\u6240\u793a\u5373\u4e3a\u8def\u7531\u7684\u6700\u5e95\u5c42\uff0c\u539f\u751f\u7cfb\u7edf\u751f\u957f\u5728\u6b64\u5904\u3002\u548c\u5728\u5ba2\u6237\u7ed3\u6784\u4e2d\u4f7f\u7528\u7684 OS \u865a\u62df\u5c42\u76f8\u540c\uff0c\u6211\u4eec\u7528\u8fd9\u4e2a\u865a\u62df\u5c42\u4e3a\u5728 Linux\uff0cWindows \u4ee5\u53ca Android \u4e0a\u8fd0\u884c \u7684\u8def\u7531\u63d0\u4f9b\u5e38\u89c4\u62bd\u8c61\u5316\u3002\u5728 OS \u62bd\u8c61\u5c42\u4e2d\uff0c\u6211\u4eec\u6709\u5404\u79cd\u5404\u6837\u7684\u5e95\u5c42\u8def\u7531\u7f51\u7edc\u7ec4\u4ef6\u3002\u800c\u5ba2\u6237\u7aef\uff0c\u670d\u52a1\u7aef\u4ee5\u53ca peers \u53ea\u7528\u672c\u5730\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u673a\u5236\u4e0e\u8def\u7531\u5668\u4ea4\u6d41\uff0c\n\u6240\u4ee5\u5728\u7ed9\u5b9a\u5e73\u53f0\u4e0a\uff0c\u548c\u4f17\u591a\u53ef\u7528\u7684\u4f20\u9001\u673a\u5236\u6253\u4ea4\u9053\u7684\u5fc5\u987b\u662f\u8def\u7531\u5668\u3002\u8bf7\u6ce8\u610f\uff0c\"Local\" \u8f6c\u9001\u5728\u8def\u7531\u67b6\u6784\u56fe\u4e2d\u5c31\u662f\u552f\u4e00\u4e00\u4e2a\u4e0e\u8fd0\u884c\u5728\u7279\u5b9a\u4e3b\u673a\u4e0a\u7684 AllJoyn\u7684\u7528 \u6237\uff0c\u670d\u52a1\u4ee5\u53ca peers \u76f8\u8fde\u7684. \n\n\n\n\nFigure:\n \u57fa\u7840\u8def\u7531\u67b6\u6784\u56fe\n\n\n\u4f8b\u5982\uff0c\u84dd\u7259\u4f20\u8f93\u7cfb\u7edf\u4f1a\u5904\u7406\u5728\u84dd\u7259\u7cfb\u7edf\u4e2d\u521b\u5efa\u5e76\u7ba1\u7406 piconets \u7684\u590d\u6742\u5de5\u4f5c\u3002\u5e76\u4e14\uff0c\u84dd\u7259\u4f20\u8f93\u8fd8\u63d0\u4f9b\u9002\u5f53\u7684\u670d\u52a1\u5e7f\u64ad\u53ca\u53d1\u73b0\u529f\u80fd\uff0c\u4ee5\u53ca\u53ef\u9760\u7684\u901a\u4fe1\u529f\u80fd\u3002\u84dd\u7259\n\u4ee5\u53ca\u5176\u4ed6\u4f20\u8f93\u7cfb\u7edf\u5c06\u4f1a\u6cbf\u7740 IP \u4f20\u8f93\u88ab\u6dfb\u52a0\u5728\u8be5\u4f20\u8f93\u5c42\u4e2d\u3002\n\n\n\u6709\u7ebf\u7684\uff0cWi-Fi \u4ee5\u53ca Wi-Fi Direct \u4f20\u8f93\u4f1a\u5728 IP \u4f1e\u4e0b\u96c6\u5408\uff0c\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u8fd9\u4e9b\u4f20\u8f93\u673a\u5236\u90fd\u5e94\u7528\u4e86\u5e95\u5c42\u7684 TCP-IP \u7f51\u7edc\u5806\u6808\u3002\u6709\u65f6\uff0c\u5b8c\u6210\u670d\u52a1\u5e7f\u64ad\u53ca\u53d1\u73b0\u7684\u65b9\n\u5f0f\u4f1a\u6709\u975e\u5e38\u660e\u663e\u7684\u4e0d\u540c\uff0c\u8fd9\u662f\u56e0\u4e3a\u8be5\u529f\u80fd\u4e0d\u5728 TCP-IP \u6807\u51c6\u7684\u8303\u7574\u4e4b\u5185\uff1b\u4f1a\u6709\u4e13\u95e8\u5904\u7406\u8fd9\u4e9b\u529f\u80fd\u7684\u6a21\u5757\u5b58\u5728\u3002\n\n\n\u8fd9\u4e00\u4f17\u7279\u5b9a\u6280\u672f\u7684\u4f20\u8f93\u5b9e\u73b0\u65b9\u5f0f\u4f1a\u88ab\u96c6\u5408\u5728\u4e00\u4e2a Network Transports \u7684\u62bd\u8c61\u5316\u4e2d\u3002Sessions \u6a21\u5757\u8d1f\u8d23\u901a\u4fe1\u8fde\u63a5\u7684\u7b80\u5386\u4ee5\u53ca\u7ef4\u62a4\uff0c\u4f7f\u4e00\u4f17\u8def\u7531\u5668\u548c AllJoyn \u5e94\u7528\u7a0b\u5e8f\u5448\u73b0\u4e3a\u4e00\u4e2a\u6574\u5408\u5728\u4e00\u8d77\u7684\u8f6f\u4ef6\u603b\u7ebf\u3002\n\n\nAllJoyn \u8def\u7531\u4f7f\u7528\u7ec8\u70b9\u6982\u5ff5\u63d0\u4f9b\u5230\u672c\u5730\u5ba2\u6237\u7aef\uff0c\u670d\u52a1\u7aef\uff0c\u4ee5\u53ca peers \u7684\u8fde\u63a5\uff0c\u8fd8\u5c06\u5bf9\u8fd9\u4e9b\u5bf9\u8c61\u7684\u5e94\u7528\u5ef6\u4f38\u5230\u88ab\u8def\u7531\u7528\u4e8e\u4f20\u9001\u4e3b\u673a\u5230\u4e3b\u673a\u6d88\u606f\u7684\u603b\u7ebf\u5bf9\u603b\u7ebf\u7684\u8fde\n\u63a5\u3002\n\n\n\u9664\u4e86\u8fd9\u4e9b\u8fde\u63a5\u6240\u793a\u7684\u8def\u7531\u529f\u80fd\u5916\uff0c\u4e00\u4e2a AllJoyn \u8def\u7531\u540c\u65f6\u8fd8\u63d0\u4f9b\u4ed6\u81ea\u5df1\u5bf9\u5e94\u603b\u7ebf\u5bf9\u8c61\u7684\u7ec8\u70b9\uff0c\u7528\u6765\u7ba1\u7406\u6216\u63a7\u5236\u5176\u4ed6\u8def\u7531\u5b9e\u73b0\u7684\u8f6f\u4ef6\u603b\u7ebf\u7247\u6bb5\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5f53\u4e00\n\u670d\u52a1\u8bf7\u6c42\u5e7f\u64ad well-known \u603b\u7ebf\u540d\u65f6\uff0c\u662f\u5728\u670d\u52a1\u7aef\u7684\u5e2e\u624b\u5c06\u6b64\u8bf7\u6c42\u89e3\u91ca\u6210\u4e00\u4e2a\u6307\u5411\u4e3b\u7ebf\u88ab\u8def\u7531\u5b9e\u73b0\u7684\u5bf9\u8c61\u7684\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u3002\u5c31\u50cf\u5bf9\u4e8e\u670d\u52a1\u7aef\u4e00\u6837\uff0c\u8def\u7531\u5668\u6709\u8bb8\u591a\u5b58\u5728\u4e8e\u76f8\u5173\u5bf9\u8c61\u8def\u5f84\uff0c\u5b9e\u73b0\u7279\u5b9a\u547d\u540d\u7684\u63a5\u53e3\u7684\u603b\u7ebf\u5bf9\u8c61\u3002\u7528\u4e8e\u63a7\u5236 AllJoyn \u603b\u7ebf\u7684\u5e95\u5c42\u673a\u5236\u6b63\u5728\u5411\u8fd9\u4e9b\u8def\u7531\u603b\u7ebf\u5bf9\u8c61\u53d1\u9001\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u3002\n\n\n\u5bf9\u8def\u7531\u56fa\u5b9a\u5c42\u9762\u7684\u603b\u64cd\u4f5c\u7531\u4e00\u4e2a\u914d\u7f6e\u5b50\u7cfb\u7edf\u63a7\u5236\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u7cfb\u7edf\u7ba1\u7406\u5458\u53ef\u4ee5\u6307\u5b9a\u5bf9\u7cfb\u7edf\u7684\u7279\u5b9a\u8bb8\u53ef\uff0c\u8fd8\u53ef\u4ee5\u5b89\u6392\u6309\u9700\u521b\u5efa\u670d\u52a1\u3002\u6b64\u5916\uff0c\u8def\u7531\u53ef\u4ee5\u6dfb\u52a0\u9650\u5236\u8d44\u6e90\u6d88\u8017\u7684\u914d\u7f6e\uff0c\u7cfb\u7edf\u7ba1\u7406\u5458\u56e0\u6b64\u53ef\u4ee5\u5bf9\u7cfb\u7edf\u6709\u6240\u638c\u63a7\uff0c\u4f8b\u5982\uff0c\u968f\u65f6\u9650\u5236 TCP \u6d3b\u8dc3\u8fde\u63a5\u7684\u6570\u91cf\u3002\u8fd8\u5b58\u5728\u53ef\u4ee5\u4f7f\u7ba1\u7406\u5458\u51cf\u7f13\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u6240\u5e26\u6765\u7684\u5f71\u54cd\uff0c\u4f8b\u5982\u9650\u5236\n\u6b63\u5728\u8fdb\u884c\u8ba4\u8bc1\u7684\u8fde\u63a5\u7684\u6570\u91cf\u3002\n\n\n\u603b\u7ed3\n\n\nAllJoyn \u6846\u67b6\u662f\u4e00\u4e2a\u81f4\u529b\u4e8e\u4e3a\u5728\u5e26\u6709\u79fb\u52a8\u5143\u7d20\u7684\u5f02\u6784\u7cfb\u7edf\u4e0a\u5f00\u53d1\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u67b6\u6784\u7684\u7efc\u5408\u7cfb\u7edf\u3002\n\n\nAllJoyn \u6846\u67b6\u63d0\u4f9b\u4e86\u5f3a\u8c03\u80fd\u4e0e\u591a\u79cd\u7f51\u7edc\u7ed3\u6784\u8fdb\u884c\u6709\u7cfb\u7edf\u7684\u4ea4\u6d41\u7684\uff0c\u5efa\u7acb\u4e8e\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u6280\u672f\u53ca\u5b89\u5168\u6807\u51c6\u4e0a\u7684\u89e3\u51b3\u65b9\u6848\u3002\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u53ef\u4e13\u6ce8\u4e8e\u5185\u5bb9\u5f00\u53d1\uff0c\u800c\u4e0d\u9700\u8981\u6709\u5927\u89c4\u6a21\u7684\u5e95\u5c42\u7f51\u7edc\u7ecf\u9a8c\u3002\n\n\nAllJoyn \u7cfb\u7edf\u662f\u4e00\u4e2a\u534f\u540c\u7684\u6574\u4f53\uff0c\u4e0d\u4f1a\u50cf\u7531\u591a\u4e2a\u90e8\u5206\u5efa\u7acb\u7684 ad-hoc \u7cfb\u7edf\u90a3\u6837\u5fcd\u53d7\u56fa\u6709\u7684\u963b\u6297\u9519\u914d\u7684\u56f0\u6270\u3002\u6211\u4eec\u76f8\u4fe1\uff0c\u76f8\u6bd4\u4e8e\u5728\u5176\u4ed6\u5e73\u53f0\u4e0a\u5f00\u53d1\uff0c\u4f7f\u7528 AllJoyn \u7cfb\u7edf\u53ef\u4ee5\u4f7f\u5bf9\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u548c\u90e8\u7f72\u53d8\u5f97\u66f4\u52a0\u7b80\u5355\u3002",
            "title": "Standard core"
        },
        {
            "location": "/learn/core/standard-core/#alljoyn-standard-core",
            "text": "",
            "title": "AllJoyn&trade; Standard Core"
        },
        {
            "location": "/learn/core/standard-core/#_1",
            "text": "AllJoyn \u6846\u67b6\u662f\u4e00\u4e2a\u5f00\u6e90\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e3a\u5f3a\u8c03\u79fb\u52a8\u6027\uff0c\u5b89\u5168\u6027\u4ee5\u53ca\u52a8\u6001\u914d\u7f6e\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u8fd0\u884c\u73af\u5883\u3002AllJoyn \u7cfb\u7edf\u53ef\u5904\u7406\u5f02\u6784\u5206\u5e03\u5f0f\u7cfb\u7edf\u6240\u56fa\u6709\u7684\u590d\u6742 \u95ee\u9898\uff0c\u5305\u62ec\u53ef\u79fb\u52a8\u6027\u4ecb\u5165\u540e\u6240\u5e26\u6765\u7684\u7279\u6b8a\u95ee\u9898\u3002\u501f\u6b64\u5e2e\u52a9\uff0c\u7a0b\u5e8f\u5f00\u53d1\u8005\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u89e3\u51b3\u6838\u5fc3\u95ee\u9898\u3002  AllJoyn \u6846\u67b6\u662f\u201c\u5e73\u53f0\u65e0\u5173\u201d\u7684\uff0c\u5176\u8bbe\u8ba1\u521d\u8877\u4e3a\u5c3d\u6700\u5927\u53ef\u80fd\u72ec\u7acb\u4e8e\u8fd0\u884c\u8bbe\u5907\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u786c\u4ef6\u53ca\u8f6f\u4ef6\u7279\u6027\u3002AllJoyn \u6846\u67b6\u88ab\u8bbe\u8ba1\u5e94\u7528\u4e8e Microsoft Windows, Li- nux, Android, iOS, OS X, \u4ee5\u53ca OpenWRT \u5e73\u53f0\u3002  \u4eb2\u8fd1\u6027\u4e0e\u79fb\u52a8\u6027\u4e00\u503c\u4fdd\u7559\u5728 AllJoyn \u6846\u67b6\u7684\u8bbe\u8ba1\u7406\u5ff5\u5f53\u4e2d\u3002\u5728\u79fb\u52a8\u73af\u5883\u4e2d\uff0c\u8bbe\u5907\u4f1a\u4e0d\u505c\u5730\u8fdb\u5165\uff0c\u79bb\u5f00\u5176\u4ed6\u8bbe\u5907\u7684\u90bb\u57df\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u57fa\u7840\u7f51\u7edc\u5bb9\u91cf\u4e5f\u4f1a\u53d1\u751f\u53d8\u5316\u3002  AllJoyn SDKs \u53ef\u5728\u4ee5\u4e0b\u7f51\u5740\u83b7\u5f97 (http://www.allseenalliance.org).  \u53ef\u7528 AllJoyn \u6846\u67b6\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\u7c7b\u522b\u4ec5\u4ec5\u53d7\u9650\u4e8e\u5f00\u53d1\u8005\u7684\u60f3\u50cf\u529b\u3002\u4f8b\u5982\u793e\u4ea4\u7f51\u7edc\u7684\u62d3\u5c55\u3002\u7528\u6237\u53ef\u4ee5\u5efa\u7acb\u4e2a\u4eba\u7b80\u4ecb\u5e76\u5b9a\u4e49\u559c\u597d\u548c\u5174\u8da3\u3002\u5728\u8fdb\u5165\u4e00\u4e2a\u4f4d\u7f6e\u65f6\uff0c\u652f\u6301 AllJoyn \u7684\u8bbe\u5907\u5c06\u4f1a\u7acb\u5373\u53d1\u73b0\u5468\u8fb9\u6709\u7740\u5171\u540c\u5174\u8da3\u7684\u540c\u597d\uff0c\u5e76\u4e0e\u5176\u5efa\u7acb\u901a\u4fe1\u7f51\u7edc\u4ee5\u5b9e\u73b0\u901a\u4fe1\u53ca\u4fe1\u606f\u4ea4\u6362\u3002  \u73b0\u5982\u4eca\u5927\u591a\u6570\u8bbe\u5907\u90fd\u5df2\u96c6\u6210 Wi-Fi\uff0c\u5982\u6b64\uff0c\u5f53\u4e24\u540d\u7528\u6237\u6b65\u5165\u5e26\u6709 Wi-Fi \u70ed\u70b9\u7684\u4f4f\u5b85\u6216\u529e\u516c\u5ba4\u65f6\uff0c\u4ed6\u4eec\u7684\u8bbe\u5907\u53ef\u8fde\u63a5\u5230\u63a5\u89e6\u7f51\u7edc\u63a5\u5165\u70b9\uff0c\u5e76\u516c \u5f00\u5229\u7528\u9644\u52a0\u7684\u7f51\u7edc\u5bb9\u91cf\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u8bbe\u5907\u8fd8\u53ef\u4ee5\u5728\u5176\u53ef\u89c1\u57df\u5185\uff08\u53d6\u51b3\u4e8eWi-Fi\u7684\u8986\u76d6\u9762\u79ef\uff09\u5bf9\u5176\u4ed6\u8bbe\u5907\u8fdb\u884c\u5b9a\u4f4d\uff0c\u540c\u65f6\u53ef\u9009\u62e9\u53d1\u73b0\u5e76\u4f7f\u7528\u5176\u4ed6 \u8bbe\u5907\u63d0\u4f9b\u7684\u5404\u79cd\u670d\u52a1\u3002\u8fdb\u4e00\u6b65\uff0c\u501f\u52a9\u6df7\u5408\u62d3\u8865\u7ed3\u6784\uff0c\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5e94\u7528\u4e86 AllJoyn Thin\u5e93\u7684\u8bbe\u5907\u5b9a\u4e49\u4e3a\u5e94\u7528\u84dd\u7259\u7684\u4f20\u8f93\u673a\uff0c\u7531\u6b64\u4fbf\u53ef\u4e0e\u5176\u4ed6\u8fde \u63a5\u5230 Wi-Fi \u7684\u8bbe\u5907\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002  \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\u662f\u5728\u5b9e\u65f6\u591a\u73a9\u5bb6\u6e38\u620f\u4e0a\u7684\u5e94\u7528\u3002\u4f8b\u5982\uff0c\u4e00\u6b3e\u591a\u73a9\u5bb6\u6e38\u620f\u53ef\u4ee5\u8fd0\u884c\u5728\u8bf8\u5982\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u5e73\u677f\u7535\u8111\u4ee5\u53ca\u624b\u6301\u8bbe\u5907\u4e0a\uff0c\u57fa\u7840\u7f51\u7edc\u6280\u672f\uff08\u4f8b\u5982 Wi-Fi\uff09\u4e5f\u4e0d\u5c3d\u76f8\u540c\u3002\u8fd9\u4e9b\u6240\u6709\u7684\u57fa\u7840\u8bbe\u65bd\u7ec6\u8282\u7ba1\u7406\u90fd\u53ef\u4ee5\u7ecf\u7531 AllJoyn \u67b6\u6784\u5904\u7406\uff0c\u8fd9\u4f7f\u5f97\u6e38\u620f\u4f5c\u8005\u53ef\u4ee5\u5c06\u5168\u90e8\u7cbe\u529b\u6295\u5165\u6e38\u620f\u8bbe\u8ba1\u4e0e \u4e0e\u5b9e\u73b0\u4e0a\uff0c\u800c\u4e0d\u5fc5\u8003\u8651\u70b9\u5bf9\u70b9\u7f51\u7edc\u7684\u590d\u6742\u5ea6\u3002  \u4f5c\u4e3a AllJoyn \u751f\u6001\u7cfb\u7edf\u7684\u5ef6\u4f38\uff0c \u8fd8\u6709\u5f88\u591a\u5e94\u7528\u7a0b\u5e8f\u521b\u610f\u3002\u4f8b\u5982\uff1a   \u521b\u5efa\u4e00\u4e2a\u97f3\u4e50\u64ad\u653e\u5217\u8868\uff0c\u5c06\u6b4c\u66f2\u5171\u4eab\u5230\u652f\u6301 AllJoyn \u7684\u8f66\u8f7d\u97f3\u54cd\u7cfb\u7edf\u4e2d\uff0c\u6216\u8005\u5c06\u6b4c\u66f2\u50a8\u5b58\u5230\u5bb6\u5ead\u97f3\u54cd\u4e2d \uff08\u53d7\u5230\u6570\u5b57\u7248\u6743\u4fdd\u62a4\uff09\u3002  \u5728\u6d3b\u52a8\u6216\u65c5\u7a0b\u7ed3\u675f\u540e\u7684\u7684\u8fd4\u7a0b\u8def\u4e0a\uff0c\u5c06\u7167\u7247\u6216\u5176\u4ed6\u5a92\u4f53\u6587\u4ef6\u540c\u6b65\u81f3\u652f\u6301 AllJoyn \u7684\u7535\u89c6\u4e2d  \u8fdc\u7a0b\u63a7\u5236\u5bb6\u7528\u7535\u5668\uff0c\u4f8b\u5982\u7535\u89c6\u673a\uff0c\u6570\u5b57\u76d1\u63a7\u7cfb\u7edf\uff0c\u6e38\u620f\u673a\u7b49\u3002  \u5728\u5c40\u57df\u7f51\u5185\u4e0e\u7b14\u8bb0\u672c\u7535\u8111\u548c\u53f0\u5f0f\u673a\u4e92\u52a8\u5e76\u5206\u4eab\u5185\u5bb9\u3002  \u5728\u4f01\u4e1a\u6216\u6559\u80b2\u573a\u666f\u4e2d\uff0c\u5b8c\u6210\u540c\u4e8b\u6216\u5b66\u751f\u4e4b\u95f4\u9879\u76ee\u5408\u4f5c\u3002  \u63d0\u4f9b\u9002\u5730\u6027\u670d\u52a1\uff0c\u4f8b\u5982\u53d1\u653e\u4f18\u60e0\u5238\u6216 vcards.",
            "title": "\u6982\u89c8"
        },
        {
            "location": "/learn/core/standard-core/#alljoyn",
            "text": "\u4e4b\u524d\u5df2\u63d0\u53ca\uff0cAllJoyn \u67b6\u6784\u662f\u4e00\u4e2a\u5e73\u53f0\u65e0\u5173\u7684\u7cfb\u7edf\uff0c\u65e8\u5728\u7b80\u5316\u5206\u5e03\u5728\u5f02\u6784\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e0a\u7684\u90bb\u8fd1\u7f51\u7edc\u3002  \u5f02\u6784\u5728\u8fd9\u91cc\u4e0d\u4ec5\u6307\u4ee3\u4e0d\u540c\u8bbe\u5907\uff0c\u8fd8\u6307\u8fd0\u884c\u5728\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u5e94\u7528\u4e0d\u540c\u901a\u4fe1\u673a\u5236\u7684\u4e0d\u540c\u79cd\u7c7b\u7684\u8bbe\u5907\uff08\u4f8b\u5982\uff0c\u4e2a\u4eba\u7535\u8111\uff0c\u624b\u6301\u8bbe\u5907\uff0c\u5e73\u677f\u7535\u8111\uff0c\u6d88\u8d39\u7c7b\u7535\u5b50\u4ea7\u54c1\uff09\u3002  \u5f00\u6e90  AllJoyn \u67b6\u6784\u4e00\u8d2f\u662f\u5f00\u6e90\u5f00\u53d1\u3002\u6240\u6709\u7684 AllJoyn \u4ee3\u7801\u5e93\u90fd\u5f00\u653e\u68c0\u89c6\u5e76\u6b22\u8fce\u5f00\u53d1\u8005\u8fdb\u884c\u8865\u5145\u548c\u5b8c\u5584\u3002\u5982\u679c AllJoyn \u67b6\u6784\u7f3a\u5931\u67d0\u4e00\u529f\u80fd\uff0c\u4f60\u53ef \u4ee5\u6dfb\u52a0\u3002\u5982\u679c\u4f60\u5728\u5e94\u7528 AllJoyn \u6846\u67b6\u65f6\u9047\u5230\u4e86\u56f0\u96be\u6216\u8005\u6280\u672f\u95ee\u9898\uff0c\u5f00\u6e90\u793e\u533a\u4e2d\u7684\u5176\u4ed6\u53c2\u4e0e\u8005\u4f1a\u53ca\u65f6\u63d0\u4f9b\u5584\u610f\u7684\u5e2e\u52a9\u548c\u6307\u5bfc\u3002AllJoyn \u7684\u4ee3\u7801 \u5e93\u53ef\u4ee5\u5728\u4ee5\u4e0b\u7f51\u5740\u83b7\u5f97 (http://www.allseenalliance.org).  \u64cd\u4f5c\u7cfb\u7edf\u65e0\u5173\u6027  AllJoyn \u6846\u67b6\u6240\u63d0\u4f9b\u7684\u62bd\u8c61\u5c42\u4f7f\u5176\u4ee3\u7801\u548c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5728\u591a\u79cd\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u8fd0\u884c\u3002\u622a\u6b62\u5230\u672c\u534f\u8bae\u7f16\u5199\u65f6\uff0cAllJoyn \u6846\u67b6\u5df2\u652f\u6301\u5927\u591a\u6570 Linux \u53d1\u884c\u7248\u5305\u62ec Ubuntu\uff0c\u5e76\u53ef\u4ee5\u8fd0\u884c\u5728 Android 2.3 \uff08\u59dc\u997c\uff09 \u4ee5\u53ca\u540e\u7eed\u667a\u80fd\u624b\u673a\u548c\u5e73\u677f\u7535\u8111\u4e0a\u3002AllJoyn \u6846\u67b6\u4ee3\u7801\u4e5f\u53ef\u8fd0\u884c\u5728\u4f17\u591a\u6d41\u884c\u7684\u5fae\u8f6f \u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\u4e0a\uff0c\u5305\u62ec Windows XP, Windows 7, Windows RT, \u548c Windows 8. \u6b64\u5916\uff0cAllJoyn \u6846\u67b6\u4ee3\u7801\u53ef\u8fd0\u884c\u5728 Apple \u64cd\u4f5c\u7cfb\u7edf iOS \u4ee5\u53ca OS X\u4e0a\uff0c\u4ee5\u53ca\u8bf8\u5982 OpenWRT \u7684\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u3002  \u8bed\u8a00\u65e0\u5173\u6027  \u5f00\u53d1\u8005\u76ee\u524d\u4f7f\u7528 C++,Java, C#, JavaScript \u4ee5\u53ca Objective-C \u8bed\u8a00\u6765\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u3002  \u7269\u7406\u7f51\u7edc\u53ca\u534f\u8bae\u65e0\u5173\u6027  \u76ee\u524d\u6709\u8bb8\u591a\u53ef\u4f9b\u8054\u7f51\u8bbe\u5907\u4f7f\u7528\u7684\u6280\u672f\u3002AllJoyn \u6846\u67b6\u63d0\u4f9b\u7684\u62bd\u8c61\u5c42\u5b9a\u4e49\u4e86\u63a5\u5165\u5230\u57fa\u7840\u7f51\u7edc\u7ad9\u7684\u6e05\u6670\u63a5\u53e3\uff0c\u4f7f\u5f97\u4e3b\u7ba1\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u6dfb\u52a0\u65b0\u7684\u7f51\u7edc \u5b9e\u73b0\u5de5\u5177\u53d8\u5f97\u76f8\u5bf9\u5bb9\u6613\u3002  \u4f8b\u5982\uff0c\u622a\u6b62\u672c\u534f\u8bae\u7f16\u5199\u65f6\uff0cWi-Fi \u8054\u76df\u5df2\u7ecf\u53d1\u5e03\u4e86\u652f\u6301\u70b9\u5bf9\u70b9\u8fde\u63a5\u7684 Wi-Fi Direct \u6280\u672f\u7684\u53c2\u6570\u660e\u7ec6\u3002Wi-Fi Direct \u7684\u7f51\u7edc\u6a21\u5757\u6b63\u5728\u5bc6\u96c6\u7684 \u88ab\u5f00\u53d1\uff0c\u5f88\u660e\u663e\u4ed6\u4f1a\u5c06 Wi-Fi Direct \u4ee5\u53ca\u9884\u5148\u5173\u8054\u7684\u53d1\u73b0\u673a\u5236\u52a0\u5165\u5230\u53ef\u9009\u7f51\u7edc\u9009\u9879\u4e2d\uff0c\u4f9b AllJoyn \u7684\u5f00\u53d1\u8005\u9009\u62e9\u3002  \u52a8\u6001\u914d\u7f6e  \u79fb\u52a8\u8bbe\u5907\u5728\u5176\u5bff\u547d\u4e2d\u5e38\u4f1a\u7ecf\u8fc7\u591a\u91cd\u5730\u70b9\uff0c\u7f51\u7edc\u5173\u8054\u5efa\u7acb\u540e\u53c8\u65ad\u5f00\u3002\u8fd9\u610f\u5473\u7740 IP\uff08Internet Protocal\uff09\u5730\u5740\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u7f51\u7edc\u63a5\u53e3\u4f1a\u5931\u6548 \uff0c\u670d\u52a1\u4e5f\u4f1a\u4e0d\u7a33\u5b9a\u3002  \u5f53\u65e7\u670d\u52a1\u5931\u6548\u4ee5\u53ca\u65b0\u670d\u52a1\u51fa\u73b0\u65f6\uff0cAllJoyn \u6846\u67b6\u4f1a\u53d1\u51fa\u63d0\u9192\uff0c\u5982\u6709\u5fc5\u8981\u4e5f\u5c06\u5efa\u7acb\u65b0\u7684\u5173\u8054\u3002AllJoyn \u6846\u67b6\u5df2\u505a\u597d\u6210\u4e3aWi-Fi Hotspot 2.0 \uff08\u4f7f\u79fb\u52a8\u7535\u8bdd\uff0c\u79fb\u52a8\u57fa\u7ad9\u4e0e Wi-Fi \u70ed\u70b9\u900f\u660e\u8fde\u63a5\u7684\u6280\u672f\uff09\u5e94\u7528\u5c42\u7684\u51c6\u5907\u3002  \u5e7f\u544a\u670d\u52a1\u53ca\u53d1\u73b0  \u65e0\u8bba\u4f55\u65f6\uff0c\u8bbe\u5907\u7684\u901a\u4fe1\u4e00\u5b9a\u4f34\u968f\u7740\u670d\u52a1\u7684\u63a8\u5e7f\u4e0e\u53d1\u73b0\u3002\u5728\u8fc7\u53bb\u7684\u9759\u6001\u7f51\u65f6\u4ee3\uff0c\u8bbe\u5907\u95f4\u7684\u901a\u4fe1\u7531\u4eba\u5de5\u7ba1\u7406\u5458\u505a\u51fa\u660e\u786e\u7684\u5206\u914d\u5b9e\u73b0\u3002\u73b0\u4eca\u65f6\u4ee3\uff0c\u96f6\u914d\u7f6e\u7f51\u7edc\u7684\u6982\u5ff5\u5df2\u5341\u5206\u6d41\u884c\uff0c\u7279\u522b\u662f\u501f\u52a9\u4e8e Apple Bonjour \u4ee5\u53ca Microsoft Universal Plug and Play \u7684\u5e2e\u52a9\u3002  \u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u89c1\u5230\u4e86\u5982 Bluetooth Service Discovery Protocol \u7684\u5df2\u7ecf\u5b58\u5728\u7684\u53d1\u73b0\u673a\u5236\uff0c\u4ee5\u53ca\u6b63\u5728\u53d1\u5c55\u7684\u5982 Wi-Fi Direct P2P \u7684\u53d1\u73b0\u673a\n\u5236\u3002AllJoyn \u67b6\u6784\u63d0\u4f9b\u670d\u52a1\u63a8\u5e7f\u53ca\u53d1\u73b0\u7684\u865a\u62df\u5316\uff0c\u4ee5\u7b80\u5316\u5b9a\u4f4d\u53ca\u4f7f\u7528\u670d\u52a1\u7684\u8fc7\u7a0b\u3002  \u5b89\u5168\u6027  \u5728\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5b89\u5168\u6027\u7684\u81ea\u7136\u6a21\u578b\u662f\u5e94\u7528\u7a0b\u5e8f\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u3002\u4e0d\u5e78\u7684\u4e8b\uff0c\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u7f51\u7edc\u5b89\u5168\u6a21\u578b\u5e76\u4e0d\u9002\u7528\u4e8e\u6b64\u6a21\u578b\u3002\u4f8b\u5982\uff0c\u84dd\u7259\u534f\u8bae\u5728\u5b8c\u6210\u8bbe\u5907\u914d\u5bf9\u65f6\uff0c\u4f1a\u5c06\u53cc\u65b9\u8bbe\u5907\u4e2d\u7684\u6240\u6709\u5e94\u7528\u7a0b\u5e8f\u5168\u90e8\u6388\u6743\u3002\u4f46\u5982\u679c\u53cc\u65b9\u8bbe\u5907\u6bd4\u84dd\u7259\u8033\u673a\u66f4\u590d\u6742\uff0c\u5982\u4e24\u53f0\u7b14\u8bb0\u672c\u7535\u8111\u901a\u8fc7\u84dd\u7259\u76f8\u8fde\uff0c\u8fd9\u79cd\u6388\u6743\u6a21\u5f0f\u5c06\u4f1a\u53d8\u5f97\u4e0d\u7406\u60f3\uff0c\u8f6c\u800c\u9700\u8981\u66f4\u7cbe\u7ec6\u7684\u7c92\u5ea6\u3002AllJoyn \u6846\u67b6\u53ef\u5bf9\u8bf8\u5982\u6b64\u7c7b\u5f3a\u8c03\u5e94\u7528\u5bf9\u5e94\u7528\u901a\u4fe1\u7684\u590d\u6742\u5b89\u5168\u6a21\u578b\u63d0\u4f9b\u5e7f\u6cdb\u652f\u6301\u3002  \u5bf9\u8c61\u6a21\u578b\u4ee5\u53ca\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528  AllJoyn \u6846\u67b6\u5e94\u7528\u4e86\u7b80\u5355\u660e\u4e86\u7684\u5bf9\u8c61\u6a21\u578b\u4ee5\u53ca\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08 RMI \uff09\u673a\u5236\u3002AllJoyn \u6a21\u5f0f\u91cd\u65b0\u5b9e\u73b0\u5e76\u6269\u5c55\u4e86 D-Bus \u6807\u51c6\u5b9a\u4e49\u7684\u6709\u7ebf\u534f\u8bae\uff0c\u4ee5\u5b9e\u73b0\u5bf9\u5206\u5e03\u5f0f\u8bbe\u5907\u7684\u652f\u6301\u3002  \u8f6f\u4ef6\u5143\u4ef6  \u4f34\u968f\u7740\u6807\u51c6\u5316\u5bf9\u8c61\u6a21\u578b\u548c\u6709\u7ebf\u534f\u8bae\uff0c\u968f\u4e4b\u800c\u6765\u662f\u5c06\u5404\u7c7b\u63a5\u53e3\u6807\u51c6\u5316\u4e3a\u5143\u4ef6\u7684\u80fd\u529b\u3002\u4e0e Java \u63a5\u53e3\u58f0\u660e\u673a\u5236\u6240\u63d0\u4f9b\u7684\u4e0e\u672c\u5730\u5b9e\u4f8b\u4ea4\u4e92\u529f\u80fd\u7684\u5b9e \u73b0\u89c4\u8303\u7c7b\u4f3c\uff0cAllJoyn \u7684\u5bf9\u8c61\u6a21\u578b\u63d0\u4f9b\u4e86\u4e0e\u7f16\u7a0b\u8bed\u8a00\u65e0\u5173\u7684\uff0c\u4e0e\u8fdc\u7a0b\u5b9e\u73b0\u4ea4\u4e92\u7684\u89c4\u8303\u3002  \u6709\u4e86\u6210\u578b\u7684\u89c4\u8303\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f17\u591a\u63a5\u53e3\u7684\u5b9e\u73b0\uff0c\u4ece\u800c\u4f7f\u5e94\u7528\u7a0b\u5e8f\u901a\u4fe1\u7684\u6807\u51c6\u5efa\u7acb\u53d8\u5f97\u53ef\u884c\u3002\u8fd9\u9879\u6280\u672f\u5bf9\u8f6f\u4ef6\u7ec4\u4ef6\u5f88\u6709\u5e2e\u52a9\u3002\u8f6f\u4ef6\u90e8\u5206\u662f\u8bb8\u591a\u73b0\u4ee3\u7cfb\u7edf\u7684\u4e2d\u5fc3\uff0c\u5728\u7c7b\u4f3c Android \u7684\u7cfb\u7edf\u4e2d\u5219\u66f4\u4e3a\u660e\u663e\u3002\u5728 Android \u4e2d\u5b9a\u4e49\u4e864\u79cd\u4e3b\u8981\u6210\u5206\u7c7b\u578b\uff0c\u4f5c\u4e3a\u4ec5\u6709\u7684\u80fd\u63a5\u5165 Android Application Framework \u7684\u65b9\u5f0f\uff0c\u540c\u7406\u5728\u5fae\u8f6f\u7cfb\u7edf\u4e2d\uff0cComponent Object Model \uff08 COM \uff09\u7684\u7ee7\u4efb\u7248\u672c\u88ab\u7528\u4f5c\u6b64\u529f\u80fd\u3002  \u4e3a\u4e86\u5b9e\u73b0\u5728  \u6982\u8ff0 \u4e2d\u6240\u63cf\u7ed8\u7684\u573a\u666f\uff0c\u6211\u4eec\u671f\u76fc\u63a5\u53e3\u5b9a\u4e49\u5c06\u4f1a\u51fa\u73b0\u4e30\u5bcc\u7684\u201c\u6d77\u6d0b\u201d\u3002 AllJoyn \u9879\u76ee\u671f\u671b\u80fd\u4e0e\u4f17\u591a\u7528\u6237\u4e00\u8d77\u5b8c\u6210\u63a5\u53e3 \u7684\u5b9a\u4e49\u4e0e\u6807\u51c6\u5316\uff0c\u5e76\u534f\u52a9\u5b9e\u73b0\u65b9\u6cd5\u7684\u5171\u4eab\u3002",
            "title": "AllJoyn \u67b6\u6784\u7684\u4f18\u52bf"
        },
        {
            "location": "/learn/core/standard-core/#_11",
            "text": "AllJoyn \u67b6\u6784\u5305\u542b\u4e00\u7cfb\u5217\u53ef\u4f9b\u4f7f\u7528\u7684\u62bd\u8c61\u5c42\u4ee5\u4fbf\u4e8e\u7406\u89e3\u5e76\u5c06\u5b50\u6a21\u5757\u5173\u8054\u8d77\u6765\u3002\u5176\u4e2d\u53ea\u6709\u5f88\u5c0f\u90e8\u5206\u7684\u62bd\u8c61\u5c42\u662f\u7406\u89e3\u57fa\u4e8e AllJoyn \u7684\u7cfb\u7edf\u6240\u5fc5\u987b\u7684\u3002  \u8fd9\u4e00\u7ae0\u63d0\u4f9b\u4e86\u4e00\u4e2a AllJoyn \u67b6\u6784\u9ad8\u5c42\u6b21\u7684\u89c6\u89d2\u4e3a\u4e4b\u540e\u7684\u6587\u6863\u5982 API \u8be6\u89e3\u63d0\u4f9b\u5fc5\u8981\u7684\u57fa\u7840\u3002  \u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528  \u5206\u5e03\u5f0f\u7cfb\u7edf\u662f\u4ee5\u5b8c\u6210\u540c\u4e00\u76ee\u6807\u4e3a\u76ee\u7684\u7684\u4f7f\u7528\u4e00\u5b9a\u5f62\u5f0f\u7684\u7f51\u7edc\u8fde\u63a5\u8d77\u6765\u7684\u72ec\u7acb\u8ba1\u7b97\u673a\u7fa4\uff0c\u56e0\u6b64\u9700\u8981\u6709\u4e00\u53f0\u673a\u5668\u4e0a\u7684\u4e00\u5b9a\u5730\u5740\u7a7a\u95f4\u4e0b\u7684\u67d0\u4e2a\u7a0b\u5e8f\u4ee5\u7c7b\u4f3c\u4e8e\u672c\u5730\u8c03\u7528\u7684\u65b9\u5f0f\u4f7f\u7528\u4f4d\u4e8e\u53e6\u4e00\u53f0\u7269\u7406\u5206\u79bb\u7684\u673a\u5668\u4e0a\u7684\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4\u4e0b\u7684\u8fdb\u7a0b\u7684\u80fd\u529b\u3002\u8fd9\u901a\u5e38\u662f\u901a\u8fc7\u8fdc\u7a0b\u51fd\u6570\u8c03\u7528\uff08RPC\uff09\u6216\u8005\u4ee5\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u6765\u8bf4\u79f0\u4f5c\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08RMI\uff09\u6216\u8fdc\u7a0b\u8c03\u7528\uff08RI\uff09\u7684\u65b9\u5f0f\u6765\u5b8c\u6210\u3002  RPC \u7684\u6a21\u578b\u901a\u5e38\u9700\u8981\u4e00\u4e2a\u5ba2\u6237\u7aef\u4e5f\u5c31\u662f RPC \u7684\u8c03\u7528\u8005\u548c\u4e00\u4e2a\u670d\u52a1\u5668\u7aef\uff08AllJoyn\u6a21\u578b\u4e2d\u79f0\u4e3a\u670d\u52a1\u5668\uff09\u4e5f\u5c31\u662f\u5b9e\u9645\u4e0a\u6267\u884c\u6240\u671f\u671b\u7684\u8fdc\u7a0b\u51fd\u6570\u7684 \u7a0b\u5e8f\u3002\u8c03\u7528\u8005\u6267\u884c\u4e00\u4e2a\u770b\u4e0a\u53bb\u548c\u672c\u5730\u7cfb\u7edf\u4e0a\u7684\u51fd\u6570\u4e00\u6837\u7684\u5ba2\u6237\u7aef\u7684\u5b58\u6839\uff0c\u5b83\u4f1a\u5c06\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u6253\u5305\uff08\u79f0\u4e3a\u5bf9\u53c2\u6570\u7684\u7f16\u7ec4\u6216\u4e32\u884c\u5316\uff09\u4e3a\u67d0\u4e2a\u683c\u5f0f\u7684\u6d88\u606f\u7136\u540e\u53d1\u9001\u7ed9 RPC \u7cfb\u7edf\u5c06\u5176\u901a\u8fc7\u5982\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff08TCP\uff09\u4e00\u7c7b\u7684\u6807\u51c6\u673a \u5236\u9001\u8fbe\u670d\u52a1\u7aef\u3002\u5728\u8fdc\u7aef\u673a\u5668\u4e0a\u4f1a\u6709\u76f8\u5e94\u7684 RPC \u7cfb\u7edf\u5728\u8fd0\u884c \uff0c\u53c2\u6570\u5c06\u4f1a\u88ab\u53cd\u7f16\u7ec4\uff08\u53cd\u5e8f\u5217\u5316\uff09\u5e76\u5c06\u6d88\u606f\u53d1\u9001\u7ed9\u670d\u52a1\u7aef\u5b58\u6839\uff0c\u5b83\u4f1a\u5b89\u6392\u6267\u884c\u671f\u671b\u7684\u51fd\u6570\u3002\u5982\u679c\u88ab\u8c03\u7528\u7684\u51fd\u6570\u9700\u8981\u8fd4\u56de\u4efb\u4f55\u4fe1\u606f\uff0c\u4f1a\u4f7f\u7528\u76f8\u4f3c\u7684\u8fc7\u7a0b\u5c06\u8fd4\u56de\u503c\u8f6c\u8fd0\u7ed9\u5ba2\u6237\u7aef\u5b58\u6839\u5e76\u5c06\u5176\u53d1\u9001\u7ed9\u539f\u59cb\u7684\u8c03\u7528\u8005\u3002  \u6ce8\u610f\u8fd9\u91cc\u5e76\u6ca1\u6709\u8981\u6c42\u4e00\u4e2a\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u7aef\u529f\u80fd\u53ea\u80fd\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u5b9e\u73b0\u3002\u5982\u679c\u4e24\u4e2a\u6216\u66f4\u591a\u7ebf\u7a0b\u5b9e\u73b0\u540c\u4e00\u4e2a\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u7aef\u529f\u80fd\u7684\u67d0\u4e2a\u65b9\u9762\uff0c\u8fd9\u4e9b\u7ebf\u7a0b\u88ab\u770b\u6210\u7aef\u70b9\u3002\u5728\u5f88\u591a\u60c5\u51b5\u4e0b AllJoyn \u5e94\u7528\u4f1a\u5b9e\u73b0\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u8fd9\u65f6\u5b83\u4eec\u4e5f\u4f1a\u88ab\u4f5c\u4e3a\u7aef\u70b9\u6765\u770b\u5f85\u3002AllJoyn \u67b6\u6784\u80fd\u591f\u652f\u6301\u7ecf\u5178\u7684\u5ba2\u6237\u7aef \u548c\u670d\u52a1\u5668\u7aef\u7684\u529f\u80fd\uff0c\u540c\u65f6\u4e5f\u80fd\u652f\u6301\u7aef\u5230\u7aef\u7684\u7f51\u7edc\u529f\u80fd\u3002  AllJoyn bus  AllJoyn \u7cfb\u7edf\u4e2d\u6700\u57fa\u672c\u7684\u62bd\u8c61\u6982\u5ff5\u5c31\u662f AllJoyn \u603b\u7ebf\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2d\u5feb\u901f\u8f7b\u91cf\u7684\u65b9\u6cd5\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u4f20\u8f93\u7f16\u7ec4\u8fc7\u7684\u6d88\u606f\u3002\u53ef\u4ee5\u5c06 AllJoyn \u603b\u7ebf\u770b\u6210\u662f\u4e00\u79cd\u6d88\u606f\u6d41\u7684\u201c\u9ad8\u901f\u516c\u8def\u201d\u3002\u4e0b\u56fe\u4ece\u6982\u5ff5\u4e0a\u5c55\u793a\u4e86\u4e00\u4e2a AllJoyn \u603b\u7ebf\u5728\u540c\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684\u5b9e\u4f8b\u3002   Figure:  Prototypical AllJoyn bus  AllJoyn \u603b\u7ebf\u539f\u7406\u4e0a\u8bb2\u5305\u542b\u4e00\u4e0b\u51e0\u70b9\uff1a\n \u2022 \u56fe\u4e2d\u8f83\u7c97\u7684\u9ed1\u8272\u6a2a\u7ebf\u8868\u793a\u603b\u7ebf\u81ea\u8eab\uff0c\u7ad6\u7ebf\u53ef\u4ee5\u88ab\u7406\u89e3\u4e3a\u6d41\u7ecf\u603b\u7ebf\u7684\u6d88\u606f\u6d41\u7684\u6e90\u5934\u548c/\u6216\u76ee\u7684\u5730\u201c\u51fa\u53e3\u201d\u3002\n \u2022 \u4e0e\u603b\u7ebf\u7684\u8fde\u63a5\u7528\u516d\u8fb9\u5f62\u8868\u793a\u3002\u548c\u9ad8\u901f\u516c\u8def\u4e0a\u7684\u51fa\u53e3\u901a\u5e38\u4f1a\u88ab\u7f16\u53f7\u7c7b\u4f3c\uff0c\u6bcf\u4e00\u4e2a\u8fde\u63a5\u4f1a\u88ab\u8d4b\u4e88\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u5b57\u3002\u56fe\u4e2d\u4f7f\u7528\u4e86\u7b80\u5316\u7684\u5f62\u5f0f\u6765\u547d\u540d\u8fde\u63a5\u7528\u4ee5\u8bf4\u660e\u3002\n \u2022 \u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u5230\u603b\u7ebf\u7684\u8fde\u63a5\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u548c\u7ebf\u7a0b\u5171\u9a7b\u5185\u5b58\u7684\u3002\u56e0\u6b64\uff0c\u552f\u4e00\u8fde\u63a5\u540d:1.1\u53ef\u80fd\u88ab\u8d4b\u4e88\u7ed9\u4e86\u4e00\u4e2a\u8fd0\u884c\u7740\u67d0\u4e2a\u5e94\u7528\u5b9e\u4f8b\u7684\u7ebf\u7a0b\u6240\u5728\u7684\u8fde\u63a5\uff0c\u800c\u552f\u4e00\u8fde\u63a5\u540d:1.4\u53ef\u80fd\u88ab\u8d4b\u4e88\u7ed9\u4e86\u53e6\u4e00\u4e2a\u8fd0\u884c\u7740\u67d0\u4e2a\u5e94\u7528\u5b9e\u4f8b\u7684\u7ebf\u7a0b\u6240\u5728\u7684\u8fde\u63a5\u3002AllJoyn \u603b\u7ebf\u7684\u76ee\u6807\u5c31\u662f\u4f7f\u4e24\u4e2a\u5e94\u7528\u53ef\u4ee5\u5728\u4e0d \u9700\u8981\u5904\u7406\u5e95\u5c42\u5177\u4f53\u7684\u4ea4\u6362\u673a\u5236\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u901a\u4fe1\u3002\u4e00\u7aef\u7684\u8fde\u63a5\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u5ba2\u6237\u7aef\u5b58\u6839\u800c\u53e6\u4e00\u7aef\u5219\u5b8c\u6210\u6240\u6709\u670d\u52a1\u7aef\u5b58\u6839\u6240\u8981\u6c42\u7684\u6240\u6709\u4efb\u52a1\u3002  \u539f\u59cb\u7684 AllJoyn \u603b\u7ebf\u56fe\u8868\u8fbe\u4e86\u4e00\u4e2a AllJoyz \u603b\u7ebf\u7684\u6848\u4f8b\uff0c\u5e76\u63cf\u7ed8\u4e86\u8f6f\u4ef6\u603b\u7ebf\u4e3a\u63a5\u9a73\u5728\u5176\u4e0a\u7684\u4e0d\u540c\u7ec4\u4ef6\u63d0\u4f9b\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u3002\u4e00\n\u822c\u60c5\u51b5\u4e0b\uff0c AllJoyn \u603b\u7ebf\u4f1a\u88ab\u5ef6\u4f38\u5230\u4e0b\u56fe\u6240\u793a\u7684\u8bbe\u5907\u4e2d\u3002\u5f53\u7ec4\u4ef6\u9700\u8981\u65f6\uff0c\u4e00\u6761\u901a\u4fe1\u94fe\u8def\u4f1a\u5efa\u7acb\u5728\u5206\u5e03\u5728\u667a\u80fd\u624b\u673a\u4e0a\u7684\u903b\u8f91\u603b\u7ebf\u7247\u6bb5\u548c\u5206\u5e03\u5728 Linux \u4e3b\u673a\u4e0a\u7684\u7ec4\u4ef6\u4e4b\u95f4\u3002   Figure:  \u7531 AllJoyn \u6846\u67b6\u64cd\u4f5c\u7684\u8bbe\u5907\u4e0e\u8bbe\u5907\u95f4\u901a\u4fe1  \u6b64\u901a\u4fe1\u94fe\u8def\u7531 AllJoyn \u7cfb\u7edf\u7ba1\u7406\uff0c\u53ef\u4ee5\u7531\u5e95\u5c42\u6280\u672f\u5b9e\u73b0\uff0c\u8bf8\u5982 Wi-Fi \u6216 Wi-Fi Direct. \u5728 AllJoyn \u4e3b\u7ebf\u4e0a\u4f5c\u4e3a\u4e3b\u673a\u8fd0\u884c\u7684\u8bbe\u5907\u53ef\u4ee5\u6709\u591a\n\u4e2a\uff0c\u4f46\u5bf9\u4e8e\u5728\u5206\u5e03\u5f0f\u4e3b\u7ebf\u4e0a\u7684\u7528\u6237\u8fd9\u4e9b\u4e3b\u673a\u662f\u900f\u660e\u7684\u3002\u4ece\u4e3b\u7ebf\u7684\u4e00\u4e2a\u7ec4\u4ef6\u7684\u89d2\u5ea6\u770b\uff0c\u5206\u5e03\u5f0f AllJoyn \u7cfb\u7edf\u5c31\u50cf\u662f\u5728\u8bbe\u5907\u672c\u5730\u7684\u4e00\u6761\u4e3b\u7ebf\u3002  \u4e0b\u56fe\u5c55\u793a\u4e86\u5206\u5e03\u5f0f\u4e3b\u7ebf\u5728\u7528\u6237\u89d2\u5ea6\u53ef\u80fd\u5448\u73b0\u7684\u6837\u5b50\u3002\u7ec4\u4ef6\uff08\u4f8b\u5982\u6807\u7b7e\u4e3a  :1.1 \u7684\u667a\u80fd\u624b\u673a\u8fde\u63a5\uff09\u53ef\u4ee5\u5bf9\u6807\u7b7e\u4e3a :1.7 \u7684 Linux \u4e3b\u673a\u8fdb\u884c\u8fdc\n\u7a0b\u65b9\u6cd5\u8c03\u7528\uff0c\u800c\u65e0\u9700\u62c5\u5fc3\u8be5\u7ec4\u4ef6\u6240\u5904\u7684\u4f4d\u7f6e\u3002   Figure:  A distributed AllJoyn bus appears as a local bus  \u603b\u7ebf\u8def\u7531  \u5c31\u50cf\u8bbe\u5907\u5bf9\u8bbe\u5907\u901a\u4fe1\u56fe\u63cf\u7ed8\u7684\u90a3\u6837\uff0c\u903b\u8f91\u5206\u5e03\u5f0f\u603b\u7ebf\u4f1a\u88ab\u5206\u4e3a\u6570\u4e2a\u7247\u6bb5\uff0c\u6bcf\u4e00\u7247\u90fd\u8fd0\u884c\u5728\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\u3002\u5728 AllJoyn \u4e2d\uff0c\u5b9e\u73b0\u5bf9\u903b\u8f91\u603b\u7ebf\u5206\n\u5272\u529f\u80fd\u7684\u8bbe\u5907\u88ab\u79f0\u4f5c AllJoyn \u8def\u7531\u3002  \u5b88\u62a4\u8fdb\u7a0b\u5728\u7531 Unix \u884d\u751f\u51fa\u7684\u7cfb\u7edf\u4e2d\u5f88\u5e38\u89c1\uff0c\u4ed6\u88ab\u7528\u4e8e\u63cf\u8ff0\u4e3a\u7535\u8111\u7cfb\u7edf\u63d0\u4f9b\u91cd\u8981\u529f\u80fd\u6027\u7684\u4e00\u4e9b\u7a0b\u5e8f\u3002\u5728 Linux \u7cfb\u7edf\u4e2d\u6211\u4eec\u5c06 daemon \u79f0\u4e3a\n\u72ec\u7acb\u8def\u7531\u3002\u5728 Windows \u7cfb\u7edf\u4e2d\u66f4\u503e\u5411\u4e8e\u7528\u201c\u670d\u52a1\u201d\u8fd9\u4e2a\u8bcd\uff0c\u4f46\u6211\u4eec\u7528 AllJoyn \u8def\u7531\u6765\u63cf\u8ff0\u4ed6\u3002   Figure:  \u76f8\u5173\u7684\u603b\u7ebf\u6ce1\u6ce1\u56fe  \u521b\u5efa\u6ce1\u6ce1\u56fe\u53ef\u4ee5\u4f7f AllJoyn \u8def\u7531\u53ef\u89c6\u5316\u3002\u5982\u4e4b\u524d\u7684\u56fe\u6240\u793a\uff0c\u4e24\u4e2a AllJoyn \u603b\u7ebf\u7247\u6bb5\u5206\u522b\u4f4d\u4e8e\u667a\u80fd\u624b\u673a\u548c Linux \u4e3b\u673a\u4e0a\u3002\u6211\u4eec\u7528\u6237\uff08 C \uff09\u4ee5\u53ca\u670d\u52a1\uff08 S \uff09\u6765\u6807\u6ce8\u5230\u603b\u7ebf\u7684\u8fde\u63a5\uff0c\u8fd9\u91cc\u7528\u5230\u4e86 RMI \u4e2d \u7684\u7528\u6237\uff0f\u670d\u52a1\u7406\u5ff5\u6a21\u578b\u3002\u5b9e\u73b0\u6838\u5fc3\u5206\u5e03\u5f0f\u603b\u7ebf\u529f\u80fd\u7684 AllJoyn \u8def\u7531\u88ab\u6807\u8bb0\n\u4e3a \uff08 D \uff09\u3002\u56fe\u4e2d\u7684\u7ec4\u4ef6\u88ab\u8f6c\u6362\u6210\u4e0b\u56fe\u4e2d\u7684\u56fe\u6807\u3002   Figure:  AllJoyn \u6ce1\u6ce1\u56fe  \u56fe\u4e2d\u7684\u6ce1\u6ce1\u53ef\u88ab\u770b\u4f5c\u662f\u8fd0\u884c\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e0a\u7684\u7535\u8111\u8fdb\u7a0b\u3002\u5de6\u8fb9\u7684\u4e24\u4e2a\u7528\u6237\uff08 C \uff09\u548c\u670d\u52a1\uff08 S \uff09\u8fdb\u7a0b\u8fd0\u884c\u5728\u667a\u80fd\u624b\u673a\u4e0a\u3002\u4f4d\u4e8e\u53f3\u4fa7\u7684\u8def\u7531 \u5668\u7528\u4e8e\u5b9e\u73b0\u5728 Linux \u4e3b\u673a\u4e0a\u7684 AllJoyn \u603b\u7ebf\u7684\u672c\u5730\u7247\u6bb5\u3002  \u5982\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u56fe\u6240\u793a\uff0c\u8fd9\u4e24\u4e2a\u8def\u7531\u70b9\u534f\u8c03\u7740\u8de8\u8d8a\u903b\u8f91\u603b\u7ebf\u7684\u6d88\u606f\u6d41\uff0c\u5448\u73b0\u5230\u8fde\u63a5\u4e0a\u7684\u5219\u662f\u4e00\u4e2a\u6574\u4f53\u3002\u4e0e\u667a\u80fd\u624b\u673a\u7aef\u7684\u914d\u7f6e\u76f8\u540c\uff0c\u5728 Linux \u4e3b\u673a\u4e0a\u540c\u6837\u8bbe\u6709\u4e24\u4e2a\u670d\u52a1\u7ec4\u4ef6\u548c\u4e00\u4e2a\u7528\u6237\u7ec4\u4ef6\u3002  \u5728\u8fd9\u79cd\u914d\u7f6e\u4e2d\uff0c\u7528\u6237\u7ec4\u4ef6 C1 \u53ef\u4ee5\u5bf9\u670d\u52a1\u7ec4\u4ef6 S1 \u8fdb\u884c\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff0c\u5c31\u50cf\u64cd\u4f5c\u672c\u5730\u5bf9\u8c61\u90a3\u6837\u4e00\u6837\u3002\u5e8f\u5217\u5316\u7684\u53c2\u6570\u7531\u6e90\u5934\u88ab\u8fd0\u884c\u5728\u667a\u80fd\u624b\u673a\u4e0a\n\u7684\u8def\u7531\u5668\u4f20\u9001\u51fa\u672c\u5730\u603b\u7ebf\u7247\u6bb5\u3002\u7ecf\u8fc7\u7f51\u7edc\u94fe\u8def\uff08\u5bf9\u7528\u6237\u900f\u660e\uff09\u53d1\u9001\u5230 Linux \u4e3b\u673a\u7684\u8def\u7531\u70b9\u3002Linux \u4e3b\u673a\u4e0a\u7684 AllJoyn \u8def\u7531\u8bc6\u522b\u51fa\u53c2\u6570\u76ee\u7684\u5730\n\u4e3a S1\uff0c\u968f\u540e\u5c06\u53c2\u6570\u89e3\u5e8f\u5217\u5316\u5e76\u6267\u884c\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u3002\u5982\u679c\u9700\u8981\u8fd4\u56de\u503c\uff0c\u6b64\u8fdb\u7a0b\u53ef\u88ab\u53cd\u8f6c\uff0c\u5c06\u8fd4\u56de\u503c\u9001\u56de\u5ba2\u6237\u7aef\u3002  \u7531\u4e8e\u72ec\u7acb\u8def\u7531\u8fd0\u884c\u5728\u540e\u53f0\u8fdb\u7a0b\u4e2d\uff0c\u4e0d\u540c\u4e8e\u7528\u6237\u4e0e\u670d\u52a1\u6240\u5728\u7684\u8fdb\u7a0b\uff0c\u5728\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u9700\u8981\u6709\u4e00\u4e2a\u8def\u7531\u201c\u4ee3\u8868\u201d\u3002\u5728 AllJoyn \u6846\u67b6\u4e2d\u8fd9\u4e9b\u4ee3\u8868\u88ab\u79f0\n\u4e3a\u603b\u7ebf\u9644\u4ef6\u3002  \u603b\u7ebf\u9644\u4ef6  \u6bcf\u4e00\u4e2a\u5230 AllJoyn \u603b\u7ebf\u7684\u8fde\u63a5\u90fd\u4f1a\u7ecf\u8fc7\u7279\u5b9a\u7684 AllJoyn \u7ec4\u4ef6\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u88ab\u79f0\u4f5c\u603b\u7ebf\u9644\u4ef6\u3002\u603b\u7ebf\u9644\u4ef6\u5b58\u5728\u4e8e\u6bcf\u4e00\u4e2a\u9700\u8981\u8fde\u63a5\u5230 AllJoyn \u8f6f\u4ef6\n\u603b\u7ebf\u7684\u8fdb\u7a0b\u5f53\u4e2d\u3002  \u5f53\u8ba8\u8bba\u8f6f\u4ef6\u7ec4\u4ef6\u65f6\uff0c\u5e38\u4f1a\u5728\u8f6f\u4ef6\u548c\u786c\u4ef6\u4e4b\u95f4\u505a\u4e00\u4e2a\u7c7b\u6bd4\u3002\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u4e0a\u7684\u672c\u5730\u7247\u6bb5\u5c31\u50cf\u662f\u53f0\u5f0f\u673a\u4e0a\u7684\u786c\u4ef6\u80cc\u677f\u603b\u7ebf\u3002\u786c\u4ef6\u603b\u7ebf\u53ef\u4f20\n\u9001\u7535\u5b50\u4fe1\u53f7\uff0c\u4e0e\u5176\u4ed6\u5361\u7247\u6709\u88ab\u79f0\u4e3a\u8fde\u63a5\u4f53\u7684\u63a5\u9a73\u70b9\u3002\u7c7b\u6bd4\u4e8e\u786c\u4ef6\uff0cAllJoyn \u6846\u67b6\u4e2d\u7684\u603b\u7ebf\u9644\u4ef6\u5c31\u50cf\u786c\u4ef6\u4e2d\u7684\u8fde\u63a5\u4f53\u3002  AllJoyn \u603b\u7ebf\u9644\u4ef6\u662f\u4e00\u4e2a\u5df2\u5b9a\u4e49\u8bed\u8a00\u7684\u5bf9\u8c61\uff0c\u5bf9\u4e8e\u5ba2\u6237\u7aef\uff0c\u670d\u52a1\u6216\u8005\u4e00\u4e2a\u70b9\uff0c\u4ed6\u4ee3\u8868\u7740\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u3002\u4f8b\u5982\uff0cC++ \u8bed\u8a00\u4e2d\u4e3a\u7528\u6237\u63d0\u4f9b\n\u4e86\u603b\u7ebf\u9644\u4ef6\u7684\u4e00\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5728 Java \u4e2d\u5219\u6709\u53e6\u4e00\u79cd\u5b9e\u73b0\u65b9\u6cd5\u6765\u5b9e\u73b0\u540c\u4e00\u603b\u7ebf\u9644\u4ef6\u3002\u7531\u4e8e AllJoyn \u6846\u67b6\u6dfb\u52a0\u4e86\u8bed\u8a00\u8054\u7f16\uff0c\u66f4\u591a\u5df2\u5b9a\u4e49\u8bed\u8a00\u7684 \u5b9e\u73b0\u65b9\u6cd5\u5c06\u4f1a\u51fa\u73b0\u3002  \u603b\u7ebf\u65b9\u6cd5\uff0c\u603b\u7ebf\u5c5e\u6027\u53ca\u603b\u7ebf\u4fe1\u53f7  AllJoyn \u6846\u67b6\u662f\u4e00\u4e2a\u9762\u5411\u5bf9\u8c61\u7684\u7cfb\u7edf\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7684\u7cfb\u7edf\u4e2d\uff0c\u603b\u4f1a\u63d0\u53ca\u8c03\u7528\u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5 \uff08\u56e0\u6b64\uff0c\u5728\u63d0\u53ca\u5206\u5e03\u5f0f\u7cfb\u7edf\u65f6\u4e5f\u5e38\u4f1a\u63d0\u53ca\u8fdc\u7a0b\u65b9\u6cd5\n\u8c03\u7528\uff09\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7406\u5ff5\u4e2d\uff0c\u5bf9\u8c61\u6709\u4e00\u7cfb\u5217\u6210\u5458\u3002\u8fd9\u4e9b\u5bf9\u8c61\u65b9\u6cd5\u6216\u5c5e\u6027\uff0c\u5728 AllJoyn \u6846\u67b6\u4e2d\u88ab\u79f0\u4e3a\u603b\u7ebf\u65b9\u6cd5\u548c\u603b\u7ebf\u5c5e\u6027\u3002AllJoyn \u6846\u67b6\n\u540c\u65f6\u8fd8\u6709\u603b\u7ebf\u4fe1\u53f7\u7684\u6982\u5ff5\uff0c\u4f5c\u4e3a\u5728\u5bf9\u8c61\u4e2d\u4e00\u4e9b\u9879\u76ee\u6216\u72b6\u6001\u53d8\u5316\u7684\u5f02\u6b65\u63d0\u9192\u3002  \u4e3a\u4e86\u505a\u5230\u5ba2\u6237\uff0c\u670d\u52a1\u4e0e\u70b9\u4e4b\u95f4\u7684\u901a\u4fe1\u5b89\u6392\u900f\u660e\u5316\uff0c\u8c03\u7528\u603b\u7ebf\u65b9\u6cd5\u548c\u603b\u7ebf\u4fe1\u53f7\u7684\u53c2\u6570\u4e00\u5b9a\u8981\u6709\u89c4\u8303\uff0c\u540c\u65f6\u4e5f\u9700\u8981\u5bf9\u603b\u7ebf\u5c5e\u6027\u5b9a\u4e49\u4e00\u4e9b\u79cd\u7c7b\u4fe1\u606f\u3002\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u8c03\u7528\u65b9\u6cd5\u6216\u4fe1\u53f7\u7684\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7c7b\u578b\u88ab\u79f0\u4e3a\u7c7b\u578b\u7b7e\u540d\u3002  \u7c7b\u578b\u7b7e\u540d\u7531\u5b57\u7b26\u4e32\u5b9a\u4e49\u3002\u540c\u65f6\u7c7b\u578b\u7b7e\u540d\u53ef\u4ee5\u63cf\u8ff0\u5b57\u7b26\u4e32\uff0c\u4ee5\u53ca\u6240\u6709\u4e3b\u6d41\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u6570\u636e\u7c7b\u578b\u548c\u8bf8\u5982\u6570\u7ec4\uff0c\u7ed3\u6784\u4f53\u7684\u590d\u5408\u7c7b\u578b\u3002\u7c7b\u578b\u7b7e\u540d\u7684\u5177\u4f53\u4efb\u52a1\u53ca\u4f7f\u7528\u5df2\u8d85\u51fa\u4e86\u6b64\u7bc7\u7b80\u4ecb\u7684\u4ecb\u7ecd\u8303\u56f4\u3002\u603b\u7684\u6765\u8bf4\uff0c\u603b\u7ebf\u65b9\u6cd5\uff0c\u4fe1\u53f7\u6216\u5c5e\u6027\u7684\u7c7b\u578b\u7b7e\u540d\u53ef\u4ee5\u544a\u77e5\u5e95\u5c42 AllJoyn \u7cfb\u7edf\u5982\u4f55\u5c06\u4f20\u8f93\u53c2\u6570\u548c\u8fd4 \u56de\u503c\u4ece\u5df2\u5e8f\u5217\u5316\u7684\u8868\u8fbe\u65b9\u5f0f\u4e2d\u8f6c\u6362\u8fc7\u6765\u3002  \u603b\u7ebf\u63a5\u53e3  \u5728\u5927\u591a\u6570\u9762\u5411\u5bf9\u8c61\u7cfb\u7edf\u5f53\u4e2d\uff0c\u6709\u5185\u5728\u5171\u6027\u7684\u65b9\u6cd5\u96c6\u548c\u5c5e\u6027\u96c6\u4f1a\u88ab\u7f16\u5165\u5c0f\u7ec4\u3002\u8fd9\u4e9b\u529f\u80fd\u7ec4\u7684\u7edf\u4e00\u63cf\u8ff0\u88ab\u79f0\u4f5c\u63a5\u53e3\u3002\u63a5\u53e3\u662f\u4e00\u4e2a\u5728\u5b9e\u73b0\u63a5\u53e3\u89c4\u8303\u7684\n\u5b9e\u4f53\u548c\u5916\u754c\u4e16\u754c\u4e4b\u95f4\u7684\u5951\u7ea6\u3002\u4f9d\u6b64\uff0c\u63a5\u53e3\u662f\u901a\u8fc7\u5408\u9002\u7684\u6807\u51c6\u673a\u6784\u7684\u6807\u51c6\u5316\u7684\u5019\u9009\u4eba\u3002\u5404\u7c7b\u670d\u52a1\uff08\u4ece\u7535\u8bdd\u5230\u5a92\u4f53\u64ad\u653e\u63a7\u5236\uff09\u7684\u63a5\u53e3\u7684\u89c4\u8303\u53ef\u4ee5\u5728\u7f51\u7ad9\u4e0a\u627e\u5230\u3002\u6839\u636e D-Bus \u89c4\u8303\uff0c\u8fd9\u4e9b\u63a5\u53e3\u7531 XML \u63cf\u8ff0\u3002  \u4e00\u4e2a\u63a5\u53e3\u5b9a\u4e49\u5c06\u4e00\u7ec4\u4e3b\u7ebf\u65b9\u6cd5\uff0c\u4e3b\u7ebf\u4fe1\u53f7\u548c\u4e3b\u7ebf\u5c5e\u6027\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5bf9\u5e94\u7684\u7c7b\u578b\u7b7e\u540d\u96c6\u6210\u5230\u4e00\u4e2a\u5df2\u547d\u540d\u7684\u7ec4\u4e2d\u3002\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u63a5\u53e3\u901a\u5e38\u7531\u5ba2\u6237\uff0c\u670d\u52a1\u6216\u8005\u70b9\u7684\u8fdb\u7a0b\u5b9e\u73b0\u3002\u5f53\u5df2\u547d\u540d\u7684\u63a5\u53e3\u88ab\u5b9e\u73b0\u540e\uff0c\u5728\u5b9e\u73b0\u65b9\u548c\u5916\u754c\u4e16\u754c\u4e4b\u95f4\u5c06\u751f\u6210\u4e00\u4e2a\u5185\u542b\u7684\u5951\u7ea6\uff0c\u5e76\u5c06\u652f\u6301\u6240\u6709\u8be5\u63a5\u53e3\u7684\u603b\u7ebf\u65b9\u6cd5\uff0c\u603b\u7ebf\u4fe1\u53f7\u53ca\u603b\u7ebf\u5c5e\u6027\u3002  \u63a5\u53e3\u540d\u901a\u5e38\u53d6\u7528\u53cd\u8f6c\u7684\u57df\u540d\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a AllJoyn \u7684\u6807\u51c6\u63a5\u53e3\u662f org.alljoyn.Bus \u63a5\u53e3\uff0c\u7531\u8def\u7531\u5668\u521b\u5efa\uff0c\u5e76\u4e3a\u603b\u7ebf\u9644\u4ef6\u63d0\u4f9b\u4e00\u4e9b\u57fa\u7840\u670d\u52a1\u3002  \u7531\u4efb\u610f\u547d\u540d\u7a7a\u95f4\u7684\u5b57\u7b26\u4e32\u521b\u5efa\u63a5\u53e3\u540d\u79f0\u662f\u4e0d\u53ef\u53d6\u7684\u3002\u63a5\u53e3\u540d\u79f0\u5b57\u7b26\u4e32\u4e3a\u4e00\u4e2a\u7279\u5b9a\u7684\u65b9\u6cd5\u670d\u52a1\uff0c\u4e0d\u53ef\u4ee5\u4e0e\u5176\u4ed6\u76f8\u4f3c\u7684\u5b57\u7b26\u4e32\u76f8\u6df7\u6dc6\uff0c\u5c24\u5176\u662f\u4e3b\u7ebf\u540d\u79f0\u3002\u4f8b\u5982\uff0c org.alljoyn.sample.chat  \u53ef\u4ee5\u662f\u4e00\u4e2a\u6052\u5b9a\u4e0d\u53d8\u7684\u53ef\u4ee5\u7531\u7528\u6237\u641c\u7d22\u5230\u7684\u4e3b\u7ebf\u540d\u79f0\u3002\u540c\u65f6\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5728\u603b\u7ebf\u5bf9\u8c61\u4e2d\u5b9a\u4e49\u4e86\u4e0e\u5df2\u5b9a\u4e49\u4e86\u603b\u7ebf\u540d\u79f0\u7684\u603b\u7ebf\u9644\u4ef6\u76f8\u5173\u7684\uff0c\u53ef\u4f7f\u7528\u7684\u65b9\u6cd5\uff0c\u4fe1\u53f7\u53ca\u5c5e\u6027\u7684\u540d\u5b57\u3002\u88ab\u8d4b\u4e88\u540d\u79f0\u7684\u63a5\u53e3\u7684\u5b58\u5728\u6697\u542b\u5728\u4e3b\u7ebf\u540d\u79f0\u7684\u5b58\u5728\u5f53\u4e2d\uff0c\u867d\u7136\u4ed6\u4eec\u6709\u65f6\u770b\u8d77\u6765\u5b8c\u5168\u76f8\u540c\uff0c\u4f46\u4ed6\u4eec\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u4e24\u7c7b\u3002  \u603b\u7ebf\u5bf9\u8c61\u548c\u603b\u7ebf\u8def\u5f84  \u603b\u7ebf\u63a5\u53e3\u4e3a\u5de5\u4f5c\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e0a\u7684\u63a5\u53e3\u7684\u58f0\u660e\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6807\u51c6\u5316\u7684\u65b9\u5f0f\u3002\u603b\u7ebf\u5bf9\u8c61\u4e3a\u5b9e\u73b0\u7ed9\u5b9a\u89c4\u8303\u7684\u63a5\u53e3\u63d0\u4f9b\u4e86\u811a\u624b\u67b6\u3002\u603b\u7ebf\u5bf9\u8c61\u5b58\u5728\u4e8e\u603b\u7ebf\u9644\u4ef6\u4e2d\uff0c\u626e\u6f14\u901a\u4fe1\u7ec8\u70b9\u7684\u89d2\u8272\u3002  \u7531\u4e8e\u5b9e\u73b0\u5b58\u5728\u4e8e\u4efb\u610f\u7ed9\u5b9a\u603b\u7ebf\u9644\u4ef6\u7684\u6307\u5b9a\u63a5\u53e3\u7684\u65b9\u6cd5\u4e0d\u6b62\u4e00\u79cd\uff0c\u6b64\u5904\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u8def\u5f84\u5b9e\u73b0\u7684\u9644\u52a0\u7ed3\u6784\uff0c\u7528\u4ee5\u533a\u5206\u8fd9\u4e9b\u4e0d\u540c\u7684\u63a5\u53e3\u5b9e\u73b0\u65b9\u6cd5\u3002  \u5c31\u50cf\u5b58\u5728\u4e8e\u63a5\u53e3\u547d\u540d\u7a7a\u95f4\u7684\u63a5\u53e3\u540d\u5b57\u7b26\u4e32\u4e00\u6837\uff0c\u5bf9\u8c61\u8def\u5f84\u4e5f\u5b58\u5728\u4e8e\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u3002\u6b64\u547d\u540d\u7a7a\u95f4\u88ab\u89c4\u5212\u4e3a\u4e00\u4e2a\u6811\u578b\u7ed3\u6784\uff0c\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5bfb\u627e\u8def\u5f84\u7684\u6a21\u578b\u5219\u662f\u4e00\u4e2a\u76ee\u5f55\u6811\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u8c61\u8def\u5f84\u7684\u8def\u5f84\u5206\u9694\u7b26\u662f\u4e00\u4e2a\u6b63\u659c\u6760 (/)\uff0c\u4e0e Unix \u6587\u4ef6\u7cfb\u7edf\u4e2d\u76f8\u540c\u3002\u7531\u4e8e\u603b\u7ebf\u5bf9\u8c61\u662f\u603b\u7ebf\u63a5\u53e3\u7684\u5b9e\u73b0\uff0c\n\u5bf9\u8c61\u8def\u5f84\u53ef\u4ee5\u4e0e\u5176\u76f8\u5e94\u63a5\u53e3\u7684\u547d\u540d\u89c4\u5219\u4fdd\u6301\u4e00\u81f4\u3002  \u5728\u5b9a\u4e49\u78c1\u76d8\u63a7\u5236\u5668\u63a5\u53e3\u65f6\uff08\u4f8b\u5982\uff0c org.freedesktop.DeviceKit.Disks \uff09\uff0c\u53ef\u4ee5\u60f3\u50cf\u7531\u4e0b\u5217\u5bf9\u8c61\u8def\u5f84\u6240\u63cf\u8ff0\u7684\u591a\u91cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u8def\u5f84\u5bf9\u5e94\u7740\u4e24\u4e2a\u4e0d\u540c\u7684\u7269\u7406\u78c1\u76d8\u63a5\u53e3\uff1a  /org/freedesktop/DeviceKit/Disks/sda1\n\n/org/freedesktop/DeviceKit/Disks/sda2  \u4ee3\u7406\u4e3b\u7ebf\u5bf9\u8c61  \u5728 AllJoyn \u4e3b\u7ebf\u4e0a\u7684\u4e3b\u7ebf\u5bf9\u8c61\u901a\u8fc7\u4ee3\u7406\u88ab\u8bbf\u95ee\u3002\u4ee3\u7406\u662f\u4e00\u4e2a\u53ef\u88ab\u4e3b\u7ebf\u8bbf\u95ee\u7684\u8fdc\u7aef\u5bf9\u8c61\u7684\u672c\u5730\u4ee3\u8868\u3002\u4ee3\u7406\u5e76\u4e0d\u662f\u7531 AllJoyn \u7cfb\u7edf\u6240\u5b9a\u4e49\u7684\uff0c\u800c\n\u662f\u4e00\u4e2a\u88ab\u5e7f\u6cdb\u5e94\u7528\u7684\u540d\u8bcd\u3002\u5728 AllJoyn \u6846\u67b6\u4e2d\u4f60\u4f1a\u7ecf\u5e38\u9047\u5230 ProxyBusObject \u8fd9\u4e2a\u8bcd\uff0c\u4ed6\u6307\u793a\u7740\u4ee3\u7406\u7684\u4e00\u4e2a\u7279\u5b9a\u7684\u672c\u8d28\uff0d\u4ed6\u662f\u4e00\u4e2a\u8fdc\u7aef\u603b\u7ebf\n\u5bf9\u8c61\u7684\u672c\u5730\u4ee3\u7406\u3002  ProxyBusObject \u662f\u5e95\u5c42\u7ea7 AllJoyn \u4ee3\u7801\u7684\u4e00\u90e8\u5206\uff0c\u8d1f\u8d23\u5bf9\u8c61\u4ee3\u7406\u57fa\u672c\u529f\u80fd\u7684\u8fd0\u884c\u3002  \u4e00\u822c\u60c5\u51b5\u4e0b\uff0cRMI \u7cfb\u7edf\u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u4e2a\u5b9e\u73b0\u63a5\u53e3\u7684\u4ee3\u7406\uff0c\u4ed6\u770b\u8d77\u6765\u4e0e\u5c06\u8c03\u7528\u8fdc\u7a0b\u5bf9\u8c61\u7684\u90a3\u4e00\u4e2a\u975e\u5e38\u76f8\u8fd1\u3002\u4ee3\u7406\u5bf9\u8c61\u4e0e\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u540c\u4e00\u4e2a\u63a5\u53e3\uff0c\u4f46\u8fd0\u884c\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u53c2\u6570\u4ee5\u53ca\u5411\u670d\u52a1\u53d1\u9001\u6570\u636e\u7684\u8fdb\u7a0b\u3002  \u5728 AllJoyn \u6846\u67b6\u4e2d\uff0c\u7528\u6237\u4e0e\u670d\u52a1\u8f6f\u4ef6\u5e38\u5e38\u901a\u8fc7\u7279\u5b9a\u7684\u7f16\u7a0b\u8bed\u8a00\u8054\u7f16\u6765\u5b9e\u73b0\u5177\u4f53\u7684\u7528\u6237\u5c42\u4ee3\u7406\u5bf9\u8c61\u3002\u7528\u6237\u5c42\u7684\u4ee3\u7406\u5bf9\u8c61\u5219\u901a\u8fc7 AllJoyn \u4ee3\u7406\u603b\u7ebf\u8def\u5f84\u7684\u5bb9\u91cf\u6765\u5b9e\u73b0\u5c40\u90e8\u900f\u660e\uff0f\u8fdc\u7a0b\u900f\u660e\u7684\u76ee\u6807\u3002  \u603b\u7ebf\u540d\u79f0  AllJoyn \u603b\u7ebf\u4e0a\u7684\u8fde\u63a5\u662f\u4e00\u79cd\u7528\u6765\u5b9e\u73b0\u88ab\u63a5\u53e3\u540d\u6240\u63cf\u8ff0\u7684\u63a5\u53e3\u7684\u670d\u52a1\u3002\u63a5\u53e3\u7684\u5b9e\u73b0\u88ab\u6574\u7406\u5230\u670d\u52a1\u4e2d\u63a5\u53e3\u603b\u7ebf\u5bf9\u8c61\u7684\u6811\u4e2d\u3002\u7528\u6237\u5e0c\u671b\u901a\u8fc7\u4ee3\u7406\u5bf9\u8c61\u6765\u6d88\u8d39\u670d\u52a1\uff0c\u8fd9\u5c06\u4f1a\u4f7f\u7528\u4f4e\u5c42\u6b21 AllJoyn \u4ee3\u7406\u4e3b\u7ebf\u5bf9\u8c61\u6765\u5b89\u6392\u903b\u8f91\u4e3b\u7ebf\u4e0a\u4e3b\u7ebf\u65b9\u6cd5\uff0c\u4e3b\u7ebf\u4fe1\u53f7\u548c\u4e3b\u7ebf\u5c5e\u6027\u76f8\u5173\u4fe1\u606f\u7684\u6295\u9012\u3002  \u4e3a\u4e86\u5b8c\u6210\u4e3b\u7ebf\u5bfb\u5740\u6b65\u9aa4\uff0c\u4e0e\u4e3b\u7ebf\u7684\u8fde\u63a5\u5fc5\u987b\u6709\u552f\u4e00\u6807\u8bc6\u3002AllJoyn \u7cfb\u7edf\u4e3a\u6bcf\u4e00\u4e2a\u4e3b\u7ebf\u9644\u4ef6\u5206\u914d\u4e00\u4e2a\u4e34\u65f6\u7684\u552f\u4e00\u4e3b\u7ebf\u6807\u793a\uff0c\u6b64\u552f\u4e00\u6807\u8bc6\u5728\u670d\u52a1\u6bcf\n\u4e00\u6b21\u8fde\u63a5\u5230\u4e3b\u7ebf\u65f6\u81ea\u52a8\u751f\u6210\uff0c\u56e0\u6b64\u8be5\u6807\u793a\u5e76\u4e0d\u9002\u5408\u4f5c\u4e3a\u670d\u52a1\u7684\u6301\u4e45\u6807\u8bc6\u3002\u5e94\u8be5\u6709\u4e00\u79cd\u53ef\u4ee5\u6301\u4e45\u67e5\u9605\u5230\u670d\u52a1\u7684\u65b9\u5f0f\uff0c well-known names  \u88ab\u7528\n\u6765\u5145\u5f53\u670d\u52a1\u7684\u6301\u4e45\u6807\u793a\u3002  \u5c31\u50cf\u53ef\u4ee5\u7ecf\u57df\u540d\u6307\u4ee3\u5728\u7f51\u7edc\u4e0a\u7684\u4e3b\u673a\u7cfb\u7edf\uff0c\u5e76\u4e14\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u4e0d\u4f1a\u53d8\u5316\u4e00\u6837\uff0c\u540c\u6837\u53ef\u4ee5\u901a\u8fc7 well-known bus name \u6307\u4ee3AllJoyn \u4e3b\u7ebf\u4e0a\u7684\u529f\n\u80fd\u6a21\u5757\u3002\u5c31\u50cf\u63a5\u53e3\u540d\u79f0\u662f\u5012\u5e8f\u7684\u57df\u540d\u4e00\u6837\uff0c\u4e3b\u7ebf\u540d\u79f0\u4e5f\u6709\u6b64\u79cd\u5448\u73b0\u65b9\u6cd5\u3002\u7531\u4e8e\u63a5\u53e3\u540d\u4e0e well-known bus names\u5728\u51fa\u4e8e\u65b9\u4fbf\u7684\u8003\u8651\u4e0b\u7ecf\u5e38\u88ab\u8bbe\n\u5b9a\u4e3a\u540c\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e9b\u6df7\u6dc6\u7684\u53d1\u751f\u3002\u8bf7\u8c28\u8bb0\uff0c\u4ed6\u4eec\u7684\u7528\u9014\u5b8c\u5168\u4e0d\u540c\uff1a\u63a5\u53e3\u540d\u5b9a\u4e49\u4e00\u4e2a\u7531\u4e3b\u7ebf\u5bf9\u8c61\u5b9e\u73b0\u7684\uff0c\u8fd0\u884c\u5728\u4e3b\u7ebf\u9644\u4ef6\u4e2d\u7684\uff0c\u63cf\u8ff0\u7528\u6237\u4e0e\u670d\u52a1\u7684\u5951\u7ea6\uff1bwell-known name \u5219\u6307\u4e3a\u60f3\u8fde\u63a5\u5230\u67d0\u670d\u52a1\u7684\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u7a33\u5b9a\u4e0d\u53d8\u7684\u8fde\u63a5\u65b9\u5f0f\u7684\u670d\u52a1\u3002  \u5728\u5e94\u7528 well-known name \u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\uff08\u7ecf\u8fc7\u4e3b\u7ebf\u9644\u4ef6\uff09\u5fc5\u987b\u4e8b\u5148\u5bf9\u4e3b\u7ebf\u8def\u7531\u53d1\u51fa\u4f7f\u7528\u8be5\u6807\u8bc6\u7684\u8bf7\u6c42\u3002\u5982\u679c\u6b64 well-known name \u6682\u65e0\u5176\u4ed6\u7528\n\u6237\u5360\u7528\uff0c\u7533\u8bf7\u8005\u5c06\u4f1a\u88ab\u7ed9\u4e88\u8be5\u540d\u79f0\u7684\u72ec\u5bb6\u4f7f\u7528\u6743\u3002\u8be5\u673a\u5236\u786e\u4fdd well-known names \u5728\u4efb\u4f55\u65f6\u95f4\u90fd\u80fd\u552f\u4e00\u6307\u4ee3\u4e3b\u7ebf\u4e0a\u7684\u7279\u5b9a\u5730\u5740\u3002  \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a well-known name \u610f\u5473\u7740\u76f8\u5173\u7684\u4e3b\u7ebf\u9644\u4ef6\u5b9e\u73b0\u4e00\u7cfb\u5217\u4e3b\u7ebf\u5bf9\u8c61\u4ee5\u53ca\u4e00\u4e9b\u53ef\u7528\u670d\u52a1\u6982\u5ff5\u7684\u5408\u7ea6\u3002\u7531\u4e8e\u4e3b\u7ebf\u540d\u79f0\u4e3a\u5206\u5e03\u5f0f\u4e3b\u7ebf\n\u63d0\u4f9b\u552f\u4e00\u5730\u5740\uff0c\u6240\u6709\u5728\u4e3b\u7ebf\u4e0a\u7684\u4e3b\u7ebf\u540d\u79f0\u5fc5\u987b\u662f\u72ec\u7279\u552f\u4e00\u3002\u4f8b\u5982\uff0c org.alljoyn.sample.chat \u53ef\u7528\u4f5c\u4e3b\u7ebf\u540d\u79f0\uff0c\u610f\u5473\u7740\u6709\u7740\u76f8\u540c\u540d\u79f0\u7684\u4e3b\u7ebf\n\u9644\u4ef6\u5c06\u53ef\u5b9e\u73b0\u4e00\u4e2a\u804a\u5929\u670d\u52a1\u3002\u6839\u636e\u8be5\u540d\u79f0\u5df2\u88ab\u5360\u7528\u7684\u4e8b\u5b9e\uff0c\u53ef\u4ee5\u63a8\u65ad\u51fa\u5728\u4ee5  /org/alljoyn/sample/chat  \u4e3a\u4e3b\u7ebf\u8def\u5f84\u7684\u4e3b\u7ebf\u5bf9\u8c61\u4e0a\u5df2\u7ecf\u5b9e\u73b0\n\u4e86  /org/alljoyn/sample/chat  \u63a5\u53e3\u3002  \u5728\u5b9e\u73b0\u201c\u804a\u5929\u201d\u529f\u80fd\u65f6\uff0c\u4e00\u65b9\u5f80\u5f80\u671f\u671b\u7740\u5728 AllJoyn \u603b\u7ebf\u4e0a\u80fd\u53d1\u73b0\u53e6\u4e00\u4e2a\u540c\u6837\u652f\u6301\u804a\u5929\u529f\u80fd\u7684\u76f8\u4f3c\u7ec4\u4ef6\u3002\u7531\u4e8e\u4e3b\u7ebf\u540d\u79f0\u5fc5\u987b\u4f5c\u4e3a\u7ec4\u4ef6\u9644\u4ef6\u7684\u552f\n\u4e00\u8bc6\u522b\uff0c\u5728\u8fd9\u91cc\u5c31\u9700\u8981\u4ee5\u52a0\u5165\u540e\u7f00\u7684\u65b9\u5f0f\u786e\u4fdd\u552f\u4e00\u6027\u3002\u540e\u7f00\u53ef\u4ee5\u662f\u7528\u6237\u540d\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u552f\u4e00\u7684\u6570\u5b57\u3002\u5728\u804a\u5929\u670d\u52a1\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u603b\u7ebf\u9644\u4ef6\uff1a  org.alljoyn.sample.chat.bob\n\norg.alljoyn.sample.chat.carol  \u6b64\u5904\u7684 well-known name \u4e2d\uff0c\u524d\u7f00 org.alljoyn.sample.chat. \u7684\u4f5c\u7528\u662f\u5145\u5f53\u670d\u52a1\u540d\uff0c\u53ef\u4ee5\u7531\u5176\u63a8\u65ad\u51fa\u804a\u5929\u670d\u52a1\u63a5\u53e3\u4ee5\u53ca\u5bf9\u8c61\u5b9e\u73b0\u7684\u5b58\u5728\u3002\u540e\u7f00  bob  and  carol  \u4f7f\u4e24\u4e2a\u5b9e\u4f8b\u7684 well-known name \u552f\u4e00\u3002  \u968f\u4e4b\u800c\u6765\u7684\u95ee\u9898\u662f\uff0c\u5904\u4e8e\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e0a\u7684\u670d\u52a1\u5982\u4f55\u88ab\u5b9a\u4f4d\u3002\u7b54\u6848\u662f\u901a\u8fc7\u5ba2\u6237\u7aef\u7684\u670d\u52a1\u5e7f\u64ad\u4ee5\u53ca\u53d1\u73b0\u673a\u5236\u3002  \u5e7f\u64ad\u53ca\u53d1\u73b0  \u5173\u4e8e\u670d\u52a1\u5e7f\u64ad\u4e0e\u53d1\u73b0\u7684\u95ee\u9898\u4e3b\u8981\u6709\u4e24\u65b9\u9762\u3002\u4e4b\u524d\u63d0\u53ca\u5230\uff0c\u5373\u4fbf\u662f\u5bf9\u4e8e\u4f4d\u4e8e AllJoyn \u603b\u7ebf\u672c\u5730\u7247\u6bb5\u7684\u670d\u52a1\uff0c\u7528\u6237\u4ecd\u7136\u9700\u8981\u904d\u5386\u6240\u6709\u7684 well-known names\u6765\u641c\u5bfb\u81ea\u5df1\u6240\u9700\u8981\u7684\u670d\u52a1\u3002\u518d\u8005\uff0c\u5f53\u7528\u6237\u8bd5\u56fe\u53d1\u73b0\u5e76\u4e0d\u4f4d\u4e8e\u73b0\u6709\u7684\u4e3b\u7ebf\u7247\u6bb5\u4e0a\u7684\u670d\u52a1\u65f6\uff0c\u4f1a\u53d1\u751f\u66f4\u6709\u8da3\u7684\u95ee\u9898\u3002  \u8bf7\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff1a\u5f53\u4e00\u65b9\u643a\u5e26\u7740\u8fd0\u884c AllJoyn \u6846\u67b6\u7684\u8bbe\u5907\u63a5\u8fd1\u53e6\u4e00\u65b9\u7684\u90bb\u8fd1\u573a\u65f6\u3002\u7531\u4e8e\u4e24\u8bbe\u5907\u5df2\u88ab\u7269\u7406\u5206\u79bb\u7684\uff0c\u6846\u67b6\u7684\u8bbe\u5907\u63a5\u8fd1\u53e6\u4e00\u65b9\u7684\u90bb \u8fd1\u573a\u65f6\u3002\u7531\u4e8e\u4e24\u8bbe\u5907\u5df2\u88ab\u7269\u7406\u5206\u79bb\u7684\u4e8b\u5b9e\uff0c\u7531\u90fd\u4e0d\u53ef\u80fd\u77e5\u9053\u5bf9\u65b9\u7684\u4efb\u4f55\u4fe1\u606f\u3002\u90a3\u4e48\u8def\u7531\u70b9\u662f\u5982\u4f55\u786e\u5b9a\u5bf9\u65b9\u8bbe\u5907\u7684\u5b58\u5728\uff0c\u5982\u4f55\u5224\u65ad\u662f\u5426\u6709\u5fc5\u8981\u8fdb\u884c\u8fde\u63a5\u5e76\u5efa\u7acb\u903b\u8f91\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u5462\uff1f  \u7b54\u6848\u662f\u901a\u8fc7 AllJoyn \u670d\u52a1\u5e7f\u64ad\u548c\u53d1\u73b0\u8bbe\u5907\u3002\u5f53\u670d\u52a1\u5728\u672c\u5730\u8bbe\u5907\u4e0a\u5f00\u59cb\u65f6\uff0c\u4ed6\u9996\u5148\u5c06\u88ab\u8d4b\u4e88\u7684 well-known name \u53cd\u8f6c\uff0c\u968f\u540e\u5411\u4ed6\u90bb\u8fd1\u57df\u7684\u8bbe\u5907\n\u5e7f\u64ad\u5176\u5b58\u5728\u3002AllJoyn \u6846\u67b6\u63d0\u4f9b\u4e00\u4e2a\u62bd\u8c61\u5c42\uff0c\u4f7f\u670d\u52a1\u53ef\u4ee5\u901a\u8fc7\u5e95\u5c42\u6280\u672f\uff0c\u8bf8\u5982Wi-Fi, Wi-Fi Direct \u6216\u5176\u4ed6\u672a\u6765\u7684\u65e0\u7ebf\u4f20\u8f93\u65b9\u5f0f\u6765\u5b9e\u73b0\u900f\u660e\u5e7f\n\u64ad\u3002  \u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u8054\u7cfb\u4eba\u4ea4\u6362\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5176\u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u5c06 well-known name\uff1a org.alljoyn.sample.contacts.bob  \u53cd\u8f6c\u5e76\u5e7f\u64ad\u3002\u5982\u6b64\n\u505a\u5c06\u89e6\u53d1\u4ee5\u4e0b\u4e00\u79cd\u6216\u591a\u79cd\u4e8b\u4ef6\uff1a\u901a\u8fc7 Wi-Fi \u63a5\u5165\u70b9\u8fdb\u884c UDP \u7ec4\u64ad\uff0c\u901a\u8fc7 Wi-Fi Direct \u8fdb\u884c\u9884\u5173\u8054\u670d\u52a1\u7684\u5e7f\u64ad\uff0c\u6216\u8005\u901a\u8fc7\u84dd\u7259\u670d\u52a1\u53d1\u73b0\u534f\u8bae\n\u53d1\u9001\u6d88\u606f\u3002\u5e7f\u64ad\u7684\u901a\u4fe1\u673a\u5236\u5e76\u4e0d\u9700\u8981\u8003\u8651\u5e7f\u64ad\u8005\u3002\u7531\u4e8e\u8054\u7cfb\u4eba\u4ea4\u6362\u5728\u6982\u5ff5\u4e0a\u662f\u4e00\u4e2a\u70b9\u5bf9\u70b9\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e00\u65b9\u901a\u5e38\u4f1a\u5e0c\u671b\u53e6\u4e00\u65b9\u4e5f\u5e7f\u64ad\u7c7b\u4f3c\u7684\u4ea4\u6362\u670d\u52a1\uff0c\u4f8b\u5982  org.alljoyn.sample.contacts.carol .  \u5e94\u7528\u7a0b\u5e8f\u5ba2\u6237\u7aef\u4e5f\u53ef\u901a\u8fc7\u521d\u59cb\u5316\u4e00\u4e2a\u53d1\u73b0\u64cd\u4f5c\u6765\u58f0\u660e\u4ed6\u4eec\u5bf9\u63a5\u6536\u5e7f\u64ad\u7684\u5174\u8da3\u6240\u5728\u3002\u4f8b\u5982\uff0c\u7528\u6237\u53ef\u4ee5\u8981\u6c42\u6dfb\u52a0\u524d\u7f00\u4e3a org.alljoyn.sample.contacts \u7684\u8054\u7cfb\u4eba\u670d\u52a1\u5b9e\u4f8b\u3002\u82e5\u5982\u6b64\u505a\uff0c\u4e24\u65b9\u8bbe\u5907\u90fd\u4f1a\u53d1\u51fa\u8fd9\u79cd\u8bf7\u6c42\u3002  \u5e95\u5c42 AllJoyn \u7cfb\u7edf\u5728\u79fb\u52a8\u7535\u8bdd\u8fdb\u5165\u5176\u4ed6\u8bbe\u5907\u7684\u90bb\u8fd1\u57df\u65f6\u7acb\u5373\u5f00\u59cb\u901a\u8fc7\u53ef\u7528\u4f20\u8f93\u6e20\u9053\u4f20\u8f93\u5e76\u63a5\u53d7\u5e7f\u64ad\u3002\u6bcf\u53f0\u8bbe\u5907\u5728\u76f8\u5e94\u670d\u52a1\u53ef\u4f7f\u7528\u65f6\u4e5f\u4f1a\u6536\u5230\u63d0\u9192\u3002  \u7531\u4e8e\u670d\u52a1\u63a8\u5e7f\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u4f20\u8f93\u65b9\u5f0f\u63a5\u53d7\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u91cc\u8fd8\u9700\u8981\u9644\u52a0\u7684\u5e95\u5c42\u5de5\u4f5c\u4ee5\u4fbf\u751f\u6210\u5e95\u5c42\u901a\u4fe1\u673a\u5236\uff0c\u5bf9\u5df2\u53d1\u73b0\u670d\u52a1\u7684\u5e94\u7528\u8fd8\u6709\u53e6\u5916\u4e00\u90e8\u5206\u6982\u5ff5\u3002\u8fd9\u5c31\u662f\u901a\u4fe1\u4f1a\u8bdd\u3002  \u4f1a\u8bdd  \u5173\u4e8e\u603b\u7ebf\u540d\u79f0\uff0c\u5bf9\u8c61\u8def\u5f84\u4ee5\u53ca\u63a5\u53e3\u540d\u6210\u7684\u6982\u5ff5\u5df2\u7ecf\u88ab\u8ba8\u8bba\u8fc7\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u5b9e\u4f53\u8fde\u63a5\u5230 AllJoyn \u603b\u7ebf\u540e\u4f1a\u88ab\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u3002\u8fde\u63a5\uff08\u4e3b\u7ebf\n\u9644\u4ef6\uff09\u4e5f\u53ef\u7533\u8bf7\u4e00\u4e2a well-known name. \u6b64 well-known name \u53ef\u88ab\u7528\u6237\u7528\u4e8e\u5b9a\u4f4d\u6216\u53d1\u73b0\u603b\u7ebf\u4e0a\u7684\u670d\u52a1\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u670d\u52a1\u53ef\u4ee5\u8fde\u63a5\u5230 AllJoyn \u603b\u7ebf\u4e0a\u5e76\u88ab\u5206\u914d\u552f\u4e00\u8bc6\u522b\u7b26  :1.1 . \u5982\u679c\u670d\u52a1\u5e0c\u671b\u4ed6\u53ef\u4ee5\u88ab\u5176\u4ed6\u5728\u603b\u7ebf\u4e0a\u7684\u5b9e\u4f53\u627e\u5230\uff0c\u6b64\u670d\u52a1\u5fc5\u987b\u4ece\u603b\u7ebf\u7533\u8bf7\u4e00\u4e2a well-known name\uff0c\u4f8b\u5982 com.companyA.ProductA \uff08\u540e\u9762\u5e38\u4f1a\u52a0\u4e0a\u4e00\u4e2a\u552f\u4e00\u7684\u5b9e\u4f53\u9650\u5b9a\u7b26\uff09\u3002  \u6b64\u8bc6\u522b\u7b26\u81f3\u5c11\u6307\u793a\u4e00\u4e2a\u5b9e\u73b0\u4e86\u4e00\u4e9b well-known interface \u7684\u603b\u7ebf\u5bf9\u8c61\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5728\u8fde\u63a5\u5b9e\u4f8b\u5185\uff0c\u603b\u7ebf\u5bf9\u8c61\u53ef\u4ee5\u88ab\u4e00\u4e2a\u4e0e well-known name \u5305\u542b\u76f8\u540c\u7ec4\u4ef6\uff08\u6b64\u5904\u5e76\u975e\u662f\u5f3a\u5236\u8981\u6c42\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u65b9\u4fbf\uff09\u7684\u8def\u5f84\u8fa8\u8ba4\u51fa\u6765\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5bf9\u5e94\u603b\u7ebf\u8bc6\u522b\u7b26 com.companyA.ProductA \n\u7684\u8def\u5f84\u53ef\u4ee5\u662f /com/companyA/ProductA .  \u4e3a\u4e86\u660e\u767d\u7528\u6237\u603b\u7ebf\u9644\u4ef6\u5230\u76f8\u4f3c\u7684\u670d\u52a1\u9644\u4ef6\u4e4b\u95f4\u7684\u901a\u4fe1\u4f1a\u8bdd\u7684\u5f62\u6210\u673a\u5236\uff0c\u4e5f\u4e3a\u4e86\u63d0\u4f9b\u4e00\u4e2a\u7ec8\u7aef\u5230\u7ec8\u7aef\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 AllJoyn \u673a\u5236\u4e0e\u4e00\u4e2a\n\u7c7b\u4f3c\u7684\u673a\u5236\u505a\u4e00\u4e0b\u6bd4\u5bf9\u3002  \u90ae\u653f\u5730\u5740\u7684\u7c7b\u6bd4  \u5728 AllJoyn \u6846\u67b6\u4e2d\uff0c\u670d\u52a1\u4f1a\u8bf7\u6c42\u4e00\u4e2a\u5bf9\u4eba\u7c7b\u53ef\u8bfb\u7684\u540d\u5b57\uff0c\u4ee5\u4fbf\u4e8e\u5c06\u81ea\u5df1\u4ee5\u4f17\u6240\u5468\u77e5\u7684\uff0c\u7b80\u5355\u6613\u61c2\u7684\u6807\u7b7e\u5e7f\u64ad\u51fa\u53bb\u3002\u4e3a\u4e86\u5e95\u5c42\u7f51\u7edc\u4e2d\u6d88\u606f\u4ea4\u6362\u7684\u6b63\u5e38\u8fd0\u8f6c\uff0cWell-known names \u4e00\u5b9a\u9700\u8981\u88ab\u7ffb\u8bd1\u6210\u552f\u4e00\u7684\u6807\u8bc6\uff0c\u4f8b\u5982\uff1a  Well-known-name:org.alljoyn.sample.chat\n\nUnique name::1.1  \u8fd9\u91cc\u6211\u4eec\u5f97\u77e5\uff0c\u88ab\u4ee5 org.alljoyn.sample.chat \u5e7f\u64ad\u7684 well-known name \u5bf9\u5e94\u7740\u5df2\u88ab\u5206\u914d\u552f\u4e00\u6807\u8bc6  :1.1  \u7684\u603b\u7ebf\u9644\u4ef6\u3002\u8fd9\u79cd\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u6709\n\u7740\u540d\u5b57\u548c\u90ae\u5bc4\u5730\u5740\u7684\u751f\u610f\u3002\u7ee7\u7eed\u7c7b\u6bd4\uff1a\u6b64\u751f\u610f\u5f88\u53ef\u80fd\u4f1a\u5b58\u5728\u4e8e\u540c\u65f6\u6709\u7740\u5176\u4ed6\u751f\u610f\u7684\u5efa\u7b51\u4e2d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u751f\u610f\u7684\u5730\u5740\u53ef\u80fd\u4f1a\u88ab\u4e00\u4e2a\u66f4\u5177\u4f53\u7684\u623f\u95f4\u53f7\u6240\u63cf\u8ff0\u3002\u7531\u4e8e AllJoyn \u603b\u7ebf\u9644\u4ef6\u53ef\u4ee5\u63d0\u4f9b\u4e0d\u6b62\u4e00\u4e2a\u670d\u52a1\uff0c\u8fd9\u91cc\u4e00\u5b9a\u4e5f\u6709\u53ef\u4ee5\u8bc6\u522b\u591a\u4e2a\u5728\u7ed9\u5b9a\u9644\u4ef6\u4e0a\u7684\u76ee\u7684\u5730\u5740\u7684\u65b9\u6cd5\u3002\u201c contact port numbe \u201d\u5c31\u5bf9\u5e94\u7740\u90ae\u5bc4\u5730\u5740\u7c7b\u6bd4\u4e2d\u7684\u623f\u95f4\u53f7\u3002  \u5c31\u50cf\u4eba\u4eec\u5728\u53d1\u9001\u4fe1\u4ef6\u65f6\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u56fd\u5bb6\u90ae\u4ef6\u7cfb\u7edf\uff08\u4f8b\u5982\u7f8e\u56fd\u90ae\u653f\u5c40\uff0c\u6cd5\u56fd\u90ae\u653f\u5c40\uff09\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u79c1\u4eba\u516c\u53f8\uff08\u8054\u90a6\u5feb\u9012\uff0c\u8054\u5408\u5305\u88f9\u670d\u52a1\u516c\u53f8\uff09\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u9009\u62e9\u7d27\u6025\u7a0b\u5ea6\uff08\u6b21\u65e5\u8fbe\uff0c\u4e24\u5de5\u4f5c\u65e5\uff0c\uff09\uff0c\u5728\u4f7f\u7528 AllJoyn \u6846\u67b6\u8054\u7cfb\u670d\u52a1\u65f6\uff0c\u4f7f\u7528\u8005\u5fc5\u987b\u660e\u786e\u63d0\u51fa\u60f3\u83b7\u53d6\u7684\u7f51\u7edc\u8fde\u63a5\u7684\u7279\u6027\uff08\n\u4f8b\u5982\uff0c\u53ef\u9760\u9001\u8fbe\u7684\u6d88\u606f\uff0c\u53ef\u9760\u9001\u8fbe\u5e76\u672a\u7ecf\u6392\u5217\u7684\u6d88\u606f\uff0c\u4e0d\u53ef\u9760\u9001\u8fbe\u5e76\u672a\u7ecf\u6392\u5217\u7684\u6d88\u606f\uff09\u4ee5\u4fbf\u63d0\u4f9b\u8be6\u5c3d\u7684\u914d\u9001\u89c4\u8303\u3002  \u8bf7\u6ce8\u610f\u4ee5\u4e0a\u4f8b\u5b50\u4e2d\u5730\u5740\u4fe1\u606f\u7684\u5206\u9694\u4ee5\u53ca\u4fe1\u606f\u7684\u6295\u9012\u3002\u540c\u7406\u4e8e\u7528\u6237\u53ef\u8003\u8651\u5728\u8bf8\u591a\u5feb\u9012\u65b9\u5f0f\u4e2d\u9009\u62e9\u4e00\u79cd\u5b8c\u6210\u4fe1\u4ef6\u4f20\u9001\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u5728 AllJoyn \u7cfb\u7edf\u4e2d\u9009\u62e9\u4e00\u79cd\u65b9\u5f0f\u5b8c\u6210\u6570\u636e\u4f20\u9001\u3002  AllJoyn \u4f1a\u8bdd  \u4e0e\u4e00\u5c01\u89c4\u8303\u5217\u51fa\u201c\u5bc4\u51fa\u5730\u201d\u548c\u201c\u76ee\u7684\u5730\u201d\u5730\u5740\u7684\u4fe1\u540c\u7406\uff0cAllJoyn \u4f1a\u8bdd\u4e5f\u9700\u8981\u4e0e\u201c\u5bc4\u51fa\u5730\u201d\u548c\u201c\u76ee\u7684\u5730\u201d\u76f8\u7b49\u4ef7\u7684\u4fe1\u606f\u3002\u5728 AllJoyn \u7cfb\u7edf\u4e2d\uff0c\u5bc4\u51fa\u5730\u5730\u5740\u5bf9\u5e94\u7740\u7528\u6237\u7ec4\u4ef6\u7684\u4f4d\u7f6e\uff0c\u76ee\u7684\u5730\u5730\u5740\u5219\u5bf9\u5e94\u670d\u52a1\u7684\u4f4d\u7f6e\u3002  \u4e25\u683c\u5730\u8bf4\uff0c\u8fd9\u4e9b\u5730\u5740\u5728\u7535\u8111\u7f51\u7edc\u4e2d\u5e94\u8be5\u88ab\u6210\u4e3a half-associations. \u5728 AllJoyn \u6846\u67b6\u4e2d\uff0c\u6536\u4ef6\u4eba\uff08\u670d\u52a1\u7aef\uff09\u5730\u5740\u901a\u5e38\u662f\u5982\u4e0b\u5f62\u5f0f\u7684\uff1a  {session options, bus name, session port}  \u7b2c\u4e00\u4e2a\u533a\u57df\u662f\u4f1a\u8bdd\u9009\u9879\uff0c\u51b3\u5b9a\u7740\u6570\u636e\u7684\u4f20\u9001\u65b9\u5f0f\u3002\u5728 IP \u7f51\u7edc\u4e2d\uff0c\u4f1a\u8bdd\u9009\u9879\u53ef\u4ee5\u4f7f TCP \u6216\u8005 UDP. \u5728 AllJoyn \u6846\u67b6\u4e2d\u8fd9\u4e9b\u7ec6\u8282\u4f1a\u88ab\u865a\u62df\u5316\uff0c\n\u5bf9\u5e94\u7684\u9009\u9879\u5219\u4f1a\u53d8\u4e3a\u201c\u57fa\u4e8e\u6d88\u606f\u7684\u201d\uff0c\u201c\u672a\u6392\u5217\u7684\u6570\u636e\u201d\uff0c\u6216\u8005\u201c\u4e0d\u7a33\u5b9a\u7684\u672a\u6392\u5217\u6570\u636e\u201d\u3002\u670d\u52a1\u7684\u76ee\u7684\u5730\u7531\u76f8\u5173\u4e3b\u7ebf\u9644\u4ef6\u6240\u8bf7\u6c42\u7684 well-known name \u7ed9\u51fa\u3002  \u4e0e\u4e4b\u524d\u90ae\u7f16\u5730\u5740\u4f8b\u5b50\u4e2d\u7684\u623f\u95f4\u53f7\u7c7b\u4f3c\uff0cAllJoyn \u6a21\u578b\u4e2d\u4e5f\u6709\u5728\u4e3b\u7ebf\u9644\u4ef6\u201c\u91cc\u9762\u201d\u7684\u4f20\u9001\u70b9\u6982\u5ff5\u3002\u6b64\u6982\u5ff5\u5728 AllJoyn \u6846\u67b6\u4e2d\u88ab\u79f0\u4e3a\u4f1a\u8bdd\u7aef\u53e3\u3002\u623f\n\u95f4\u53f7\u53ea\u6709\u5728\u7ed9\u5b9a\u5efa\u7b51\u5185\u624d\u6709\u610f\u4e49\uff0c\u4f1a\u8bdd\u7aef\u53e3\u53f7\u540c\u7406\uff0c\u5fc5\u987b\u8981\u5728\u7ed9\u5b9a\u7684\u603b\u7ebf\u9644\u4ef6\u8303\u56f4\u5185\u5b9a\u4e49\u3002\u8054\u7cfb\u7aef\u53e3\u7684\u5b58\u5728\u4e0e\u6570\u503c\u88ab\u4e3b\u7ebf\u6807\u8bc6\u6240\u95f4\u63a5\u6307\u51fa\uff0c\u8fd9\u4e0e\u5e95\u5c42\u7684\u5bf9\u8c61\u548c\u63a5\u53e3\u7ec4\u88ab\u95f4\u63a5\u6307\u51fa\u7684\u65b9\u5f0f\u76f8\u540c\u3002  \u5bc4\u4ef6\u4eba\u5730\u5740\u5bf9\u5e94\u5ba2\u6237\u7aef\u4fe1\u606f\uff0c\u4e5f\u662f\u7531\u76f8\u4f3c\u7684\u539f\u7406\u751f\u6210\u3002\u4e3a\u4e86\u548c\u670d\u52a1\u7aef\u6b63\u5e38\u901a\u4fe1\uff0c\u5ba2\u6237\u7aef\u5fc5\u987b\u6709\u81ea\u5df1\u7684 half-association.  {session options, unique name, session ID}  \u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u7533\u8bf7 well-known \u4e3b\u7ebf\u540d\u79f0\uff0c\u6240\u4ee5\u4ed6\u4eec\u53ef\u4ee5\u63d0\u4f9b\u81ea\u5df1\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff08\u4f8b\u5982 :1.1 \uff09\u3002\u7531\u4e8e\u5ba2\u6237\u7aef\u4e0d\u662f\u4f1a\u8bdd\u7684\u7ec8\u70b9\uff0c\u4ed6\u4eec\u4e5f\u4e0d\u9700\u8981\u63d0\u4f9b\u4f1a\u8bdd\u7aef\u53e3\uff0c\u4f46\u662f\u5728\u8fde\u63a5\u5efa\u7acb\u5b8c\u6210\u540e\u4f1a\u88ab\u5206\u914d\u4f1a\u8bdd ID. \u5728\u4f1a\u8bdd\u5efa\u7acb\u6b65\u9aa4\u4e2d\u6b64\u4f1a\u8bdd ID \u4e5f\u4f1a\u88ab\u8fd4\u56de\u5230\u670d\u52a1\u5668\u7aef\u3002\u5bf9\u4e8e\u719f\u6089 TCP \u7f51\u7edc\u7ed3\u6784\u7684\u4eba\n\uff0c\u6b64\u64cd\u4f5c\u4e0e TCP \u4e2d\u5efa\u7acb\u8fde\u63a5\u7684\u64cd\u4f5c\u662f\u5bf9\u7b49\u7684\uff0c\u670d\u52a1\u5668\u7aef\u901a\u8fc7 well-known \u7aef\u53e3\u88ab\u8bbf\u95ee\u3002\u5728\u4f1a\u8bdd\u5efa\u7acb\u540e\uff0c\u5ba2\u6237\u7aef\u7528\u4e00\u4e2a\u4e34\u65f6\u7aef\u53e3\u63cf\u8ff0\u76f8\u4f3c\u7684 half-association.  \u5728\u5efa\u7acb\u4f1a\u8bdd\u65f6\uff0c\u4e24\u65b9\u7684 half-associations \u4f1a\u88ab\u805a\u5408\uff1a  {session options, bus name, session port}   Service\n\n{session options, unique name, session ID}  Client  \u6ce8\u610f\uff0c\u4f1a\u8bdd\u9009\u9879\u4e2d\u6709\u4e24\u4e2a\u9009\u62e9\u3002\u5728\u901a\u4fe1\u5efa\u7acb\u65f6\uff0c\u4f1a\u8bdd\u673a\u5236\u88ab\u770b\u4f5c\u662f\u670d\u52a1\u7aef\u6240\u80fd\u63d0\u4f9b\u7684\u4f1a\u8bdd\u9009\u9879\u4ee5\u53ca\u7531\u5ba2\u6237\u7aef\u6240\u8bf7\u6c42\u7684\u4f1a\u8bdd\u9009\u9879\u3002\u5728\u4f1a\u8bdd\u5efa\u7acb\u8fc7\u7a0b\u4e2d\uff0c\u6709\u4e00\u90e8\u5206\u662f\u7528\u6765\u534f\u5546\u4f55\u79cd\u4f1a\u8bdd\u9009\u9879\u5c06\u4f1a\u6700\u7ec8\u88ab\u91c7\u53d6\u3002\u4e00\u65e6\u4f1a\u8bdd\u5efa\u7acb\u5b8c\u6210\uff0c\u4e24\u65b9\u7684 half-associations \u4f1a\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684 AllJoyn \u901a\u4fe1\u8def\u5f84\uff1a  {session options, bus name, unique name, session ID}  \u5728\u4f1a\u8bdd\u5efa\u7acb\u7a0b\u5e8f\u4e2d\uff0c\u4e24\u4e2a\u6b63\u5728\u901a\u4fe1\u7684\u8def\u7531\u8282\u70b9\u4e4b\u95f4\u4f1a\u5f62\u6210\u4e00\u4e2a\u903b\u8f91\u7f51\u7edc\u8fde\u63a5\u3002\u8fd9\u5c06\u4f1a\u5f62\u6210\u4e00\u4e2a wireless radio topology management operation. \u5982\u679c\u4ee5\u4e0a\u8fde\u63a5\u5df2\u7ecf\u5b58\u5728\uff0c\u4ed6\u5c06\u4f1a\u88ab\u518d\u6b21\u4f7f\u7528\u3002\u65b0\u521b\u5efa\u7684\u5e95\u5c42\u8def\u7531\u5bf9\u8def\u7531\u8fde\u63a5\u88ab\u7528\u6765\u5b8c\u6210\u521d\u59cb\u5b89\u5168\u68c0\u67e5\uff0c\u68c0\u67e5\u5b8c\u6210\u540e\u4e24\u8def\u7531\u5c31\u5df2\u6210\u529f\u5c06\u4e24\u4e2a\u539f\u672c\u5206\u79bb\u7684 AllJoyn \u8f6f\u4ef6\u4e3b\u7ebf\u7247\u6bb5\u805a\u5408\u6210\u4e3a\u4e00\u4e2a\u66f4\u5927\u4e00\u4e9b\u7684\u865a\u62df\u4e3b\u7ebf\u3002  \u7531\u4e8e\u5728\u67d0\u4e9b\u6280\u672f\u4e2d\uff0c\u6709\u5173\u7ec8\u7aef\u5bf9\u7ec8\u7aef\u7684\u5e95\u5c42\u8fde\u63a5\u6d41\u91cf\u63a7\u5236\u4e00\u5b9a\u8981\u7528\u62d3\u6251\u5b66\u8003\u8651\u4f7f\u5176\u5747\u8861\u5316\uff0c\u4e24\u4e2a\u7ec8\u7aef\u5b9e\u9645\u7684\u8fde\u63a5\uff08\u201c\u5bc4\u4ef6\u4eba\u201d\u5ba2\u6237\u7aef\u548c\u201c\u6536\u4ef6\u4eba\u201d\u670d\u52a1\u7aef\uff09\u53ef\u80fd\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u5bfc\u81f4\u53e6\u4e00\u4e2a\u72ec\u7acb\u7684\u901a\u4fe1\u4fe1\u9053\u88ab\u521b\u5efa\u3002  \u5728\u67d0\u4e9b\u60c5\u51b5\u4e2d\uff0c\u7ecf\u8fc7 ad hoc \u62d3\u6251\u7ed3\u6784\u4f20\u9001\u4fe1\u606f\u4f1a\u8f83\u4e3a\u65b9\u4fbf\uff0c\u800c\u5728\u53e6\u5916\u4e00\u4e9b\u60c5\u51b5\u4e0b\u901a\u8fc7\u4e00\u4e2a\u65b0\u8fde\u63a5 \uff08TCP/IP\uff09\u8fdb\u884c\u76f4\u63a5\u4f20\u9001\u6bd4\u8f83\u65b9\u4fbf\u3002\u8fd9\u79cd\n\u60c5\u51b5\u4e0b\u9700\u8981\u5bf9\u5e95\u5c42\u6280\u672f\u6709\u6df1\u5165\u7684\u4e86\u89e3\uff0cAllJoyn \u6846\u67b6\u5f88\u4e50\u610f\u4e3a\u4f60\u5b8c\u6210\u8fd9\u4e00\u70b9\u3002\u7528\u6237\u6240\u8981\u505a\u7684\u4ec5\u4ec5\u662f\u786e\u4fdd\u6d88\u606f\u901a\u8fc7\u67d0\u79cd\u4f20\u9001\u673a\u5236\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u7684 \u62bd\u8c61\u9700\u6c42\u88ab\u6b63\u786e\u7684\u8f6c\u53d1\u3002  \u81ea\u6211\u52a0\u5165\u529f\u80fd  \u5728 AllJoyn R14.06 \u7684\u7248\u672c\u4e4b\u524d\uff0c\u5e94\u7528\u7a0b\u5e8f\u65e0\u6cd5\u53c2\u4e0e\u7531\u81ea\u5df1\u4f5c\u4e3b\u673a\u7684\u4f1a\u8bdd\u3002\u6709\u4e9b\u5e94\u7528\u7a0b\u5e8f\u4f1a\u4f7f\u7528\u81ea\u5df1\u63d0\u4f9b\u7684\u670d\u52a1\u6216\u4fe1\u606f\uff0c\u8fd9\u4f1a\u5e26\u6765\u4e00\u4e9b\u4e0d\u5bf9\u79f0\uff1a\u5bf9\u4e8e\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u81ea\u5df1\u4f5c\u4e3a\u4e3b\u673a\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u5bf9\u5176\u4ed6\u8bbe\u5907\u4f5c\u4e3b\u673a\u7684\u60c5\u51b5\u5fc5\u987b\u533a\u522b\u5bf9\u5f85\u3002\u81ea\u6211\u52a0\u5165\u529f\u80fd\u53ef\u4f7f\u5e94\u7528\u7a0b\u5e8f\u52a0\u5165\u5230\u81ea\u5df1\u4f5c\u4e3b\u673a\u7684\u4f1a\u8bdd\u4e2d\uff0c\u4ece\u800c\u6d88\u9664\u4e86\u8fd9\u4e00\u4e0d\u5bf9\u79f0\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u53ef\u4ee5\u7528\u4ee5\u5904\u7406\u8fdc\u7aef\u4e3b\u673a\u4e3b\u7ebf\u5bf9\u8c61\u7684\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\u4ee5\u672c\u5730\u4e3b\u673a\u7684\u4e3b\u7ebf\u5bf9\u8c61\u3002  \u51b3\u5b9a peer \u7684\u51fa\u73b0 - pinging \u4ee5\u53ca auto-pinging  \u6709\u4e9b\u65f6\u5019\uff0c\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u77e5\u6653\u54ea\u4e9b peer \u6b63\u5728\u4fe1\u9053\uff08\"the wire\"\uff09\u4e0a\u5b58\u5728\u7740\uff0c\u54ea\u4e9b\u6ca1\u6709\u5b58\u5728\u3002\u4e3a\u6b64\uff0c\u572814.06\u7248\u672c\u4e2d\u5f15\u5165\u4e86 PING API. PING API \u53ef\u4ee5\u5224\u65ad peer \u662f\u5426\u5b58\u5728\u3002\u4f46\u662f\u590d\u6d4b\u4f7f\u7528\u6b64 PING API \u7684\u662f\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ed6\u5c06\u4f1a\u9700\u8981\u5468\u671f\u6027\u7684 ping \u5176\u4ed6 peers.\u572814.12\u4ee5\u53ca\u4ee5\u540e\u7684\u7248\u672c\uff0c\u81ea\u52a8 ping \u6216\u8005\u88ab\u79f0\u4e3a Auto-Pinger \u7684\u529f\u80fd\u88ab\u52a0\u5165\u3002Auto-Pinger \u53ef\u4ee5\u5b8c\u6210\u5468\u671f\u6027\u7684 peer \u63a2\u6d4b\uff0c\u4ece\u800c\u89e3\u653e\u4e86\u5e94\u7528\u7a0b\u5e8f\u3002  Bringing it all together  AllJoyn \u6846\u67b6\u81f4\u529b\u4e8e\u63d0\u4f9b\u53ef\u4ee5\u7ba1\u7406\u63a8\u5e7f\u548c\u53d1\u73b0\u670d\u52a1\u7684\u5f00\u53d1\u7684\u8f6f\u4ef6\u603b\u7ebf\uff0c\u63d0\u4f9b\u5b89\u5168\u7684\u73af\u5883\uff0c\u5e76\u5b9e\u73b0\u4e86\u4f4d\u7f6e\u900f\u660e\u7684\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u6a21\u5f0f\u3002\u540c\u65f6\u4e5f\u652f\u6301\u4f20\u7edf\u7684 client/service \u5e03\u7f6e\uff0c\u5e76\u901a\u8fc7\u7ed3\u5408 client \u4ee5\u53ca service \u5c42\u9762\u7684\u4fe1\u606f\u5b9e\u73b0\u70b9\u5bf9\u70b9\u901a\u4fe1\u3002  \u5728 AllJoyn \u4e2d\u6700\u57fa\u672c\u7684\u62bd\u8c61\u5316\u5c31\u662f\u5c06\u4e00\u5207\u8fde\u63a5\u5728\u4e00\u8d77\u7684\u8f6f\u4ef6\u4e3b\u7ebf\u3002\u865a\u62df\u7684\u5206\u5e03\u5f0f\u4e3b\u7ebf\u7531\u5728\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u540e\u53f0\u8fd0\u884c\u7684 AllJoyn \u8def\u7531\u70b9\u5b9e\u73b0\u3002\u7528\u6237\u4ee5\u53ca\u670d\u52a1\uff08\u4ee5\n\u53ca peers\uff09\u901a\u8fc7\u4e3b\u7ebf\u9644\u4ef6\u8fde\u63a5\u5230\u4e3b\u7ebf\u3002\u4e3b\u7ebf\u9644\u4ef6\u5b58\u5728\u4e8e\u7528\u6237\u7aef\u53ca\u670d\u52a1\u7aef\u7684\u672c\u5730\u8fdb\u7a0b\u4e2d\uff0c\u63d0\u4f9b\u8fdb\u7a0b\u95f4\u901a\u4fe1\u529f\u80fd\uff0c\u4ee5\u4fbf\u5b9e\u73b0\u4e0e\u672c\u5730 AllJoyn \u8def\u7531\u901a\u4fe1\u3002  \u5728\u8fde\u63a5\u540e\uff0c\u6bcf\u4e00\u4e2a\u4e3b\u7ebf\u9644\u4ef6\u90fd\u4f1a\u88ab\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u3002\u4e3b\u7ebf\u7b26\u53f7\u53ef\u4ee5\u7533\u8bf7\u4f7f\u7528\u4e00\u4e2a\u552f\u4e00\u7684\u4eba\u7c7b\u53ef\u8bfb\u7684\u4e3b\u7ebf\u540d\uff0c\u4ee5\u4fbf\u5bf9 AllJoyn \u4e16\u754c\u4e2d\u7684\u5176\u4ed6\u8bbe\u5907\u63a8\u9001\u81ea\u5df1\u7684\u670d\u52a1\u3002\u6b64 well-known \u4e3b\u7ebf\u540d\u5b58\u5728\u4e8e\u4e00\u4e2a\u770b\u8d77\u6765\u5f88\u50cf\u5012\u7f6e\u7684\u57df\u540d\uff0c\u5e76\u63d0\u5021 self-management \u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u3002\u6709\u7ed9\u5b9a\u6807\u8bc6\u7684\u4e3b\u7ebf\n\u9644\u4ef6\u6697\u793a\u7740\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5b9e\u73b0\u4e86\u81f3\u5c11\u4e00\u4e2a\u7ed9\u5b9a\u6807\u8bc6\u7684\u63a5\u53e3\u7684\u4e3b\u7ebf\u5bf9\u8c61\u3002\u63a5\u53e3\u540d\u79f0\u4e5f\u7531\u7c7b\u4f3c\u4e3b\u7ebf\u540d\u7684\u547d\u540d\u7a7a\u95f4\u5206\u914d\u51fa\uff0c\u4f46\u6709\u7740\u4e0d\u540c\u7684\u610f\u4e49\u3002\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u751f\u5b58\u5728\u4ee5\u4e3b\u7ebf\u9644\u4ef6\u4e3a\u6839\u8282\u70b9\u7684\u6811\u7ed3\u6784\u4e2d\uff0c\u5e76\u7531\u7c7b\u4f3c Unix \u6587\u4ef6\u8def\u5f84\u7684\u5bf9\u8c61\u8def\u5f84\u63cf\u8ff0\u3002  \u4e0b\u56fe\u662f\u4e00\u4e2a\u5c55\u793a\u7247\u6bb5\u76f8\u5173\u6027\u7684\u5047\u60f3\u6392\u5217\uff1a  The following figure shows a hypothetical arrangement of how\nall of these pieces are related.   Figure:  \u5047\u8bbe\u7684 AllJoyn \u4e3b\u7ebf\u5b9e\u4f8b\u6982\u89c8\u3002  \u5728\u4e2d\u5fc3\u7684\u6df1\u8272\u7ebf\u4ee3\u8868 AllJoyn \u4e3b\u7ebf\u3002\u4e3b\u7ebf\u7684\u201c\u51fa\u53e3\u201d\u662f\u7531 BusAttachment \u5206\u914d\u7684\u552f\u4e00\u6807\u8bc6 :1.1  \u548c  :1.4 . \u5982\u56fe\u6240\u793a\uff0c\u5728\u4ee5 :1.1  \u4e3a\u552f\u4e00\u6807\u8bc6\u7b26\u7684\u5df2\u8bf7\u6c42\n\u81ea\u5df1\u7684\u5730\u5740\u662f  org.alljoyn.samples.chat.a \uff0c\u5e76\u5df2\u88ab\u5206\u914d\u5230\u5bf9\u5e94\u7684 well-known \u4e3b\u7ebf\u540d\u79f0\uff1a org.alljoyn.samples.chat.a \uff0c\u88ab\u52a0\u5728\u540e\u9762\u7684 \"a\" \u662f\u4e3a\u4e86\u786e\n\u4fdd\u4e3b\u7ebf\u540d\u7684\u552f\u4e00\u6027\u3002  \u7531\u4e3b\u7ebf\u540d\u5b9a\u4e49\u6240\u6697\u793a\u7684\u4e1c\u897f\u8fd8\u6709\u5f88\u591a\u3002\u9996\u5148\uff0c\u5728\u4e0d\u7528\u7684\u8def\u5f84\u4e0a\u90fd\u6709\u4e3b\u7ebf\u5bf9\u8c61\u7684\u6811\u7ed3\u6784\u3002\u5728\u8fd9\u4e2a\u5047\u8bbe\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e00\u5171\u6709\u4e24\u4e2a\u4e3b\u7ebf\u5bf9\u8c61\u3002\u7b2c\u4e00\u4e2a\u5728  /org/alljoyn/samples/chat/chat  \u8def\u5f84\u4e0a\uff0c\u63a8\u6d4b\u4e0a\u662f\u7528\u6765\u5b9e\u73b0\u804a\u5929\u529f\u80fd\u7684\u3002\u53e6\u4e00\u4e2a\u5728  /org/alljoyn/samples/chat/contacts  \u8def\u5f84\u4e0a\uff0c\u5e76\u5b9e\u73b0\u4e86\u4ee5  org.alljoyn.samples.chat.contacts  \u547d\u540d\u7684\u63a5\u53e3\u3002\u7531\u4e8e\u7ed9\u5b9a\u7684\u4e3b\u7ebf\u5bf9\u8c61\u5b9e\u73b0\u4e86\u63a5\u53e3\uff0c\u4ed6\u5fc5\u987b\u540c\u65f6\u63d0\u4f9b\u76f8\u5e94\u7684\u4e3b\u7ebf\u65b9\u6cd5\uff0c\u4e3b\u7ebf\u4fe1\u53f7\u4ee5\u53ca\u4e3b\u7ebf\u5c5e\u6027\u7684\u5b9e\u73b0\u3002  42\u4ee3\u8868\u7740\u7528\u6237\u7aef\u7528\u6765\u521d\u59cb\u5316\u901a\u4fe1\u4f1a\u8bdd\u7684\u901a\u4fe1\u4f1a\u8bdd\u7aef\u53e3\u3002\u4f1a\u8bdd\u7aef\u53e3\u4ec5\u4ec5\u5728\u7279\u5b9a\u7684\u4e3b\u7ebf\u9644\u4ef6\u73af\u5883\u4e2d\u624d\u4fdd\u6709\u552f\u4e00\u6027\uff0c\u8fd9\u610f\u5473\u7740\u5728\u5176\u4ed6\u7684\u4e3b\u7ebf\u9644\u4ef6\u4e2d\u4e5f\u53ef\u4ee5\u752842\u4f5c\u4e3a\u4f1a\u8bdd\u7aef\u53e3\u3002  \u5728\u7533\u8bf7\u5e76\u83b7\u6279 well-known \u4e3b\u7ebf\u540d\u4e4b\u540e\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u670d\u52a1\u4f1a\u5c06\u8fd9\u4e2a\u540d\u5b57\u63a8\u5e7f\uff0c\u4ee5\u4fbf\u5176\u4ed6\u7528\u6237\u53d1\u73b0\u8be5\u670d\u52a1\u3002\u4e0b\u56fe\u5c55\u793a\u4e86\u670d\u52a1\u5411\u672c\u5730\u8def\u7531\u53d1\u51fa\u63a8\u5e7f\u7533\u8bf7\u7684\u6d41\u7a0b\u3002\u57fa\u4e8e\u670d\u52a1\u8f93\u5165\u7684\u8def\u7531\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e00\u4e2a network medium-specific mechanism \u6765\u63a8\u5e7f\u670d\u52a1\u5e76\u5f00\u59cb\u3002   Figure:  \u670d\u52a1\u6b63\u5728\u8fdb\u884c\u63a8\u5e7f  \u5f53\u672a\u6765\u7528\u6237\u60f3\u8981\u5b9a\u4f4d\u4e00\u4e2a\u670d\u52a1\u65f6\uff0c\u4ed6\u4f1a\u53d1\u51fa\u4e00\u4e2a\u5bfb\u627e\u540d\u5b57\u7684\u8bf7\u6c42\u3002\u57fa\u4e8e\u7528\u6237\u7aef\u8f93\u5165\u7684\u672c\u5730\u8def\u7531\u8bbe\u5907\u51b3\u5b9a\u4f7f\u7528\u54ea\u79cd\u5e7f\u544a\u4ee5\u53ca\u5e7f\u544a\u63a2\u5934\u3002   Figure:  \u7528\u6237\u5411 Find Name \u53d1\u9001\u8bf7\u6c42\u3002  \u4e00\u65e6\u8bbe\u5907\u8fdb\u5165\u5230\u4e34\u8fd1\u57df\uff0c\u4ed6\u4eec\u5c31\u5f00\u59cb\u76d1\u542c\u5176\u4ed6\u8bbe\u5907\u53d1\u51fa\u7684\u63a8\u5e7f\uff0c\u5e76\u901a\u8fc7\u4efb\u610f\u53ef\u7528\u7684\u5a92\u4f53\u6765\u53d1\u73b0\u8bf7\u6c42\u3002\u4e0b\u56fe\u5c55\u793a\u4e86\u670d\u52a1\u7aef\u4e3b\u673a\u8def\u7531\u76d1\u542c\u53d1\u73b0\u8bf7\u6c42\u5e76\u7ed9\u4e88\u56de\u5e94\u7684\u8fc7\u7a0b\u3002   Figure:  \u8def\u7531\u62a5\u544a Found Name  \u6700\u540e\uff0c\u4e0b\u56fe\u5c55\u793a\u4e86\u7528\u6237\u7aef\u63a5\u6536\u5230\u6307\u793a\u7740\u5728\u6b64\u5730\u533a\u5185\u6709\u4e00\u4e2a\u65b0\u7684\u8def\u7531\u5668\u6b63\u5728\u63d0\u4f9b\u6240\u60f3\u8981\u7684\u670d\u52a1\u7684\u6d88\u606f\u3002   Figure:  \u7528\u6237\u53d1\u73b0\u670d\u52a1  \u7528\u6237\u548c\u670d\u52a1\u4e24\u7aef\u7684\u5f00\u53d1\u573a\u666f\u90fd\u7528\u5230\u5404\u81ea\u4e3b\u7ebf\u9644\u4ef6\u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\u548c\u56de\u53eb\u4fe1\u53f7\uff0c\u4ee5\u4fbf\u53d1\u51fa\u5bf9\u5e7f\u64ad\u53ca\u53d1\u73b0\u8fdb\u7a0b\u8fdb\u884c\u96c6\u7fa4\u7ba1\u7406\u7684\u8bf7\u6c42\u3002\u670d\u52a1\u7aef\u5b9e\u73b0\u4e3b\u7ebf\u5bf9\u8c61\u4ee5\u63d0\u4f9b\u4ed6\u7684\u670d\u52a1\uff0c\u7528\u6237\u7aef\u5219\u671f\u5f85\u7740\u4f7f\u7528\u4ee3\u7406\u5bf9\u8c61\u4ee5\u63d0\u4f9b\u80fd\u548c\u670d\u52a1\u7aef\u901a\u4fe1\u7684\u7b80\u6d01\u6613\u7528\u7684\u63a5\u53e3\u3002\u6b64\u4ee3\u7406\u5bf9\u8c61\u5c06\u4f7f\u7528 AllJoyn ProxyBusObject \u6765\u96c6\u7fa4\u7ba1\u7406\u4e0e\u670d\u52a1\u7aef\u7684\u901a\u4fe1\uff0c\u5e76\n\u63d0\u4f9b\u5bf9\u65b9\u6cd5\u53c2\u6570\u5e8f\u5217\u5316\uff0c\u53cd\u5e8f\u5217\u5316\uff0c\u4ee5\u53ca\u8fd4\u56de\u503c\u7684\u529f\u80fd\u3002  \u5728\u8fdc\u7a0b\u65b9\u6cd5\u53ef\u88ab\u8c03\u7528\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u5efa\u7acb\u4e00\u4e2a\u901a\u4fe1\u4f1a\u8bdd\uff0c\u7528\u6765\u5c06\u5206\u79bb\u7684\u4e3b\u7ebf\u7247\u6bb5\u6c47\u96c6\u8d77\u6765\u3002\u5e7f\u64ad\u548c\u53d1\u73b0\u4e0e\u5efa\u7acb\u4f1a\u8bdd\u662f\u4e0d\u540c\u7684\u3002\u4e00\u65b9\u53ef\u4ee5\u5bf9\u6536\u5230\u7684\u5e7f\u64ad\u4e0d\u505a\u51fa\u56de\u5e94\u3002\u4ec5\u5f53\u7528\u6237\u6536\u5230\u5e7f\u64ad\uff0c\u5e76\u51b3\u5b9a\u52a0\u5165\u4f1a\u8bdd\u7684\u65f6\u5019\uff0c\u4e24\u6761\u4e3b\u7ebf\u624d\u4f1a\u88ab\u903b\u8f91\u5730\u6c47\u96c6\u5230\u4e00\u8d77\u3002\u4e3a\u4e86\u8fd9\u4e2a\u76ee\u6807\uff0c\u670d\u52a1\u7aef\u5fc5\u987b\u521b\u5efa\u901a\u4fe1\u4f1a\u8bdd\u7ec8\u70b9\u5e76\u5e7f\u64ad\u5b83\u7684\u5b58\u5728\uff1b\u5ba2\u6237\u7aef\u5fc5\u987b\u63a5\u6536\u5230\u6b64\u5e7f\u64ad\uff0c\u5e76\u8bf7\u6c42\u52a0\u5165\u8be5\u4f1a\u8bdd\u3002\u670d\u52a1\u7aef\u5728\u53d1\u51fa\u5e7f\u64ad\u4e4b\u524d\u5fc5\u987b\u5b9a\u4e49\u4e00\u4e2a half-association . \u62bd\u8c61\u5730\u8bf4\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a  {reliable IP messages, org.alljoyn.samples.chat.a, 42}  \u53ef\u4ee5\u770b\u51fa\uff0c\u4e0e\u7528\u6237\u7aef\u7684\u5bf9\u8bdd\u662f\u7528\u8fc7\u4e00\u4e2a\u53ef\u9760\u7684\u57fa\u4e8e\u6d88\u606f\u7684\u4f20\u8f93\u7cfb\u7edf\u5b8c\u6210\u7684\uff0c\u5e76\u5df2\u8868\u660e well-known \u4e3b\u7ebf\u540d\uff0c\u5e76\u671f\u671b\u572842\u53f7\u4f1a\u8bdd\u7aef\u53e3\u88ab\u8054\u7edc\u3002\u8fd9\u5c31\u662f\u5728  bus instance figure \u4e2d\u6240\u89c1\u7684\u573a\u666f\u3002  \u5047\u8bbe\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u4e3a  :2.1  \u7684\u4e3b\u7ebf\u9644\u4ef6\u8bd5\u56fe\u4ece\u7269\u7406\u8fdc\u7aef\u7684\u8def\u7531\u70b9\u8fde\u63a5\u3002\u4ed6\u5c06\u4f1a\u5bf9\u7cfb\u7edf\u63d0\u4f9b half association, \u4e00\u4e2a\u65b0\u7684\u4f1a\u8bdd ID \u4f1a\u88ab\u5206\u914d\u5e76\u4f20\u8f93\u5230\u4e24\u65b9\uff1a  {reliable IP messages, org.alljoyn.samples.chat.a, :2.1, 1025}  \u65b0\u751f\u7684\u901a\u4fe1\u4f1a\u8bdd\u5c06\u5b58\u5728\u4e8e\u540d\u4e3a org.alljoyn.samples.chat.a  \uff08\u670d\u52a1\u7aef\uff09\u7684\u4e3b\u7ebf\u9644\u4ef6\u4ee5\u53ca\u540d\u4e3a2.1 \uff08\u7528\u6237\u7aef\uff09\u7684\u4e3b\u7ebf\u9644\u4ef6\u4e4b\u95f4\uff0c\u4f7f\u7528\u7531 IP \u534f\u8bae\u7ec4\u5b9e\u73b0\u7684\u53ef\n\u9760\u7684\u6d88\u606f\u534f\u8bae\u3002\u7528\u4e8e\u63cf\u8ff0\u4f1a\u8bdd\u7684\u4f1a\u8bdd ID \u7531\u7cfb\u7edf\u5206\u914d\uff0c\u5728\u6b64\u4f8b\u5b50\u4e2d\u4e3a1025.  \u5728\u7ec8\u7aef\u5bf9\u7ec8\u7aef\u7684\u901a\u4fe1\u4f1a\u8bdd\u5efa\u7acb\u540e\uff0cAllJoyn \u4f1a\u505a\u51fa\u6240\u6709\u53ef\u884c\u7684\u52a8\u4f5c\u6765\u521b\u5efa\u865a\u62df\u8f6f\u4ef6\u603b\u7ebf\uff0c\u5982 distributed bus \u56fe\u4e2d\u6240\u793a\u3002\u8bf7\u6ce8\u610f\u8fd9\u53ea\u662f\u4e00\u5f20\u865a\u62df\u56fe\uff0c\u8fde\u63a5\u7684\u5efa \u7acb\u65b9\u5f0f\u53ef\u80fd\u662f\u7531 Wi-Fi Direct \u5efa\u7acb\u7684\u70b9\u5bf9\u70b9\u7684 TCP \u8fde\u63a5\uff0c\u6216\u662f\u7531\u65e0\u7ebf\u7f51\u7edc\u63a5\u5165\u70b9\u5efa\u7acb\u7684 UDP \u8fde\u63a5\uff0c \u8fd9\u53d6\u51b3\u4e8e\u4f1a\u8bdd\u6240\u63d0\u4f9b\u7684\u9009\u9879\u3002\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u90fd\u4e0d\u77e5\u6653\n\u8fd9\u5176\u4e2d\u7684\u590d\u6742\u8fc7\u7a0b\u3002  \u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u5982\u679c\u9700\u8981\u8ba4\u8bc1\u73af\u8282\uff0c\u5219\u53ef\u4ee5\u5c1d\u8bd5\u8ba4\u8bc1\u3002\u4e4b\u540e\u7528\u6237\u7aef\u548c\u670d\u52a1\u7aef\u5c31\u53ef\u4ee5\u7528 RMI \u6a21\u578b\u5f00\u59cb\u901a\u4fe1\u4e86\u3002\nAt this point, authentication can be attempted if desired\nand then the client and service begin communicating using the RMI model.  \u8be5\u573a\u666f\u5f53\u7136\u4e0d\u662f\u4ec5\u4ec5\u9650\u4e8e\u4e00\u53f0\u8bbe\u5907\u4e0a\u7684\u4e00\u4e2a\u5ba2\u6237\u7aef\u4ee5\u53ca\u53e6\u4e00\u53f0\u8bbe\u5907\u4e0a\u7684\u4e00\u4e2a\u670d\u52a1\u5668\u7aef\u3002\u800c\u53ef\u4ee5\u662f\u4efb\u610f\u6570\u91cf\u7684\u5ba2\u6237\u7aef\u4ee5\u53ca\u4efb\u610f\u6570\u91cf\u7684\u670d\u52a1\u5668\u7aef\uff08\u9700\u8003\u8651\u8bbe\u5907\u9650\u989d\u53ca\u7f51\u7edc\u5bb9\u91cf\uff09\u7684\u7ed3\u5408\uff0c\u4ee5\u5b8c\u6210\u67d0\u79cd\u5408\u4f5c\u3002\u4e3b\u7ebf\u9644\u4ef6\u53ef\u80fd\u4f1a\u627f\u62c5\u5ba2\u6237\u7aef\u4ee5\u53ca\u670d\u52a1\u5668\u7aef\u53cc\u65b9\u7684\u7279\u8272\uff0c\u4ee5\u4fbf\u5b9e\u73b0\u70b9\u5bf9\u70b9\u670d\u52a1\u3002  AllJoyn \u8def\u7531\u5668\u5c06\u5b8c\u5168\u4e0d\u540c\u7684\u7ec4\u4ef6\u548c\u8def\u7531\u6d88\u606f\u6c47\u96c6\u6210\u4e00\u4e2a\u6613\u5904\u7406\u7684\u903b\u8f91\u5355\u5143\u3002\u4e0d\u4ec5\u5982\u6b64\uff0c\u63a5\u53e3\u63cf\u8ff0\u4ee5\u53ca\u8bed\u8a00\u8054\u7f16\u7684\u81ea\u7136\u7279\u6027\u4e3a\u4e0d\u540c\u8bed\u8a00\u7f16\u5199\u7684\u7ec4\u4ef6\u5e26\u6765\u4e86\u4e92\u7528\u6027\u3002",
            "title": "\u6982\u5ff5\u6027\u6982\u8ff0"
        },
        {
            "location": "/learn/core/standard-core/#_24",
            "text": "\u4ece AllJoyn \u7cfb\u7edf\u7528\u6237\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8be5\u4f53\u7cfb\u4e2d\u6700\u9700\u8981\u900f\u5f7b\u7406\u89e3\u7684\u6982\u5ff5\u5c31\u662f\u5ba2\u6237\uff0c\u670d\u52a1\u4ee5\u53ca peer. \u4ece\u7cfb\u7edf\u7684\u89d2\u5ea6\u770b\uff0c\u8fd9\u4e09\u4e2a\u6982\u5ff5\u5374\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff1b\u53ea\u662f\u5bf9\u7cfb\u7edf\u63d0\n\u4f9b\u7684\u529f\u80fd\u6709\u7740\u4e0d\u540c\u7684\u4f7f\u7528\u65b9\u5f0f\u3002  \u7528\u6237\uff0c\u670d\u52a1\u4ee5\u53ca peers  \u4e0b\u56fe\u4ece\u7528\u6237\uff08\u4e0d\u662f AllJoyn \u8def\u7531\uff09\u7684\u89d2\u5ea6\u63cf\u8ff0\u4e86\u8be5\u6846\u67b6   Figure:  \u5ba2\u6237\uff0c\u670d\u52a1\u548c peer \u7684\u57fa\u672c\u7ed3\u6784  \u6700\u9ad8\u7684\u5c42\u6b21\u5c31\u662f\u8bed\u8a00\u8054\u7f16\u3002AllJoyn \u7cfb\u7edf\u662f\u7531 C++ \u7f16\u5199\u7684\uff0c\u5bf9\u4e8e C++ \u7684\u7528\u6237\u5c31\u4e0d\u9700\u8981\u4efb\u4f55\u8054\u7f16\u3002\u4f46\u5bf9\u4e8e\u7c7b\u4f3c Java \u6216\u8005 JavaScript \u7684\u5176\u4ed6\u8bed\u8a00\u4f7f\u7528\u8005\uff0c \u8fd9\u91cc\u63d0\u4f9b\u4e86\u8f83\u5c0f\u578b\u7684\u8f6c\u6362\u5c42\uff0c\u79f0\u4f5c\u8bed\u8a00\u8054\u7f16\u3002\u5728\u6709\u4e00\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6b64\u7ed1\u5b9a\u4f1a\u88ab\u9002\u5ea6\u5ef6\u4f38\u4ee5\u63d0\u4f9b\u5bf9\u7279\u5b9a\u7cfb\u7edf\u7684\u652f\u6301\u3002\u4f8b\u5982\uff0c\u666e\u901a\u7684 Java \u7ed1\u5b9a\u53ef\u4ee5\u4f7f AllJoyn \u7cfb\u7edf\u8fd0\u884c\u5728\u4e00\u822c\u7c7b\u522b\u7684 Java \u7cfb\u7edf\u4e0a\uff0c\u4f8b\u5982 Windows \u6216 Linux\uff1b\u800c Android \u7cfb\u7edf\u7684\u8054\u7f16\u4e5f\u53ef\u4ee5\u88ab\u63d0\u4f9b\uff0c\u4ed6\u5c06 AllJoyn \u7cfb\u7edf\u96c6\u6210\u5230\u7531 Android \u5b9a\u4e49\u7684\u7ed3\u6784\n\u91cc\uff0c\u4f8b\u5982\u4e00\u4e2a\u5728 Android \u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u91cc\u9762\u7684\u670d\u52a1\u7ec4\u4ef6\u3002  \u8be5\u7cfb\u7edf\u4ee5\u53ca\u8bed\u8a00\u8054\u7f16\u88ab\u5efa\u7acb\u5728\u4e00\u4e2a\u5e26\u6709\u5e2e\u624b\u5bf9\u8c61\u7684\u5c42\u4e2d\uff0c\u8fd9\u4f7f\u5f97\u5728 AllJoyn \u7cfb\u7edf\u4e2d\u8fdb\u884c\u5e38\u89c4\u64cd\u4f5c\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\u4e0d\u540c\u8fd9\u4e9b\u5e2e\u52a9\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u5145\u5206\u4f7f\u7528 AllJoyn \u7cfb\u7edf\uff0c\u4f46\u662f\u6211\u4eec\u9f13\u52b1\u5bf9\u5e2e\u624b\u7684\u4f7f\u7528\uff0c\u56e0\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u4e86\u53e6\u4e00\u4e2a\u5c42\u7ea7\u7684\u865a\u62df\u63a5\u53e3\u3002\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u4e3b\u7ebf\u9644\u4ef6\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u5e2e\u624b\uff0c\u6ca1\u6709\u4ed6\u7cfb\u7edf\u5c06\u65e0\u6cd5\u4f7f\u7528\u3002\u9664\u4e86\u51e0\u9879\u5173\u952e\u529f\u80fd\u5916\uff0c\u603b\u7ebf\u9644\u4ef6\u8fd8\u63d0\u4f9b\u4e00\u7cfb\u5217\u7ba1\u7406\u5e95\u5c42\u8f6f\u4ef6\u603b\u7ebf\u5e76\u4e0e\u5176\u4ea4\u4e92\u7684\u4fbf\u6377\u529f\u80fd\u3002  \u5728\u5e2e\u624b\u5c42\u4e0b\u9762\u7684\u662f\u4fe1\u606f\u548c\u8def\u7531\u5c42\u3002\u8fd9\u662f\u5e8f\u5217\u5316\uff0c\u89e3\u5e8f\u5217\u5316\uff0c\u4ee5\u53ca\u5411\u4fe1\u606f\u4e2d\u8fd4\u56de\u503c\u8fd9\u4e9b\u529f\u80fd\u7684\u5bb6\u3002\u8def\u7531\u5c42\u5b89\u6392\u5c06\u5165\u5883\u7684\u6d88\u606f\u6295\u9012\u5230\u5236\u5b9a\u7684\u603b\u7ebf\u5bf9\u8c61\u548c\u4ee3\u7406\uff0c\u5c06\u5f85\u53d1\u9001\u5230\u5176\u4ed6\u603b\u7ebf\u7684\u6d88\u606f\u53d1\u9001\u5230 AllJoyn \u8def\u7531\u5668\u4ee5\u5f85\u53d1\u9001\u3002  \u4fe1\u606f\u548c\u8def\u7531\u5c42\u4e0e\u4e00\u4e2a\u7ec8\u70b9\u5c42\u901a\u8bdd\u3002\u5728 AllJoyn \u7cfb\u7edf\u8f83\u4f4e\u7684\u5c42\u7ea7\u4e2d\uff0c\u6570\u636e\u4ece\u4e00\u4e2a\u7ec8\u70b9\u6d41\u5411\u53e6\u4e00\u4e2a\u7ec8\u70b9\u3002\u4ece\u7f51\u7edc\u4ee3\u7801\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u865a\u62df\u7684\u901a\u4fe1\u7ec8\u70b9\u3002\u7f51\n\u7edc\u62bd\u8c61\u5316\u5728\u7ec8\u70b9\u5c42\u7684\u9876\u7aef\u5c31\u88ab\u5b8c\u6210\uff0c\u5728\u8fd9\u91cc\u901a\u8fc7\u975e Wi-Fi \u65e0\u7ebf\u8fde\u63a5\uff08\u84dd\u7259\uff09\u6216\u8005\u901a\u8fc7\u6709\u7ebf\u7684\u4ee5\u592a\u7f51\u8fde\u63a5\u6ca1\u6709\u672c\u8d28\u4e0a\u7684\u533a\u522b\u3002  \u7ec8\u70b9\u662f\u5bf9\u4f20\u9001\u7279\u5b9a\u673a\u5236\u7684\u5b9e\u4f53\u5bf9\u8c61\u7684\u4e13\u95e8\u5316\uff0c\u4ed6\u63d0\u4f9b\u7740\u57fa\u672c\u7f51\u7edc\u529f\u80fd\u3002\u5728\u7528\u6237\uff0c\u670d\u52a1\u6216 peer \u7684\u5b9e\u4f8b\u4e2d\uff0c\u7f51\u7edc\u4f20\u8f93\u4ec5\u4ec5\u4f7f\u7528\u672c\u5730\u4f20\u8f93\u3002\u7ec8\u70b9\u662f\u672c\u5730\u8fdb\u7a0b\u95f4\u901a\u4fe1\n\u94fe\u8def\u63a5\u5165\u5230\u672c\u5730 AllJoyn \u603b\u7ebf\u8def\u7531\u3002\u5728\u57fa\u4e8e Linux \u7684\u7cfb\u7edf\u4e2d\uff0c\u7ec8\u70b9\u662f\u4e00\u4e2a Unix \u57df\u7684\u5957\u63a5\u5b57\u8fde\u63a5\u3002\u5728\u57fa\u4e8e Windows \u7684\u7cfb\u7edf\u4e2d\u7ec8\u70b9\u662f\u4e00\u4e2a\u5230\u672c\u5730\u8def\u7531\u7684 TCP \u8fde\u63a5\u3002  AllJoyn \u6846\u67b6\u8fd8\u63d0\u4f9b OS \u62bd\u8c61\u5316\u5c42\u3002\u5728\u8fd9\u91cc\uff0c\u672c\u5730\u7cfb\u7edf\u88ab\u81f3\u4e8e\u6700\u5e95\u5c42\uff0c\u4f59\u4e0b\u7684\u7cfb\u7edf\u53ef\u4ee5\u5728\u8be5\u5c42\u7684\u5e73\u53f0\u4e0a\u5efa\u7acb\u3002  \u8def\u7531  AllJoyn \u7684\u8def\u7531\u662f\u5c06 AllJoyn \u7cfb\u7edf\u9ecf\u5408\u5728\u4e00\u8d77\u7684\u80f6\u6c34\u3002\u4e4b\u524d\u63d0\u53ca\u8fc7\uff0c\u8def\u7531\u5668\u662f\u8fd0\u884c\u5728\u540e\u53f0\u7684\u7a0b\u5e8f\uff0c\u5728\u4ed6\u4eec\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u53d1\u751f\u65f6\u4f5c\u51fa\u56de\u5e94\u3002\u7531\u4e8e\u8fd9\u4e9b\u4e8b\u4ef6\u901a\u5e38\u90fd\u662f\u5916\u90e8\u7684\uff0c\u901a\u8fc7\u81ea\u4e0b\u800c\u4e0a\u7684\u89c6\u89d2\u6765\u89c2\u5bdf\u8def\u7531\u7ed3\u6784\u4f1a\u6bd4\u8f83\u597d\u3002  \u4e0b\u56fe\u6240\u793a\u5373\u4e3a\u8def\u7531\u7684\u6700\u5e95\u5c42\uff0c\u539f\u751f\u7cfb\u7edf\u751f\u957f\u5728\u6b64\u5904\u3002\u548c\u5728\u5ba2\u6237\u7ed3\u6784\u4e2d\u4f7f\u7528\u7684 OS \u865a\u62df\u5c42\u76f8\u540c\uff0c\u6211\u4eec\u7528\u8fd9\u4e2a\u865a\u62df\u5c42\u4e3a\u5728 Linux\uff0cWindows \u4ee5\u53ca Android \u4e0a\u8fd0\u884c \u7684\u8def\u7531\u63d0\u4f9b\u5e38\u89c4\u62bd\u8c61\u5316\u3002\u5728 OS \u62bd\u8c61\u5c42\u4e2d\uff0c\u6211\u4eec\u6709\u5404\u79cd\u5404\u6837\u7684\u5e95\u5c42\u8def\u7531\u7f51\u7edc\u7ec4\u4ef6\u3002\u800c\u5ba2\u6237\u7aef\uff0c\u670d\u52a1\u7aef\u4ee5\u53ca peers \u53ea\u7528\u672c\u5730\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u673a\u5236\u4e0e\u8def\u7531\u5668\u4ea4\u6d41\uff0c\n\u6240\u4ee5\u5728\u7ed9\u5b9a\u5e73\u53f0\u4e0a\uff0c\u548c\u4f17\u591a\u53ef\u7528\u7684\u4f20\u9001\u673a\u5236\u6253\u4ea4\u9053\u7684\u5fc5\u987b\u662f\u8def\u7531\u5668\u3002\u8bf7\u6ce8\u610f\uff0c\"Local\" \u8f6c\u9001\u5728\u8def\u7531\u67b6\u6784\u56fe\u4e2d\u5c31\u662f\u552f\u4e00\u4e00\u4e2a\u4e0e\u8fd0\u884c\u5728\u7279\u5b9a\u4e3b\u673a\u4e0a\u7684 AllJoyn\u7684\u7528 \u6237\uff0c\u670d\u52a1\u4ee5\u53ca peers \u76f8\u8fde\u7684.    Figure:  \u57fa\u7840\u8def\u7531\u67b6\u6784\u56fe  \u4f8b\u5982\uff0c\u84dd\u7259\u4f20\u8f93\u7cfb\u7edf\u4f1a\u5904\u7406\u5728\u84dd\u7259\u7cfb\u7edf\u4e2d\u521b\u5efa\u5e76\u7ba1\u7406 piconets \u7684\u590d\u6742\u5de5\u4f5c\u3002\u5e76\u4e14\uff0c\u84dd\u7259\u4f20\u8f93\u8fd8\u63d0\u4f9b\u9002\u5f53\u7684\u670d\u52a1\u5e7f\u64ad\u53ca\u53d1\u73b0\u529f\u80fd\uff0c\u4ee5\u53ca\u53ef\u9760\u7684\u901a\u4fe1\u529f\u80fd\u3002\u84dd\u7259\n\u4ee5\u53ca\u5176\u4ed6\u4f20\u8f93\u7cfb\u7edf\u5c06\u4f1a\u6cbf\u7740 IP \u4f20\u8f93\u88ab\u6dfb\u52a0\u5728\u8be5\u4f20\u8f93\u5c42\u4e2d\u3002  \u6709\u7ebf\u7684\uff0cWi-Fi \u4ee5\u53ca Wi-Fi Direct \u4f20\u8f93\u4f1a\u5728 IP \u4f1e\u4e0b\u96c6\u5408\uff0c\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u8fd9\u4e9b\u4f20\u8f93\u673a\u5236\u90fd\u5e94\u7528\u4e86\u5e95\u5c42\u7684 TCP-IP \u7f51\u7edc\u5806\u6808\u3002\u6709\u65f6\uff0c\u5b8c\u6210\u670d\u52a1\u5e7f\u64ad\u53ca\u53d1\u73b0\u7684\u65b9\n\u5f0f\u4f1a\u6709\u975e\u5e38\u660e\u663e\u7684\u4e0d\u540c\uff0c\u8fd9\u662f\u56e0\u4e3a\u8be5\u529f\u80fd\u4e0d\u5728 TCP-IP \u6807\u51c6\u7684\u8303\u7574\u4e4b\u5185\uff1b\u4f1a\u6709\u4e13\u95e8\u5904\u7406\u8fd9\u4e9b\u529f\u80fd\u7684\u6a21\u5757\u5b58\u5728\u3002  \u8fd9\u4e00\u4f17\u7279\u5b9a\u6280\u672f\u7684\u4f20\u8f93\u5b9e\u73b0\u65b9\u5f0f\u4f1a\u88ab\u96c6\u5408\u5728\u4e00\u4e2a Network Transports \u7684\u62bd\u8c61\u5316\u4e2d\u3002Sessions \u6a21\u5757\u8d1f\u8d23\u901a\u4fe1\u8fde\u63a5\u7684\u7b80\u5386\u4ee5\u53ca\u7ef4\u62a4\uff0c\u4f7f\u4e00\u4f17\u8def\u7531\u5668\u548c AllJoyn \u5e94\u7528\u7a0b\u5e8f\u5448\u73b0\u4e3a\u4e00\u4e2a\u6574\u5408\u5728\u4e00\u8d77\u7684\u8f6f\u4ef6\u603b\u7ebf\u3002  AllJoyn \u8def\u7531\u4f7f\u7528\u7ec8\u70b9\u6982\u5ff5\u63d0\u4f9b\u5230\u672c\u5730\u5ba2\u6237\u7aef\uff0c\u670d\u52a1\u7aef\uff0c\u4ee5\u53ca peers \u7684\u8fde\u63a5\uff0c\u8fd8\u5c06\u5bf9\u8fd9\u4e9b\u5bf9\u8c61\u7684\u5e94\u7528\u5ef6\u4f38\u5230\u88ab\u8def\u7531\u7528\u4e8e\u4f20\u9001\u4e3b\u673a\u5230\u4e3b\u673a\u6d88\u606f\u7684\u603b\u7ebf\u5bf9\u603b\u7ebf\u7684\u8fde\n\u63a5\u3002  \u9664\u4e86\u8fd9\u4e9b\u8fde\u63a5\u6240\u793a\u7684\u8def\u7531\u529f\u80fd\u5916\uff0c\u4e00\u4e2a AllJoyn \u8def\u7531\u540c\u65f6\u8fd8\u63d0\u4f9b\u4ed6\u81ea\u5df1\u5bf9\u5e94\u603b\u7ebf\u5bf9\u8c61\u7684\u7ec8\u70b9\uff0c\u7528\u6765\u7ba1\u7406\u6216\u63a7\u5236\u5176\u4ed6\u8def\u7531\u5b9e\u73b0\u7684\u8f6f\u4ef6\u603b\u7ebf\u7247\u6bb5\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5f53\u4e00\n\u670d\u52a1\u8bf7\u6c42\u5e7f\u64ad well-known \u603b\u7ebf\u540d\u65f6\uff0c\u662f\u5728\u670d\u52a1\u7aef\u7684\u5e2e\u624b\u5c06\u6b64\u8bf7\u6c42\u89e3\u91ca\u6210\u4e00\u4e2a\u6307\u5411\u4e3b\u7ebf\u88ab\u8def\u7531\u5b9e\u73b0\u7684\u5bf9\u8c61\u7684\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u3002\u5c31\u50cf\u5bf9\u4e8e\u670d\u52a1\u7aef\u4e00\u6837\uff0c\u8def\u7531\u5668\u6709\u8bb8\u591a\u5b58\u5728\u4e8e\u76f8\u5173\u5bf9\u8c61\u8def\u5f84\uff0c\u5b9e\u73b0\u7279\u5b9a\u547d\u540d\u7684\u63a5\u53e3\u7684\u603b\u7ebf\u5bf9\u8c61\u3002\u7528\u4e8e\u63a7\u5236 AllJoyn \u603b\u7ebf\u7684\u5e95\u5c42\u673a\u5236\u6b63\u5728\u5411\u8fd9\u4e9b\u8def\u7531\u603b\u7ebf\u5bf9\u8c61\u53d1\u9001\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u3002  \u5bf9\u8def\u7531\u56fa\u5b9a\u5c42\u9762\u7684\u603b\u64cd\u4f5c\u7531\u4e00\u4e2a\u914d\u7f6e\u5b50\u7cfb\u7edf\u63a7\u5236\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u7cfb\u7edf\u7ba1\u7406\u5458\u53ef\u4ee5\u6307\u5b9a\u5bf9\u7cfb\u7edf\u7684\u7279\u5b9a\u8bb8\u53ef\uff0c\u8fd8\u53ef\u4ee5\u5b89\u6392\u6309\u9700\u521b\u5efa\u670d\u52a1\u3002\u6b64\u5916\uff0c\u8def\u7531\u53ef\u4ee5\u6dfb\u52a0\u9650\u5236\u8d44\u6e90\u6d88\u8017\u7684\u914d\u7f6e\uff0c\u7cfb\u7edf\u7ba1\u7406\u5458\u56e0\u6b64\u53ef\u4ee5\u5bf9\u7cfb\u7edf\u6709\u6240\u638c\u63a7\uff0c\u4f8b\u5982\uff0c\u968f\u65f6\u9650\u5236 TCP \u6d3b\u8dc3\u8fde\u63a5\u7684\u6570\u91cf\u3002\u8fd8\u5b58\u5728\u53ef\u4ee5\u4f7f\u7ba1\u7406\u5458\u51cf\u7f13\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u6240\u5e26\u6765\u7684\u5f71\u54cd\uff0c\u4f8b\u5982\u9650\u5236\n\u6b63\u5728\u8fdb\u884c\u8ba4\u8bc1\u7684\u8fde\u63a5\u7684\u6570\u91cf\u3002",
            "title": "\u9ad8\u7ea7\u7cfb\u7edf\u67b6\u6784"
        },
        {
            "location": "/learn/core/standard-core/#_26",
            "text": "AllJoyn \u6846\u67b6\u662f\u4e00\u4e2a\u81f4\u529b\u4e8e\u4e3a\u5728\u5e26\u6709\u79fb\u52a8\u5143\u7d20\u7684\u5f02\u6784\u7cfb\u7edf\u4e0a\u5f00\u53d1\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u67b6\u6784\u7684\u7efc\u5408\u7cfb\u7edf\u3002  AllJoyn \u6846\u67b6\u63d0\u4f9b\u4e86\u5f3a\u8c03\u80fd\u4e0e\u591a\u79cd\u7f51\u7edc\u7ed3\u6784\u8fdb\u884c\u6709\u7cfb\u7edf\u7684\u4ea4\u6d41\u7684\uff0c\u5efa\u7acb\u4e8e\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u6280\u672f\u53ca\u5b89\u5168\u6807\u51c6\u4e0a\u7684\u89e3\u51b3\u65b9\u6848\u3002\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u53ef\u4e13\u6ce8\u4e8e\u5185\u5bb9\u5f00\u53d1\uff0c\u800c\u4e0d\u9700\u8981\u6709\u5927\u89c4\u6a21\u7684\u5e95\u5c42\u7f51\u7edc\u7ecf\u9a8c\u3002  AllJoyn \u7cfb\u7edf\u662f\u4e00\u4e2a\u534f\u540c\u7684\u6574\u4f53\uff0c\u4e0d\u4f1a\u50cf\u7531\u591a\u4e2a\u90e8\u5206\u5efa\u7acb\u7684 ad-hoc \u7cfb\u7edf\u90a3\u6837\u5fcd\u53d7\u56fa\u6709\u7684\u963b\u6297\u9519\u914d\u7684\u56f0\u6270\u3002\u6211\u4eec\u76f8\u4fe1\uff0c\u76f8\u6bd4\u4e8e\u5728\u5176\u4ed6\u5e73\u53f0\u4e0a\u5f00\u53d1\uff0c\u4f7f\u7528 AllJoyn \u7cfb\u7edf\u53ef\u4ee5\u4f7f\u5bf9\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u548c\u90e8\u7f72\u53d8\u5f97\u66f4\u52a0\u7b80\u5355\u3002",
            "title": "\u603b\u7ed3"
        },
        {
            "location": "/learn/core/thin-core/",
            "text": "AllJoyn\n \u7cbe\u7b80\u5185\u6838\n\n\n\u6982\u89c8\n\n\nAllJoyn \u662f\u4e00\u5957\u5f00\u6e90\u8f6f\u4ef6\u7cfb\u7edf\uff0c\u5b83\u4e3a\u53ef\u4ee5\u5938\u4e0d\u540c\u7c7b\u578b\u8bbe\u5907\u8fd0\u884c\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u63d0\u4f9b\u8fd0\u884c\u5e73\u53f0\uff0c\u5e76\u4e14\u5f3a\u8c03\u79fb\u52a8\u3001\u5b89\u5168\u548c\u52a8\u6001\u53ef\u914d\u7f6e\u7684\u7279\u6027\u3002AllJoyn\u662f\u201c\u5e73\u53f0\u4e0d\u4f9d\u8d56\u201d\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5728\u8bbe\u8ba1\u4e4b\u65f6\u5c31\u5c3d\u91cf\u505a\u5230\u4e0d\u4f9d\u8d56\u4e0e\u7279\u5b9a\u7684\u64cd\u4f5c\u7cfb\u7edf\u3001\u786c\u4ef6\u6216\u786c\u4ef6\u4e0a\u8fd0\u884c\u7684\u8f6f\u4ef6\u3002\n\n\nAllJoyn \u7684\u6807\u51c6\u5185\u6838\u5e93(AJSCL)\u4e2d\u7684\u5404\u5b50\u6a21\u5757\u8bbe\u8ba1\u662f\u8003\u8651\u4e86\u5728 Microsoft Windows\u3001Linux\u3001Android\u3001iOS\u3001OS X\u3001OpenWRT \u4e0b\u4ee5\u53ca\u4f5c\u4e3a\u4e92\u8054\u7f51\u6d4f\u89c8\u5668\u7684\u6574\u5408\u63d2\u4ef6\u7684\u65b9\u5f0f\u4f7f\u7528\u7684\u8981\u6c42\u3002\u8fd9\u4e9b\u8f6f\u4ef6\u7cfb\u7edf\u7684\u4e00\u4e2a\u5171\u6709\u7684\u7279\u6027\u662f\u5b83\u4eec\u90fd\u8fd0\u884c\u4e8e\u901a\u7528\u8ba1\u7b97\u673a\u4e4b\u4e0a\u3002\u901a\u7528\u8ba1\u7b97\u673a\u901a\u5e38\u62e5\u6709\u53ef\u89c2\u6570\u91cf\u7684\u5b58\u50a8\u80fd\u529b\uff0c\u6709\u5145\u8db3\u7684\u7535\u529b\u3001\u8ba1\u7b97\u80fd\u529b\u4ee5\u53ca\u7531\u6b64\u5e26\u6765\u7684\u80fd\u652f\u6301\u591a\u8fdb\u7a0b\u3001\u591a\u7ebf\u7a0b\u548c\u591a\u8bed\u8a00\u73af\u5883\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\n\n\n\u4e0e\u6b64\u4e0d\u540c\uff0c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u8fd0\u884c\u4e8e\u5d4c\u5165\u5728\u4e00\u4e2a\u5927\u578b\u8bbe\u5907\u4e0a\u7684\u5fae\u5904\u7406\u5668\u5f53\u4e2d\u4ee5\u63d0\u4f9b\u7279\u5b9a\u7684\u529f\u80fd\u3002\u7531\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ea\u9700\u8981\u6267\u884c\u7279\u5b9a\u7684\u4efb\u52a1\u6216\u4e00\u4e9b\u6709\u9650\u6570\u91cf\u7684\u529f\u80fd\uff0c\u5de5\u7a0b\u5e08\u53ef\u4ee5\u4f18\u5316\u8fd9\u4e9b\u7cfb\u7edf\u4ee5\u4fbf\u80fd\u5728\u5177\u6709\u66f4\u5c0f\u7684\u5b58\u50a8\u7a7a\u95f4\u3001\u66f4\u6709\u9650\u7684\u5904\u7406\u5668\u901f\u5ea6\u3001\u66f4\u7701\u7535\u3001\u66f4\u5c11\u7684\u5916\u8bbe\u548c\u7528\u6237\u63a5\u53e3\u7b49\u7684\u786c\u4ef6\u5e73\u53f0\u4e0a\u8fd0\u884c\u6765\u51cf\u5c0f\u4ea7\u54c1\u7684\u5c3a\u5bf8\u4e0e\u4ef7\u683c\u3002AllJoyn Thin Core Library\uff08AJTCL\uff09\u5c31\u662f\u4ee5\u5c06 AllJoyn \u5206\u5e03\u5f0f\u7f16\u7a0b\u73af\u5883\u7684\u4f18\u52bf\u5e94\u7528\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e3a\u76ee\u6807\u5e94\u8fd0\u800c\u751f\u7684\u3002\n\n\n\u7531\u4e8e AJTCL \u5c06\u8981\u8fd0\u884c\u7684\u64cd\u4f5c\u73af\u5883\u5c06\u4f1a\u662f\u975e\u5e38\u53d7\u9650\u7684\uff0c\u8fd0\u884c\u4e8e\u6b64\u7c7b\u7cfb\u7edf\u4e0a\u7684 AllJoyn \u7ec4\u5efa\u5fc5\u987b\u9002\u5e94\u5404\u7c7b\u9650\u5236\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u6211\u4eec\u5c06\u4e0d\u5177\u6709 AllJoyn router (\u9700\u8981\u591a\u7ebf\u7a0b)\u6240\u5177\u6709\u7684\u5962\u4f88\u6761\u4ef6\uff0c\u6bd4\u5982\u4e30\u5bcc\u7684\u7f51\u7edc\u8fde\u63a5\u3001\u4f7f\u7528\u76f8\u5bf9\u5927\u7684 RAM \u548c ROM \u7a7a\u95f4\u7b49\u3002\u540c\u65f6\u6211\u4eec\u4e5f\u4e0d\u5177\u5907\u8fd0\u884c\u80fd\u591f\u5305\u542b\u8bfe\u66f4\u6362\u8bed\u8a00\u5173\u8054\u7684\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u73af\u5883\u7684\u6761\u4ef6\u3002\u5728\u8fd9\u6837\u7684\u6761\u4ef6\u4e0b\uff0cAJTCL \u53ea\u8003\u8651\u5355\u72ec\u4f7f\u7528 C \u8bed\u8a00\u6765\u5b9e\u73b0\u603b\u7ebf\u63a5\u5165\u7684\u529f\u80fd\uff08\u53c2\u89c1 Introduction to the AllJoyn Framework\uff09\u3002\u4e0e\u63a5\u53e3\u3001\u65b9\u6cd5\u3001\u4fe1\u53f7\u3001\u5c5e\u6027\u4ee5\u53ca\u603b\u7ebf\u5bf9\u8c61\u6240\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u90fd\u8fdb\u884c\u4e86\u9ad8\u5ea6\u4f18\u5316\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u5f00\u53d1\u8005\u4f7f\u7528\u7684 API \u4e5f\u56e0\u6b64\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\n\n\n\u867d\u7136 API \u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u662f\u6240\u6709\u7684 AJSCL \u4e0b\u7684\u4e3b\u8981\u7684\u6982\u5ff5\u6027\u6a21\u5757\u90fd\u53ef\u4ee5\u5728 AJTCL \u4e2d\u627e\u5230\uff1b\u5b83\u4eec\u66f4\u7c7b\u4f3c\u4e8e\u4ee5\u4e00\u79cd\u66f4\u7d27\u51d1\u7684\u5f62\u5f0f\u4e88\u4ee5\u5c55\u73b0\u6216\u8005\u8bf4\u5b9e\u9645\u4e0a\u662f\u5728\u53e6\u4e00\u4e2a\u8fdc\u7aef\u80fd\u529b\u66f4\u5f3a\u7684\u673a\u5668\u4e0a\u8fd0\u884c\u800c\u5df2\u3002\n\n\n\u6ce8\u610f:\n \u5f53\u6211\u4eec\u63d0\u5230 AllJoyn Standard Library (AJSCL)\u65f6\uff0c\u6211\u4eec\u66f4\u660e\u786e\u7684\u8bf4\u662f\u6307\u5728\u901a\u7528\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u8fd9\u4e9b\u6a21\u5757\u7684\u7248\u672c\u3002\n\n\n\u6982\u5ff5\u6027\u6a21\u578b\n\n\n\u6b63\u5982\u4ee5\u4e0a\u7ae0\u8282\u63d0\u5230\u7684\uff0cAJTCL \u4e2d\u4f7f\u7528\u6700\u9ad8\u5c42\u6b21\u7684\u62bd\u8c61\u6a21\u578b\u4e0e AJSCL \u7cfb\u7edf\u662f\u5b8c\u5168\u5bf9\u5e94\u7684\u3002\u5728 \nIntroduction to the AllJoyn Framework\n \u4e2d\u6709\u4e13\u95e8\u7684\u7ae0\u8282 Conceptual Overview (\u6982\u5ff5\u7efc\u8ff0)\u4e3a\u5927\u5bb6\u63cf\u8ff0\u4e86\u8fd9\u4e00\u62bd\u8c61\u6a21\u578b\u3002\u5728\u6982\u5ff5\u7efc\u8ff0\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u8bfb\u8005\u5df2\u7ecf\u719f\u6089\u4e86\u76f8\u5173\u6587\u6863\u4e2d\u5bf9\u62bd\u8c61\u6a21\u578b\u7684\u4ecb\u7ecd\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u4f1a\u6d89\u53ca\u7406\u89e3 AJTCL \u7ed3\u6784\u6240\u9700\u8981\u7684\u7279\u4f7f\u7684\u90e8\u5206\u3002\n\n\nAllJoyn Thin Core Library \u4ecd\u7136\u662f AllJoyn\n\n\n\u9700\u8981\u7279\u522b\u5f3a\u8c03\u4e0e\u6ce8\u610f\u7684\u662f AJTCL \u662f AllJoyn \u6846\u67b6\u7684\u4e00\u90e8\u5206\u3002Thin Core Library \u5177\u6709\u5b8c\u5168\u7684\u5bf9 AJSCL \u7684\u4e92\u64cd\u4f5c\u6027\u3002\u7531\u4e8e AllJoyn \u7f51\u7edc\u8fde\u63a5\u534f\u8bae\u5728\u4e24\u79cd\u7cfb\u7edf\u4e0b\u90fd\u6709\u5b8c\u6574\u7684\u5b9e\u73b0\uff0cAJSCL \u662f\u5b8c\u5168\u4e0d\u7528\u77e5\u9053\u4e0e\u4e4b\u6c9f\u901a\u7684\u662f\u5426\u662f\u4e00\u4e2a Thin Core Library \u7684\uff0c\u5bf9\u4e8e AJTCL \u4e5f\u662f\u540c\u6837\u3002\n\n\n\u6309\u7167 \nIntroduction to the AllJoyn Framework\n\u7684\u4ecb\u7ecd\uff0cAllJoyn \u5206\u5e03\u5f0f\u603b\u7ebf\u7684\u57fa\u672c\u7ed3\u6784\u53ef\u4ee5\u7531\u6302\u9760\u4e8e\u591a\u4e2a\u72ec\u7acb\u7684\u7269\u7406\u4e3b\u673a\u4e0a\u7684\u603b\u7ebf\u6bb5\u5171\u540c\u7ec4\u6210\u3002\n\n\n\n\n\u56fe:\n AllJoyn \u5206\u5e03\u5f0f\u603b\u7ebf\n\n\n\u6bcf\u4e00\u4e2a\u6302\u9760\u4e8e\u7279\u5b9a\u4e3b\u673a\u7684\u603b\u7ebf\u6bb5\u5728\u56fe\u4e2d\u7528\u6807\u4e3a Host A \u548c Host B \u7684\u865a\u7ebf\u6240\u56f4\u65b9\u6846\u8868\u793a\u3002\u6bcf\u4e00\u4e2a\u603b\u7ebf\u6bb5\u90fd\u7531\u4e00\u4e2a AllJoyn \u8def\u7531\u5668\uff08\u56fe\u4e2d\u6807\u4e3a D \u7684\u5706\u5708\u6240\u793a\uff09\u6765\u5b9e\u73b0\u3002\u6bcf\u4e2a\u4e3b\u673a\u90fd\u53ef\u80fd\u6709\u591a\u4e2a\u8bbe\u5907\u63a5\u5165\uff0c\u8fde\u63a5\u81f3\u672c\u5730\u57df\uff08\u56fe\u4e2d\u516d\u8fb9\u5f62\u6240\u793a\uff09\uff0c\u5c06\u5b83\u4eec\u5206\u4e3a\u670d\u52a1\u7aef\uff08S\uff09\u548c\u5ba2\u6237\u7aef\uff08C\uff09\u3002\n\n\n\u7531\u4e8e\u8fd0\u884c AJTCL \u7684\u8bbe\u5907\u901a\u5e38\u6ca1\u6709\u8d44\u6e90\u8fd0\u884c\u8def\u7531\u7a0b\u5e8f\uff0c\u5728 AllJoyn \u7684\u7ed3\u6784\u4e2d\u8fde\u63a5\u5230\u5206\u5e03\u5f0f\u603b\u7ebf\u4e0a\u7684 Thin Core Library \u501f\u7528\u4e3b\u673a\u4e0a\u8fd0\u884c\u7684\u8def\u7531\u7a0b\u5e8f\u3002\n\n\n\n\n\u56fe:\n AllJoyn \u4e0b\u8fde\u63a5 Thin Core Libraries \u7684\u5206\u5e03\u5f0f\u603b\u7ebf\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u5d4c\u5165\u5f0f\u7cfb\u7edf A \u548c\u5d4c\u5165\u5f0f\u7cfb\u7edf B \u4e0e\u4ed6\u4eec\u6240\u5c5e\u7684\u8fd0\u884c\u7528\u6765\u7ba1\u7406\u5206\u5e03\u5f0f\u603b\u7ebf\u6bb5\u7684\u8def\u7531\u7a0b\u5e8f\u7684\u4e3b\u673a B \u662f\u4e0d\u540c\u7684\u8bbe\u5907\u3002\n\u5982 \nIntroduction to the AllJoyn Framework\n \u6240\u8ff0\uff0c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e0e\u8def\u7531\u8bbe\u5907\u4e4b\u95f4\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u7684\u662f AllJoyn \u7684\u5404\u7c7b\u6d88\u606f\uff0c\u7528\u6765\u5b9e\u73b0\u603b\u7ebf\u65b9\u6cd5\u3001\u603b\u7ebf\u4fe1\u53f7\u4ee5\u53ca\u5c5e\u6027\u7b49\u5728\u5404\u81ea\u4f1a\u8bdd\u5185\u7684\u4ea4\u6362\u3002\n\n\n\u5728\u6709\u4e9b\u5e94\u7528\u4e2d\uff0c\u4f1a\u6709\u8981\u6c42 AJTCL \u8bbe\u5907\u8fde\u63a5\u6216\u501f\u7528\u5df2\u5b58\u5728\u7684\u8fd1\u573a\u8def\u7531\u7684\u9700\u6c42\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u975e\u4fe1\u4efb\u5173\u7cfb\uff08\u4ece\u8def\u7531\u89d2\u5ea6\u6765\u8bf4\uff09\u3002\u540c\u4e8b\u4e5f\u4f1a\u6709\u5141\u8bb8\u7279\u5b9a\u7684 AJTCL \u8bbe\u5907\u8fde\u63a5\u7279\u5b9a\u7684\u8def\u7531\u7684\u9700\u6c42\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u53ef\u4fe1\u4efb\u5173\u7cfb\uff08\u540c\u6837\u4ece\u8def\u7531\u89d2\u5ea6\u6765\u8bf4\uff09\u3002\n\n\n\u8fd9\u4e9b\u5173\u7cfb\u662f\u901a\u8fc7\u4f7f\u7528\u53d1\u73b0\u4e0e\u8fde\u63a5\u6d41\u7a0b\u6765\u5b9e\u73b0\u7684\uff0c\u6982\u5ff5\u4e0a\u8bb2\u8fd9\u4e0e\u670d\u52a1\u7aef\u4e0e\u5ba2\u6237\u7aef\u7684\u53d1\u73b0\u4e0e\u8fde\u63a5\u6d41\u7a0b\u662f\u7c7b\u4f3c\u7684\u3002\u4e00\u4e2a AllJoyn \u8def\u7531\u8bbe\u5907\u4f1a\u4e3b\u52a8\u5411\u4e00\u7ec4 AJTCL \u8bbe\u5907\u53d1\u5e03\u5176\u516c\u5f00\u7684\u547d\u540d\u8868\u793a\u5176\u63a5\u5165\u7684\u80fd\u529b\u3002\u8fd9\u4e00\u5e7f\u544a\u7531\u8def\u7531\u914d\u7f6e\u6216\u662f\u4e00\u4e2a\u7279\u5b9a\u7684 AllJoyn \u5e7f\u544a\u7ec4\u4ef6\u6765\u9a71\u52a8\u3002\u5f53\u5411\u4e00\u4e2a\u8def\u7531\u8bbe\u5907\u53d1\u8d77\u4e00\u6b21\u8fde\u63a5\u8bf7\u6c42\u65f6\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u53d1\u73b0\u4e8b\u4ef6\uff0c\u5bf9\u4e8e\u671f\u671b\u4fe1\u4efb\u5173\u7cfb\u7684\u8def\u7531\u670d\u52a1\uff0c\u53ef\u80fd\u4f1a\u9009\u62e9\u5411\u7279\u5b9a\u7684 Thin Core Library\uff08\u6216\u8005 Thin Core Library \u7684\u6a21\u4eff\u8005\uff09\u63d0\u51fa\u8be2\u95ee\u4ee5\u4ea7\u751f\u4e00\u6b21\u9274\u6743\u3002\u5bf9\u4e8e\u975e\u4fe1\u4efb\u5173\u7cfb\u7684\u60c5\u51b5\uff0c\u8def\u7531\u8bbe\u5907\u6709\u53ef\u80fd\u76f4\u63a5\u9009\u62e9\u5141\u8bb8\u4efb\u4f55\u8fde\u63a5\u8bf7\u6c42\uff0c\u800c\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u76f8\u5173\u7684\u8def\u7531\u670d\u52a1\u4e0d\u4f1a\u5141\u8bb8 Thin Core Library \u8fdb\u884c\u4efb\u4f55\u4f1a\u5f15\u8d77\u4e0e\u975e\u672c\u5730\u8bbe\u5907\u5efa\u7acb\u4f1a\u8bdd\u7684\u64cd\u4f5c\uff08\u5373\u201c\u4ea7\u751f\u8d39\u7528\u7684\u670d\u52a1\u201d\uff09\u3002\n\n\n\u5982\u4e0a\u6240\u8ff0\uff0c\u5bf9\u4e8e AJTL \u8bbe\u5907\u800c\u8a00\u8fde\u63a5\u7684\u8fc7\u7a0b\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff1a\n\n\n\n\n\u53d1\u73b0\u9636\u6bb5\n\n\n\u8fde\u63a5\u9636\u6bb5\n\n\n\u8ba4\u8bc1\u9636\u6bb5\n\n\n\n\n\u53d1\u73b0\u9636\u6bb5\u5de5\u4f5c\u539f\u7406\u4e0e\u5728 \nIntroduction to the AllJoyn Framework\n \u4e2d\u63cf\u8ff0\u7684\u670d\u52a1\u5e7f\u544a\u548c\u53d1\u73b0\u4e00\u6837\uff0c\u4f46\u662f\u4e24\u4e2a\u533a\u522b\u3002\u7b2c\u4e00\u4e2a\u533a\u522b\u662f\u4ee5 AJTCL \u53d1\u73b0\u4e3a\u76ee\u7684\u7684\u5e7f\u544a\u662f\u201c\u5b89\u9759\u201d\u6a21\u5f0f\u7684\uff0c\u7b80\u5355\u8bb2\u4e5f\u5c31\u662f\u8bf4\u8fd9\u7c7b\u5e7f\u544a\u4e0d\u662f\u6709\u8def\u7531\u5668\u65e0\u507f\u53d1\u653e\u7684\u3002\n\n\n\u7b2c\u4e8c\u4e2a\u533a\u522b\u662f\u5bf9\u4e8e\u5b89\u9759\u5e7f\u544a\u7684\u56de\u5e94\u662f\u5b89\u9759\u7684\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5b89\u9759\u56de\u5e94\u3002\u4e5f\u5c31\u662f\u8bf4\u56de\u5e94\u5c06\u4f1a\u88ab\u5355\u72ec\u76f4\u63a5\u53d1\u56de\u7ed9\u8bf7\u6c42\u8005\u800c\u4e0d\u662f\u7c7b\u4f3c\u4e8e\u201c\u4e3b\u52a8\u201d\u5e7f\u544a\u90a3\u6837\u5e7f\u64ad\u51fa\u53bb\u3002\u8fd9\u6837\u7684\u6539\u53d8\u7684\u4e3b\u8981\u539f\u56e0\u662f\u5141\u8bb8\u6ca1\u6709\u5b9e\u73b0\u591a\u64ad\u56de\u5e94\u7684\u5d4c\u5165\u5f0f\u8bbe\u5907\u53c2\u4e0e\u5230 AllJoyn \u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u6765\u3002\n\n\n\u4ec0\u4e48\u662f AllJoyn Thin Core Library \u8bbe\u5907\uff1f\n\n\n\u4e00\u4e2a\u5178\u578b\u7684 AJTCL \u8bbe\u5907\u6982\u5ff5\u4e0a\u6765\u8bb2\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u65e0\u7ebf\u4f20\u611f\u5668\u7f51\u7edc\u4e2d\u7684\u4f20\u611f\u5668\u8282\u70b9\u3002\u4f20\u611f\u5668\u8282\u70b9\u901a\u5e38\u662f\u80fd\u91cf\u3001\u8ba1\u7b97\u80fd\u529b\u3001\u5b58\u50a8\u80fd\u529b\u6216\u5176\u5b83\u8d44\u6e90\u5747\u53d7\u9650\u7684\u5c0f\u5c3a\u5bf8\u4f20\u611f\u5668\u6216\u4f3a\u670d\u5668\u3002\u5b83\u4eec\u80fd\u591f\u611f\u77e5\u5468\u56f4\u7684\u60c5\u51b5\uff0c\u4e0e\u5916\u754c\u6c9f\u901a\u53d1\u751f\u7684\u4e8b\u4ef6\uff0c\u6216\u8005\u6709\u53ef\u80fd\u6839\u636e\u5185\u90e8\u7684\u5904\u7406\u673a\u5236\u6216\u5916\u90e8\u4e8b\u4ef6\u7684\u7ed3\u679c\u91c7\u53d6\u7279\u5b9a\u7684\u884c\u52a8\u3002\u8fd9\u975e\u5e38\u4f9d\u8d56\u4e8e\u8bbe\u5907\u7684\u529f\u80fd\u5b9a\u4e49\uff0c\u80fd\u5f52\u4e3a\u6b64\u7c7b\u5b9a\u4e49\u7684\u8bbe\u5907\u6211\u4eec\u53ef\u4ee5\u4e3e\u4e00\u4e9b\u5176\u4e2d\u5f88\u5c0f\u4e00\u90e8\u5206\u7684\u4f8b\u5b50\uff1a\n\n\n\n\n\u7535\u706f\u5f00\u5173\n\n\n\u6052\u6e29\u5668\n\n\n\u7a7a\u8c03\n\n\n\u6392\u98ce\u6247\n\n\n\u70df\u96fe\u4f20\u611f\u5668\n\n\n\u8fd0\u52a8\u4f20\u611f\u5668\n\n\n\u6e7f\u5ea6\u4f20\u611f\u5668\n\n\n\u9ea6\u514b\u98ce\n\n\n\u6269\u97f3\u5668\n\n\n\u8033\u673a\n\n\n\u95e8\n\n\n\u95e8\u94c3\n\n\n\u5fae\u6ce2\u7089\n\n\n\u51b0\u7bb1\n\n\n\u70e4\u7bb1\n\n\n\n\n\u5173\u4e8e\u4f20\u611f\u5668\u7f51\u7edc\u6709\u7740\u5927\u91cf\u7684\u6587\u732e\u8fdb\u884c\u8ba8\u8bba\u3002\u4e0e WSNs \u4e2d\u4e0d\u592a\u770b\u91cd\u5b89\u5168\u6027\u7684\u5178\u578b\u4f7f\u7528\u7684\u81ea\u7ec4\u7ec7\u3001\u591a\u8df3\u81ea\u7ec4\u7f51\u7684\u65e0\u7ebf\u7f51\u7edc\u4e0d\u540c AllJoyn \u67b6\u6784\u901a\u5e38\u8fd0\u884c\u4e8e\u53c2\u4e0e\u8bbe\u5907\u90fd\u662f\u76f8\u5173\u7684\u4e14\u7ecf\u8fc7\u8ba4\u8bc1\u7684 Wi-Fi \u57fa\u7840\u6a21\u5f0f\u7684\u7f51\u7edc\u4e4b\u4e0a\u3002\u4e3a\u4e86\u5b8c\u6210\u5bf9 Wi-Fi \u7f51\u7edc\u7684\u5b89\u5168\u8ba4\u8bc1\uff0cAJTCL \u4f7f\u7528\u4e86\u79f0\u4e3a\u201conboarding\uff08\u767b\u5f55\uff09\u201d\u7684\u6d41\u7a0b\u3002\u767b\u5f55\u670d\u52a1\u67b6\u6784\u4f7f\u901a\u5e38\u4e0d\u5177\u6709\u53cb\u597d\u7528\u6237\u754c\u9762\u7684 Thin Core Library \u8bbe\u5907\u80fd\u591f\u83b7\u5f97\u8db3\u591f\u7684\u76ee\u6807\u7f51\u7edc\u7684\u4fe1\u606f\u6765\u5b8c\u6210\u52a0\u5165\u8be5\u7f51\u7edc\u6240\u9700\u7684\u8bb8\u53ef\u4e0e\u9274\u6743\u7684\u8fc7\u7a0b\u3002\u767b\u5f55\u670d\u52a1\u7684\u67b6\u6784\u5728\u4e13\u95e8\u7684\u7ae0\u8282\u4e2d\u6709\u8be6\u5c3d\u7684\u63cf\u8ff0\u3002\n\n\n\u4f5c\u4e3a\u4f20\u611f\u5668\u8282\u70b9\u5728 AllJoyn \u7684\u573a\u666f\u4e2d AJTCL \u8bbe\u5907\u901a\u5e38\u5b9e\u73b0\u4e00\u9879\u670d\u52a1\u3002\u5b83\u4f7f\u7528\u6240\u4f9d\u8d56\u7684\u786c\u4ef6\u611f\u77e5\u5468\u56f4\u7684\u60c5\u51b5\u5e76\u4e14\u5c06\u4e8b\u4ef6\u4ee5 AllJoyn \u4fe1\u53f7\u7684\u65b9\u5f0f\u53d1\u9001\u7ed9\u5916\u754c\uff0c\u5e76\u6839\u636e\u7531\u5176\u4ed6\u8bbe\u5907\u53d1\u9001\u7684\u4e8b\u4ef6\u6216\u54cd\u5e94 AllJoyn \u5ba2\u6237\u7aef\u7684\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u89e6\u53d1\u4e00\u6b21\u52a8\u4f5c\uff0c\u5982 \nIntroduction to the AllJoyn Framework\n \u4e2d\u6240\u63cf\u8ff0\u7684\u90a3\u6837\u3002\n\n\nThin Core Library \u7ed3\u6784\n\n\n\u7531\u4e8e AllJoyn Thin Core Library (AJTCL) \u5fc5\u987b\u8fd0\u884c\u4e8e\u80fd\u6e90\u3001\u5904\u7406\u80fd\u529b\u53ca\u5185\u5b58\u5747\u53d7\u9650\u7684\u8bbe\u5907\u4e0a\uff0c\u6ca1\u6709\u8db3\u591f\u7684\u8d44\u6e90\u4f7f\u7528\u4e0e\u901a\u7528\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e0a\u8fd0\u884c\u7684 AllJoyn \u6807\u51c6\u5185\u6838\u5e93 (AJSCL) \u7c7b\u4f3c\u7684\u7ed3\u6784\u3002\n\n\n\u5c42\u6b21\u5316\u7684 AJSCL \u6216\u670d\u52a1\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n\n\n\n\u56fe:\n AJSCL \u5c42\n\n\n\u66f4\u8be6\u7ec6\u7684\u5404\u5c42\u7684\u8ba8\u8bba\u53ef\u4ee5\u53c2\u8003 \nIntroduction to the AllJoyn Framework\n \u3002\n\n\n\u5728\u6b64\u9700\u8981\u6ce8\u610f\u7684\u975e\u5e38\u91cd\u8981\u7684\u4e00\u70b9\u662f\u6bcf\u4e00\u4e2a AllJoyn \u5206\u5c42\u4e2d\u7684\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u7aef\u90fd\u5bf9\u5e94\u4e8e\u4e00\u4e2a AllJoyn \u6d41\u7a0b\u4e0a\u7684\u5e94\u7528\u3002\n\n\n\u6bcf\u4e00\u4e2a\u5177\u6709 AJSCL \u4e3b\u673a\u90fd\u5177\u6709\u81f3\u5c11\u4e00\u4e2a AllJoyn \u8def\u7531\u670d\u52a1\u3002\u8fd9\u4e00\u670d\u52a1\u5728\u72ec\u7acb\u8def\u7531\u7684\u60c5\u51b5\u4e0b\u53ea\u6709\u81ea\u5df1\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5728\u96c6\u6210\u8def\u7531\u7684\u5e94\u7528\u60c5\u51b5\u4e0b\u4e5f\u53ef\u80fd\u548c\u5e94\u7528\u7a0b\u5e8f\u8054\u5408\u90e8\u7f72\u3002\u5206\u5c42\u6b21\u7684 AJSCL \u8def\u7531\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n\n\n\n\u56fe:\n  AJSCL \u8def\u7531\u5c42\u6b21\u7ed3\u6784\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u8def\u7531\u529f\u80fd\u8fd8\u63d0\u4f9b\u5728\u8def\u7531\u5668\u4e4b\u95f4\u8f6c\u53d1\u6d88\u606f\u7684\u989d\u5916\u652f\u6301\uff0c\u5e76\u5177\u6709\u4f7f\u7528\u591a\u7f51\u7edc\u4f20\u8f93\u673a\u5236\u5982 Wi-Fi \u76f4\u8fde\u7684\u80fd\u529b\u3002\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\u6240\u9700\u7684\u8ba1\u7b97\u80fd\u529b\u3001\u80fd\u8017\u548c\u5b58\u50a8\u4ee3\u4ef7\u5c06\u662f\u975e\u5e38\u53ef\u89c2\u7684\u3002\n\n\n\u663e\u7136\u5982\u6b64\u5927\u91cf\u7684\u4ee3\u7801\u662f\u65e0\u6cd5\u5728\u53d7\u9650\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e0a\u8fd0\u884c\u7684\uff0c\u56e0\u6b64 AJTCL \u7cbe\u7b80\u4e86\u5927\u91cf\u7684\u4ee3\u7801\u53ea\u4fdd\u7559\u4e86\u5fc5\u987b\u5b58\u5728\u7684\u90e8\u5206\u4ee5\u4f7f\u5176\u80fd\u8fd0\u884c\u4e8e\u6240\u9700\u7684\u8bbe\u5907\u4e4b\u4e0a\u3002\u4e3a\u6b64\u57fa\u672c\u7684\u8fd0\u884c\u73af\u5883\u4ec5\u9650\u4e8e\u6700\u5c0f\u5316\u7684\u5b9e\u65f6C\u8bed\u8a00\u73af\u5883\uff0c\u5e76\u501f\u7528\u5176\u4ed6\u8bbe\u5907\u6765\u5b8c\u6210\u8def\u7531\u7684\u89d2\u8272\u3002\u4e0e AJSCL \u4e0d\u540c\uff0cAJTCL \u53bb\u9664\u4e86 AJSL \u7cfb\u7edf\u4e2d\u5f88\u591a\u4e0a\u5c42\u8868\u8ff0\u6027\u90e8\u5206\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n\n\n\nFigure:\n AJTCL \u5c42\u6b21\u7ed3\u6784\n\n\nAJTCL\u53ea\u5411\u603b\u7ebf\u63a5\u5165\u7a0b\u5e8f\u5f00\u653e\u4e86\u5c3d\u53ef\u80fd\u5c11\u7684\u6240\u9700\u7684 API\uff0c\u5e76\u76f4\u63a5\u5f00\u653e\u4e86\u6d88\u606f\u63a5\u53e3\u800c\u975e\u5e2e\u52a9\u51fd\u6570\u3002\n\n\n\u6d88\u606f\u5c42\u6ca1\u6709\u4f7f\u7528\u62bd\u8c61\u4f20\u8f93\u673a\u5236\u800c\u662f\u76f4\u63a5\u4f7f\u7528\u4e86 UDP \u548c TCP\u3002\u4e00\u4e2a\u975e\u5e38\u7b80\u6613\u7684\u63a5\u53e3\u5c42\u7528\u6765\u63d0\u53d6\u4e2a\u522b\u6240\u9700\u7684\u539f\u751f\u7cfb\u7edf\u51fd\u6570\uff0c\u6574\u4e2a\u5305\u90fd\u662f\u4f7f\u7528C\u8bed\u8a00\u7f16\u5199\u7684\u4ee5\u4fdd\u8bc1\u6700\u5c0f\u7684\u4ee3\u7801\u5c3a\u5bf8\u3002\u7531\u4e8e\u4f18\u5316\u7684\u7ed3\u679c\uff0cAJTCL \u7cfb\u7edf\u53ef\u4ee5\u5728\u4ec5\u6709 20Kbybtes \u5b58\u50a8\u7a7a\u95f4\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u800c\u4e00\u4e2a\u8def\u7531\u670d\u52a1\u52a0\u4e0a C++ \u7684\u5ba2\u6237\u6216\u670d\u52a1\u7aef\u7684\u96c6\u5408\u5c06\u4f1a\u9700\u898110\u500d\u7684\u5b58\u50a8\u7a7a\u95f4\uff0cJava \u8bed\u8a00\u7684\u7248\u672c\u6240\u9700\u7a7a\u95f4\u751a\u81f3\u8fbe\u5230\u4e86 40 \u500d\u3002\n\n\n\u7cfb\u7edf\u96c6\u6210\n\n\n\u4e3a\u4e86\u4f7f\u8fd9\u91cc\u7684\u8ba8\u8bba\u66f4\u76f4\u89c2\u5177\u4f53\uff0c\u6211\u4eec\u8fd9\u91cc\u4e3e\u4e24\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4f8b\u5b50\uff1a\n\n\n\n\n\u4e00\u4e2a\u8fd0\u884c\u5355\u4e2a AllJoyn \u5e94\u7528\u7684\u667a\u80fd\u624b\u673a\u4e0a\u7684\u6700\u5c0f\u7cfb\u7edf\u4e0e\u4e00\u4e2a AJTCL \u8bbe\u5907\u4e92\u901a\u3002\u8fd9\u4e2a\u4f8b\u5b50\u7528\u6765\u8bf4\u660e\u4e0a\u6587\u4e2d\u63cf\u8ff0\u7684\u4fe1\u4efb\u5173\u7cfb\u3002\n\n\n\u4e00\u4e2a\u65e0\u7ebf\u8def\u7531\u5668\u4e0a\u8fd0\u884c\u8def\u7531\u670d\u52a1\u7684\u76f8\u5bf9\u590d\u6742\u7684\u7cfb\u7edf\u3002\n\n\n\n\n\u6ce8\u610f:\n \u901a\u5e38\u6765\u8bb2\u5b9e\u9645\u60c5\u51b5\u662f\u4e00\u4e2a\u8fd0\u884c OpenWRT \u7684\u8def\u7531\u5668\u4e0a\u6709\u4e00\u4e2a\u9884\u88c5\u7684 AllJoyn \u8def\u7531\u670d\u52a1\u3002\u8fd9\u4e00\u8def\u7531\u63a5\u53d7\u6765\u81ea\u4e8e\u5df2\u7ecf\u767b\u5f55\u5230 Wi-Fi \u7f51\u8def\u7684 Thin Core Library \u7684\u975e\u4fe1\u4efb\u8fde\u63a5\u3002\n\n\n\u4e00\u4e9bAJTCL\u8bbe\u5907\u8fde\u63a5\u5230\u8def\u7531\u5668\u4f5c\u4e3a\u57fa\u4e8e AllJoyn \u7684\u65e0\u7ebf\u4f20\u611f\u5668\u7f51\u7edc\u7684\u4f20\u611f\u5668\u8282\u70b9\uff0c\u7531\u4e00\u53f0\u901a\u7528\u8ba1\u7b97\u673a\u6267\u884c\u6570\u636e\u878d\u5408\u529f\u80fd\u3002\n\n\n\u6ce8\u610f:\n \u5728\u65e0\u7ebf\u4f20\u611f\u5668\u7f51\u7edc\u4e2d\uff0c\u6570\u636e\u878d\u5408\u4e13\u6307\u4e00\u4e9b\u4e0d\u540c\u7684\u8282\u70b9\u4ece\u4e00\u5b9a\u6570\u91cf\u7684\u4f20\u611f\u5668\u8282\u70b9\u4e0a\u6536\u96c6\u7ed3\u679c\u5e76\u8fdb\u884c\u96c6\u6210\u6216\u201c\u878d\u5408\u201d\uff0c\u7136\u540e\u4f9d\u636e\u8fd9\u4e9b\u4f20\u611f\u5668\u8282\u70b9\u4e0a\u5f97\u5230\u7684\u6570\u636e\u4ea7\u751f\u76f8\u5e94\u7684\u7ed3\u679c\u6216\u9700\u8981\u6267\u884c\u7684\u52a8\u4f5c\u3002\n\n\n\u4e00\u4e2a\u6700\u5c0f\u5316\u7684 Thin Core Library \u7cfb\u7edf\n\n\n\u4e00\u4e2a\u4f7f\u7528 AJTCL \u7684\u6700\u5c0f\u5316\u7cfb\u7edf\u7684\u4f8b\u5b50\u5305\u62ec\u4e00\u4e2a\u8fd0\u884c AJSCL \u7684\u5355\u4e3b\u673a\u548c\u4e00\u4e2a Thin Core Library \u8bbe\u5907\u3002AJSCL \u63d0\u4f9b\u4e86 Thin Core Library \u8fde\u63a5\u7684 AllJoyn \u8def\u7531\u5668\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e00\u4e2a\u8fd0\u884c\u4f7f\u7528 Thin Core Library \u7684\u5e94\u7528\u7684\u5e73\u53f0\u3002\u5982\u4e0a\u9762\u6240\u8ff0\uff0cThin Core Library \u901a\u5e38\u4f5c\u4e3a\u4e00\u79cd\u4f20\u611f\u5668\u8282\u70b9\u4f7f\u7528\uff0c\u5411\u4e3b\u673a\u4e0a\u8fd0\u884c\u7684\u5e94\u7528\u53d1\u9001\u6570\u636e\u3002\u5e94\u7528\u7a0b\u5e8f\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5904\u7406\u8fd9\u4e9b\u6570\u636e\u5e76\u5411\u4f20\u611f\u5668\u53d1\u9001\u547d\u4ee4\u4ee5\u66f4\u6539\u5176\u73af\u5883\u53c2\u6570\u3002\n\u4e00\u4e2a\u7b80\u5355\u800c\u5408\u7406\u7684\u7cfb\u7edf\uff0c\u4f8b\u5982\u5899\u4e0a\u6709\u4e00\u4e2a\u63a7\u5236\u9505\u7089\u7684\u6052\u6e29\u5668\uff0cAndroid \u8bbe\u5907\u4e0a\u6709\u4e00\u4e2a\u7528\u4e8e\u63a7\u5236\u7684\u5e94\u7528\u7a0b\u5e8f\u3002AJSCL \u4f1a\u8fd0\u884c\u5728 Android \u8bbe\u5907\u4e0a\u800c\u5899\u4e0a\u7684\u6052\u6e29\u5668\u5185\u8fd0\u884c AJTCL\u3002\n\n\n\n\n\u56fe:\n \u6700\u5c0f\u7cfb\u7edf\u4f8b\u5b50\n\n\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\uff0c\u4e00\u4e2a\u9700\u6c42\u662f\u5899\u4e0a\u7684\u6052\u6e29\u5668\u53ea\u80fd\u88ab Android \u8bbe\u5907\u4e0a\u5bf9\u5e94\u7684\u6052\u6e29\u63a7\u5236\u7a0b\u5e8f\u63a7\u5236\u3002\n\u7531\u4e8e\u4f8b\u5b50\u4e2d\u6052\u6e29\u5668\u53ea\u80fd\u88ab Android \u8bbe\u5907\u4e0a\u5bf9\u5e94\u7684\u6052\u6e29\u63a7\u5236\u7a0b\u5e8f\u63a7\u5236\uff0c\u6240\u4ee5\u6052\u6e29\u5668\u5f88\u53ef\u80fd\u8981\u6c42\u4e0e Android \u4e0a\u7684\u5e94\u7528\u6240\u4f7f\u7528\u7684\u8def\u7531\u5668\u5efa\u7acb\u8fde\u63a5\u3002\u8fd9\u610f\u5473\u7740 Android \u5e94\u7528\u5e94\u8be5\u4e0e AllJoyn \u8def\u7531\u5668\u7ed1\u5b9a\u5e76\u4e14\u53ea\u6709\u8fd9\u4e00\u7279\u5b9a\u7684\u7ed1\u5b9a\u7684\u8def\u7531\u5668/\u5e94\u7528\u5bf9\u624d\u80fd\u4ee5\u8def\u7531\u5668\u7684\u80fd\u529b\u544a\u77e5 Thin Core Library \u6765\u4f7f\u7528\u3002\u8fd9\u7c7b\u5e94\u7528\u5bfc\u81f4 AJTCL \u548c\u8def\u7531\u5668/\u5e94\u7528\u5bf9\u4e4b\u95f4\u7684\u53ef\u4fe1\u4efb\u5173\u7cfb\u3002\n\u4e4b\u540e\u5e94\u7528\u4f1a\u8bf7\u6c42\u7ed1\u5b9a\u7684\u8def\u7531\u5668\u4ee5\u5b89\u9759\u6a21\u5f0f\u516c\u793a\u4e00\u4e2a AJTCL \u53ef\u89c1\u7684\u516c\u5f00\u540d\uff08\u4f8b\u5982com.company.BusNode\uff09\n\n\n\n\n\u56fe:\n Thin Core Library \u8def\u7531\u5668\u53d1\u73b0\n\n\n\u5f53\u8def\u7531\u5668\u6536\u5230\u4e86\u4e00\u4e2a\u5bf9\u5b83\u4ee5\u5b89\u9759\u6a21\u5f0f\u5e7f\u64ad\u7684\u516c\u5f00\u540d\u7684\u51c6\u786e\u7684\u8be2\u95ee\u65f6\uff0c\u5b83\u4f1a\u56de\u5e94\u4e00\u4e2a\u6807\u793a\u8868\u660e\u9700\u8981\u7684\u516c\u5f00\u540d\u786e\u5b9e\u8fde\u63a5\u5230\u4e86\u8fd9\u4e00\u7279\u5b9a\u7684\u8def\u7531\u5668\u4e0a\u3002\u4e4b\u540e AJTCL \u4f1a\u8bd5\u56fe\u8fde\u63a5\u5230\u6709\u56de\u5e94\u7684\u8def\u7531\u5668\u4e0a\u3002\n\n\n\n\n\u56fe:\n Thin Core Library \u8fde\u63a5\u5c1d\u8bd5\n\n\n\u81f3\u6b64\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 AllJoyn \u603b\u7ebf\u5df2\u7ecf\u5f62\u6210\u4e86\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e0e Thin Core Library \u670d\u52a1\u90fd\u8fde\u63a5\u5230\u4e86\u7ed1\u5b9a\u7684 Android \u8bbe\u5907\u4e0a\u7684\u8def\u7531\u5668\u4e0a\u3002\u4f7f\u7528 \nIntroduction to the AllJoyn Framework\n \u4e2d\u7684\u5706\u5708\u56fe\u6765\u8868\u8ff0\u8fd9\u4e00\u7cfb\u7edf\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u6837\u7684\u8fde\u63a5\u4e0e\u8def\u7531\u5668\u5df2\u4e0e\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u5efa\u7acb\u4e86\u8fde\u63a5\u7684\u6548\u679c\u4e00\u81f4\u3002\n\n\n\n\nFigure:\n Thin Core Library \u7cfb\u7edf\u4e3e\u4f8b\n\n\n\u6b64\u65f6 AJTCL \u5df2\u7ecf\u548c\u4e0e\u5e94\u7528\u7ed1\u5b9a\u4e86\u7684\u8def\u7531\u5668\u5efa\u7acb\u4e86\u8fde\u63a5\uff0c\u4f46\u662f\u5e94\u7528\u548c AJTCL \u90fd\u4e0d\u77e5\u9053\u5f7c\u6b64\u7684\u5b58\u5728\u3002\u901a\u5e38\u6b64\u65f6 AllJoyn \u573a\u666f\u4e2d AJTCL \u4f1a\u8bf7\u6c42\u4e00\u4e2a\u516c\u5f00\u7684\u603b\u7ebf\u540d\u5e76\u4e14\u5b9e\u4f8b\u5316\u4e00\u4e2a\u670d\u52a1\u3002\u5982 \nIntroduction to the AllJoyn Framework\n \u6240\u63cf\u8ff0\u7684 Thin Core Library \u4f1a\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd\u63a5\u53e3\u5e76\u4e14\u4f7f\u7528 Thin Core Library APIs \u5e7f\u64ad\u4e00\u4e2a\u516c\u5f00\u540d\u3002\u8fd9\u4e00\u516c\u5f00\u540d\u901a\u5e38\u4e0e\u7ed1\u5b9a\u7684\u8def\u7531\u5668\u5e7f\u544a\u7684\u516c\u5f00\u540d\u4e0d\u540c\uff1b\u5b83\u5bf9\u5e94\u4e8e Thin CoreLibrary \u4e0e\u5e94\u7528\u7a0b\u5e8f\u95f4\u7684\u5ba2\u6237\u7aef/\u670d\u52a1\u7aef\u7684\u5173\u7cfb\u800c\u4e0d\u662f\u8def\u7531\u5668\u4e0e Thin Core Library \u95f4\u7684\u5173\u7cfb\u3002\u7136\u540e Android \u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u4f1a\u8fdb\u884c\u8fd9\u4e00\u516c\u5f00\u540d\u7684\u670d\u52a1\u53d1\u73b0\u3002\n\n\n\n\n\u56fe:\n: Thin Core Library \u4e0a\u7684\u670d\u52a1\u53d1\u73b0\n\n\n\u5f53AJTCL\u4e0a\u7684\u670d\u52a1\u88abAndroid\u8bbe\u5907\u4e0a\u7684\u5ba2\u6237\u7aef\u53d1\u73b0\u540e\u5ba2\u6237\u7aef\u53ef\u4ee5\u52a0\u5165\u7531\u670d\u52a1\u7aef\u5efa\u7acb\u7684\u4f1a\u8bdd\u3002\n\n\n\n\n\u56fe:\n Android\u8bbe\u5907\u52a0\u5165 Thin Core Library \u4e0a\u670d\u52a1\u7684\u4f1a\u8bdd\n\n\n\u81f3\u6b64 Android \u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u53ef\u4ee5\u50cf\u6240\u6709 AllJoyn \u8bbe\u5907\u4e00\u6837\u7684\u8bbf\u95ee AJTCL \u4e0a\u7684\u670d\u52a1\u4e86\u3002\u5b83\u53ef\u4ee5\u9009\u62e9\u63a5\u6536\u670d\u52a1\u7aef\u53d1\u8d77\u7684\u901a\u77e5\u4fe1\u53f7\uff0c\u8fd9\u4e2a\u4f8b\u4e2d\u7684\u60c5\u51b5\uff0c\u53ef\u80fd\u662f\u5b9a\u671f\u6536\u5230\u5f53\u524d\u7684\u6e29\u5ea6\u4fe1\u53f7\u3002\u5e94\u7528\u4e5f\u53ef\u4ee5\u663e\u793a\u4e00\u4e2a\u5141\u8bb8\u7528\u6237\u8f93\u5165\u60f3\u8981\u6e29\u5ea6\u7684\u7528\u6237\u754c\u9762\uff0c\u7136\u540e\u5c06\u65b0\u7684\u76ee\u6807\u6e29\u5ea6\u4ee5 AllJoyn \u67b6\u6784\u63cf\u8ff0\u4e2d\u4ecb\u7ecd\u7684\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08RMI\uff09\u7684\u65b9\u5f0f\u53d1\u9001\u7ed9 AJTCL \u7aef\u3002\u5f53\u6536\u5230\u4e00\u4e2a\u65b9\u6cd5\u8c03\u7528\u65f6\uff0cAJTCL \u4e0a\u8fd0\u884c\u7684\u670d\u52a1\u5c06\u4f1a\u628a\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u9505\u7089\u6765\u8bbe\u5b9a\u76ee\u6807\u6e29\u5ea6\u3002\n\n\nThin Core Library \u4e00\u4fa7\u4f7f\u7528\u7684 API \u4e0e AJSCL \u6216\u670d\u52a1\u7aef\u4f7f\u7528\u7684\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff0c\u4f46\u662f\u8fde\u63a5\u534f\u8bae\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u8fde\u63a5\u7684\u53e6\u4e00\u7aef\uff08AJSCL \u6216 AJTCL\uff09\u7ec4\u4ef6\u7684\u7c7b\u578b\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u8bf4\uff0c\u5728 \nIntroduction to the AllJoyn Framework\n \u4e2d\u5706\u5708\u56fe\u6240\u8868\u793a\u7684\u6240\u6709 AllJoyn \u8282\u70b9\u5305\u62ec AJTCLs \u5bf9\u4e8e\u6240\u6709\u7684\u4f7f\u7528\u610f\u56fe\u4e0e\u76ee\u7684\u90fd\u662f\u4e0d\u53ef\u533a\u5206\u7684\u3002\n\n\n\u57fa\u4e8e Thin Core Library \u7684\u65e0\u7ebf\u4f20\u611f\u5668\u7f51\u7edc\n\n\n\u8fd9\u4e2a\u4f8b\u5b50\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u5bb6\u5ead\u7ba1\u7406\u7cfb\u7edf\u3002\u5047\u8bbe\u65e0\u7ebf\u63a5\u5165\u70b9\u662f\u4e00\u4e2a\u9884\u88c5\u4e86 AllJoyn \u8def\u7531\u670d\u52a1\u7684\u80fd\u652f\u6301 Thin Core Library \u975e\u4fe1\u4efb\u8fde\u63a5\u7684 OpenWRT \u8def\u7531\u5668\u3002\u8fd9\u4f7f\u5f97\u6240\u6709\u63a5\u5165\u4e86\u8fd9\u4e00\u7cfb\u7edf\u7684 ATJCL \u53ef\u4ee5\u8fde\u63a5\u5230\u8def\u7531\u670d\u52a1\u57df\u5185\u3002\u8fd9\u4e00\u7f51\u7edc\u5185\u7684 Thin Core Library \u53ef\u80fd\u662f\u6e29\u5ea6\u4f20\u611f\u5668\u3001\u8fd0\u52a8\u63a2\u6d4b\u5668\u3001\u706f\u5149\u5f00\u5173\u3001\u70ed\u6c34\u6052\u6e29\u5668\u3001\u9505\u7089\u6216\u7a7a\u8c03\u7cfb\u7edf\u7684\u6e29\u63a7\u5668\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0c\u4f8b\u5b50\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u878d\u5408\u529f\u80fd\u662f\u6709\u4e00\u4e2a\u901a\u7528\u8ba1\u7b97\u673a\u4e0a\u7684\u5177\u6709\u96c6\u6210\u663e\u793a\u529f\u80fd\u7684\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u7684\u3002\u7f51\u7edc\u4e2d\u5e76\u4e0d\u662f\u8981\u6c42\u4e00\u5b9a\u8981\u6709\u4e13\u95e8\u7684\u901a\u7528\u8ba1\u7b97\u673a\uff0c\u6570\u636e\u878d\u5408\u4efb\u52a1\u4e5f\u53ef\u4ee5\u5206\u5e03\u5f0f\u5730\u53bb\u5b8c\u6210\uff0c\u4f46\u662f\u7f51\u7edc\u4e2d\u6709\u8fd9\u6837\u7684\u7ec4\u4ef6\u4f7f\u6211\u4eec\u80fd\u591f\u66f4\u597d\u5730\u63cf\u8ff0\u4e0e\u8bb2\u89e3 AJSCL \u548c Thin Core Library \u8bbe\u5907\u4e4b\u95f4\u662f\u5982\u4f55\u4e92\u52a8\u7684\u3002\u201c\u878d\u5408\u5668\u201d\u7684\u663e\u793a\u5668\u53ef\u4ee5\u5b89\u88c5\u5728\u5bb6\u91cc\u7684\u5899\u4e0a\uff0c\u6216\u8005\u5c31\u662f\u5bb6\u91cc\u67d0\u5904\u7684\u4e00\u53f0\u4e2a\u4eba\u7535\u8111\u3002\u8fd9\u4e2a\u663e\u793a\u5668\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u7528\u6237\u754c\u9762\u4ee5\u663e\u793a\u4f8b\u5982\u5404\u4e2a\u623f\u95f4\u7684\u6e29\u5ea6\u7684\u4fe1\u606f\uff0c\u6216\u8005\u865a\u62df\u706f\u5149\u7684\u5f00\u5173\uff0c\u6216\u8005\u8fd0\u52a8\u63a2\u6d4b\u5668\u3002\u5b9e\u9645\u7684\u6570\u636e\u878d\u5408\u529f\u80fd\u7b97\u6cd5\u5e94\u8be5\u5224\u65ad\u4f55\u65f6\u53bb\u5f00\u706f\u5173\u706f\uff0c\u6253\u5f00\u6696\u6c14\u3001\u9505\u7089\uff0c\u6216\u8005\u5728\u4ec0\u4e48\u65f6\u5019\u8c03\u6574\u70ed\u6c34\u5668\u7684\u6e29\u5ea6\u4ee5\u8fbe\u5230\u6700\u4f73\u7684\u6548\u7387\u7b49\u7b49\u3002\n\u9996\u5148\u9700\u8981\u8003\u8651\u7684\u6a21\u5757\u662f OpenWRT \u4e0a\u7684\u8def\u7531\u5668\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n\n\n\n\u56fe:\n OpenWRT \u8def\u7531\u5668\u8fd0\u884c\u72ec\u7acb\u7684 AllJoyn \u8def\u7531\u57df\n\n\n\u8def\u7531\u5668\u4e0a\u8fd0\u884c AllJoyn \u72ec\u7acb\u7684\u8def\u7531\u57df\u5728\u56fe\u4e2d\u4ee5\u52a0\u9ed1\u7684\u6a2a\u7ebf\u8868\u793a\uff0c\u4ee3\u8868 AllJoyn \u5206\u5e03\u5f0f\u8f6f\u4ef6\u603b\u7ebf\u7684\u4e00\u4e2a\u6bb5\u3002\n\n\n\u8def\u7531\u5668\u603b\u7ebf\u6bb5\u6240\u6302\u9760\u7684 AllJoyn \u670d\u52a1\u4e2d\u6709\u53ef\u80fd\u6709\u670d\u52a1\u80fd\u591f\u63d0\u4f9b\u4e00\u79cd\u65b9\u5f0f\u5bf9\u8def\u7531\u5668\u548c\u4f7f\u7528 AllJoyn \u67b6\u6784\u7684\u8def\u7531\u670d\u52a1\u672c\u8eab\u8fdb\u884c\u914d\u7f6e\u3002\u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u4e00\u4e9b\u7a7a\u7684\u63d2\u53e3\u4ee3\u8868\u8fde\u63a5\u5230 AJTCL \u7684\u975e\u4fe1\u4efb\u8fde\u63a5\u3002\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u4e00\u822c\u6027\u7684 AllJoyn \u8def\u7531\u5668\uff0c\u5bf9\u5e94\u7684\u8f6f\u4ef6\u603b\u7ebf\u53ef\u4ee5\u6269\u5c55\u5230\u5176\u5b83\u7684\u603b\u7ebf\u6bb5\u4ee5\u5f62\u6210\u4e00\u4e2a\u5206\u5e03\u5f0f\u7684\u603b\u7ebf\u3002\n\n\n\u5728\u4e4b\u524d\u7684\u90e8\u5206\u63d0\u5230\u8fc7\uff0cAJTCL \u8bbe\u5907\u4f1a\u4e3b\u52a8\u4ee5\u53d1\u73b0\u7684\u65b9\u5f0f\u641c\u7d22\u53ef\u4ee5\u8fde\u63a5\u7684\u8def\u7531\u8bbe\u5907\u3002\u8fd9\u91cc\u6211\u4eec\u63cf\u8ff0\u7684\u662f\u975e\u4fe1\u4efb\u5173\u7cfb\uff0c\u56e0\u6b64\u8fd0\u884c\u4e8e OpenWRT \u4e0a\u7684 AllJoyn \u8def\u7531\u5668\u4f1a\u6839\u636e\u914d\u7f6e\u5b89\u9759\u5e7f\u64ad\u901a\u7528\u540d\u5982 org.alljoyn.BusNode \u6765\u8868\u793a\u8fd9\u4e2a\u8def\u7531\u5668\u662f\u4e00\u4e2a AllJoyn \u5206\u5e03\u5f0f\u603b\u7ebf\u4e0a\u5177\u6709 Thin Libraries \u63a5\u5165\u80fd\u529b\u7684\u8282\u70b9\u3002\n\u5206\u5e03\u5f0f\u7f51\u7edc\u4e2d\u4ee3\u8868\u7740\u4f20\u611f\u5668\u8282\u70b9\u7684 AJTCL \u4f1a\u901a\u8fc7\u767b\u5f55\u8fc7\u7a0b\u52a0\u5165\u5230\u8fd9\u4e00\u65e0\u7ebf\u7f51\u7edc\u4e2d\u6765\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4eec\u4f1a\u88ab\u8d4b\u4e88\u4e00\u4e2a\u79f0\u4e3a\u53cb\u597d\u540d\u7684\u6807\u8bc6\u4ee5\u8868\u660e\u5176\u5728\u5bb6\u5ead\u4e2d\u7684\u4f7f\u7528\u610f\u4e49\u3002\u6bd4\u5982\u4e00\u4e2a\u706f\u5149\u5f00\u5173\u4f3a\u670d\u5668\uff08\u5f00\u5173\u4eae\u5ea6\u63a7\u5236\uff09\u53ef\u4ee5\u88ab\u547d\u540d\u4e3a\u201c\u53a8\u623f\u201d\u6216\u662f\u201c\u8d77\u5c45\u5ba4\u201d\u3002\u76f8\u5bf9\u5e94\u7684 Thin Core Library \u8282\u70b9\u4f1a\u5f00\u59cb\u53d1\u73b0\u5b83\u4eec\u88ab\u5206\u914d\u7684\u8def\u7531\u5668\uff08\u6bd4\u5982 org.alljoyn.BusNode\uff09\u7136\u540e\u8bd5\u56fe\u5efa\u7acb\u8fde\u63a5\u3002\u7531\u4e8e OpenWRT \u4e0a\u8fd0\u884c\u7684\u9884\u88c5\u8def\u7531\u5668\u5904\u4e8e\u975e\u4fe1\u4efb\u6a21\u5f0f\u4e0b\uff0c\u6765\u81ea Thin Core Library \u7684\u8fde\u63a5\u4f1a\u88ab\u63a5\u53d7\u3002\n\n\n\n\n\u56fe:\n ATJCL \u8282\u70b9\u8fde\u63a5\u81f3 OpenWRT \u4e0a\u7684 AllJoyn \u8def\u7531\u5668\n\n\n\u4e00\u65e6 Thin Core Library \u5e94\u7528\u4e8e OpenWRT \u8def\u7531\u5668\u4e0a\u7684\u603b\u7ebf\u6bb5\u5efa\u7acb\u8d77\u4e86\u8fde\u63a5\u5c31\u4f1a\u5f00\u59cb\u53d1\u5e03\u5176\u6240\u5177\u6709\u7684\u670d\u52a1\u7279\u6027\u3002\u8fd9\u91cc\u5047\u8bbe\u5df2\u7ecf\u6709\u4e00\u4e2a\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\u767b\u5f55\u5230\u4e86\u8fd9\u4e00\u8def\u7531\u5668\u63d0\u4f9b\u7684\u65e0\u7ebf\u7f51\u7edc\u4e2d\uff0c\u5b83\u5c31\u4f1a\u5f00\u59cb\u53d1\u73b0\u5e76\u5bfb\u627e\u7cfb\u7edf\u4e2d\u7531 Thin Core Libraries \u63d0\u4f9b\u7684\u670d\u52a1\u3002\n\n\n\n\n\u56fe:\n OpenWRT \u8def\u7531\u5668\uff0cThin Core Libraries \u548c\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\n\n\n\u548c\u5728 \nIntroduction to the AllJoyn Framework\n \u4e2d\u8ba8\u8bba\u7684\u4e00\u6837\uff0c\u4e00\u65e6\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\u53d1\u73b0\u4e86 AJTCL \u8bbe\u5907\u4e2d\u67d0\u4e00\u4e2a\u6240\u53d1\u5e03\u7684\u670d\u52a1\uff0c\u4ed6\u5c31\u4f1a\u8bd5\u56fe\u52a0\u5165\u4e0e\u53d1\u73b0\u7684 Thin Core Library \u7684\u4f1a\u8bdd\u4e2d\u53bb\u3002\u8fd9\u6837\u5c31\u4f7f\u5f97\u8def\u7531\u5668\u548c\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\u4e0a\u5206\u522b\u5b9e\u73b0\u7684\u603b\u7ebf\u6bb5\u878d\u5408\u6210\u4e3a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u865a\u62df\u5206\u5e03\u5f0f\u603b\u7ebf\u3002\n\n\n\n\n\u56fe:\n AllJoyn \u5206\u5e03\u5f0f\u8f6f\u4ef6\u603b\u7ebf\n\n\n\u5f53\u878d\u5408\u540e\u7684\u603b\u7ebf\u5b8c\u5168\u5f62\u6210\u4ee5\u540e\uff0c\u6302\u8f7d\u5728\u8fd9\u4e00\u603b\u7ebf\u4e0a\u7684\u8bbe\u5907\u90fd\u4f1a\u63d0\u4f9b\u516c\u5f00\u7684 AllJoyn \u5ba2\u6237\u7aef\u6216\u670d\u52a1\u7aef\u3002\u901a\u8fc7 TCP \u8fde\u63a5\u5230 AllJoyn \u8def\u7531\u5668\u7684 Thin Core Library \u7684\u4f20\u611f\u5668\u548c\u4f3a\u670d\u5668\u5b9e\u9645\u4e0a\u662f\u4e00\u4e9b\u5d4c\u5165\u5f0f\u8bbe\u5907\uff0c\u5e76\u4e0d\u76f4\u63a5\u66b4\u9732\u7ed9\u5206\u5e03\u5f0f\u603b\u7ebf\u4e0a\u7684\u5176\u5b83\u7ec4\u4ef6\u3002\u800c\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\u6709\u53ef\u80fd\u662f\u8fd0\u884c\u5728\u901a\u7528\u8ba1\u7b97\u673a\u4e0a\u7684 Android \u7cfb\u7edf\u4e0a\u7684 Java \u7a0b\u5e8f\uff0c\u4e5f\u4e0d\u4f1a\u76f4\u63a5\u66b4\u9732\u7ed9\u5206\u5e03\u5f0f\u603b\u7ebf\u4e0a\u7684\u5176\u5b83\u7ec4\u4ef6\u3002\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u90fd\u7b80\u5355\u5730\u5b9e\u73b0\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u5e76\u4ea4\u6362\u4fe1\u53f7\u3002\n\n\n\u81f3\u6b64\u6570\u636e\u878d\u5408\u5668\u4e0a\u8fd0\u884c\u7684\u7b97\u6cd5\u5df2\u7ecf\u53ef\u4ee5\u88ab\u5f88\u6e05\u695a\u7684\u7406\u89e3\u4e86\u3002\u4e00\u4e2a\u901a\u8fc7\u5206\u5e03\u5f0f\u603b\u7ebf\u53d1\u9001\u7684\u91cd\u8981\u7684 AllJoyn \u4fe1\u53f7\uff0c\u6bd4\u5982\nCARBON-MONOXIDE-DETECTED\n\uff08\u53d1\u73b0\u4e00\u6c27\u5316\u78b3\uff09\u5e94\u8be5\u80fd\u591f\u88ab\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\uff08\u6570\u636e\u878d\u5408\u5668\uff09\u63a5\u6536\u5230\uff0c\u4e4b\u540e\u540e\u8005\u4f5c\u4e3a\u54cd\u5e94\u4f1a\u53d1\u9001\u4e00\u4e2a\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u7ed9\u4e00\u4e2a\u4f3a\u670d\u5668\u8282\u70b9\u4ee5\nSOUND-ALARM\n\uff08\u6253\u5f00\u98ce\u6247\uff09\uff0c\u540c\u65f6\u4f1a\u53d1\u9001\u53e6\u4e00\u4e2a\u8c03\u7528\u7ed9\u53e6\u4e00\u4e2a\u8282\u70b9\u6765\nSOUND-ALARM\n\uff08\u89e6\u53d1\u8b66\u62a5\uff09\uff0c\u8fd8\u53ef\u80fd\u5411\u623f\u4e3b\u53d1\u9001\u4e00\u6761\u77ed\u4fe1\u544a\u8bc9\u4ed6\u623f\u95f4\u91cc\u53d1\u73b0\u4e00\u6c27\u5316\u78b3\u8d85\u6807\u3002\n\n\n\u66f4\u5e73\u5e38\u7684\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\u7684\u529f\u80fd\u53ef\u80fd\u662f\u5f53\u5bb6\u91cc\u6ca1\u6709\u4eba\u5728\u7684\u65f6\u5019\uff08\u7531\u8fd0\u52a8\u63a2\u6d4b\u5668\u62a5\u544a\u6216\u6309\u7167\u63d0\u524d\u8bbe\u5b9a\u597d\u7684\u65e5\u7a0b\u89c4\u5212\uff09\u5411\u9505\u7089\u53d1\u9001\u8fdc\u7a0b\u8c03\u7528\u6765\u964d\u4f4e\u5c4b\u5185\u7684\u6e29\u5ea6\u3002\u5de5\u4f5c\u65e5\u4e2d\u6216\u6df1\u591c\u65f6\uff0c\u5bb6\u5ead\u63a7\u5236\u5355\u5143\u53ef\u4ee5\u5411\u70ed\u6c34\u5668\u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u6765\u964d\u4f4e\u6c34\u6e29\uff0c\u540c\u65f6\u52a0\u70ed\u6d17\u7897\u673a\u7684\u7528\u6c34\u4f7f\u5b83\u5728\u7535\u8d39\u6700\u4f4e\u7684\u65f6\u5019\u8fd0\u884c\u3002\n\n\n\u6240\u6709\u7684\u8fd9\u4e9b\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\u7684\u53cd\u5e94\u548c\u65b9\u6cd5\u8c03\u7528\u4fe1\u53f7\u90fd\u5b8c\u5168\u4e0e\u6d88\u606f\u7684\u6765\u6e90\u548c\u76ee\u7684\u5730\u8bbe\u5907\u7684\u7c7b\u578b\u548c\u4f4d\u7f6e\u6ca1\u6709\u5173\u7cfb\u3002\n\n\n\u603b\u7ed3\n\n\nAllJoyn \u662f\u4e00\u4e2a\u5728\u5f02\u8d28\u7cfb\u7edf\u4e0a\u90e8\u7f72\u5206\u5e03\u5f0f\u5e94\u7528\u4e3a\u76ee\u6807\u7684\u53ef\u4ee5\u5e7f\u6cdb\u4f7f\u7528\u7684\u7cfb\u7edf\u67b6\u6784\u3002AJTCL \u4f7f\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ef\u4ee5\u53c2\u4e0e\u5230 AllJoyn \u7684\u5206\u5e03\u5f0f\u603b\u7ebf\u4e2d\u6765\u5e76\u4e14\u5411\u7cfb\u7edf\u4e2d\u7684\u5176\u5b83\u7ec4\u4ef6\u4ee5\u62bd\u8c61\u670d\u52a1\u7684\u65b9\u5f0f\u516c\u5f00\uff0c\u800c\u8fd9\u5bf9\u4e8e\u4ee5\u5f80\u7684\u5f00\u53d1\u8005\u6765\u8bb2\u5728\u8fd9\u7c7b\u5f02\u8d28\u6027\u7684\u7cfb\u7edf\u4e0a\u53bb\u5b9e\u73b0\u5c06\u662f\u975e\u5e38\u56f0\u96be\u7684\u3002\u8fd9\u4e00\u9014\u5f84\u4f7f\u5e94\u7528\u5f00\u53d1\u8005\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u5177\u4f53\u7684\u5185\u5bb9\u5e94\u7528\u7684\u5f00\u53d1\u800c\u4e0d\u9700\u8981\u5927\u91cf\u7684\u5e95\u5c42\u5d4c\u5165\u5f0f\u7cfb\u7edf\u6216\u7f51\u7edc\u7684\u5f00\u53d1\u7ecf\u9a8c\u3002\n\n\nAllJoyn \u7cfb\u7edf\u662f\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u8fdb\u884c\u8bbe\u8ba1\u7684\uff0c\u4e0d\u4f1a\u6709 ad-hoc \u7cfb\u7edf\u4e2d\u90a3\u6837\u4ece\u5927\u91cf\u788e\u7247\u62fc\u51d1\u5728\u4e00\u8d77\u65f6\u9047\u5230\u7684\u7ee7\u627f\u6027\u7684\u75db\u82e6\u3002\u6211\u4eec\u76f8\u4fe1 AllJoyn \u7cfb\u7edf\u53ef\u4ee5\u4f7f\u6709\u5d4c\u5165\u5f0f\u7cfb\u7edf\u6a21\u5757\u53c2\u4e0e\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u5f00\u53d1\u4e0e\u90e8\u7f72\u76f8\u8f83\u4e8e\u5176\u5b83\u5e73\u53f0\u66f4\u4e3a\u7b80\u5355\u9ad8\u6548\u3002\n\n\n\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\n\n\n\u5982\u60f3\u83b7\u53d6\u66f4\u591a\u5173\u4e8e\u5982\u4f55\u5c06 AllJoyn \u67b6\u6784\u96c6\u6210\u5230\u4f60\u7684\u5f00\u53d1\u9879\u76ee\u4e2d\u7684\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee \nAllSeen Alliance web site\n \u4ee5\u83b7\u5f97\u76f8\u5173\u6587\u6863\u6216\u4e0b\u8f7d\u5185\u5bb9\u3002\n\n\n\n\nIntroductory guides\uff08\u4ecb\u7ecd\u5bfc\u8bfb\uff09 - \u63cf\u8ff0 AllJoyn \u6280\u672f\u4e0e\u6982\u5ff5\n\n\nDevelopment guides\uff08\u5f00\u53d1\u5bfc\u8bfb\uff09 - \u63d0\u4f9b\u5efa\u7acb\u7f16\u8bd1\u73af\u5883\u7684\u6b65\u9aa4\u5e76\u63d0\u4f9b\u7279\u5b9a\u7f16\u7a0b\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u5305\u62ec\u6e90\u4ee3\u7801\u7247\u6bb5\u4e0e\u8be6\u7ec6\u89e3\u91ca\u3002\n\n\nAPI references \uff08API \u53c2\u8003\uff09- \u63d0\u4f9b\u4f7f\u7528 AllJoyn \u6e90\u4ee3\u7801\u7684\u8be6\u7ec6\u8bf4\u660e\u4ee5\u53ca\u4f7f\u7528\u5404\u4e2a\u652f\u6301\u7684\u8bed\u8a00\u7f16\u5199\u7684\u5e94\u7528\u3002\n\n\nDownloads \uff08\u4e0b\u8f7d\uff09- \u8f6f\u4ef6\u5f00\u53d1\u5957\u4ef6 (SDK)\u7528\u4ee5\u63d0\u4f9b\u7528\u6237\u7f16\u8bd1\u3001\u66f4\u6539\u3001\u6d4b\u8bd5\u4ee5\u53ca\u6267\u884c\u7279\u5b9a\u4efb\u52a1\u6240\u9700\u7684\u8d44\u6e90\u3002",
            "title": "Thin core"
        },
        {
            "location": "/learn/core/thin-core/#alljoyn",
            "text": "",
            "title": "AllJoyn&trade; \u7cbe\u7b80\u5185\u6838"
        },
        {
            "location": "/learn/core/thin-core/#_1",
            "text": "AllJoyn \u662f\u4e00\u5957\u5f00\u6e90\u8f6f\u4ef6\u7cfb\u7edf\uff0c\u5b83\u4e3a\u53ef\u4ee5\u5938\u4e0d\u540c\u7c7b\u578b\u8bbe\u5907\u8fd0\u884c\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u63d0\u4f9b\u8fd0\u884c\u5e73\u53f0\uff0c\u5e76\u4e14\u5f3a\u8c03\u79fb\u52a8\u3001\u5b89\u5168\u548c\u52a8\u6001\u53ef\u914d\u7f6e\u7684\u7279\u6027\u3002AllJoyn\u662f\u201c\u5e73\u53f0\u4e0d\u4f9d\u8d56\u201d\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5728\u8bbe\u8ba1\u4e4b\u65f6\u5c31\u5c3d\u91cf\u505a\u5230\u4e0d\u4f9d\u8d56\u4e0e\u7279\u5b9a\u7684\u64cd\u4f5c\u7cfb\u7edf\u3001\u786c\u4ef6\u6216\u786c\u4ef6\u4e0a\u8fd0\u884c\u7684\u8f6f\u4ef6\u3002  AllJoyn \u7684\u6807\u51c6\u5185\u6838\u5e93(AJSCL)\u4e2d\u7684\u5404\u5b50\u6a21\u5757\u8bbe\u8ba1\u662f\u8003\u8651\u4e86\u5728 Microsoft Windows\u3001Linux\u3001Android\u3001iOS\u3001OS X\u3001OpenWRT \u4e0b\u4ee5\u53ca\u4f5c\u4e3a\u4e92\u8054\u7f51\u6d4f\u89c8\u5668\u7684\u6574\u5408\u63d2\u4ef6\u7684\u65b9\u5f0f\u4f7f\u7528\u7684\u8981\u6c42\u3002\u8fd9\u4e9b\u8f6f\u4ef6\u7cfb\u7edf\u7684\u4e00\u4e2a\u5171\u6709\u7684\u7279\u6027\u662f\u5b83\u4eec\u90fd\u8fd0\u884c\u4e8e\u901a\u7528\u8ba1\u7b97\u673a\u4e4b\u4e0a\u3002\u901a\u7528\u8ba1\u7b97\u673a\u901a\u5e38\u62e5\u6709\u53ef\u89c2\u6570\u91cf\u7684\u5b58\u50a8\u80fd\u529b\uff0c\u6709\u5145\u8db3\u7684\u7535\u529b\u3001\u8ba1\u7b97\u80fd\u529b\u4ee5\u53ca\u7531\u6b64\u5e26\u6765\u7684\u80fd\u652f\u6301\u591a\u8fdb\u7a0b\u3001\u591a\u7ebf\u7a0b\u548c\u591a\u8bed\u8a00\u73af\u5883\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002  \u4e0e\u6b64\u4e0d\u540c\uff0c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u8fd0\u884c\u4e8e\u5d4c\u5165\u5728\u4e00\u4e2a\u5927\u578b\u8bbe\u5907\u4e0a\u7684\u5fae\u5904\u7406\u5668\u5f53\u4e2d\u4ee5\u63d0\u4f9b\u7279\u5b9a\u7684\u529f\u80fd\u3002\u7531\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ea\u9700\u8981\u6267\u884c\u7279\u5b9a\u7684\u4efb\u52a1\u6216\u4e00\u4e9b\u6709\u9650\u6570\u91cf\u7684\u529f\u80fd\uff0c\u5de5\u7a0b\u5e08\u53ef\u4ee5\u4f18\u5316\u8fd9\u4e9b\u7cfb\u7edf\u4ee5\u4fbf\u80fd\u5728\u5177\u6709\u66f4\u5c0f\u7684\u5b58\u50a8\u7a7a\u95f4\u3001\u66f4\u6709\u9650\u7684\u5904\u7406\u5668\u901f\u5ea6\u3001\u66f4\u7701\u7535\u3001\u66f4\u5c11\u7684\u5916\u8bbe\u548c\u7528\u6237\u63a5\u53e3\u7b49\u7684\u786c\u4ef6\u5e73\u53f0\u4e0a\u8fd0\u884c\u6765\u51cf\u5c0f\u4ea7\u54c1\u7684\u5c3a\u5bf8\u4e0e\u4ef7\u683c\u3002AllJoyn Thin Core Library\uff08AJTCL\uff09\u5c31\u662f\u4ee5\u5c06 AllJoyn \u5206\u5e03\u5f0f\u7f16\u7a0b\u73af\u5883\u7684\u4f18\u52bf\u5e94\u7528\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e3a\u76ee\u6807\u5e94\u8fd0\u800c\u751f\u7684\u3002  \u7531\u4e8e AJTCL \u5c06\u8981\u8fd0\u884c\u7684\u64cd\u4f5c\u73af\u5883\u5c06\u4f1a\u662f\u975e\u5e38\u53d7\u9650\u7684\uff0c\u8fd0\u884c\u4e8e\u6b64\u7c7b\u7cfb\u7edf\u4e0a\u7684 AllJoyn \u7ec4\u5efa\u5fc5\u987b\u9002\u5e94\u5404\u7c7b\u9650\u5236\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u6211\u4eec\u5c06\u4e0d\u5177\u6709 AllJoyn router (\u9700\u8981\u591a\u7ebf\u7a0b)\u6240\u5177\u6709\u7684\u5962\u4f88\u6761\u4ef6\uff0c\u6bd4\u5982\u4e30\u5bcc\u7684\u7f51\u7edc\u8fde\u63a5\u3001\u4f7f\u7528\u76f8\u5bf9\u5927\u7684 RAM \u548c ROM \u7a7a\u95f4\u7b49\u3002\u540c\u65f6\u6211\u4eec\u4e5f\u4e0d\u5177\u5907\u8fd0\u884c\u80fd\u591f\u5305\u542b\u8bfe\u66f4\u6362\u8bed\u8a00\u5173\u8054\u7684\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u73af\u5883\u7684\u6761\u4ef6\u3002\u5728\u8fd9\u6837\u7684\u6761\u4ef6\u4e0b\uff0cAJTCL \u53ea\u8003\u8651\u5355\u72ec\u4f7f\u7528 C \u8bed\u8a00\u6765\u5b9e\u73b0\u603b\u7ebf\u63a5\u5165\u7684\u529f\u80fd\uff08\u53c2\u89c1 Introduction to the AllJoyn Framework\uff09\u3002\u4e0e\u63a5\u53e3\u3001\u65b9\u6cd5\u3001\u4fe1\u53f7\u3001\u5c5e\u6027\u4ee5\u53ca\u603b\u7ebf\u5bf9\u8c61\u6240\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u90fd\u8fdb\u884c\u4e86\u9ad8\u5ea6\u4f18\u5316\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u5f00\u53d1\u8005\u4f7f\u7528\u7684 API \u4e5f\u56e0\u6b64\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002  \u867d\u7136 API \u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u662f\u6240\u6709\u7684 AJSCL \u4e0b\u7684\u4e3b\u8981\u7684\u6982\u5ff5\u6027\u6a21\u5757\u90fd\u53ef\u4ee5\u5728 AJTCL \u4e2d\u627e\u5230\uff1b\u5b83\u4eec\u66f4\u7c7b\u4f3c\u4e8e\u4ee5\u4e00\u79cd\u66f4\u7d27\u51d1\u7684\u5f62\u5f0f\u4e88\u4ee5\u5c55\u73b0\u6216\u8005\u8bf4\u5b9e\u9645\u4e0a\u662f\u5728\u53e6\u4e00\u4e2a\u8fdc\u7aef\u80fd\u529b\u66f4\u5f3a\u7684\u673a\u5668\u4e0a\u8fd0\u884c\u800c\u5df2\u3002  \u6ce8\u610f:  \u5f53\u6211\u4eec\u63d0\u5230 AllJoyn Standard Library (AJSCL)\u65f6\uff0c\u6211\u4eec\u66f4\u660e\u786e\u7684\u8bf4\u662f\u6307\u5728\u901a\u7528\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u8fd9\u4e9b\u6a21\u5757\u7684\u7248\u672c\u3002",
            "title": "\u6982\u89c8"
        },
        {
            "location": "/learn/core/thin-core/#_2",
            "text": "\u6b63\u5982\u4ee5\u4e0a\u7ae0\u8282\u63d0\u5230\u7684\uff0cAJTCL \u4e2d\u4f7f\u7528\u6700\u9ad8\u5c42\u6b21\u7684\u62bd\u8c61\u6a21\u578b\u4e0e AJSCL \u7cfb\u7edf\u662f\u5b8c\u5168\u5bf9\u5e94\u7684\u3002\u5728  Introduction to the AllJoyn Framework  \u4e2d\u6709\u4e13\u95e8\u7684\u7ae0\u8282 Conceptual Overview (\u6982\u5ff5\u7efc\u8ff0)\u4e3a\u5927\u5bb6\u63cf\u8ff0\u4e86\u8fd9\u4e00\u62bd\u8c61\u6a21\u578b\u3002\u5728\u6982\u5ff5\u7efc\u8ff0\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u8bfb\u8005\u5df2\u7ecf\u719f\u6089\u4e86\u76f8\u5173\u6587\u6863\u4e2d\u5bf9\u62bd\u8c61\u6a21\u578b\u7684\u4ecb\u7ecd\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u4f1a\u6d89\u53ca\u7406\u89e3 AJTCL \u7ed3\u6784\u6240\u9700\u8981\u7684\u7279\u4f7f\u7684\u90e8\u5206\u3002  AllJoyn Thin Core Library \u4ecd\u7136\u662f AllJoyn  \u9700\u8981\u7279\u522b\u5f3a\u8c03\u4e0e\u6ce8\u610f\u7684\u662f AJTCL \u662f AllJoyn \u6846\u67b6\u7684\u4e00\u90e8\u5206\u3002Thin Core Library \u5177\u6709\u5b8c\u5168\u7684\u5bf9 AJSCL \u7684\u4e92\u64cd\u4f5c\u6027\u3002\u7531\u4e8e AllJoyn \u7f51\u7edc\u8fde\u63a5\u534f\u8bae\u5728\u4e24\u79cd\u7cfb\u7edf\u4e0b\u90fd\u6709\u5b8c\u6574\u7684\u5b9e\u73b0\uff0cAJSCL \u662f\u5b8c\u5168\u4e0d\u7528\u77e5\u9053\u4e0e\u4e4b\u6c9f\u901a\u7684\u662f\u5426\u662f\u4e00\u4e2a Thin Core Library \u7684\uff0c\u5bf9\u4e8e AJTCL \u4e5f\u662f\u540c\u6837\u3002  \u6309\u7167  Introduction to the AllJoyn Framework \u7684\u4ecb\u7ecd\uff0cAllJoyn \u5206\u5e03\u5f0f\u603b\u7ebf\u7684\u57fa\u672c\u7ed3\u6784\u53ef\u4ee5\u7531\u6302\u9760\u4e8e\u591a\u4e2a\u72ec\u7acb\u7684\u7269\u7406\u4e3b\u673a\u4e0a\u7684\u603b\u7ebf\u6bb5\u5171\u540c\u7ec4\u6210\u3002   \u56fe:  AllJoyn \u5206\u5e03\u5f0f\u603b\u7ebf  \u6bcf\u4e00\u4e2a\u6302\u9760\u4e8e\u7279\u5b9a\u4e3b\u673a\u7684\u603b\u7ebf\u6bb5\u5728\u56fe\u4e2d\u7528\u6807\u4e3a Host A \u548c Host B \u7684\u865a\u7ebf\u6240\u56f4\u65b9\u6846\u8868\u793a\u3002\u6bcf\u4e00\u4e2a\u603b\u7ebf\u6bb5\u90fd\u7531\u4e00\u4e2a AllJoyn \u8def\u7531\u5668\uff08\u56fe\u4e2d\u6807\u4e3a D \u7684\u5706\u5708\u6240\u793a\uff09\u6765\u5b9e\u73b0\u3002\u6bcf\u4e2a\u4e3b\u673a\u90fd\u53ef\u80fd\u6709\u591a\u4e2a\u8bbe\u5907\u63a5\u5165\uff0c\u8fde\u63a5\u81f3\u672c\u5730\u57df\uff08\u56fe\u4e2d\u516d\u8fb9\u5f62\u6240\u793a\uff09\uff0c\u5c06\u5b83\u4eec\u5206\u4e3a\u670d\u52a1\u7aef\uff08S\uff09\u548c\u5ba2\u6237\u7aef\uff08C\uff09\u3002  \u7531\u4e8e\u8fd0\u884c AJTCL \u7684\u8bbe\u5907\u901a\u5e38\u6ca1\u6709\u8d44\u6e90\u8fd0\u884c\u8def\u7531\u7a0b\u5e8f\uff0c\u5728 AllJoyn \u7684\u7ed3\u6784\u4e2d\u8fde\u63a5\u5230\u5206\u5e03\u5f0f\u603b\u7ebf\u4e0a\u7684 Thin Core Library \u501f\u7528\u4e3b\u673a\u4e0a\u8fd0\u884c\u7684\u8def\u7531\u7a0b\u5e8f\u3002   \u56fe:  AllJoyn \u4e0b\u8fde\u63a5 Thin Core Libraries \u7684\u5206\u5e03\u5f0f\u603b\u7ebf  \u9700\u8981\u6ce8\u610f\u7684\u662f\u5d4c\u5165\u5f0f\u7cfb\u7edf A \u548c\u5d4c\u5165\u5f0f\u7cfb\u7edf B \u4e0e\u4ed6\u4eec\u6240\u5c5e\u7684\u8fd0\u884c\u7528\u6765\u7ba1\u7406\u5206\u5e03\u5f0f\u603b\u7ebf\u6bb5\u7684\u8def\u7531\u7a0b\u5e8f\u7684\u4e3b\u673a B \u662f\u4e0d\u540c\u7684\u8bbe\u5907\u3002\n\u5982  Introduction to the AllJoyn Framework  \u6240\u8ff0\uff0c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e0e\u8def\u7531\u8bbe\u5907\u4e4b\u95f4\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u7684\u662f AllJoyn \u7684\u5404\u7c7b\u6d88\u606f\uff0c\u7528\u6765\u5b9e\u73b0\u603b\u7ebf\u65b9\u6cd5\u3001\u603b\u7ebf\u4fe1\u53f7\u4ee5\u53ca\u5c5e\u6027\u7b49\u5728\u5404\u81ea\u4f1a\u8bdd\u5185\u7684\u4ea4\u6362\u3002  \u5728\u6709\u4e9b\u5e94\u7528\u4e2d\uff0c\u4f1a\u6709\u8981\u6c42 AJTCL \u8bbe\u5907\u8fde\u63a5\u6216\u501f\u7528\u5df2\u5b58\u5728\u7684\u8fd1\u573a\u8def\u7531\u7684\u9700\u6c42\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u975e\u4fe1\u4efb\u5173\u7cfb\uff08\u4ece\u8def\u7531\u89d2\u5ea6\u6765\u8bf4\uff09\u3002\u540c\u4e8b\u4e5f\u4f1a\u6709\u5141\u8bb8\u7279\u5b9a\u7684 AJTCL \u8bbe\u5907\u8fde\u63a5\u7279\u5b9a\u7684\u8def\u7531\u7684\u9700\u6c42\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u53ef\u4fe1\u4efb\u5173\u7cfb\uff08\u540c\u6837\u4ece\u8def\u7531\u89d2\u5ea6\u6765\u8bf4\uff09\u3002  \u8fd9\u4e9b\u5173\u7cfb\u662f\u901a\u8fc7\u4f7f\u7528\u53d1\u73b0\u4e0e\u8fde\u63a5\u6d41\u7a0b\u6765\u5b9e\u73b0\u7684\uff0c\u6982\u5ff5\u4e0a\u8bb2\u8fd9\u4e0e\u670d\u52a1\u7aef\u4e0e\u5ba2\u6237\u7aef\u7684\u53d1\u73b0\u4e0e\u8fde\u63a5\u6d41\u7a0b\u662f\u7c7b\u4f3c\u7684\u3002\u4e00\u4e2a AllJoyn \u8def\u7531\u8bbe\u5907\u4f1a\u4e3b\u52a8\u5411\u4e00\u7ec4 AJTCL \u8bbe\u5907\u53d1\u5e03\u5176\u516c\u5f00\u7684\u547d\u540d\u8868\u793a\u5176\u63a5\u5165\u7684\u80fd\u529b\u3002\u8fd9\u4e00\u5e7f\u544a\u7531\u8def\u7531\u914d\u7f6e\u6216\u662f\u4e00\u4e2a\u7279\u5b9a\u7684 AllJoyn \u5e7f\u544a\u7ec4\u4ef6\u6765\u9a71\u52a8\u3002\u5f53\u5411\u4e00\u4e2a\u8def\u7531\u8bbe\u5907\u53d1\u8d77\u4e00\u6b21\u8fde\u63a5\u8bf7\u6c42\u65f6\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u53d1\u73b0\u4e8b\u4ef6\uff0c\u5bf9\u4e8e\u671f\u671b\u4fe1\u4efb\u5173\u7cfb\u7684\u8def\u7531\u670d\u52a1\uff0c\u53ef\u80fd\u4f1a\u9009\u62e9\u5411\u7279\u5b9a\u7684 Thin Core Library\uff08\u6216\u8005 Thin Core Library \u7684\u6a21\u4eff\u8005\uff09\u63d0\u51fa\u8be2\u95ee\u4ee5\u4ea7\u751f\u4e00\u6b21\u9274\u6743\u3002\u5bf9\u4e8e\u975e\u4fe1\u4efb\u5173\u7cfb\u7684\u60c5\u51b5\uff0c\u8def\u7531\u8bbe\u5907\u6709\u53ef\u80fd\u76f4\u63a5\u9009\u62e9\u5141\u8bb8\u4efb\u4f55\u8fde\u63a5\u8bf7\u6c42\uff0c\u800c\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u76f8\u5173\u7684\u8def\u7531\u670d\u52a1\u4e0d\u4f1a\u5141\u8bb8 Thin Core Library \u8fdb\u884c\u4efb\u4f55\u4f1a\u5f15\u8d77\u4e0e\u975e\u672c\u5730\u8bbe\u5907\u5efa\u7acb\u4f1a\u8bdd\u7684\u64cd\u4f5c\uff08\u5373\u201c\u4ea7\u751f\u8d39\u7528\u7684\u670d\u52a1\u201d\uff09\u3002  \u5982\u4e0a\u6240\u8ff0\uff0c\u5bf9\u4e8e AJTL \u8bbe\u5907\u800c\u8a00\u8fde\u63a5\u7684\u8fc7\u7a0b\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff1a   \u53d1\u73b0\u9636\u6bb5  \u8fde\u63a5\u9636\u6bb5  \u8ba4\u8bc1\u9636\u6bb5   \u53d1\u73b0\u9636\u6bb5\u5de5\u4f5c\u539f\u7406\u4e0e\u5728  Introduction to the AllJoyn Framework  \u4e2d\u63cf\u8ff0\u7684\u670d\u52a1\u5e7f\u544a\u548c\u53d1\u73b0\u4e00\u6837\uff0c\u4f46\u662f\u4e24\u4e2a\u533a\u522b\u3002\u7b2c\u4e00\u4e2a\u533a\u522b\u662f\u4ee5 AJTCL \u53d1\u73b0\u4e3a\u76ee\u7684\u7684\u5e7f\u544a\u662f\u201c\u5b89\u9759\u201d\u6a21\u5f0f\u7684\uff0c\u7b80\u5355\u8bb2\u4e5f\u5c31\u662f\u8bf4\u8fd9\u7c7b\u5e7f\u544a\u4e0d\u662f\u6709\u8def\u7531\u5668\u65e0\u507f\u53d1\u653e\u7684\u3002  \u7b2c\u4e8c\u4e2a\u533a\u522b\u662f\u5bf9\u4e8e\u5b89\u9759\u5e7f\u544a\u7684\u56de\u5e94\u662f\u5b89\u9759\u7684\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5b89\u9759\u56de\u5e94\u3002\u4e5f\u5c31\u662f\u8bf4\u56de\u5e94\u5c06\u4f1a\u88ab\u5355\u72ec\u76f4\u63a5\u53d1\u56de\u7ed9\u8bf7\u6c42\u8005\u800c\u4e0d\u662f\u7c7b\u4f3c\u4e8e\u201c\u4e3b\u52a8\u201d\u5e7f\u544a\u90a3\u6837\u5e7f\u64ad\u51fa\u53bb\u3002\u8fd9\u6837\u7684\u6539\u53d8\u7684\u4e3b\u8981\u539f\u56e0\u662f\u5141\u8bb8\u6ca1\u6709\u5b9e\u73b0\u591a\u64ad\u56de\u5e94\u7684\u5d4c\u5165\u5f0f\u8bbe\u5907\u53c2\u4e0e\u5230 AllJoyn \u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u6765\u3002  \u4ec0\u4e48\u662f AllJoyn Thin Core Library \u8bbe\u5907\uff1f  \u4e00\u4e2a\u5178\u578b\u7684 AJTCL \u8bbe\u5907\u6982\u5ff5\u4e0a\u6765\u8bb2\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u65e0\u7ebf\u4f20\u611f\u5668\u7f51\u7edc\u4e2d\u7684\u4f20\u611f\u5668\u8282\u70b9\u3002\u4f20\u611f\u5668\u8282\u70b9\u901a\u5e38\u662f\u80fd\u91cf\u3001\u8ba1\u7b97\u80fd\u529b\u3001\u5b58\u50a8\u80fd\u529b\u6216\u5176\u5b83\u8d44\u6e90\u5747\u53d7\u9650\u7684\u5c0f\u5c3a\u5bf8\u4f20\u611f\u5668\u6216\u4f3a\u670d\u5668\u3002\u5b83\u4eec\u80fd\u591f\u611f\u77e5\u5468\u56f4\u7684\u60c5\u51b5\uff0c\u4e0e\u5916\u754c\u6c9f\u901a\u53d1\u751f\u7684\u4e8b\u4ef6\uff0c\u6216\u8005\u6709\u53ef\u80fd\u6839\u636e\u5185\u90e8\u7684\u5904\u7406\u673a\u5236\u6216\u5916\u90e8\u4e8b\u4ef6\u7684\u7ed3\u679c\u91c7\u53d6\u7279\u5b9a\u7684\u884c\u52a8\u3002\u8fd9\u975e\u5e38\u4f9d\u8d56\u4e8e\u8bbe\u5907\u7684\u529f\u80fd\u5b9a\u4e49\uff0c\u80fd\u5f52\u4e3a\u6b64\u7c7b\u5b9a\u4e49\u7684\u8bbe\u5907\u6211\u4eec\u53ef\u4ee5\u4e3e\u4e00\u4e9b\u5176\u4e2d\u5f88\u5c0f\u4e00\u90e8\u5206\u7684\u4f8b\u5b50\uff1a   \u7535\u706f\u5f00\u5173  \u6052\u6e29\u5668  \u7a7a\u8c03  \u6392\u98ce\u6247  \u70df\u96fe\u4f20\u611f\u5668  \u8fd0\u52a8\u4f20\u611f\u5668  \u6e7f\u5ea6\u4f20\u611f\u5668  \u9ea6\u514b\u98ce  \u6269\u97f3\u5668  \u8033\u673a  \u95e8  \u95e8\u94c3  \u5fae\u6ce2\u7089  \u51b0\u7bb1  \u70e4\u7bb1   \u5173\u4e8e\u4f20\u611f\u5668\u7f51\u7edc\u6709\u7740\u5927\u91cf\u7684\u6587\u732e\u8fdb\u884c\u8ba8\u8bba\u3002\u4e0e WSNs \u4e2d\u4e0d\u592a\u770b\u91cd\u5b89\u5168\u6027\u7684\u5178\u578b\u4f7f\u7528\u7684\u81ea\u7ec4\u7ec7\u3001\u591a\u8df3\u81ea\u7ec4\u7f51\u7684\u65e0\u7ebf\u7f51\u7edc\u4e0d\u540c AllJoyn \u67b6\u6784\u901a\u5e38\u8fd0\u884c\u4e8e\u53c2\u4e0e\u8bbe\u5907\u90fd\u662f\u76f8\u5173\u7684\u4e14\u7ecf\u8fc7\u8ba4\u8bc1\u7684 Wi-Fi \u57fa\u7840\u6a21\u5f0f\u7684\u7f51\u7edc\u4e4b\u4e0a\u3002\u4e3a\u4e86\u5b8c\u6210\u5bf9 Wi-Fi \u7f51\u7edc\u7684\u5b89\u5168\u8ba4\u8bc1\uff0cAJTCL \u4f7f\u7528\u4e86\u79f0\u4e3a\u201conboarding\uff08\u767b\u5f55\uff09\u201d\u7684\u6d41\u7a0b\u3002\u767b\u5f55\u670d\u52a1\u67b6\u6784\u4f7f\u901a\u5e38\u4e0d\u5177\u6709\u53cb\u597d\u7528\u6237\u754c\u9762\u7684 Thin Core Library \u8bbe\u5907\u80fd\u591f\u83b7\u5f97\u8db3\u591f\u7684\u76ee\u6807\u7f51\u7edc\u7684\u4fe1\u606f\u6765\u5b8c\u6210\u52a0\u5165\u8be5\u7f51\u7edc\u6240\u9700\u7684\u8bb8\u53ef\u4e0e\u9274\u6743\u7684\u8fc7\u7a0b\u3002\u767b\u5f55\u670d\u52a1\u7684\u67b6\u6784\u5728\u4e13\u95e8\u7684\u7ae0\u8282\u4e2d\u6709\u8be6\u5c3d\u7684\u63cf\u8ff0\u3002  \u4f5c\u4e3a\u4f20\u611f\u5668\u8282\u70b9\u5728 AllJoyn \u7684\u573a\u666f\u4e2d AJTCL \u8bbe\u5907\u901a\u5e38\u5b9e\u73b0\u4e00\u9879\u670d\u52a1\u3002\u5b83\u4f7f\u7528\u6240\u4f9d\u8d56\u7684\u786c\u4ef6\u611f\u77e5\u5468\u56f4\u7684\u60c5\u51b5\u5e76\u4e14\u5c06\u4e8b\u4ef6\u4ee5 AllJoyn \u4fe1\u53f7\u7684\u65b9\u5f0f\u53d1\u9001\u7ed9\u5916\u754c\uff0c\u5e76\u6839\u636e\u7531\u5176\u4ed6\u8bbe\u5907\u53d1\u9001\u7684\u4e8b\u4ef6\u6216\u54cd\u5e94 AllJoyn \u5ba2\u6237\u7aef\u7684\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u89e6\u53d1\u4e00\u6b21\u52a8\u4f5c\uff0c\u5982  Introduction to the AllJoyn Framework  \u4e2d\u6240\u63cf\u8ff0\u7684\u90a3\u6837\u3002",
            "title": "\u6982\u5ff5\u6027\u6a21\u578b"
        },
        {
            "location": "/learn/core/thin-core/#thin-core-library",
            "text": "\u7531\u4e8e AllJoyn Thin Core Library (AJTCL) \u5fc5\u987b\u8fd0\u884c\u4e8e\u80fd\u6e90\u3001\u5904\u7406\u80fd\u529b\u53ca\u5185\u5b58\u5747\u53d7\u9650\u7684\u8bbe\u5907\u4e0a\uff0c\u6ca1\u6709\u8db3\u591f\u7684\u8d44\u6e90\u4f7f\u7528\u4e0e\u901a\u7528\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e0a\u8fd0\u884c\u7684 AllJoyn \u6807\u51c6\u5185\u6838\u5e93 (AJSCL) \u7c7b\u4f3c\u7684\u7ed3\u6784\u3002  \u5c42\u6b21\u5316\u7684 AJSCL \u6216\u670d\u52a1\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002   \u56fe:  AJSCL \u5c42  \u66f4\u8be6\u7ec6\u7684\u5404\u5c42\u7684\u8ba8\u8bba\u53ef\u4ee5\u53c2\u8003  Introduction to the AllJoyn Framework  \u3002  \u5728\u6b64\u9700\u8981\u6ce8\u610f\u7684\u975e\u5e38\u91cd\u8981\u7684\u4e00\u70b9\u662f\u6bcf\u4e00\u4e2a AllJoyn \u5206\u5c42\u4e2d\u7684\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u7aef\u90fd\u5bf9\u5e94\u4e8e\u4e00\u4e2a AllJoyn \u6d41\u7a0b\u4e0a\u7684\u5e94\u7528\u3002  \u6bcf\u4e00\u4e2a\u5177\u6709 AJSCL \u4e3b\u673a\u90fd\u5177\u6709\u81f3\u5c11\u4e00\u4e2a AllJoyn \u8def\u7531\u670d\u52a1\u3002\u8fd9\u4e00\u670d\u52a1\u5728\u72ec\u7acb\u8def\u7531\u7684\u60c5\u51b5\u4e0b\u53ea\u6709\u81ea\u5df1\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5728\u96c6\u6210\u8def\u7531\u7684\u5e94\u7528\u60c5\u51b5\u4e0b\u4e5f\u53ef\u80fd\u548c\u5e94\u7528\u7a0b\u5e8f\u8054\u5408\u90e8\u7f72\u3002\u5206\u5c42\u6b21\u7684 AJSCL \u8def\u7531\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002   \u56fe:   AJSCL \u8def\u7531\u5c42\u6b21\u7ed3\u6784  \u9700\u8981\u6ce8\u610f\u7684\u662f\u8def\u7531\u529f\u80fd\u8fd8\u63d0\u4f9b\u5728\u8def\u7531\u5668\u4e4b\u95f4\u8f6c\u53d1\u6d88\u606f\u7684\u989d\u5916\u652f\u6301\uff0c\u5e76\u5177\u6709\u4f7f\u7528\u591a\u7f51\u7edc\u4f20\u8f93\u673a\u5236\u5982 Wi-Fi \u76f4\u8fde\u7684\u80fd\u529b\u3002\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\u6240\u9700\u7684\u8ba1\u7b97\u80fd\u529b\u3001\u80fd\u8017\u548c\u5b58\u50a8\u4ee3\u4ef7\u5c06\u662f\u975e\u5e38\u53ef\u89c2\u7684\u3002  \u663e\u7136\u5982\u6b64\u5927\u91cf\u7684\u4ee3\u7801\u662f\u65e0\u6cd5\u5728\u53d7\u9650\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e0a\u8fd0\u884c\u7684\uff0c\u56e0\u6b64 AJTCL \u7cbe\u7b80\u4e86\u5927\u91cf\u7684\u4ee3\u7801\u53ea\u4fdd\u7559\u4e86\u5fc5\u987b\u5b58\u5728\u7684\u90e8\u5206\u4ee5\u4f7f\u5176\u80fd\u8fd0\u884c\u4e8e\u6240\u9700\u7684\u8bbe\u5907\u4e4b\u4e0a\u3002\u4e3a\u6b64\u57fa\u672c\u7684\u8fd0\u884c\u73af\u5883\u4ec5\u9650\u4e8e\u6700\u5c0f\u5316\u7684\u5b9e\u65f6C\u8bed\u8a00\u73af\u5883\uff0c\u5e76\u501f\u7528\u5176\u4ed6\u8bbe\u5907\u6765\u5b8c\u6210\u8def\u7531\u7684\u89d2\u8272\u3002\u4e0e AJSCL \u4e0d\u540c\uff0cAJTCL \u53bb\u9664\u4e86 AJSL \u7cfb\u7edf\u4e2d\u5f88\u591a\u4e0a\u5c42\u8868\u8ff0\u6027\u90e8\u5206\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002   Figure:  AJTCL \u5c42\u6b21\u7ed3\u6784  AJTCL\u53ea\u5411\u603b\u7ebf\u63a5\u5165\u7a0b\u5e8f\u5f00\u653e\u4e86\u5c3d\u53ef\u80fd\u5c11\u7684\u6240\u9700\u7684 API\uff0c\u5e76\u76f4\u63a5\u5f00\u653e\u4e86\u6d88\u606f\u63a5\u53e3\u800c\u975e\u5e2e\u52a9\u51fd\u6570\u3002  \u6d88\u606f\u5c42\u6ca1\u6709\u4f7f\u7528\u62bd\u8c61\u4f20\u8f93\u673a\u5236\u800c\u662f\u76f4\u63a5\u4f7f\u7528\u4e86 UDP \u548c TCP\u3002\u4e00\u4e2a\u975e\u5e38\u7b80\u6613\u7684\u63a5\u53e3\u5c42\u7528\u6765\u63d0\u53d6\u4e2a\u522b\u6240\u9700\u7684\u539f\u751f\u7cfb\u7edf\u51fd\u6570\uff0c\u6574\u4e2a\u5305\u90fd\u662f\u4f7f\u7528C\u8bed\u8a00\u7f16\u5199\u7684\u4ee5\u4fdd\u8bc1\u6700\u5c0f\u7684\u4ee3\u7801\u5c3a\u5bf8\u3002\u7531\u4e8e\u4f18\u5316\u7684\u7ed3\u679c\uff0cAJTCL \u7cfb\u7edf\u53ef\u4ee5\u5728\u4ec5\u6709 20Kbybtes \u5b58\u50a8\u7a7a\u95f4\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u800c\u4e00\u4e2a\u8def\u7531\u670d\u52a1\u52a0\u4e0a C++ \u7684\u5ba2\u6237\u6216\u670d\u52a1\u7aef\u7684\u96c6\u5408\u5c06\u4f1a\u9700\u898110\u500d\u7684\u5b58\u50a8\u7a7a\u95f4\uff0cJava \u8bed\u8a00\u7684\u7248\u672c\u6240\u9700\u7a7a\u95f4\u751a\u81f3\u8fbe\u5230\u4e86 40 \u500d\u3002",
            "title": "Thin Core Library \u7ed3\u6784"
        },
        {
            "location": "/learn/core/thin-core/#_3",
            "text": "\u4e3a\u4e86\u4f7f\u8fd9\u91cc\u7684\u8ba8\u8bba\u66f4\u76f4\u89c2\u5177\u4f53\uff0c\u6211\u4eec\u8fd9\u91cc\u4e3e\u4e24\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4f8b\u5b50\uff1a   \u4e00\u4e2a\u8fd0\u884c\u5355\u4e2a AllJoyn \u5e94\u7528\u7684\u667a\u80fd\u624b\u673a\u4e0a\u7684\u6700\u5c0f\u7cfb\u7edf\u4e0e\u4e00\u4e2a AJTCL \u8bbe\u5907\u4e92\u901a\u3002\u8fd9\u4e2a\u4f8b\u5b50\u7528\u6765\u8bf4\u660e\u4e0a\u6587\u4e2d\u63cf\u8ff0\u7684\u4fe1\u4efb\u5173\u7cfb\u3002  \u4e00\u4e2a\u65e0\u7ebf\u8def\u7531\u5668\u4e0a\u8fd0\u884c\u8def\u7531\u670d\u52a1\u7684\u76f8\u5bf9\u590d\u6742\u7684\u7cfb\u7edf\u3002   \u6ce8\u610f:  \u901a\u5e38\u6765\u8bb2\u5b9e\u9645\u60c5\u51b5\u662f\u4e00\u4e2a\u8fd0\u884c OpenWRT \u7684\u8def\u7531\u5668\u4e0a\u6709\u4e00\u4e2a\u9884\u88c5\u7684 AllJoyn \u8def\u7531\u670d\u52a1\u3002\u8fd9\u4e00\u8def\u7531\u63a5\u53d7\u6765\u81ea\u4e8e\u5df2\u7ecf\u767b\u5f55\u5230 Wi-Fi \u7f51\u8def\u7684 Thin Core Library \u7684\u975e\u4fe1\u4efb\u8fde\u63a5\u3002  \u4e00\u4e9bAJTCL\u8bbe\u5907\u8fde\u63a5\u5230\u8def\u7531\u5668\u4f5c\u4e3a\u57fa\u4e8e AllJoyn \u7684\u65e0\u7ebf\u4f20\u611f\u5668\u7f51\u7edc\u7684\u4f20\u611f\u5668\u8282\u70b9\uff0c\u7531\u4e00\u53f0\u901a\u7528\u8ba1\u7b97\u673a\u6267\u884c\u6570\u636e\u878d\u5408\u529f\u80fd\u3002  \u6ce8\u610f:  \u5728\u65e0\u7ebf\u4f20\u611f\u5668\u7f51\u7edc\u4e2d\uff0c\u6570\u636e\u878d\u5408\u4e13\u6307\u4e00\u4e9b\u4e0d\u540c\u7684\u8282\u70b9\u4ece\u4e00\u5b9a\u6570\u91cf\u7684\u4f20\u611f\u5668\u8282\u70b9\u4e0a\u6536\u96c6\u7ed3\u679c\u5e76\u8fdb\u884c\u96c6\u6210\u6216\u201c\u878d\u5408\u201d\uff0c\u7136\u540e\u4f9d\u636e\u8fd9\u4e9b\u4f20\u611f\u5668\u8282\u70b9\u4e0a\u5f97\u5230\u7684\u6570\u636e\u4ea7\u751f\u76f8\u5e94\u7684\u7ed3\u679c\u6216\u9700\u8981\u6267\u884c\u7684\u52a8\u4f5c\u3002  \u4e00\u4e2a\u6700\u5c0f\u5316\u7684 Thin Core Library \u7cfb\u7edf  \u4e00\u4e2a\u4f7f\u7528 AJTCL \u7684\u6700\u5c0f\u5316\u7cfb\u7edf\u7684\u4f8b\u5b50\u5305\u62ec\u4e00\u4e2a\u8fd0\u884c AJSCL \u7684\u5355\u4e3b\u673a\u548c\u4e00\u4e2a Thin Core Library \u8bbe\u5907\u3002AJSCL \u63d0\u4f9b\u4e86 Thin Core Library \u8fde\u63a5\u7684 AllJoyn \u8def\u7531\u5668\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e00\u4e2a\u8fd0\u884c\u4f7f\u7528 Thin Core Library \u7684\u5e94\u7528\u7684\u5e73\u53f0\u3002\u5982\u4e0a\u9762\u6240\u8ff0\uff0cThin Core Library \u901a\u5e38\u4f5c\u4e3a\u4e00\u79cd\u4f20\u611f\u5668\u8282\u70b9\u4f7f\u7528\uff0c\u5411\u4e3b\u673a\u4e0a\u8fd0\u884c\u7684\u5e94\u7528\u53d1\u9001\u6570\u636e\u3002\u5e94\u7528\u7a0b\u5e8f\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5904\u7406\u8fd9\u4e9b\u6570\u636e\u5e76\u5411\u4f20\u611f\u5668\u53d1\u9001\u547d\u4ee4\u4ee5\u66f4\u6539\u5176\u73af\u5883\u53c2\u6570\u3002\n\u4e00\u4e2a\u7b80\u5355\u800c\u5408\u7406\u7684\u7cfb\u7edf\uff0c\u4f8b\u5982\u5899\u4e0a\u6709\u4e00\u4e2a\u63a7\u5236\u9505\u7089\u7684\u6052\u6e29\u5668\uff0cAndroid \u8bbe\u5907\u4e0a\u6709\u4e00\u4e2a\u7528\u4e8e\u63a7\u5236\u7684\u5e94\u7528\u7a0b\u5e8f\u3002AJSCL \u4f1a\u8fd0\u884c\u5728 Android \u8bbe\u5907\u4e0a\u800c\u5899\u4e0a\u7684\u6052\u6e29\u5668\u5185\u8fd0\u884c AJTCL\u3002   \u56fe:  \u6700\u5c0f\u7cfb\u7edf\u4f8b\u5b50  \u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\uff0c\u4e00\u4e2a\u9700\u6c42\u662f\u5899\u4e0a\u7684\u6052\u6e29\u5668\u53ea\u80fd\u88ab Android \u8bbe\u5907\u4e0a\u5bf9\u5e94\u7684\u6052\u6e29\u63a7\u5236\u7a0b\u5e8f\u63a7\u5236\u3002\n\u7531\u4e8e\u4f8b\u5b50\u4e2d\u6052\u6e29\u5668\u53ea\u80fd\u88ab Android \u8bbe\u5907\u4e0a\u5bf9\u5e94\u7684\u6052\u6e29\u63a7\u5236\u7a0b\u5e8f\u63a7\u5236\uff0c\u6240\u4ee5\u6052\u6e29\u5668\u5f88\u53ef\u80fd\u8981\u6c42\u4e0e Android \u4e0a\u7684\u5e94\u7528\u6240\u4f7f\u7528\u7684\u8def\u7531\u5668\u5efa\u7acb\u8fde\u63a5\u3002\u8fd9\u610f\u5473\u7740 Android \u5e94\u7528\u5e94\u8be5\u4e0e AllJoyn \u8def\u7531\u5668\u7ed1\u5b9a\u5e76\u4e14\u53ea\u6709\u8fd9\u4e00\u7279\u5b9a\u7684\u7ed1\u5b9a\u7684\u8def\u7531\u5668/\u5e94\u7528\u5bf9\u624d\u80fd\u4ee5\u8def\u7531\u5668\u7684\u80fd\u529b\u544a\u77e5 Thin Core Library \u6765\u4f7f\u7528\u3002\u8fd9\u7c7b\u5e94\u7528\u5bfc\u81f4 AJTCL \u548c\u8def\u7531\u5668/\u5e94\u7528\u5bf9\u4e4b\u95f4\u7684\u53ef\u4fe1\u4efb\u5173\u7cfb\u3002\n\u4e4b\u540e\u5e94\u7528\u4f1a\u8bf7\u6c42\u7ed1\u5b9a\u7684\u8def\u7531\u5668\u4ee5\u5b89\u9759\u6a21\u5f0f\u516c\u793a\u4e00\u4e2a AJTCL \u53ef\u89c1\u7684\u516c\u5f00\u540d\uff08\u4f8b\u5982com.company.BusNode\uff09   \u56fe:  Thin Core Library \u8def\u7531\u5668\u53d1\u73b0  \u5f53\u8def\u7531\u5668\u6536\u5230\u4e86\u4e00\u4e2a\u5bf9\u5b83\u4ee5\u5b89\u9759\u6a21\u5f0f\u5e7f\u64ad\u7684\u516c\u5f00\u540d\u7684\u51c6\u786e\u7684\u8be2\u95ee\u65f6\uff0c\u5b83\u4f1a\u56de\u5e94\u4e00\u4e2a\u6807\u793a\u8868\u660e\u9700\u8981\u7684\u516c\u5f00\u540d\u786e\u5b9e\u8fde\u63a5\u5230\u4e86\u8fd9\u4e00\u7279\u5b9a\u7684\u8def\u7531\u5668\u4e0a\u3002\u4e4b\u540e AJTCL \u4f1a\u8bd5\u56fe\u8fde\u63a5\u5230\u6709\u56de\u5e94\u7684\u8def\u7531\u5668\u4e0a\u3002   \u56fe:  Thin Core Library \u8fde\u63a5\u5c1d\u8bd5  \u81f3\u6b64\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 AllJoyn \u603b\u7ebf\u5df2\u7ecf\u5f62\u6210\u4e86\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e0e Thin Core Library \u670d\u52a1\u90fd\u8fde\u63a5\u5230\u4e86\u7ed1\u5b9a\u7684 Android \u8bbe\u5907\u4e0a\u7684\u8def\u7531\u5668\u4e0a\u3002\u4f7f\u7528  Introduction to the AllJoyn Framework  \u4e2d\u7684\u5706\u5708\u56fe\u6765\u8868\u8ff0\u8fd9\u4e00\u7cfb\u7edf\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u6837\u7684\u8fde\u63a5\u4e0e\u8def\u7531\u5668\u5df2\u4e0e\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u5efa\u7acb\u4e86\u8fde\u63a5\u7684\u6548\u679c\u4e00\u81f4\u3002   Figure:  Thin Core Library \u7cfb\u7edf\u4e3e\u4f8b  \u6b64\u65f6 AJTCL \u5df2\u7ecf\u548c\u4e0e\u5e94\u7528\u7ed1\u5b9a\u4e86\u7684\u8def\u7531\u5668\u5efa\u7acb\u4e86\u8fde\u63a5\uff0c\u4f46\u662f\u5e94\u7528\u548c AJTCL \u90fd\u4e0d\u77e5\u9053\u5f7c\u6b64\u7684\u5b58\u5728\u3002\u901a\u5e38\u6b64\u65f6 AllJoyn \u573a\u666f\u4e2d AJTCL \u4f1a\u8bf7\u6c42\u4e00\u4e2a\u516c\u5f00\u7684\u603b\u7ebf\u540d\u5e76\u4e14\u5b9e\u4f8b\u5316\u4e00\u4e2a\u670d\u52a1\u3002\u5982  Introduction to the AllJoyn Framework  \u6240\u63cf\u8ff0\u7684 Thin Core Library \u4f1a\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd\u63a5\u53e3\u5e76\u4e14\u4f7f\u7528 Thin Core Library APIs \u5e7f\u64ad\u4e00\u4e2a\u516c\u5f00\u540d\u3002\u8fd9\u4e00\u516c\u5f00\u540d\u901a\u5e38\u4e0e\u7ed1\u5b9a\u7684\u8def\u7531\u5668\u5e7f\u544a\u7684\u516c\u5f00\u540d\u4e0d\u540c\uff1b\u5b83\u5bf9\u5e94\u4e8e Thin CoreLibrary \u4e0e\u5e94\u7528\u7a0b\u5e8f\u95f4\u7684\u5ba2\u6237\u7aef/\u670d\u52a1\u7aef\u7684\u5173\u7cfb\u800c\u4e0d\u662f\u8def\u7531\u5668\u4e0e Thin Core Library \u95f4\u7684\u5173\u7cfb\u3002\u7136\u540e Android \u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u4f1a\u8fdb\u884c\u8fd9\u4e00\u516c\u5f00\u540d\u7684\u670d\u52a1\u53d1\u73b0\u3002   \u56fe: : Thin Core Library \u4e0a\u7684\u670d\u52a1\u53d1\u73b0  \u5f53AJTCL\u4e0a\u7684\u670d\u52a1\u88abAndroid\u8bbe\u5907\u4e0a\u7684\u5ba2\u6237\u7aef\u53d1\u73b0\u540e\u5ba2\u6237\u7aef\u53ef\u4ee5\u52a0\u5165\u7531\u670d\u52a1\u7aef\u5efa\u7acb\u7684\u4f1a\u8bdd\u3002   \u56fe:  Android\u8bbe\u5907\u52a0\u5165 Thin Core Library \u4e0a\u670d\u52a1\u7684\u4f1a\u8bdd  \u81f3\u6b64 Android \u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u53ef\u4ee5\u50cf\u6240\u6709 AllJoyn \u8bbe\u5907\u4e00\u6837\u7684\u8bbf\u95ee AJTCL \u4e0a\u7684\u670d\u52a1\u4e86\u3002\u5b83\u53ef\u4ee5\u9009\u62e9\u63a5\u6536\u670d\u52a1\u7aef\u53d1\u8d77\u7684\u901a\u77e5\u4fe1\u53f7\uff0c\u8fd9\u4e2a\u4f8b\u4e2d\u7684\u60c5\u51b5\uff0c\u53ef\u80fd\u662f\u5b9a\u671f\u6536\u5230\u5f53\u524d\u7684\u6e29\u5ea6\u4fe1\u53f7\u3002\u5e94\u7528\u4e5f\u53ef\u4ee5\u663e\u793a\u4e00\u4e2a\u5141\u8bb8\u7528\u6237\u8f93\u5165\u60f3\u8981\u6e29\u5ea6\u7684\u7528\u6237\u754c\u9762\uff0c\u7136\u540e\u5c06\u65b0\u7684\u76ee\u6807\u6e29\u5ea6\u4ee5 AllJoyn \u67b6\u6784\u63cf\u8ff0\u4e2d\u4ecb\u7ecd\u7684\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08RMI\uff09\u7684\u65b9\u5f0f\u53d1\u9001\u7ed9 AJTCL \u7aef\u3002\u5f53\u6536\u5230\u4e00\u4e2a\u65b9\u6cd5\u8c03\u7528\u65f6\uff0cAJTCL \u4e0a\u8fd0\u884c\u7684\u670d\u52a1\u5c06\u4f1a\u628a\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u9505\u7089\u6765\u8bbe\u5b9a\u76ee\u6807\u6e29\u5ea6\u3002  Thin Core Library \u4e00\u4fa7\u4f7f\u7528\u7684 API \u4e0e AJSCL \u6216\u670d\u52a1\u7aef\u4f7f\u7528\u7684\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff0c\u4f46\u662f\u8fde\u63a5\u534f\u8bae\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u8fde\u63a5\u7684\u53e6\u4e00\u7aef\uff08AJSCL \u6216 AJTCL\uff09\u7ec4\u4ef6\u7684\u7c7b\u578b\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u8bf4\uff0c\u5728  Introduction to the AllJoyn Framework  \u4e2d\u5706\u5708\u56fe\u6240\u8868\u793a\u7684\u6240\u6709 AllJoyn \u8282\u70b9\u5305\u62ec AJTCLs \u5bf9\u4e8e\u6240\u6709\u7684\u4f7f\u7528\u610f\u56fe\u4e0e\u76ee\u7684\u90fd\u662f\u4e0d\u53ef\u533a\u5206\u7684\u3002  \u57fa\u4e8e Thin Core Library \u7684\u65e0\u7ebf\u4f20\u611f\u5668\u7f51\u7edc  \u8fd9\u4e2a\u4f8b\u5b50\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u5bb6\u5ead\u7ba1\u7406\u7cfb\u7edf\u3002\u5047\u8bbe\u65e0\u7ebf\u63a5\u5165\u70b9\u662f\u4e00\u4e2a\u9884\u88c5\u4e86 AllJoyn \u8def\u7531\u670d\u52a1\u7684\u80fd\u652f\u6301 Thin Core Library \u975e\u4fe1\u4efb\u8fde\u63a5\u7684 OpenWRT \u8def\u7531\u5668\u3002\u8fd9\u4f7f\u5f97\u6240\u6709\u63a5\u5165\u4e86\u8fd9\u4e00\u7cfb\u7edf\u7684 ATJCL \u53ef\u4ee5\u8fde\u63a5\u5230\u8def\u7531\u670d\u52a1\u57df\u5185\u3002\u8fd9\u4e00\u7f51\u7edc\u5185\u7684 Thin Core Library \u53ef\u80fd\u662f\u6e29\u5ea6\u4f20\u611f\u5668\u3001\u8fd0\u52a8\u63a2\u6d4b\u5668\u3001\u706f\u5149\u5f00\u5173\u3001\u70ed\u6c34\u6052\u6e29\u5668\u3001\u9505\u7089\u6216\u7a7a\u8c03\u7cfb\u7edf\u7684\u6e29\u63a7\u5668\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0c\u4f8b\u5b50\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u878d\u5408\u529f\u80fd\u662f\u6709\u4e00\u4e2a\u901a\u7528\u8ba1\u7b97\u673a\u4e0a\u7684\u5177\u6709\u96c6\u6210\u663e\u793a\u529f\u80fd\u7684\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u7684\u3002\u7f51\u7edc\u4e2d\u5e76\u4e0d\u662f\u8981\u6c42\u4e00\u5b9a\u8981\u6709\u4e13\u95e8\u7684\u901a\u7528\u8ba1\u7b97\u673a\uff0c\u6570\u636e\u878d\u5408\u4efb\u52a1\u4e5f\u53ef\u4ee5\u5206\u5e03\u5f0f\u5730\u53bb\u5b8c\u6210\uff0c\u4f46\u662f\u7f51\u7edc\u4e2d\u6709\u8fd9\u6837\u7684\u7ec4\u4ef6\u4f7f\u6211\u4eec\u80fd\u591f\u66f4\u597d\u5730\u63cf\u8ff0\u4e0e\u8bb2\u89e3 AJSCL \u548c Thin Core Library \u8bbe\u5907\u4e4b\u95f4\u662f\u5982\u4f55\u4e92\u52a8\u7684\u3002\u201c\u878d\u5408\u5668\u201d\u7684\u663e\u793a\u5668\u53ef\u4ee5\u5b89\u88c5\u5728\u5bb6\u91cc\u7684\u5899\u4e0a\uff0c\u6216\u8005\u5c31\u662f\u5bb6\u91cc\u67d0\u5904\u7684\u4e00\u53f0\u4e2a\u4eba\u7535\u8111\u3002\u8fd9\u4e2a\u663e\u793a\u5668\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u7528\u6237\u754c\u9762\u4ee5\u663e\u793a\u4f8b\u5982\u5404\u4e2a\u623f\u95f4\u7684\u6e29\u5ea6\u7684\u4fe1\u606f\uff0c\u6216\u8005\u865a\u62df\u706f\u5149\u7684\u5f00\u5173\uff0c\u6216\u8005\u8fd0\u52a8\u63a2\u6d4b\u5668\u3002\u5b9e\u9645\u7684\u6570\u636e\u878d\u5408\u529f\u80fd\u7b97\u6cd5\u5e94\u8be5\u5224\u65ad\u4f55\u65f6\u53bb\u5f00\u706f\u5173\u706f\uff0c\u6253\u5f00\u6696\u6c14\u3001\u9505\u7089\uff0c\u6216\u8005\u5728\u4ec0\u4e48\u65f6\u5019\u8c03\u6574\u70ed\u6c34\u5668\u7684\u6e29\u5ea6\u4ee5\u8fbe\u5230\u6700\u4f73\u7684\u6548\u7387\u7b49\u7b49\u3002\n\u9996\u5148\u9700\u8981\u8003\u8651\u7684\u6a21\u5757\u662f OpenWRT \u4e0a\u7684\u8def\u7531\u5668\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002   \u56fe:  OpenWRT \u8def\u7531\u5668\u8fd0\u884c\u72ec\u7acb\u7684 AllJoyn \u8def\u7531\u57df  \u8def\u7531\u5668\u4e0a\u8fd0\u884c AllJoyn \u72ec\u7acb\u7684\u8def\u7531\u57df\u5728\u56fe\u4e2d\u4ee5\u52a0\u9ed1\u7684\u6a2a\u7ebf\u8868\u793a\uff0c\u4ee3\u8868 AllJoyn \u5206\u5e03\u5f0f\u8f6f\u4ef6\u603b\u7ebf\u7684\u4e00\u4e2a\u6bb5\u3002  \u8def\u7531\u5668\u603b\u7ebf\u6bb5\u6240\u6302\u9760\u7684 AllJoyn \u670d\u52a1\u4e2d\u6709\u53ef\u80fd\u6709\u670d\u52a1\u80fd\u591f\u63d0\u4f9b\u4e00\u79cd\u65b9\u5f0f\u5bf9\u8def\u7531\u5668\u548c\u4f7f\u7528 AllJoyn \u67b6\u6784\u7684\u8def\u7531\u670d\u52a1\u672c\u8eab\u8fdb\u884c\u914d\u7f6e\u3002\u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u4e00\u4e9b\u7a7a\u7684\u63d2\u53e3\u4ee3\u8868\u8fde\u63a5\u5230 AJTCL \u7684\u975e\u4fe1\u4efb\u8fde\u63a5\u3002\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u4e00\u822c\u6027\u7684 AllJoyn \u8def\u7531\u5668\uff0c\u5bf9\u5e94\u7684\u8f6f\u4ef6\u603b\u7ebf\u53ef\u4ee5\u6269\u5c55\u5230\u5176\u5b83\u7684\u603b\u7ebf\u6bb5\u4ee5\u5f62\u6210\u4e00\u4e2a\u5206\u5e03\u5f0f\u7684\u603b\u7ebf\u3002  \u5728\u4e4b\u524d\u7684\u90e8\u5206\u63d0\u5230\u8fc7\uff0cAJTCL \u8bbe\u5907\u4f1a\u4e3b\u52a8\u4ee5\u53d1\u73b0\u7684\u65b9\u5f0f\u641c\u7d22\u53ef\u4ee5\u8fde\u63a5\u7684\u8def\u7531\u8bbe\u5907\u3002\u8fd9\u91cc\u6211\u4eec\u63cf\u8ff0\u7684\u662f\u975e\u4fe1\u4efb\u5173\u7cfb\uff0c\u56e0\u6b64\u8fd0\u884c\u4e8e OpenWRT \u4e0a\u7684 AllJoyn \u8def\u7531\u5668\u4f1a\u6839\u636e\u914d\u7f6e\u5b89\u9759\u5e7f\u64ad\u901a\u7528\u540d\u5982 org.alljoyn.BusNode \u6765\u8868\u793a\u8fd9\u4e2a\u8def\u7531\u5668\u662f\u4e00\u4e2a AllJoyn \u5206\u5e03\u5f0f\u603b\u7ebf\u4e0a\u5177\u6709 Thin Libraries \u63a5\u5165\u80fd\u529b\u7684\u8282\u70b9\u3002\n\u5206\u5e03\u5f0f\u7f51\u7edc\u4e2d\u4ee3\u8868\u7740\u4f20\u611f\u5668\u8282\u70b9\u7684 AJTCL \u4f1a\u901a\u8fc7\u767b\u5f55\u8fc7\u7a0b\u52a0\u5165\u5230\u8fd9\u4e00\u65e0\u7ebf\u7f51\u7edc\u4e2d\u6765\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4eec\u4f1a\u88ab\u8d4b\u4e88\u4e00\u4e2a\u79f0\u4e3a\u53cb\u597d\u540d\u7684\u6807\u8bc6\u4ee5\u8868\u660e\u5176\u5728\u5bb6\u5ead\u4e2d\u7684\u4f7f\u7528\u610f\u4e49\u3002\u6bd4\u5982\u4e00\u4e2a\u706f\u5149\u5f00\u5173\u4f3a\u670d\u5668\uff08\u5f00\u5173\u4eae\u5ea6\u63a7\u5236\uff09\u53ef\u4ee5\u88ab\u547d\u540d\u4e3a\u201c\u53a8\u623f\u201d\u6216\u662f\u201c\u8d77\u5c45\u5ba4\u201d\u3002\u76f8\u5bf9\u5e94\u7684 Thin Core Library \u8282\u70b9\u4f1a\u5f00\u59cb\u53d1\u73b0\u5b83\u4eec\u88ab\u5206\u914d\u7684\u8def\u7531\u5668\uff08\u6bd4\u5982 org.alljoyn.BusNode\uff09\u7136\u540e\u8bd5\u56fe\u5efa\u7acb\u8fde\u63a5\u3002\u7531\u4e8e OpenWRT \u4e0a\u8fd0\u884c\u7684\u9884\u88c5\u8def\u7531\u5668\u5904\u4e8e\u975e\u4fe1\u4efb\u6a21\u5f0f\u4e0b\uff0c\u6765\u81ea Thin Core Library \u7684\u8fde\u63a5\u4f1a\u88ab\u63a5\u53d7\u3002   \u56fe:  ATJCL \u8282\u70b9\u8fde\u63a5\u81f3 OpenWRT \u4e0a\u7684 AllJoyn \u8def\u7531\u5668  \u4e00\u65e6 Thin Core Library \u5e94\u7528\u4e8e OpenWRT \u8def\u7531\u5668\u4e0a\u7684\u603b\u7ebf\u6bb5\u5efa\u7acb\u8d77\u4e86\u8fde\u63a5\u5c31\u4f1a\u5f00\u59cb\u53d1\u5e03\u5176\u6240\u5177\u6709\u7684\u670d\u52a1\u7279\u6027\u3002\u8fd9\u91cc\u5047\u8bbe\u5df2\u7ecf\u6709\u4e00\u4e2a\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\u767b\u5f55\u5230\u4e86\u8fd9\u4e00\u8def\u7531\u5668\u63d0\u4f9b\u7684\u65e0\u7ebf\u7f51\u7edc\u4e2d\uff0c\u5b83\u5c31\u4f1a\u5f00\u59cb\u53d1\u73b0\u5e76\u5bfb\u627e\u7cfb\u7edf\u4e2d\u7531 Thin Core Libraries \u63d0\u4f9b\u7684\u670d\u52a1\u3002   \u56fe:  OpenWRT \u8def\u7531\u5668\uff0cThin Core Libraries \u548c\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf  \u548c\u5728  Introduction to the AllJoyn Framework  \u4e2d\u8ba8\u8bba\u7684\u4e00\u6837\uff0c\u4e00\u65e6\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\u53d1\u73b0\u4e86 AJTCL \u8bbe\u5907\u4e2d\u67d0\u4e00\u4e2a\u6240\u53d1\u5e03\u7684\u670d\u52a1\uff0c\u4ed6\u5c31\u4f1a\u8bd5\u56fe\u52a0\u5165\u4e0e\u53d1\u73b0\u7684 Thin Core Library \u7684\u4f1a\u8bdd\u4e2d\u53bb\u3002\u8fd9\u6837\u5c31\u4f7f\u5f97\u8def\u7531\u5668\u548c\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\u4e0a\u5206\u522b\u5b9e\u73b0\u7684\u603b\u7ebf\u6bb5\u878d\u5408\u6210\u4e3a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u865a\u62df\u5206\u5e03\u5f0f\u603b\u7ebf\u3002   \u56fe:  AllJoyn \u5206\u5e03\u5f0f\u8f6f\u4ef6\u603b\u7ebf  \u5f53\u878d\u5408\u540e\u7684\u603b\u7ebf\u5b8c\u5168\u5f62\u6210\u4ee5\u540e\uff0c\u6302\u8f7d\u5728\u8fd9\u4e00\u603b\u7ebf\u4e0a\u7684\u8bbe\u5907\u90fd\u4f1a\u63d0\u4f9b\u516c\u5f00\u7684 AllJoyn \u5ba2\u6237\u7aef\u6216\u670d\u52a1\u7aef\u3002\u901a\u8fc7 TCP \u8fde\u63a5\u5230 AllJoyn \u8def\u7531\u5668\u7684 Thin Core Library \u7684\u4f20\u611f\u5668\u548c\u4f3a\u670d\u5668\u5b9e\u9645\u4e0a\u662f\u4e00\u4e9b\u5d4c\u5165\u5f0f\u8bbe\u5907\uff0c\u5e76\u4e0d\u76f4\u63a5\u66b4\u9732\u7ed9\u5206\u5e03\u5f0f\u603b\u7ebf\u4e0a\u7684\u5176\u5b83\u7ec4\u4ef6\u3002\u800c\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\u6709\u53ef\u80fd\u662f\u8fd0\u884c\u5728\u901a\u7528\u8ba1\u7b97\u673a\u4e0a\u7684 Android \u7cfb\u7edf\u4e0a\u7684 Java \u7a0b\u5e8f\uff0c\u4e5f\u4e0d\u4f1a\u76f4\u63a5\u66b4\u9732\u7ed9\u5206\u5e03\u5f0f\u603b\u7ebf\u4e0a\u7684\u5176\u5b83\u7ec4\u4ef6\u3002\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u90fd\u7b80\u5355\u5730\u5b9e\u73b0\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u5e76\u4ea4\u6362\u4fe1\u53f7\u3002  \u81f3\u6b64\u6570\u636e\u878d\u5408\u5668\u4e0a\u8fd0\u884c\u7684\u7b97\u6cd5\u5df2\u7ecf\u53ef\u4ee5\u88ab\u5f88\u6e05\u695a\u7684\u7406\u89e3\u4e86\u3002\u4e00\u4e2a\u901a\u8fc7\u5206\u5e03\u5f0f\u603b\u7ebf\u53d1\u9001\u7684\u91cd\u8981\u7684 AllJoyn \u4fe1\u53f7\uff0c\u6bd4\u5982 CARBON-MONOXIDE-DETECTED \uff08\u53d1\u73b0\u4e00\u6c27\u5316\u78b3\uff09\u5e94\u8be5\u80fd\u591f\u88ab\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\uff08\u6570\u636e\u878d\u5408\u5668\uff09\u63a5\u6536\u5230\uff0c\u4e4b\u540e\u540e\u8005\u4f5c\u4e3a\u54cd\u5e94\u4f1a\u53d1\u9001\u4e00\u4e2a\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u7ed9\u4e00\u4e2a\u4f3a\u670d\u5668\u8282\u70b9\u4ee5 SOUND-ALARM \uff08\u6253\u5f00\u98ce\u6247\uff09\uff0c\u540c\u65f6\u4f1a\u53d1\u9001\u53e6\u4e00\u4e2a\u8c03\u7528\u7ed9\u53e6\u4e00\u4e2a\u8282\u70b9\u6765 SOUND-ALARM \uff08\u89e6\u53d1\u8b66\u62a5\uff09\uff0c\u8fd8\u53ef\u80fd\u5411\u623f\u4e3b\u53d1\u9001\u4e00\u6761\u77ed\u4fe1\u544a\u8bc9\u4ed6\u623f\u95f4\u91cc\u53d1\u73b0\u4e00\u6c27\u5316\u78b3\u8d85\u6807\u3002  \u66f4\u5e73\u5e38\u7684\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\u7684\u529f\u80fd\u53ef\u80fd\u662f\u5f53\u5bb6\u91cc\u6ca1\u6709\u4eba\u5728\u7684\u65f6\u5019\uff08\u7531\u8fd0\u52a8\u63a2\u6d4b\u5668\u62a5\u544a\u6216\u6309\u7167\u63d0\u524d\u8bbe\u5b9a\u597d\u7684\u65e5\u7a0b\u89c4\u5212\uff09\u5411\u9505\u7089\u53d1\u9001\u8fdc\u7a0b\u8c03\u7528\u6765\u964d\u4f4e\u5c4b\u5185\u7684\u6e29\u5ea6\u3002\u5de5\u4f5c\u65e5\u4e2d\u6216\u6df1\u591c\u65f6\uff0c\u5bb6\u5ead\u63a7\u5236\u5355\u5143\u53ef\u4ee5\u5411\u70ed\u6c34\u5668\u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u6765\u964d\u4f4e\u6c34\u6e29\uff0c\u540c\u65f6\u52a0\u70ed\u6d17\u7897\u673a\u7684\u7528\u6c34\u4f7f\u5b83\u5728\u7535\u8d39\u6700\u4f4e\u7684\u65f6\u5019\u8fd0\u884c\u3002  \u6240\u6709\u7684\u8fd9\u4e9b\u5bb6\u5ead\u63a7\u5236\u7cfb\u7edf\u7684\u53cd\u5e94\u548c\u65b9\u6cd5\u8c03\u7528\u4fe1\u53f7\u90fd\u5b8c\u5168\u4e0e\u6d88\u606f\u7684\u6765\u6e90\u548c\u76ee\u7684\u5730\u8bbe\u5907\u7684\u7c7b\u578b\u548c\u4f4d\u7f6e\u6ca1\u6709\u5173\u7cfb\u3002",
            "title": "\u7cfb\u7edf\u96c6\u6210"
        },
        {
            "location": "/learn/core/thin-core/#_4",
            "text": "AllJoyn \u662f\u4e00\u4e2a\u5728\u5f02\u8d28\u7cfb\u7edf\u4e0a\u90e8\u7f72\u5206\u5e03\u5f0f\u5e94\u7528\u4e3a\u76ee\u6807\u7684\u53ef\u4ee5\u5e7f\u6cdb\u4f7f\u7528\u7684\u7cfb\u7edf\u67b6\u6784\u3002AJTCL \u4f7f\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ef\u4ee5\u53c2\u4e0e\u5230 AllJoyn \u7684\u5206\u5e03\u5f0f\u603b\u7ebf\u4e2d\u6765\u5e76\u4e14\u5411\u7cfb\u7edf\u4e2d\u7684\u5176\u5b83\u7ec4\u4ef6\u4ee5\u62bd\u8c61\u670d\u52a1\u7684\u65b9\u5f0f\u516c\u5f00\uff0c\u800c\u8fd9\u5bf9\u4e8e\u4ee5\u5f80\u7684\u5f00\u53d1\u8005\u6765\u8bb2\u5728\u8fd9\u7c7b\u5f02\u8d28\u6027\u7684\u7cfb\u7edf\u4e0a\u53bb\u5b9e\u73b0\u5c06\u662f\u975e\u5e38\u56f0\u96be\u7684\u3002\u8fd9\u4e00\u9014\u5f84\u4f7f\u5e94\u7528\u5f00\u53d1\u8005\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u5177\u4f53\u7684\u5185\u5bb9\u5e94\u7528\u7684\u5f00\u53d1\u800c\u4e0d\u9700\u8981\u5927\u91cf\u7684\u5e95\u5c42\u5d4c\u5165\u5f0f\u7cfb\u7edf\u6216\u7f51\u7edc\u7684\u5f00\u53d1\u7ecf\u9a8c\u3002  AllJoyn \u7cfb\u7edf\u662f\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u8fdb\u884c\u8bbe\u8ba1\u7684\uff0c\u4e0d\u4f1a\u6709 ad-hoc \u7cfb\u7edf\u4e2d\u90a3\u6837\u4ece\u5927\u91cf\u788e\u7247\u62fc\u51d1\u5728\u4e00\u8d77\u65f6\u9047\u5230\u7684\u7ee7\u627f\u6027\u7684\u75db\u82e6\u3002\u6211\u4eec\u76f8\u4fe1 AllJoyn \u7cfb\u7edf\u53ef\u4ee5\u4f7f\u6709\u5d4c\u5165\u5f0f\u7cfb\u7edf\u6a21\u5757\u53c2\u4e0e\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u5f00\u53d1\u4e0e\u90e8\u7f72\u76f8\u8f83\u4e8e\u5176\u5b83\u5e73\u53f0\u66f4\u4e3a\u7b80\u5355\u9ad8\u6548\u3002",
            "title": "\u603b\u7ed3"
        },
        {
            "location": "/learn/core/thin-core/#_5",
            "text": "\u5982\u60f3\u83b7\u53d6\u66f4\u591a\u5173\u4e8e\u5982\u4f55\u5c06 AllJoyn \u67b6\u6784\u96c6\u6210\u5230\u4f60\u7684\u5f00\u53d1\u9879\u76ee\u4e2d\u7684\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee  AllSeen Alliance web site  \u4ee5\u83b7\u5f97\u76f8\u5173\u6587\u6863\u6216\u4e0b\u8f7d\u5185\u5bb9\u3002   Introductory guides\uff08\u4ecb\u7ecd\u5bfc\u8bfb\uff09 - \u63cf\u8ff0 AllJoyn \u6280\u672f\u4e0e\u6982\u5ff5  Development guides\uff08\u5f00\u53d1\u5bfc\u8bfb\uff09 - \u63d0\u4f9b\u5efa\u7acb\u7f16\u8bd1\u73af\u5883\u7684\u6b65\u9aa4\u5e76\u63d0\u4f9b\u7279\u5b9a\u7f16\u7a0b\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u5305\u62ec\u6e90\u4ee3\u7801\u7247\u6bb5\u4e0e\u8be6\u7ec6\u89e3\u91ca\u3002  API references \uff08API \u53c2\u8003\uff09- \u63d0\u4f9b\u4f7f\u7528 AllJoyn \u6e90\u4ee3\u7801\u7684\u8be6\u7ec6\u8bf4\u660e\u4ee5\u53ca\u4f7f\u7528\u5404\u4e2a\u652f\u6301\u7684\u8bed\u8a00\u7f16\u5199\u7684\u5e94\u7528\u3002  Downloads \uff08\u4e0b\u8f7d\uff09- \u8f6f\u4ef6\u5f00\u53d1\u5957\u4ef6 (SDK)\u7528\u4ee5\u63d0\u4f9b\u7528\u6237\u7f16\u8bd1\u3001\u66f4\u6539\u3001\u6d4b\u8bd5\u4ee5\u53ca\u6267\u884c\u7279\u5b9a\u4efb\u52a1\u6240\u9700\u7684\u8d44\u6e90\u3002",
            "title": "\u83b7\u53d6\u66f4\u591a\u4fe1\u606f"
        },
        {
            "location": "/learn/core/about-announcement/",
            "text": "About Announcement About Announcement\n\n\nAbout Announcements enables a device or app to announce itself on the\nAllJoyn\n network for other devices and apps to discover. The following information\nis shared:\nAbout Announcement \u4e3a\u8bbe\u5907\u6216\u8005\u5e94\u7528\u63d0\u4f9b\u4e86\u5728 AllJoyn\n \u7f51\u7edc\u4e2d\u5e7f\u64ad\u81ea\u5df1\u7684\u529f\u80fd\uff0c\u4ee5\u4fbf\u5176\u4ed6\u8bbe\u5907\u548c\u5e94\u7528\u53d1\u73b0\u3002\u4ee5\u4e0b\u4fe1\u606f\u5c06\u53ef\u4ee5\u88ab\u5206\u4eab\uff1a\n\n\n\n\nApp and Device Friendly Names\n\n\nMake, Model, Version, Description \n\n\nSupported Languages\n\n\nApp Icon\n\n\nSupported objects and interfaces\n\n\nService Port number\n\n\nApp and Device unique identifiers\n\n\n\u5e94\u7528\u548c\u8bbe\u5907\u7684\u522b\u540d\n\n\nMake\uff0c\u6a21\u578b\uff0c\u7248\u672c\uff0c\u63cf\u8ff0\n\n\n\u652f\u6301\u7684\u8bed\u8a00\n\n\n\u5e94\u7528\u56fe\u6807\n\n\n\u652f\u6301\u7684\u5bf9\u8c61\u548c\u63a5\u53e3\n\n\n\u670d\u52a1\u7aef\u53e3\u53f7\n\n\n\u5e94\u7528\u548c\u8bbe\u5907\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n\n\n\n\n\u67e5\u770b\nInterface Definiton\n\u4ee5\u83b7\u53d6\u5b8c\u6574\u5217\u8868\u3002\n\n\nThe About feature supports multiple languages, so the client can display the language\nthat is most appropriate for the user. With the About feature, a client can discover\ndevices and apps on the network, get some meta data about the device/app,\ndiscover the services it supports, and get an icon to represent the device/app.\nAbout \u529f\u80fd\u652f\u6301\u591a\u79cd\u8bed\u8a00\uff0c\u6240\u4ee5\u5ba2\u6237\u7aef\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u6700\u9002\u5408\u7684\u8bed\u8a00\u5c55\u793a\u7ed9\u7528\u6237\u3002About \u529f\u80fd\u53ef\u4ee5\u5b9e\u73b0\uff1a\u67d0\u4e2a\u5ba2\u6237\u7aef\u80fd\u591f\u53d1\u73b0\u7f51\u7edc\u4e0a\u7684\u8bbe\u5907\u548c\u5e94\u7528\uff0c\u5f97\u5230\u4e00\u4e9b\u8bbe\u5907\u6216\u5e94\u7528\u7684\u5143\u6570\u636e\uff0c\u53d1\u73b0\u4ed6\u6240\u652f\u6301\u7684\u670d\u52a1\uff0c\u5e76\u83b7\u53d6\u4e00\u4e2a\u53ef\u4ee5\u4ee3\u8868\u8be5\u8bbe\u5907\u6216\u5e94\u7528\u7684\u56fe\u6807\u3002\n\n\n\u6982\u5ff5\u548c\u672f\u8bed\n\n\nGenerally speaking, there are two sides to the About feature:\n\n About Server. This is the device or app that is announcing itself.\n\n About Client. This is the device or app that is discovering apps/devices.\n\u901a\u5e38\u6765\u8bf4\uff0cAbout \u529f\u80fd\u6709\u4e24\u4e2a\u90e8\u5206\uff1a\n\n About Server. \u81ea\u5df1\u53d1\u5e03\u5e7f\u64ad\u7684\u8bbe\u5907\u6216\u5e94\u7528\u3002\n\n About Client. \u53d1\u73b0\u5176\u4ed6\u5e94\u7528\u6216\u8bbe\u5907\u7684\u5e94\u7528\u6216\u8bbe\u5907\u3002\n\n\nHow It Works \u8fd0\u884c\u65b9\u5f0f\n\n\nHere's roughly what happens behind the scenes:\u5e55\u540e\u5927\u81f4\u53d1\u751f\u4e86\u4ec0\u4e48\uff1a\n\n\n\n\nAn About Server announces itself by sending a sessionless signal including:\n   the session port, list of objects and interfaces; and a subset of the About\n   Announcement information, including App and Device Name, default language,\n   App and Device unique identiers.\n\n\n\n\nAbout Server \u901a\u8fc7\u53d1\u9001 sessionless signal \u5e7f\u64ad\u81ea\u5df1\u3002Sessionless signal \u5305\u542b\u4e86\u5bf9\u8c61\u548c\u63a5\u53e3\u7684\u5217\u8868\uff1bAbout Annoucement \u4fe1\u606f\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u8be5\u4fe1\u606f\u5305\u542b\u4e86\u5e94\u7528\u548c\u8bbe\u5907\u540d\uff0c\u9ed8\u8ba4\u8bed\u8a00\uff0c\u5e94\u7528\u7a0b\u5e8f\u548c\u8bbe\u5907\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n\n\n\n\n\n\nAn About Client discovers the sessionless signal, which includes the information\n   listed above. The client can now display some information about the discovered\n   device/app, App/Device Name and supported services.\n2\uff0cAbout \u5ba2\u6237\u7aef\u53d1\u73b0\u5305\u542b\u4ee5\u4e0a\u4fe1\u606f\u7684 sessionless signal\u3002\u5ba2\u6237\u7aef\u80fd\u591f\u5c55\u793a\u4e00\u4e9b\u5173\u4e8e\u88ab\u53d1\u73b0\u8bbe\u5907\uff0f\u5e94\u7528\u7684\u4fe1\u606f\uff0c\u5e94\u7528\uff0f\u8bbe\u5907\u540d\u548c\u652f\u6301\u7684\u670d\u52a1\u3002\n\n\n\n\nOptionally, the About Client can connect to the app/device's About Server\n   on the service port to extract more information. Typically, this is done\n   to get the app icon.\n\n\n\uff08\u53ef\u9009\uff09About\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7\u8fde\u63a5\u5e94\u7528\uff0f\u8bbe\u5907\u7684 About \u670d\u52a1\u5668\u7684\u670d\u52a1\u7aef\u53e3\u6765\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002\u901a\u5e38\uff0c\u8fd9\u4e2a\u6b65\u9aa4\u662f\u7528\u6765\u83b7\u5f97\u5e94\u7528\u56fe\u6807\u3002\n\n\n\n\nLearn More \u4e86\u89e3\u66f4\u591a\n\n\n\n\n\u4e86\u89e3\u66f4\u591a\u5173\u4e8e About Interface Definition\n\n\n\u4e0b\u8f7d SDK\n, \nbuild\n \u548c\n  \n\u8fd0\u884c\u793a\u4f8b\u5e94\u7528\n\n\n\u4e86\u89e3\u66f4\u591a\u5173\u4e8e About API",
            "title": "Home"
        },
        {
            "location": "/learn/core/about-announcement/#about-announcement-about-announcement",
            "text": "About Announcements enables a device or app to announce itself on the\nAllJoyn  network for other devices and apps to discover. The following information\nis shared:\nAbout Announcement \u4e3a\u8bbe\u5907\u6216\u8005\u5e94\u7528\u63d0\u4f9b\u4e86\u5728 AllJoyn  \u7f51\u7edc\u4e2d\u5e7f\u64ad\u81ea\u5df1\u7684\u529f\u80fd\uff0c\u4ee5\u4fbf\u5176\u4ed6\u8bbe\u5907\u548c\u5e94\u7528\u53d1\u73b0\u3002\u4ee5\u4e0b\u4fe1\u606f\u5c06\u53ef\u4ee5\u88ab\u5206\u4eab\uff1a   App and Device Friendly Names  Make, Model, Version, Description   Supported Languages  App Icon  Supported objects and interfaces  Service Port number  App and Device unique identifiers  \u5e94\u7528\u548c\u8bbe\u5907\u7684\u522b\u540d  Make\uff0c\u6a21\u578b\uff0c\u7248\u672c\uff0c\u63cf\u8ff0  \u652f\u6301\u7684\u8bed\u8a00  \u5e94\u7528\u56fe\u6807  \u652f\u6301\u7684\u5bf9\u8c61\u548c\u63a5\u53e3  \u670d\u52a1\u7aef\u53e3\u53f7  \u5e94\u7528\u548c\u8bbe\u5907\u7684\u552f\u4e00\u6807\u8bc6\u7b26   \u67e5\u770b Interface Definiton \u4ee5\u83b7\u53d6\u5b8c\u6574\u5217\u8868\u3002  The About feature supports multiple languages, so the client can display the language\nthat is most appropriate for the user. With the About feature, a client can discover\ndevices and apps on the network, get some meta data about the device/app,\ndiscover the services it supports, and get an icon to represent the device/app.\nAbout \u529f\u80fd\u652f\u6301\u591a\u79cd\u8bed\u8a00\uff0c\u6240\u4ee5\u5ba2\u6237\u7aef\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u6700\u9002\u5408\u7684\u8bed\u8a00\u5c55\u793a\u7ed9\u7528\u6237\u3002About \u529f\u80fd\u53ef\u4ee5\u5b9e\u73b0\uff1a\u67d0\u4e2a\u5ba2\u6237\u7aef\u80fd\u591f\u53d1\u73b0\u7f51\u7edc\u4e0a\u7684\u8bbe\u5907\u548c\u5e94\u7528\uff0c\u5f97\u5230\u4e00\u4e9b\u8bbe\u5907\u6216\u5e94\u7528\u7684\u5143\u6570\u636e\uff0c\u53d1\u73b0\u4ed6\u6240\u652f\u6301\u7684\u670d\u52a1\uff0c\u5e76\u83b7\u53d6\u4e00\u4e2a\u53ef\u4ee5\u4ee3\u8868\u8be5\u8bbe\u5907\u6216\u5e94\u7528\u7684\u56fe\u6807\u3002",
            "title": "About Announcement About Announcement"
        },
        {
            "location": "/learn/core/about-announcement/#_1",
            "text": "Generally speaking, there are two sides to the About feature:  About Server. This is the device or app that is announcing itself.  About Client. This is the device or app that is discovering apps/devices.\n\u901a\u5e38\u6765\u8bf4\uff0cAbout \u529f\u80fd\u6709\u4e24\u4e2a\u90e8\u5206\uff1a  About Server. \u81ea\u5df1\u53d1\u5e03\u5e7f\u64ad\u7684\u8bbe\u5907\u6216\u5e94\u7528\u3002  About Client. \u53d1\u73b0\u5176\u4ed6\u5e94\u7528\u6216\u8bbe\u5907\u7684\u5e94\u7528\u6216\u8bbe\u5907\u3002",
            "title": "\u6982\u5ff5\u548c\u672f\u8bed"
        },
        {
            "location": "/learn/core/about-announcement/#how-it-works",
            "text": "Here's roughly what happens behind the scenes:\u5e55\u540e\u5927\u81f4\u53d1\u751f\u4e86\u4ec0\u4e48\uff1a   An About Server announces itself by sending a sessionless signal including:\n   the session port, list of objects and interfaces; and a subset of the About\n   Announcement information, including App and Device Name, default language,\n   App and Device unique identiers.   About Server \u901a\u8fc7\u53d1\u9001 sessionless signal \u5e7f\u64ad\u81ea\u5df1\u3002Sessionless signal \u5305\u542b\u4e86\u5bf9\u8c61\u548c\u63a5\u53e3\u7684\u5217\u8868\uff1bAbout Annoucement \u4fe1\u606f\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u8be5\u4fe1\u606f\u5305\u542b\u4e86\u5e94\u7528\u548c\u8bbe\u5907\u540d\uff0c\u9ed8\u8ba4\u8bed\u8a00\uff0c\u5e94\u7528\u7a0b\u5e8f\u548c\u8bbe\u5907\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002    An About Client discovers the sessionless signal, which includes the information\n   listed above. The client can now display some information about the discovered\n   device/app, App/Device Name and supported services.\n2\uff0cAbout \u5ba2\u6237\u7aef\u53d1\u73b0\u5305\u542b\u4ee5\u4e0a\u4fe1\u606f\u7684 sessionless signal\u3002\u5ba2\u6237\u7aef\u80fd\u591f\u5c55\u793a\u4e00\u4e9b\u5173\u4e8e\u88ab\u53d1\u73b0\u8bbe\u5907\uff0f\u5e94\u7528\u7684\u4fe1\u606f\uff0c\u5e94\u7528\uff0f\u8bbe\u5907\u540d\u548c\u652f\u6301\u7684\u670d\u52a1\u3002   Optionally, the About Client can connect to the app/device's About Server\n   on the service port to extract more information. Typically, this is done\n   to get the app icon.  \uff08\u53ef\u9009\uff09About\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7\u8fde\u63a5\u5e94\u7528\uff0f\u8bbe\u5907\u7684 About \u670d\u52a1\u5668\u7684\u670d\u52a1\u7aef\u53e3\u6765\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002\u901a\u5e38\uff0c\u8fd9\u4e2a\u6b65\u9aa4\u662f\u7528\u6765\u83b7\u5f97\u5e94\u7528\u56fe\u6807\u3002",
            "title": "How It Works \u8fd0\u884c\u65b9\u5f0f"
        },
        {
            "location": "/learn/core/about-announcement/#learn-more",
            "text": "\u4e86\u89e3\u66f4\u591a\u5173\u4e8e About Interface Definition  \u4e0b\u8f7d SDK ,  build  \u548c\n   \u8fd0\u884c\u793a\u4f8b\u5e94\u7528  \u4e86\u89e3\u66f4\u591a\u5173\u4e8e About API",
            "title": "Learn More \u4e86\u89e3\u66f4\u591a"
        },
        {
            "location": "/learn/core/about-announcement/interface-14-02/",
            "text": "About Interface Specification - 14.02\n\n\nWarning: This is not the latest interface definition.\n\n\nGo here for latest About Interface Definition\n\n\nIntroduction\n\n\nPurpose\n\n\nThis document describes the specification of the AllJoyn\n \nAbout interface. This interface is required by an application \nto provide the discovery mechanism for the service framework\ninterfaces that it supports, as well as providing the basic \nidentification information.\n\n\nScope\n\n\nThis document is targeted to the developers for AllJoyn applications.\n\n\nReferences\n\n\nExcept for RFCs, the following are reference documents found \non the AllSeen Alliance web site's Docs/Downloads section.\n\n\n\n\nAllJoyn\n Framework Tutorial\n\n\nIntroduction to AllJoyn\n Thin Client\n\n\nRFC 5646 (Tags for Identifying Languages)\n\n\n\n\nSpecificationion Overview\n\n\nThe About interface is to be implemented by an application \non a target device. This interface allows the app to advertise \nitself so other apps can discover it. Figure 1 illustrates \nthe relationship between a client app and a service app.\n\n\n\n\nFigure: About feature architecture within the AllJoyn framework\n\n\nDiscovery\n\n\nA client can discover the app via an announcement which is a \nsessionless signal containing the basic app information like \napp name, device name, manufacturer, and model number. The \nannouncement also contains the list of object paths and service \nframework interfaces to allow the client to determine whether \nthe app provides functionality of interest.\n\n\nIn addition to the sessionless announcement, the About interface \nalso provides the on-demand method calls to retrieve all the \navailable metadata about the app that are not published in \nthe announcement.\n\n\nDiscovery Call Flows\n\n\nTypical discovery flow\n\n\nFigure  2 illustrates a typical call flow for a client \nto discover a service app. The client merely relies on the \nsessionless announcement to decide whether to connect to the \nservice app to use its service framework offering.\n\n\n\n\nFigure: Typical discovery flow (client discovers a service app)\n\n\nNontypical discovery flow\n\n\nFigure 3 illustrates a call flow for a client to \ndiscover a service app and make a request for more detailed information.\n\n\n\n\nFigure: Nontypical discovery call flow\n\n\nError Handling\n\n\nThe method calls in the About interface will use the AllJoyn \nerror message handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE) \nto set the error name and error message.\n\n\nTable 1 lists the possible errors raised by the About interface.\n\n\nTable 1: About interface error handling\n\n\n\n\n\n\n\n\nError name\n\n\nError message\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.LanguageNotSupported\n\n\nThe language specified is not supported\n\n\n\n\n\n\n\n\nAbout Interface\n\n\n\n\n\n\n\n\nInterface name\n\n\nVersion\n\n\nSecured\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.About\n\n\n1\n\n\nno\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty name\n\n\nSignature\n\n\nList of values\n\n\nWritable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nno\n\n\nInterface version number\n\n\n\n\n\n\n\n\nMethods\n\n\nThe following methods are exposed by a BusObject that implements \nthe org.alljoyn.About interface.\n\n\nGetAboutData\n\n\nInputs\n\n\n\n\n\n\n\n\nParameter name\n\n\nMandatory\n\n\nSignature\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlanguageTag\n\n\nyes\n\n\ns\n\n\nIETF language tags specified by RFC 5646.\n\n\nThe desired language.\n\n\n\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\n\nReturn signature\n\n\nMandatory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na{sv}\n\n\nyes\n\n\nA dictionary of the available metadata fields. If language tag is not specified (i.e., \"\"), metadata fields based on default language are returned.\n\n\n\n\n\n\n\n\n\n\nIf a language tag is not supported, the error org.alljoyn.Error.LanguageNotSupported is returned.\n\n\n\n\n\n\n\n\nDescription\n\n\nRetrieve the list of available metadata fields based on the language tag.\n\n\nField information\n\n\nTable 2 lists the names of the metadata fields. \nThe fields with a yes value in the Announced column will also \nbe published via the Announce signal. See \nSignals\n \nfor more information.\n\n\nTable 2: About interface data fields\n\n\n\n\n\n\n\n\nField name\n\n\nRequired\n\n\nAnnounced\n\n\nLocalized\n\n\nSignature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nappId\n\n\nyes\n\n\nyes\n\n\nno\n\n\nay\n\n\nThe globally unique identifier for the application.\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\nThe default language supported by the device. Specified as an IETF language tag listed in RFC 5646.\n\n\n\n\n\n\nDeviceName\n\n\nyes\n\n\nyes\n\n\nyes\n\n\ns\n\n\nName of the device set by platform-specific means (such as Linux and Android).\n\n\n\n\n\n\nDeviceId\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\nDevice identifier set by platform-specific means.\n\n\n\n\n\n\nAppName\n\n\nyes\n\n\nyes\n\n\nyes\n\n\ns\n\n\nApplication name assigned by the app manufacturer (developer or the OEM).\n\n\n\n\n\n\nManufacturer\n\n\nyes\n\n\nyes\n\n\nyes\n\n\ns\n\n\nThe manufacturer's name of the app.\n\n\n\n\n\n\nModelNumber\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\nThe app model number.\n\n\n\n\n\n\nSupportedLanguages\n\n\nyes\n\n\nno\n\n\nno\n\n\nas\n\n\nList of supported languages.\n\n\n\n\n\n\nDescription\n\n\nyes\n\n\nno\n\n\nyes\n\n\ns\n\n\nDetailed description expressed in language tags as in RFC 5646.\n\n\n\n\n\n\nDateOfManufacture\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\nDate of manufacture using format YYYY-MM-DD (known as XML DateTime format).\n\n\n\n\n\n\nSoftwareVersion\n\n\nyes\n\n\nno\n\n\nno\n\n\ns\n\n\nSoftware version of the app.\n\n\n\n\n\n\nAJSoftwareVersion\n\n\nyes\n\n\nno\n\n\nno\n\n\ns\n\n\nCurrent version of the AllJoyn SDK used by the application.\n\n\n\n\n\n\nHardwareVersion\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\nHardware version of the device on which the app is running.\n\n\n\n\n\n\nSupportUrl\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\nSupport URL (populated by the manufacturer).\n\n\n\n\n\n\n\n\nGetObjectDescription\n\n\nInputs\n\n\nNone.\n\n\nOutput\n\n\n\n\n\n\n\n\nReturn signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na(oas)\n\n\nReturn the array of object paths and the list of supported interfaces provided by each object.\n\n\n\n\n\n\n\n\nDescription\n\n\nRetrieve the object paths and the list of all interfaces \nimplemented by each of objects.\n\n\nSignals\n\n\n\n\n\n\n\n\nSignal name\n\n\nParameters\n\n\nSessionless\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nName\n / \nSignature\n\n\n\n\n\n\n\n\n\n\nAnnounce\n\n\n(listed below)\n\n\nyes\n\n\nThis signal is used to announce the application information and the service framework interfaces that it supports. The following information is provided in the signal:\n\n\n\n\n\n\n\n\nversion / q\n\n\n\n\n* version - Version number of the About interface.\n\n\n\n\n\n\n\n\nport / q\n\n\n\n\n* port - Session port. The app will listen on this port for incoming sessions.\n\n\n\n\n\n\n\n\nobjectDescription / a(oas)\n\n\n\n\n* objectDescription --Array of object paths and the list of supported interfaces provided by each object.\n\n\n\n\n\n\n\n\nmetaData / a{sv}\n\n\n\n\n* metaData - Metadata. All the fields listed in \nField information\n with a yes value in the Announced column are provided in this signal.\n\n\n\n\n\n\n\n\nAllJoyn Introspection XML\n\n\nnode name=\n/About\n xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttp://www.allseenalliance.org/schemas/ introspect.xsd\n\n   \ninterface name=\norg.alljoyn.About\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nmethod name=\nGetAboutData\n\n         \narg name=\nlanguageTag\n type=\ns\n direction=\nin\n/\n\n         \narg name=\naboutData\n type=\na{sv}\n direction=\nout\n/\n\n      \n/method\n\n      \nmethod name=\nGetObjectDescription\n\n         \narg name=\nobjectDescription\n type=\na(sas)\n direction=\nout\n/\n\n      \n/method\n\n      \nsignal name=\nAnnounce\n\n         \narg name=\nversion\n type=\nq\n/\n\n         \narg name=\nport\n type=\nq\n/\n\n         \narg name=\nobjectDescription\n type=\na(sas)\n/\n\n         \narg name=\nmetaData\n type=\na{sv}\n/\n\n      \n/signal\n\n   \n/interface\n\n\n/node",
            "title": "Interface 14 02"
        },
        {
            "location": "/learn/core/about-announcement/interface-14-02/#about-interface-specification-1402",
            "text": "Warning: This is not the latest interface definition.  Go here for latest About Interface Definition",
            "title": "About Interface Specification - 14.02"
        },
        {
            "location": "/learn/core/about-announcement/interface-14-02/#introduction",
            "text": "Purpose  This document describes the specification of the AllJoyn  \nAbout interface. This interface is required by an application \nto provide the discovery mechanism for the service framework\ninterfaces that it supports, as well as providing the basic \nidentification information.  Scope  This document is targeted to the developers for AllJoyn applications.  References  Except for RFCs, the following are reference documents found \non the AllSeen Alliance web site's Docs/Downloads section.   AllJoyn  Framework Tutorial  Introduction to AllJoyn  Thin Client  RFC 5646 (Tags for Identifying Languages)",
            "title": "Introduction"
        },
        {
            "location": "/learn/core/about-announcement/interface-14-02/#specificationion-overview",
            "text": "The About interface is to be implemented by an application \non a target device. This interface allows the app to advertise \nitself so other apps can discover it. Figure 1 illustrates \nthe relationship between a client app and a service app.   Figure: About feature architecture within the AllJoyn framework",
            "title": "Specificationion Overview"
        },
        {
            "location": "/learn/core/about-announcement/interface-14-02/#discovery",
            "text": "A client can discover the app via an announcement which is a \nsessionless signal containing the basic app information like \napp name, device name, manufacturer, and model number. The \nannouncement also contains the list of object paths and service \nframework interfaces to allow the client to determine whether \nthe app provides functionality of interest.  In addition to the sessionless announcement, the About interface \nalso provides the on-demand method calls to retrieve all the \navailable metadata about the app that are not published in \nthe announcement.",
            "title": "Discovery"
        },
        {
            "location": "/learn/core/about-announcement/interface-14-02/#discovery-call-flows",
            "text": "Typical discovery flow  Figure  2 illustrates a typical call flow for a client \nto discover a service app. The client merely relies on the \nsessionless announcement to decide whether to connect to the \nservice app to use its service framework offering.   Figure: Typical discovery flow (client discovers a service app)  Nontypical discovery flow  Figure 3 illustrates a call flow for a client to \ndiscover a service app and make a request for more detailed information.   Figure: Nontypical discovery call flow",
            "title": "Discovery Call Flows"
        },
        {
            "location": "/learn/core/about-announcement/interface-14-02/#error-handling",
            "text": "The method calls in the About interface will use the AllJoyn \nerror message handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE) \nto set the error name and error message.  Table 1 lists the possible errors raised by the About interface.  Table 1: About interface error handling     Error name  Error message      org.alljoyn.Error.LanguageNotSupported  The language specified is not supported",
            "title": "Error Handling"
        },
        {
            "location": "/learn/core/about-announcement/interface-14-02/#about-interface",
            "text": "Interface name  Version  Secured      org.alljoyn.About  1  no     Properties     Property name  Signature  List of values  Writable  Description      Version  q  Positive integers  no  Interface version number     Methods  The following methods are exposed by a BusObject that implements \nthe org.alljoyn.About interface.  GetAboutData  Inputs     Parameter name  Mandatory  Signature  List of values  Description      languageTag  yes  s  IETF language tags specified by RFC 5646.  The desired language.     Output     Return signature  Mandatory  Description      a{sv}  yes  A dictionary of the available metadata fields. If language tag is not specified (i.e., \"\"), metadata fields based on default language are returned.      If a language tag is not supported, the error org.alljoyn.Error.LanguageNotSupported is returned.     Description  Retrieve the list of available metadata fields based on the language tag.  Field information  Table 2 lists the names of the metadata fields. \nThe fields with a yes value in the Announced column will also \nbe published via the Announce signal. See  Signals  \nfor more information.  Table 2: About interface data fields     Field name  Required  Announced  Localized  Signature  Description      appId  yes  yes  no  ay  The globally unique identifier for the application.    DefaultLanguage  yes  yes  no  s  The default language supported by the device. Specified as an IETF language tag listed in RFC 5646.    DeviceName  yes  yes  yes  s  Name of the device set by platform-specific means (such as Linux and Android).    DeviceId  yes  yes  no  s  Device identifier set by platform-specific means.    AppName  yes  yes  yes  s  Application name assigned by the app manufacturer (developer or the OEM).    Manufacturer  yes  yes  yes  s  The manufacturer's name of the app.    ModelNumber  yes  yes  no  s  The app model number.    SupportedLanguages  yes  no  no  as  List of supported languages.    Description  yes  no  yes  s  Detailed description expressed in language tags as in RFC 5646.    DateOfManufacture  no  no  no  s  Date of manufacture using format YYYY-MM-DD (known as XML DateTime format).    SoftwareVersion  yes  no  no  s  Software version of the app.    AJSoftwareVersion  yes  no  no  s  Current version of the AllJoyn SDK used by the application.    HardwareVersion  no  no  no  s  Hardware version of the device on which the app is running.    SupportUrl  no  no  no  s  Support URL (populated by the manufacturer).     GetObjectDescription  Inputs  None.  Output     Return signature  Description      a(oas)  Return the array of object paths and the list of supported interfaces provided by each object.     Description  Retrieve the object paths and the list of all interfaces \nimplemented by each of objects.  Signals     Signal name  Parameters  Sessionless  Description       Name  /  Signature      Announce  (listed below)  yes  This signal is used to announce the application information and the service framework interfaces that it supports. The following information is provided in the signal:     version / q   * version - Version number of the About interface.     port / q   * port - Session port. The app will listen on this port for incoming sessions.     objectDescription / a(oas)   * objectDescription --Array of object paths and the list of supported interfaces provided by each object.     metaData / a{sv}   * metaData - Metadata. All the fields listed in  Field information  with a yes value in the Announced column are provided in this signal.",
            "title": "About Interface"
        },
        {
            "location": "/learn/core/about-announcement/interface-14-02/#alljoyn-introspection-xml",
            "text": "node name= /About  xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= http://www.allseenalliance.org/schemas/ introspect.xsd \n    interface name= org.alljoyn.About \n       property name= Version  type= q  access= read / \n       method name= GetAboutData \n          arg name= languageTag  type= s  direction= in / \n          arg name= aboutData  type= a{sv}  direction= out / \n       /method \n       method name= GetObjectDescription \n          arg name= objectDescription  type= a(sas)  direction= out / \n       /method \n       signal name= Announce \n          arg name= version  type= q / \n          arg name= port  type= q / \n          arg name= objectDescription  type= a(sas) / \n          arg name= metaData  type= a{sv} / \n       /signal \n    /interface  /node",
            "title": "AllJoyn Introspection XML"
        },
        {
            "location": "/learn/core/about-announcement/interface/",
            "text": "About Feature Interface Definitions About\u529f\u80fd\u63a5\u53e3\u5b9a\u4e8e\n\n\nRelease History \u53d1\u5e03\u5386\u53f2\n\n\nTo access a previous version of this document, click the release version link below.\n\u70b9\u51fb\u4e0b\u65b9\u53d1\u884c\u7248\u672c\u8fde\u63a5\u6765\u83b7\u53d6\u8be5\u6587\u6863\u7684\u5386\u53f2\u7248\u672c\u3002\n\n\n\n\n\n\n\n\nRelease version\n\n\nDate\n\n\nWhat changed\n\n\n\n\n\n\n\n\n\n\n14.02\n\n\n2/28/2014\n\n\n\u9996\u4e2a About \u63a5\u53e3\u88ab\u52a0\u5165\n\n\n\n\n\n\n14.06\n\n\n6/30/2014\n\n\n\u65e0\u66f4\u65b0\u3002\n\n\n\n\n\n\n14.06 Update 1\n\n\n9/29/2014\n\n\n\u66f4\u65b0\u4e86\u6587\u6863\u6807\u9898\u548c Overview \u7684\u7ae0\u8282\u6807\u9898\u3002(\u4ece\u89c4\u8303\u6539\u6210\u5b9a\u4e49)\nAdded a note in the Definition Overview chapter to address the AllSeen Alliance Compliance and Certification program.\u5728Definition Overview\u4e2d\u52a0\u5165\u4e00\u4e2a\u8bf4\u660e\u6765\u63d0\u51fa AllSeen Alliance Compliance Certification\u3002\nAdded a Mandatory column for method and signal parameters to support the AllSeen Alliance Compliance and Certification program.\u6dfb\u52a0\u4e00\u4e2a\u5f3a\u5236\u5217\uff0c\u7528\u6765\u5b58\u653e\u652f\u6301AllSeen Alliance Compliance and Certification \u7a0b\u5e8f\u7684\u65b9\u6cd5\u548c\u4fe1\u53f7\u53c2\u6570\n\n\n\n\n\n\n14.12\n\n\n12/17/2014\n\n\n\u628a DeviceName \u4ece\u8981\u6c42\u6539\u6210\u4e86\u4e0d\u8981\u6c42\n\u52a0\u5165\u4e86\u4e00\u4e2a\u6307\u5b9a AppID \u5fc5\u987b\u4e3a RFC 4122 \u4e2d\u6307\u5b9a\u7684 128\uff0dbit UUID \u7684\u9a8c\u8bc1\n\u4f7f\u5bf9\u4e8e\u65b9\u6cd5\u548c\u4fe1\u53f7\u7684\u8981\u6c42\u66f4\u52a0\u660e\u786e\nIcon interface was added. The icon interface has been part of AllJoyn\n and the About Feature since 14.02; however, the interface definition documentation was not added until 14.12.\u5f15\u5165\u56fe\u6807\u63a5\u53e3\u3002\u56fe\u6807\u63a5\u53e3\u5df2\u7ecf\u662f AllJoyn\n \u548c 14.02 \u7248\u672c\u4e4b\u540e\u7684 About \u529f\u80fd\u7684\u4e00\u90e8\u5206\u3002\u7136\u800c\uff0c\u76f4\u5230 14.12\u7248\u672c\uff0c\u5b83\u7684\u63a5\u53e3\u5b9a\u4e49\u6587\u6863\u624d\u88ab\u52a0\u5165\u3002\n\n\n\n\n\n\n\n\nDefinition Overview\n\n\nThe About interface is to be implemented by an application \non a target device. This interface allows the app to advertise \nitself so other apps can discover it. The following figure \nillustrates the relationship between a client app and a service app.\nAbout \u63a5\u53e3\u662f\u7531\u5e94\u7528\u5728\u76ee\u6807\u8bbe\u5907\u4e0a\u6267\u884c\u3002\u6b64\u63a5\u53e3\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u53d1\u51fa\u5e7f\u64ad\uff0c\u4f7f\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u53d1\u73b0\u5b83\u3002\u4e0b\u56fe\u8bf4\u660e\u4e86\u5ba2\u6237\u7aef\u5e94\u7528\u548c\u670d\u52a1\u5e94\u7528\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\n\n\n\n\nFigure:\n \u5728AllJoyn\n \u67b6\u6784\u5185\u7684 About \u529f\u80fd\u7ed3\u6784\u3002\n\n\nNOTE:\n All methods and signals are considered mandatory to \nsupport the AllSeen Alliance Compliance and Certification program. \n\n\u6ce8\u610f:\n \u6240\u6709\u65b9\u6cd5\u548c\u4fe1\u53f7\u90fd\u88ab\u8ba4\u4e3a\u5f3a\u5236\u652f\u6301AllSeen Alliance Compliance and Certification program. \n\n\nDiscovery \u53d1\u73b0\n\n\nA client can discover the app via an announcement which is a \nsessionless signal containing the basic app information like \napp name, device name, manufacturer, and model number. The \nannouncement also contains the list of object paths and service \nframework interfaces to allow the client to determine whether \nthe app provides functionality of interest.\n\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7 annoucement \u53d1\u73b0\u5e94\u7528\u7a0b\u5e8f\u3002annoucement \u662f\u4e00\u79cd\u5305\u542b\u4e86\u5982\u5e94\u7528\u540d\u79f0\uff0c\u8bbe\u5907\u540d\u79f0\uff0c\u5236\u9020\u5546\u548c\u578b\u53f7\u7684\u4e00\u79cd sessionless signal\u3002annoucement \u4e5f\u5305\u542b\u4e86\u5bf9\u8c61\u8def\u5f84\u548c\u670d\u52a1\u67b6\u6784\u63a5\u53e3\u7684\u5217\u8868\uff0c\u8fd9\u4e9b\u5185\u5bb9\u4f7f\u5f97\u5ba2\u6237\u7aef\u80fd\u591f\u786e\u5b9a\u5e94\u7528\u7a0b\u5e8f\u662f\u5426\u63d0\u4f9b\u4e86\u611f\u5174\u8da3\u7684\u529f\u80fd\u3002\n\n\nIn addition to the sessionless announcement, the About interface \nalso provides the\non-demand method calls to retrieve all the available metadata \nabout the app that are not sessionless announcement  published in the announcement.\n\u9664\u4e86 sessionless announcement \u4e4b\u5916\uff0cAbout \u63a5\u53e3\u4e5f\u63d0\u4f9b\u4e86\u57fa\u4e8e\u9700\u6c42\u7684\u65b9\u6cd5\u8c03\u7528\uff0c\u4ee5\u68c0\u7d22\u7a0b\u5e8f\u7684\u53ef\u7528\u5143\u6570\u636e\u3002\u8fd9\u4e9b\u5143\u6570\u636e\u4e0d\u662f\u5728 annoucement \u4e2d\u516c\u5f00\u53d1\u5e03\u7684 sessionless annoucement\u3002\n\n\nDiscovery Call Flows\n\n\nTypical discovery flow \u5178\u578b discovery flow\n\n\nThe following figure illustrates a typical call flow for a client \nto discover a service app. The client merely relies on the \nsessionless announcement to decide whether to connect to the \nservice app to use its service framework offering.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u5ba2\u6237\u7aef\u53d1\u73b0\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u7684\u5178\u578b call flow\u3002\u5ba2\u6237\u7aef\u4ec5\u4ec5\u4f9d\u9760 sessionless announcemnt \u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u662f\u5426\u8fde\u63a5\u67d0\u4e00\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u5e76\u4f7f\u7528\u5b83\u6240\u4ee5\u63d0\u4f9b\u7684\u670d\u52a1\u67b6\u6784\u3002\n\n\n\n\n\u56fe:\n \u5178\u578b discovery flow (\u5ba2\u6237\u7aef\u53d1\u73b0\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f)\n\n\nNontypical discovery flow \u975e\u5178\u578b discovery flow\n\n\nThe following figure illustrates a call flow for a client to \ndiscover a service app and make a request for more detailed information.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u5ba2\u6237\u7aef\u53d1\u73b0\u4e00\u4e2a\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u5e76\u4e14\u8981\u6c42\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u7684 call flow\u3002\n\n\n\n\n\u56fe:\n Nontypical discovery call flow \u975e\u5178\u578b discovery call flow\n\n\nError Handling \u9519\u8bef\u5904\u7406\n\n\nThe method calls in the About interface will use the AllJoyn \nerror message handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE) \nto set the error name and error message.\nAbout \u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u8c03\u7528\u9700\u8981\u7528\u5230 AllJoyn \u9519\u8bef\u5904\u7406\u529f\u80fd\u6765\u8bbe\u7f6e\u9519\u8bef\u540d\u79f0\u548c\u9519\u8bef\u4fe1\u606f\u3002\n\n\n\n\n\n\n\n\n\u9519\u8bef\u540d\u79f0\n\n\n\u9519\u8bef\u4fe1\u606f\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.LanguageNotSupported\n\n\n\u6307\u5b9a\u7684\u8bed\u8a00\u4e0d\u53d7\u652f\u6301\n\n\n\n\n\n\n\n\nAbout Interface About \u63a5\u53e3\n\n\n\n\n\n\n\n\n\u63a5\u53e3\u540d\u79f0\n\n\n\u7248\u672c\n\n\n\u662f\u5426\u53d7\u4fdd\u62a4\n\n\n\u5bf9\u8c61\u8def\u5f84\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.About\n\n\n1\n\n\nno\n\n\n/About\n\n\n\n\n\n\n\n\nProperties \u5c5e\u6027\n\n\n\n\n\n\n\n\n\u5c5e\u6027\u540d\u79f0\n\n\n\u7b7e\u540d\n\n\n\u6709\u6548\u503c\n\n\n\u8bfb\u5199\u6743\u9650\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\nPositive integers\n\n\nRead Only\n\n\n\u63a5\u53e3\u7248\u672c\u53f7\n\n\n\n\n\n\n\n\nMethods \u65b9\u6cd5\n\n\nThe following methods are exposed by a BusObject that implements \nthe \norg.alljoyn.About\n interface.\n\u4ee5\u4e0b methods \u7531\u63d0\u4f9b \norg.alljoyn.About\n \u63a5\u53e3\u7684 BusObject \u53d1\u5e03\u3002\n\n\na{sv} GetAboutData('s')\n\n\nMessage arguments\n \nMessage \u53c2\u6570\n \n\n\n\n\n\n\n\n\nArgument\n\n\n\u53c2\u6570\u540d\u79f0\n\n\n\u7b7e\u540d\n\n\n\u6709\u6548\u503c\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\n0\n\n\nlanguageTag\n\n\ns\n\n\nIETF language tags specified by \nRFC 5646\n.\n\n\n\u6240\u9700\u8bed\u8a00\n\n\n\n\n\n\n\n\nReply arguments\n \nReply \u53c2\u6570\n\n\n\n\n\n\n\n\nArgument\n\n\nParameter name\n\n\nReturn signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nAboutData\n\n\na{sv}\n\n\n\u53ef\u7528\u7684\u5143\u6570\u636e\u5b57\u6bb5\u7684\u5b57\u5178\u3002\u5982\u679c\u4e0d\u6307\u5b9a\u8bed\u8a00\u6807\u7b7e\uff0c (\u5982, \"\"), \u5c06\u8fd4\u56de\u57fa\u4e8e\u9ed8\u8ba4\u8bed\u8a00\u7684\u5143\u6570\u636e\u5b57\u6bb5\u3002\n\n\n\n\n\n\n\n\nError reply\n \nError \u56de\u590d\n\n\n\n\n\n\n\n\nError\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Error.LanguageNotSupported\n\n\n\u5728\u8bed\u8a00\u6807\u7b7e\u4e0d\u88ab\u652f\u6301\u65f6\u8fd4\u56de\n\n\n\n\n\n\n\n\nDescription\n \n\u63cf\u8ff0\n\n\nRetrieve the list of available AboutData fields based on the language tag. see \nAbout data interface fields\n\n\u68c0\u7d22\u53ef\u7528\u7684\u57fa\u4e8e\u8bed\u8a00\u6807\u7b7e\u7684 AboutData \u5b57\u6bb5\u5217\u8868\u3002\n\n\nAbout data interface fields About \u6570\u636e\u63a5\u53e3\u5b57\u6bb5\n\n\nThe following table lists the names of the metadata fields. \nThe fields with a yes value in the Announced column will also \nbe published via the Announce signal. See \nSignals\n \nfor more information.\n\u4e0b\u8868\u5217\u51fa\u4e86\u5143\u6570\u636e\u5b57\u6bb5\u7684\u540d\u79f0\u3002\u5728 Annouced \u680f\u503c\u4e3a yes \u7684\u5b57\u6bb5\uff0c\u4e5f\u4f1a\u88ab Announce \u4fe1\u53f7\u516c\u5f00\u53d1\u5e03\u3002\n\n\n\n\n\n\n\n\n\u5b57\u6bb5\u540d\u79f0\n\n\n\u662f\u5426\u5f3a\u5236\n\n\n\u662f\u5426\u672c\u5730\u5316\n\n\n\u7b7e\u540d\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\n\n\nAppId\n\n\nyes\n\n\nyes\n\n\nno\n\n\nay\n\n\n\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u79cd 128 \u4f4d\u5168\u5c40\u552f\u4e00\u6807\u8bc6\u7b26\u3002AppId \u662f\u4e00\u4e2a\u7b26\u5408\nRFC 4122\n\u89c4\u8303\u7684\u901a\u7528\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n\n\n\n\n\n\nDefaultLanguage\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\n\u8bbe\u5907\u652f\u6301\u7684\u9ed8\u8ba4\u8bed\u8a00\u3002 \u6307\u5b9a\u4e3a\nRFC 5646\n\u5217\u51fa\u7684\u4e00\u79cd IETF \u8bed\u8a00\u6807\u7b7e\n\n\n\n\n\n\nDeviceName\n\n\nno\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\u7279\u5b9a\u5e73\u53f0\u8bbe\u7f6e\u7684\u8bbe\u5907\u540d\u79f0(\u4f8b\u5982 Linux \u548c Android).\n\n\n\n\n\n\nDeviceId\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\n\u7279\u5b9a\u5e73\u53f0\u8bbe\u7f6e\u7684\u8bbe\u5907\u6807\u8bc6\u7b26\n\n\n\n\n\n\nAppName\n\n\nyes\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\u7531\u5e94\u7528\u7a0b\u5e8f\u5236\u9020\u5546(\u5f00\u53d1\u8005\u6216 OEM)\u6307\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\n\n\n\n\n\n\nManufacturer\n\n\nyes\n\n\nyes\n\n\nyes\n\n\ns\n\n\n\u5e94\u7528\u5236\u9020\u5546\u7684\u540d\u79f0\n\n\n\n\n\n\nModelNumber\n\n\nyes\n\n\nyes\n\n\nno\n\n\ns\n\n\n\u5e94\u7528\u7a0b\u5e8f\u578b\u53f7\u4ee3\u7801\n\n\n\n\n\n\nSupportedLanguages\n\n\nyes\n\n\nno\n\n\nno\n\n\nas\n\n\n\u652f\u6301\u7684\u8bed\u8a00\u5217\u8868\n\n\n\n\n\n\nDescription\n\n\nyes\n\n\nno\n\n\nyes\n\n\ns\n\n\nRFC 5646\n\u4e2d\u8bed\u8a00\u6807\u7b7e\u7684\u8be6\u7ec6\u63cf\u8ff0\u3002\n\n\n\n\n\n\nDateOfManufacture\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\n\u4f7f\u7528 YYYY-MM-DD\uff08\u79f0\u4e3a XML \u65e5\u671f\u65f6\u95f4\u683c\u5f0f\uff09\u683c\u5f0f\u7684\u751f\u4ea7\u65e5\u671f\u3002\n\n\n\n\n\n\nSoftwareVersion\n\n\nyes\n\n\nno\n\n\nno\n\n\ns\n\n\n\u5e94\u7528\u7a0b\u5e8f\u7684\u8f6f\u4ef6\u7248\u672c\u3002\n\n\n\n\n\n\nAJSoftwareVersion\n\n\nyes\n\n\nno\n\n\nno\n\n\ns\n\n\n\u76ee\u524d\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684 AllJoyn SDK \u7248\u672c\u3002\n\n\n\n\n\n\nHardwareVersion\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\n\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u786c\u4ef6\u8bbe\u5907\u7248\u672c\u3002\n\n\n\n\n\n\nSupportUrl\n\n\nno\n\n\nno\n\n\nno\n\n\ns\n\n\n\u652f\u6301 URL \uff08\u7531\u5236\u9020\u5546\u586b\u5145\uff09\n\n\n\n\n\n\n\n\na(oas) GetObjectDescription()\n\n\nMessage arguments\n \nMessage \u53c2\u6570\n\nNone.\n\n\nReply arguments\n \nReply \u53c2\u6570\n\n\n\n\n\n\n\n\nargument\n\n\n\u53c2\u6570\u540d\n\n\n\u8fd4\u56de\u7b7e\u540d\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\n0\n\n\nobjectDescription\n\n\na(oas)\n\n\n\u8fd4\u56de\u5bf9\u8c61\u8def\u5f84\u7684\u5217\u8868\u548c\u6bcf\u4e2a\u5bf9\u8c61\u63d0\u4f9b\u7684\u652f\u6301\u63a5\u53e3\u5217\u8868\u3002\n\n\n\n\n\n\n\n\nDescription\n \n\u63cf\u8ff0\n\n\n\u68c0\u7d22\u5bf9\u8c61\u8def\u5f84\u548c\u6bcf\u4e2a\u5bf9\u8c61\u63d0\u4f9b\u7684\u63a5\u53e3\u5217\u8868\u3002\n\n\nSignals \u4fe1\u53f7\n\n\nThe following signals are emitted by a BusObject that implements the\n\norg.alljoyn.About\n interface.\n\u4ee5\u4e0b Signal \u7531\u63d0\u4f9b \norg.alljoyn.About\n \u63a5\u53e3\u7684 BusObject \u53d1\u9001\u3002\n\n\nAnnounce('qqa(oas)a{sv}')\n\n\nAnnounce signal is a Sessionless signal\nAnnounce signal \u662f Sessionless signal\u3002\n\n\nMessage arguments\n \nMessage \u53c2\u6570\n \n\n\n\n\n\n\n\n\nArgument\n\n\n\u53c2\u6570\u540d\n\n\n\u7b7e\u540d\n\n\n\u6709\u6548\u503c\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\n0\n\n\nversion\n\n\nq\n\n\n\u6b63\u6570\n\n\nAbout \u63a5\u53e3\u7684\u7248\u672c\u53f7\u3002\n\n\n\n\n\n\n1\n\n\nport\n\n\nq\n\n\n\u6b63\u6570\n\n\n\u5e94\u7528\u7a0b\u5e8f\u7528\u6765\u76d1\u542c\u63a5\u5165\u4f1a\u8bdd\u7684\u4f1a\u8bdd\u7aef\u53e3\n\n\n\n\n\n\n2\n\n\nobjectDescription\n\n\na(oas)\n\n\n\u57fa\u4e8e announced interfaces \u586b\u5199\n\n\n\u5bf9\u8c61\u8def\u5f84\u7684\u5217\u8868\u548c\u6bcf\u4e2a\u5bf9\u8c61\u63d0\u4f9b\u7684\u652f\u6301\u63a5\u53e3\u7684\u5217\u8868\u3002\n\n\n\n\n\n\n3\n\n\naboutData\n\n\na{sv}\n\n\n\u952e\uff0f\u503c\u5bf9\u7684\u5217\u8868\n\n\n\u5728\u8fd9\u4e2a signal \u4e2d\u63d0\u4f9b\u6240\u6709\nAbout data \u63a5\u53e3\u6570\u7ec4\n\u4e2d Announce \u680f\u4e3a yes \u7684\u6570\u7ec4\u3002\n\n\n\n\n\n\n\n\nAllJoyn Introspection XML\n\n\nnode name=\n/About\n xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttp://www.allseenalliance.org/schemas/introspect.xsd\n\n   \ninterface name=\norg.alljoyn.About\n\n      \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n      \nmethod name=\nGetAboutData\n\n         \narg name=\nlanguageTag\n type=\ns\n direction=\nin\n/\n\n         \narg name=\naboutData\n type=\na{sv}\n direction=\nout\n/\n\n      \n/method\n\n      \nmethod name=\nGetObjectDescription\n\n         \narg name=\nobjectDescription\n type=\na(oas)\n direction=\nout\n/\n\n      \n/method\n\n      \nsignal name=\nAnnounce\n\n         \narg name=\nversion\n type=\nq\n/\n\n         \narg name=\nport\n type=\nq\n/\n\n         \narg name=\nobjectDescription\n type=\na(oas)\n/\n\n         \narg name=\nmetaData\n type=\na{sv}\n/\n\n      \n/signal\n\n   \n/interface\n\n\n/node\n\n\n\n\n\nIcon \u63a5\u53e3\n\n\n\n\n\n\n\n\n\u63a5\u53e3\u540d\u79f0\n\n\n\u7248\u672c\n\n\n\u662f\u5426\u53d7\u4fdd\u62a4\n\n\n\u5bf9\u8c61\u8def\u5f84\n\n\n\n\n\n\n\n\n\n\norg.alljoyn.Icon\n\n\n1\n\n\nno\n\n\n/About/DeviceIcon\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\n\u5c5e\u6027\u540d\u79f0\n\n\n\u7b7e\u540d\n\n\n\u503c\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nq\n\n\n\u6b63\u6574\u6570\n\n\n\u53ea\u8bfb\n\n\n\u7aef\u53e3\u7248\u672c\u53f7\n\n\n\n\n\n\nMimeType\n\n\ns\n\n\n\u5bf9\u5e94\u56fe\u6807\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9\u7684 Mime \u7c7b\u578b\n\n\n\u53ea\u8bfb\n\n\n\u56fe\u6807\u7684 Mime \u7c7b\u578b\n\n\n\n\n\n\nSize\n\n\nu\n\n\n\u56fe\u6807\u4e8c\u8fdb\u5236\u5185\u5bb9\u7684\u5927\u5c0f\uff08\u5b57\u8282\u8868\u793a\uff09\n\n\n\u53ea\u8bfb\n\n\n\u56fe\u6807\u7684\u5927\u5c0f\uff5c\n\n\n\n\n\n\n\n\nMethods\n\n\n\u4ee5\u4e0b methods \u7531\u63d0\u4f9b \norg.alljoyn.About\n \u63a5\u53e3\u7684 BusObject \u53d1\u5e03\u3002\n\n\ns GetUrl()\n\n\nMessage arguments\n \nMessage \u53c2\u6570\n\n\nNone.\u65e0\u3002\n\n\nReply arguments\n \nReply \u53c2\u6570\n\n\n\n\n\n\n\n\nArgument\n\n\n\u53c2\u6570\u540d\u79f0\n\n\n\u8fd4\u56de\u7b7e\u540d\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\n0\n\n\nurl\n\n\ns\n\n\n\u5f53\u56fe\u6807\u4fdd\u5b58\u5728\u4e91\u4e0a\u65f6\u7684 URl\u3002\n\n\n\n\n\n\n\n\nDescription\n \n\u63cf\u8ff0\n \n\n\nRetrieve the URL of the icon if the icon is hosted on the cloud.\n\u68c0\u7d22\u5f53\u56fe\u6807\u4fdd\u5b58\u5728\u4e91\u4e0a\u65f6\u7684 URL\u3002\n\n\nay GetContent()\n\n\n\n\n\n\n\n\nArgument\n\n\n\u53c2\u6570\u540d\n\n\n\u8fd4\u56de\u7b7e\u540d\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\n0\n\n\ncontent\n\n\nay\n\n\n\u56fe\u6807\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9\n\n\n\n\n\n\n\n\nSignals\n\n\nNone.\u65e0\u3002\n\n\nAllJoyn Introspection XML\n\n\nnode name=\n/About/DeviceIcon\n\n      xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n      xsi:noNamespaceSchemaLocation=\nhttp://www.alljoyn.org/schemas/introspect.xsd\n\n    \ninterface name=\norg.alljoyn.Icon\n\n        \nproperty name=\nVersion\n type=\nq\n access=\nread\n/\n\n        \nproperty name=\nMimeType\n type=\ns\n access=\nread\n/\n\n        \nproperty name=\nSize\n type=\nu\n access=\nread\n/\n\n        \nmethod name=\nGetUrl\n\n            \narg type=\ns\n direction=\nout\n/\n\n        \n/method\n\n        \nmethod name=\nGetContent\n\n            \narg type=\nay\n direction=\nout\n/\n\n        \n/method\n\n    \n/interface\n\n\n/node",
            "title": "Interface"
        },
        {
            "location": "/learn/core/about-announcement/interface/#about-feature-interface-definitions-about",
            "text": "",
            "title": "About Feature Interface Definitions About\u529f\u80fd\u63a5\u53e3\u5b9a\u4e8e"
        },
        {
            "location": "/learn/core/about-announcement/interface/#release-history",
            "text": "To access a previous version of this document, click the release version link below.\n\u70b9\u51fb\u4e0b\u65b9\u53d1\u884c\u7248\u672c\u8fde\u63a5\u6765\u83b7\u53d6\u8be5\u6587\u6863\u7684\u5386\u53f2\u7248\u672c\u3002     Release version  Date  What changed      14.02  2/28/2014  \u9996\u4e2a About \u63a5\u53e3\u88ab\u52a0\u5165    14.06  6/30/2014  \u65e0\u66f4\u65b0\u3002    14.06 Update 1  9/29/2014  \u66f4\u65b0\u4e86\u6587\u6863\u6807\u9898\u548c Overview \u7684\u7ae0\u8282\u6807\u9898\u3002(\u4ece\u89c4\u8303\u6539\u6210\u5b9a\u4e49) Added a note in the Definition Overview chapter to address the AllSeen Alliance Compliance and Certification program.\u5728Definition Overview\u4e2d\u52a0\u5165\u4e00\u4e2a\u8bf4\u660e\u6765\u63d0\u51fa AllSeen Alliance Compliance Certification\u3002 Added a Mandatory column for method and signal parameters to support the AllSeen Alliance Compliance and Certification program.\u6dfb\u52a0\u4e00\u4e2a\u5f3a\u5236\u5217\uff0c\u7528\u6765\u5b58\u653e\u652f\u6301AllSeen Alliance Compliance and Certification \u7a0b\u5e8f\u7684\u65b9\u6cd5\u548c\u4fe1\u53f7\u53c2\u6570    14.12  12/17/2014  \u628a DeviceName \u4ece\u8981\u6c42\u6539\u6210\u4e86\u4e0d\u8981\u6c42 \u52a0\u5165\u4e86\u4e00\u4e2a\u6307\u5b9a AppID \u5fc5\u987b\u4e3a RFC 4122 \u4e2d\u6307\u5b9a\u7684 128\uff0dbit UUID \u7684\u9a8c\u8bc1 \u4f7f\u5bf9\u4e8e\u65b9\u6cd5\u548c\u4fe1\u53f7\u7684\u8981\u6c42\u66f4\u52a0\u660e\u786e Icon interface was added. The icon interface has been part of AllJoyn  and the About Feature since 14.02; however, the interface definition documentation was not added until 14.12.\u5f15\u5165\u56fe\u6807\u63a5\u53e3\u3002\u56fe\u6807\u63a5\u53e3\u5df2\u7ecf\u662f AllJoyn  \u548c 14.02 \u7248\u672c\u4e4b\u540e\u7684 About \u529f\u80fd\u7684\u4e00\u90e8\u5206\u3002\u7136\u800c\uff0c\u76f4\u5230 14.12\u7248\u672c\uff0c\u5b83\u7684\u63a5\u53e3\u5b9a\u4e49\u6587\u6863\u624d\u88ab\u52a0\u5165\u3002",
            "title": "Release History \u53d1\u5e03\u5386\u53f2"
        },
        {
            "location": "/learn/core/about-announcement/interface/#definition-overview",
            "text": "The About interface is to be implemented by an application \non a target device. This interface allows the app to advertise \nitself so other apps can discover it. The following figure \nillustrates the relationship between a client app and a service app.\nAbout \u63a5\u53e3\u662f\u7531\u5e94\u7528\u5728\u76ee\u6807\u8bbe\u5907\u4e0a\u6267\u884c\u3002\u6b64\u63a5\u53e3\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u53d1\u51fa\u5e7f\u64ad\uff0c\u4f7f\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u53d1\u73b0\u5b83\u3002\u4e0b\u56fe\u8bf4\u660e\u4e86\u5ba2\u6237\u7aef\u5e94\u7528\u548c\u670d\u52a1\u5e94\u7528\u4e4b\u95f4\u7684\u5173\u7cfb\u3002   Figure:  \u5728AllJoyn  \u67b6\u6784\u5185\u7684 About \u529f\u80fd\u7ed3\u6784\u3002  NOTE:  All methods and signals are considered mandatory to \nsupport the AllSeen Alliance Compliance and Certification program.  \u6ce8\u610f:  \u6240\u6709\u65b9\u6cd5\u548c\u4fe1\u53f7\u90fd\u88ab\u8ba4\u4e3a\u5f3a\u5236\u652f\u6301AllSeen Alliance Compliance and Certification program.",
            "title": "Definition Overview"
        },
        {
            "location": "/learn/core/about-announcement/interface/#discovery",
            "text": "A client can discover the app via an announcement which is a \nsessionless signal containing the basic app information like \napp name, device name, manufacturer, and model number. The \nannouncement also contains the list of object paths and service \nframework interfaces to allow the client to determine whether \nthe app provides functionality of interest.\n\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7 annoucement \u53d1\u73b0\u5e94\u7528\u7a0b\u5e8f\u3002annoucement \u662f\u4e00\u79cd\u5305\u542b\u4e86\u5982\u5e94\u7528\u540d\u79f0\uff0c\u8bbe\u5907\u540d\u79f0\uff0c\u5236\u9020\u5546\u548c\u578b\u53f7\u7684\u4e00\u79cd sessionless signal\u3002annoucement \u4e5f\u5305\u542b\u4e86\u5bf9\u8c61\u8def\u5f84\u548c\u670d\u52a1\u67b6\u6784\u63a5\u53e3\u7684\u5217\u8868\uff0c\u8fd9\u4e9b\u5185\u5bb9\u4f7f\u5f97\u5ba2\u6237\u7aef\u80fd\u591f\u786e\u5b9a\u5e94\u7528\u7a0b\u5e8f\u662f\u5426\u63d0\u4f9b\u4e86\u611f\u5174\u8da3\u7684\u529f\u80fd\u3002  In addition to the sessionless announcement, the About interface \nalso provides the\non-demand method calls to retrieve all the available metadata \nabout the app that are not sessionless announcement  published in the announcement.\n\u9664\u4e86 sessionless announcement \u4e4b\u5916\uff0cAbout \u63a5\u53e3\u4e5f\u63d0\u4f9b\u4e86\u57fa\u4e8e\u9700\u6c42\u7684\u65b9\u6cd5\u8c03\u7528\uff0c\u4ee5\u68c0\u7d22\u7a0b\u5e8f\u7684\u53ef\u7528\u5143\u6570\u636e\u3002\u8fd9\u4e9b\u5143\u6570\u636e\u4e0d\u662f\u5728 annoucement \u4e2d\u516c\u5f00\u53d1\u5e03\u7684 sessionless annoucement\u3002",
            "title": "Discovery \u53d1\u73b0"
        },
        {
            "location": "/learn/core/about-announcement/interface/#discovery-call-flows",
            "text": "Typical discovery flow \u5178\u578b discovery flow  The following figure illustrates a typical call flow for a client \nto discover a service app. The client merely relies on the \nsessionless announcement to decide whether to connect to the \nservice app to use its service framework offering.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u5ba2\u6237\u7aef\u53d1\u73b0\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u7684\u5178\u578b call flow\u3002\u5ba2\u6237\u7aef\u4ec5\u4ec5\u4f9d\u9760 sessionless announcemnt \u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u662f\u5426\u8fde\u63a5\u67d0\u4e00\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u5e76\u4f7f\u7528\u5b83\u6240\u4ee5\u63d0\u4f9b\u7684\u670d\u52a1\u67b6\u6784\u3002   \u56fe:  \u5178\u578b discovery flow (\u5ba2\u6237\u7aef\u53d1\u73b0\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f)  Nontypical discovery flow \u975e\u5178\u578b discovery flow  The following figure illustrates a call flow for a client to \ndiscover a service app and make a request for more detailed information.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u5ba2\u6237\u7aef\u53d1\u73b0\u4e00\u4e2a\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u5e76\u4e14\u8981\u6c42\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u7684 call flow\u3002   \u56fe:  Nontypical discovery call flow \u975e\u5178\u578b discovery call flow",
            "title": "Discovery Call Flows"
        },
        {
            "location": "/learn/core/about-announcement/interface/#error-handling",
            "text": "The method calls in the About interface will use the AllJoyn \nerror message handling feature (ER_BUS_REPLY_IS_ERROR_MESSAGE) \nto set the error name and error message.\nAbout \u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u8c03\u7528\u9700\u8981\u7528\u5230 AllJoyn \u9519\u8bef\u5904\u7406\u529f\u80fd\u6765\u8bbe\u7f6e\u9519\u8bef\u540d\u79f0\u548c\u9519\u8bef\u4fe1\u606f\u3002     \u9519\u8bef\u540d\u79f0  \u9519\u8bef\u4fe1\u606f      org.alljoyn.Error.LanguageNotSupported  \u6307\u5b9a\u7684\u8bed\u8a00\u4e0d\u53d7\u652f\u6301",
            "title": "Error Handling \u9519\u8bef\u5904\u7406"
        },
        {
            "location": "/learn/core/about-announcement/interface/#about-interface-about",
            "text": "\u63a5\u53e3\u540d\u79f0  \u7248\u672c  \u662f\u5426\u53d7\u4fdd\u62a4  \u5bf9\u8c61\u8def\u5f84      org.alljoyn.About  1  no  /About     Properties \u5c5e\u6027     \u5c5e\u6027\u540d\u79f0  \u7b7e\u540d  \u6709\u6548\u503c  \u8bfb\u5199\u6743\u9650  \u63cf\u8ff0      Version  q  Positive integers  Read Only  \u63a5\u53e3\u7248\u672c\u53f7     Methods \u65b9\u6cd5  The following methods are exposed by a BusObject that implements \nthe  org.alljoyn.About  interface.\n\u4ee5\u4e0b methods \u7531\u63d0\u4f9b  org.alljoyn.About  \u63a5\u53e3\u7684 BusObject \u53d1\u5e03\u3002  a{sv} GetAboutData('s')  Message arguments   Message \u53c2\u6570       Argument  \u53c2\u6570\u540d\u79f0  \u7b7e\u540d  \u6709\u6548\u503c  \u63cf\u8ff0      0  languageTag  s  IETF language tags specified by  RFC 5646 .  \u6240\u9700\u8bed\u8a00     Reply arguments   Reply \u53c2\u6570     Argument  Parameter name  Return signature  Description      0  AboutData  a{sv}  \u53ef\u7528\u7684\u5143\u6570\u636e\u5b57\u6bb5\u7684\u5b57\u5178\u3002\u5982\u679c\u4e0d\u6307\u5b9a\u8bed\u8a00\u6807\u7b7e\uff0c (\u5982, \"\"), \u5c06\u8fd4\u56de\u57fa\u4e8e\u9ed8\u8ba4\u8bed\u8a00\u7684\u5143\u6570\u636e\u5b57\u6bb5\u3002     Error reply   Error \u56de\u590d     Error  \u63cf\u8ff0      org.alljoyn.Error.LanguageNotSupported  \u5728\u8bed\u8a00\u6807\u7b7e\u4e0d\u88ab\u652f\u6301\u65f6\u8fd4\u56de     Description   \u63cf\u8ff0  Retrieve the list of available AboutData fields based on the language tag. see  About data interface fields \n\u68c0\u7d22\u53ef\u7528\u7684\u57fa\u4e8e\u8bed\u8a00\u6807\u7b7e\u7684 AboutData \u5b57\u6bb5\u5217\u8868\u3002  About data interface fields About \u6570\u636e\u63a5\u53e3\u5b57\u6bb5  The following table lists the names of the metadata fields. \nThe fields with a yes value in the Announced column will also \nbe published via the Announce signal. See  Signals  \nfor more information.\n\u4e0b\u8868\u5217\u51fa\u4e86\u5143\u6570\u636e\u5b57\u6bb5\u7684\u540d\u79f0\u3002\u5728 Annouced \u680f\u503c\u4e3a yes \u7684\u5b57\u6bb5\uff0c\u4e5f\u4f1a\u88ab Announce \u4fe1\u53f7\u516c\u5f00\u53d1\u5e03\u3002     \u5b57\u6bb5\u540d\u79f0  \u662f\u5426\u5f3a\u5236  \u662f\u5426\u672c\u5730\u5316  \u7b7e\u540d  \u63cf\u8ff0       AppId  yes  yes  no  ay  \u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u79cd 128 \u4f4d\u5168\u5c40\u552f\u4e00\u6807\u8bc6\u7b26\u3002AppId \u662f\u4e00\u4e2a\u7b26\u5408 RFC 4122 \u89c4\u8303\u7684\u901a\u7528\u552f\u4e00\u6807\u8bc6\u7b26\u3002    DefaultLanguage  yes  yes  no  s  \u8bbe\u5907\u652f\u6301\u7684\u9ed8\u8ba4\u8bed\u8a00\u3002 \u6307\u5b9a\u4e3a RFC 5646 \u5217\u51fa\u7684\u4e00\u79cd IETF \u8bed\u8a00\u6807\u7b7e    DeviceName  no  yes  yes  s  \u7279\u5b9a\u5e73\u53f0\u8bbe\u7f6e\u7684\u8bbe\u5907\u540d\u79f0(\u4f8b\u5982 Linux \u548c Android).    DeviceId  yes  yes  no  s  \u7279\u5b9a\u5e73\u53f0\u8bbe\u7f6e\u7684\u8bbe\u5907\u6807\u8bc6\u7b26    AppName  yes  yes  yes  s  \u7531\u5e94\u7528\u7a0b\u5e8f\u5236\u9020\u5546(\u5f00\u53d1\u8005\u6216 OEM)\u6307\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0    Manufacturer  yes  yes  yes  s  \u5e94\u7528\u5236\u9020\u5546\u7684\u540d\u79f0    ModelNumber  yes  yes  no  s  \u5e94\u7528\u7a0b\u5e8f\u578b\u53f7\u4ee3\u7801    SupportedLanguages  yes  no  no  as  \u652f\u6301\u7684\u8bed\u8a00\u5217\u8868    Description  yes  no  yes  s  RFC 5646 \u4e2d\u8bed\u8a00\u6807\u7b7e\u7684\u8be6\u7ec6\u63cf\u8ff0\u3002    DateOfManufacture  no  no  no  s  \u4f7f\u7528 YYYY-MM-DD\uff08\u79f0\u4e3a XML \u65e5\u671f\u65f6\u95f4\u683c\u5f0f\uff09\u683c\u5f0f\u7684\u751f\u4ea7\u65e5\u671f\u3002    SoftwareVersion  yes  no  no  s  \u5e94\u7528\u7a0b\u5e8f\u7684\u8f6f\u4ef6\u7248\u672c\u3002    AJSoftwareVersion  yes  no  no  s  \u76ee\u524d\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684 AllJoyn SDK \u7248\u672c\u3002    HardwareVersion  no  no  no  s  \u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u786c\u4ef6\u8bbe\u5907\u7248\u672c\u3002    SupportUrl  no  no  no  s  \u652f\u6301 URL \uff08\u7531\u5236\u9020\u5546\u586b\u5145\uff09     a(oas) GetObjectDescription()  Message arguments   Message \u53c2\u6570 \nNone.  Reply arguments   Reply \u53c2\u6570     argument  \u53c2\u6570\u540d  \u8fd4\u56de\u7b7e\u540d  \u63cf\u8ff0      0  objectDescription  a(oas)  \u8fd4\u56de\u5bf9\u8c61\u8def\u5f84\u7684\u5217\u8868\u548c\u6bcf\u4e2a\u5bf9\u8c61\u63d0\u4f9b\u7684\u652f\u6301\u63a5\u53e3\u5217\u8868\u3002     Description   \u63cf\u8ff0  \u68c0\u7d22\u5bf9\u8c61\u8def\u5f84\u548c\u6bcf\u4e2a\u5bf9\u8c61\u63d0\u4f9b\u7684\u63a5\u53e3\u5217\u8868\u3002  Signals \u4fe1\u53f7  The following signals are emitted by a BusObject that implements the org.alljoyn.About  interface.\n\u4ee5\u4e0b Signal \u7531\u63d0\u4f9b  org.alljoyn.About  \u63a5\u53e3\u7684 BusObject \u53d1\u9001\u3002  Announce('qqa(oas)a{sv}')  Announce signal is a Sessionless signal\nAnnounce signal \u662f Sessionless signal\u3002  Message arguments   Message \u53c2\u6570       Argument  \u53c2\u6570\u540d  \u7b7e\u540d  \u6709\u6548\u503c  \u63cf\u8ff0      0  version  q  \u6b63\u6570  About \u63a5\u53e3\u7684\u7248\u672c\u53f7\u3002    1  port  q  \u6b63\u6570  \u5e94\u7528\u7a0b\u5e8f\u7528\u6765\u76d1\u542c\u63a5\u5165\u4f1a\u8bdd\u7684\u4f1a\u8bdd\u7aef\u53e3    2  objectDescription  a(oas)  \u57fa\u4e8e announced interfaces \u586b\u5199  \u5bf9\u8c61\u8def\u5f84\u7684\u5217\u8868\u548c\u6bcf\u4e2a\u5bf9\u8c61\u63d0\u4f9b\u7684\u652f\u6301\u63a5\u53e3\u7684\u5217\u8868\u3002    3  aboutData  a{sv}  \u952e\uff0f\u503c\u5bf9\u7684\u5217\u8868  \u5728\u8fd9\u4e2a signal \u4e2d\u63d0\u4f9b\u6240\u6709 About data \u63a5\u53e3\u6570\u7ec4 \u4e2d Announce \u680f\u4e3a yes \u7684\u6570\u7ec4\u3002",
            "title": "About Interface About \u63a5\u53e3"
        },
        {
            "location": "/learn/core/about-announcement/interface/#alljoyn-introspection-xml",
            "text": "node name= /About  xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= http://www.allseenalliance.org/schemas/introspect.xsd \n    interface name= org.alljoyn.About \n       property name= Version  type= q  access= read / \n       method name= GetAboutData \n          arg name= languageTag  type= s  direction= in / \n          arg name= aboutData  type= a{sv}  direction= out / \n       /method \n       method name= GetObjectDescription \n          arg name= objectDescription  type= a(oas)  direction= out / \n       /method \n       signal name= Announce \n          arg name= version  type= q / \n          arg name= port  type= q / \n          arg name= objectDescription  type= a(oas) / \n          arg name= metaData  type= a{sv} / \n       /signal \n    /interface  /node",
            "title": "AllJoyn Introspection XML"
        },
        {
            "location": "/learn/core/about-announcement/interface/#icon",
            "text": "\u63a5\u53e3\u540d\u79f0  \u7248\u672c  \u662f\u5426\u53d7\u4fdd\u62a4  \u5bf9\u8c61\u8def\u5f84      org.alljoyn.Icon  1  no  /About/DeviceIcon     Properties     \u5c5e\u6027\u540d\u79f0  \u7b7e\u540d  \u503c  \u63cf\u8ff0       Version  q  \u6b63\u6574\u6570  \u53ea\u8bfb  \u7aef\u53e3\u7248\u672c\u53f7    MimeType  s  \u5bf9\u5e94\u56fe\u6807\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9\u7684 Mime \u7c7b\u578b  \u53ea\u8bfb  \u56fe\u6807\u7684 Mime \u7c7b\u578b    Size  u  \u56fe\u6807\u4e8c\u8fdb\u5236\u5185\u5bb9\u7684\u5927\u5c0f\uff08\u5b57\u8282\u8868\u793a\uff09  \u53ea\u8bfb  \u56fe\u6807\u7684\u5927\u5c0f\uff5c     Methods  \u4ee5\u4e0b methods \u7531\u63d0\u4f9b  org.alljoyn.About  \u63a5\u53e3\u7684 BusObject \u53d1\u5e03\u3002  s GetUrl()  Message arguments   Message \u53c2\u6570  None.\u65e0\u3002  Reply arguments   Reply \u53c2\u6570     Argument  \u53c2\u6570\u540d\u79f0  \u8fd4\u56de\u7b7e\u540d  \u63cf\u8ff0      0  url  s  \u5f53\u56fe\u6807\u4fdd\u5b58\u5728\u4e91\u4e0a\u65f6\u7684 URl\u3002     Description   \u63cf\u8ff0    Retrieve the URL of the icon if the icon is hosted on the cloud.\n\u68c0\u7d22\u5f53\u56fe\u6807\u4fdd\u5b58\u5728\u4e91\u4e0a\u65f6\u7684 URL\u3002  ay GetContent()     Argument  \u53c2\u6570\u540d  \u8fd4\u56de\u7b7e\u540d  \u63cf\u8ff0      0  content  ay  \u56fe\u6807\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9     Signals  None.\u65e0\u3002",
            "title": "Icon \u63a5\u53e3"
        },
        {
            "location": "/learn/core/about-announcement/interface/#alljoyn-introspection-xml_1",
            "text": "node name= /About/DeviceIcon \n      xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n      xsi:noNamespaceSchemaLocation= http://www.alljoyn.org/schemas/introspect.xsd \n     interface name= org.alljoyn.Icon \n         property name= Version  type= q  access= read / \n         property name= MimeType  type= s  access= read / \n         property name= Size  type= u  access= read / \n         method name= GetUrl \n             arg type= s  direction= out / \n         /method \n         method name= GetContent \n             arg type= ay  direction= out / \n         /method \n     /interface  /node",
            "title": "AllJoyn Introspection XML"
        },
        {
            "location": "/learn/core/rn_config/",
            "text": "Routing Node Configuration File\n\n\nThe routing node (RN) configuration file is an XML file that controls the\nbehavior of the RN and sets certain variables, such as timers, connection\nlimits, and use case characteristics.\n\n\nAn example config file may be found in the AllJoyn source distribution in\n\n../alljoyn_core/router/test/conf/sample.conf\n\n\nNote that this sample configuration file would not be useful in practice.  It is\nmerely intended to provide an example of how various elements and attributes\nare formatted.\n\n\nXML Schema\n\n\nAn XML schema, which may be used to validate config files, may be found on the\nAllSeen Alliance website:\n\n\nhttps://allseenalliance.org/schemas/busconfig.xsd\n\n\nThe schema is also available in the source code distribution at:\n\n../alljoyn_core/docs/busconfig.xsd\n\n\nThe schema may be referenced in config files by including the following\nattributes in the \nbusconfig\n (i.e., root) element:\n\n\nbusconfig\n  xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n  xsi:noNamespaceSchemaLocation=\nhttps://allseenalliance.org/schemas/busconfig.xsd\n\n\n\n\n\nDefault Configuration\n\n\nBundled Routing Node\n\n\nThe bundled routing node consists of a routing node and a Standard Client\napplication that run in a single process.\n\n\nAs of v15.09, a user may compile AllJoyn with the scons variable \nTEST_CONFIG\n\nset to an absolute or relative path to a config file.  However, as suggested by\nthe scons variable name, this method is intended for debug and test purposes.\n\n\nIf the user does not provide a config file, then the bundled RN relies on a\nhardcoded configuration contained in the file \nBundledRouter.cc\n.\n\n\nNote that all config settings that apply to the standalone RN also apply to the\nbundled RN.\n\n\nBundled RN hardcoded configuration:\n\n ```xml\n\n\n    \nalljoyn_bundled\n\n    \ntcp:iface=\n,port=0\n\n    \nudp:iface=\n,port=0\n\n    \n20000\n\n    \n4\n\n    \n16\n\n    \n8\n\n    \n8\n\n    \nBattery powered and chargeable\n\n    \nIntermediate mobility\n\n    \n3-6 hr\n\n    \nWireless\n\n\n\n\n### Standalone Routing Node\nThe standalone RN runs as a compiled application named `alljoyn-daemon` on Linux.\nIf the user does not specify a separate configuration file when alljoyn-daemon\nis started, or the `--internal` switch is used, then the RN will use a\nconfiguration that is hardcoded in the source.\n\nNote that the standalone RN is also available as a service on Windows 10.  The\nWindows 10 service uses a hard-coded configuration and does not accept any\nparameters or switches.  The examples in this document that describe passing\nparameters or options to `alljoyn-daemon` are referring to the Linux\nimplementation.\n\n**Example (Linux):** start routing node using internal config\n\n    ./alljoyn-daemon\n\n        --OR--\n\n    ./alljoyn-daemon --internal\n\n**Standalone RN hardcoded configuration (Linux):**\n```xml\n\nbusconfig\n\n    \ntype\nalljoyn\n/type\n\n    \nlisten\nunix:abstract=alljoyn\n/listen\n\n    \nlisten\ntcp:iface=*,port=9955\n/listen\n\n    \nlisten\nudp:iface=*,port=9955\n/listen\n\n    \nlimit name=\nauth_timeout\n20000\n/limit\n\n    \nlimit name=\nmax_incomplete_connections\n16\n/limit\n\n    \nlimit name=\nmax_completed_connections\n32\n/limit\n\n    \nlimit name=\nmax_remote_clients_tcp\n0\n/limit\n\n    \nlimit name=\nmax_remote_clients_udp\n0\n/limit\n\n\n/busconfig\n\n\n\n\n\n\nUsing an External Config File\n\n\nAs previously mentioned, a user-defined, external configuration file may be\npassed to a standalone RN.  In order to start the standalone RN with an\nexternal configuration file, enter the following command (Linux):\n\n\n./alljoyn-daemon --config-file=./my_rn_config.xml\n\n\n\n\nMinimal Config File\n\n\nA minimal config file requires the root element (\nbusconfig\n) and a single\n\nlisten\n element.\n\n\nFor example:\n\n\nbusconfig\n\n    \nlisten\ntcp:iface=*,port=9955\n/listen\n\n\n/busconfig\n\n\n\n\n\n\nThis will result in a valid config file, but with very rudimentary\nfunctionality.  In fact, this configuration file would prevent the connection\nof any leaf nodes, since it does not override the default values of 0 for\n\nmax_remote_clients_tcp\n and \nmax_remote_clients_udp\n (i.e., \nlimit\n attributes).\nTherefore, it would only be able to connect to other routing nodes.\n\n\nReview of Config File Elements and Attributes\n\n\nThe default configuration settings should be suitable for most use cases.\nHowever, some applications may benefit from using different settings.  Therefore,\nthe information below is intended to provide some guidance in using\nthese settings.\n\n\nThe following is an alphabetical list of top-level XML\nelements (i.e., immediate child elements of the root element \nbusconfig\n)\navailable for use in the config file, along with a description of their meaning\nand application.  Any child elements will be described below their parent\nelement.  Likewise for attributes.\n\n\nauth\n\n\nNot used by AllJoyn.  Included for backward compatibility.  Including this\nelement in the config file will have no effect.\n\n\nflag\n\n\nNote:\n\nThe content of the flag element may be either 'true' or 'false'.  All flags\ndefault to 'false'\n\n\nname attribute (required)\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\ndefault\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nns_enable_v1\n\n\nenable legacy name service if true\n\n\ntrue\n\n\nUsed for debugging.  Do not use in deployed production applications.\n\n\n\n\n\n\nns_disable_ipv4\n\n\ndisable IPv4 multicast if true\n\n\nfalse\n\n\nUsed for debugging.  Do not use in deployed production applications.\n\n\n\n\n\n\nns_disable_ipv6\n\n\ndisable IPv6 multicast if true\n\n\nfalse\n\n\nUsed for debugging.  Do not use in deployed production applications.\n\n\n\n\n\n\nns_disable_directed_broadcast\n\n\ndisable subnet broadcast if true\n\n\nfalse\n\n\nUsed for debugging.  Do not use in deployed production applications.\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\nflag name=\"ns_enable_v1\"\nfalse\n/flag\n\n\nflag name=\"ns_disable_ipv6\"\ntrue\n/flag\n\n\n\n\nfork\n\n\nThe fork element is empty.  It does not contain any content, child elements, or\nattributes.\n\n\nIf present in the config file, the routing node (daemon) will run in the\nbackground.\n\n\nNote that \nfork\n must be enabled in order for \npidfile\n to be effective.\n\n\nOn Linux, the config file setting for \nfork\n may be overridden from the\ncommand line, by using the \n--fork\n or \n--no-fork\n options.\n\n\nExamples\n\n\n\n\nfork/\n\n\n\n\ninclude\n\n\nSpecify the path to another configuration file, whose contents will be\nincluded at the point where the \ninclude\n element is inserted.\n\n\nThe specified path may be absolute or relative.  If the path is relative, then\nit is relative to the configuration file using the\n\ninclude\n.\n\n\nIn addition, the path must be to a file with the file\nextension \n.conf\n.\n\n\nignore_missing attribute (optional)\n\n\nMay be set to \"yes\" or \"no\".  The default is \"no\".\n\n\n\n\n\n\n\n\nignore_missing\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nno (default)\n\n\na fatal error will occur if the file doesn't exist\n\n\n\n\n\n\nyes\n\n\nsilently ignore if the file doesn't exist\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\ninclude\n../configs/my_config.conf\n/include\n\n\ninclude ignore_missing=\"yes\"\nmy_config.conf\n/include\n\n\ninclude ignore_missing=\"no\"\n/home/bob/configs/my_config.conf\n/include\n\n\n\n\nincludedir\n\n\nSimilar to \ninclude\n, except that, instead of specifying the path to a\nfile, specify the path to a directory containing configuration files.\nAll files with the \n.conf\n file extension will be included.\n\n\nNote that the order in which the files in the directory are included is\nundefined and, therefore, users should avoid any config file include-order\ndependency when using this element.\n\n\nThe specified path may be absolute or relative.  If the path is relative, then\nit is relative to the configuration file using the\n\nincludedir\n\n\nignore_missing attribute (optional)\n\n\nMay be set to \"yes\" or \"no\".  The default is \"no\".\n\n\n\n\n\n\n\n\nignore_missing\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nno (default)\n\n\na fatal error will occur if the directory doesn't exist\n\n\n\n\n\n\nyes\n\n\nsilently ignore if the directory doesn't exist\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\nincludedir\n../configs\n/includedir\n\n\nincludedir ignore_missing=\"yes\"\nconfigs\n/includedir\n\n\nincludedir ignore_missing=\"no\"\n/home/bob/configs\n/includedir\n\n\n\n\nlimit\n\n\nSets variables for various timeouts and connection limits to an unsigned,\n32-bit integer.\n\n\nname attribute (required)\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nauth_timeout\n\n\nThe maximum amount of time that incoming connections are allowed to complete authentication.  Beyond this limit, incoming connections may be aborted.\n\n\n\n\n\n\nsession_setup_timeout\n\n\nThe maximum amount of time that incoming connections are allowed to set up session routes. Beyond this limit, incoming connections may be disconnected.\n\n\n\n\n\n\nmax_incomplete_connections\n\n\nThe maximum number of incoming connections that can be in the process of authenticating.  If starting to authenticate a new connection would mean exceeding this number, then the new connection will be dropped.\n\n\n\n\n\n\nmax_completed_connections\n\n\nThe maximum number of connections (inbound and outbound) allowed for each tranport.  This means that the total number of completed connections allowed for TCP and UDP is twice this value.\nIf starting to process a new connection would mean exceeding this number, then the new connection will be dropped.\n\n\n\n\n\n\nmax_remote_clients_tcp\n\n\nThe maximum number of remote clients using TCP.\nNote:  this value \nmust\n be overridden when using an external configuration file in order to enable TCP connections to leaf nodes.  The default internal configuration file already overrides this value.\nNote that this setting may be useful for applications that have a specific requirement to prevent leaf nodes from connecting; however, for generic RNs, this value should not be zero.\n\n\n\n\n\n\nmax_remote_clients_udp\n\n\nThe maximum number of remote clients using UDP.\nNote:  this value \nmust\n be overridden when using an external configuration file in order to enable UDP connections to leaf nodes.  The default internal configuration file already overrides this value.\nNote that this setting may be useful for applications that have a specific requirement to prevent leaf nodes from connecting; however, for generic RNs, this value should not be zero.\n\n\n\n\n\n\n\n\nTest hooks \nonly\n\n\nMany of the limits found in the source code are hooks for\ntesting AllJoyn and are not useful for application development or end-products.\nFor informational purposes, these are listed below, however, please do not\nuse them for production code, as they may have undesirable or unpredictable\nbehavior.\n\n\n\n\n\n\n\n\nDO NOT USE\n\n\n\n\n\n\n\n\n\n\n\n\nslap_min_idle_timeout\n\n\nudp_timewait\n\n\n\n\n\n\nslap_max_idle_timeout\n\n\nudp_segbmax\n\n\n\n\n\n\nslap_default_idle_timeout\n\n\nudp_segmax\n\n\n\n\n\n\nslap_max_probe_timeout\n\n\nudp_fast_retransmit_ack_counter\n\n\n\n\n\n\nslap_default_probe_timeout\n\n\nsls_backoff\n\n\n\n\n\n\nudp_connect_timeout\n\n\nsls_backoff_linear\n\n\n\n\n\n\nudp_connect_retries\n\n\nsls_backoff_exponential\n\n\n\n\n\n\nudp_initial_data_timeout\n\n\nsls_backoff_max\n\n\n\n\n\n\nudp_total_data_retry_timeout\n\n\nsls_preferred_transports\n\n\n\n\n\n\nudp_min_data_retries\n\n\ntcp_default_probe_timeout\n\n\n\n\n\n\nudp_persist_interval\n\n\ntcp_min_idle_timeout\n\n\n\n\n\n\nudp_total_app_timeout\n\n\ntcp_max_idle_timeout\n\n\n\n\n\n\nudp_link_timeout\n\n\ntcp_default_idle_timeout\n\n\n\n\n\n\nudp_keepalive_retries\n\n\ntcp_max_probe_timeout\n\n\n\n\n\n\nudp_delayed_ack_timeout\n\n\ndt_min_idle_timeout\n\n\n\n\n\n\ndt_max_idle_timeout\n\n\ndt_default_idle_timeout\n\n\n\n\n\n\ndt_max_probe_timeout\n\n\ndt_default_probe_timeout\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\nlimit name=\"auth_timeout\"\n20000\n/limit\n\n\nlimit name=\"max_incomplete_connections\"\n16\n/limit\n\n\n\n\nlisten\n\n\nIdentifies an address on which the bus attachment should listen for incoming\nconnections. This address must be a valid URI that begins with an AllJoyn\ntransport name, followed by appropriate parameters and options.\n\n\nA configuration file must contain at least one\n\nlisten\n element.  In addition, a configuration file may contain multiple\n\nlisten\n elements, including for the same transport, as long as the specified\ntransport and other parameters are valid and supported by the host platform.\n\n\nDuplicate \nlisten\n elements will be ignored (with a\nwarning message).  Invalid \nlisten\n elements\nwill result in a fatal error, unless there is a valid \nlisten\n element\navailable, in which case the invalid \nlisten\n element will be ignored (with a\nwarning message).\n\n\nDescripton and Format\n\n\n\n\n\n\n\n\nProtocol or Transport Name\n\n\n\n\n\n\n\n\n\n\ntcp\n\n\n\n\n\n\nudp\n\n\n\n\n\n\nunix\n\n\n\n\n\n\nslap\n\n\n\n\n\n\nnpipe\n\n\n\n\n\n\n\n\nFormat options\n\n\n\n\n\n\n\n\nOption Name\n\n\n\n\n\n\n\n\n\n\niface\n\n\n\n\n\n\naddr\n\n\n\n\n\n\nport\n\n\n\n\n\n\nabstract\n\n\n\n\n\n\npath\n\n\n\n\n\n\ntype\n\n\n\n\n\n\ndev\n\n\n\n\n\n\nbaud\n\n\n\n\n\n\n\n\npidfile\n\n\nRecords the routing node process ID (PID) to the specified file.  If the file\ndoes not exist, it will be created.  If the file does exist, it will be\nover-written.\n\n\nIMPORTANT NOTE:\n \npidfile\n is ONLY effective if \nfork\n is also\nspecified.  Alternatively, the routing node may be started with the \n--fork\n\noption (Linux).\n\n\npolicy\n\n\nDefines a security policy to be applied to a particular\nset of connections to the bus. A policy is made up of \nallow\n and \ndeny\n\nelements. Policies are analogous to a firewall in that they allow expected\ntraffic and prevent unexpected traffic.\n\n\nPolicies applied later will override those applied earlier, when the policies\noverlap.\n\n\nAttributes\n\n\nThe \npolicy\n element must include one of the following attributes, which are\nmutually exclusive.  A fatal error will be generated if more than one attribute\nis present.\n\n\n\n\n\n\n\n\nAttribute\n\n\nContents\n\n\n\n\n\n\n\n\n\n\ncontext\n\n\n\"default\" OR \"mandatory\"\n\n\n\n\n\n\nuser\n\n\nusername or userid\n\n\n\n\n\n\ngroup\n\n\ngroup name or gid\n\n\n\n\n\n\n\n\nallow\n and \ndeny\n\n\nA \npolicy\n must contain at least one \nallow\n or \ndeny\n element.  However,\na single \npolicy\n with only an \nallow\n element is not meaningful for AllJoyn,\nsince all traffic is allowed by default.  Instead, an \nallow\n element\nprimarily functions as an exception to previous \ndeny\n elements.\n\n\nAttributes for \nallow\n and \ndeny\n elements\n\n\n\n\n\n\n\n\nAttribute\n\n\n\n\n\n\n\n\n\n\nuser\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nown\n\n\n\n\n\n\nown_prefix\n\n\n\n\n\n\nsend_error / receive_error\n\n\n\n\n\n\nsend_interface / receive_interface\n\n\n\n\n\n\nsend_member / receive_member\n\n\n\n\n\n\nsend_path / receive_path\n\n\n\n\n\n\nsend_path_prefix / receive_path_prefix\n\n\n\n\n\n\nsend_group / receive_group\n\n\n\n\n\n\nsend_user\n\n\n\n\n\n\nreceive_user\n\n\n\n\n\n\nsend_same_user / receive_same_user\n\n\n\n\n\n\nreceive_sender / send_destination\n\n\n\n\n\n\nsend_type / receive_type\n\n\n\n\n\n\n\n\nExample\n\n\npolicy context=\ndefault\n\n  \ndeny user=\n*\n/\n\n  \ndeny own=\n*\n/\n\n\n  \ndeny send_type=\nmethod_call\n/\n\n  \nallow send_type=\nsignal\n/\n\n  \nallow send_type=\nmethod_return\n/\n\n  \nallow send_type=\nerror\n/\n\n\n  \nallow send_destination=\norg.freedesktop.DBus\n/\n\n  \nallow receive_sender=\norg.freedesktop.DBus\n/\n\n\n  \nallow send_interface=\norg.alljoyn.Bus.Peer.Session\n/\n\n\n  \nallow user=\njethro\n/\n\n\n\n/policy\n\n\n\npolicy user=\njethro\n\n  \nallow send_type=\nmethod_call\n/\n\n  \nallow send_type=\nsignal\n/\n\n  \nallow send_type=\nmethod_return\n/\n\n  \nallow send_type=\nerror\n/\n\n\n  \nallow own_prefix=\ntest\n/\n\n\n/policy\n\n\n\npolicy user=\njoe\n\n   \ndeny send_type=\nmethod_call\n send_user=\nbeth\n/\n\n   \ndeny receive_type=\nsignal\n receive_user=\nbob\n/\n\n\n/policy\n\n\n\n\n\nproperty\n\n\nDefine characteristics related to router node selection and nameservice.\n\n\nname attribute (required)\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nrouter_node_connection\n\n\nUsed for routing node selection.\nOne of the following:\n\"access point\", \"wired\", \"wireless\"\n\n\n\"wireless\"\n\n\nIf one of the enumerated values is not used, then the value will be ignored, a warning message will be logged, and the default value will be used\n\n\n\n\n\n\nrouter_availability\n\n\nUsed for routing node selection.\nOne of the following:\n\"0-3 hr\", \"3-6 hr\", \"6-9 hr\", \"9-12 hr\", \"12-15 hr\", \"15-18 hr\", \"18-21 hr\", \"21-24 hr\"\n\n\n\"3-6 hr\"\n\n\nIf one of the enumerated values is not used, then the value will be ignored, a warning message will be logged, and the default value will be used\n\n\n\n\n\n\nrouter_mobility\n\n\nUsed for routing node selection.\nOne of the following:\n\"always stationary\", \"low mobility\", \"intermediate mobility\", \"high mobility\"\n\n\n\"intermediate mobility\"\n\n\nIf one of the enumerated values is not used, then the value will be ignored, a warning message will be logged, and the default value will be used\n\n\n\n\n\n\nrouter_power_source\n\n\nUsed for routing node selection.\nOne of the following:\n\"always ac powered\", \"battery powered and chargeable\", \"battery powered and not chargeable\"\n\n\n\"Battery powered and chargeable\"\n\n\nIf one of the enumerated values is not used, then the value will be ignored, a warning message will be logged, and the default value will be used\n\n\n\n\n\n\nrouter_advertisement_prefix\n\n\nUsed by thin core applications (TCA) to discover routing nodes.\n\n\n\"org.alljoyn.BusNode.\"\n\n\nIn order to maximize availability to TCA, generic routing nodes should not modify this value. However, it may be useful when deploying custom systems that need to limit the TCA connecting to the routing node due to specific performance constraints.\n\n\n\n\n\n\n\n\nExample\n\n\nproperty name=\nrouter_power_source\nBattery powered and chargeable\n/property\n\n\nproperty name=\nrouter_mobility\nIntermediate mobility\n/property\n\n\nproperty name=\nrouter_availability\n3-6 hr\n/property\n\n\nproperty name=\nrouter_node_connection\nWireless\n/property\n\n\n\n\n\nsyslog\n\n\nHas no value or attributes.  If present, indicates that AllJoyn Daemon should\nsend log messages to \nsyslog\n.\n\n\nExample\n\n\nsyslog/\n\n\ntype\n\n\nNot used by AllJoyn.  Included for backward compatibility.  Including this\nelement in the config file will have no effect.\n\n\nuser\n\n\nIndicates that AllJoyn daemon should run as the indicated user instead of root.\nNote that the indicated user must be known to the system.\n\n\nExample\n\n\nuser\nbarts\n/user",
            "title": "Home"
        },
        {
            "location": "/learn/core/rn_config/#routing-node-configuration-file",
            "text": "The routing node (RN) configuration file is an XML file that controls the\nbehavior of the RN and sets certain variables, such as timers, connection\nlimits, and use case characteristics.  An example config file may be found in the AllJoyn source distribution in ../alljoyn_core/router/test/conf/sample.conf  Note that this sample configuration file would not be useful in practice.  It is\nmerely intended to provide an example of how various elements and attributes\nare formatted.",
            "title": "Routing Node Configuration File"
        },
        {
            "location": "/learn/core/rn_config/#xml-schema",
            "text": "An XML schema, which may be used to validate config files, may be found on the\nAllSeen Alliance website:  https://allseenalliance.org/schemas/busconfig.xsd  The schema is also available in the source code distribution at: ../alljoyn_core/docs/busconfig.xsd  The schema may be referenced in config files by including the following\nattributes in the  busconfig  (i.e., root) element:  busconfig\n  xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n  xsi:noNamespaceSchemaLocation= https://allseenalliance.org/schemas/busconfig.xsd",
            "title": "XML Schema"
        },
        {
            "location": "/learn/core/rn_config/#default-configuration",
            "text": "Bundled Routing Node  The bundled routing node consists of a routing node and a Standard Client\napplication that run in a single process.  As of v15.09, a user may compile AllJoyn with the scons variable  TEST_CONFIG \nset to an absolute or relative path to a config file.  However, as suggested by\nthe scons variable name, this method is intended for debug and test purposes.  If the user does not provide a config file, then the bundled RN relies on a\nhardcoded configuration contained in the file  BundledRouter.cc .  Note that all config settings that apply to the standalone RN also apply to the\nbundled RN.  Bundled RN hardcoded configuration: \n ```xml \n     alljoyn_bundled \n     tcp:iface= ,port=0 \n     udp:iface= ,port=0 \n     20000 \n     4 \n     16 \n     8 \n     8 \n     Battery powered and chargeable \n     Intermediate mobility \n     3-6 hr \n     Wireless   ### Standalone Routing Node\nThe standalone RN runs as a compiled application named `alljoyn-daemon` on Linux.\nIf the user does not specify a separate configuration file when alljoyn-daemon\nis started, or the `--internal` switch is used, then the RN will use a\nconfiguration that is hardcoded in the source.\n\nNote that the standalone RN is also available as a service on Windows 10.  The\nWindows 10 service uses a hard-coded configuration and does not accept any\nparameters or switches.  The examples in this document that describe passing\nparameters or options to `alljoyn-daemon` are referring to the Linux\nimplementation.\n\n**Example (Linux):** start routing node using internal config\n\n    ./alljoyn-daemon\n\n        --OR--\n\n    ./alljoyn-daemon --internal\n\n**Standalone RN hardcoded configuration (Linux):**\n```xml busconfig \n     type alljoyn /type \n     listen unix:abstract=alljoyn /listen \n     listen tcp:iface=*,port=9955 /listen \n     listen udp:iface=*,port=9955 /listen \n     limit name= auth_timeout 20000 /limit \n     limit name= max_incomplete_connections 16 /limit \n     limit name= max_completed_connections 32 /limit \n     limit name= max_remote_clients_tcp 0 /limit \n     limit name= max_remote_clients_udp 0 /limit  /busconfig",
            "title": "Default Configuration"
        },
        {
            "location": "/learn/core/rn_config/#using-an-external-config-file",
            "text": "As previously mentioned, a user-defined, external configuration file may be\npassed to a standalone RN.  In order to start the standalone RN with an\nexternal configuration file, enter the following command (Linux):  ./alljoyn-daemon --config-file=./my_rn_config.xml",
            "title": "Using an External Config File"
        },
        {
            "location": "/learn/core/rn_config/#minimal-config-file",
            "text": "A minimal config file requires the root element ( busconfig ) and a single listen  element.  For example:  busconfig \n     listen tcp:iface=*,port=9955 /listen  /busconfig   This will result in a valid config file, but with very rudimentary\nfunctionality.  In fact, this configuration file would prevent the connection\nof any leaf nodes, since it does not override the default values of 0 for max_remote_clients_tcp  and  max_remote_clients_udp  (i.e.,  limit  attributes).\nTherefore, it would only be able to connect to other routing nodes.",
            "title": "Minimal Config File"
        },
        {
            "location": "/learn/core/rn_config/#review-of-config-file-elements-and-attributes",
            "text": "The default configuration settings should be suitable for most use cases.\nHowever, some applications may benefit from using different settings.  Therefore,\nthe information below is intended to provide some guidance in using\nthese settings.  The following is an alphabetical list of top-level XML\nelements (i.e., immediate child elements of the root element  busconfig )\navailable for use in the config file, along with a description of their meaning\nand application.  Any child elements will be described below their parent\nelement.  Likewise for attributes.  auth  Not used by AllJoyn.  Included for backward compatibility.  Including this\nelement in the config file will have no effect.  flag  Note: \nThe content of the flag element may be either 'true' or 'false'.  All flags\ndefault to 'false'  name attribute (required)     name  description  default  Notes      ns_enable_v1  enable legacy name service if true  true  Used for debugging.  Do not use in deployed production applications.    ns_disable_ipv4  disable IPv4 multicast if true  false  Used for debugging.  Do not use in deployed production applications.    ns_disable_ipv6  disable IPv6 multicast if true  false  Used for debugging.  Do not use in deployed production applications.    ns_disable_directed_broadcast  disable subnet broadcast if true  false  Used for debugging.  Do not use in deployed production applications.     Examples   flag name=\"ns_enable_v1\" false /flag  flag name=\"ns_disable_ipv6\" true /flag   fork  The fork element is empty.  It does not contain any content, child elements, or\nattributes.  If present in the config file, the routing node (daemon) will run in the\nbackground.  Note that  fork  must be enabled in order for  pidfile  to be effective.  On Linux, the config file setting for  fork  may be overridden from the\ncommand line, by using the  --fork  or  --no-fork  options.  Examples   fork/   include  Specify the path to another configuration file, whose contents will be\nincluded at the point where the  include  element is inserted.  The specified path may be absolute or relative.  If the path is relative, then\nit is relative to the configuration file using the include .  In addition, the path must be to a file with the file\nextension  .conf .  ignore_missing attribute (optional)  May be set to \"yes\" or \"no\".  The default is \"no\".     ignore_missing  description      no (default)  a fatal error will occur if the file doesn't exist    yes  silently ignore if the file doesn't exist     Examples   include ../configs/my_config.conf /include  include ignore_missing=\"yes\" my_config.conf /include  include ignore_missing=\"no\" /home/bob/configs/my_config.conf /include   includedir  Similar to  include , except that, instead of specifying the path to a\nfile, specify the path to a directory containing configuration files.\nAll files with the  .conf  file extension will be included.  Note that the order in which the files in the directory are included is\nundefined and, therefore, users should avoid any config file include-order\ndependency when using this element.  The specified path may be absolute or relative.  If the path is relative, then\nit is relative to the configuration file using the includedir  ignore_missing attribute (optional)  May be set to \"yes\" or \"no\".  The default is \"no\".     ignore_missing  description      no (default)  a fatal error will occur if the directory doesn't exist    yes  silently ignore if the directory doesn't exist     Examples   includedir ../configs /includedir  includedir ignore_missing=\"yes\" configs /includedir  includedir ignore_missing=\"no\" /home/bob/configs /includedir   limit  Sets variables for various timeouts and connection limits to an unsigned,\n32-bit integer.  name attribute (required)     name  description      auth_timeout  The maximum amount of time that incoming connections are allowed to complete authentication.  Beyond this limit, incoming connections may be aborted.    session_setup_timeout  The maximum amount of time that incoming connections are allowed to set up session routes. Beyond this limit, incoming connections may be disconnected.    max_incomplete_connections  The maximum number of incoming connections that can be in the process of authenticating.  If starting to authenticate a new connection would mean exceeding this number, then the new connection will be dropped.    max_completed_connections  The maximum number of connections (inbound and outbound) allowed for each tranport.  This means that the total number of completed connections allowed for TCP and UDP is twice this value. If starting to process a new connection would mean exceeding this number, then the new connection will be dropped.    max_remote_clients_tcp  The maximum number of remote clients using TCP. Note:  this value  must  be overridden when using an external configuration file in order to enable TCP connections to leaf nodes.  The default internal configuration file already overrides this value. Note that this setting may be useful for applications that have a specific requirement to prevent leaf nodes from connecting; however, for generic RNs, this value should not be zero.    max_remote_clients_udp  The maximum number of remote clients using UDP. Note:  this value  must  be overridden when using an external configuration file in order to enable UDP connections to leaf nodes.  The default internal configuration file already overrides this value. Note that this setting may be useful for applications that have a specific requirement to prevent leaf nodes from connecting; however, for generic RNs, this value should not be zero.     Test hooks  only  Many of the limits found in the source code are hooks for\ntesting AllJoyn and are not useful for application development or end-products.\nFor informational purposes, these are listed below, however, please do not\nuse them for production code, as they may have undesirable or unpredictable\nbehavior.     DO NOT USE       slap_min_idle_timeout  udp_timewait    slap_max_idle_timeout  udp_segbmax    slap_default_idle_timeout  udp_segmax    slap_max_probe_timeout  udp_fast_retransmit_ack_counter    slap_default_probe_timeout  sls_backoff    udp_connect_timeout  sls_backoff_linear    udp_connect_retries  sls_backoff_exponential    udp_initial_data_timeout  sls_backoff_max    udp_total_data_retry_timeout  sls_preferred_transports    udp_min_data_retries  tcp_default_probe_timeout    udp_persist_interval  tcp_min_idle_timeout    udp_total_app_timeout  tcp_max_idle_timeout    udp_link_timeout  tcp_default_idle_timeout    udp_keepalive_retries  tcp_max_probe_timeout    udp_delayed_ack_timeout  dt_min_idle_timeout    dt_max_idle_timeout  dt_default_idle_timeout    dt_max_probe_timeout  dt_default_probe_timeout     Examples   limit name=\"auth_timeout\" 20000 /limit  limit name=\"max_incomplete_connections\" 16 /limit   listen  Identifies an address on which the bus attachment should listen for incoming\nconnections. This address must be a valid URI that begins with an AllJoyn\ntransport name, followed by appropriate parameters and options.  A configuration file must contain at least one listen  element.  In addition, a configuration file may contain multiple listen  elements, including for the same transport, as long as the specified\ntransport and other parameters are valid and supported by the host platform.  Duplicate  listen  elements will be ignored (with a\nwarning message).  Invalid  listen  elements\nwill result in a fatal error, unless there is a valid  listen  element\navailable, in which case the invalid  listen  element will be ignored (with a\nwarning message).  Descripton and Format     Protocol or Transport Name      tcp    udp    unix    slap    npipe     Format options     Option Name      iface    addr    port    abstract    path    type    dev    baud     pidfile  Records the routing node process ID (PID) to the specified file.  If the file\ndoes not exist, it will be created.  If the file does exist, it will be\nover-written.  IMPORTANT NOTE:   pidfile  is ONLY effective if  fork  is also\nspecified.  Alternatively, the routing node may be started with the  --fork \noption (Linux).  policy  Defines a security policy to be applied to a particular\nset of connections to the bus. A policy is made up of  allow  and  deny \nelements. Policies are analogous to a firewall in that they allow expected\ntraffic and prevent unexpected traffic.  Policies applied later will override those applied earlier, when the policies\noverlap.  Attributes  The  policy  element must include one of the following attributes, which are\nmutually exclusive.  A fatal error will be generated if more than one attribute\nis present.     Attribute  Contents      context  \"default\" OR \"mandatory\"    user  username or userid    group  group name or gid     allow  and  deny  A  policy  must contain at least one  allow  or  deny  element.  However,\na single  policy  with only an  allow  element is not meaningful for AllJoyn,\nsince all traffic is allowed by default.  Instead, an  allow  element\nprimarily functions as an exception to previous  deny  elements.  Attributes for  allow  and  deny  elements     Attribute      user    group    own    own_prefix    send_error / receive_error    send_interface / receive_interface    send_member / receive_member    send_path / receive_path    send_path_prefix / receive_path_prefix    send_group / receive_group    send_user    receive_user    send_same_user / receive_same_user    receive_sender / send_destination    send_type / receive_type     Example  policy context= default \n   deny user= * / \n   deny own= * / \n\n   deny send_type= method_call / \n   allow send_type= signal / \n   allow send_type= method_return / \n   allow send_type= error / \n\n   allow send_destination= org.freedesktop.DBus / \n   allow receive_sender= org.freedesktop.DBus / \n\n   allow send_interface= org.alljoyn.Bus.Peer.Session / \n\n   allow user= jethro /  /policy  policy user= jethro \n   allow send_type= method_call / \n   allow send_type= signal / \n   allow send_type= method_return / \n   allow send_type= error / \n\n   allow own_prefix= test /  /policy  policy user= joe \n    deny send_type= method_call  send_user= beth / \n    deny receive_type= signal  receive_user= bob /  /policy   property  Define characteristics related to router node selection and nameservice.  name attribute (required)     Name  Description  Default  Notes      router_node_connection  Used for routing node selection. One of the following: \"access point\", \"wired\", \"wireless\"  \"wireless\"  If one of the enumerated values is not used, then the value will be ignored, a warning message will be logged, and the default value will be used    router_availability  Used for routing node selection. One of the following: \"0-3 hr\", \"3-6 hr\", \"6-9 hr\", \"9-12 hr\", \"12-15 hr\", \"15-18 hr\", \"18-21 hr\", \"21-24 hr\"  \"3-6 hr\"  If one of the enumerated values is not used, then the value will be ignored, a warning message will be logged, and the default value will be used    router_mobility  Used for routing node selection. One of the following: \"always stationary\", \"low mobility\", \"intermediate mobility\", \"high mobility\"  \"intermediate mobility\"  If one of the enumerated values is not used, then the value will be ignored, a warning message will be logged, and the default value will be used    router_power_source  Used for routing node selection. One of the following: \"always ac powered\", \"battery powered and chargeable\", \"battery powered and not chargeable\"  \"Battery powered and chargeable\"  If one of the enumerated values is not used, then the value will be ignored, a warning message will be logged, and the default value will be used    router_advertisement_prefix  Used by thin core applications (TCA) to discover routing nodes.  \"org.alljoyn.BusNode.\"  In order to maximize availability to TCA, generic routing nodes should not modify this value. However, it may be useful when deploying custom systems that need to limit the TCA connecting to the routing node due to specific performance constraints.     Example  property name= router_power_source Battery powered and chargeable /property  property name= router_mobility Intermediate mobility /property  property name= router_availability 3-6 hr /property  property name= router_node_connection Wireless /property   syslog  Has no value or attributes.  If present, indicates that AllJoyn Daemon should\nsend log messages to  syslog .  Example  syslog/  type  Not used by AllJoyn.  Included for backward compatibility.  Including this\nelement in the config file will have no effect.  user  Indicates that AllJoyn daemon should run as the indicated user instead of root.\nNote that the indicated user must be known to the system.  Example  user barts /user",
            "title": "Review of Config File Elements and Attributes"
        },
        {
            "location": "/learn/core/security2_0/hld/",
            "text": "AllJoyn\n Security 2.0 Feature High-Level Design\n\n\nIntroduction\n\n\nPurpose and scope\n\n\nThis document captures the system level design for the enhancements to the\nAllJoyn\n framework to support the Security 2.0 feature requirements. Related\ninterfaces and API design is captured at a functional level. Actual definition\nfor interfaces and APIs is outside the scope of this document. Features and\nfunctions are subject to change without notice.\n\n\nRevision history\n\n\n\n\n\n\n\n\nRevision\n\n\nDate\n\n\nChange Log\n\n\n\n\n\n\n\n\n\n\nRev 1 Update 0\n\n\nAugust 8, 2014\n\n\nUpdate with new format and comments\n\n\n\n\n\n\nRev 1 Update 1\n\n\nAugust 27, 2014\n\n\nUpdate with comments from the collaboration meeting\n\n\n\n\n\n\nRev 1 Update 2\n\n\nSeptember 8, 2014\n\n\nUpdate with comments and agreement from the technical conference call on September 3, 2014.\n\n\n\n\n\n\nRev 1 Update 3\n\n\nOctober 30, 2014\n\n\nUpdate the authorization data section based on agreement from the technical conference call on October 14, 2014.\n\n\n\n\n\n\nRev 1 Update 4\n\n\nDecember 23, 2014\n\n\nUpdate the Certificate section and changes listed in JIRA tickets ASACORE-1170, 1256, 1259, 1260.\n\n\n\n\n\n\nRev 1 Update 5\n\n\nJanuary 15, 2015\n\n\nUpdate the rule enforcing table after the conference call on Janurary 13, 2015 by the Security2.0 working group.\n\n\n\n\n\n\nRev 1 Update 6\n\n\nMarch 31, 2015\n\n\nUpdate the authorization data after the conference call on Janurary 20, 2015 by the Security2.0 working group. Updated the permission matrix to reflect the concept of Provide permission.\nUpdated based on review comments by the Security 2.0 working group on March 6, 2015.\nAdd the updated information on Security Manager and manifest from the Wiki\nUpdated based on review comments by the Security 2.0 working group on March 13, 2015 and on March 19, 2015.\nUpdated based on open issue discussion on March 23, 2015. Updated based on comments on March 31, 2015 short review.\nUpdated the authorization data search algorithm section based on reviews comment.\nUpdated based on discussion on April 28, 2015.\nUpdated based on discussion on May 5, 2015.\n\n\n\n\n\n\nRev 1 Update 7\n\n\nMay 28, 2015\n\n\n Simplified access rule selection by removing priority and enforcement explicit deny rules regardless of degree of match. Simplifying to aid in comprehension\nCorrected text describing policy generated after being claimed to match the specified policy; outgoing messages are allowed for ANY_TRUSTED.\nCorrected generated policy to indicate there are two entries for members under the ANY_TRUSTED ACL\nChanged the description of the generated policy to indicate it is not an example, it is the policy to be generated, and recommend certification test be created to verify this.\nCorrected a couple of places, in definition and description of session establishment, to indicate that membership certificate trust requies a signature chain including the security group authority rather than any certificate authority.\n\n\n\n\n\n\nFuture revisions\n\n\nJune 12, 2015\n\n\n See git submissions for change notes.\n\n\n\n\n\n\n\n\nAcronyms and terms\n\n\n\n\n\n\n\n\nAcronym/term\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAbout data\n\n\nData from the About feature.  For more information, refer to the  \nAbout Feature Interface Spec.\n\n\n\n\n\n\nACL\n\n\nAccess Control List\n\n\n\n\n\n\nAES CCM\n\n\nThe Advanced Encryption Standard 128-bit block cypher using Counter with CBC-MAC mode. Refer to \nRFC 3610\n for more information.\n\n\n\n\n\n\nAllJoyn framework\n\n\nOpen source peer-to-peer framework that allows for abstraction of low-level network concepts and APIs.\n\n\n\n\n\n\nAuthentication GUID\n\n\nThe Authentication GUID is a GUID assigned to a keystore for authentication purposes.  This GUID is persisted in the keystore and provides a long-term identity for the keystore. Typically, this GUID is associated with a single application. In the scenario where a group of related applications share a given keystore, they also share the same authentication GUID.\nThis GUID is used as a mapping key for storing and accessing authentication and encryption keys.   All key materials associated with another peer is stored in the keystore with the peer\u2019s authentication GUID as the mapping key.\n\n\n\n\n\n\nCertificate Authority (CA)\n\n\nEntity that issues a digital certificate\n\n\n\n\n\n\nConsumer\n\n\nAn AllJoyn application consuming services on the AllJoyn network.\n\n\n\n\n\n\nDevice\n\n\nA physical device that may contain one or more AllJoyn applications.  In this document, whenever the term \u201cdevice\u201d is used, it indicates the system application of the given physical device.\n\n\n\n\n\n\nDSA\n\n\nDigital Signature Algorithm\n\n\n\n\n\n\nECC\n\n\nElliptic Curve Cryptography\n\n\n\n\n\n\nECDHE\n\n\nElliptic Curve Diffie-Hellman Ephemeral key exchange\n\n\n\n\n\n\nECDHE_ECDSA\n\n\nECDHE key agreement with asymmetric DSA based authentication.\n\n\n\n\n\n\nECDHE_NULL\n\n\nECDHE key agreement only. No authentication.\n\n\n\n\n\n\nECDHE_PSK\n\n\nECDHE key agreement with pre-shared symmetric key based authentication.\n\n\n\n\n\n\nFactory-reset application\n\n\nAn application restored to the original configuration.\n\n\n\n\n\n\nGrantee\n\n\nThe application or user who is the subject of a certificate.\n\n\n\n\n\n\nGUID\n\n\nGlobally Unique Identifier. A 128 bit identifier generated randomly in a way that the probability of collision is negligible.\n\n\n\n\n\n\nSubject\n\n\nThe application or user possessing a private key associated with the certificate.\n\n\n\n\n\n\nKeystore\n\n\nA repository of security keys and certificates.  An application instance can have at least one keystore.  A keystore is associated with a bus attachment.  If an application uses multiple bus attachments, it can have more than one keystore.\nMultiple applications running as the same user can choose to share the same keystore, but if they do, they are treated as the same security principal.\n\n\n\n\n\n\nOOB\n\n\nOut Of Band\n\n\n\n\n\n\nPeer\n\n\nA remote application participating in the AllJoyn messaging.\n\n\n\n\n\n\nPermission module\n\n\nThe AllJoyn Core module that handles all the permission authorization.\n\n\n\n\n\n\nProducer\n\n\nAn AllJoyn application providing services on the AllJoyn network.\n\n\n\n\n\n\nSecurity Group\n\n\nA logical grouping of devices, applications, and users. It is identified by a group ID which is a GUID and the security group authority public key. An application can be installed with a policy to expose services to members of the security group. An application or user holding a membership certificate is in fact a member of the security group. Any member of the security group can access the services exposed to the group by the applications with ACLs defined for that group.\n\n\n\n\n\n\nSecurity Group Authority\n\n\nA security group authority is the user or application that defines the security group and grant membership certificates to other. The security group authority is the certificate authority for that group.\n\n\n\n\n\n\nSecurity Manager\n\n\nA service used to manage cryptographic keys, and generate and distribute certificates.\n\n\n\n\n\n\nSHA-256\n\n\nSecure Hash Algorithm SHA-2 with digest size of 256 bits or 32 bytes.\n\n\n\n\n\n\nUser\n\n\nThe person or business entity interacting with AllJoyn applications.\n\n\n\n\n\n\n\n\nSystem Design\n\n\nOverview\n\n\nThe goal of the Security 2.0 feature is to allow an application to validate\naccess to interfaces or objects based on policies installed by the owner.  This\nfeature is part of the AllJoyn Core library.  It is not an option for the\napplication to enforce permission.  It is up to the user to dictate how the\napplication performs based on the access control lists (ACLs) defined for the\napplication.  The AllJoyn Core Permission component does all the enforcement\nincluding the concept of mutual or one-way authorization before any message\naction can be taken.\n\n\nThe Security Manager is a service that helps the user with key management and\npermission rules building.  Using the application manifest template defined by\nthe application developer, the Security Manager builds the manifest consisting\nof access control lists to let the end-user authorize which interactions the\napplication can do.  An application developer does not have to build a security\nmanager.  The permission can be installed by another application or another\nsecurity manager.\n\n\nIn addition to the encrypted messaging (using AES CCM) between the peers, the\nSecurity 2.0 Permission module manages a database of access credentials and the\nAccess Control Lists (ACLs).\n\n\nFigure shows the system architecture of the Security 2.0 feature.\n\n\n\nFigure:\n Security system diagram\n\n\nPremises\n\n\nThe following Table lists the premises for the Security 2.0 features.\n\nTable:\n Security 2.0 premises\n\n\n\n\n\n\n\n\nTopic\n\n\nDefinition\n\n\nPremises\n\n\n\n\n\n\n\n\n\n\nIdentity\n\n\nThe application security principal\n\n\nEach peer is identified by an authentication GUID  and a cryptographic public key\n\n\n\n\n\n\nAdmin\n\n\nAn admin (or administrator) is a security principal with administrator privilege for the application\n\n\nAn admin is a member of the admin security group which has full access to any object and interface in the application\n\n\n\n\n\n\nClaim\n\n\nIncorporate a factory-reset application with the Permission Module\n\n\nA factory-reset application has no list of certificate authorities for AllJoyn security.\nA factory-reset application has no admin for AllJoyn security.\nAnyone can claim a factory-reset application.\nThe Claimer installs a FROM_CERTIFICATE_AUTHORITY ACL for an identity certificate authority\nThe Claimer installs an admin security group\n\n\n\n\n\n\nPolicy\n\n\nA policy is a list of ACLs governing  the behavior of an application\nA policy template is a list of rules defined by the application developer to guide the admin for policy building.\n\n\nAn admin can install, update, or remove a policy.\nA newer policy can be installed by any authorized peer. Developers can define policy templates to help the admin with policy building.\nSecurity group specific policy specifies the permissions granted to members of the group. The security group authority becomes a certificate authority for that particular group.\nA policy may exist at the producer or consumer side. Policy enforcement applies wherever it resides.\nA policy is considered private.  It is not exchanged with any peer.\nA keystore has at most one policy.  A complex application with multiple bus attachments can use a shared keystore in one bus attachment and an app-specific keystore for another bus attachment.  In such case, the complex application has in fact more than one policy.\nAn admin can query the existing policy installed in the keystore.\n\n\n\n\n\n\nMembership certificate\n\n\nA membership certificate is the proof of a security group membership\n\n\nMembership certificates are exchanged between peers.\nAn application trusts a membership certificate if the issuer or any subject in the issuer\u2019s certificate chain is the security group authority.\nA membership certificate subject can generate additional membership certificates for the given security group if the cA flag is true.\nA membership certificate must have a security group ID.\nAn application can accept the installation of any number of membership certificates into its keystore.\n\n\n\n\n\n\nIdentity certificate\n\n\nCertificate that signs the identity information.\n\n\nThe Certificate has an identity alias stored in the X.509 SubjectAltName extension field.\nAn application trusts identity certificates issued by the application\u2019s certificate authority or any of the security group authorities listed in the application\u2019s policy.\nAn identity certificate subject can generate additional identity if the cA flag is true.\n\n\n\n\n\n\nManifest data\n\n\nThe permission rules accompanying the identity certificate\n\n\nManifest data are not present in the identity certificate. They are accompanied with the identity certificate.\nThe manifest data digest is present in the identity certificate.\nThe manifest data syntax is the same as the policy syntax.  While the policy stays local the manifest data is presented to the peer along with the identity certificate.\n\n\n\n\n\n\nSecurity Manager\n\n\nA service used to manage cryptographic keys, and generate certificates.\n\n\nSecurity Manager can push policy and certificates to application\n\n\n\n\n\n\n\n\nTypical operations\n\n\nThe following subsections describe the typical operations performed by a user.\n\n\nAssumptions\n\n\nIn all the flows listed in this section, the Security Manager is assumed to be\nclaimed by another Security Manager or to be self-claimed.  The certificates may\nhave been issued from sources in the cloud.  As the result, the Security Manager\nis shown with one certificate authority and an identity certificate.\n\n\nSample Certificates and Policy Entries\n\n\nThe following is a high level presentation of certificates and policy entries\nused in the flows in this section.\n\n\n\n\nFigure:\n Sample Certificates and ACL entries\n\n\nThe peer types\n\n\nThe following peer types are supported in the permission policy.  A peer may match many of the peer types.\n\n\n\n\n\n\n\n\nPeer Type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nALL\n\n\nThis matches all peers including an anonymous peer using ECDHE_NULL key exchange.\n\n\n\n\n\n\nANY_TRUSTED\n\n\nThis matches any authenticated peer for all authentication methods except ECDHE_NULL key exchange.\n\n\n\n\n\n\nFROM_CERTIFICATE_AUTHORITY\n\n\nThis matches any peer authenticated via ECDHE_ECDSA key exchange and its identity certificate\u2019s trust is verified against the specific certificate authority listed in the policy for this type of peer.\n\n\n\n\n\n\nWITH_PUBLIC_KEY\n\n\nThis matches a peer with the specific public key.  The peer is authenticated via ECDHE_ECDSA key exchange.  Its identity certificate\u2019s trust is verified against any of the application\u2019s certificate authorities (including the security group authorities).\n\n\n\n\n\n\nWITH_MEMBERSHIP\n\n\nThis matches any peer with possession of a membership certificate with the specific security group ID.\nThe peer is authenticated via ECDHE_ECDSA key exchange.  Its identity certificate\u2019s trust is verified against any of the application\u2019s certificate authority (including the security group authorities).\nThe subject of the membership certificate must be the peer\u2019s public key.\n\n\n\n\n\n\n\n\nDefine a security group\n\n\nAny user can define a security group (logical grouping of applications and\nusers) using a Security Manager. When the user specifies a security group name\n(for display purpose), the Security Manager creates the security group ID\n(a GUID value).\n\n\nRequired Key Exchanges\n\n\nThe framework requires either ECHDE_NULL or ECDHE_PSK key exchange for the claim\nprocess.  Once the application is claimed, only the ECDHE_ECDSA key exchange is\nallowed unless the policy allows for anonymous user; in such case, ECDHE_NULL is\nacceptable.\n\n\nCertificate exchange during session establishment\n\n\nDuring the AllJoyn ECHDE_ECDSA key exchange and session establishment, the peers\nexchange identity certificates, manifests, and all membership certificates.\nSince all the membership certificates are exchanged, there is a potential\ninformation disclosure vulnerability.  It is desired to have a more intelligent\nselection algorithm to provide membership certificates on demand and need-to-know\nbasis.  This algorithm needs to take into account the latency of the certificate\nexchange during the method call invocation.\n\n\nThe bus attachment trusts the peer if the issuer of the peer\u2019s identity\ncertificate is any of its certificate authorities and any of the security group\nauthorities listed in the application\u2019s policy.\n\n\nAfter the session key is generated, the peers exchange all the membership\ncertificates.  Each membership certificate\u2019s trust is checked against the\npublic key of the authority of the security group.\n\n\n\n\nFigure:\n Exchange manifest and membership certificates\n\n\nThe identity certificate chain is exchanged during the ECDHE_ECDSA key exchange\nprocess.  The org.alljoyn.Bus.Peer.Authentication interface is not enforced with\npermission.\n\n\nClaim a factory-reset application\n\n\nUsing a Security Manager any user can claim any factory-reset application. The\nfactory-reset application is assumed to be already onboarded to the network.  It\nis recommended the claiming process occurs during the onboarding process while\nthe peers are connected via the SoftAP.\n\n\n\n\nFigure:\n Recommend to claim during onboarding\n\n\nClaiming is a first-come, first-claim action. The user installs an admin\nsecurity group.  The procedure to make the application to become claimable again\nis manufacturer-specific.   See the FactoryReset() in the Configuration\ninterface.  There will be an API call that allows the application to make itself\nclaimable again.\n\n\nClaim factory-reset application without out-of-band registration data\n\n\n\n\nFigure:\n Claim a factory-reset application without using out-of-band\nregistration data\n\n\nThe identity certificate will be used for authentication in the ECDHE_ECDSA key\nexchange.\n\n\nClaim factory-reset application using out-of-band registration data\n\n\nAn application manufacturer can provision a key or the application can\ndynamically generate a key to support the claiming process. The ECDHE_PSK key\nexchange is used in this scenario. The key is provided to the user out of band.\nAn example is a QR code or a token delivered via email or text messaging. The\nuser is prompted for the key when establishing a connection with the\nfactory-reset application.\n\n\n\n\nFigure:\n Claiming a factory-reset application using out-of-band registration\ndata\n\n\nExample of building a policy\n\n\nA user uses a Security Manager application to build a policy. The Security\nManager application queries the About data and manifest templates from the\napplication. The Security Manager application can do further introspection of\nthe application for the detailed information of securable interfaces and secured\nobjects, and prompt the user to select the permissions to include in the policy.\n\n\nA policy may contain a number of ACLs.  Please refer to section\n\n(Policy ACL format)\n for more information.\n\n\nInstall a policy\n\n\nAn admin can install a policy for the application.\n\n\nWhen a policy is installed, the core framework may expire master secrets\nincluding existing session keys if it is not able to apply the new policy without\nre-authenticating the peer.  Resource constrained devices are most likely to\nexpire master secrets.  Expiring keys will cause existing sessions to terminate.\n\n\n\n\nFigure:\n Install a policy\n\n\nUpdate a manifest\n\n\nAn admin can update a manifest for the application.  This involves resigning the\nidentity certificate because the new digest of the manifest must be included in\nthe identity certificate.\n\n\n\n\nFigure:\n Update manifest\n\n\nAdd an application to a security group\n\n\nAn admin issues a membership certificate with the given security group ID and\nprovides it to the application to install in its keystore. This act adds the\napplication to the security group.\n\n\n\n\nFigure:\n Add an application to a security group\n\n\nAdd a user to a security group\n\n\nThe security group authority uses the Security Manager to generate the membership\ncertificate for another user for the given security group ID.\n\n\nIn the following flow, the security group authority named \u201cuser\u201d provides a\nmembership certificate for security group LivingRoomGUID to the other user named\n\u201cuser2.\u201d\n\n\n\n\nFigure:\n Add a user to a security group\n\n\nSecurity Manager\n\n\nIntroduction\n\n\nThe AllJoyn security 2.0 ecosystem consists of many applications and devices.\nThose applications and devices are deployed in various setups and for them it is\nimpossible to know up front what other peers they will see around them let alone\nknow how they should interact with them. Which peers can be trusted, which\nrights do those peers have\u2026 So after being deployed, applications and devices\nhave to be configured. The people in charge of configuring the system, the\nadministrators need a service for this. Such a service is called a security\nmanager.\n\n\nDepending on your setup, you need a different service. A large enterprise has\ndifferent requirements than a home does. Not all administrators have a strong\ntechnical background. A tool for home users should have a straightforward,\nunderstandable user interface (hiding the more complex features). These\nsimplifications should be done inside the security manager, so it is transparent\nfor applications and devices in which setup they are deployed. Application\ndevelopers should make no distinction between enterprise and small home.\n\n\nA security configuration consists of two parts:\n1. Certificates: certificates provide proof that an application is managed by a\n   security manager. They can be used to gain access to resources of other peers\n   or to provide resources themselves to others. The certificates describe the\n   rights the subject has.\n2. Policy: A policy is a list of Access Control Lists (ACLs). These ACLs\n   describe how other peers can access the holder of the policy.\n\n\nSecurity managers use AllJoyn to transfer this configuration to applications and\ndevices they manage.\n\n\nSecurity Manager Architecture\n\n\nA security manager is a service that can take multiple forms. For a home setup\nit can be a single application accessed by one person. For an enterprise setup,\nmultiple administrators need to use it, so its core can run on a server, with\nsome local application talking to it. When discussing the functional blocks of\nthe security manager, it is important to understand that those blocks can reside\non different machines and that for some of these we even have multiple instances.\n\n\n\n\nThe manager provides certificates. In order to generate and sign certificates,\n  it needs to have a certificate authority (CA).\n\n\nConfiguration storage: The security manager should keep track of what the\n  configuration looks like. To do so, it should persist the configuration data.\n\n\nUI: The administrator needs to interact with the security manager in order to\n  make configuration changes. The user interface doesn't need to be part of the\n  manager itself. It could be running in a web browser or it could offer a REST\n  API, so that custom UI can be built on top.\n\n\nAllJoyn Agent (security manager agent): Configuration updates are sent using\n  AllJoyn as the communication protocol. The agent is the component which does\n  the interaction with the managed peers.\n\n\n\n\nThe following assumptions are made:\n\n The four functional blocks of the security manager can be combined into a\n  single application, but it should be possible to run them in different\n  applications or even on different hosts.\n\n A security manager can have multiple security manager agents acting on its\n  behalf.\n\n The security manager topology is transparent for AllJoyn applications.\n\n A security manager is identified by the public key of its CA. We call this the\n  key of the security manager.\n\n\nThe Alliance envisions multiple implementations of security managers and does\nnot provide implementation specifications. The Alliance does specify a set of\ninterfaces that allow the security managers to interact with AllJoyn security 2.0\nbased applications and devices.\n\n\nWhat the Security Manager manages\n\n\nWe already mentioned a number of times that a security manager manages\napplications and devices. But what does it mean and do we really manage\napplications and devices? The security manager agent will use AllJoyn security\nfeatures to set up a secure connection to a peer. The only way it has to\nsecurely identify this peer is by looking at that peer's public key. Since we\nhand out certificates granting rights to this key, in fact it means we are\nmanaging keys. So when asking what are we managing, we should ask ourselves who\nhas access to a key? There is no easy answer to this questions. It all depends\non the OS and platform the software is running on.\n\n\n\n\nOn a plain Linux or Windows machine, applications can choose to protect data\n  on a per-user basis, making it hard to protect the key from other applications\n  running as the same user. On the other hand, the key is also not\n  application-specific. When the same application runs as a different user, it\n  can't access the key anymore.\n\n\nOperating systems on smartphone do a better job at sandboxing applications.\n  The link between key and application is stronger there.\n\n\n\n\nHow many keys you need per device depends on the device:\n\n A single-function device (e.g., a temperature sensor) is considered as one big\n  application. One key to do all operations.\n\n Every app on a smartphone is considered as an app on its own, so one key per\n  application.\n* The built-in firmware of a smart TV is also considered as a single app.\n  Applications installed on top of the firmware of the TV are separate apps and\n  should have their own key.\n\n\nWhat we can trust\n\n\nThe AllSeen Alliance offers a software stack that runs on top of some hardware\nwithin an OS. The stack can be embedded in an application which is installed on\na device or could be integrated in a firmware of a device. The security manager\ncannot distinguish this. He only sees a remote peer. Furthermore the security\nmanager cannot assume applications are running on trustworthy systems. If an\napplication runs on a compromised or malicious system, there is little we can do\ninside the app to protect.  A genuine application running on malicious system,\nshould be treated as malicious. We should protect the ecosystem by:\n\n\n\n\nBeing able to revoke the rights granted to an application.\n\n\nMake sure compromised or even malicious applications are limited to rights\n   they were given. Since we can't trust the OS or hardware the application is\n   running on, these checks must be done at the remote peer side.\n\n\n\n\nThe protective measure should be defined so that a well-behaving app on a well\nbehaving system can protect itself from any unwarranted access. If both peers\nare malicious, then there is little we can do. But then they don't need AllSeen\nto perform malicious acts. There is a risk though that 2 malicious applications\nteam up. Each individual app gets a small acceptable set of rights, but then\ncombining their rights to launch an attack.\n\n\nWhen claiming an application two considerations must be made:\n\n\n\n\nCan I trust the application?\n\n\nCan I trust the device where the application is running on? But not only the\n   device and its OS, but for desktops systems as well which other applications\n   are there? These apps might to try get access to the keystore of the genuine\n   app. This is not something we can fix within the AllSeen Alliance. This\n   remains an integration aspect\n\n\n\n\nSharing Keystores\n\n\nWhen an application is claimed, it will store its certificates inside a keystore.\nThis keystore can be shared. The security manager nor the system can prevent\napplications from doing this. Is it recommended to share keystores? It has the\nadvantage that you only have to claim one application, while multiple\napplications can use it. However the certificates in the store will only grant a\nlimited set of permission to its users. Sharing the store only makes sense if it\nwas granted all permissions required by its applications. Sharing keystore can\nbe allowed if the applications granted access to it are known upfront and the\nunion of rights is known.\n\n\nSharing keystores does have some side effects.  Every app using the keystore\nwill appear as the same manageable application. The security will be able to\nmanage one keystore via multiple apps. This feature requires additional layer of\ncomplexity in order to provide the concurrent access to the shared keystore.\n\n\nWe also partially lose the ability to sandbox applications, as applications\nusing a shared keystore get a full set of rights linked to the store and not\nnecessarily the ones they strictly need.\n\n\nApplications integrated in firmware\n\n\nThe firmware of a device could consist of multiple smaller AllSeen applications.\nFrom end-user perspective you only want to claim this device once. Those\napplications are allowed to share their keystore, but only one of them should\nprovide the Security interfaces. So only one application is seen from security\nmanager perspective. When expressing the permission required for this\napplication, it should request all permissions required by the apps on that\ndevice.\n\n\nStandalone applications\n\n\nStandalone applications are apps downloaded and installed on a desktop computer,\ntablet or smart phone or something similar. Standalone applications should not\nshare their  keystore with other applications. If such an application is built\nout of separate sub-applications (each of them uses a separate bus attachment),\nthen they should follow the same rules as applications integrated in firmware.\n\n\nSecurity Manager Operations\n\n\nThe security manager allows the following operations:\n- security group management: create, update and delete security groups\n    - allow grouping of applications. A group is uniquely defined by GUID and\n      the public key of a security manager. Applications can become members of a\n      group when they are issued a membership certificate for that group\n- identity management: create, update and delete identities\n    - Identities are used to define the users of application. Users can map to\n      physical persons.  Applications can act on behalf of a user when they\n      receive an identity certificate for that user\u2019s security manager.  An\n      application keystore should only have one identity certificate.\n- application/key management:\n    - claim applications: make it managed by this security manager\n    - manage application manifest\n    - manage AllJoyn certificates for these applications\n    - manage policy (ACL's) of applications\n    - force application to become un-managed again\n\n\nInter Security Manager Interaction\n\n\nWhen applications interact with each other, they check if the interaction is\nallowed by their policies as previously set by their security manager. In\npractice, a peer must present a certificate (chain) signed by its security\nmanager public key. Meaning that with the basic features we created silos, you\ncan only talk to applications managed by your own security manager. In practice\napplications managed by different security managers need to interact with each\nother as well. We provide 2 ways to do this: Delegation and Restricted User.\n\n\nDelegation\n\n\nUse case\n\n\nI\u2019m the administrator of my home ecosystem. I claim appliances in the home and\nprovide them with configuration. I as administrator am the only person having\naccess to the security manager. When my kids want to get access to an appliance,\nthen they have to ask me to get approval for each application they want to use.\nThis may not be sufficient for all use cases. With delegation, my security\nmanager gives a membership certificate with delegation rights to the security\nmanager of each of my kids. With this certificate, they can delegate these\nrights to their applications. They only need to ask one time and then they can\nmake any of their applications part of my group. Even though my kids did not\ninteract directly with each other, with these delegated certificates they\ninteract with each other in the scope of this group.\n\n\nLimitations\n\n\nThe followings are the limitations of using delegation.\n- You can only authenticate members of the group. Mutual authenticated requests\n  can only be done between members of the group.\n- My kids get Remote-control rights for the TV by giving them a membership\n  certificate with delegation rights for my TV Group. Their remote control\n  applications become members of the TV group. If I give my TV a policy for the\n  TV group, then the TV will allow the request from the remote control apps of\n  my kids. This requires my kids to define an ANY-TRUSTED policy for TV\n  operations for their apps. This is ok for TVs remote control operations. If\n  mutual authentication is required, the TV must become member of the TV group\n  as well.\n- For a chat use case you need to know who is sending a message and to whom\n  you\u2019re sending messages. So mutual authentication is required, and all\n  participants have to be in that group.\n- As policy is defined on group level, it would require separate groups in order\n  to differentiate between kids and parents.\n\n\nDelegating certificate Flow\n\n\nIn the X.509 membership and identity certificates, the delegate concept is\nrepresented by the basicConstraints extension cA flag.  If a grantee receives a\ncertificate with the X.509 basicConstraints extension cA flag equal to true, the\ngrantee can issue a certificate to others.  If the cA flag is false then a peer validating a\ncertificate chain verifies that no further delegation has been done, or the\nchain is considered invalid.\n\n\n\n\nFigure:\n Reissue membership certificate\n\n\nRestricted access for other security manager\n\n\nRestricted access tries to address the same problem as delegation but takes a\ndifferent approach to solve it. With delegation, you give a certificate to an\napplication. With that certificate the application can prove it is allowed\naccess to a group. With restricted access we define a policy on our managed\napplications that allows applications from a different security manager to get\naccess. This would be as if we would pre-install the delegated membership\ncertificate on all our managed applications. So when the peer comes around, he\ndoesn't need to send the proof, the application already has it. Since policy\ncomes from a trusted source, we don't need to distribute certificates, we can\ndefine a more compact ACL.\n\n\nIn practice, the security manager defines a restricted peer type for all\napplications that need to interact with the applications of the peer security\nmanager. This ACL restricts applications of that security manager to a specific\nset of rules. Those applications just need to prove that they are owned with an\nidentity certificate verifiable with the peer security manager certificate\nauthority. That authority is installed with the restricted peer entry into the\nlocal application policy.\n\n\nAs example use case: Suppose we have a real-estate agent. When showing a house\nto clients, he'd like to show-off the AllSeen-enabled home automation system.\nThis can be achieved with either delegation or restricted user. The advantage of\nrestricted user is that if he potentially needs to show 100 homes, he can do it\nbased on 1 certificate instead of 100 for the delegation scenario. There is less\nrisk for information disclosure. If someone could get hold of the 100\ncertificates, then he can learn who the home sellers are. In the restricted user\ncase, the seller's public keys are in the policy of the agent's app and policy\nis never shared.\n\n\nInstall a restricted peer ACL Flow\n\n\nThe admin installs a FROM_CERTIFICATE_AUTHORITY ACL into his local application\u2019s\npolicy to allow his friend to have access to the local application.\n\n\n\n\nFigure:\n Add restricted user rules to an application\n\n\nApplication Manifest\n\n\nWhen considering where AllSeen enabled applications will run, smartphones are an\nobvious target. A lot of applications are available in various app stores.\nUnfortunately not all of these applications are trustworthy. For example, the\nflashlight app asks for access to phonebook, network, etc. Same as the\napplication is sandboxed on the smartphone, we would like to sandbox\napplications within the AllSeen security 2.0 context. If I install an AllSeen TV\nremote control app, then I would like it only to have rights to do TV\noperations. Nothing more. Since we can't trust the application, we can't assume\nit will behave properly. So these restrictions must be enforced by the peers.\nFor the remote control example, the TV must check whether the app has\npermissions. When remote control app tries to open the door, then the door must\nreject the call.\n\n\nThe main goal of an application manifest is to inform an admin which interfaces\nan application will produce and consume. Once the admin accepts the manifest,\nthe manifest is signed and installed on the application. The signed manifest\nwill be used to enforce that the application cannot produce or consume any\nunwarranted interfaces.\n\n\nA signed application manifest limits the potential interfaces a malicious\napplication can access within a set of well-behaving applications.\n\n\nThe application manifest has a similar goal as an application manifest on an app\nstore application, in which an end-user has to accept a list of permissions when\ninstalling a new application on his phone which are enforced by the app store\napplication framework. The implementation is however different, as described\nbelow.\n\n\nRequirements\n\n\nManifest Format\n\n\nThe manifest must be expressed at the interface level. It may be expressed at\nthe member level, but this is not recommended as this increases the complexity\nthat needs to be handled by the admin.\n\n\nManifest Acceptance\n\n\nThe manifest template must be presented to the admin in a user-friendly way. As\nthe interface names might not be very informative, they must be mapped to a\nuser-friendly description.\n\n\nAs a malicious application can by definition not be trusted, the descriptions\nmust be provided by a trustworthy source.\n\n\nThe descriptions of the interfaces should be localized to the admin.\n\n\nThe AllSeen Alliance must provide descriptions for any standard AllSeen\ninterface, as reviewed and recommended by the Interface Review Board (IRB).\n\n\nThe application developer must provide the descriptions of any application\nspecific interfaces.\n\n\nIf a manifest template is defined at the member level, a description for each\nlisted member must be available.\n\n\nManifest Enforcement\n\n\nThe accepted manifest must be enforced by the peer application, as a malicious\napplication may not be trusted to enforce it locally.\n\n\nManifest Update\n\n\nWhenever an application is updated and does not require additional rights, it\nmay still use the previously signed manifest. Only when the update requires\nadditional rights, the application changes its state and signal the change to\nlet the admin know about the existence of a new manifest template.  The admin\ncan generate a new manifest for that application.\n\n\nImplementation Scenario\n\n\nThis section describes the steps to generate the application manifest.  Once the\nmanifest is accepted,  its contents digest will be encoded in a new identity\ncertificate.\n\n\n\n\nThe security manager discovers the remote application through the\n   NotifyConfig signal.\n\n\nThe security manager retrieves the manifest template of the application.\n\n\nUsing the manifest template, the security manager starts the manifest\n   building process.\n\n\nThe security manager contacts a server via HTTPS to retrieve the human\n   readable description of the interfaces and presents them to the admin.  Note\n   that the HTTPS server location is not yet defined.\n\n\nThe admin accepts (or rejects) the description of the manifest. When the\n   admin rejects the manifest, the application will not receive a manifest.\n\n\nThe security manager reissues a new identity certificate with the digest of\n   the requested (\n accepted) permissions.\n\n\nThe security manager installs the new identity certificate and manifest on\n   the application.\n\n\n\n\n\n\nFigure:\n Building Policy using manifest\n\n\nApplication\n\n\nThe application developer needs to embed the manifest template in his\napplication. There should be a platform specific callback function to retrieve\nthe manifest template that belongs to an application. For app store\napplications, it could be based on convention, providing the manifest template\nas a file inside the application package. For small embedded devices, the\nmanifest template could be part of the application.\n\n\nTo ease the generation of membership certificates by the security manager, the\nmanifest format is the same format that is used to express access rules in the\nmembership certificates.\n\n\nInterface Description Server\n\n\nThe server serving the descriptions of the interfaces can either be:\n1. Hosted by the application developer for application specific interfaces. To\n   prevent spoofing attacks, this server must be contacted via HTTPS and its URL\n   must be based on the reverse domain name of the interface name.\n2. Hosted by the AllSeen Alliance for common AllSeen interfaces. This server\n   MUST be contacted over HTTPS.  Howeer, the URL for this server is not yet\n   defined.\n\n\nManifest Enforcement\n\n\nWhen applying the specific policy rules, the remote peer will enforce the rules\nspecified in the manifest since the manifest is associated with the identity\ncertificate.\n\n\nAccess validation\n\n\nValidating policy on a producer\n\n\nThis is a typical producer validation of a consumer\u2019s permissions when the\nconsumer makes a method call on a secure interface.\n\n\n\n\nFigure:\n Validating policy on a producer\n\n\nValidating policy on a consumer\n\n\nThis is a typical consumer policy validation when the consumer application calls\na secure method call.\n\n\n\n\nFigure:\n Validating policy for a consumer\n\n\nValidating policy on a consumer that requires a producer belong to a security group\n\n\nThe following flow shows a policy enforcement on the consumer that requires the\nproducer belong to a security group.\n\n\n\n\nFigure:\n Consumer policy requires producer belong to a security group\n\n\nAnonymous session\n\n\nIn scenarios when there is no trust established between two peers such as when a\nguest comes into the user's home, the guest\u2019s consumer application can still\ncontrol certain applications if and only if there are ACLs specified for ALL\ninstalled on these devices.\n\n\nNote that ANY_TRUSTED includes only authenticated peers while ALL includes\nunauthenticated (anonymous) peers.\n\n\nAccessing secured interfaces, the consumer always use ECDHE_ECDSA to contact a\npeer.  If the key exchange fails, it can fallback to ECDHE_NULL and contact the\npeer as an anonymous user.  This process is automated so the application\ndeveloper does not need to drive the key exchange process.\n\n\n\n\nFigure:\n Anonymous access\n\n\nValidating an admin user\n\n\n\n\nFigure:\n Validating an admin\n\n\nEmitting a session-based signal\n\n\nBefore emitting a session-based signal to existing connections, the producer\nverifies whether it is allowed to emit the given signal to any authorized party.\nUpon receipt of the signal, the consumer checks whether it has the authorization\nto accept the given signal.  The consumer verifies the producer\u2019s manifest for\nproper authorization.\n\n\n\n\nFigure:\n Validating a session-based signal\n\n\nPolicy ACL format\n\n\nThe format is binary and exchanged between peers using AllJoyn marshalling\n\n\nThe policy data will be in binary format.  The following guidelines are used for\nexchanging and persisting the policy data:\n\n\n\n\nThe AllJoyn marshalling will be use to encode the policy data when send from\n   security manager to application\n\n\nThe AllJoyn marshalling will be used to generate buffers to be signed.\n\n\nThe AllJoyn marshalling will be used to serialize the data for persistence.\n\n\nThe parser will ignore any field that it does not support.\n\n\n\n\nFormat Structure\n\n\nThe following diagram describes the format structure of the ACL data.\n\n\n\n\nFigure:\n Authorization Data Format Structure\n\n\nAuthorization data field definition\n\n\nRoot level\n\n\n\n\n\n\n\n\nName\n\n\nData type\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nversion\n\n\nnumber\n\n\nyes\n\n\nThe specification version number.  The current spec version number is 1.\n\n\n\n\n\n\nserialNumber\n\n\nnumber\n\n\nyes\n\n\nThe serial number of the policy. The serial number is used to detect of an update to an older policy.\n\n\n\n\n\n\nACLs\n\n\nArray of  ACLs\n\n\nyes\n\n\nList of access control lists.\n\n\n\n\n\n\n\n\nAccess Control List\n\n\n\n\n\n\n\n\nName\n\n\nData type\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npeers\n\n\narray of objects\n\n\nno\n\n\nList of peers.  There are multiple types of peers.  A peer object has the following fields:\nName\nData Type\nRequired\nDescription\ntype\nnumber\nyes\nThe peer type. The following are the valid type of peers:\nALL \u2013 All secured sessions will match this peer type including peers that match any of the following peer types\nANY_TRUSTED \u2013 Any authenticated peer using any authentication method except ECDHE_NULL.\nFROM_CERTIFICATE_AUTHORITY -- matches all peers with certificates issued by the specified certificate authority\nWITH_PUBLIC_KEY \u2013 a single peer identified by the public key\nWITH_MEMBERSHIP  -- all members of the security group\npublicKey\nPublic Key\nno\nThe peer key info data. Depending on peer type, the publicKey is:\nALL \u2013 not applicable\nANY_TRUSTED \u2013 not applicable\nFROM_CERTIFICATE_AUTHORITY \u2013 the public key of the certificate authority\nWITH_PUBLIC_KEY \u2013 the public key of the peer\nWITH_MEMBERSHIP \u2013 the public key of the security group authority\nsgID\nGUID\nNo\nSecurity group ID.  This is applicable only the type WITH_MEMBERSHIP.\n\n\n\n\n\n\nrules\n\n\narray of rules\n\n\nno\n\n\nList of allowed rules. The peer application is allowed to perform the actions specified in the given rules.\nThe default rule is to allow nothing.\n\n\n\n\n\n\n\n\nRule Record\n\n\n\n\n\n\n\n\nName\n\n\nData type\n\n\nRequired\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nobj\n\n\nstring\n\n\nno\n\n\n\n\nObject path of the secured object. A * at the end indicates a prefix match.  When there is no *, it is an exact match.\n\n\n\n\n\n\nifn\n\n\nstring\n\n\nno\n\n\n\n\nInterface name. A * at the end indicates a prefix match.  When there is no *, it is an exact match.\n\n\n\n\n\n\n\n\nInterface Member Record\n\n\n\n\n\n\n\n\nName\n\n\nData type\n\n\nRequired\n\n\nList of values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmbr\n\n\nstring\n\n\nno\n\n\n\n\nMember name.  A * at the end indicates a prefix match.  When there is no *, it is an exact match.\n\n\n\n\n\n\ntype\n\n\nnumber\n\n\nno\n\n\n0: any\n1: method call\n2: signal\n3: property\n\n\nMessage type.\nDefault is any\n\n\n\n\n\n\naction\n\n\nbyte\n\n\nno\n\n\n\n\nThe action mask flag. The list of valid masks:\n0x00: Deny - Explict deny.  Only enforced when matched in WITH_PUBLIC_KEY ACL, ignored in all other cases\n0x01: Provide \u2013 allows sending signal, exposing method calls and producing properties\n0x02: Observe \u2013 allows receiving signals and getting properties\n0x04: Modify \u2013 set properties and make method calls\n\n\n\n\n\n\n\n\nEnforcing the rules at message creation or receipt\n\n\nThe following table lists the required action mask base on the message.\n\n\nTable:\n Action Mask Matrix\n\n\n\n\n\n\n\n\nMessage Action\n\n\nLocal Policy\nRemote peer\u2019s manifest\n\n\n\n\n\n\n\n\n\n\nsend GetProperty\n\n\nRemote peer has PROVIDE permission for this property\n\n\n\n\n\n\nreceive GetProperty\n\n\nRemote peer has OBSERVE permission for this property\n\n\n\n\n\n\nsend GetAllProperties\n\n\nRemote peer has PROVIDE permission for * properties\n\n\n\n\n\n\nreceive GetAllProperties\n\n\nOnly properties for which the remote peer has OBSERVE permission are returned\n\n\n\n\n\n\nsend SetProperty\n\n\nRemote peer has PROVIDE permission for this property\n\n\n\n\n\n\nreceive SetProperty\n\n\nRemote peer has MODIFY permission for this property\n\n\n\n\n\n\nsend method call\n\n\nRemote peer has PROVIDE permission for this method call\n\n\n\n\n\n\nreceive method call\n\n\nRemote peer has MODIFY permission for this method call\n\n\n\n\n\n\nsend signal\n\n\nRemote peer has OBSERVE permission for this signal\n\n\n\n\n\n\nreceive signal\n\n\nRemote peer has PROVIDE permission for this signal\n\n\n\n\n\n\n\n\nPermission for property changed signals are included with the property\npermission. If a peer has permission for the property then it has permission for\nthe property changed signal for that property.\n\n\nSending GetAllProperties requires that the remote peer has a PROVIDE ACL rule\nfor * interface members of type PROPERTY or ALL.\n\n\nReceiving GetAllProperties is allowed but only properties for which the\nremote peer has OBSERVE permission are returned. Other properties are treated\nas unreadable.\n\n\nPermission for session-cast signals has the same requirements as\nsignals but the remote peer must be known in order match the ACLs to be\napplied.  The recipients for a session-cast signal in a multi-point session\nare not known resulting in permission to send the signal being denied. The\nrecipient for session-cast signals in a point-to-point session are known,\nallowing ACLs to be matched.\n\n\nPolicy after claim\n\n\nRight after the application is claimed, a policy is created\nautomatically with the following feature:\n1. Admin group has full access\n2. Trusted peers are allowed to provide properties and methods and to receive\nsignals.\n3. Allow for self-installation of membership certificates\n4. All other interactions are implicitly denied\n\n\nThe created policy is below.  It is recommended that a certification test is\ncreated to verify this is the policy that is generated.\n\n\npeer: FROM_CERTIFICATE_AUTHORITY\n    pubKey: Identity_Auth_Key\npeer: WITH_MEMBERSHIP\n    pubKey: admin authority key\n    sgID: admin group ID\n    ifn: *\n        mbr: *\n        action: 0x07 (PROVIDE | OBSERVE | MODIFY)\npeer: WITH_PUBLIC_KEY\n    pubKey: the application\u2019s public key\n    ifn: org.alljoyn.Bus.Security.ManagedApplication\n        mbr: InstallMembership\n        action: 0x04   (MODIFY)\npeer: ANY_TRUSTED\n    ifn: *\n        mbr: *\n          action: 0x01 (PROVIDE)\n          type: 1 (METHOD)\n        mbr: *\n          action: 0x02 (OBSERVE)\n          type: 2 (SIGNAL)\n        mbr: *\n          action: 0x01 (PROVIDE)\n          type: 3 (PROPERTY)\n\n\n\n\nRule Search and Selection\n\n\nWhenever an encrypted message is created or received, the access control rules\nare searched for matching rules.  In order for a rule to be considered a match,\nit must meet the following criteria:\n- Be in an access control list matching peer type, public key,\nand/or Security Group ID as specified for the ACL\n- Match message header data based object path, interface name and member\nname as specified for the rule.\n- Match the action mask and not be an explicit deny.\n\n\nOr the rule must match the following criteria:\n- Be in the ACL of a peer type WITH_PUBLIC_KEY\n- The ACL's key must match the public key of the peer\n- The action mask must be an explicit deny.\n- All other criteris (object path, interface and member names) must be *\n\n\nThe resulting set of matched rules is applied to the message as follows:\n- If any explicit deny rule matches per above then the message is denied.\n- If no deny rules match, then the message is allowed if at least one allow\nrule matches.\n- Otherwise, the message is denied.\n\n\nCertificates\n\n\nThe following subsections detail the supported certificates.  The certificate\nformat is X.509 v3.  The certificate lifetime will be considered in order to\navoid having to revoke the certificate.  However, certain devices do not have\naccess to a trusted real time clock.  In such cases, applications on those\ndevices will not be able to validate the certificate lifetime.\n\n\nCertificate Chain validation\n\n\nIdentity and membership certificate chains will be validated per section 6.1 of\nRFC 5280 with the following additions, limitations and notes:\n- The leaf certificate must have exactly one EKU and it must be the correct EKU\nper the use case.  Certificates used for ECDHE_ECDSA authentication must\nhave the identity certificate EKU and certificates exchanged to indicate\nsecurity group memberships must have the membership certificate EKU.\n- Intermediate certificates must have zero, one or both identity and membership\nEKUs.\n- No EKU will be treated as any EKU, per RFC 5280. EKU validation is transitive,\nmeaning any certificate with no EKU will inherit those of its parent.\n- Time of validity will only be evaluated if the peer has a time source.\n- The implementation will assume system time is trusted if available.\n- For identity certificates, the associated digest of the leaf certificate\nis validated against the digest of the manifest.\n- The AKI is validated to not be null.\n- CRL check is not implemented as there is no CRL.\n- basicConstraints::pathLenConstraint will NOT be checked.\n\n\nCertificate chains will be validated...\n- When a certificate is received during claiming.\n- When a certificate is installed.\n- When a certificate is received during ECDHE_ECDSA authentication.\n- When a certificate is received to assert security group membership.\n\n\n2.6.1 Main Certificate Structure\n\n\nAll AllSeen X.509 certificates have the following ASN.1 structure.  Currently\nonly the ECDSA (prime256v1) certificates are supported.\n\n\nCertificate ::= SEQUENCE {\n    tbsCertificate TBSCertificate,\n    signatureAlgorithm SEQUENCE { 1.2.840.10045.4.3.2 (ecdsa-with-sha256) },\n    signatureValue BIT STRING\n}\n\nTBSCertificate ::= SEQUENCE {\n    version v3(2),\n    serialNumber INTEGER,\n    signature SEQUENCE { 1.2.840.10045.4.3.2 (ecdsa-with-sha256) },\n    issuer SEQUENCE { 2.5.4.3 (commonName), UTF8 STRING },\n    validity Validity,\n    subject Name,\n    subjectPublicKeyInfo SEQUENCE { 1.2.840.10045.2.1 (id-ecPublicKey), 1.2.840.10045.3.1.7 (prime256v1), BIT STRING },\n    issuerUniqueID IMPLICIT UniqueIdentifier OPTIONAL,\n    subjectUniqueID IMPLICIT UniqueIdentifier OPTIONAL,\n    extensions EXPLICIT\n}\n\nExtensions ::= SEQUENCE {\n    BasicConstraints SEQUENCE { 2.5.29.19 (basicConstraints), BOOLEAN (FALSE) },\n    SubjectAltName SEQUENCE { 2.5.29.17 (id-ce-subjectAltName),\n                    SEQUENCE { CHOICE[0] (otherName)\n                      SEQUENCE { 1.3.6.1.4.1.44924.1.3 (AllSeen Security Group ID),\n                          OCTET STRING}}},\n    ExtendedKeyUsage SEQUENCE { 2.5.29.37 (id-ce-extKeyUsage),\n                                SEQUENCE { (KeyPurposeId) OBJECT IDENTIFIER}},\n    AuthorityKeyIdentifier SEQUENCE { 2.5.29.35  (id-ce-authorityKeyIdentifier),\n                                      SEQUENCE { [0] (keyIdentifier) OCTET STRING}}\n}\n\n\n\n\n\nAuthorityKeyIdentifier\n\n\nThe AuthorityKeyIdentifier standard extension field will hold 64 bits of data\ncomprising of a four-bit type field with the value 0100 followed by the least\nsignificant 60 bits of a hash of the value of the BIT STRING\nsubjectPublicKey (excluding the tag, length, and number of unused bits).\n\n\nSecurity 2.0 Custom OIDs\n\n\nAll Security 2.0 custom OIDs will start with \n1.3.6.1.4.1.44924.1\n where\n\n1.3.6.1.4.1.44924\n is the registered AllSeen Alliance Private Enterprise\nNumber.\n\n\nIdentity certificate\n\n\nThe identity certificate is used to associate application, user or device with\nan identity alias.  This allows an identity alias to have a number of identity\ncertificates installed in different keystores.\n\n\nThe identity alias is encoded in the SubjectAltName field in the extensions.\n\n\nThe extensions include the following fields:\n - ExtendedKeyUsage: the type of certificate within the AllSeen ecosystem.\n\n 1.3.6.1.4.1.44924.1.1 is used for Identity certificates.\n - SubjectAltName: the alias for the identity.\n - AssociatedDigest: the digest of the associated manifest data.\nBoth the ExtendedKeyUsage and AssociatedDigest have custom OIDs under the\nSecurity 2.0 root.\n\n\nExtensions ::= SEQUENCE {\nBasicConstraints SEQUENCE { 2.5.29.19 (basicConstraints), BOOLEAN (FALSE) },\nSubjectAltName SEQUENCE { 2.5.29.17 (id-ce-subjectAltName),\n     SEQUENCE { CHOICE[0] (otherName)\n                SEQUENCE { 1.3.6.1.4.1.44924.1.3\n                           (AllSeen Security Group ID), OCTET STRING}}},\nAuthorityKeyIdentifier SEQUENCE { 2.5.29.35\n                                  (id-ce-authorityKeyIdentifier),\n                                   SEQUENCE { [0] (keyIdentifier) OCTET STRING}},\nExtendedKeyUsage SEQUENCE { 2.5.29.37 (id-ce-extKeyUsage),\n                            SEQUENCE { (KeyPurposeId) 1.3.6.1.4.1.44924.1.1}},\nAssociatedDigest SEQUENCE { 1.3.6.1.4.1.44924.1.2 (AllSeen Certificate Digest),\n                            2.16.840.1.101.3.4.2.1 (hash), OCTET STRING }\n}\n\n\n\n\n\nMembership certificate\n\n\nThe membership certificate is used to assert an application, user or device is\npart of a security group.\n\n\nThe security group identifier is encoded with a 16 network byte order octets\nencoded in the SubjectAltName field in the extensions.\n\n\nThe extensions include the following fields:\n- ExtendedKeyUsage: the type of certificate within the AllSeen ecosystem.\n\n1.3.6.1.4.1.44924.1.5 is used for membership certificates.\n- SubjectAltName: the security group ID.\n\n\nExtensions ::= SEQUENCE {\nBasicConstraints SEQUENCE { 2.5.29.19 (basicConstraints), BOOLEAN (FALSE) },\nSubjectAltName SEQUENCE { 2.5.29.17 (id-ce-subjectAltName),\n     SEQUENCE { CHOICE[0] (otherName)\n                SEQUENCE { 1.3.6.1.4.1.44924.1.3\n                           (AllSeen Security Group ID), OCTET STRING}}},\nAuthorityKeyIdentifier SEQUENCE { 2.5.29.35\n                                  (id-ce-authorityKeyIdentifier),\n                                   SEQUENCE { [0] (keyIdentifier) OCTET STRING}},\nExtendedKeyUsage SEQUENCE { 2.5.29.37 (id-ce-extKeyUsage),\n                            SEQUENCE { (KeyPurposeId) 1.3.6.1.4.1.44924.1.5}}\n}\n\n\n\n\nRecommended Best Practices for Certificates\n\n\n\n\nRoot certificates should include only the ExtendedKeyUsage OIDs for purposes\nfor which it will issue certificates.  Currently, these are the AllJoyn\nidentity and membership OIDs listed in this document.  Issuing root certificates\nwith no ExtendedKeyUsage extension or with the anyExtendedKeyUsage OID is\nnot recommended.  Adopting this practice will limit the potential abuse of\nAllJoyn root certificates for unrelated purposes.\n\n\n\n\nSample use cases\n\n\nThe solution listed here for the use cases is just a typical solution.  It is\nnot intended to be the only solution.\n\n\nUsers and devices\n\n\nUsers:  Dad, Mom, and son\n\n\n\n\n\n\n\n\nSecurity Group\n\n\nMembers\n\n\n\n\n\n\n\n\n\n\nhomeAdmin\n\n\nDad, Mom\n\n\n\n\n\n\nsonAdmin\n\n\nSon\n\n\n\n\n\n\ndadOnlyAdmin\n\n\nDad\n\n\n\n\n\n\nlivingRoom\n\n\nTV, living room tablet, son\u2019s room TV, master bedroom TV, master bedroom tablet\n\n\n\n\n\n\nmasterBedrom\n\n\nMaster bedroom tablet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRoom\n\n\nDevices\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nLiving room\n\n\nTV, Set-top box, tablet, Network-attached Storage (NAS)\n\n\nAll devices claimed by Dad and managed by Mon and Dad using the security group homeAdmin\nAll devices are accessible for the whole family\n\n\n\n\n\n\nSon\u2019s bedroom\n\n\nTV\n\n\nClaimed and managed by son\nTV is allowed to interact with living room devices for streaming data\n\n\n\n\n\n\nMaster bedroom\n\n\nTV, tablet\n\n\nTV used by Mom and Dad only\nTablet used by Dad only\nTV is allowed to interact with living room devices for streaming data\nTablet has full control of living room devices including the parent control feature\n\n\n\n\n\n\n\n\nUsers set up by Dad\n\n\n\n\nFigure:\n Use case - users set up by Dad\n\n\nLiving room set up by Dad\n\n\n\n\nFigure:\n Use case - living room set up by Dad\n\n\nSon's bedroom set up by son\n\n\n\n\nFigure:\n Use case - son's bedroom set up by son\n\n\nMaster bedroom set up by Dad\n\n\n\n\nFigure:\n Use case - master bedroom set up by Dad\n\n\nSon can control different TVs in the house\n\n\n\n\nFigure:\n Use case \u2013 Son can control different TVs in the house\n\n\nLiving room tablet controls TVs in the house\n\n\n\n\nFigure:\n Use case - Living room tablet controls TVs\n\n\nEnhancements to Existing Framework\n\n\nCrypto Agility Exchange\n\n\nIn order to provide the AllJoyn peers to express the desire to pick some\nparticular cryptographic cipher suite to use in the key exchange and the\nencryption of the messages, new key exchange suite identifiers will be added to\nthe framework to express the choice of cipher and MAC algorithms.  The new\nidentifiers may come from the list of TSL cipher suites specified in\n\nAppendix A.5 of TLS RFC5246\n , \nRFC6655\n, and\n\nRFC7251\n.\n\n\nThe following table shows the list of existing key exchange suites:\n\n\n\n\n\n\n\n\nAllJoyn Key Exchange Suite\n\n\nCrypto Parameters\n\n\nAvailability\n\n\n\n\n\n\n\n\n\n\nALLJOYN_ECDHE_NULL\n\n\nCurve NIST P-256 (secp256r1)\nAES_128_CCM_8\nSHA256\n\n\nStandard Client\nThin Client\n\n\n\n\n\n\nALLJOYN_ECDHE_PSK\n\n\nCurve NIST P-256 (secp256r1)\nAES_128_CCM_8\nSHA256\n\n\nStandard Client\nThin Client\n\n\n\n\n\n\nALLJOYN_ECDHE_ECDSA\n\n\nCurve NIST P-256 (secp256r1)\nAES_128_CCM_8\nSHA256\nX.509 certificate\n\n\nStandard Client\nThin Client\n\n\n\n\n\n\nALLJOYN_RSA_KEYX\n\n\nAES_128_CCM_8\nSHA256\nX.509 certificate\n\n\nStandard Client version 14.02 or older\n\n\n\n\n\n\nALLJOYN_PIN_KEYX\n\n\nAES_128_CCM_8\n\n\nStandard Client version 14.12 or older\nThin Client version 14.02 or older\n\n\n\n\n\n\nALLJOYN_SRP_KEYX\n\n\nAES_128_CCM_8\n\n\nStandard Client\n\n\n\n\n\n\nALLJOYN_SRP_LOGON\n\n\nAES_128_CCM_8\n\n\nStandard Client\n\n\n\n\n\n\n\n\nThe following table shows the potential list of TLS cipher suites to be\nsupported.  Other suites will be added as codes are available.\n\n\n\n\n\n\n\n\nTLS cipher suite\n\n\nAdditional Crypto Parameters\n\n\nAvailability\n\n\nRFC\n\n\n\n\n\n\n\n\n\n\nTLS_ECDHE_ECDSA_WITH_AES_128_CCM_8\n\n\nCurve NIST P-256 (secp256r1)\nSHA256\nX.509 certificate\n\n\nStandard Client\nThin Client\n\n\n7251\n\n\n\n\n\n\nTLS_RSA_WITH_AES_128_CCM_8\n\n\nSHA256\nX.509 certificate\n\n\nStandard Client\n\n\n6655\n\n\n\n\n\n\n\n\nApplication State Announcement\n\n\nThe Permission module provides a session-less signal to allow the Security\nManager discovering the applications to claim or to distribute updated policy or\ncertificates.  The current features provided by the About session-less signal\ndoes not fulfill the Security Manager discovery requirement.  The signal\nprovides the following information:\n1. A number field named state to show the state of the application.  The possible values of this field are:\n    - 0 -- Not claimable.  The application is not claimed and not accepting\n      claim requests.\n    - 1 \u2013 Claimable.  The application is not claimed, but is accepting claim\n      requests.\n    - 2 \u2013 Claimed.  The application is claimed and can be configured.\n    - 3 \u2013 Needs update.  The application is claimed, but requires a\n      configuration update (after a software update).\n2. The public key\n\n\nThis signal is emitted when\n1. The bus attachment is enabled with peer security using ECDHE key exchanges\n2. The application is claimed or do a factory reset\n3. The application has a new manifest template\n\n\nFeatures In Future Releases\n\n\nCertificate revocation (not fully designed)\n\n\nThe application will validate the certificate using a revocation service\nprovided by the Security Manager.  The revocation service is a distributed\nservice.\n\n\nThe Certificate Revocation Service is expected to provide a method call that\ntakes in the certificate and return whether the given certificate is revoked.\n\n\nThe application looks in its installed policy for the peer that provides the\nCertificate Revocation Service.  If the application can\u2019t locate any of the\nCertificate Revocation Service, the certificate revocation check will be\nskipped.\n\n\nIf a membership certificate is revoked, all signed authorization data related to\nthe membership certificate is no longer valid.\n\n\nCurrent work-around\n\n\nThe admin can blacklist a peer by installing a deny rule in the application\npolicy to deny access for the given peer.\n\n\nDistribution of policy updates and membership certificates (not fully designed)\n\n\nThe Distribution Service is a service provided by a Security Manager.  This\nservice provides persistent storage and high availability to distribute updates\nto applications.\n\n\nAn admin uses the Security Manager to generate updated policy and membership\ncertificates, encrypt the payload with a session key derived from a nonce value\nand the master secret for the \n pair.  The package including\nthe sender public key, recipient public key, nonce, and encrypted payload is\nsent to the Distribution Service to delivery to the recipient.  The recipient\nuses the information in the package to locate the master secret to generate the\ncorresponding session key to decrypt the payload.  Once the decryption is\nsuccessful, the recipient signs the hash of the package and provide the\nsignature in the reply.\n\n\n\n\nFigure:\n Distribution of policy update and certificates\n\n\nPolicy Templates\n\n\nAn application developer can define policy templates to help the Security\nManager to build consumer and producer policies.  A policy template provides the\nfollowing data in:\n - Specification version number\n - List of permission rules\n\n\nFuture Considerations\n\n\nBroadcast signals and multipoint sessions\n\n\nAll security enhancements for broadcast signals and multipoint sessions will be\nconsidered in future releases of Security 2.0.",
            "title": "Hld"
        },
        {
            "location": "/learn/core/security2_0/hld/#alljoyn-security-20-feature-high-level-design",
            "text": "",
            "title": "AllJoyn&trade; Security 2.0 Feature High-Level Design"
        },
        {
            "location": "/learn/core/security2_0/hld/#introduction",
            "text": "",
            "title": "Introduction"
        },
        {
            "location": "/learn/core/security2_0/hld/#purpose-and-scope",
            "text": "This document captures the system level design for the enhancements to the\nAllJoyn  framework to support the Security 2.0 feature requirements. Related\ninterfaces and API design is captured at a functional level. Actual definition\nfor interfaces and APIs is outside the scope of this document. Features and\nfunctions are subject to change without notice.",
            "title": "Purpose and scope"
        },
        {
            "location": "/learn/core/security2_0/hld/#revision-history",
            "text": "Revision  Date  Change Log      Rev 1 Update 0  August 8, 2014  Update with new format and comments    Rev 1 Update 1  August 27, 2014  Update with comments from the collaboration meeting    Rev 1 Update 2  September 8, 2014  Update with comments and agreement from the technical conference call on September 3, 2014.    Rev 1 Update 3  October 30, 2014  Update the authorization data section based on agreement from the technical conference call on October 14, 2014.    Rev 1 Update 4  December 23, 2014  Update the Certificate section and changes listed in JIRA tickets ASACORE-1170, 1256, 1259, 1260.    Rev 1 Update 5  January 15, 2015  Update the rule enforcing table after the conference call on Janurary 13, 2015 by the Security2.0 working group.    Rev 1 Update 6  March 31, 2015  Update the authorization data after the conference call on Janurary 20, 2015 by the Security2.0 working group. Updated the permission matrix to reflect the concept of Provide permission. Updated based on review comments by the Security 2.0 working group on March 6, 2015. Add the updated information on Security Manager and manifest from the Wiki Updated based on review comments by the Security 2.0 working group on March 13, 2015 and on March 19, 2015. Updated based on open issue discussion on March 23, 2015. Updated based on comments on March 31, 2015 short review. Updated the authorization data search algorithm section based on reviews comment. Updated based on discussion on April 28, 2015. Updated based on discussion on May 5, 2015.    Rev 1 Update 7  May 28, 2015   Simplified access rule selection by removing priority and enforcement explicit deny rules regardless of degree of match. Simplifying to aid in comprehension Corrected text describing policy generated after being claimed to match the specified policy; outgoing messages are allowed for ANY_TRUSTED. Corrected generated policy to indicate there are two entries for members under the ANY_TRUSTED ACL Changed the description of the generated policy to indicate it is not an example, it is the policy to be generated, and recommend certification test be created to verify this. Corrected a couple of places, in definition and description of session establishment, to indicate that membership certificate trust requies a signature chain including the security group authority rather than any certificate authority.    Future revisions  June 12, 2015   See git submissions for change notes.",
            "title": "Revision history"
        },
        {
            "location": "/learn/core/security2_0/hld/#acronyms-and-terms",
            "text": "Acronym/term  Description      About data  Data from the About feature.  For more information, refer to the   About Feature Interface Spec.    ACL  Access Control List    AES CCM  The Advanced Encryption Standard 128-bit block cypher using Counter with CBC-MAC mode. Refer to  RFC 3610  for more information.    AllJoyn framework  Open source peer-to-peer framework that allows for abstraction of low-level network concepts and APIs.    Authentication GUID  The Authentication GUID is a GUID assigned to a keystore for authentication purposes.  This GUID is persisted in the keystore and provides a long-term identity for the keystore. Typically, this GUID is associated with a single application. In the scenario where a group of related applications share a given keystore, they also share the same authentication GUID. This GUID is used as a mapping key for storing and accessing authentication and encryption keys.   All key materials associated with another peer is stored in the keystore with the peer\u2019s authentication GUID as the mapping key.    Certificate Authority (CA)  Entity that issues a digital certificate    Consumer  An AllJoyn application consuming services on the AllJoyn network.    Device  A physical device that may contain one or more AllJoyn applications.  In this document, whenever the term \u201cdevice\u201d is used, it indicates the system application of the given physical device.    DSA  Digital Signature Algorithm    ECC  Elliptic Curve Cryptography    ECDHE  Elliptic Curve Diffie-Hellman Ephemeral key exchange    ECDHE_ECDSA  ECDHE key agreement with asymmetric DSA based authentication.    ECDHE_NULL  ECDHE key agreement only. No authentication.    ECDHE_PSK  ECDHE key agreement with pre-shared symmetric key based authentication.    Factory-reset application  An application restored to the original configuration.    Grantee  The application or user who is the subject of a certificate.    GUID  Globally Unique Identifier. A 128 bit identifier generated randomly in a way that the probability of collision is negligible.    Subject  The application or user possessing a private key associated with the certificate.    Keystore  A repository of security keys and certificates.  An application instance can have at least one keystore.  A keystore is associated with a bus attachment.  If an application uses multiple bus attachments, it can have more than one keystore. Multiple applications running as the same user can choose to share the same keystore, but if they do, they are treated as the same security principal.    OOB  Out Of Band    Peer  A remote application participating in the AllJoyn messaging.    Permission module  The AllJoyn Core module that handles all the permission authorization.    Producer  An AllJoyn application providing services on the AllJoyn network.    Security Group  A logical grouping of devices, applications, and users. It is identified by a group ID which is a GUID and the security group authority public key. An application can be installed with a policy to expose services to members of the security group. An application or user holding a membership certificate is in fact a member of the security group. Any member of the security group can access the services exposed to the group by the applications with ACLs defined for that group.    Security Group Authority  A security group authority is the user or application that defines the security group and grant membership certificates to other. The security group authority is the certificate authority for that group.    Security Manager  A service used to manage cryptographic keys, and generate and distribute certificates.    SHA-256  Secure Hash Algorithm SHA-2 with digest size of 256 bits or 32 bytes.    User  The person or business entity interacting with AllJoyn applications.",
            "title": "Acronyms and terms"
        },
        {
            "location": "/learn/core/security2_0/hld/#system-design",
            "text": "",
            "title": "System Design"
        },
        {
            "location": "/learn/core/security2_0/hld/#overview",
            "text": "The goal of the Security 2.0 feature is to allow an application to validate\naccess to interfaces or objects based on policies installed by the owner.  This\nfeature is part of the AllJoyn Core library.  It is not an option for the\napplication to enforce permission.  It is up to the user to dictate how the\napplication performs based on the access control lists (ACLs) defined for the\napplication.  The AllJoyn Core Permission component does all the enforcement\nincluding the concept of mutual or one-way authorization before any message\naction can be taken.  The Security Manager is a service that helps the user with key management and\npermission rules building.  Using the application manifest template defined by\nthe application developer, the Security Manager builds the manifest consisting\nof access control lists to let the end-user authorize which interactions the\napplication can do.  An application developer does not have to build a security\nmanager.  The permission can be installed by another application or another\nsecurity manager.  In addition to the encrypted messaging (using AES CCM) between the peers, the\nSecurity 2.0 Permission module manages a database of access credentials and the\nAccess Control Lists (ACLs).  Figure shows the system architecture of the Security 2.0 feature.  Figure:  Security system diagram",
            "title": "Overview"
        },
        {
            "location": "/learn/core/security2_0/hld/#premises",
            "text": "The following Table lists the premises for the Security 2.0 features. Table:  Security 2.0 premises     Topic  Definition  Premises      Identity  The application security principal  Each peer is identified by an authentication GUID  and a cryptographic public key    Admin  An admin (or administrator) is a security principal with administrator privilege for the application  An admin is a member of the admin security group which has full access to any object and interface in the application    Claim  Incorporate a factory-reset application with the Permission Module  A factory-reset application has no list of certificate authorities for AllJoyn security. A factory-reset application has no admin for AllJoyn security. Anyone can claim a factory-reset application. The Claimer installs a FROM_CERTIFICATE_AUTHORITY ACL for an identity certificate authority The Claimer installs an admin security group    Policy  A policy is a list of ACLs governing  the behavior of an application A policy template is a list of rules defined by the application developer to guide the admin for policy building.  An admin can install, update, or remove a policy. A newer policy can be installed by any authorized peer. Developers can define policy templates to help the admin with policy building. Security group specific policy specifies the permissions granted to members of the group. The security group authority becomes a certificate authority for that particular group. A policy may exist at the producer or consumer side. Policy enforcement applies wherever it resides. A policy is considered private.  It is not exchanged with any peer. A keystore has at most one policy.  A complex application with multiple bus attachments can use a shared keystore in one bus attachment and an app-specific keystore for another bus attachment.  In such case, the complex application has in fact more than one policy. An admin can query the existing policy installed in the keystore.    Membership certificate  A membership certificate is the proof of a security group membership  Membership certificates are exchanged between peers. An application trusts a membership certificate if the issuer or any subject in the issuer\u2019s certificate chain is the security group authority. A membership certificate subject can generate additional membership certificates for the given security group if the cA flag is true. A membership certificate must have a security group ID. An application can accept the installation of any number of membership certificates into its keystore.    Identity certificate  Certificate that signs the identity information.  The Certificate has an identity alias stored in the X.509 SubjectAltName extension field. An application trusts identity certificates issued by the application\u2019s certificate authority or any of the security group authorities listed in the application\u2019s policy. An identity certificate subject can generate additional identity if the cA flag is true.    Manifest data  The permission rules accompanying the identity certificate  Manifest data are not present in the identity certificate. They are accompanied with the identity certificate. The manifest data digest is present in the identity certificate. The manifest data syntax is the same as the policy syntax.  While the policy stays local the manifest data is presented to the peer along with the identity certificate.    Security Manager  A service used to manage cryptographic keys, and generate certificates.  Security Manager can push policy and certificates to application",
            "title": "Premises"
        },
        {
            "location": "/learn/core/security2_0/hld/#typical-operations",
            "text": "The following subsections describe the typical operations performed by a user.  Assumptions  In all the flows listed in this section, the Security Manager is assumed to be\nclaimed by another Security Manager or to be self-claimed.  The certificates may\nhave been issued from sources in the cloud.  As the result, the Security Manager\nis shown with one certificate authority and an identity certificate.  Sample Certificates and Policy Entries  The following is a high level presentation of certificates and policy entries\nused in the flows in this section.   Figure:  Sample Certificates and ACL entries  The peer types  The following peer types are supported in the permission policy.  A peer may match many of the peer types.     Peer Type  Description      ALL  This matches all peers including an anonymous peer using ECDHE_NULL key exchange.    ANY_TRUSTED  This matches any authenticated peer for all authentication methods except ECDHE_NULL key exchange.    FROM_CERTIFICATE_AUTHORITY  This matches any peer authenticated via ECDHE_ECDSA key exchange and its identity certificate\u2019s trust is verified against the specific certificate authority listed in the policy for this type of peer.    WITH_PUBLIC_KEY  This matches a peer with the specific public key.  The peer is authenticated via ECDHE_ECDSA key exchange.  Its identity certificate\u2019s trust is verified against any of the application\u2019s certificate authorities (including the security group authorities).    WITH_MEMBERSHIP  This matches any peer with possession of a membership certificate with the specific security group ID. The peer is authenticated via ECDHE_ECDSA key exchange.  Its identity certificate\u2019s trust is verified against any of the application\u2019s certificate authority (including the security group authorities). The subject of the membership certificate must be the peer\u2019s public key.     Define a security group  Any user can define a security group (logical grouping of applications and\nusers) using a Security Manager. When the user specifies a security group name\n(for display purpose), the Security Manager creates the security group ID\n(a GUID value).  Required Key Exchanges  The framework requires either ECHDE_NULL or ECDHE_PSK key exchange for the claim\nprocess.  Once the application is claimed, only the ECDHE_ECDSA key exchange is\nallowed unless the policy allows for anonymous user; in such case, ECDHE_NULL is\nacceptable.  Certificate exchange during session establishment  During the AllJoyn ECHDE_ECDSA key exchange and session establishment, the peers\nexchange identity certificates, manifests, and all membership certificates.\nSince all the membership certificates are exchanged, there is a potential\ninformation disclosure vulnerability.  It is desired to have a more intelligent\nselection algorithm to provide membership certificates on demand and need-to-know\nbasis.  This algorithm needs to take into account the latency of the certificate\nexchange during the method call invocation.  The bus attachment trusts the peer if the issuer of the peer\u2019s identity\ncertificate is any of its certificate authorities and any of the security group\nauthorities listed in the application\u2019s policy.  After the session key is generated, the peers exchange all the membership\ncertificates.  Each membership certificate\u2019s trust is checked against the\npublic key of the authority of the security group.   Figure:  Exchange manifest and membership certificates  The identity certificate chain is exchanged during the ECDHE_ECDSA key exchange\nprocess.  The org.alljoyn.Bus.Peer.Authentication interface is not enforced with\npermission.  Claim a factory-reset application  Using a Security Manager any user can claim any factory-reset application. The\nfactory-reset application is assumed to be already onboarded to the network.  It\nis recommended the claiming process occurs during the onboarding process while\nthe peers are connected via the SoftAP.   Figure:  Recommend to claim during onboarding  Claiming is a first-come, first-claim action. The user installs an admin\nsecurity group.  The procedure to make the application to become claimable again\nis manufacturer-specific.   See the FactoryReset() in the Configuration\ninterface.  There will be an API call that allows the application to make itself\nclaimable again.  Claim factory-reset application without out-of-band registration data   Figure:  Claim a factory-reset application without using out-of-band\nregistration data  The identity certificate will be used for authentication in the ECDHE_ECDSA key\nexchange.  Claim factory-reset application using out-of-band registration data  An application manufacturer can provision a key or the application can\ndynamically generate a key to support the claiming process. The ECDHE_PSK key\nexchange is used in this scenario. The key is provided to the user out of band.\nAn example is a QR code or a token delivered via email or text messaging. The\nuser is prompted for the key when establishing a connection with the\nfactory-reset application.   Figure:  Claiming a factory-reset application using out-of-band registration\ndata  Example of building a policy  A user uses a Security Manager application to build a policy. The Security\nManager application queries the About data and manifest templates from the\napplication. The Security Manager application can do further introspection of\nthe application for the detailed information of securable interfaces and secured\nobjects, and prompt the user to select the permissions to include in the policy.  A policy may contain a number of ACLs.  Please refer to section (Policy ACL format)  for more information.  Install a policy  An admin can install a policy for the application.  When a policy is installed, the core framework may expire master secrets\nincluding existing session keys if it is not able to apply the new policy without\nre-authenticating the peer.  Resource constrained devices are most likely to\nexpire master secrets.  Expiring keys will cause existing sessions to terminate.   Figure:  Install a policy  Update a manifest  An admin can update a manifest for the application.  This involves resigning the\nidentity certificate because the new digest of the manifest must be included in\nthe identity certificate.   Figure:  Update manifest  Add an application to a security group  An admin issues a membership certificate with the given security group ID and\nprovides it to the application to install in its keystore. This act adds the\napplication to the security group.   Figure:  Add an application to a security group  Add a user to a security group  The security group authority uses the Security Manager to generate the membership\ncertificate for another user for the given security group ID.  In the following flow, the security group authority named \u201cuser\u201d provides a\nmembership certificate for security group LivingRoomGUID to the other user named\n\u201cuser2.\u201d   Figure:  Add a user to a security group  Security Manager  Introduction  The AllJoyn security 2.0 ecosystem consists of many applications and devices.\nThose applications and devices are deployed in various setups and for them it is\nimpossible to know up front what other peers they will see around them let alone\nknow how they should interact with them. Which peers can be trusted, which\nrights do those peers have\u2026 So after being deployed, applications and devices\nhave to be configured. The people in charge of configuring the system, the\nadministrators need a service for this. Such a service is called a security\nmanager.  Depending on your setup, you need a different service. A large enterprise has\ndifferent requirements than a home does. Not all administrators have a strong\ntechnical background. A tool for home users should have a straightforward,\nunderstandable user interface (hiding the more complex features). These\nsimplifications should be done inside the security manager, so it is transparent\nfor applications and devices in which setup they are deployed. Application\ndevelopers should make no distinction between enterprise and small home.  A security configuration consists of two parts:\n1. Certificates: certificates provide proof that an application is managed by a\n   security manager. They can be used to gain access to resources of other peers\n   or to provide resources themselves to others. The certificates describe the\n   rights the subject has.\n2. Policy: A policy is a list of Access Control Lists (ACLs). These ACLs\n   describe how other peers can access the holder of the policy.  Security managers use AllJoyn to transfer this configuration to applications and\ndevices they manage.  Security Manager Architecture  A security manager is a service that can take multiple forms. For a home setup\nit can be a single application accessed by one person. For an enterprise setup,\nmultiple administrators need to use it, so its core can run on a server, with\nsome local application talking to it. When discussing the functional blocks of\nthe security manager, it is important to understand that those blocks can reside\non different machines and that for some of these we even have multiple instances.   The manager provides certificates. In order to generate and sign certificates,\n  it needs to have a certificate authority (CA).  Configuration storage: The security manager should keep track of what the\n  configuration looks like. To do so, it should persist the configuration data.  UI: The administrator needs to interact with the security manager in order to\n  make configuration changes. The user interface doesn't need to be part of the\n  manager itself. It could be running in a web browser or it could offer a REST\n  API, so that custom UI can be built on top.  AllJoyn Agent (security manager agent): Configuration updates are sent using\n  AllJoyn as the communication protocol. The agent is the component which does\n  the interaction with the managed peers.   The following assumptions are made:  The four functional blocks of the security manager can be combined into a\n  single application, but it should be possible to run them in different\n  applications or even on different hosts.  A security manager can have multiple security manager agents acting on its\n  behalf.  The security manager topology is transparent for AllJoyn applications.  A security manager is identified by the public key of its CA. We call this the\n  key of the security manager.  The Alliance envisions multiple implementations of security managers and does\nnot provide implementation specifications. The Alliance does specify a set of\ninterfaces that allow the security managers to interact with AllJoyn security 2.0\nbased applications and devices.  What the Security Manager manages  We already mentioned a number of times that a security manager manages\napplications and devices. But what does it mean and do we really manage\napplications and devices? The security manager agent will use AllJoyn security\nfeatures to set up a secure connection to a peer. The only way it has to\nsecurely identify this peer is by looking at that peer's public key. Since we\nhand out certificates granting rights to this key, in fact it means we are\nmanaging keys. So when asking what are we managing, we should ask ourselves who\nhas access to a key? There is no easy answer to this questions. It all depends\non the OS and platform the software is running on.   On a plain Linux or Windows machine, applications can choose to protect data\n  on a per-user basis, making it hard to protect the key from other applications\n  running as the same user. On the other hand, the key is also not\n  application-specific. When the same application runs as a different user, it\n  can't access the key anymore.  Operating systems on smartphone do a better job at sandboxing applications.\n  The link between key and application is stronger there.   How many keys you need per device depends on the device:  A single-function device (e.g., a temperature sensor) is considered as one big\n  application. One key to do all operations.  Every app on a smartphone is considered as an app on its own, so one key per\n  application.\n* The built-in firmware of a smart TV is also considered as a single app.\n  Applications installed on top of the firmware of the TV are separate apps and\n  should have their own key.  What we can trust  The AllSeen Alliance offers a software stack that runs on top of some hardware\nwithin an OS. The stack can be embedded in an application which is installed on\na device or could be integrated in a firmware of a device. The security manager\ncannot distinguish this. He only sees a remote peer. Furthermore the security\nmanager cannot assume applications are running on trustworthy systems. If an\napplication runs on a compromised or malicious system, there is little we can do\ninside the app to protect.  A genuine application running on malicious system,\nshould be treated as malicious. We should protect the ecosystem by:   Being able to revoke the rights granted to an application.  Make sure compromised or even malicious applications are limited to rights\n   they were given. Since we can't trust the OS or hardware the application is\n   running on, these checks must be done at the remote peer side.   The protective measure should be defined so that a well-behaving app on a well\nbehaving system can protect itself from any unwarranted access. If both peers\nare malicious, then there is little we can do. But then they don't need AllSeen\nto perform malicious acts. There is a risk though that 2 malicious applications\nteam up. Each individual app gets a small acceptable set of rights, but then\ncombining their rights to launch an attack.  When claiming an application two considerations must be made:   Can I trust the application?  Can I trust the device where the application is running on? But not only the\n   device and its OS, but for desktops systems as well which other applications\n   are there? These apps might to try get access to the keystore of the genuine\n   app. This is not something we can fix within the AllSeen Alliance. This\n   remains an integration aspect   Sharing Keystores  When an application is claimed, it will store its certificates inside a keystore.\nThis keystore can be shared. The security manager nor the system can prevent\napplications from doing this. Is it recommended to share keystores? It has the\nadvantage that you only have to claim one application, while multiple\napplications can use it. However the certificates in the store will only grant a\nlimited set of permission to its users. Sharing the store only makes sense if it\nwas granted all permissions required by its applications. Sharing keystore can\nbe allowed if the applications granted access to it are known upfront and the\nunion of rights is known.  Sharing keystores does have some side effects.  Every app using the keystore\nwill appear as the same manageable application. The security will be able to\nmanage one keystore via multiple apps. This feature requires additional layer of\ncomplexity in order to provide the concurrent access to the shared keystore.  We also partially lose the ability to sandbox applications, as applications\nusing a shared keystore get a full set of rights linked to the store and not\nnecessarily the ones they strictly need.  Applications integrated in firmware  The firmware of a device could consist of multiple smaller AllSeen applications.\nFrom end-user perspective you only want to claim this device once. Those\napplications are allowed to share their keystore, but only one of them should\nprovide the Security interfaces. So only one application is seen from security\nmanager perspective. When expressing the permission required for this\napplication, it should request all permissions required by the apps on that\ndevice.  Standalone applications  Standalone applications are apps downloaded and installed on a desktop computer,\ntablet or smart phone or something similar. Standalone applications should not\nshare their  keystore with other applications. If such an application is built\nout of separate sub-applications (each of them uses a separate bus attachment),\nthen they should follow the same rules as applications integrated in firmware.  Security Manager Operations  The security manager allows the following operations:\n- security group management: create, update and delete security groups\n    - allow grouping of applications. A group is uniquely defined by GUID and\n      the public key of a security manager. Applications can become members of a\n      group when they are issued a membership certificate for that group\n- identity management: create, update and delete identities\n    - Identities are used to define the users of application. Users can map to\n      physical persons.  Applications can act on behalf of a user when they\n      receive an identity certificate for that user\u2019s security manager.  An\n      application keystore should only have one identity certificate.\n- application/key management:\n    - claim applications: make it managed by this security manager\n    - manage application manifest\n    - manage AllJoyn certificates for these applications\n    - manage policy (ACL's) of applications\n    - force application to become un-managed again  Inter Security Manager Interaction  When applications interact with each other, they check if the interaction is\nallowed by their policies as previously set by their security manager. In\npractice, a peer must present a certificate (chain) signed by its security\nmanager public key. Meaning that with the basic features we created silos, you\ncan only talk to applications managed by your own security manager. In practice\napplications managed by different security managers need to interact with each\nother as well. We provide 2 ways to do this: Delegation and Restricted User.  Delegation  Use case  I\u2019m the administrator of my home ecosystem. I claim appliances in the home and\nprovide them with configuration. I as administrator am the only person having\naccess to the security manager. When my kids want to get access to an appliance,\nthen they have to ask me to get approval for each application they want to use.\nThis may not be sufficient for all use cases. With delegation, my security\nmanager gives a membership certificate with delegation rights to the security\nmanager of each of my kids. With this certificate, they can delegate these\nrights to their applications. They only need to ask one time and then they can\nmake any of their applications part of my group. Even though my kids did not\ninteract directly with each other, with these delegated certificates they\ninteract with each other in the scope of this group.  Limitations  The followings are the limitations of using delegation.\n- You can only authenticate members of the group. Mutual authenticated requests\n  can only be done between members of the group.\n- My kids get Remote-control rights for the TV by giving them a membership\n  certificate with delegation rights for my TV Group. Their remote control\n  applications become members of the TV group. If I give my TV a policy for the\n  TV group, then the TV will allow the request from the remote control apps of\n  my kids. This requires my kids to define an ANY-TRUSTED policy for TV\n  operations for their apps. This is ok for TVs remote control operations. If\n  mutual authentication is required, the TV must become member of the TV group\n  as well.\n- For a chat use case you need to know who is sending a message and to whom\n  you\u2019re sending messages. So mutual authentication is required, and all\n  participants have to be in that group.\n- As policy is defined on group level, it would require separate groups in order\n  to differentiate between kids and parents.  Delegating certificate Flow  In the X.509 membership and identity certificates, the delegate concept is\nrepresented by the basicConstraints extension cA flag.  If a grantee receives a\ncertificate with the X.509 basicConstraints extension cA flag equal to true, the\ngrantee can issue a certificate to others.  If the cA flag is false then a peer validating a\ncertificate chain verifies that no further delegation has been done, or the\nchain is considered invalid.   Figure:  Reissue membership certificate  Restricted access for other security manager  Restricted access tries to address the same problem as delegation but takes a\ndifferent approach to solve it. With delegation, you give a certificate to an\napplication. With that certificate the application can prove it is allowed\naccess to a group. With restricted access we define a policy on our managed\napplications that allows applications from a different security manager to get\naccess. This would be as if we would pre-install the delegated membership\ncertificate on all our managed applications. So when the peer comes around, he\ndoesn't need to send the proof, the application already has it. Since policy\ncomes from a trusted source, we don't need to distribute certificates, we can\ndefine a more compact ACL.  In practice, the security manager defines a restricted peer type for all\napplications that need to interact with the applications of the peer security\nmanager. This ACL restricts applications of that security manager to a specific\nset of rules. Those applications just need to prove that they are owned with an\nidentity certificate verifiable with the peer security manager certificate\nauthority. That authority is installed with the restricted peer entry into the\nlocal application policy.  As example use case: Suppose we have a real-estate agent. When showing a house\nto clients, he'd like to show-off the AllSeen-enabled home automation system.\nThis can be achieved with either delegation or restricted user. The advantage of\nrestricted user is that if he potentially needs to show 100 homes, he can do it\nbased on 1 certificate instead of 100 for the delegation scenario. There is less\nrisk for information disclosure. If someone could get hold of the 100\ncertificates, then he can learn who the home sellers are. In the restricted user\ncase, the seller's public keys are in the policy of the agent's app and policy\nis never shared.  Install a restricted peer ACL Flow  The admin installs a FROM_CERTIFICATE_AUTHORITY ACL into his local application\u2019s\npolicy to allow his friend to have access to the local application.   Figure:  Add restricted user rules to an application  Application Manifest  When considering where AllSeen enabled applications will run, smartphones are an\nobvious target. A lot of applications are available in various app stores.\nUnfortunately not all of these applications are trustworthy. For example, the\nflashlight app asks for access to phonebook, network, etc. Same as the\napplication is sandboxed on the smartphone, we would like to sandbox\napplications within the AllSeen security 2.0 context. If I install an AllSeen TV\nremote control app, then I would like it only to have rights to do TV\noperations. Nothing more. Since we can't trust the application, we can't assume\nit will behave properly. So these restrictions must be enforced by the peers.\nFor the remote control example, the TV must check whether the app has\npermissions. When remote control app tries to open the door, then the door must\nreject the call.  The main goal of an application manifest is to inform an admin which interfaces\nan application will produce and consume. Once the admin accepts the manifest,\nthe manifest is signed and installed on the application. The signed manifest\nwill be used to enforce that the application cannot produce or consume any\nunwarranted interfaces.  A signed application manifest limits the potential interfaces a malicious\napplication can access within a set of well-behaving applications.  The application manifest has a similar goal as an application manifest on an app\nstore application, in which an end-user has to accept a list of permissions when\ninstalling a new application on his phone which are enforced by the app store\napplication framework. The implementation is however different, as described\nbelow.  Requirements  Manifest Format  The manifest must be expressed at the interface level. It may be expressed at\nthe member level, but this is not recommended as this increases the complexity\nthat needs to be handled by the admin.  Manifest Acceptance  The manifest template must be presented to the admin in a user-friendly way. As\nthe interface names might not be very informative, they must be mapped to a\nuser-friendly description.  As a malicious application can by definition not be trusted, the descriptions\nmust be provided by a trustworthy source.  The descriptions of the interfaces should be localized to the admin.  The AllSeen Alliance must provide descriptions for any standard AllSeen\ninterface, as reviewed and recommended by the Interface Review Board (IRB).  The application developer must provide the descriptions of any application\nspecific interfaces.  If a manifest template is defined at the member level, a description for each\nlisted member must be available.  Manifest Enforcement  The accepted manifest must be enforced by the peer application, as a malicious\napplication may not be trusted to enforce it locally.  Manifest Update  Whenever an application is updated and does not require additional rights, it\nmay still use the previously signed manifest. Only when the update requires\nadditional rights, the application changes its state and signal the change to\nlet the admin know about the existence of a new manifest template.  The admin\ncan generate a new manifest for that application.  Implementation Scenario  This section describes the steps to generate the application manifest.  Once the\nmanifest is accepted,  its contents digest will be encoded in a new identity\ncertificate.   The security manager discovers the remote application through the\n   NotifyConfig signal.  The security manager retrieves the manifest template of the application.  Using the manifest template, the security manager starts the manifest\n   building process.  The security manager contacts a server via HTTPS to retrieve the human\n   readable description of the interfaces and presents them to the admin.  Note\n   that the HTTPS server location is not yet defined.  The admin accepts (or rejects) the description of the manifest. When the\n   admin rejects the manifest, the application will not receive a manifest.  The security manager reissues a new identity certificate with the digest of\n   the requested (  accepted) permissions.  The security manager installs the new identity certificate and manifest on\n   the application.    Figure:  Building Policy using manifest  Application  The application developer needs to embed the manifest template in his\napplication. There should be a platform specific callback function to retrieve\nthe manifest template that belongs to an application. For app store\napplications, it could be based on convention, providing the manifest template\nas a file inside the application package. For small embedded devices, the\nmanifest template could be part of the application.  To ease the generation of membership certificates by the security manager, the\nmanifest format is the same format that is used to express access rules in the\nmembership certificates.  Interface Description Server  The server serving the descriptions of the interfaces can either be:\n1. Hosted by the application developer for application specific interfaces. To\n   prevent spoofing attacks, this server must be contacted via HTTPS and its URL\n   must be based on the reverse domain name of the interface name.\n2. Hosted by the AllSeen Alliance for common AllSeen interfaces. This server\n   MUST be contacted over HTTPS.  Howeer, the URL for this server is not yet\n   defined.  Manifest Enforcement  When applying the specific policy rules, the remote peer will enforce the rules\nspecified in the manifest since the manifest is associated with the identity\ncertificate.",
            "title": "Typical operations"
        },
        {
            "location": "/learn/core/security2_0/hld/#access-validation",
            "text": "Validating policy on a producer  This is a typical producer validation of a consumer\u2019s permissions when the\nconsumer makes a method call on a secure interface.   Figure:  Validating policy on a producer  Validating policy on a consumer  This is a typical consumer policy validation when the consumer application calls\na secure method call.   Figure:  Validating policy for a consumer  Validating policy on a consumer that requires a producer belong to a security group  The following flow shows a policy enforcement on the consumer that requires the\nproducer belong to a security group.   Figure:  Consumer policy requires producer belong to a security group  Anonymous session  In scenarios when there is no trust established between two peers such as when a\nguest comes into the user's home, the guest\u2019s consumer application can still\ncontrol certain applications if and only if there are ACLs specified for ALL\ninstalled on these devices.  Note that ANY_TRUSTED includes only authenticated peers while ALL includes\nunauthenticated (anonymous) peers.  Accessing secured interfaces, the consumer always use ECDHE_ECDSA to contact a\npeer.  If the key exchange fails, it can fallback to ECDHE_NULL and contact the\npeer as an anonymous user.  This process is automated so the application\ndeveloper does not need to drive the key exchange process.   Figure:  Anonymous access  Validating an admin user   Figure:  Validating an admin  Emitting a session-based signal  Before emitting a session-based signal to existing connections, the producer\nverifies whether it is allowed to emit the given signal to any authorized party.\nUpon receipt of the signal, the consumer checks whether it has the authorization\nto accept the given signal.  The consumer verifies the producer\u2019s manifest for\nproper authorization.   Figure:  Validating a session-based signal",
            "title": "Access validation"
        },
        {
            "location": "/learn/core/security2_0/hld/#policy-acl-format",
            "text": "The format is binary and exchanged between peers using AllJoyn marshalling  The policy data will be in binary format.  The following guidelines are used for\nexchanging and persisting the policy data:   The AllJoyn marshalling will be use to encode the policy data when send from\n   security manager to application  The AllJoyn marshalling will be used to generate buffers to be signed.  The AllJoyn marshalling will be used to serialize the data for persistence.  The parser will ignore any field that it does not support.   Format Structure  The following diagram describes the format structure of the ACL data.   Figure:  Authorization Data Format Structure  Authorization data field definition  Root level     Name  Data type  Required  Description      version  number  yes  The specification version number.  The current spec version number is 1.    serialNumber  number  yes  The serial number of the policy. The serial number is used to detect of an update to an older policy.    ACLs  Array of  ACLs  yes  List of access control lists.     Access Control List     Name  Data type  Required  Description      peers  array of objects  no  List of peers.  There are multiple types of peers.  A peer object has the following fields: Name Data Type Required Description type number yes The peer type. The following are the valid type of peers: ALL \u2013 All secured sessions will match this peer type including peers that match any of the following peer types ANY_TRUSTED \u2013 Any authenticated peer using any authentication method except ECDHE_NULL. FROM_CERTIFICATE_AUTHORITY -- matches all peers with certificates issued by the specified certificate authority WITH_PUBLIC_KEY \u2013 a single peer identified by the public key WITH_MEMBERSHIP  -- all members of the security group publicKey Public Key no The peer key info data. Depending on peer type, the publicKey is: ALL \u2013 not applicable ANY_TRUSTED \u2013 not applicable FROM_CERTIFICATE_AUTHORITY \u2013 the public key of the certificate authority WITH_PUBLIC_KEY \u2013 the public key of the peer WITH_MEMBERSHIP \u2013 the public key of the security group authority sgID GUID No Security group ID.  This is applicable only the type WITH_MEMBERSHIP.    rules  array of rules  no  List of allowed rules. The peer application is allowed to perform the actions specified in the given rules. The default rule is to allow nothing.     Rule Record     Name  Data type  Required  List of values  Description      obj  string  no   Object path of the secured object. A * at the end indicates a prefix match.  When there is no *, it is an exact match.    ifn  string  no   Interface name. A * at the end indicates a prefix match.  When there is no *, it is an exact match.     Interface Member Record     Name  Data type  Required  List of values  Description      mbr  string  no   Member name.  A * at the end indicates a prefix match.  When there is no *, it is an exact match.    type  number  no  0: any 1: method call 2: signal 3: property  Message type. Default is any    action  byte  no   The action mask flag. The list of valid masks: 0x00: Deny - Explict deny.  Only enforced when matched in WITH_PUBLIC_KEY ACL, ignored in all other cases 0x01: Provide \u2013 allows sending signal, exposing method calls and producing properties 0x02: Observe \u2013 allows receiving signals and getting properties 0x04: Modify \u2013 set properties and make method calls     Enforcing the rules at message creation or receipt  The following table lists the required action mask base on the message.  Table:  Action Mask Matrix     Message Action  Local Policy Remote peer\u2019s manifest      send GetProperty  Remote peer has PROVIDE permission for this property    receive GetProperty  Remote peer has OBSERVE permission for this property    send GetAllProperties  Remote peer has PROVIDE permission for * properties    receive GetAllProperties  Only properties for which the remote peer has OBSERVE permission are returned    send SetProperty  Remote peer has PROVIDE permission for this property    receive SetProperty  Remote peer has MODIFY permission for this property    send method call  Remote peer has PROVIDE permission for this method call    receive method call  Remote peer has MODIFY permission for this method call    send signal  Remote peer has OBSERVE permission for this signal    receive signal  Remote peer has PROVIDE permission for this signal     Permission for property changed signals are included with the property\npermission. If a peer has permission for the property then it has permission for\nthe property changed signal for that property.  Sending GetAllProperties requires that the remote peer has a PROVIDE ACL rule\nfor * interface members of type PROPERTY or ALL.  Receiving GetAllProperties is allowed but only properties for which the\nremote peer has OBSERVE permission are returned. Other properties are treated\nas unreadable.  Permission for session-cast signals has the same requirements as\nsignals but the remote peer must be known in order match the ACLs to be\napplied.  The recipients for a session-cast signal in a multi-point session\nare not known resulting in permission to send the signal being denied. The\nrecipient for session-cast signals in a point-to-point session are known,\nallowing ACLs to be matched.  Policy after claim  Right after the application is claimed, a policy is created\nautomatically with the following feature:\n1. Admin group has full access\n2. Trusted peers are allowed to provide properties and methods and to receive\nsignals.\n3. Allow for self-installation of membership certificates\n4. All other interactions are implicitly denied  The created policy is below.  It is recommended that a certification test is\ncreated to verify this is the policy that is generated.  peer: FROM_CERTIFICATE_AUTHORITY\n    pubKey: Identity_Auth_Key\npeer: WITH_MEMBERSHIP\n    pubKey: admin authority key\n    sgID: admin group ID\n    ifn: *\n        mbr: *\n        action: 0x07 (PROVIDE | OBSERVE | MODIFY)\npeer: WITH_PUBLIC_KEY\n    pubKey: the application\u2019s public key\n    ifn: org.alljoyn.Bus.Security.ManagedApplication\n        mbr: InstallMembership\n        action: 0x04   (MODIFY)\npeer: ANY_TRUSTED\n    ifn: *\n        mbr: *\n          action: 0x01 (PROVIDE)\n          type: 1 (METHOD)\n        mbr: *\n          action: 0x02 (OBSERVE)\n          type: 2 (SIGNAL)\n        mbr: *\n          action: 0x01 (PROVIDE)\n          type: 3 (PROPERTY)  Rule Search and Selection  Whenever an encrypted message is created or received, the access control rules\nare searched for matching rules.  In order for a rule to be considered a match,\nit must meet the following criteria:\n- Be in an access control list matching peer type, public key,\nand/or Security Group ID as specified for the ACL\n- Match message header data based object path, interface name and member\nname as specified for the rule.\n- Match the action mask and not be an explicit deny.  Or the rule must match the following criteria:\n- Be in the ACL of a peer type WITH_PUBLIC_KEY\n- The ACL's key must match the public key of the peer\n- The action mask must be an explicit deny.\n- All other criteris (object path, interface and member names) must be *  The resulting set of matched rules is applied to the message as follows:\n- If any explicit deny rule matches per above then the message is denied.\n- If no deny rules match, then the message is allowed if at least one allow\nrule matches.\n- Otherwise, the message is denied.",
            "title": "Policy ACL format"
        },
        {
            "location": "/learn/core/security2_0/hld/#certificates",
            "text": "The following subsections detail the supported certificates.  The certificate\nformat is X.509 v3.  The certificate lifetime will be considered in order to\navoid having to revoke the certificate.  However, certain devices do not have\naccess to a trusted real time clock.  In such cases, applications on those\ndevices will not be able to validate the certificate lifetime.  Certificate Chain validation  Identity and membership certificate chains will be validated per section 6.1 of\nRFC 5280 with the following additions, limitations and notes:\n- The leaf certificate must have exactly one EKU and it must be the correct EKU\nper the use case.  Certificates used for ECDHE_ECDSA authentication must\nhave the identity certificate EKU and certificates exchanged to indicate\nsecurity group memberships must have the membership certificate EKU.\n- Intermediate certificates must have zero, one or both identity and membership\nEKUs.\n- No EKU will be treated as any EKU, per RFC 5280. EKU validation is transitive,\nmeaning any certificate with no EKU will inherit those of its parent.\n- Time of validity will only be evaluated if the peer has a time source.\n- The implementation will assume system time is trusted if available.\n- For identity certificates, the associated digest of the leaf certificate\nis validated against the digest of the manifest.\n- The AKI is validated to not be null.\n- CRL check is not implemented as there is no CRL.\n- basicConstraints::pathLenConstraint will NOT be checked.  Certificate chains will be validated...\n- When a certificate is received during claiming.\n- When a certificate is installed.\n- When a certificate is received during ECDHE_ECDSA authentication.\n- When a certificate is received to assert security group membership.  2.6.1 Main Certificate Structure  All AllSeen X.509 certificates have the following ASN.1 structure.  Currently\nonly the ECDSA (prime256v1) certificates are supported.  Certificate ::= SEQUENCE {\n    tbsCertificate TBSCertificate,\n    signatureAlgorithm SEQUENCE { 1.2.840.10045.4.3.2 (ecdsa-with-sha256) },\n    signatureValue BIT STRING\n}\n\nTBSCertificate ::= SEQUENCE {\n    version v3(2),\n    serialNumber INTEGER,\n    signature SEQUENCE { 1.2.840.10045.4.3.2 (ecdsa-with-sha256) },\n    issuer SEQUENCE { 2.5.4.3 (commonName), UTF8 STRING },\n    validity Validity,\n    subject Name,\n    subjectPublicKeyInfo SEQUENCE { 1.2.840.10045.2.1 (id-ecPublicKey), 1.2.840.10045.3.1.7 (prime256v1), BIT STRING },\n    issuerUniqueID IMPLICIT UniqueIdentifier OPTIONAL,\n    subjectUniqueID IMPLICIT UniqueIdentifier OPTIONAL,\n    extensions EXPLICIT\n}\n\nExtensions ::= SEQUENCE {\n    BasicConstraints SEQUENCE { 2.5.29.19 (basicConstraints), BOOLEAN (FALSE) },\n    SubjectAltName SEQUENCE { 2.5.29.17 (id-ce-subjectAltName),\n                    SEQUENCE { CHOICE[0] (otherName)\n                      SEQUENCE { 1.3.6.1.4.1.44924.1.3 (AllSeen Security Group ID),\n                          OCTET STRING}}},\n    ExtendedKeyUsage SEQUENCE { 2.5.29.37 (id-ce-extKeyUsage),\n                                SEQUENCE { (KeyPurposeId) OBJECT IDENTIFIER}},\n    AuthorityKeyIdentifier SEQUENCE { 2.5.29.35  (id-ce-authorityKeyIdentifier),\n                                      SEQUENCE { [0] (keyIdentifier) OCTET STRING}}\n}  AuthorityKeyIdentifier  The AuthorityKeyIdentifier standard extension field will hold 64 bits of data\ncomprising of a four-bit type field with the value 0100 followed by the least\nsignificant 60 bits of a hash of the value of the BIT STRING\nsubjectPublicKey (excluding the tag, length, and number of unused bits).  Security 2.0 Custom OIDs  All Security 2.0 custom OIDs will start with  1.3.6.1.4.1.44924.1  where 1.3.6.1.4.1.44924  is the registered AllSeen Alliance Private Enterprise\nNumber.  Identity certificate  The identity certificate is used to associate application, user or device with\nan identity alias.  This allows an identity alias to have a number of identity\ncertificates installed in different keystores.  The identity alias is encoded in the SubjectAltName field in the extensions.  The extensions include the following fields:\n - ExtendedKeyUsage: the type of certificate within the AllSeen ecosystem. \n 1.3.6.1.4.1.44924.1.1 is used for Identity certificates.\n - SubjectAltName: the alias for the identity.\n - AssociatedDigest: the digest of the associated manifest data.\nBoth the ExtendedKeyUsage and AssociatedDigest have custom OIDs under the\nSecurity 2.0 root.  Extensions ::= SEQUENCE {\nBasicConstraints SEQUENCE { 2.5.29.19 (basicConstraints), BOOLEAN (FALSE) },\nSubjectAltName SEQUENCE { 2.5.29.17 (id-ce-subjectAltName),\n     SEQUENCE { CHOICE[0] (otherName)\n                SEQUENCE { 1.3.6.1.4.1.44924.1.3\n                           (AllSeen Security Group ID), OCTET STRING}}},\nAuthorityKeyIdentifier SEQUENCE { 2.5.29.35\n                                  (id-ce-authorityKeyIdentifier),\n                                   SEQUENCE { [0] (keyIdentifier) OCTET STRING}},\nExtendedKeyUsage SEQUENCE { 2.5.29.37 (id-ce-extKeyUsage),\n                            SEQUENCE { (KeyPurposeId) 1.3.6.1.4.1.44924.1.1}},\nAssociatedDigest SEQUENCE { 1.3.6.1.4.1.44924.1.2 (AllSeen Certificate Digest),\n                            2.16.840.1.101.3.4.2.1 (hash), OCTET STRING }\n}  Membership certificate  The membership certificate is used to assert an application, user or device is\npart of a security group.  The security group identifier is encoded with a 16 network byte order octets\nencoded in the SubjectAltName field in the extensions.  The extensions include the following fields:\n- ExtendedKeyUsage: the type of certificate within the AllSeen ecosystem. \n1.3.6.1.4.1.44924.1.5 is used for membership certificates.\n- SubjectAltName: the security group ID.  Extensions ::= SEQUENCE {\nBasicConstraints SEQUENCE { 2.5.29.19 (basicConstraints), BOOLEAN (FALSE) },\nSubjectAltName SEQUENCE { 2.5.29.17 (id-ce-subjectAltName),\n     SEQUENCE { CHOICE[0] (otherName)\n                SEQUENCE { 1.3.6.1.4.1.44924.1.3\n                           (AllSeen Security Group ID), OCTET STRING}}},\nAuthorityKeyIdentifier SEQUENCE { 2.5.29.35\n                                  (id-ce-authorityKeyIdentifier),\n                                   SEQUENCE { [0] (keyIdentifier) OCTET STRING}},\nExtendedKeyUsage SEQUENCE { 2.5.29.37 (id-ce-extKeyUsage),\n                            SEQUENCE { (KeyPurposeId) 1.3.6.1.4.1.44924.1.5}}\n}  Recommended Best Practices for Certificates   Root certificates should include only the ExtendedKeyUsage OIDs for purposes\nfor which it will issue certificates.  Currently, these are the AllJoyn\nidentity and membership OIDs listed in this document.  Issuing root certificates\nwith no ExtendedKeyUsage extension or with the anyExtendedKeyUsage OID is\nnot recommended.  Adopting this practice will limit the potential abuse of\nAllJoyn root certificates for unrelated purposes.",
            "title": "Certificates"
        },
        {
            "location": "/learn/core/security2_0/hld/#sample-use-cases",
            "text": "The solution listed here for the use cases is just a typical solution.  It is\nnot intended to be the only solution.  Users and devices  Users:  Dad, Mom, and son     Security Group  Members      homeAdmin  Dad, Mom    sonAdmin  Son    dadOnlyAdmin  Dad    livingRoom  TV, living room tablet, son\u2019s room TV, master bedroom TV, master bedroom tablet    masterBedrom  Master bedroom tablet        Room  Devices  Notes      Living room  TV, Set-top box, tablet, Network-attached Storage (NAS)  All devices claimed by Dad and managed by Mon and Dad using the security group homeAdmin All devices are accessible for the whole family    Son\u2019s bedroom  TV  Claimed and managed by son TV is allowed to interact with living room devices for streaming data    Master bedroom  TV, tablet  TV used by Mom and Dad only Tablet used by Dad only TV is allowed to interact with living room devices for streaming data Tablet has full control of living room devices including the parent control feature     Users set up by Dad   Figure:  Use case - users set up by Dad  Living room set up by Dad   Figure:  Use case - living room set up by Dad  Son's bedroom set up by son   Figure:  Use case - son's bedroom set up by son  Master bedroom set up by Dad   Figure:  Use case - master bedroom set up by Dad  Son can control different TVs in the house   Figure:  Use case \u2013 Son can control different TVs in the house  Living room tablet controls TVs in the house   Figure:  Use case - Living room tablet controls TVs",
            "title": "Sample use cases"
        },
        {
            "location": "/learn/core/security2_0/hld/#enhancements-to-existing-framework",
            "text": "",
            "title": "Enhancements to Existing Framework"
        },
        {
            "location": "/learn/core/security2_0/hld/#crypto-agility-exchange",
            "text": "In order to provide the AllJoyn peers to express the desire to pick some\nparticular cryptographic cipher suite to use in the key exchange and the\nencryption of the messages, new key exchange suite identifiers will be added to\nthe framework to express the choice of cipher and MAC algorithms.  The new\nidentifiers may come from the list of TSL cipher suites specified in Appendix A.5 of TLS RFC5246  ,  RFC6655 , and RFC7251 .  The following table shows the list of existing key exchange suites:     AllJoyn Key Exchange Suite  Crypto Parameters  Availability      ALLJOYN_ECDHE_NULL  Curve NIST P-256 (secp256r1) AES_128_CCM_8 SHA256  Standard Client Thin Client    ALLJOYN_ECDHE_PSK  Curve NIST P-256 (secp256r1) AES_128_CCM_8 SHA256  Standard Client Thin Client    ALLJOYN_ECDHE_ECDSA  Curve NIST P-256 (secp256r1) AES_128_CCM_8 SHA256 X.509 certificate  Standard Client Thin Client    ALLJOYN_RSA_KEYX  AES_128_CCM_8 SHA256 X.509 certificate  Standard Client version 14.02 or older    ALLJOYN_PIN_KEYX  AES_128_CCM_8  Standard Client version 14.12 or older Thin Client version 14.02 or older    ALLJOYN_SRP_KEYX  AES_128_CCM_8  Standard Client    ALLJOYN_SRP_LOGON  AES_128_CCM_8  Standard Client     The following table shows the potential list of TLS cipher suites to be\nsupported.  Other suites will be added as codes are available.     TLS cipher suite  Additional Crypto Parameters  Availability  RFC      TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8  Curve NIST P-256 (secp256r1) SHA256 X.509 certificate  Standard Client Thin Client  7251    TLS_RSA_WITH_AES_128_CCM_8  SHA256 X.509 certificate  Standard Client  6655",
            "title": "Crypto Agility Exchange"
        },
        {
            "location": "/learn/core/security2_0/hld/#application-state-announcement",
            "text": "The Permission module provides a session-less signal to allow the Security\nManager discovering the applications to claim or to distribute updated policy or\ncertificates.  The current features provided by the About session-less signal\ndoes not fulfill the Security Manager discovery requirement.  The signal\nprovides the following information:\n1. A number field named state to show the state of the application.  The possible values of this field are:\n    - 0 -- Not claimable.  The application is not claimed and not accepting\n      claim requests.\n    - 1 \u2013 Claimable.  The application is not claimed, but is accepting claim\n      requests.\n    - 2 \u2013 Claimed.  The application is claimed and can be configured.\n    - 3 \u2013 Needs update.  The application is claimed, but requires a\n      configuration update (after a software update).\n2. The public key  This signal is emitted when\n1. The bus attachment is enabled with peer security using ECDHE key exchanges\n2. The application is claimed or do a factory reset\n3. The application has a new manifest template",
            "title": "Application State Announcement"
        },
        {
            "location": "/learn/core/security2_0/hld/#features-in-future-releases",
            "text": "Certificate revocation (not fully designed)  The application will validate the certificate using a revocation service\nprovided by the Security Manager.  The revocation service is a distributed\nservice.  The Certificate Revocation Service is expected to provide a method call that\ntakes in the certificate and return whether the given certificate is revoked.  The application looks in its installed policy for the peer that provides the\nCertificate Revocation Service.  If the application can\u2019t locate any of the\nCertificate Revocation Service, the certificate revocation check will be\nskipped.  If a membership certificate is revoked, all signed authorization data related to\nthe membership certificate is no longer valid.  Current work-around  The admin can blacklist a peer by installing a deny rule in the application\npolicy to deny access for the given peer.  Distribution of policy updates and membership certificates (not fully designed)  The Distribution Service is a service provided by a Security Manager.  This\nservice provides persistent storage and high availability to distribute updates\nto applications.  An admin uses the Security Manager to generate updated policy and membership\ncertificates, encrypt the payload with a session key derived from a nonce value\nand the master secret for the   pair.  The package including\nthe sender public key, recipient public key, nonce, and encrypted payload is\nsent to the Distribution Service to delivery to the recipient.  The recipient\nuses the information in the package to locate the master secret to generate the\ncorresponding session key to decrypt the payload.  Once the decryption is\nsuccessful, the recipient signs the hash of the package and provide the\nsignature in the reply.   Figure:  Distribution of policy update and certificates  Policy Templates  An application developer can define policy templates to help the Security\nManager to build consumer and producer policies.  A policy template provides the\nfollowing data in:\n - Specification version number\n - List of permission rules",
            "title": "Features In Future Releases"
        },
        {
            "location": "/learn/core/security2_0/hld/#future-considerations",
            "text": "",
            "title": "Future Considerations"
        },
        {
            "location": "/learn/core/security2_0/hld/#broadcast-signals-and-multipoint-sessions",
            "text": "All security enhancements for broadcast signals and multipoint sessions will be\nconsidered in future releases of Security 2.0.",
            "title": "Broadcast signals and multipoint sessions"
        },
        {
            "location": "/learn/core/security2_0/",
            "text": "Security 2.0\n\n\nThe Security 2.0 feature is an enhancement to the existing AllJoyn\n Security.\n\n\nThe goal of the Security 2.0 feature is to allow an application to validate access to secure interfaces or secure objects based on policies installed by the owner. This feature is part of the AllJoyn Core library. It is not an option for the application to enforce permission. It is up to the user to dictate how the application performs based on the access control lists (ACLs) defined for the application. The AllJoyn Core Permission Management component does all the enforcement including the concept of mutual authorization before any message action can be taken.\n\n\nThe Security Manager is optional service that helps the user with key management and permission rules building. Using policy templates defined by application developer, the Security Manager builds the application manifest to let the user authorize which interactions the application can do.\n\n\nLearn More\n\n\n\n\nSecurity 2.0 High Level Design (HLD)\n\n\nDownload the SDK\n, \nbuild",
            "title": "Home"
        },
        {
            "location": "/learn/core/security2_0/#security-20",
            "text": "The Security 2.0 feature is an enhancement to the existing AllJoyn  Security.  The goal of the Security 2.0 feature is to allow an application to validate access to secure interfaces or secure objects based on policies installed by the owner. This feature is part of the AllJoyn Core library. It is not an option for the application to enforce permission. It is up to the user to dictate how the application performs based on the access control lists (ACLs) defined for the application. The AllJoyn Core Permission Management component does all the enforcement including the concept of mutual authorization before any message action can be taken.  The Security Manager is optional service that helps the user with key management and permission rules building. Using policy templates defined by application developer, the Security Manager builds the application manifest to let the user authorize which interactions the application can do.",
            "title": "Security 2.0"
        },
        {
            "location": "/learn/core/security2_0/#learn-more",
            "text": "Security 2.0 High Level Design (HLD)  Download the SDK ,  build",
            "title": "Learn More"
        },
        {
            "location": "/learn/core/system-description/advertisement-discovery/",
            "text": "Advertisement and Discovery\n\n\nOverview\n\n\nThe AllJoyn\n system supports a mechanism for providers to advertise \ntheir services over the AllJoyn network, and for consumers to \ndiscover these services for consumption. AllJoyn supports \ndiscovery over multiple underlying access networks such as Wi-Fi. \nThe AllJoyn discovery protocol makes use of IP multicast over \nWi-Fi for advertisement and discovery. The details of discovery \nover underlying networks are hidden from the AllJoyn applications.\n\n\nThe AllJoyn router supports transport-specific discovery for \nWi-Fi using the IP transport.\n\n\nApplications can use one of the following methods to advertise \nand discover services over the AllJoyn framework, detailed in \nsubsequent sections of this chapter:\n\n\n\n\nName-based discovery: Service advertisement and discovery \noccurs either using a well-known name or unique name.\n\n\nAnnouncement-based discovery: Service advertisement \nand discovery occurs using AllJoyn interface names.\n\n\n\n\nDiscovery enhancements in the 14.06 release\n\n\nThe AllJoyn discovery feature was enhanced in the 14.06 \nrelease to enable the discovery of devices/apps that support \na certain set of interfaces in a more efficient way (NGNS, \ndefined earlier). NGNS supports an mDNS-based discovery \nprotocol that enables specifying AllJoyn interfaces in an \nover-the-wire discovery message. In addition, the mDNS-based \nprotocol is designed to provide discovery responses over unicast \nto improve performance of the discovery protocol and minimize \noverall multicast traffic generated durign the AllJoyn discovery process. \n\n\nThe presence detection mechanism for AllJoyn devices/apps was \nenhanced by adding an explicit mDNS-based ping() message that \nis sent over unicast to determine if the remote endpoint is \nstill alive. The ping() mechanism is driven by the application \nbased on application logic.\n\n\nThis chapter first describes the legacy AllJoyn discovery \n(prior to the 14.06 release), followed by NGNS-based discovery \nand presence as described in \nNGNS message sequences\n.\n\n\nLegacy name-based discovery\n\n\nThis section captures design for the legacy name-based \ndiscovery supported prior to the 14.06 release.\n\n\nThe AllJoyn router supports a Name Service to enable the \nname-based service discovery. The Name Service supports a \nUDP-based protocol for discovery over IP-based access networks \n(including Wi-Fi). Name-based discovery APIs are exposed \nthrough the AllJoyn Core Library.\n\n\nThe Name Service supports IS-AT and WHO-HAS protocol messages, \nwhich are described below. These protocol messages carry well-known \nnames to be advertised and discovered, respectively. These protocol \nmessages are multicast over the AllJoyn proximal network (local subnets) \nover IANA-registered IP multicast groups and port number as \nlisted in \nIANA-registered multicast addresses for the AllJoyn framework\n.\n\n\nIANA-registered multicast addresses for the AllJoyn framework\n\n\n\n\n\n\n\n\nAddress\n\n\nPort\n\n\n\n\n\n\n\n\n\n\nIPv4 Multicast group address\n\n\n224.0.0.113\n\n\n\n\n\n\nIPv6 Multicast group address\n\n\nFF0X::13A\n\n\n\n\n\n\nMulticast port number\n\n\n9956\n\n\n\n\n\n\n\n\nThe following figure captures the high-level architecture \nfor the name-based discovery, showing the Name Service \ngenerating IS-AT and WHO-HAS messages for service discovery.\n\n\n\n\nFigure:\n Name-based discovery architecture\n\n\nIS-AT\n\n\nThe IS-AT message advertises AllJoyn services using the well-known \nname or the unique name. A single IS-AT message can include a \nlist of one or more well-known names or unique names for \nadvertisement. The IS-AT message specifies a validity period \nfor the well-known name advertisement indicated by the Adv_Validity_Period \nconfig parameter.\n\n\nThe AllJoyn router at the provider device send out IS-AT \nmessage periodically over IP multicast to advertise the \nset of services it supports. The periodicity is defined by \nthe Adv_Msg_Retransmit_Interval period which is a configurable \nparameter on the provider.\n\n\nThe IS-AT message can also be sent out in response to a \nreceived WHO-HAS message that is looking for that advertised \nservice. This is so that the consumer device can be immediately \nnotified of the service to minimize the discovery time.\n\n\nWHO-HAS\n\n\nThe WHO-HAS message discovers one or more AllJoyn services \nusing the well-known name or the unique name. Similar to IS-AT, \na WHO-HAS message can include a list of one or more well-known \nnames or unique names for discovery. The WHO-HAS message can \nalso include a well-known name prefix (instead of the complete \nwell-known name) that gets matched against the well-known name \nbeing advertised in the IS-AT message. \n\n\nFor example, the well-known name prefix \"org.alljyon.chat\" in \nthe WHO-HAS message match with the well-known name \n\"org.alljoyn.chat._123456.Joe\" being advertised in the IS-AT message.\n\n\nWhen a consumer device wants to discover a service, it sends \nout the WHO-HAS message over IP multicast. The WHO-HAS message \nis repeated few times to account for the possibility of a collision \non the Wi-Fi network that can result in dropping of the multicast packet.\n\n\nThe following parameters determine the transmission of the WHO-HAS message:\n\n\n\n\nDisc_Msg_Number_Of_Retries\n\n\nDisc_Msg_Retry_Interval\n\n\n\n\nThe WHO-HAS message is resent for Disc_Msg_Number_Of_Retries \ntimes at every Disc_Msg_Retry_Interval after the first transmission \nof the message. In response to the WHO-HAS message, a consumer \ncan get an IS-AT message advertising the requested service from the provider.\n\n\nConsumer behavior\n\n\nThe following figure captures the consumer side AllJoyn router \nbehavior for name-based discovery.\n\n\n\n\nFigure:\n Consumer AllJoyn router discovery behavior\n\n\nMessage sequence\n\n\nThe following use cases are captured AllJoyn name-based discovery scenarios:\n\n\n\n\nDiscovery when IP connectivity is already established \n\n\nDiscovery over unreliable network\n\n\nDiscovery when IP connectivity is established late\n\n\nWell-known name lost due to loss of IP connectivity \n\n\nProvider cancels well-known name advertisement\n\n\nConsumer cancels discovery for well-known name\n\n\n\n\nDiscovery when IP connectivity is already established\n\n\nThe following figure shows the message sequence for a typical \ndiscovery scenario of an AllJoyn service well-known name. \nIn this case, the provider and consumer devices already have \nIP connectivity established between them. The first WHO-HAS \nmessage delivered over IP multicast reaches the provider device \nwhich immediately responds with an IS-AT message.\n\n\n\n\nFigure:\n Typical discovery of a well-known name\n\n\nDiscovery over unreliable network\n\n\nThe following figure shows the message sequence for the \ndiscovery scenario of an AllJoyn service's well-known name \nwhen the underlying network drops some of the multicast \nWHO-HAS messages. In this case, the WHO-HAS retry mechanism \nkicks in and the message is retried based on Disc_Msg_Number_Of_Retries \nand Disc_Msg_Retry_Interval parameters.\n\n\n\n\nFigure:\n Discovery over unreliable network\n\n\nDiscovery when IP connectivity is established late\n\n\nThe following figure shows the message sequence for the \ndiscovery scenario when the consumer device gets connected \nto the Access Point (AP) in the AllJoyn proximal network late, \nafter it has completed transmission of set of WHO-HAS messages. \nThis can happen when the consumer device just joins a new \nAllJoyn proximal network. The subsequent IS-AT message is \nreceived by the consumer AllJoyn router and results in \nFoundAdvertiseName for the requested well-known name.\n\n\n\n\nFigure:\n Discovery when IP connectivity is established late\n\n\nWKN lost due to loss of IP connectivity\n\n\nThe following figure shows the message sequence for the \nscenario when the discovered well-known name gets lost due \nto the consumer losing IP connectivity with the AllJoyn \nproximal network. This can happen when a consumer device \nleaves the AllJoyn proximal network. \n\n\nIf the consumer's AllJoyn router does not receive any IS-AT \nmessages for a given well-known name for the Adv_Validity_period \ntime duration, it declares that well-known name to be lost and \ninitiates a LostAdvertiseName for that well-known name.\n\n\n\n\nFigure:\n Well-known name lost due to loss of IP connectivity\n\n\nProvider cancels well-known name advertisement\n\n\nThe following figure shows the message sequence for the scenario \nwhen a provider application cancels the advertisement for a \npreviously advertised well-known name.\n\n\n\n\nFigure:\n Provider cancels well-known name advertisement\n\n\nConsumer cancels discovery for well-known name\n\n\nThe following figure shows the message sequence for the \nscenario when a consumer application cancels discovery for a well-known name.\n\n\n\n\nFigure:\n Consumer cancels discovery for well-known name\n\n\nMessage structure\n\n\nAs described above, the Name Service supports IS-AT and \nWHO-HAS messages. These messages get embedded in a higher-level \nName Service message which provides the flexibility to include \nboth IS-AT and WHO-HAS messages in the same Name Service message. \nThis can be useful if an AllJoyn application acts as both provider \n(advertising a well-known name) and a consumer (looking to \ndiscover a well-known name). \n\n\nThe following figure shows the Name Service message structure. \n\nName Service message structure fields\n \ndefines the message structure fields.\n\n\n\n\nFigure:\n Name service message structure\n\n\nName Service message structure fields\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSver\n\n\nVersion of the latest implemented the AllJoyn discovery protocol for the sender.\n\n\n\n\n\n\nMVer\n\n\nVersion of Name Service message.\n\n\n\n\n\n\nQCount\n\n\nNumber of WHO-HAS question messages that follow the header.\n\n\n\n\n\n\nACount\n\n\nNumber of IS-AT answer messages that follow the header.\n\n\n\n\n\n\nTimer\n\n\nCount (in seconds) for which included IS-AT answer should be considered valid.\nThis field should be set based on the following:\nAdv_Validity_Period for a well-known name advertisement that is valid for a default period of time.\nAdv_Infinite_Validity_Value for a well-known name advertisement that is valid \"forever\", or at least until withdrawn. A zero in this field means that the sending AllJoyn router is withdrawing the advertisements.\n\n\n\n\n\n\n\n\nIS-AT message\n\n\nThe following figure shows version 1 of the IS-AT message. \n\n\nIS-AT message format version 1 fields\n \ndefines the IS-AT message fields\n\n\n\n\nFigure:\n IS-AT message format (version 1)\n\n\nIS-AT message format version 1 fields\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nR4 Bit\n\n\nIf set to '1', the R4 bit indicates that the IPv4 endpoint (IP address and port) of a reliable transport (TCP) is present.\n\n\n\n\n\n\nU4 Bit\n\n\nIf set to '1', the U4 bit indicates that the IPv4 endpoint (IP address and port) of an unreliable transport (UDP) is present.\n\n\n\n\n\n\nR6 Bit\n\n\nIf set to '1', the R6 bit indicates that the IPv6 endpoint (IP address and port) of a reliable transport (TCP) is present.\n\n\n\n\n\n\nU6 Bit\n\n\nIf set to '1', the U6 bit indicates that the IPv6 endpoint (IP address and port) of an unreliable transport (UDP) is present.\n\n\n\n\n\n\nC Bit\n\n\nIf set to '1', the C bit indicates that the list of StringData records is a complete list of all well-known names exported by the responding AllJoyn router.\n\n\n\n\n\n\nG Bit\n\n\nIf set to '1', the G bit indicates that a variable length daemon GUID string is present.\n\n\n\n\n\n\nM\n\n\nMessage type of the IS-AT message. Defined to be '01' (1) for IS-AT.\n\n\n\n\n\n\nCount\n\n\nNumber of StringData items that are included in the IS-AT message.\n\n\n\n\n\n\nTransportMask\n\n\nBit mask of transport identifiers that indicates which AllJoyn transport is making the advertisement.\n\n\n\n\n\n\nStringData\n\n\nDescribes a single AllJoyn well-known name being advertised.\n\n\n\n\n\n\n\n\nWHO-HAS message\n\n\nThe following figure shows version 1 of the WHO-HAS message. \n\n\nWHO-HAS message format version 1 fields\n defines the \nWHO-HAS message fields.\n\n\n\n\nFigure:\n WHO-HAS message format (version 1)\n\n\nWHO-HAS message format version 1 fields\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nReserved\n\n\nReserved bits.\n\n\n\n\n\n\nM\n\n\nMessage type of the WHO-HAS message.  Defined to be '10' (2) for WHO-HAS.\n\n\n\n\n\n\nCount\n\n\nNumber of StringData items that are included in the WHO-HAS message.\n\n\n\n\n\n\nStringData\n\n\nDescribes a single AllJoyn well-known name that the consumer AllJoyn router is interested in.\n\n\n\n\n\n\n\n\nLegacy announcement-based discovery\n\n\nThis section captures design for the legacy announcement-based \ndiscovery supported prior to the 14.06 release.\n\n\nIn the announcement-based discovery, the provider device \nannounces the set of AllJoyn interfaces supported via an \nannouncement broadcast signal. The consumer device interested \nin making use of the AllJoyn services opts to receive these \nbroadcast announcement messages from providers to discover \nthe interfaces for the supported AllJoyn services. \n\n\nThe Announcement message is generated by the About feature \nand is delivered as an AllJoyn sessionless signal using the \nsessionless signal mechanism provided by the AllJoyn router \n(detailed \nSessionless Signal\n). The sessionless signal module makes \nuse of the AllJoyn name service messages (IS-AT and WHO-HAS) \nto notify the consumer of new signals using a specially \nformatted well-known name for the sessionless signal. Once the \nconsumer AllJoyn router discovers the sessionless signal's \nwell-known name, it connects back to the provider over an \nAllJoyn session to fetch the service announcement message \nfrom the provider device.\n\n\nThe following figure captures the high-level architecture \nfor the announcement-based discovery process.\n\n\n\n\nFigure:\n Announcement-based service discovery architecture\n\n\nThe Announcement message is sent as a sessionless signal \nfrom the provider app to the AllJoyn router, and gets cached \nin the sessionless signal cache. The sessionless signal module \ngenerates a specially formatted well-known name for the \nsessionless signal as shown below (see details in \nSessionless Signal\n):\n\n\nSLS WKN format: org.alljoyn.sl.x\nGUID\n.x\nchange_id\n\n\n\n\n\nThe sessionless signal module interacts with the Name Service \nto send an IS-AT message for that well-known name. The AllJoyn \nrouter on the consumer side is looking to discover this well-known \nname. Upon receiving the IS-AT message, the sessionless signal \nmodule on the consumer side connects back to the sessionless \nsignal module on the provider via an AllJoyn session and fetches \nthe Announcement message which then gets delivered to the consumer app.\n\n\nMessage sequence\n\n\nThe following figure shows the message sequence for the announcement-based discovery.\n\n\n\n\nFigure:\n Announcement-based service discovery message sequence\n\n\nAnnouncement message\n\n\nThe Announcement message provides a list of object paths for \nobjects implemented by the AllJoyn application and AllJoyn \ninterfaces supported by each of those objects. The AllJoyn \napplication controls which objects get announced in the Announcement message. \n\n\nThe Announcement message also contains additional About fields \ndescribing information about the application and the device. \nSee the About HLD for Announcement message details.\n\n\nLegacy AllJoyn discovery configuration parameters\n\n\nAllJoyn discovery configuration parameters\n captures \nconfiguration parameter for legacy AllJoyn discovery.\n\n\nNOTE:\n Implementation may use different names for these parameters.\n\n\nAllJoyn discovery configuration parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDefault value\n\n\nRange\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAdv_Validity_Period\n\n\n120 seconds\n\n\nTBD\n\n\nValidity period used for IS-AT advertisements.\n\n\n\n\n\n\nAdv_Infinite_Validity_Value\n\n\n255\n\n\nTBD\n\n\nTime value for indicating that an advertisement is valid forever.\n\n\n\n\n\n\nAdv_Msg_Retransmit_Interval\n\n\n40 seconds\n\n\nTBD\n\n\nInterval in seconds for sending out IS-AT messages.\n\n\n\n\n\n\nDisc_Msg_Number_Of_Retries\n\n\n2\n\n\nTBD\n\n\nNumber of times the WHO-HAS message is sent after the first transmission.\n\n\n\n\n\n\nDisc_Msg_Retry_Interval\n\n\n5 seconds\n\n\nTBD\n\n\nInterval in seconds between retries of the WHO-HAS message.\n\n\n\n\n\n\n\n\nNext-generation name service\n\n\nThe Next-Generation Name Service (NGNS) is implemented in the \n14.06 release and offers considerable performance enhancements \nfor discovery and presence features offered by the AllJoyn platform, \ndetailed in the subsequent relevant sections. \n\n\nThe following figure shows the high-level architecture for NGNS.\n\n\n\n\nFigure:\n NGNS high-level architecture\n\n\nThe architecture shows main logical components related \nto NGNS. The enhanced discovery and presence functionality \nare exposed via new APIs as part of the AllJoyn core library. \nThe About functionality is included in the AllJoyn core library, \nand enables an AllJoyn app to send Announcement sessionless signals. \nThe sessionless signal module caches the Announcement signal. \nThe NGNS module uses information in the Announcement signal \nto answer interface-based discovery queries received from consumer apps.\n\n\nDiscovery\n\n\nThe AllJoyn framework offers name-based discovery or announcement-based \ndiscovery as mentioned earlier in this chapter. NGNS supports \nthe following discovery mechanisms:\n\n\n\n\nNGNS supports name-based discovery. Although there is no change \nat the API level, the discovery utilizes DNS service discovery \nframework over mDNS. NGNS sends out legacy (pre-14.06 release) \ndiscovery messages as per the configuration setting in the \nAllJoyn router config file for compatibility.\n\n\nNGNS supports a more efficient announcement-based discovery \nprocess by allowing a consumer application to query for a set \nof AllJoyn interfaces. Prior to the 14.06 release, the consumer \napplication had to create match rules to receive all Announce \nsignals (transmitted as sessionless signals), and parse through \nthe set of AllJoyn interfaces that the provider application is \nannouncing prior to making a determination if any interfaces of \ninterest are provided. While this mechanism is more powerful \nthan the well-known name-based mechanism, it was not efficient. \nThe NGNS feature allows a consumer application to query for \nthe set of AllJoyn interfaces, and only the provider applications \nthat make use of those interfaces answer the query.\n\n\n\n\nPresence detection\n\n\nPrior to the 14.06 release, presence (or absence) detection \nwas based on three successive IS-AT messages missing for a \ngiven name (well-known or unique name) by the consumer application. \nThe time taken for this detection was deterministic (3*40 sec = 120 sec). \n\n\nThe use of NGNS in the 14.06 release introduces an efficient \nconsumer application-driven presence detection that makes use \nof unicast messaging. Once a name has been discovered, the \nconsumer application can invoke the new Presence API and determine \nthe presence state. Since each application has its own logic \nregarding times and events triggering presence detection, NGNS \nprovides the API and leaves the triggering logic for the application to drive.\n\n\nNGNS design aspects\n\n\nThe following sections detail the design aspects of the NGNS feature.\n\n\nUsage of mDNS\n\n\nThe 14.02 discovery protocol is based on AllJoyn-specific \nUDP messages over the AllJoyn-assigned multicast IP address. \nThis design can limit discoverability (IP routers can block \nAllJoyn-assigned multicast IP address and/or port numbers) \nin the field. To address this issue, the 14.06 discovery \nprotocol is based on multicast DNS (mDNS) that uses IANA-assigned \nmulticast IP address and port numbers.\n\n\nMulticast IP addresses and port numbers used by NGNS\n\n\n\n\n\n\n\n\nAddress\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nIPv4 Multicast group address\n\n\n224.0.0.251\n\n\n\n\n\n\nIPv6 Multicast group address\n\n\nFF02::FB\n\n\n\n\n\n\nMulticast port number\n\n\n5353\n\n\n\n\n\n\n\n\nFurthermore, mDNS already supports the following features \nthat are utilized by the AllJoyn discovery protocol:\n\n\n\n\nSolicit unicast responses\n\n\nSend query message using unicast\n\n\nSend unsolicited responses from the responder\n\n\n\n\nThis constitutes version 2 of the discovery protocol. \nThe version number is set in the pv field of the \"sender-info\" \nTXT record in the additional section of the mDNS query and response.\n\n\nNOTE:\n The 14.02 Name Service implementation uses version 0 and 1 \nof the discovery protocol. \n\n\nUsage of DNS-SD\n\n\nThe 14.06 discovery design is based on \nRFC 6763\n. \n\n\nA client discovers the list of available instances of a given \nservice name (as registered with IANA, e.g., alljoyn is a \nregistered service name) using a query for a DNSPTR record \nwith a name of the form:\n\n\nService\n.\nDomain\n [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). \n\n\n\n\nThe result of this PTR lookup for the name \"\n.\n\" \nis a set of zero or more PTR records giving Service Instance Names of the form:\n\n\nService Instance Name = \nInstance\n.\nService\n.\nDomain\n\n\n\n\n\nIn addition to that service instance, the DNS-SD responder sends \nDNS SRV \nRFC 2782\n and DNS TXT \n\nRFC 1035\n record. \nThe SRV and TXT records have a name of the form:\n\n\nInstance\n.\nService\n.\nDomain\n\n\n\n\n\nThe SRV record gives the target host and port where the service \ninstance can be reached. The DNS TXT record of the same name \ngives additional information about this instance, in a \nstructured form using key/value pairs.\n\n\nIn addition to the service discovery framework specified in \n\nRFC 6763\n, \nthe NGNS discovery protocol sends DNS TXT records in the \nAdditional section of the DNS-SD query to optimize the \ndiscovery scope without requiring further negotiation by \nestablishing an AllJoyn session with the provider application.\n\nThe same feature is utilized in other use cases, such as sending \nsender-information or presence-related information. The DNS-SD \nmessage format is described in detail in \nDNS-SD message format\n.\n\n\nDesign considerations for Wi-Fi\n\n\nIt is well known that the multicast success rate over Wi-Fi \nis not optimal and in some cases it is substantially degraded. \nAs per the Wi-Fi specification, each station is allowed to \ngo into sleep state and wake up periodically. The wake-up \ninterval is provisioned at the device and is supposed to \nbe a factor of the time interval used by the AP to schedule \nthe multicast traffic. \n\n\nThe AP buffers the incoming multicast data and schedules it \nbased on the time interval determined by the DTIM (Delivery Traffic \nIndication Message) interval. In reality, it has been observed \nthat the wake-up interval is set to multiples of the DTIM value \n(typically 1, 3, or 10). This implies that the device might \nmiss the multicast data. Since this is a realistic scenario, \nthe AllJoyn discovery protocol was designed to handle this \nscenario in a robust fashion. \n\n\nSpecifically, the design principles captured in sections below are adopted.\n\n\nTransmission schedule\n\n\nThe multicast schedule was designed to support devices that \nwake up to process multicast packets in the multiple of DTIM \ninterval. Although the schedule backs off exponentially, \neach multicast message is repeated twice to improve reliability \nof multicast messages with devices that wake up every third \nDTIM interval (a very typical case). \n\n\nThe schedule sends query messages at the following times: \n0, 1, 3, 9, and 27 seconds. At each transmit time trigger, \na total of three messages (original plus two repeats 100 msec apart) \nare sent. This is referred to as burst in the call flows. \nAs far as the message recipient is concerned, a response \nto the first successfully received message in a burst is \nsent and all subsequent messages that are part of the same burst are ignored. \n\n\nMinimize multicast and maximize unicast transmissions\n\n\nAnother design aspect is to send multicast messages to initiate \nqueries but rely on unicast responses for replies and presence \ndetection. The DNS allows unicast responses to be solicited \nin the mDNS query, and the discovery protocol utilizes that \nfeature. This is indicated in the top bit of the qclass field \nof the DNS message header \nRFC 6762\n.\n\n\nDiscovery and Presence API snapshot\n\n\nDiscovery and Presence APIs related to discovery scenarios\n\nlists the Discovery and Presence APIs offered by the AllJoyn \nsystem and maps them to discovery scenarios. The main paradigm \nis that discovery and presence are driven by the consumer application.\n\n\nDiscovery and Presence APIs related to discovery scenarios\n\n\n\n\n\n\n\n\nDiscovery scenario\n\n\nAPI\n\n\n\n\n\n\n\n\n\n\nConsumer application Name query\n\n\nFindAdvertisedName()\n\n\n\n\n\n\nConsumer application gets notified about discovery or loss of an advertised name\n\n\nFoundAdvertisedName()\nLostAdvertisedName()\n\n\n\n\n\n\nConsumer application cancelling the Name query\n\n\nCancelFindAdvertisedName()\n\n\n\n\n\n\nProvider application advertising a name\n\n\nAdvertiseName()\n\n\n\n\n\n\nProviding application canceling advertising a name\n\n\nCancelAdvertiseName()\n\n\n\n\n\n\nProvider application sending an Announcement message\n\n\nAnnounce()\n\n\n\n\n\n\nConsumer application queries for set of AllJoyn interfaces\n\n\nRegisterAnnounceHandler()\n\n\n\n\n\n\nConsumer application cancels a query for set of AllJoyn interfaces\n\n\nUnregisterAnnounceHandler()\n\n\n\n\n\n\nConsumer application queries for presence\n\n\nPing()\n\n\n\n\n\n\n\n\nDiscovery APIs that trigger DNS-SD multicast messages\n\n\nSome of the discovery scenarios trigger multicast messaging. \nThe APIs that trigger multicast messaging are: \nFindAdvertisedName()\n, \n\nCancelAdvertiseName()\n, \nAdvertiseName()\n, \nAnnounce()\n, and \nRegisterAnnounceHandler()\n.\n\n\nSome key aspects of the multicast transmission are listed below:\n\n\n\n\nDNS-SD query issued over mDNS multicast address \n\n\nTransmission schedule as per \nTransmission schedule\n\n\nName Service messages sent depending on the LegacyNS flag \nsetting in the Router config file\n\n\nLegacy Name Service WHO-HAS and mDNS messages follow the \nsame transmission schedule.\n\n\n\n\nBackward compatibility\n\n\nNGNS is designed to meet the following backward compatibility requirements:\n\n\n\n\nSupport all existing 14.02 APIs\n\n\nSupport all legacy (version 0 and 1) NS discovery packet formats\n\n\nSend equivalent 14.02 discovery message over the wire \nwhenever the corresponding DNS-SD message is being sent \n(provided the LegacyNS flag is set to true)\n\n\nReplies with 14.02 response message upon receipt of a \n14.02 query message provided the supported version (SVer) \nfield indicates that querier doesn't support NGNS. If the \nquerier supports NGNS as indicated by the supported version, \nthen NGNS waits for the DNS-SD messages to arrive.\n\n\n\n\nThe AllJoyn router configuration file adds a LegacyNS flag \nto enable legacy discovery behavior. By default, the legacy behavior is enabled.\n\n\nNGNS message sequences\n\n\nThis section captures message sequences for NGNS.\n\n\nName-based discovery\n\n\nThis section captures messages sequences for NGNS name-based discovery scenarios.\n\n\nNGNS consumer app with NGNS provider app\n\n\nIn this scenario, the consumer application's AllJoyn router \nhas disabled the legacy behavior, i.e., no Name Service \nmessages are being sent by the consumer application. \n\n\nThis message sequence assumes that the provider application \nis already on the AllJoyn network. \n\n\nThe main steps for the message sequence are described below.\n\n\n\n\nThe message flow is initiated by the consumer application \ninvoking FindAdvertisedName().\n\n\nNGNS sends DNS-SD based query messages over mDNS.\n\n\nAny provider application that matches the name being \nsearched responds via the DNS-SD response message over \nunicast to the consumer application.\n\n\n\n\n\n\nFigure:\n NGNS name-based discovery between consumer app and provider\n\n\nNGNS consumer app with NGNS and Name Service provider apps\n\n\nThis message sequence assumes the following:\n\n\n\n\nThe consumer application's AllJoyn router has enabled the \nlegacy Name Service behavior.\n\n\nThe provider applications are already on the AllJoyn network. \n\n\n\n\nThe main steps for the message sequence are described below.\n\n\n\n\nThe message flow is initiated by the consumer application \ninvoking \nFindAdvertisedName()\n.\n\n\nThe NGNS sends DNS-SD based query messages over mDNS as \nwell as the legacy WHO-HAS message.\n\n\nAny AllJoyn provider application that matches the name \nbeing searched responds via a DNS-SD response message over unicast\n\n\nAny legacy (14.02) provider application also responds \nvia an IS-AT message if there is a match for the name being \ndiscovered in the WHO-HAS message.\n\n\n\n\n\n\nFigure:\n NGNS name-based discovery (NGNS and Name Service provider apps)\n\n\nFindAdvertisedName pending; provider apps arrive later\n\n\nThis message sequence assumes the following:\n\n\n\n\nThe consumer application's AllJoyn router has enabled the \nlegacy Name Service behavior. \n\n\nThe provider applications are not on the AllJoyn network \nat the time of initial query. \n\n\n\n\nThe main steps for the message sequence are described below.\n\n\n\n\nThe message flow is initiated by the consumer application \ninvoking \nFindAdvertisedName()\n.\n\n\nThe NGNS sends DNS-SD based query messages over mDNS, as \nwell as legacy Name Service messages.\n\n\nThe query schedule for mDNS messages and WHO-HAS messages expires\n\n\nUpon joining the AllJoyn network, the NGNS provider app \nsends unsolicited DNS-SD response messages and advertises names via IS-AT messages.\n\n\nUpon joining the AllJoyn network, the Name Service provider \napplication sends IS-AT messages.\n\n\nThe consumer AllJoyn router performs the following tasks:\n\n\nIt consumes the Name Service and NGNS messages.\n\n\nIt filters the names being advertised.\n\n\nIt sends \nFoundAdvertisedName()\n only if there is a match.\n\n\n\n\n\n\nFigure:\n FindAdvertisedName API called; provider arrives later\n\n\nInterface names discovery\n\n\nNGNS consumer app and NGNS provider app\n\n\nThis message sequence assumes the following:\n\n\n\n\nThe provider application is already on the AllJoyn network. \n\n\nThe legacy Name Service behavior is turned off on the consumer AllJoyn router. \n\n\n\n\nThe main steps for the message sequence are described below.\n\n\n\n\nThe message flow is initiated by the consumer application \nregistering the announce handler (by calling RegisterAnnounceHandler) \nand providing a set of AllJoyn interfaces. This triggers the \ndiscovery for provider applications that implement those interfaces. \n\n\nThe NGNS sends DNS-SD based query messages over mDNS and \npopulates the search TXT record in the Additional section \nbased on the AllJoyn interfaces being discovered.\n\n\nAny AllJoyn provider application that provides the \nAllJoyn interfaces being discovered sends the DNS-SD \nresponse message and includes the sessionless signal \nwell-known name corresponding to the About Announce signal. \n   Note that this message is sent over unicast\n\n\nThe consumer application immediately initiates a \nsessionless signal fetch to retrieve the Announce signal.\n\n\n\n\n\n\nFigure:\n AllJoyn interface query (NGNS consumer app and NGNS provider app)\n\n\nNGNS consumer app; NGNS and Name Service provider app\n\n\nThis message sequence is an extension of the call flow in \n\nNGNS consumer app and NGNS provider app\n \nwith the legacy Name Service behavior being enabled. \n\n\nAlthough the interface-based query is a 14.06 feature, it \nhas been designed such that legacy Name Service provider \napplications can participate in the discovery process. \nThis is enabled by sending WHO-HAS message with WKN=org.alljoyn.sl. \n\n\nThis message sequence assumes that the provider application \nis already on the AllJoyn network. \n\n\nThe main steps for the message sequence are described below:\n1. The message flow is initiated by the consumer application \nregistering the announce handler (by calling RegisterAnnounceHandler) \nand providing a set of AllJoyn interfaces for discovery.\n2. The NGNS sends DNS-SD based query messages over mDNS, \nand populates the search TXT record in the Additional section \nbased on the AllJoyn interfaces being discovered.\n3. The NGNS sends WHO-HAS discovery messages with WKN=org.alljoyn.sl.\n4. Any NGNS provider application that provides the AllJoyn \ninterfaces being discovered sends the DNS-SD response message \nand includes the sessionless signal well-known name corresponding \nto the About Announce signal. \n   Note that this message is sent over unicast.\n5. The consumer application immediately initiates a sessionless \nsignal fetch to retrieve the Announce signal.\n6. Any legacy provider application sends an IS-AT message with \nthe sessionless signal well-known name if there are any \nsessionless signals in the sessionless signal cache.\n7. The consumer application immediately initiates sessionless \nsignal fetch and filters the Announce signals that provide the \nAllJoyn interfaces being discovered.\n\n\n\n\nFigure:\n Interface query (NGNS consumer app; NGNS and Name Service provider apps)\n\n\nPending AllJoyn interface names query; provider apps arrive later\n\n\nThis message sequence describes the scenario when there is \na pending query (i.e., the transmission schedule has expired) \nbut the Announce signal handler is still registered. \n\n\nThe main steps for the message sequence are described below:\n1. The message sequence is initiated by the consumer application \nregistering the announce handler (by calling RegisterAnnounceHandler) \nand providing a set of AllJoyn interfaces for discovery.\n2. The NGNS sends DNS-SD based query messages over mDNS, and \npopulates the search TXT record in the Additional section based \non the AllJoyn interfaces being discovered.\n3. The NGNS sends WHO-HAS discovery messages with WKN=org.alljoyn.sl.\n4. The query schedule for mDNS messages and WHO-HAS message expires\n5. Upon arrival of the provider application on the AllJoyn \nnetwork, the NGNS sends unsolicited DNS-SD response messages \nwith the sessionless signal well-known names and also advertises \nthe sessionless signal well-known names via IS-AT messages.\n6. Upon joining the AllJoyn network, the Name Service provider \napplication advertises the sessionless signal well-known name via IS-AT messages.\n7. The consumer AllJoyn router fetches the sessionless signals \nfrom the provider apps and performs filtering; the Announce \nsignal is sent to the consumer application if there is a match.\n\n\n\n\nFigure:\n Pending AllJoyn interface query (NGNS consumer app, NGNS and Name Service provider apps)\n\n\nCancel advertisement\n\n\nNGNS provider app, NGNS and Name Service consumer apps\n\n\nThe main steps for the message sequence are described below.\n\n\n\n\nThe provider application calls CancelAdvertiseName().\n\n\nThe NGNS sends both IS-AT and DNS-SD response message. \nNote that advertise TXT record in the mDNS message has TTL set to 0.\n\n\nThe consumer application receives LostAdvertisedName() \nupon receipt of the cancel advertisement discovery message.\n\n\n\n\n\n\nFigure:\n Cancel advertised name (NGNS consumer app, NGNS and Name Service provider apps)\n\n\nPresence\n\n\nNGNS consumer app and NGNS provider app\n\n\nTwo modes of the Presence API is supported:  synchronous and asynchronous mode.\n\nFrom the perspective of wire protocol, the message sequence is identical.\n\n\nIn the 14.02 release, presence is validated by the receipt \nof the IS-AT messages for a name; and three successive losses \nof IS-AT messages trigger a LostAdvertisedName() to the consumer \napplication. Since the delay was not tolerable for most \napplications, the presence was redesigned in the 14.06 \nrelease. A consumer application can initiate the presence \nof a name that was previously discovered using the newly \nintroduced Ping API. \n\n\n\n\nIf the discovered name is connected to a 14.06 AllJoyn router, \nthe presence message sequence is initiated. \n\n\nIf the discovered name is connected to a 14.02 AllJoyn router, \nthe API invocation returns an error.\n\n\n\n\nThe main steps for the message sequence are described below.\n1. The consumer application initiates a presence check for \nthe name by invoking the Ping API.\n2. The AllJoyn router returns the unimplemented error code \nif the name being pinged is connected to a 14.02 AllJoyn \nrouter at the time of discovery; else, the message sequence continues.\n3. If there is an entry for the name in the AllJoyn routing \ntable, then mDNS message is sent over unicast to check the presence state.\n4. Upon receipt of the mDNS message, the AllJoyn router checks \nthe presence state for the name and sends an mDNS response \nmessage over unicast. The presence check is performed using D-Bus Ping method call.\n\n\n\n\nFigure:\n Ping API called by consumer application over NGNS (NGNS consumer app and NGNS provider app)\n\n\nLegacy presence with NGNS consumer app and Name Service provider app\n\n\nIf a name that was discovered is connected to a 14.02 \nAllJoyn router, the new Ping API message sequence is not \nsupported. If the Ping API returns not implemented error code, \nthe consumer application must issue \nFindAdvertisedName()\n \nwith the discovered name so that presence for that name can be initiated.\n\n\n\n\nFigure:\n Reverting to legacy presence (NGNS consumer app and Name Service provider app)\n\n\nDNS-SD message format\n\n\nSee \nUsage of DNS-SD \n for information on how the \nAllJoyn framework makes use of the DNS-SD protocol. \nThe AllJoyn discovery process is based on the DNS-SD and the \nmessage format is captured below. \n\n\nNOTE:\n \n in the resource records refers to the AllJoyn \nrouter'\\'s GUID. In addition, the presence of specific records \nin a given message is specified in the NGNS message sequences \ncapture above while the tables below show all the possible \nrecords types that can be present in the query or response messages:\n\n\nDNS-SD query\n\n\nDNS-SD query: question format\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRecord-specific data\n\n\n\n\n\n\n\n\n\n\nalljoyn._udp.local.\nalljoyn._tcp.local.\n\n\nPTR\n\n\nThe service name is alljoyn as allocated through IANA.\nIn the 14.06 release, the protocol used in the service description is TCP. When UDP transport is supported in future, the protocol for service name will be UDP.\nThe discovery scope is the local network.\n\n\n\n\n\n\n\n\nDNS-SD query: Additional section\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRecord-specific data\n\n\n\n\n\n\n\n\n\n\nsearch.\n.local.\n\n\nTXT\n\n\nCaptures the well-known names or interfaces that are being searched. The key notation is as follows:\ntxtvrs=0; this represents version of the TXT record.\nn_1, n_2, etc., if multiple well-known names are present, they are logically ANDed; n_# is the key for well-known names.\ni_1, i_2, etc., if multiple interface names are being queried. If multiple interface names are present, they are logically ANDed; i_# is the key for interface names.\nSince the APIs for name-based and interface-based query are different, the search record has either name keys or interface keys.\nIf the consumer application intends to perform logical OR operation for interface names, it must call the discovery API with interface name multiple times.\nExample:  i_1 = org.alljoyn.About\n\n\n\n\n\n\nsender-info.\n.local.\n\n\nTXT\n\n\nCaptures additional data regarding the sender of the message. The following keys are sent:\ntxtvrs=0; represents the version of the TXT record.\npv (protocol version):  represents the discovery protocol version.\nIPv4 and UDPv4 address: represents the IPv4 address and UDP port.\nbid (burst identifier): represents the burst identifier.\n\n\n\n\n\n\nping.\n.local.\n\n\nTXT\n\n\nCaptures the names that are being pinged by the consumer application. The key notation is as follows:\ntxtvrs=0; represents version of the TXT record.\nn= the well-known name or the unique name.\nOnly one key can be present in the ping record.\n\n\n\n\n\n\n\n\nDNS-SD response\n\n\nDNS-SD response message: Answer section\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRecord-specific data\n\n\n\n\n\n\n\n\n\n\n_alljoyn._tcp.local.\n\n\nPTR\n\n\n._alljoyn._tcp.local.\n\n\n\n\n\n\n._alljoyn._tcp.local.\n\n\nTXT\n\n\ntxtvrs=0\nExcept for text record version, there is no additional record.\n\n\n\n\n\n\n._alljoyn._tcp.local.\n\n\nSRV\n\n\nport, \n.local\nport represents TCP port number used for the router-router connection.\n\n\n\n\n\n\n\n\nDNS-SD response message: Additional section\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRecord-specific data\n\n\n\n\n\n\n\n\n\n\nadvertise.\n.local.\n\n\nTXT\n\n\nCaptures the well-known names that the provider application is advertising.The key notation is as follows:\nn_1, n_2, etc., if multiple well-known names are being advertised; n_# is the key for well-known names.\nFor interface query response, the sessionless signal well-known name that is advertised is as follows:\nn_1=org.alljoyn.About.sl.y\n.x\n\n\n\n\n\n\nsender-info.\n.local.\n\n\nTXT\n\n\nCaptures additional data regarding the sender of the message. The following keys are sent:\ntxtvrs=0; represents version of the TXT record.\npv (protocol version):  represents the discovery protocol version.\nIPv4 and UDPv4 address: represents the IPv4 address and UDP port.\nbid (burst identifier): represents the burst identifier.\n\n\n\n\n\n\nPing-reply.\n.local.\n\n\nTXT\n\n\nCaptures the names that are being pinged by the consumer application. The key notation is as follows:\ntxtvrs=0; represents version of the TXT record.\nn= well-known name or unique name.\nreplycode = reply code as returned by the router.\n\n\n\n\n\n\n.local\n\n\nA\n\n\nThis resource record sends IPv4 address. It is present in response messages for discovery.\n\n\n\n\n\n\n\n\nNGNS configuration parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDefault value\n\n\nRange\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nEnableLegacyNS\n\n\ntrue\n\n\nboolean\n\n\nSpecifies the backward compatibility behavior with respect to legacy Name Service.\n\n\n\n\n\n\n\n\nDiscovery usage guidelines\n\n\nAlthough the AllJoyn system supports both the name-based and \nannouncement-based discovery, the preferred and recommended \nmethod for discovering services in an AllJoyn IoE network \nis the announcement-based discovery.\n\n\nThe name-based service discovery process can be used for \napp-to-app based discovery, where both provider and consumer \napplications are aware of the well-known name. This discovery \nprocess is also used for sessionless signals and to discover \nthe AllJoyn router for the thin app. \n\nAllJoyn discovery method usage guidelines\n \nsummarizes usage guidelines for the two AllJoyn discovery methods.\n\n\nAllJoyn discovery method usage guidelines\n\n\n\n\n\n\n\n\nName-based discovery usage\n\n\nAnnouncement-based discovery usage\n\n\n\n\n\n\n\n\n\n\nApp-to-app discovery\nSessionless signals\nAllJoyn router discovery for thin apps\n\n\nAllJoyn service interfaces discovery on the AllJoyn network.",
            "title": "Advertisement discovery"
        },
        {
            "location": "/learn/core/system-description/advertisement-discovery/#advertisement-and-discovery",
            "text": "",
            "title": "Advertisement and Discovery"
        },
        {
            "location": "/learn/core/system-description/advertisement-discovery/#overview",
            "text": "The AllJoyn  system supports a mechanism for providers to advertise \ntheir services over the AllJoyn network, and for consumers to \ndiscover these services for consumption. AllJoyn supports \ndiscovery over multiple underlying access networks such as Wi-Fi. \nThe AllJoyn discovery protocol makes use of IP multicast over \nWi-Fi for advertisement and discovery. The details of discovery \nover underlying networks are hidden from the AllJoyn applications.  The AllJoyn router supports transport-specific discovery for \nWi-Fi using the IP transport.  Applications can use one of the following methods to advertise \nand discover services over the AllJoyn framework, detailed in \nsubsequent sections of this chapter:   Name-based discovery: Service advertisement and discovery \noccurs either using a well-known name or unique name.  Announcement-based discovery: Service advertisement \nand discovery occurs using AllJoyn interface names.   Discovery enhancements in the 14.06 release  The AllJoyn discovery feature was enhanced in the 14.06 \nrelease to enable the discovery of devices/apps that support \na certain set of interfaces in a more efficient way (NGNS, \ndefined earlier). NGNS supports an mDNS-based discovery \nprotocol that enables specifying AllJoyn interfaces in an \nover-the-wire discovery message. In addition, the mDNS-based \nprotocol is designed to provide discovery responses over unicast \nto improve performance of the discovery protocol and minimize \noverall multicast traffic generated durign the AllJoyn discovery process.   The presence detection mechanism for AllJoyn devices/apps was \nenhanced by adding an explicit mDNS-based ping() message that \nis sent over unicast to determine if the remote endpoint is \nstill alive. The ping() mechanism is driven by the application \nbased on application logic.  This chapter first describes the legacy AllJoyn discovery \n(prior to the 14.06 release), followed by NGNS-based discovery \nand presence as described in  NGNS message sequences .",
            "title": "Overview"
        },
        {
            "location": "/learn/core/system-description/advertisement-discovery/#legacy-name-based-discovery",
            "text": "This section captures design for the legacy name-based \ndiscovery supported prior to the 14.06 release.  The AllJoyn router supports a Name Service to enable the \nname-based service discovery. The Name Service supports a \nUDP-based protocol for discovery over IP-based access networks \n(including Wi-Fi). Name-based discovery APIs are exposed \nthrough the AllJoyn Core Library.  The Name Service supports IS-AT and WHO-HAS protocol messages, \nwhich are described below. These protocol messages carry well-known \nnames to be advertised and discovered, respectively. These protocol \nmessages are multicast over the AllJoyn proximal network (local subnets) \nover IANA-registered IP multicast groups and port number as \nlisted in  IANA-registered multicast addresses for the AllJoyn framework .  IANA-registered multicast addresses for the AllJoyn framework     Address  Port      IPv4 Multicast group address  224.0.0.113    IPv6 Multicast group address  FF0X::13A    Multicast port number  9956     The following figure captures the high-level architecture \nfor the name-based discovery, showing the Name Service \ngenerating IS-AT and WHO-HAS messages for service discovery.   Figure:  Name-based discovery architecture",
            "title": "Legacy name-based discovery"
        },
        {
            "location": "/learn/core/system-description/advertisement-discovery/#is-at",
            "text": "The IS-AT message advertises AllJoyn services using the well-known \nname or the unique name. A single IS-AT message can include a \nlist of one or more well-known names or unique names for \nadvertisement. The IS-AT message specifies a validity period \nfor the well-known name advertisement indicated by the Adv_Validity_Period \nconfig parameter.  The AllJoyn router at the provider device send out IS-AT \nmessage periodically over IP multicast to advertise the \nset of services it supports. The periodicity is defined by \nthe Adv_Msg_Retransmit_Interval period which is a configurable \nparameter on the provider.  The IS-AT message can also be sent out in response to a \nreceived WHO-HAS message that is looking for that advertised \nservice. This is so that the consumer device can be immediately \nnotified of the service to minimize the discovery time.  WHO-HAS  The WHO-HAS message discovers one or more AllJoyn services \nusing the well-known name or the unique name. Similar to IS-AT, \na WHO-HAS message can include a list of one or more well-known \nnames or unique names for discovery. The WHO-HAS message can \nalso include a well-known name prefix (instead of the complete \nwell-known name) that gets matched against the well-known name \nbeing advertised in the IS-AT message.   For example, the well-known name prefix \"org.alljyon.chat\" in \nthe WHO-HAS message match with the well-known name \n\"org.alljoyn.chat._123456.Joe\" being advertised in the IS-AT message.  When a consumer device wants to discover a service, it sends \nout the WHO-HAS message over IP multicast. The WHO-HAS message \nis repeated few times to account for the possibility of a collision \non the Wi-Fi network that can result in dropping of the multicast packet.  The following parameters determine the transmission of the WHO-HAS message:   Disc_Msg_Number_Of_Retries  Disc_Msg_Retry_Interval   The WHO-HAS message is resent for Disc_Msg_Number_Of_Retries \ntimes at every Disc_Msg_Retry_Interval after the first transmission \nof the message. In response to the WHO-HAS message, a consumer \ncan get an IS-AT message advertising the requested service from the provider.  Consumer behavior  The following figure captures the consumer side AllJoyn router \nbehavior for name-based discovery.   Figure:  Consumer AllJoyn router discovery behavior  Message sequence  The following use cases are captured AllJoyn name-based discovery scenarios:   Discovery when IP connectivity is already established   Discovery over unreliable network  Discovery when IP connectivity is established late  Well-known name lost due to loss of IP connectivity   Provider cancels well-known name advertisement  Consumer cancels discovery for well-known name   Discovery when IP connectivity is already established  The following figure shows the message sequence for a typical \ndiscovery scenario of an AllJoyn service well-known name. \nIn this case, the provider and consumer devices already have \nIP connectivity established between them. The first WHO-HAS \nmessage delivered over IP multicast reaches the provider device \nwhich immediately responds with an IS-AT message.   Figure:  Typical discovery of a well-known name  Discovery over unreliable network  The following figure shows the message sequence for the \ndiscovery scenario of an AllJoyn service's well-known name \nwhen the underlying network drops some of the multicast \nWHO-HAS messages. In this case, the WHO-HAS retry mechanism \nkicks in and the message is retried based on Disc_Msg_Number_Of_Retries \nand Disc_Msg_Retry_Interval parameters.   Figure:  Discovery over unreliable network  Discovery when IP connectivity is established late  The following figure shows the message sequence for the \ndiscovery scenario when the consumer device gets connected \nto the Access Point (AP) in the AllJoyn proximal network late, \nafter it has completed transmission of set of WHO-HAS messages. \nThis can happen when the consumer device just joins a new \nAllJoyn proximal network. The subsequent IS-AT message is \nreceived by the consumer AllJoyn router and results in \nFoundAdvertiseName for the requested well-known name.   Figure:  Discovery when IP connectivity is established late  WKN lost due to loss of IP connectivity  The following figure shows the message sequence for the \nscenario when the discovered well-known name gets lost due \nto the consumer losing IP connectivity with the AllJoyn \nproximal network. This can happen when a consumer device \nleaves the AllJoyn proximal network.   If the consumer's AllJoyn router does not receive any IS-AT \nmessages for a given well-known name for the Adv_Validity_period \ntime duration, it declares that well-known name to be lost and \ninitiates a LostAdvertiseName for that well-known name.   Figure:  Well-known name lost due to loss of IP connectivity  Provider cancels well-known name advertisement  The following figure shows the message sequence for the scenario \nwhen a provider application cancels the advertisement for a \npreviously advertised well-known name.   Figure:  Provider cancels well-known name advertisement  Consumer cancels discovery for well-known name  The following figure shows the message sequence for the \nscenario when a consumer application cancels discovery for a well-known name.   Figure:  Consumer cancels discovery for well-known name  Message structure  As described above, the Name Service supports IS-AT and \nWHO-HAS messages. These messages get embedded in a higher-level \nName Service message which provides the flexibility to include \nboth IS-AT and WHO-HAS messages in the same Name Service message. \nThis can be useful if an AllJoyn application acts as both provider \n(advertising a well-known name) and a consumer (looking to \ndiscover a well-known name).   The following figure shows the Name Service message structure.  Name Service message structure fields  \ndefines the message structure fields.   Figure:  Name service message structure  Name Service message structure fields     Field  Description      Sver  Version of the latest implemented the AllJoyn discovery protocol for the sender.    MVer  Version of Name Service message.    QCount  Number of WHO-HAS question messages that follow the header.    ACount  Number of IS-AT answer messages that follow the header.    Timer  Count (in seconds) for which included IS-AT answer should be considered valid. This field should be set based on the following: Adv_Validity_Period for a well-known name advertisement that is valid for a default period of time. Adv_Infinite_Validity_Value for a well-known name advertisement that is valid \"forever\", or at least until withdrawn. A zero in this field means that the sending AllJoyn router is withdrawing the advertisements.     IS-AT message  The following figure shows version 1 of the IS-AT message.   IS-AT message format version 1 fields  \ndefines the IS-AT message fields   Figure:  IS-AT message format (version 1)  IS-AT message format version 1 fields     Field  Description      R4 Bit  If set to '1', the R4 bit indicates that the IPv4 endpoint (IP address and port) of a reliable transport (TCP) is present.    U4 Bit  If set to '1', the U4 bit indicates that the IPv4 endpoint (IP address and port) of an unreliable transport (UDP) is present.    R6 Bit  If set to '1', the R6 bit indicates that the IPv6 endpoint (IP address and port) of a reliable transport (TCP) is present.    U6 Bit  If set to '1', the U6 bit indicates that the IPv6 endpoint (IP address and port) of an unreliable transport (UDP) is present.    C Bit  If set to '1', the C bit indicates that the list of StringData records is a complete list of all well-known names exported by the responding AllJoyn router.    G Bit  If set to '1', the G bit indicates that a variable length daemon GUID string is present.    M  Message type of the IS-AT message. Defined to be '01' (1) for IS-AT.    Count  Number of StringData items that are included in the IS-AT message.    TransportMask  Bit mask of transport identifiers that indicates which AllJoyn transport is making the advertisement.    StringData  Describes a single AllJoyn well-known name being advertised.     WHO-HAS message  The following figure shows version 1 of the WHO-HAS message.   WHO-HAS message format version 1 fields  defines the \nWHO-HAS message fields.   Figure:  WHO-HAS message format (version 1)  WHO-HAS message format version 1 fields     Field  Description      Reserved  Reserved bits.    M  Message type of the WHO-HAS message.  Defined to be '10' (2) for WHO-HAS.    Count  Number of StringData items that are included in the WHO-HAS message.    StringData  Describes a single AllJoyn well-known name that the consumer AllJoyn router is interested in.     Legacy announcement-based discovery  This section captures design for the legacy announcement-based \ndiscovery supported prior to the 14.06 release.  In the announcement-based discovery, the provider device \nannounces the set of AllJoyn interfaces supported via an \nannouncement broadcast signal. The consumer device interested \nin making use of the AllJoyn services opts to receive these \nbroadcast announcement messages from providers to discover \nthe interfaces for the supported AllJoyn services.   The Announcement message is generated by the About feature \nand is delivered as an AllJoyn sessionless signal using the \nsessionless signal mechanism provided by the AllJoyn router \n(detailed  Sessionless Signal ). The sessionless signal module makes \nuse of the AllJoyn name service messages (IS-AT and WHO-HAS) \nto notify the consumer of new signals using a specially \nformatted well-known name for the sessionless signal. Once the \nconsumer AllJoyn router discovers the sessionless signal's \nwell-known name, it connects back to the provider over an \nAllJoyn session to fetch the service announcement message \nfrom the provider device.  The following figure captures the high-level architecture \nfor the announcement-based discovery process.   Figure:  Announcement-based service discovery architecture  The Announcement message is sent as a sessionless signal \nfrom the provider app to the AllJoyn router, and gets cached \nin the sessionless signal cache. The sessionless signal module \ngenerates a specially formatted well-known name for the \nsessionless signal as shown below (see details in  Sessionless Signal ):  SLS WKN format: org.alljoyn.sl.x GUID .x change_id   The sessionless signal module interacts with the Name Service \nto send an IS-AT message for that well-known name. The AllJoyn \nrouter on the consumer side is looking to discover this well-known \nname. Upon receiving the IS-AT message, the sessionless signal \nmodule on the consumer side connects back to the sessionless \nsignal module on the provider via an AllJoyn session and fetches \nthe Announcement message which then gets delivered to the consumer app.  Message sequence  The following figure shows the message sequence for the announcement-based discovery.   Figure:  Announcement-based service discovery message sequence  Announcement message  The Announcement message provides a list of object paths for \nobjects implemented by the AllJoyn application and AllJoyn \ninterfaces supported by each of those objects. The AllJoyn \napplication controls which objects get announced in the Announcement message.   The Announcement message also contains additional About fields \ndescribing information about the application and the device. \nSee the About HLD for Announcement message details.  Legacy AllJoyn discovery configuration parameters  AllJoyn discovery configuration parameters  captures \nconfiguration parameter for legacy AllJoyn discovery.  NOTE:  Implementation may use different names for these parameters.  AllJoyn discovery configuration parameters     Parameter  Default value  Range  Description      Adv_Validity_Period  120 seconds  TBD  Validity period used for IS-AT advertisements.    Adv_Infinite_Validity_Value  255  TBD  Time value for indicating that an advertisement is valid forever.    Adv_Msg_Retransmit_Interval  40 seconds  TBD  Interval in seconds for sending out IS-AT messages.    Disc_Msg_Number_Of_Retries  2  TBD  Number of times the WHO-HAS message is sent after the first transmission.    Disc_Msg_Retry_Interval  5 seconds  TBD  Interval in seconds between retries of the WHO-HAS message.     Next-generation name service  The Next-Generation Name Service (NGNS) is implemented in the \n14.06 release and offers considerable performance enhancements \nfor discovery and presence features offered by the AllJoyn platform, \ndetailed in the subsequent relevant sections.   The following figure shows the high-level architecture for NGNS.   Figure:  NGNS high-level architecture  The architecture shows main logical components related \nto NGNS. The enhanced discovery and presence functionality \nare exposed via new APIs as part of the AllJoyn core library. \nThe About functionality is included in the AllJoyn core library, \nand enables an AllJoyn app to send Announcement sessionless signals. \nThe sessionless signal module caches the Announcement signal. \nThe NGNS module uses information in the Announcement signal \nto answer interface-based discovery queries received from consumer apps.  Discovery  The AllJoyn framework offers name-based discovery or announcement-based \ndiscovery as mentioned earlier in this chapter. NGNS supports \nthe following discovery mechanisms:   NGNS supports name-based discovery. Although there is no change \nat the API level, the discovery utilizes DNS service discovery \nframework over mDNS. NGNS sends out legacy (pre-14.06 release) \ndiscovery messages as per the configuration setting in the \nAllJoyn router config file for compatibility.  NGNS supports a more efficient announcement-based discovery \nprocess by allowing a consumer application to query for a set \nof AllJoyn interfaces. Prior to the 14.06 release, the consumer \napplication had to create match rules to receive all Announce \nsignals (transmitted as sessionless signals), and parse through \nthe set of AllJoyn interfaces that the provider application is \nannouncing prior to making a determination if any interfaces of \ninterest are provided. While this mechanism is more powerful \nthan the well-known name-based mechanism, it was not efficient. \nThe NGNS feature allows a consumer application to query for \nthe set of AllJoyn interfaces, and only the provider applications \nthat make use of those interfaces answer the query.   Presence detection  Prior to the 14.06 release, presence (or absence) detection \nwas based on three successive IS-AT messages missing for a \ngiven name (well-known or unique name) by the consumer application. \nThe time taken for this detection was deterministic (3*40 sec = 120 sec).   The use of NGNS in the 14.06 release introduces an efficient \nconsumer application-driven presence detection that makes use \nof unicast messaging. Once a name has been discovered, the \nconsumer application can invoke the new Presence API and determine \nthe presence state. Since each application has its own logic \nregarding times and events triggering presence detection, NGNS \nprovides the API and leaves the triggering logic for the application to drive.  NGNS design aspects  The following sections detail the design aspects of the NGNS feature.  Usage of mDNS  The 14.02 discovery protocol is based on AllJoyn-specific \nUDP messages over the AllJoyn-assigned multicast IP address. \nThis design can limit discoverability (IP routers can block \nAllJoyn-assigned multicast IP address and/or port numbers) \nin the field. To address this issue, the 14.06 discovery \nprotocol is based on multicast DNS (mDNS) that uses IANA-assigned \nmulticast IP address and port numbers.  Multicast IP addresses and port numbers used by NGNS     Address  Value      IPv4 Multicast group address  224.0.0.251    IPv6 Multicast group address  FF02::FB    Multicast port number  5353     Furthermore, mDNS already supports the following features \nthat are utilized by the AllJoyn discovery protocol:   Solicit unicast responses  Send query message using unicast  Send unsolicited responses from the responder   This constitutes version 2 of the discovery protocol. \nThe version number is set in the pv field of the \"sender-info\" \nTXT record in the additional section of the mDNS query and response.  NOTE:  The 14.02 Name Service implementation uses version 0 and 1 \nof the discovery protocol.   Usage of DNS-SD  The 14.06 discovery design is based on  RFC 6763 .   A client discovers the list of available instances of a given \nservice name (as registered with IANA, e.g., alljoyn is a \nregistered service name) using a query for a DNSPTR record \nwith a name of the form:  Service . Domain  [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).   The result of this PTR lookup for the name \" . \" \nis a set of zero or more PTR records giving Service Instance Names of the form:  Service Instance Name =  Instance . Service . Domain   In addition to that service instance, the DNS-SD responder sends \nDNS SRV  RFC 2782  and DNS TXT  RFC 1035  record. \nThe SRV and TXT records have a name of the form:  Instance . Service . Domain   The SRV record gives the target host and port where the service \ninstance can be reached. The DNS TXT record of the same name \ngives additional information about this instance, in a \nstructured form using key/value pairs.  In addition to the service discovery framework specified in  RFC 6763 , \nthe NGNS discovery protocol sends DNS TXT records in the \nAdditional section of the DNS-SD query to optimize the \ndiscovery scope without requiring further negotiation by \nestablishing an AllJoyn session with the provider application. \nThe same feature is utilized in other use cases, such as sending \nsender-information or presence-related information. The DNS-SD \nmessage format is described in detail in  DNS-SD message format .  Design considerations for Wi-Fi  It is well known that the multicast success rate over Wi-Fi \nis not optimal and in some cases it is substantially degraded. \nAs per the Wi-Fi specification, each station is allowed to \ngo into sleep state and wake up periodically. The wake-up \ninterval is provisioned at the device and is supposed to \nbe a factor of the time interval used by the AP to schedule \nthe multicast traffic.   The AP buffers the incoming multicast data and schedules it \nbased on the time interval determined by the DTIM (Delivery Traffic \nIndication Message) interval. In reality, it has been observed \nthat the wake-up interval is set to multiples of the DTIM value \n(typically 1, 3, or 10). This implies that the device might \nmiss the multicast data. Since this is a realistic scenario, \nthe AllJoyn discovery protocol was designed to handle this \nscenario in a robust fashion.   Specifically, the design principles captured in sections below are adopted.  Transmission schedule  The multicast schedule was designed to support devices that \nwake up to process multicast packets in the multiple of DTIM \ninterval. Although the schedule backs off exponentially, \neach multicast message is repeated twice to improve reliability \nof multicast messages with devices that wake up every third \nDTIM interval (a very typical case).   The schedule sends query messages at the following times: \n0, 1, 3, 9, and 27 seconds. At each transmit time trigger, \na total of three messages (original plus two repeats 100 msec apart) \nare sent. This is referred to as burst in the call flows. \nAs far as the message recipient is concerned, a response \nto the first successfully received message in a burst is \nsent and all subsequent messages that are part of the same burst are ignored.   Minimize multicast and maximize unicast transmissions  Another design aspect is to send multicast messages to initiate \nqueries but rely on unicast responses for replies and presence \ndetection. The DNS allows unicast responses to be solicited \nin the mDNS query, and the discovery protocol utilizes that \nfeature. This is indicated in the top bit of the qclass field \nof the DNS message header  RFC 6762 .  Discovery and Presence API snapshot  Discovery and Presence APIs related to discovery scenarios \nlists the Discovery and Presence APIs offered by the AllJoyn \nsystem and maps them to discovery scenarios. The main paradigm \nis that discovery and presence are driven by the consumer application.  Discovery and Presence APIs related to discovery scenarios     Discovery scenario  API      Consumer application Name query  FindAdvertisedName()    Consumer application gets notified about discovery or loss of an advertised name  FoundAdvertisedName() LostAdvertisedName()    Consumer application cancelling the Name query  CancelFindAdvertisedName()    Provider application advertising a name  AdvertiseName()    Providing application canceling advertising a name  CancelAdvertiseName()    Provider application sending an Announcement message  Announce()    Consumer application queries for set of AllJoyn interfaces  RegisterAnnounceHandler()    Consumer application cancels a query for set of AllJoyn interfaces  UnregisterAnnounceHandler()    Consumer application queries for presence  Ping()     Discovery APIs that trigger DNS-SD multicast messages  Some of the discovery scenarios trigger multicast messaging. \nThe APIs that trigger multicast messaging are:  FindAdvertisedName() ,  CancelAdvertiseName() ,  AdvertiseName() ,  Announce() , and  RegisterAnnounceHandler() .  Some key aspects of the multicast transmission are listed below:   DNS-SD query issued over mDNS multicast address   Transmission schedule as per  Transmission schedule  Name Service messages sent depending on the LegacyNS flag \nsetting in the Router config file  Legacy Name Service WHO-HAS and mDNS messages follow the \nsame transmission schedule.   Backward compatibility  NGNS is designed to meet the following backward compatibility requirements:   Support all existing 14.02 APIs  Support all legacy (version 0 and 1) NS discovery packet formats  Send equivalent 14.02 discovery message over the wire \nwhenever the corresponding DNS-SD message is being sent \n(provided the LegacyNS flag is set to true)  Replies with 14.02 response message upon receipt of a \n14.02 query message provided the supported version (SVer) \nfield indicates that querier doesn't support NGNS. If the \nquerier supports NGNS as indicated by the supported version, \nthen NGNS waits for the DNS-SD messages to arrive.   The AllJoyn router configuration file adds a LegacyNS flag \nto enable legacy discovery behavior. By default, the legacy behavior is enabled.  NGNS message sequences  This section captures message sequences for NGNS.  Name-based discovery  This section captures messages sequences for NGNS name-based discovery scenarios.  NGNS consumer app with NGNS provider app  In this scenario, the consumer application's AllJoyn router \nhas disabled the legacy behavior, i.e., no Name Service \nmessages are being sent by the consumer application.   This message sequence assumes that the provider application \nis already on the AllJoyn network.   The main steps for the message sequence are described below.   The message flow is initiated by the consumer application \ninvoking FindAdvertisedName().  NGNS sends DNS-SD based query messages over mDNS.  Any provider application that matches the name being \nsearched responds via the DNS-SD response message over \nunicast to the consumer application.    Figure:  NGNS name-based discovery between consumer app and provider  NGNS consumer app with NGNS and Name Service provider apps  This message sequence assumes the following:   The consumer application's AllJoyn router has enabled the \nlegacy Name Service behavior.  The provider applications are already on the AllJoyn network.    The main steps for the message sequence are described below.   The message flow is initiated by the consumer application \ninvoking  FindAdvertisedName() .  The NGNS sends DNS-SD based query messages over mDNS as \nwell as the legacy WHO-HAS message.  Any AllJoyn provider application that matches the name \nbeing searched responds via a DNS-SD response message over unicast  Any legacy (14.02) provider application also responds \nvia an IS-AT message if there is a match for the name being \ndiscovered in the WHO-HAS message.    Figure:  NGNS name-based discovery (NGNS and Name Service provider apps)  FindAdvertisedName pending; provider apps arrive later  This message sequence assumes the following:   The consumer application's AllJoyn router has enabled the \nlegacy Name Service behavior.   The provider applications are not on the AllJoyn network \nat the time of initial query.    The main steps for the message sequence are described below.   The message flow is initiated by the consumer application \ninvoking  FindAdvertisedName() .  The NGNS sends DNS-SD based query messages over mDNS, as \nwell as legacy Name Service messages.  The query schedule for mDNS messages and WHO-HAS messages expires  Upon joining the AllJoyn network, the NGNS provider app \nsends unsolicited DNS-SD response messages and advertises names via IS-AT messages.  Upon joining the AllJoyn network, the Name Service provider \napplication sends IS-AT messages.  The consumer AllJoyn router performs the following tasks:  It consumes the Name Service and NGNS messages.  It filters the names being advertised.  It sends  FoundAdvertisedName()  only if there is a match.    Figure:  FindAdvertisedName API called; provider arrives later  Interface names discovery  NGNS consumer app and NGNS provider app  This message sequence assumes the following:   The provider application is already on the AllJoyn network.   The legacy Name Service behavior is turned off on the consumer AllJoyn router.    The main steps for the message sequence are described below.   The message flow is initiated by the consumer application \nregistering the announce handler (by calling RegisterAnnounceHandler) \nand providing a set of AllJoyn interfaces. This triggers the \ndiscovery for provider applications that implement those interfaces.   The NGNS sends DNS-SD based query messages over mDNS and \npopulates the search TXT record in the Additional section \nbased on the AllJoyn interfaces being discovered.  Any AllJoyn provider application that provides the \nAllJoyn interfaces being discovered sends the DNS-SD \nresponse message and includes the sessionless signal \nwell-known name corresponding to the About Announce signal. \n   Note that this message is sent over unicast  The consumer application immediately initiates a \nsessionless signal fetch to retrieve the Announce signal.    Figure:  AllJoyn interface query (NGNS consumer app and NGNS provider app)  NGNS consumer app; NGNS and Name Service provider app  This message sequence is an extension of the call flow in  NGNS consumer app and NGNS provider app  \nwith the legacy Name Service behavior being enabled.   Although the interface-based query is a 14.06 feature, it \nhas been designed such that legacy Name Service provider \napplications can participate in the discovery process. \nThis is enabled by sending WHO-HAS message with WKN=org.alljoyn.sl.   This message sequence assumes that the provider application \nis already on the AllJoyn network.   The main steps for the message sequence are described below:\n1. The message flow is initiated by the consumer application \nregistering the announce handler (by calling RegisterAnnounceHandler) \nand providing a set of AllJoyn interfaces for discovery.\n2. The NGNS sends DNS-SD based query messages over mDNS, \nand populates the search TXT record in the Additional section \nbased on the AllJoyn interfaces being discovered.\n3. The NGNS sends WHO-HAS discovery messages with WKN=org.alljoyn.sl.\n4. Any NGNS provider application that provides the AllJoyn \ninterfaces being discovered sends the DNS-SD response message \nand includes the sessionless signal well-known name corresponding \nto the About Announce signal. \n   Note that this message is sent over unicast.\n5. The consumer application immediately initiates a sessionless \nsignal fetch to retrieve the Announce signal.\n6. Any legacy provider application sends an IS-AT message with \nthe sessionless signal well-known name if there are any \nsessionless signals in the sessionless signal cache.\n7. The consumer application immediately initiates sessionless \nsignal fetch and filters the Announce signals that provide the \nAllJoyn interfaces being discovered.   Figure:  Interface query (NGNS consumer app; NGNS and Name Service provider apps)  Pending AllJoyn interface names query; provider apps arrive later  This message sequence describes the scenario when there is \na pending query (i.e., the transmission schedule has expired) \nbut the Announce signal handler is still registered.   The main steps for the message sequence are described below:\n1. The message sequence is initiated by the consumer application \nregistering the announce handler (by calling RegisterAnnounceHandler) \nand providing a set of AllJoyn interfaces for discovery.\n2. The NGNS sends DNS-SD based query messages over mDNS, and \npopulates the search TXT record in the Additional section based \non the AllJoyn interfaces being discovered.\n3. The NGNS sends WHO-HAS discovery messages with WKN=org.alljoyn.sl.\n4. The query schedule for mDNS messages and WHO-HAS message expires\n5. Upon arrival of the provider application on the AllJoyn \nnetwork, the NGNS sends unsolicited DNS-SD response messages \nwith the sessionless signal well-known names and also advertises \nthe sessionless signal well-known names via IS-AT messages.\n6. Upon joining the AllJoyn network, the Name Service provider \napplication advertises the sessionless signal well-known name via IS-AT messages.\n7. The consumer AllJoyn router fetches the sessionless signals \nfrom the provider apps and performs filtering; the Announce \nsignal is sent to the consumer application if there is a match.   Figure:  Pending AllJoyn interface query (NGNS consumer app, NGNS and Name Service provider apps)  Cancel advertisement  NGNS provider app, NGNS and Name Service consumer apps  The main steps for the message sequence are described below.   The provider application calls CancelAdvertiseName().  The NGNS sends both IS-AT and DNS-SD response message. \nNote that advertise TXT record in the mDNS message has TTL set to 0.  The consumer application receives LostAdvertisedName() \nupon receipt of the cancel advertisement discovery message.    Figure:  Cancel advertised name (NGNS consumer app, NGNS and Name Service provider apps)  Presence  NGNS consumer app and NGNS provider app  Two modes of the Presence API is supported:  synchronous and asynchronous mode. \nFrom the perspective of wire protocol, the message sequence is identical.  In the 14.02 release, presence is validated by the receipt \nof the IS-AT messages for a name; and three successive losses \nof IS-AT messages trigger a LostAdvertisedName() to the consumer \napplication. Since the delay was not tolerable for most \napplications, the presence was redesigned in the 14.06 \nrelease. A consumer application can initiate the presence \nof a name that was previously discovered using the newly \nintroduced Ping API.    If the discovered name is connected to a 14.06 AllJoyn router, \nthe presence message sequence is initiated.   If the discovered name is connected to a 14.02 AllJoyn router, \nthe API invocation returns an error.   The main steps for the message sequence are described below.\n1. The consumer application initiates a presence check for \nthe name by invoking the Ping API.\n2. The AllJoyn router returns the unimplemented error code \nif the name being pinged is connected to a 14.02 AllJoyn \nrouter at the time of discovery; else, the message sequence continues.\n3. If there is an entry for the name in the AllJoyn routing \ntable, then mDNS message is sent over unicast to check the presence state.\n4. Upon receipt of the mDNS message, the AllJoyn router checks \nthe presence state for the name and sends an mDNS response \nmessage over unicast. The presence check is performed using D-Bus Ping method call.   Figure:  Ping API called by consumer application over NGNS (NGNS consumer app and NGNS provider app)  Legacy presence with NGNS consumer app and Name Service provider app  If a name that was discovered is connected to a 14.02 \nAllJoyn router, the new Ping API message sequence is not \nsupported. If the Ping API returns not implemented error code, \nthe consumer application must issue  FindAdvertisedName()  \nwith the discovered name so that presence for that name can be initiated.   Figure:  Reverting to legacy presence (NGNS consumer app and Name Service provider app)  DNS-SD message format  See  Usage of DNS-SD   for information on how the \nAllJoyn framework makes use of the DNS-SD protocol. \nThe AllJoyn discovery process is based on the DNS-SD and the \nmessage format is captured below.   NOTE:    in the resource records refers to the AllJoyn \nrouter'\\'s GUID. In addition, the presence of specific records \nin a given message is specified in the NGNS message sequences \ncapture above while the tables below show all the possible \nrecords types that can be present in the query or response messages:  DNS-SD query  DNS-SD query: question format     Name  Type  Record-specific data      alljoyn._udp.local. alljoyn._tcp.local.  PTR  The service name is alljoyn as allocated through IANA. In the 14.06 release, the protocol used in the service description is TCP. When UDP transport is supported in future, the protocol for service name will be UDP. The discovery scope is the local network.     DNS-SD query: Additional section     Name  Type  Record-specific data      search. .local.  TXT  Captures the well-known names or interfaces that are being searched. The key notation is as follows: txtvrs=0; this represents version of the TXT record. n_1, n_2, etc., if multiple well-known names are present, they are logically ANDed; n_# is the key for well-known names. i_1, i_2, etc., if multiple interface names are being queried. If multiple interface names are present, they are logically ANDed; i_# is the key for interface names. Since the APIs for name-based and interface-based query are different, the search record has either name keys or interface keys. If the consumer application intends to perform logical OR operation for interface names, it must call the discovery API with interface name multiple times. Example:  i_1 = org.alljoyn.About    sender-info. .local.  TXT  Captures additional data regarding the sender of the message. The following keys are sent: txtvrs=0; represents the version of the TXT record. pv (protocol version):  represents the discovery protocol version. IPv4 and UDPv4 address: represents the IPv4 address and UDP port. bid (burst identifier): represents the burst identifier.    ping. .local.  TXT  Captures the names that are being pinged by the consumer application. The key notation is as follows: txtvrs=0; represents version of the TXT record. n= the well-known name or the unique name. Only one key can be present in the ping record.     DNS-SD response  DNS-SD response message: Answer section     Name  Type  Record-specific data      _alljoyn._tcp.local.  PTR  ._alljoyn._tcp.local.    ._alljoyn._tcp.local.  TXT  txtvrs=0 Except for text record version, there is no additional record.    ._alljoyn._tcp.local.  SRV  port,  .local port represents TCP port number used for the router-router connection.     DNS-SD response message: Additional section     Name  Type  Record-specific data      advertise. .local.  TXT  Captures the well-known names that the provider application is advertising.The key notation is as follows: n_1, n_2, etc., if multiple well-known names are being advertised; n_# is the key for well-known names. For interface query response, the sessionless signal well-known name that is advertised is as follows: n_1=org.alljoyn.About.sl.y .x    sender-info. .local.  TXT  Captures additional data regarding the sender of the message. The following keys are sent: txtvrs=0; represents version of the TXT record. pv (protocol version):  represents the discovery protocol version. IPv4 and UDPv4 address: represents the IPv4 address and UDP port. bid (burst identifier): represents the burst identifier.    Ping-reply. .local.  TXT  Captures the names that are being pinged by the consumer application. The key notation is as follows: txtvrs=0; represents version of the TXT record. n= well-known name or unique name. replycode = reply code as returned by the router.    .local  A  This resource record sends IPv4 address. It is present in response messages for discovery.     NGNS configuration parameters     Parameter  Default value  Range  Description      EnableLegacyNS  true  boolean  Specifies the backward compatibility behavior with respect to legacy Name Service.     Discovery usage guidelines  Although the AllJoyn system supports both the name-based and \nannouncement-based discovery, the preferred and recommended \nmethod for discovering services in an AllJoyn IoE network \nis the announcement-based discovery.  The name-based service discovery process can be used for \napp-to-app based discovery, where both provider and consumer \napplications are aware of the well-known name. This discovery \nprocess is also used for sessionless signals and to discover \nthe AllJoyn router for the thin app.  AllJoyn discovery method usage guidelines  \nsummarizes usage guidelines for the two AllJoyn discovery methods.  AllJoyn discovery method usage guidelines     Name-based discovery usage  Announcement-based discovery usage      App-to-app discovery Sessionless signals AllJoyn router discovery for thin apps  AllJoyn service interfaces discovery on the AllJoyn network.",
            "title": "IS-AT"
        },
        {
            "location": "/learn/core/system-description/alljoyn-security/",
            "text": "AllJoyn\n Security\n\n\nOverview\n\n\nThe AllJoyn system provides a security framework for applications\nto authenticate each other and send encrypted data between them.\nThe AllJoyn framework provides end-to-end application level security.\nAuthentication and data encryption are done at the application.\nThese applications can reside on the same device or on different\ndevices, and can be attached to the same AllJoyn router or\ndifferent AllJoyn routers.\n\n\nNOTE:\n No authentication is done at the AllJoyn router layer.\n\n\nThe AllJoyn framework supports security at the interface level.\nAn application can tag an interface as 'secure' to enable\nauthentication and encryption. All of the methods, signals,\nand properties of a secure interface are considered secure.\nAuthentication- and encryption-related key exchange are\ninitiated on demand when a consumer application invokes a\nmethod call on a secure interface, or explicitly invokes an\nAPI to secure the connection with a remote peer application.\n\n\nThe following figure shows the high-level AllJoyn security architecture.\n\n\n\n\nFigure:\n AllJoyn security architecture\n\n\nAuthentication and encryption is done at the application layer.\nThe AllJoyn core library implements all of the logic for authentication\nand encryption except the Auth Listener. The Auth Listener is a callback\nfunction implemented by the application to provide auth credentials\n(e.g., PIN or password) or verify auth credentials (e.g., verify\ncertificate chain in case of ALLJOYN_ECDHE_ECDSA). Authentication\nand encryption keys are stored in a key store managed by\nthe Security module.\n\n\nNOTE:\n The AllJoyn router is only involved in transmitting\nsecurity-related messages between application endpoints.\nIt does not implement any security logic itself.\n\n\nThe AllJoyn framework uses the Simple Authentication and\nSecurity Layer (SASL) security framework for authentication.\nIt makes use of D-Bus defined SASL protocol\n\nD-Bus Specification\n\nfor exchanging authentication related data.\n\n\nThe AllJoyn framework supports the following auth mechanisms\nfor app-to-app level authentication:\n\n\n\n\nALLJOYN_SRP_KEYX - Secure Remote Password (SRP) key exchange\n\n\nALLJOYN_SRP_LOGON - Secure Remote Password (SRP) logon with username and password\n\n\nALLJOYN_ECDHE_NULL - Elliptic Curve Diffie-Hellman (ephemeral) key exchange\n  with no authentication\n\n\nALLJOYN_ECDHE_PSK -  Elliptic Curve Diffie-Hellman (ephemeral) key exchange\n  authenticated with a pre-shared key (PSK)\n\n\nALLJOYN_ECDHE_ECDSA - Elliptic Curve Diffie-Hellman (ephemeral) key exchange\n  authenticated with an X.509 ECDSA certificate\n\n\n\n\nThe AllJoyn framework also supports ANONYMOUS and EXTERNAL\nauth mechanisms as defined by the D-Bus specification.\n\n\n\n\nThe ANONYMOUS auth mechanism is used between two AllJoyn\nrouters for null authentication. It is also used for authentication\nbetween a thin app and an AllJoyn router.\n\n\nThe EXTERNAL auth mechanism is used between an application\nand the installed AllJoyn router (standalone AllJoyn router)\non the Linux platform.\n\n\n\n\nSecurity changes in the 14.06 release\n\n\nIn the 14.06 release, the ALLJOYN_PIN_KEYX auth mechanism\nis removed from the AllJoyn thin core library. This auth\nmechanism continues to be supported by the AllJoyn standard\ncore library.\n\n\nThe following new Elliptic Curve Diffie-Hellman Ephemeral\n(ECDHE) based auth mechanism are added:\n\n\n\n\nECDHE_NULL is key agreement without authentication\n\n\nECDHE_PSK is a key agreement authenticated with a pre-shared\nsymmetric key.\n\n\nECDHE_ECDSA is a key agreement authenticated with an asymmetric\nkey validated with an ECDSA signature.\n\n\n\n\nThese new auth mechanisms can be used by both thin apps and\nstandard apps. Thin apps in the 14.06 release support only\nECDHE-based auth mechanisms.\n\n\nUse of SASL protocol for authentication is removed from the\nAllJoyn thin core library in the 14.06 release, and will\ncontinue to be supported in AllJoyn standard core library.\n\n\nFor more information about these changes, see the latest version\nof the \nSecurity HLD\n.\n\n\nSecurity changes in the 15.04 release\n\n\nIn the 15.04 release, the ALLJOYN_PIN_KEYX and ALLJOYN_RSA_KEYX authentication\nmechanisms have been removed from the standard client.  Support for ECDSA X.509\nwas added.\n\n\nSecurity concepts\n\n\nThis section defines the AllJoyn security-related concepts.\n\n\nAuthentication (Auth) GUID\n\n\nThe Authentication GUID is a GUID assigned to an application\nfor authentication purposes. This GUID is persisted in the\nkey store and provides a long-term identity for the application.\nTypically, this GUID is associated with a single application.\nIn the scenario where a group of related applications share\na given key store, they also share the same auth GUID.\n\n\nThis GUID is used as a mapping key for storing and accessing\nauthentication and encryption keys for the associated application.\n\n\nMaster secret\n\n\nThe master secret is a key shared between authenticated peer\napplications. Two peer applications generate the same master\nsecret independently, and store it persistently in the key store.\n\n\nThe master secret is stored per Auth GUID for peer applications,\nand has an associated TTL settable by the application.\nAs long as the master secret is valid, peer applications\ndo not have to reauthenticate with each other to exchange encrypted data.\n\n\nThe master secret is 48 bytes in length as per \nRFC 5246\n.\n\n\nSession key\n\n\nA cryptographic key used to encrypt point-to-point data\ntraffic between two peer applications. A separate session key\nis maintained for every connected peer application. A session\nkey is valid as long as peers are connected (over any AllJoyn session).\nIt is a session in the cryptographic sense and not related to\nan AllJoyn session. The same session key is used across all\nAllJoyn sessions between two peers.\n\n\nSession keys are stored in the memory, they are not persisted.\nThe session key is generated after a peer application has been\nauthenticated, and it expires for a peer application when\nthe connection is terminated with that peer. The session key\nis derived from the master secret, and is used to encrypt\nmethod calls, method replies, and unicast signals.\n\n\nThe session key is 128 bits long.\n\n\nNOTE:\n The current implementation has a default TTL of 2 days\nfor session keys. If applications remain connected that long,\nthe associated session key expires and a new session key would\nneed to be generated.\n\n\nGroup key\n\n\nThe group key is a cryptographic key used to encrypt\npoint-to-multipoint data traffic (broadcast signals) sent\nout by a provider application. A single group key is maintained\nby an application to encrypt broadcast signals sent to every\nconnected peer application.\n\n\nA group key is generated when an application generates the\nvery first session key for any connected peer. The group key\nis always generated independent of the provider or consumer\nrole of an application. Only provider applications use the\ngroup key to send out encrypted broadcast signals. Applications\nexchange their group keys using an encrypted method call that\ninvolves the session key.  \n\n\nThe group key is 128 bits long and randomly generated.\nThe group key is directional in nature. Each application has\nits own group key to encrypt broadcast signals. In addition,\nit also maintain a separate peer group key for each of the\nconnected peer for decrypting broadcast signals received from them.\n\n\nGroup keys are stored in the memory, they are not persisted.\nThe group expires when the connection ends with peer\napplications. An application's own group key will expire when\nit no longer has any connections with any of its peers.\nThe group key for a remote peer will expire when the application\nno longer has a connection with that peer.\n\n\nNOTE:\n In future releases, group keys may be persisted to\nsupport encryption for sessionless signals.\n\n\nKey store\n\n\nThe key store is a local storage used to persistently store\nauthentication-related keys, and to store master secret and\nassociated TTL. Applications can provide their own implementation\nof the key store or use the default key store provided by the AllJoyn system.\n\n\nMultiple applications on a device can share a given key store.\nIn this case, those applications share the same set of\nauthentication keys. In the current implementation, content\ninside the key store is encrypted with a key derived from the key store path.\n\n\nFor every authenticated application, the key store maintains\nthe master secret and the associated TTL per Auth GUID of that\napplication. It also maintains the auth GUID assigned to the\nlocal applications that are using the key store.\n\n\nThe following table shows an example key store with master\nsecret stored for two peer applications.\n\n\nKey store example with master secret stored for two peer applications\n\n\nLocal Auth GUID - GUIDx\n\n\n\n\n\n\n\n\nPeer Auth GUID\n\n\nMaster secret\n\n\nTTL\n\n\n\n\n\n\n\n\n\n\nGUID1\n\n\nMS1\n\n\nT1\n\n\n\n\n\n\nGUID2\n\n\nMS2\n\n\nT2\n\n\n\n\n\n\n\n\nEnd-to-end security flow\n\n\nThe following figure captures the high-level end-to-end\nmessage flow for AllJoyn security for the use case when\ntwo applications have not authenticated with each other\nbefore. The security message flow is initiated based on one\nof the following triggers:\n\n\n\n\nConsumer app invoking a secure method call on a remote\nservice object or\n\n\nConsumer app explicitly invoking an API to secure the\nconnection with the remote peer\n\n\n\n\n\n\nFigure:\n End-to-end security flow (two applications have not authenticated with each other before)\n\n\nIt is ideal for an application to always explicitly secure\nthe connection with the remote peer. In the case when an\napplication is just interested in receiving secure signals,\nthat is the only way to secure the connection with the\nremote peer in order to receive keys for decrypting signals.\n\n\nThe AllJoyn core library attached with the application\nimplements all of the AllJoyn security logic. The AllJoyn\nrouter only acts as a pass-through for security-related messages.\nEach application needs to invoke EnablePeerSecurity API call\nwith the AllJoyn core library to enable AllJoyn security.\nThe application specifies authentication mechanism to be used,\nthe Auth Listener for callback and the key store file as part\nof this API call. It also indicates whether key store can\nbe shared. The AllJoyn core library generates the auth GUID\nfor the application as part of first-time initialization of\nthe key store. The auth GUID gets stored in the key store.\n\n\nAfter establishing a session with the provider app, the consumer\napp initiates one of the security triggers mentioned above.\nThe AllJoyn Core library checks to see if authentication\nis already in progress.\n\n\n\n\nIf yes, it stops.\n\n\nIf no, it continues with the security flow.\n\n\n\n\nIt looks for the key material for remote peer. In this case,\nsince this is the first secure interaction with the remote\napp, no key material is found. This will trigger security\nflow with the remote peer.\n\n\nThe message flow consists of following four distinct\nsteps in that order:\n\n\n\n\nExchange Auth GUIDs: This step involves exchanging Auth\nGUIDs between peer applications. Once learned, the remote\napp auth GUID is used to see if the master secret is present\nfor that auth GUID in the key store. In this case, no master\nsecret is found since the two apps have not authenticated\nwith each other.\n\n\nApp-to-App authentication: This step involves two peers\nauthenticating each other using one of the supported auth\nmechanisms. At the end of this step, two peers have authenticated\neach other and now share a common master key.\n\n\nGenerate a session key: This step involves two peers\ngenerating a session key to be used for encrypting secure\npoint-to-point messages between them. The session key is\ngenerated independently by both the peers based on the\nshared master key. A group key is also generated when the\nfirst session key is generated.\n\n\nExchange group keys: This step involves two peers exchanging\ntheir own group keys with each other via an encrypted\nAllJoyn message. The AllJoyn message gets encrypted using\nthe session key already established between two peers.\nThe group key is used by the application to encrypt session\nmulticast and broadcast signals. At the end of this step,\ntwo peer applications have group keys to decrypt secure\nbroadcast signals received from each other.\n\n\n\n\nDetails for each of these steps are described in the\nfollowing sections. After completing these steps, peer\napplications have now established encryption/decryption\nkeys to exchange encrypted method calls and signals.\n\n\nThese keys are managed as part of a peer state table\nwhich includes a unique name for the remote peer, as well\nas a local auth GUID and group key for the current application.\n\n\nThe following table provides a sample peer state table with\nkeys stored for two authenticated peer applications.\n\n\nSample peer state table for two authenticated peer applications.\n\n\nLocal Auth GUID - GUIDx\n\n\nApp Group Key - GKx\n\n\n\n\n\n\n\n\nPeer Auth GUID\n\n\nUnique name\n\n\nSession key\n\n\nPeer group key\n\n\n\n\n\n\n\n\n\n\nGUID1\n\n\n:100.2\n\n\nSK1\n\n\nGK1\n\n\n\n\n\n\nGUID2\n\n\n:200.2\n\n\nSK2\n\n\nGK2\n\n\n\n\n\n\n\n\nAlready authenticated apps\n\n\nWhen apps connect with each other subsequent to their first\nconnection, they do not need to authenticate again with each\nother if the master secret is still valid. The following figure\nshows security flow for this use case.\n\n\n\n\nFigure:\n Authenticated apps connecting again\n\n\nIn this case, since the apps were not connected, no key material\nis found for the remote peer. As a result, the consumer app\nperforms the Exchange Auth GUIDs step with the remote peer.\nThis retrieves the Auth GUID for the remote peer that can\nbe used for lookup in the key store file.\n\n\nSince the apps have already authenticated, a master secret\nis found in the key store for the auth GUID of the provider\napp and no app-to-app authentication needs to occur.\nThe consumer app directly goes to the next step of generating\nsession key and/or group key.\n\n\nNOTE:\n If the verification step fails during session key\ngeneration, the consumer app must re-authenticate with\nthe provider even if master secret is still valid.\n\n\nExchange of Auth GUIDs\n\n\nThe following figure shows the message flow for the exchange\nof Auth GUIDs between peer applications.\n\n\n\n\nFigure:\n Exchange of Auth GUIDs\n\n\nThe message flow steps are described below.\n\n\n\n\nThe consumer app generates an ExchangeGuids METHOD_CALL\nmessage and sends it to the provider app via the AllJoyn router.\nThis message includes the Auth GUID of the consumer app and\nthe maximum Auth version supported by the consumer app.\n\n\nThe provider app proposes its max auth version if it\ndoes not support the auth version received from the consumer app.\n\n\nThe provider app generates an ExchangeGuids METHOD_RETURN\nmessage and sends it to the consumer app via the AllJoyn router.\nThis message includes the Auth GUID of the provider app and\nthe max auth version of the provider app.\n\n\nThe consumer app verifies that it supports the received\nauth version. This completes the Exchange GUIDs step.\n\n\n\n\nApp-to-app authentication\n\n\nAllJoyn peer applications authenticate each other using\none of the auth mechanisms detailed in this section.\nThese auth mechanisms are designed based on the security\nconstructs in \nRFC 5246\n and\n\nRFC 5054\n. Applicable RFC\nsections are listed when describing details for these auth mechanisms.\n\n\nNOTE:\n For the authentication message flows captured in this section,\nthe consumer and provider apps are also referred to as client\nand server respectively, to correspond with terminology used\nin \nRFC 5246\n and\n\nRFC 5054\n.\n\n\nUse of D-Bus SASL protocol\n\n\nThe AllJoyn framework implements the D-Bus SASL exchange protocol\n\nD-Bus Specification\n to exchange\nauthentication-related data. All authentication-related\nexchanges are done using the AuthChallenge method call/reply\ndefined as part of the org.alljoyn.Bus.Peer.Authentication\ninterface implemented by the AllJoyn core library.\n\n\nAuth data to be exchanged is generated as a SASL string\nbased on the D-Bus SASL exchange protocol. Auth data inside\nthe SASL string is sent in the hex form. The generated string\nis then passed as a parameter to the AuthChallenge method call\nor method reply.\n\n\nFor example, to initiate authentication for ALLJOYN_SRP_KEYX,\ngenerated string would be:\n\n\nAUTH ALLJOYN_SRP_KEYX \nc_rand in hex\n\n\n\n\n\nThis includes the SASL AUTH command, auth mechanism, and auth data in hex form.\n\n\nThe following table captures the D-Bus SASL commands supported\nby the AllJoyn framework.\n\n\nD-Bus SASL commands supported by the AllJoyn framework\n\n\n\n\n\n\n\n\nCommand\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAUTH [mechanism] [initial-response]\n\n\nConsumer-\nProvider\n\n\nStart the authentication.\n\n\n\n\n\n\nCANCEL\n\n\nConsumer-\nProvider\n\n\nCancel the authentication.\n\n\n\n\n\n\nBEGIN\n\n\nConsumer-\nProvider\nProvider-\nConsumer\n\n\nOn the consumer side, acknowledge that the consumer has received an OK command from the provider, and that the stream of messages is about to begin.\nFrom the provider side, sent by the provider as response to BEGIN command from the consumer.\n\n\n\n\n\n\nDATA\n\n\nConsumer-\nProvider\nProvider-\nConsumer\n\n\nOn the consumer or provider side, contains a hex-encoded block of data to be interpreted according to the auth mechanism in use.\n\n\n\n\n\n\nOK\n\n\nConsumer-\nProvider\n\n\nThe client has been authenticated.\n\n\n\n\n\n\nREJECTED\n\n\nConsumer-\nProvider\n\n\nOn the consumer side, indicates that the current authentication exchange has failed, and further exchange of DATA is inappropriate. The consumer tries another mechanism, or tries providing different responses to challenges.\n\n\n\n\n\n\nERROR\n\n\nConsumer-\nProvider\nProvider-\nConsumer\n\n\nOn the consumer or provider side, either the provider or consumer did not know a command, does not accept the given command in the current context, or did not understand the arguments to the command.\n\n\n\n\n\n\n\n\nALLJOYN_SRP_KEYX\n\n\nThe following figure shows the message flow for the ALLJOYN_SRP_KEYX\nauth mechanism. This auth mechanism is primarily designed for use\ncases where a one-time use password is generated by both sides.\n\n\n\n\nFigure:\n ALLJOYN_SRP_KEYX auth mechanism\n\n\nThe message flow steps are described below.\n\n\n\n\nThe consumer app generates a 28 bytes client random string c_rand.\n\n\nThe consumer (client) app generates an AuthChallenge METHOD_CALL\nmessage and passes \"AUTH ALLJOYN_SRP_KEYX \nc_rand\n\" as parameter\nin that message. The consumer app sends the method call to the\nprovider (server) app via the AllJoyn router.\n\n\nThe provider app invokes the AuthListener callback registered\nby the application to request for a password. The AuthListener\nreturns the password. A username of \"anonymous\" is used in this case.\n\n\nThe provider app computes the server's public value B as\nper the algorithm in section 2.5.3 of \nRFC 5054\n.\n\n\nThe provider app generates an AuthChallenge METHOD_RETURN\nmessage to send a server key exchange message to the client.\nThe provider app passes \"DATA \nN:g:s:B\n\" as parameter to that\nmessage. Refer to section 2.5.3 of \nRFC 5054\n.\nThe 's' is a 40 bytes random salt value. The provider app\nsends method reply to the consumer app via the AllJoyn router.\n\n\nThe consumer app validates the values of N, g, s and B per\nsection 2.5.3 of \nRFC 5054\n.\n\n\nThe consumer app computes the client's public value A per\nsection 2.5.4 of \nRFC 5054\n.\n\n\nThe consumer (client) app generates an AuthChallenge METHOD_CALL\nmessage and passes \"DATA \nA\n\" as parameter in that message.\nThe consumer app sends the method call to the provider (server)\napp via the AllJoyn router.\n\n\nThe provider app generates a 28 bytes server random string s_rand.\n\n\nThe provider app computes a premaster secret using the\nalgorithm in section 2.6 of \nRFC 5054\n.\nThe premaster secret is based on the client's public value (A),\nthe server's public value (B), and password among other parameters.\n\n\nThe provider app computes a master secret based on\nthe premaster secret, c_rand, and s_rand as per the algorithm\nin section 8.1 of \nRFC 5246\n.\n\n\nThe provider app computes a \"server finish\" s_verifier as\nper the algorithm in section 7.4.9 of \nRFC 5246\n.\n\nThe s_verifier is generated based on master secret, hash of\nhandshake messages, and \"server finish\" label.\n\n\nThe provider app generates an AuthChallenge METHOD_RETURN\nmessage and passes \"DATA \ns_rand:s_verfier\n\" as parameter\nto that message. The provider app sends the method reply\nto the consumer app via the AllJoyn router.\n\n\nThe consumer app invokes the AuthListener callback\nregistered by the application to request for a password.\nThe AuthListener returns the password. A username of \"anonymous\"\nis used in this case.\n\n\nThe consumer app computes a premaster secret using the\nalgorithm in section 2.6 of \nRFC 5054\n.\nThe premaster secret is based on the client's public value (A),\nthe server's public value (B), and the password among other parameters.\n\n\nThe consumer app computes a master secret based on the\npremaster secret, c_rand, and s_rand as per the algorithm\nin section 8.1 of \nRFC 5246\n.\n\n\nThe consumer app generates the \"server finish\" verifier\nusing the same algorithm as the provider app and verifies\nthat the computed value is same as the received s_verifier.\n\n\nThe consumer app computes a \"client finish\" c_verifier\nas per the algorithm in section 7.4.9 of \nRFC 5246\n.\nThe c_verifier is generated based on the master secret,\nhash of handshake messages, and \"client finish\" label.\n\n\nThe consumer app generates an AuthChallenge METHOD_CALL\nmessage to send the c_verifier to the server. The consumer app\npasses \"DATA \nc_verifier\n\" as parameter to the method call.\nThe consumer app sends the method call to the provider (server)\napp via the AllJoyn router.\n\n\nThe provider app generates the \"client finish\" verifier\nusing the same algorithm as the consumer app and verifies\nthat the computed value is same as the received c_verifier.\n   At this point, the client and server have authenticated with each other.\n\n\nThe provider app generates an AuthChallenge METHOD_RETURN\nmessage indicating that authentication is complete. The provider\napp passes \"OK \ns_GUID\n\" as parameter in that message, where s_GUID\nis the auth GUID of the provider app. The provider app sends\nthe method reply to the consumer app via the AllJoyn router.\n\n\nThe consumer app sends an AuthChallenge METHOD_CALL to t\nhe provider app specifying \"BEGIN \nc_GUID\n\" as parameter.\nThis indicates to the provider that the client has received\nthe OK message, and the stream of data messages is about to begin.\nThe c_GUID is auth GUID of the consumer app.\n\n\nThe provider app sends an AuthChallenge METHOD_RETURN\nmessage, specifying \"BEGIN\" as parameter.\n\n\n\n\nALLJOYN_SRP_LOGON\n\n\nThe following figure shows the message flow for the ALLJOYN_SRP_LOGON\nauth mechanism. This auth mechanism is designed for client-server use\ncases where server maintains username and password, and the client\nuses this information for authentication. This mechanism is quite\nsimilar to the AllJoyn_SRP_KEYX auth mechanism with the following differences:\n\n\n\n\nThe consumer app invokes the AuthListener callback up front\nto request the username and password from the application.\nThe consumer app then passes the username in the first AuthChallenge\nmessage sent to the provider app.\n\n\nThe provider app uses the received username to request for\npassword from the AuthListener.\n\n\n\n\n\n\nFigure:\n ALLJOYN_SRP_LOGON auth mechanism\n\n\nECDHE key exchanges\n\n\nIn the 14.06 release, new Elliptic Curve Diffie-Hellman Ephemeral\n(ECDHE) based auth mechanism were added. For details on ECDHE-based\nauth mechanisms, see the latest version of the \nSecurity HLD\n.\n\n\nGeneration of the session key\n\n\nThe follwing figure shows the message flow for the generation\nof session keys between peer applications.\n\n\n\n\nFigure:\n Session key generation between peer applications\n\n\nThe message flow steps are described below.\n1. The consumer app generates a 28 bytes client nonce string c_nonce.\n2. The consumer app generates a GenSessionKey METHOD_CALL\nmessage and sends it to the provider app via the AllJoyn router.\nThis message includes local auth GUID corresponding to the\nconsumer app, a remote auth GUID corresponding to the provider app, and c_nonce.\n3. The provider app generates a 28 bytes server nonce string s_nonce.\n4. The provider app generates a session key and a verifier\nbased on the master secret, c_nonce, and s_nonce using the\nalgorithm described in section 6.3 of \nRFC 5246\n.\nThe \"session key\" label is used to generate the key.\n5. The provider app stores the session key in the peer state\ntable for the auth GUID associated with the consumer app.\n6. The provider app generates a 128 bit group key if no group\nkey exists for the provider app, and stores in the peer state table.\n7. The provider app generates a GenSessionKey METHOD_RETURN\nmessage and sends it to the consumer app via the AllJoyn router.\nThis message includes s_nonce and verifier.\n8. The consumer app generates a session key and a verifier\nbased on the master secret, c_nonce, and s_nonce using the\nsame algorithm as the provider app as per section 6.3 of \nRFC 5246\n.\nThe \"session key\" label is used for generate the key.\n\n9. The consumer app verifies that the computed verifier is\nthe same as the received verifier.\n10. The consumer app stores the session key in the peer state\ntable for the auth GUID associated with the provider app.\n11. The consumer app generates a 128 bit group key if no group\nkey exists for the consumer app, and stores in the peer state table.\n\n\nThe peer apps now have a common session key that can be used to\nexchange encrypted messages.\n\n\nExchange of group keys\n\n\nThe following figure shows the message flow for the exchange\nof group keys between peer applications. This is achieved via\nthe ExchangeGroupKeys method call which is the first encrypted\nmessage sent between peer applications after the session key is established.\n\n\n\n\nFigure:\n Exchange of group keys\n\n\nThe message flow steps are described below.\n\n\n\n\nThe consumer app generates an ExchangeGroupKeys METHOD_CALL\nmessage. This message includes the group key of the consumer app.\nThe consumer app sets the encryption flag to true for this message.\n\n\nThe consumer app encrypts the message and generates an 8 bytes\nMAC (Message Authentication Code) using the session key for the\nremote peer app. Message encryption is done using AES CCM algorithm.\n\n\nThe consumer app appends the MAC to the encrypted message body\nand updates the message length to reflect the MAC.\n\n\nThe consumer app sends the encrypted ExchangeGroupKeys METHOD_CALL\nmessage to the provider app via the AllJoyn router.\n\n\nThe provider app verifies the MAC and decrypts the message using the\nsession key stored for the consumer app.\n\n\nThe provider app stores the received group key for the remote peer\n(consumer app) in the peer state table.\n\n\nThe provider app generates an ExchangeGroupKeys METHOD_RETURN message. This message includes the group key of the provider app. The provider app sets the encryption flag to true for this message.\n\n\nThe provider app encrypts the message and generates an\n8 bytes MAC using the session key for the remote peer app.\nMessage encryption is done using AES CCM algorithm.\n\n\nThe provider app appends the MAC to the encrypted message\nbody and updates the message length to reflect the MAC.\n\n\nThe provider app sends the encrypted ExchangeGroupKeys\nMETHOD_RETURN message to the provider app via the AllJoyn router.\n\n\nThe consumer app verifies the MAC and decrypts the reply\nmessage using session key stored for the provider app.\n\n\nThe consumer app stores the received group key for the\nremote peer (provider app) in the peer state table.\n\n\n\n\nNow the two apps have group key for each other which can be\nused to decrypt broadcast signal messages received from the peer application.\n\n\nExchange of encrypted messages\n\n\nOnce encryption credentials are established between applications,\nthey can exchange encrypted methods and signals. These use cases\nare captured below.\n\n\nEncrypted method call\n\n\nThe following figure shows the message flow for exchange of\nencrypted method call/reply between the consumer and provider\napplications. The reply message to an encrypted method call\nis also sent encrypted.\n\n\n\n\nFigure:\n Encrypted method call/reply\n\n\nThe message flow steps are described below.\n\n\n\n\nThe consumer app generates a METHOD_CALL message for the\nsecure method and sets the encryption flag to true for this message.\n\n\nThe consumer app encrypts the message and generates an\n8 bytes MAC using the session key for the destination app.\nMessage encryption is done using AES CCM algorithm.\n\n\nThe consumer app appends the MAC to the encrypted message\nbody and updates the message length to reflect the MAC.\n\n\nThe consumer app sends the encrypted METHOD_CALL message\nto the provider app via the AllJoyn router.\n\n\nThe provider app verifies the MAC and decrypts the message\nusing session key stored for the consumer app.\n\n\nThe provider app's AllJoyn core library invokes the MethodCall\nhandler, which invokes the method call on the service object\ninterface and receives a reply.\n\n\nThe provider app generates a METHOD_RETURN message for\nthe reply and sets the encryption flag to true for this message.\n\n\nThe provider app encrypts the message and generates an\n8 bytes MAC using the session key for the consumer app.\nMessage encryption is done using AES CCM algorithm.\n\n\nThe provider app appends the MAC to the encrypted message\nbody and updates the message length to reflect the MAC.\n\n\nThe provider app sends the encrypted METHOD_RETURN message\nto the consumer app via the AllJoyn router.\n\n\nThe consumer app verifies the MAC and decrypts the reply\nmessage using session key stored for the provider app.\n\n\nThe consumer app's AllJoyn core library sends the plaintext\nreply message to the application.\n\n\n\n\nEncrypted signal\n\n\nThe following figure shows the message flow for sending an\nencrypted session based signal from provider application\nto consumer applications. The signal can be sent to a destination\n(unicast signal) or to multiple endpoints as multicast/broadcast signals.\n\n\nNOTE:\n Sessionless signals are not sent encrypted in current\nAllJoyn system. In future, implementation can be enhanced to\nencrypt sessionless signals as well.\n\n\n\n\nFigure:\n Encrypted method call/reply\n\n\nThe message flow steps are described below.\n\n\n\n\nThe consumer and provider apps have already authenticated\nand established encryption keys with each other.\n\n\nThe provider app has some signal data to send. It invokes\nthe BusObject Signal() call which generates a SIGNAL message.\n\n\nThe provider app sets the encryption flag to true for the\nSIGNAL message if the signal is defined as part of a secure interface.\n\n\nThe provider app encrypts the SIGNAL message and generates\nan 8 bytes MAC using either the group key or session key as\nper the logic in the following key selection logic (provider app) figure.\nMessage encryption is done using AES CCM algorithm.\n\n\nThe provider app appends the MAC to the encrypted SIGNAL\nmessage body and updates the message length to reflect the MAC.\n\n\nThe provider app sends the encrypted SIGNAL message to\nthe consumer app via the AllJoyn router.\n\n\nThe consumer app verifies the MAC and decrypts the SIGNAL\nmessage using either the session key or group key as per the\nlogic in the following key selection logic (consumer app) figure.\n\n\nThe consumer app's AllJoyn core library sends the plaintext\nsignal message to the application.\n\n\n\n\nKey selection logic\n\n\nOn the provider application side, unicast signals get encrypted\nusing the session key and multicast/broadcast signals get\nencrypted using group key. The following figure shows the key selection\nlogic for encrypting signals.\n\n\n\n\nFigure:\n Key selection for signal encryption (on the provider app)\n\n\nOn the consumer side, a reverse logic is applied for selecting\nkey for decrypting received signals messages as shown in the following figure.\n\n\n\n\nFigure:\n Key selection for signal decryption (on the consumer app)\n\n\norg.alljoyn.Bus.Peer.Authentication interface\n\n\nThe org.alljoyn.Bus.Peer.Authentication interface is the AllJoyn\ninterface between two AllJoyn core libraries that support the\napplication layer security within AllJoyn.\n\n\nThe following table summarizes members from org.alljoyn.Bus.Peer.Authentication interface.\n\n\norg.alljoyn.Bus.Peer.Authentication interface methods\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nExchangeGuids\n\n\nMethod for an application to exchange its auth GUID and authentication protocol version with a remote peer application.\n\n\n\n\n\n\nAuthChallenge\n\n\nMethod for an application to initiate authentication and exchange authentication data with a remote peer application.\n\n\n\n\n\n\nGenSessionKey\n\n\nMethod for an application to generate a session key with a remote peer application.\n\n\n\n\n\n\nExchangeGroupKeys\n\n\nMethod for an application to exchange group key with a remote peer application.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.Peer.Authentication.ExchangeGuids parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlocalGuid\n\n\nin\n\n\nAuth GUID for the initiator application.\n\n\n\n\n\n\nlocalVersion\n\n\nin\n\n\nAuth version for the initiator application.\n\n\n\n\n\n\nremoteGuid\n\n\nout\n\n\nAuth GUID for the remote peer application.\n\n\n\n\n\n\nremoteVersion\n\n\nout\n\n\nAuth version for the remote peer application.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.Peer.Authentication.AuthChallenge parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchallenge\n\n\nin\n\n\nAuth data provided by the initiator app.\n\n\n\n\n\n\nresponse\n\n\nout\n\n\nAuth data returned by the provider app.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.Peer.Authentication.GenSessionKey parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlocalGuid\n\n\nin\n\n\nAuth GUID for the initiator application.\n\n\n\n\n\n\nremoteGuid\n\n\nout\n\n\nAuth GUID for the remote peer application.\n\n\n\n\n\n\nlocalNonce\n\n\nin\n\n\nNonce generated by the initiator app.\n\n\n\n\n\n\nremoteNonce\n\n\nout\n\n\nNonce generated by the remote peer app.\n\n\n\n\n\n\nverifier\n\n\nout\n\n\nVerifier generated by the remote peer app.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.Peer.Authentication.ExchangeGroupKeys parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlocalKeyMatter\n\n\nin\n\n\nGroup key of the initiator app.\n\n\n\n\n\n\nremoteKeyMatter\n\n\nout\n\n\nGroup key of the remote peer app.",
            "title": "Alljoyn security"
        },
        {
            "location": "/learn/core/system-description/alljoyn-security/#alljoyn-security",
            "text": "",
            "title": "AllJoyn&trade; Security"
        },
        {
            "location": "/learn/core/system-description/alljoyn-security/#overview",
            "text": "The AllJoyn system provides a security framework for applications\nto authenticate each other and send encrypted data between them.\nThe AllJoyn framework provides end-to-end application level security.\nAuthentication and data encryption are done at the application.\nThese applications can reside on the same device or on different\ndevices, and can be attached to the same AllJoyn router or\ndifferent AllJoyn routers.  NOTE:  No authentication is done at the AllJoyn router layer.  The AllJoyn framework supports security at the interface level.\nAn application can tag an interface as 'secure' to enable\nauthentication and encryption. All of the methods, signals,\nand properties of a secure interface are considered secure.\nAuthentication- and encryption-related key exchange are\ninitiated on demand when a consumer application invokes a\nmethod call on a secure interface, or explicitly invokes an\nAPI to secure the connection with a remote peer application.  The following figure shows the high-level AllJoyn security architecture.   Figure:  AllJoyn security architecture  Authentication and encryption is done at the application layer.\nThe AllJoyn core library implements all of the logic for authentication\nand encryption except the Auth Listener. The Auth Listener is a callback\nfunction implemented by the application to provide auth credentials\n(e.g., PIN or password) or verify auth credentials (e.g., verify\ncertificate chain in case of ALLJOYN_ECDHE_ECDSA). Authentication\nand encryption keys are stored in a key store managed by\nthe Security module.  NOTE:  The AllJoyn router is only involved in transmitting\nsecurity-related messages between application endpoints.\nIt does not implement any security logic itself.  The AllJoyn framework uses the Simple Authentication and\nSecurity Layer (SASL) security framework for authentication.\nIt makes use of D-Bus defined SASL protocol D-Bus Specification \nfor exchanging authentication related data.  The AllJoyn framework supports the following auth mechanisms\nfor app-to-app level authentication:   ALLJOYN_SRP_KEYX - Secure Remote Password (SRP) key exchange  ALLJOYN_SRP_LOGON - Secure Remote Password (SRP) logon with username and password  ALLJOYN_ECDHE_NULL - Elliptic Curve Diffie-Hellman (ephemeral) key exchange\n  with no authentication  ALLJOYN_ECDHE_PSK -  Elliptic Curve Diffie-Hellman (ephemeral) key exchange\n  authenticated with a pre-shared key (PSK)  ALLJOYN_ECDHE_ECDSA - Elliptic Curve Diffie-Hellman (ephemeral) key exchange\n  authenticated with an X.509 ECDSA certificate   The AllJoyn framework also supports ANONYMOUS and EXTERNAL\nauth mechanisms as defined by the D-Bus specification.   The ANONYMOUS auth mechanism is used between two AllJoyn\nrouters for null authentication. It is also used for authentication\nbetween a thin app and an AllJoyn router.  The EXTERNAL auth mechanism is used between an application\nand the installed AllJoyn router (standalone AllJoyn router)\non the Linux platform.   Security changes in the 14.06 release  In the 14.06 release, the ALLJOYN_PIN_KEYX auth mechanism\nis removed from the AllJoyn thin core library. This auth\nmechanism continues to be supported by the AllJoyn standard\ncore library.  The following new Elliptic Curve Diffie-Hellman Ephemeral\n(ECDHE) based auth mechanism are added:   ECDHE_NULL is key agreement without authentication  ECDHE_PSK is a key agreement authenticated with a pre-shared\nsymmetric key.  ECDHE_ECDSA is a key agreement authenticated with an asymmetric\nkey validated with an ECDSA signature.   These new auth mechanisms can be used by both thin apps and\nstandard apps. Thin apps in the 14.06 release support only\nECDHE-based auth mechanisms.  Use of SASL protocol for authentication is removed from the\nAllJoyn thin core library in the 14.06 release, and will\ncontinue to be supported in AllJoyn standard core library.  For more information about these changes, see the latest version\nof the  Security HLD .  Security changes in the 15.04 release  In the 15.04 release, the ALLJOYN_PIN_KEYX and ALLJOYN_RSA_KEYX authentication\nmechanisms have been removed from the standard client.  Support for ECDSA X.509\nwas added.",
            "title": "Overview"
        },
        {
            "location": "/learn/core/system-description/alljoyn-security/#security-concepts",
            "text": "This section defines the AllJoyn security-related concepts.  Authentication (Auth) GUID  The Authentication GUID is a GUID assigned to an application\nfor authentication purposes. This GUID is persisted in the\nkey store and provides a long-term identity for the application.\nTypically, this GUID is associated with a single application.\nIn the scenario where a group of related applications share\na given key store, they also share the same auth GUID.  This GUID is used as a mapping key for storing and accessing\nauthentication and encryption keys for the associated application.  Master secret  The master secret is a key shared between authenticated peer\napplications. Two peer applications generate the same master\nsecret independently, and store it persistently in the key store.  The master secret is stored per Auth GUID for peer applications,\nand has an associated TTL settable by the application.\nAs long as the master secret is valid, peer applications\ndo not have to reauthenticate with each other to exchange encrypted data.  The master secret is 48 bytes in length as per  RFC 5246 .  Session key  A cryptographic key used to encrypt point-to-point data\ntraffic between two peer applications. A separate session key\nis maintained for every connected peer application. A session\nkey is valid as long as peers are connected (over any AllJoyn session).\nIt is a session in the cryptographic sense and not related to\nan AllJoyn session. The same session key is used across all\nAllJoyn sessions between two peers.  Session keys are stored in the memory, they are not persisted.\nThe session key is generated after a peer application has been\nauthenticated, and it expires for a peer application when\nthe connection is terminated with that peer. The session key\nis derived from the master secret, and is used to encrypt\nmethod calls, method replies, and unicast signals.  The session key is 128 bits long.  NOTE:  The current implementation has a default TTL of 2 days\nfor session keys. If applications remain connected that long,\nthe associated session key expires and a new session key would\nneed to be generated.  Group key  The group key is a cryptographic key used to encrypt\npoint-to-multipoint data traffic (broadcast signals) sent\nout by a provider application. A single group key is maintained\nby an application to encrypt broadcast signals sent to every\nconnected peer application.  A group key is generated when an application generates the\nvery first session key for any connected peer. The group key\nis always generated independent of the provider or consumer\nrole of an application. Only provider applications use the\ngroup key to send out encrypted broadcast signals. Applications\nexchange their group keys using an encrypted method call that\ninvolves the session key.    The group key is 128 bits long and randomly generated.\nThe group key is directional in nature. Each application has\nits own group key to encrypt broadcast signals. In addition,\nit also maintain a separate peer group key for each of the\nconnected peer for decrypting broadcast signals received from them.  Group keys are stored in the memory, they are not persisted.\nThe group expires when the connection ends with peer\napplications. An application's own group key will expire when\nit no longer has any connections with any of its peers.\nThe group key for a remote peer will expire when the application\nno longer has a connection with that peer.  NOTE:  In future releases, group keys may be persisted to\nsupport encryption for sessionless signals.  Key store  The key store is a local storage used to persistently store\nauthentication-related keys, and to store master secret and\nassociated TTL. Applications can provide their own implementation\nof the key store or use the default key store provided by the AllJoyn system.  Multiple applications on a device can share a given key store.\nIn this case, those applications share the same set of\nauthentication keys. In the current implementation, content\ninside the key store is encrypted with a key derived from the key store path.  For every authenticated application, the key store maintains\nthe master secret and the associated TTL per Auth GUID of that\napplication. It also maintains the auth GUID assigned to the\nlocal applications that are using the key store.  The following table shows an example key store with master\nsecret stored for two peer applications.  Key store example with master secret stored for two peer applications  Local Auth GUID - GUIDx     Peer Auth GUID  Master secret  TTL      GUID1  MS1  T1    GUID2  MS2  T2",
            "title": "Security concepts"
        },
        {
            "location": "/learn/core/system-description/alljoyn-security/#end-to-end-security-flow",
            "text": "The following figure captures the high-level end-to-end\nmessage flow for AllJoyn security for the use case when\ntwo applications have not authenticated with each other\nbefore. The security message flow is initiated based on one\nof the following triggers:   Consumer app invoking a secure method call on a remote\nservice object or  Consumer app explicitly invoking an API to secure the\nconnection with the remote peer    Figure:  End-to-end security flow (two applications have not authenticated with each other before)  It is ideal for an application to always explicitly secure\nthe connection with the remote peer. In the case when an\napplication is just interested in receiving secure signals,\nthat is the only way to secure the connection with the\nremote peer in order to receive keys for decrypting signals.  The AllJoyn core library attached with the application\nimplements all of the AllJoyn security logic. The AllJoyn\nrouter only acts as a pass-through for security-related messages.\nEach application needs to invoke EnablePeerSecurity API call\nwith the AllJoyn core library to enable AllJoyn security.\nThe application specifies authentication mechanism to be used,\nthe Auth Listener for callback and the key store file as part\nof this API call. It also indicates whether key store can\nbe shared. The AllJoyn core library generates the auth GUID\nfor the application as part of first-time initialization of\nthe key store. The auth GUID gets stored in the key store.  After establishing a session with the provider app, the consumer\napp initiates one of the security triggers mentioned above.\nThe AllJoyn Core library checks to see if authentication\nis already in progress.   If yes, it stops.  If no, it continues with the security flow.   It looks for the key material for remote peer. In this case,\nsince this is the first secure interaction with the remote\napp, no key material is found. This will trigger security\nflow with the remote peer.  The message flow consists of following four distinct\nsteps in that order:   Exchange Auth GUIDs: This step involves exchanging Auth\nGUIDs between peer applications. Once learned, the remote\napp auth GUID is used to see if the master secret is present\nfor that auth GUID in the key store. In this case, no master\nsecret is found since the two apps have not authenticated\nwith each other.  App-to-App authentication: This step involves two peers\nauthenticating each other using one of the supported auth\nmechanisms. At the end of this step, two peers have authenticated\neach other and now share a common master key.  Generate a session key: This step involves two peers\ngenerating a session key to be used for encrypting secure\npoint-to-point messages between them. The session key is\ngenerated independently by both the peers based on the\nshared master key. A group key is also generated when the\nfirst session key is generated.  Exchange group keys: This step involves two peers exchanging\ntheir own group keys with each other via an encrypted\nAllJoyn message. The AllJoyn message gets encrypted using\nthe session key already established between two peers.\nThe group key is used by the application to encrypt session\nmulticast and broadcast signals. At the end of this step,\ntwo peer applications have group keys to decrypt secure\nbroadcast signals received from each other.   Details for each of these steps are described in the\nfollowing sections. After completing these steps, peer\napplications have now established encryption/decryption\nkeys to exchange encrypted method calls and signals.  These keys are managed as part of a peer state table\nwhich includes a unique name for the remote peer, as well\nas a local auth GUID and group key for the current application.  The following table provides a sample peer state table with\nkeys stored for two authenticated peer applications.  Sample peer state table for two authenticated peer applications.  Local Auth GUID - GUIDx  App Group Key - GKx     Peer Auth GUID  Unique name  Session key  Peer group key      GUID1  :100.2  SK1  GK1    GUID2  :200.2  SK2  GK2",
            "title": "End-to-end security flow"
        },
        {
            "location": "/learn/core/system-description/alljoyn-security/#already-authenticated-apps",
            "text": "When apps connect with each other subsequent to their first\nconnection, they do not need to authenticate again with each\nother if the master secret is still valid. The following figure\nshows security flow for this use case.   Figure:  Authenticated apps connecting again  In this case, since the apps were not connected, no key material\nis found for the remote peer. As a result, the consumer app\nperforms the Exchange Auth GUIDs step with the remote peer.\nThis retrieves the Auth GUID for the remote peer that can\nbe used for lookup in the key store file.  Since the apps have already authenticated, a master secret\nis found in the key store for the auth GUID of the provider\napp and no app-to-app authentication needs to occur.\nThe consumer app directly goes to the next step of generating\nsession key and/or group key.  NOTE:  If the verification step fails during session key\ngeneration, the consumer app must re-authenticate with\nthe provider even if master secret is still valid.",
            "title": "Already authenticated apps"
        },
        {
            "location": "/learn/core/system-description/alljoyn-security/#exchange-of-auth-guids",
            "text": "The following figure shows the message flow for the exchange\nof Auth GUIDs between peer applications.   Figure:  Exchange of Auth GUIDs  The message flow steps are described below.   The consumer app generates an ExchangeGuids METHOD_CALL\nmessage and sends it to the provider app via the AllJoyn router.\nThis message includes the Auth GUID of the consumer app and\nthe maximum Auth version supported by the consumer app.  The provider app proposes its max auth version if it\ndoes not support the auth version received from the consumer app.  The provider app generates an ExchangeGuids METHOD_RETURN\nmessage and sends it to the consumer app via the AllJoyn router.\nThis message includes the Auth GUID of the provider app and\nthe max auth version of the provider app.  The consumer app verifies that it supports the received\nauth version. This completes the Exchange GUIDs step.",
            "title": "Exchange of Auth GUIDs"
        },
        {
            "location": "/learn/core/system-description/alljoyn-security/#app-to-app-authentication",
            "text": "AllJoyn peer applications authenticate each other using\none of the auth mechanisms detailed in this section.\nThese auth mechanisms are designed based on the security\nconstructs in  RFC 5246  and RFC 5054 . Applicable RFC\nsections are listed when describing details for these auth mechanisms.  NOTE:  For the authentication message flows captured in this section,\nthe consumer and provider apps are also referred to as client\nand server respectively, to correspond with terminology used\nin  RFC 5246  and RFC 5054 .  Use of D-Bus SASL protocol  The AllJoyn framework implements the D-Bus SASL exchange protocol D-Bus Specification  to exchange\nauthentication-related data. All authentication-related\nexchanges are done using the AuthChallenge method call/reply\ndefined as part of the org.alljoyn.Bus.Peer.Authentication\ninterface implemented by the AllJoyn core library.  Auth data to be exchanged is generated as a SASL string\nbased on the D-Bus SASL exchange protocol. Auth data inside\nthe SASL string is sent in the hex form. The generated string\nis then passed as a parameter to the AuthChallenge method call\nor method reply.  For example, to initiate authentication for ALLJOYN_SRP_KEYX,\ngenerated string would be:  AUTH ALLJOYN_SRP_KEYX  c_rand in hex   This includes the SASL AUTH command, auth mechanism, and auth data in hex form.  The following table captures the D-Bus SASL commands supported\nby the AllJoyn framework.  D-Bus SASL commands supported by the AllJoyn framework     Command  Direction  Description      AUTH [mechanism] [initial-response]  Consumer- Provider  Start the authentication.    CANCEL  Consumer- Provider  Cancel the authentication.    BEGIN  Consumer- Provider Provider- Consumer  On the consumer side, acknowledge that the consumer has received an OK command from the provider, and that the stream of messages is about to begin. From the provider side, sent by the provider as response to BEGIN command from the consumer.    DATA  Consumer- Provider Provider- Consumer  On the consumer or provider side, contains a hex-encoded block of data to be interpreted according to the auth mechanism in use.    OK  Consumer- Provider  The client has been authenticated.    REJECTED  Consumer- Provider  On the consumer side, indicates that the current authentication exchange has failed, and further exchange of DATA is inappropriate. The consumer tries another mechanism, or tries providing different responses to challenges.    ERROR  Consumer- Provider Provider- Consumer  On the consumer or provider side, either the provider or consumer did not know a command, does not accept the given command in the current context, or did not understand the arguments to the command.     ALLJOYN_SRP_KEYX  The following figure shows the message flow for the ALLJOYN_SRP_KEYX\nauth mechanism. This auth mechanism is primarily designed for use\ncases where a one-time use password is generated by both sides.   Figure:  ALLJOYN_SRP_KEYX auth mechanism  The message flow steps are described below.   The consumer app generates a 28 bytes client random string c_rand.  The consumer (client) app generates an AuthChallenge METHOD_CALL\nmessage and passes \"AUTH ALLJOYN_SRP_KEYX  c_rand \" as parameter\nin that message. The consumer app sends the method call to the\nprovider (server) app via the AllJoyn router.  The provider app invokes the AuthListener callback registered\nby the application to request for a password. The AuthListener\nreturns the password. A username of \"anonymous\" is used in this case.  The provider app computes the server's public value B as\nper the algorithm in section 2.5.3 of  RFC 5054 .  The provider app generates an AuthChallenge METHOD_RETURN\nmessage to send a server key exchange message to the client.\nThe provider app passes \"DATA  N:g:s:B \" as parameter to that\nmessage. Refer to section 2.5.3 of  RFC 5054 .\nThe 's' is a 40 bytes random salt value. The provider app\nsends method reply to the consumer app via the AllJoyn router.  The consumer app validates the values of N, g, s and B per\nsection 2.5.3 of  RFC 5054 .  The consumer app computes the client's public value A per\nsection 2.5.4 of  RFC 5054 .  The consumer (client) app generates an AuthChallenge METHOD_CALL\nmessage and passes \"DATA  A \" as parameter in that message.\nThe consumer app sends the method call to the provider (server)\napp via the AllJoyn router.  The provider app generates a 28 bytes server random string s_rand.  The provider app computes a premaster secret using the\nalgorithm in section 2.6 of  RFC 5054 .\nThe premaster secret is based on the client's public value (A),\nthe server's public value (B), and password among other parameters.  The provider app computes a master secret based on\nthe premaster secret, c_rand, and s_rand as per the algorithm\nin section 8.1 of  RFC 5246 .  The provider app computes a \"server finish\" s_verifier as\nper the algorithm in section 7.4.9 of  RFC 5246 . \nThe s_verifier is generated based on master secret, hash of\nhandshake messages, and \"server finish\" label.  The provider app generates an AuthChallenge METHOD_RETURN\nmessage and passes \"DATA  s_rand:s_verfier \" as parameter\nto that message. The provider app sends the method reply\nto the consumer app via the AllJoyn router.  The consumer app invokes the AuthListener callback\nregistered by the application to request for a password.\nThe AuthListener returns the password. A username of \"anonymous\"\nis used in this case.  The consumer app computes a premaster secret using the\nalgorithm in section 2.6 of  RFC 5054 .\nThe premaster secret is based on the client's public value (A),\nthe server's public value (B), and the password among other parameters.  The consumer app computes a master secret based on the\npremaster secret, c_rand, and s_rand as per the algorithm\nin section 8.1 of  RFC 5246 .  The consumer app generates the \"server finish\" verifier\nusing the same algorithm as the provider app and verifies\nthat the computed value is same as the received s_verifier.  The consumer app computes a \"client finish\" c_verifier\nas per the algorithm in section 7.4.9 of  RFC 5246 .\nThe c_verifier is generated based on the master secret,\nhash of handshake messages, and \"client finish\" label.  The consumer app generates an AuthChallenge METHOD_CALL\nmessage to send the c_verifier to the server. The consumer app\npasses \"DATA  c_verifier \" as parameter to the method call.\nThe consumer app sends the method call to the provider (server)\napp via the AllJoyn router.  The provider app generates the \"client finish\" verifier\nusing the same algorithm as the consumer app and verifies\nthat the computed value is same as the received c_verifier.\n   At this point, the client and server have authenticated with each other.  The provider app generates an AuthChallenge METHOD_RETURN\nmessage indicating that authentication is complete. The provider\napp passes \"OK  s_GUID \" as parameter in that message, where s_GUID\nis the auth GUID of the provider app. The provider app sends\nthe method reply to the consumer app via the AllJoyn router.  The consumer app sends an AuthChallenge METHOD_CALL to t\nhe provider app specifying \"BEGIN  c_GUID \" as parameter.\nThis indicates to the provider that the client has received\nthe OK message, and the stream of data messages is about to begin.\nThe c_GUID is auth GUID of the consumer app.  The provider app sends an AuthChallenge METHOD_RETURN\nmessage, specifying \"BEGIN\" as parameter.   ALLJOYN_SRP_LOGON  The following figure shows the message flow for the ALLJOYN_SRP_LOGON\nauth mechanism. This auth mechanism is designed for client-server use\ncases where server maintains username and password, and the client\nuses this information for authentication. This mechanism is quite\nsimilar to the AllJoyn_SRP_KEYX auth mechanism with the following differences:   The consumer app invokes the AuthListener callback up front\nto request the username and password from the application.\nThe consumer app then passes the username in the first AuthChallenge\nmessage sent to the provider app.  The provider app uses the received username to request for\npassword from the AuthListener.    Figure:  ALLJOYN_SRP_LOGON auth mechanism  ECDHE key exchanges  In the 14.06 release, new Elliptic Curve Diffie-Hellman Ephemeral\n(ECDHE) based auth mechanism were added. For details on ECDHE-based\nauth mechanisms, see the latest version of the  Security HLD .",
            "title": "App-to-app authentication"
        },
        {
            "location": "/learn/core/system-description/alljoyn-security/#generation-of-the-session-key",
            "text": "The follwing figure shows the message flow for the generation\nof session keys between peer applications.   Figure:  Session key generation between peer applications  The message flow steps are described below.\n1. The consumer app generates a 28 bytes client nonce string c_nonce.\n2. The consumer app generates a GenSessionKey METHOD_CALL\nmessage and sends it to the provider app via the AllJoyn router.\nThis message includes local auth GUID corresponding to the\nconsumer app, a remote auth GUID corresponding to the provider app, and c_nonce.\n3. The provider app generates a 28 bytes server nonce string s_nonce.\n4. The provider app generates a session key and a verifier\nbased on the master secret, c_nonce, and s_nonce using the\nalgorithm described in section 6.3 of  RFC 5246 .\nThe \"session key\" label is used to generate the key.\n5. The provider app stores the session key in the peer state\ntable for the auth GUID associated with the consumer app.\n6. The provider app generates a 128 bit group key if no group\nkey exists for the provider app, and stores in the peer state table.\n7. The provider app generates a GenSessionKey METHOD_RETURN\nmessage and sends it to the consumer app via the AllJoyn router.\nThis message includes s_nonce and verifier.\n8. The consumer app generates a session key and a verifier\nbased on the master secret, c_nonce, and s_nonce using the\nsame algorithm as the provider app as per section 6.3 of  RFC 5246 .\nThe \"session key\" label is used for generate the key. \n9. The consumer app verifies that the computed verifier is\nthe same as the received verifier.\n10. The consumer app stores the session key in the peer state\ntable for the auth GUID associated with the provider app.\n11. The consumer app generates a 128 bit group key if no group\nkey exists for the consumer app, and stores in the peer state table.  The peer apps now have a common session key that can be used to\nexchange encrypted messages.",
            "title": "Generation of the session key"
        },
        {
            "location": "/learn/core/system-description/alljoyn-security/#exchange-of-group-keys",
            "text": "The following figure shows the message flow for the exchange\nof group keys between peer applications. This is achieved via\nthe ExchangeGroupKeys method call which is the first encrypted\nmessage sent between peer applications after the session key is established.   Figure:  Exchange of group keys  The message flow steps are described below.   The consumer app generates an ExchangeGroupKeys METHOD_CALL\nmessage. This message includes the group key of the consumer app.\nThe consumer app sets the encryption flag to true for this message.  The consumer app encrypts the message and generates an 8 bytes\nMAC (Message Authentication Code) using the session key for the\nremote peer app. Message encryption is done using AES CCM algorithm.  The consumer app appends the MAC to the encrypted message body\nand updates the message length to reflect the MAC.  The consumer app sends the encrypted ExchangeGroupKeys METHOD_CALL\nmessage to the provider app via the AllJoyn router.  The provider app verifies the MAC and decrypts the message using the\nsession key stored for the consumer app.  The provider app stores the received group key for the remote peer\n(consumer app) in the peer state table.  The provider app generates an ExchangeGroupKeys METHOD_RETURN message. This message includes the group key of the provider app. The provider app sets the encryption flag to true for this message.  The provider app encrypts the message and generates an\n8 bytes MAC using the session key for the remote peer app.\nMessage encryption is done using AES CCM algorithm.  The provider app appends the MAC to the encrypted message\nbody and updates the message length to reflect the MAC.  The provider app sends the encrypted ExchangeGroupKeys\nMETHOD_RETURN message to the provider app via the AllJoyn router.  The consumer app verifies the MAC and decrypts the reply\nmessage using session key stored for the provider app.  The consumer app stores the received group key for the\nremote peer (provider app) in the peer state table.   Now the two apps have group key for each other which can be\nused to decrypt broadcast signal messages received from the peer application.",
            "title": "Exchange of group keys"
        },
        {
            "location": "/learn/core/system-description/alljoyn-security/#exchange-of-encrypted-messages",
            "text": "Once encryption credentials are established between applications,\nthey can exchange encrypted methods and signals. These use cases\nare captured below.  Encrypted method call  The following figure shows the message flow for exchange of\nencrypted method call/reply between the consumer and provider\napplications. The reply message to an encrypted method call\nis also sent encrypted.   Figure:  Encrypted method call/reply  The message flow steps are described below.   The consumer app generates a METHOD_CALL message for the\nsecure method and sets the encryption flag to true for this message.  The consumer app encrypts the message and generates an\n8 bytes MAC using the session key for the destination app.\nMessage encryption is done using AES CCM algorithm.  The consumer app appends the MAC to the encrypted message\nbody and updates the message length to reflect the MAC.  The consumer app sends the encrypted METHOD_CALL message\nto the provider app via the AllJoyn router.  The provider app verifies the MAC and decrypts the message\nusing session key stored for the consumer app.  The provider app's AllJoyn core library invokes the MethodCall\nhandler, which invokes the method call on the service object\ninterface and receives a reply.  The provider app generates a METHOD_RETURN message for\nthe reply and sets the encryption flag to true for this message.  The provider app encrypts the message and generates an\n8 bytes MAC using the session key for the consumer app.\nMessage encryption is done using AES CCM algorithm.  The provider app appends the MAC to the encrypted message\nbody and updates the message length to reflect the MAC.  The provider app sends the encrypted METHOD_RETURN message\nto the consumer app via the AllJoyn router.  The consumer app verifies the MAC and decrypts the reply\nmessage using session key stored for the provider app.  The consumer app's AllJoyn core library sends the plaintext\nreply message to the application.   Encrypted signal  The following figure shows the message flow for sending an\nencrypted session based signal from provider application\nto consumer applications. The signal can be sent to a destination\n(unicast signal) or to multiple endpoints as multicast/broadcast signals.  NOTE:  Sessionless signals are not sent encrypted in current\nAllJoyn system. In future, implementation can be enhanced to\nencrypt sessionless signals as well.   Figure:  Encrypted method call/reply  The message flow steps are described below.   The consumer and provider apps have already authenticated\nand established encryption keys with each other.  The provider app has some signal data to send. It invokes\nthe BusObject Signal() call which generates a SIGNAL message.  The provider app sets the encryption flag to true for the\nSIGNAL message if the signal is defined as part of a secure interface.  The provider app encrypts the SIGNAL message and generates\nan 8 bytes MAC using either the group key or session key as\nper the logic in the following key selection logic (provider app) figure.\nMessage encryption is done using AES CCM algorithm.  The provider app appends the MAC to the encrypted SIGNAL\nmessage body and updates the message length to reflect the MAC.  The provider app sends the encrypted SIGNAL message to\nthe consumer app via the AllJoyn router.  The consumer app verifies the MAC and decrypts the SIGNAL\nmessage using either the session key or group key as per the\nlogic in the following key selection logic (consumer app) figure.  The consumer app's AllJoyn core library sends the plaintext\nsignal message to the application.   Key selection logic  On the provider application side, unicast signals get encrypted\nusing the session key and multicast/broadcast signals get\nencrypted using group key. The following figure shows the key selection\nlogic for encrypting signals.   Figure:  Key selection for signal encryption (on the provider app)  On the consumer side, a reverse logic is applied for selecting\nkey for decrypting received signals messages as shown in the following figure.   Figure:  Key selection for signal decryption (on the consumer app)",
            "title": "Exchange of encrypted messages"
        },
        {
            "location": "/learn/core/system-description/alljoyn-security/#orgalljoynbuspeerauthentication-interface",
            "text": "The org.alljoyn.Bus.Peer.Authentication interface is the AllJoyn\ninterface between two AllJoyn core libraries that support the\napplication layer security within AllJoyn.  The following table summarizes members from org.alljoyn.Bus.Peer.Authentication interface.  org.alljoyn.Bus.Peer.Authentication interface methods     Method  Description      ExchangeGuids  Method for an application to exchange its auth GUID and authentication protocol version with a remote peer application.    AuthChallenge  Method for an application to initiate authentication and exchange authentication data with a remote peer application.    GenSessionKey  Method for an application to generate a session key with a remote peer application.    ExchangeGroupKeys  Method for an application to exchange group key with a remote peer application.     org.alljoyn.Bus.Peer.Authentication.ExchangeGuids parameters     Parameter name  Direction  Description      localGuid  in  Auth GUID for the initiator application.    localVersion  in  Auth version for the initiator application.    remoteGuid  out  Auth GUID for the remote peer application.    remoteVersion  out  Auth version for the remote peer application.     org.alljoyn.Bus.Peer.Authentication.AuthChallenge parameters     Parameter name  Direction  Description      challenge  in  Auth data provided by the initiator app.    response  out  Auth data returned by the provider app.     org.alljoyn.Bus.Peer.Authentication.GenSessionKey parameters     Parameter name  Direction  Description      localGuid  in  Auth GUID for the initiator application.    remoteGuid  out  Auth GUID for the remote peer application.    localNonce  in  Nonce generated by the initiator app.    remoteNonce  out  Nonce generated by the remote peer app.    verifier  out  Verifier generated by the remote peer app.     org.alljoyn.Bus.Peer.Authentication.ExchangeGroupKeys parameters     Parameter name  Direction  Description      localKeyMatter  in  Group key of the initiator app.    remoteKeyMatter  out  Group key of the remote peer app.",
            "title": "org.alljoyn.Bus.Peer.Authentication interface"
        },
        {
            "location": "/learn/core/system-description/alljoyn-session/",
            "text": "AllJoyn\n Session\n\n\nOverview\n\n\nAfter an AllJoyn consumer has discovered some desired services\noffered by provider devices, the next step is to establish an\nAllJoyn session with the provider to consume those services.\nAn AllJoyn session is a logical connection between consumer\nand provider applications that allows these applications to\ncommunicate with each other and exchange data. A provider\napplication creates an AllJoyn session and waits for consumer\napplications to join the session. The application that creates\nthe session is the owner of the session (session host), and\nother applications are termed as joiners in that session.\n\n\nOn the provider side, the app binds a session port with the\nAllJoyn core library, specifying a list of session options\n(e.g., transports, session type, etc.) and then listens for\nconsumers to join the session. The session port is typically\nknown ahead of time to both the consumer and the provider app.\nAlternately, the session port can be discovered via the Announcement\nmessage received from that provider.\n\n\nOn the consumer side, the app requests the AllJoyn bus to join\nthe session with a given provider app by specifying the session\nport, well-known name/unique name for the service, and session\noptions (transport, session type, etc.). After this, the AllJoyn\nrouter initiates a session establishment flow between the consumer\nand the provider apps. A unique session ID gets assigned by the\nprovider to the AllJoyn session after the first client joins\nthe session. The session ID is sent back to the consumer app\nand should be used for subsequent communication with the provider.\n\n\nThe following figure shows the high-level architecture for the\nAllJoyn session establishment.\n\n\n\n\nFigure:\n AllJoyn session establishment architecture\n\n\nThe provider app binds a session port with the AllJoyn router\nfor a given service. The combination of (well-known name/unique\nname and session port) uniquely identifies the endpoint.\nThe consumer app starts a join session with the (well-known name/unique name +\nsession port number) of the provider app. The AllJoyn router\non the consumer side establishes a physical connection with\nthe provider AllJoyn router based on already discovered information\nas part of the discovery step. Currently, this involves establishing\na TCP connection or if a UDP Transport is used\nbetween the two routers for session setup, no physical channel\nneeds to be established.\n\n\nAfter physical connection is established, the consumer AllJoyn router\nstarts the session establishment with the provider side. The provider\nAllJoyn router assigns a unique session ID for the session and also\ncreates a session map storing the relevant session information.\nOnce the session is established, a Session Joined callback is\nsent to the provider app with generated session ID. The consumer\napp receives a Status OK response for the join session call that\nincludes the session ID. A session map also gets created on the\nconsumer AllJoyn router side, storing session details.\n\n\nTypes of sessions\n\n\nAn AllJoyn session can be categorized into different types based\non the allowed number of participants in the session or the data\nencapsulation option used over the session.\n\n\nThe AllJoyn system supports the following types of session\nbased on allowed number of participants:\n\n\n\n\nPoint-to-point session: An AllJoyn session with a single\nconsumer (joiner) and single provider (session host) endpoints\nparticipates in the session. When either participant leaves\nthe session, the point-to-point session ends. A SessionLost\nindication is sent to the remaining participant.\n\n\nMulti-Point Session: An AllJoyn session allows more than\ntwo participants. Such a session involves a provider app\n(session host app) and one or more consumer apps (joiner apps)\nparticipating in the same session. A multi-point session can\nbe joined multiple times to form a single session with multiple\n(greater than 2) endpoints. New consumers can join a multi-point\nsession after the session has been created, and existing consumers\ncan leave a multi-point session. All participants in a multi-point\nsession can communicate to each other.\n\n\n\n\nIn a multi-point session, all communications go through session host.\nSimilar to a point-to-point session, a multi-point session ends when two\nparticipants are left and one of them leaves the session.\nA SessionLost indication is sent to the remaining participant.\n\n\nThe following figure depicts point-to-point and multi-point\nAllJoyn sessions with the multi-point session showing four participants.\n\n\n\n\nFigure:\n AllJoyn point-to-point and multi-point session examples\n\n\nRaw session\n\n\nIn the AllJoyn system, typical data exchange between peer nodes\noccurs in the form of enhanced D-Bus messages. However in some\nscenarios, the overhead associated with D-Bus messages may not\nbe desirable. In such cases, raw data can be exchanged between\nnodes using what is called an AllJoyn raw session.\n\n\nAn AllJoyn raw session is used to exchange raw data between\nendpoints using an underlying physical connection (e.g., TCP/UDP\nsocket-based communication). A raw session does not carry D-Bus\nencapsulated messages like a regular AllJoyn session.\nInstead, a raw session carries unencapsulated raw data directly\nsent over TCP/UDP sockets. A raw session can only be a\npoint-to-point session.\n\n\nNOTE:\n The raw session feature is only supported on the AllJoyn\nstandard client and is not supported on thin app. This feature\nis being deprecated and it is recommended that developers not\nto use the raw session feature.\n\n\nPoint to Point Session establishment\n\n\nThe AllJoyn protocol version obtained from the BusHello message is used to\ndetermine which call flow is used.\n\n\nPre-15.04 Point to Point Session establishment\n\n\nThe following figure captures the AllJoyn session establishment\nmessage flow for a point-to-point session when either the producer or consumer\nis version 14.12 or earlier.\n\n\n\n\nFigure:\n AllJoyn point-to-point session establishment - 14.12 or earlier\n\n\nThis is the message flow when either the producer or consumer is version 14.12\nor earlier.\n\n\n\n\nBoth the provider and consumer apps connect with their\nrespective AllJoyn routers via the AllJoyn core library\nand get a unique name assigned.\n\n\nThe provider app registers service Bus Objects with the\nAllJoyn core library.\n\n\nThe provider app requests a well-known name with the\nAllJoyn router via the AllJoyn core library.\n\n\nThe provider app binds a session port with the AllJoyn router via the AllJoyn\nlibrary's \nBindSessionPort\n API. This call specifies a session port, session\noptions, and a SessionPortListener for the session.\n\n\nThe consumer app discovers the provider app using the AllJoyn Advertisement and Discovery mechanism.\n\n\nThe consumer app initiates joining the session with the\nprovider via the \nJoinSession\n API. This call specifies the unique name\nof session host, session port, desired session options, and a SessionListener.\n\n\nThe consumer side AllJoyn router establishes a physical\nchannel with the provider side AllJoyn router (as applicable). For\nTCP Transport, this involves setting up a TCP connection\nbetween the two AllJoyn routers. If a UDP Transport is used\nbetween the two routers for session setup, no physical channel\nneeds to be established.\n\n\nOnce a connection is set up between the two AllJoyn buses,\nthe consumer AllJoyn router initiates a \nBusHello\n message to\nsend its bus GUID and AllJoyn protocol version. The provider\nAllJoyn router responds with its GUID, AllJoyn protocol\nversion, and unique name. The protocol version received from the routing nodes\nduring the \nBusHello\n stage is used to determine if the pre-15.04 or post-15.04\ncall flow is used.\n\n\nThe consumer and provider AllJoyn routers send out \nExchangeNames\n\nsignals to exchange the set of known unique names and well-known names.\n\n\nThe consumer AllJoyn router invokes the \nAttachSession\n\nmethod call at the provider AllJoyn router to join the session.\nThis call specifies the session port, session options, and unique\nname/well-known name of the session host among other parameters.\n\n\nIf the session opts are compatible, the provider AllJoyn router invokes an\n\nAcceptSession\n method call with the provider app which returns 'true' if the\nsession gets accepted.\nRefer to section \nSession options negotiation\n for\ndetails of session opts compatibility.\n\n\nIn case of incompatible session opts or if the session is not accepted by\nthe provider app, an appropriate error code is sent back. If the session gets\naccepted, the provider AllJoyn router generates a unique sessionId for this\nsession and sends a successful response. It sends back an \nAttachSession\n response\n message to the consumer AllJoyn router providing the result and sessionId if\n applicable.\n\n\nThe provider AllJoyn router sends a SessionJoined signal\nto the provider app specifying the sessionId.\n\n\nAfter receiving the \nAttachSession\n response, the consumer\nAllJoyn router sends a JoinSession response message to the\napp with an OK status and provides the session Id.\n\n\n\n\nPost-15.04 Point to Point Session establishment\n\n\nThe following figure captures the AllJoyn session establishment\nmessage flow for a point-to-point session when both the producer and consumer\nare version 15.04 or later.\n\n\n\n\nFigure:\n AllJoyn point-to-point session establishment - 15.04 or later\n\n\nThis is the message flow when both the producer and consumer are version 15.04\nor later.\n\n\n\n\nThe call flow until the \nBusHello\n stage is the same as described in \nPre-15.04 Point to Point Session establishment\n.\nThe protocol version received from the routing nodes during the \nBusHello\n stage\nis used to determine if the pre-15.04 or post-15.04 call flow is used.\n\n\nThe consumer AllJoyn router invokes the \nAttachSessionWithNames\n\nmethod call at the provider AllJoyn router to join the session. This call\nspecifies the session port, session options, and unique name/well-known name of\nthe session host among other parameters. As a part of this method call, the\n consumer AllJoyn router also sends out the names required for establishing the\n session. It may send out all names if it has been requested by the consumer or\n provider app.\n Refer to \nNames sent as a part of AttachSessionWithNames\n for more details.\n\n\nIf the session opts are compatible, the provider AllJoyn router invokes an\n\nAcceptSession\n method\ncall with the provider app which returns 'true' if the session gets accepted.\nRefer to section \nSession options negotiation\n for\ndetails of session opts compatibility.\n\n\nIn case of incompatible session opts or if the session is not accepted by\nthe provider app, an appropriate error code is sent back. If the session gets\naccepted, the provider AllJoyn router generates a unique sessionId for this\nsession. It sends back an \nAttachSessionWithNames\n response message to the\nconsumer AllJoyn router providing the result and sessionId if applicable.\nThe provider AllJoyn router also sends out the names required for establishing\nthe session as a part of the response. It may send out all names if it has been\nrequested by the consumer or provider app.\n Refer to \nNames sent as a part of AttachSessionWithNames\n for more details.\n\n\nThe provider AllJoyn router sends a SessionJoined signal\nto the provider app specifying the sessionId.\n\n\nAfter receiving the \nAttachSessionWithNames\n response, the consumer\nAllJoyn router sends a JoinSession response message to the\napp with an OK status and provides the session Id.\n\n\n\n\nMultipoint Session Establishment\n\n\nThe following use cases illustrate various AllJoyn session scenarios:\n\n\n\n\nEstablish a multi-point session\n\n\nConsumer joins an existing multi-point session\n\n\nConsumer leaves a point-to-point Session\n\n\nConsumer leaves a multi-point session with more than 2 participants\n\n\nProvider unbinds a session port\n\n\n\n\nEstablish a multi-point session\n\n\nThe following figure captures the session establishment\nmessage flow for a multi-point session between two participants.\n\n\n\n\nFigure:\n AllJoyn session - establishing a multi-point session\n\n\nA multi-point session follows same message flow as the\npoint-to-point session with the additional step of sending\nout the \nMPSessionChanged\n signal from the AllJoyn router\nto the application indicating new participant. This signal\nspecifies the sessionId, the unique name/well-known name\nof the participant, and a flag to indicate whether the\nparticipant was added.\n\n\nConsumer joins an existing multi-point session\n\n\nThe following figure captures the message flow for the\nscenario where a new consumer joins an existing multi-point session.\n\n\nIn a multi-point session, the new joiner is responsible\nfor notifying existing participants (other than session host)\nof the newly added member to the session. This is so that\nexisting members can update their session routing information\nto include the new joiner, and future session messages can be\nrouted appropriately. To achieve this, the new member invokes\nan \nAttachSession\n with all existing members. This results in\nexisting members adding the new joiner to their session-related tables.\n\n\nConsumer joins an existing multi-point session - Pre-15.04 call flow\n\n\n\n\nFigure:\n AllJoyn session - consumer joins a multi-point session - 14.12 or earlier\n\n\nThe message flow steps are described below.\n\n\n\n\nThe provider and consumer app are set up and the consumer discovers the producer app\nby using the AllJoyn Advertisement and Discovery mechanism.\n\n\nThe AllJoyn session establishment steps occur between\njoiner 1 (consumer 1) and the session host (provider) to\nestablish a multi-point session as captured in \nEstablish a\nmulti-point session\n.\n\n\nConsumer 2 (joiner 2) wants to join the existing multi-point\nsession, and initiates a JoinSession call with its AllJoyn router.\n\n\nThe joiner 2 AllJoyn router establishes a physical\nchannel with the provider side AllJoyn router (as applicable). For\nTCP Transport, this involves setting up a TCP connection\nbetween the two AllJoyn routers. If a UDP Transport is used\nbetween the two routers for session setup, no physical channel\nneeds to be established.\n\n\nOnce a connection is set up between the two AllJoyn buses,\nthe consumer AllJoyn router initiates a \nBusHello\n message to\nsend its bus GUID and AllJoyn protocol version. The provider\nAllJoyn router responds with its GUID, AllJoyn protocol\nversion, and unique name.\n\n\nThe joiner 2 and provider AllJoyn routers send out \nExchangeNames\n\nsignals to exchange the set of known unique names and well-known names. The provider AllJoyn router forwards this \nExchangeNames\n to all other connected routers including the joiner 2 AllJoyn router.\n\n\nThe AllJoyn session establishment steps occur between\njoiner 2 and the session host to add this joiner to the\nexisting multi-point session.\n\n\nAn \nMPSessionChanged\n signal is sent out to the session\nhost app informing it of new joiner in the session.\n\n\nJoiner 2 receives the set of existing members for the\nmulti-point session from the session host as part of the\n\nAttachSession\n response.\n\n\nJoiner 2 initiates an \nAttachSession\n with every received\nmember of the session (except the session host, which it\njust did using the \nAttachSession\n) and sends it to the session host.\n\n\nThe session host forwards this \nAttachSession\n to the existing session member.\n\n\nJoiner 1 receives \nAttachSession\n from joiner 2 and updates\nits session-related tables to add joiner 2.\n\n\nThe AllJoyn router on joiner 1 sends out an \nMPSessionChanged\n\nsignal to the app, indicating a newly added member to the\nmulti-point session.\n\n\nJoiner 2 also sends out separate \nMPSessionChanged\n signal\nto the app for each existing member of the session.\n\n\n\n\nConsumer joins an existing multi-point session - Post-15.04 call flow\n\n\n\n\nFigure:\n AllJoyn session - consumer joins a multi-point session - 15.04 or later\n\n\nThe message flow steps are described below.\n\n\n\n\nThe provider and consumer app are set up and the consumer discovers the producer app\nby using the AllJoyn Advertisement and Discovery mechanism.\n\n\nThe AllJoyn session establishment steps occur between\njoiner 1 (consumer 1) and the session host (provider) to\nestablish a multi-point session as captured in \nEstablish a\nmulti-point session\n.\n\n\nConsumer 2 (joiner 2) wants to join the existing multi-point\nsession, and initiates a JoinSession call with its AllJoyn router.\n\n\nThe AllJoyn session establishment steps occur between\njoiner 2 and the session host to add this joiner to the\nexisting multi-point session and exchanges the necessary names.\nRefer to \nNames sent as a part of AttachSessionWithNames\n for more details.\n\n\nAn \nMPSessionChanged\n signal is sent out to the session\nhost app informing it of new joiner in the session.\n\n\nJoiner 2 receives the set of existing members for the\nmulti-point session from the session host as part of the\n\nAttachSessionWithNames\n response.\n\n\nJoiner 2 initiates an \nAttachSessionWithNames\n with every received\nmember of the session (except the session host, which it\njust did using the \nAttachSessionWithNames\n) to the session host.\n\n\nThe session host forwards this \nAttachSessionWithNames\n to the existing\nsession member and sends the unique name and aliases of the joiner app and its\nrouting node.  Refer to \nNames sent as a part of AttachSessionWithNames\n for more details.\n\n\nJoiner 1 receives \nAttachSessionWithNames\n from joiner 2 and updates\nits session-related tables to add joiner 2 and sends a response back to the\nsession host AllJoyn Router.\n\n\nThe session  host AllJoyn Router forwards this response back to the\nJoiner 2 routing node.\n\n\nThe AllJoyn router on joiner 1 sends out an \nMPSessionChanged\n\nsignal to the app, indicating a newly added member to the\nmulti-point session.\n\n\nJoiner 2 also sends out separate \nMPSessionChanged\n signal\nto the app for each existing member of the session.\n\n\n\n\nConsumer leaves a point-to-point session\n\n\nThe following figure captures the message flow for the scenario\nwhere a consumer leaves an existing point-to-point session.\nThe same message flow is also applicable for the scenario when\na consumer leaves a multi-point session with only two participants.\n\n\nWhen a participant leaves a point-to-point session or a multi-point\nsession with only two participants, the session ends and is removed\nfrom session tables of both the participants. A participant can\nleave a session by initiating a LeaveSession call with the AllJoyn\nrouter. This results in a DetachSession signal being delivered\nto the other member of the session. Receipt of this signal triggers\nclearing of sessionId and other session-related information\nfrom the session tables of that member. Whenever a session ends,\na SessionLost signal is sent to the application.  \n\n\nNOTE:\n Either the joiner or the host of the session can leave\na session. A similar message flow is applicable when a session\nhost leaves the session.\n\n\n\n\nFigure:\n AllJoyn session - consumer leaves a point-to-point session\n\n\nThe message flow steps are described below.\n\n\n\n\nThe consumer app establishes a session with the session host.\n\n\nThe consumer app decides to leave the session. It invokes\na LeaveSession API with the AllJoyn router via the AllJoyn\ncore library. This call takes in the sessionId as input parameter.\n\n\nThe AllJoyn router generates a DetachSession signal specifying\nthe sessionId and the member that is leaving the session.\nThis signal is sent to the other member in the session.\n\n\nAfter receiving the DetachSession signal, the AllJoyn router\non the session host determines that it is the only member\nleft in the session. As a result, it concludes that the session\nhas ended and clears sessionId details from its session tables.\n\n\nThe AllJoyn router on the consumer side clears sessionId\ndetails from its session tables and sends a successful\nLeaveSession response to the application.\n\n\nThe AllJoyn router on the session host sends a SessionLost\nsignal to the application indicating that the session has ended.\n\n\n\n\nConsumer leaves a multi-point session\n\n\nThe following figure captures the message flow for the scenario\nwhere a consumer leaves a multi-point session with more\nthan two participants.\nIn this scenario, the session continues with remaining\nparticipants even after a member leaves the session.\nThe remaining participants update their session tables to\nremove the member that left the session.\n\n\n\n\nFigure:\n AllJoyn session - consumer leaves a multi-point session\n\n\nThe message flow steps are described below.\n\n\n\n\nTwo consumer apps (joiner 1 and joiner 2) have joined in\na single multi-point session with the provider.\n\n\nJoiner 2 decides to leave the session. It invokes a\nLeaveSession API with the AllJoyn router, specifying the sessionId.\n\n\nThe AllJoyn router on joiner 2 generates a DetachSession\nsignal, specifying the sessionId and the member that is\nleaving the session. This signal is sent as a session broadcast\nsignal to all the other members in the session.\n\n\nUpon receiving the DetachSession signal, the AllJoyn router\ninvolved in the multi-point session determines that there\nare two or more remaining participants in the session,\nmeaning the session will continue to exist. As a result,\nit updates its session tables to remove the member received\nin the DetachSession signal for that sessionId. The AllJoyn\nrouter then sends an \nMPSessionChanged\n signal to the app\nindicating member deletion for that session. This logic is\nexecuted by the AllJoyn router for every remaining participant\nin the session.\n\n\nThe AllJoyn router on the member leaving the session clears\nsessionId details from its session tables and sends a successful\nLeaveSession response to the application.\n\n\n\n\nProvider leaves a multi-point session\n\n\nThe following figure captures the message flow for the scenario\nwhere a provider (session host) leaves a multi-point session\nwith more than two participants. In this case, the session\ncontinues to exist and the remaining participants can continue\nto communicate; however, no new participants can join the multi-point session.\n\n\n\n\nFigure:\n AllJoyn session - provider leaves a multi-point session\n\n\nProvider unbinds a session port\n\n\nThe provider app can unbind a previously bound session port\nat any time. As a result, no new sessions can be established\non that session port. Any existing sessions on that session\nport will continue and are not impacted. If there was any multi-point\nsession on that session port, no new members can be added to\nthat multi-point session.\n\n\nSession options\n\n\nThe following tables capture the session options and values supported\nfor the AllJoyn session. Traffic, proximity, and transports\nfields in the session option are specified as bit masks with values.\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\nData type\n\n\n\n\n\n\n\n\n\n\ntraffic\n\n\nSpecifies type of traffic sent over the session\n\n\nbyte\n\n\n\n\n\n\nisMultipoint\n\n\nSpecifies whether the session is multi-point or point-to-point.\n\n\nbool\n\n\n\n\n\n\nproximity\n\n\nSpecifies the proximity scope for this session\n\n\nbyte\n\n\n\n\n\n\ntransports\n\n\nSpecifies the allowed transports for this Session\n\n\nshort\n\n\n\n\n\n\nnameTransfer\n\n\nName transfer type of session - Internal use only\n\n\nbyte\n\n\n\n\n\n\n\n\nTraffic session allowed values\n\n\n\n\n\n\n\n\nName\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTRAFFIC_MESSAGES\n\n\n0x01\n\n\nUse reliable message-based communication to move data between session endpoints.\n\n\n\n\n\n\nTRAFFIC_RAW_UNRELIABLE\n\n\n0x02\n\n\nUse unreliable (e.g., UDP) socket-based communication to move data between session endpoints. This creates a raw session where MESSAGE encapsulation is not used.\n\n\n\n\n\n\nTRAFFIC_RAW_RELIABLE\n\n\n0x04\n\n\nUse reliable (e.g., TCP) socket-based communication to move data between session endpoints. RAW. This creates a raw session where MESSAGE encapsulation is not used.\n\n\n\n\n\n\n\n\nIsMultipoint session allowed values\n\n\n\n\n\n\n\n\nName\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nN/A\n\n\ntrue\n\n\nA multi-point capable session. A multi-point session can be joined multiple times to form a single session with multiple (\n 2) endpoints.\n\n\n\n\n\n\nN/A\n\n\nfalse\n\n\nSession is not multi-point capable. Each join attempt will create a new point-to-point session.\n\n\n\n\n\n\n\n\nProximity session allowed values\n\n\nNOTE:\n The PROXIMITY_PHYSICAL and PROXIMITY_NETWORK options are\nnot supported semantically today, meaning no enforcement is\ndone for spatial scope. Only bit matching is done for these\noptions when looking to find a set of compatible set of\nsession options. AllJoyn system provides flexibility to\nsupport specific semantics for these options in future if needed.\n\n\n\n\n\n\n\n\nName\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPROXIMITY_ANY\n\n\n0xFF\n\n\nSpatial scope of the session is not limited. Session can be joined by joiners located anywhere.\n\n\n\n\n\n\nPROXIMITY_PHYSICAL\n\n\n0x01\n\n\nSpatial scope of session is limited to the local host. Interpreted as \"the same physical machine.\" Session can be joined by joiners located only on the same physical machine as the one hosting the session.\n\n\n\n\n\n\nPROXIMITY_NETWORK\n\n\n0x02\n\n\nSpatial scope of session is limited to anywhere on the local logical network segment. Session can be joined by joiners located anywhere on the network.\n\n\n\n\n\n\n\n\nTransports session allowed values\n\n\n\n\n\n\n\n\nName\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTRANSPORT_NONE\n\n\n0x0000\n\n\nUse no transport to communicate with a given session.\n\n\n\n\n\n\nTRANSPORT_LOCAL\n\n\n0x0001\n\n\nUse only the local transport to communicate with a given session.\n\n\n\n\n\n\nTRANSPORT_TCP\n\n\n0x0004\n\n\nUse only the TCP transport to communicate with a given session.\n\n\n\n\n\n\nTRANSPORT_UDP\n\n\n0x0100\n\n\nUse only the UDP/ARDP transport to communicate with a given session.\n\n\n\n\n\n\nTRANSPORT_EXPERIMENTAL\n\n\n0x8000\n\n\nUse only the experimental transport that has not yet reached the performance, stability or testing requirements of a commercialized transport to communicate with a given session.\n\n\n\n\n\n\nTRANSPORT_IP\n\n\nTRANSPORT_TCP\n \n \nTRANSPORT_UDP\n\n\nUse any IP based transport to communicate with a given session\n\n\n\n\n\n\nTRANSPORT_ANY\n\n\nTRANSPORT_LOCAL\n \n \nTRANSPORT_IP\n\n\nUse any commercialized transport.\n\n\n\n\n\n\n\n\nNames sent as a part of AttachSessionWithNames\n\n\nAllJoyn routers only exchange names required for establishing a session unless\nspecifically requested by the consumer and/or producer app. The app can request\nfor the routers to exchange all names by invoking the \nSetAllNames\n API on the\nsessionOpts or by passing \nexchangeAllNames=true\n in the \nSessionOpts\n constructor.\nThe app may invoke the \nSetSessionNames\n API on the sessionOpts to reset to the\ndefault behavior of exchanging only the required names.\n\n\nBehavior when Session Names option is used\n\n\nPoint to point session: The Consumer and Provider AllJoyn routing nodes exchange\nunique name and aliases of the routing node and session host/joiner app only as\na part of the \nAttachSessionWithNames\n method call/response.\n\n\nMultipoint session: The Consumer AllJoyn routing node sends the unique name and\naliases of the routing node and session joiner app only. The Provider routing\nnode sends the unique names and aliases of the routing node, host and existing\nmembers and their routing nodes. When the provider forwards an\n\nAttachSessionWithNames\n to an existing session member, it sends out the unique\nname and aliases of the joiner app and routing node.\n\n\nBehavior when All Names option is used\n\n\nUnique names of all locally and remotely connected router and leaf nodes are\nexchanged as a part of the \nAttachSessionWithNames\n and its response.\nIn this case the names exchanged are identical to the ones exchanged between pre-15.04 routing nodes except that the names are exchanged as a part of \nAttachSessionWithNames\n instead of a separate \nExchangeNames\n signal.\n\n\nSession options negotiation\n\n\nA compatible set of session options must be agreed upon\nbetween two endpoints to establish a session. If a compatible\nset of session options cannot be established between two\nendpoints, session establishment fails.\nSession options negotiation occurs between session options\nprovided by the provider app at the time of invoking\n\nBindSessionPort(...)\n and the session options requested\nby the consumer app when invoking the \nJoinSession(...)\n.\n\n\n\n\nFor certain session options, e.g., traffic, an\nexact match must occur between the provider and consumer\nsession options for negotiation to be successful.\n\n\nFor certain session options, e.g. isMultipoint, the option provided by\nthe producer is used.\n\n\nFor other session options, the negotiation happens to the\nlowest common session option level. Exact details of session\noptions negotiation is outside the scope of this document.\n\n\n\n\nDetecting missing or slow endpoints\n\n\nThe AllJoyn Router supports a probing mechanism to detect\nother missing routers and missing applications so that\nresources can be cleaned up for missing endpoints. Separate\nlogic is supported for detecting other missing routers and\napplications as described in \nProbing mechanism for detecting missing routers\n\nand \nProbing mechanism for detecting missing applications\n.\n\n\nThe AllJoyn router also supports logic to detect and disconnect\nany AllJoyn applications or other AllJoyn routers that are\nslower to read data than the minimum desired performance level.\nThis logic is captured in \nDetecting a slow reader\n.\n\n\nOnce a remote endpoint (an application or anther router) is\ndisconnected based on probing mechanism or slow reader detection\nlogic, the AllJoyn router will clean up any connection slots,\nactive advertisements and sessions associated with the remote\nendpoint. The AllJoyn router will also send SessionLost,\n\nMPSessionChanged\n and \nDetachSession\n signals to participants\nthat are in a session with the disconnected remote application\nor in a session with applications connected to the disconnected\nremote router.\n\n\nProbing mechanism for detecting missing routers\n\n\nThe AllJoyn router provides a \nSetLinkTimeout()\n API which\ncan be invoked by the application to detect missing routers.\nThe application provides an idle timeout value as part of the\nAPI, which should be greater than or equal to the minimum value\n(40 sec) defined at the router. A single probe is sent to the\nother router after inactivity is detected for idle timeout period.\nIf no response is received in probe timeout period (10 sec), that\nrouter is disconnected and all associated connection slots,\nactive advertisements and sessions are cleaned up.\n\n\nThis functionality to detect missing routers is not enabled\nby default. An app needs to call the \nSetLinkTimeout()\n API\nto enable it.\n\n\nProbing mechanism for detecting missing applications\n\n\nThe AllJoyn router provides a probing mechanism using DBus\npings to detect missing AllJoyn applications. The following\nparameters determine the transmission schedule of the DBus pings:\n\n Number of probes(N): Total number of DBus pings sent.\n\n Idle timeout(I): Time after which the first DBus ping will be sent.\n* Probe timeout(P): Time after which subsequent DBus ping\nwill be sent if a reply to the previous ping has not yet been received.\n\n\nThe values of the above parameters are specific to the AllJoyn TCP versus\nUDP Transport over which the AllJoyn application is connected\nto the AllJoyn router.\n\n\nThe following figure shows the transmission schedule of the DBus pings.\n\n\n\n\nFigure:\n Probe transmission schedule for detecting missing apps\n\n\nConnected AllJoyn applications will be able to select values\nfor idle and probe timeouts within a transport specific range\nby invoking the \nSetIdleTimeouts()\n API. The call specifies\nthe requested idle and probe timeouts and returns the actual\nvalues for the idle and probe timeouts.\n\n\nDetecting a slow reader\n\n\nIn order to maintain quality of service, the AllJoyn router\nwill disconnect any AllJoyn applications or AllJoyn routers\nthat are slower than the minimum desired performance level.\n\n\nThe AllJoyn router will disconnect a remote AllJoyn application/router\nin either of the following scenarios:\n\n Once the network send buffer on the router and network\nreceive buffer on remote application/router are both full,\nthe remote application/router does not read data fast enough\nto be able to fit the pending AllJoyn message within the\nSend Timeout period.\n\n More than (10 * Send timeout) control messages originating\nfrom the router are currently queued for the remote application/router.\n\n\nThe value of the Send timeout is specific to the TCP or UDP\ntransport over which the remote AllJoyn application/router is\nconnected to this AllJoyn router.\n\n\nMethods/signals used for an AllJoyn session\n\n\nThe AllJoyn framework supports session-related functionality\nas part of the following AllJoyn interfaces:\n\n\n\n\norg.alljoyn.Daemon\n\n\norg.alljoyn.Bus\n\n\norg.alljony.Bus.Peer.Session\n\n\n\n\nThis section provides a summary of methods and signals from\nthese interfaces used for AllJoyn session-related functionality.\n\n\norg.alljoyn.Daemon\n\n\nThe org.alljoyn.Daemon interface is the main over-the-wire\ninterface used for communication between two AllJoyn router\ncomponents. The following tables summarize the org.alljoyn.Daemon\ninterface methods and signals used for session-related functions.\n\n\norg.alljoyn.Daemon interface methods\n\n\n\n\n\n\n\n\nMethod name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAttachSession\n\n\nMethod for a remote AllJoyn router to attach a session with this AllJoyn router.\n\n\n\n\n\n\nGetSessionInfo\n\n\nMethod for a remote AllJoyn router to get session information from this AllJoyn router.\n\n\n\n\n\n\n\n\norg.alljoyn.Daemon.AttachSession method parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsession port\n\n\nin\n\n\nAllJoyn session port\n\n\n\n\n\n\nJoiner\n\n\nin\n\n\nUnique name of the joiner\n\n\n\n\n\n\ncreator\n\n\nin\n\n\nUnique name or well-known name of the session host\n\n\n\n\n\n\ndest\n\n\nin\n\n\nUnique name of the destination for the AttachSession.\nFor point-to-point session, this is same as creator.\nFor multi-point session, this field can be different than the creator.\n\n\n\n\n\n\nb2b\n\n\nin\n\n\nUnique name of the bus-to-bus end point on the joiner side. This is used to set up the message routing path for the session.\n\n\n\n\n\n\nbusAddr\n\n\nin\n\n\nA string indicating how to connect to the bus endpoint, for example, \"tcp:192.23.5.6, port=2345\"\n\n\n\n\n\n\noptsIn\n\n\nin\n\n\nSession options requested by the joiner.\n\n\n\n\n\n\nstatus\n\n\nout\n\n\nSession join status\n\n\n\n\n\n\nsessionId\n\n\nout\n\n\nAssigned session ID\n\n\n\n\n\n\noptsOut\n\n\nout\n\n\nFinal selected session options\n\n\n\n\n\n\nmembers\n\n\nout\n\n\nList of session members\n\n\n\n\n\n\n\n\norg.alljoyn.Daemon.AttachSessionWithNames method parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsession port\n\n\nin\n\n\nAllJoyn session port\n\n\n\n\n\n\nJoiner\n\n\nin\n\n\nUnique name of the joiner\n\n\n\n\n\n\ncreator\n\n\nin\n\n\nUnique name or well-known name of the session host\n\n\n\n\n\n\ndest\n\n\nin\n\n\nUnique name of the destination for the AttachSession.\nFor point-to-point session, this is same as creator.\nFor multi-point session, this field can be different than the creator.\n\n\n\n\n\n\nb2b\n\n\nin\n\n\nUnique name of the bus-to-bus end point on the joiner side. This is used to set up the message routing path for the session.\n\n\n\n\n\n\nbusAddr\n\n\nin\n\n\nA string indicating how to connect to the bus endpoint, for example, \"tcp:192.23.5.6, port=2345\"\n\n\n\n\n\n\noptsIn\n\n\nin\n\n\nSession options requested by the joiner.\n\n\n\n\n\n\nnames\n\n\nin\n\n\nList of unique and well known names\n\n\n\n\n\n\nstatus\n\n\nout\n\n\nSession join status\n\n\n\n\n\n\nsessionId\n\n\nout\n\n\nAssigned session ID\n\n\n\n\n\n\noptsOut\n\n\nout\n\n\nFinal selected session options\n\n\n\n\n\n\nmembers\n\n\nout\n\n\nList of session members\n\n\n\n\n\n\nnames\n\n\nout\n\n\nList of unique and well known names\n\n\n\n\n\n\n\n\norg.alljoyn.Daemon.GetSessionInfo method parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncreator\n\n\nin\n\n\nUnique name for the app that bound the session port.\n\n\n\n\n\n\nsession port\n\n\nin\n\n\nSession port.\n\n\n\n\n\n\noptsIn\n\n\nin\n\n\nSession options requested by the joiner.\n\n\n\n\n\n\nbusAddr\n\n\nout\n\n\nReturned bus address for the session to use when attempting to create a connection for joining the session, for example, \"tcp:192.23.5.6, port=2345\"\n\n\n\n\n\n\n\n\norg.alljoyn.Daemon interface signals\n\n\n\n\n\n\n\n\nSignal name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nExchangeNames\n\n\nA signal that informs remote AllJoyn router of names available on the local AllJoyn router.\n\n\n\n\n\n\nDetachSession\n\n\nA signal sent out to detach a joiner from an existing session\n\n\n\n\n\n\n\n\norg.alljoyn.Daemon.ExchangeNames signal parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuniqueName\n\n\nList of one or more unique names available on the local AllJoyn router.\n\n\n\n\n\n\nWKNs\n\n\nList of one or more well-known names registered with each of the known unique name on the local AllJoyn router.\n\n\n\n\n\n\n\n\norg.alljoyn.Daemon.DetachSession signal parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsessionId\n\n\nAllJoyn session ID\n\n\n\n\n\n\nJoiner\n\n\nUnique name of the joiner\n\n\n\n\n\n\n\n\norg.alljoyn.Bus\n\n\nThe org.alljoyn.Bus interface is the main AllJoyn interface\nbetween the application and the AllJoyn router. The following\ntables summarize the org.alljoyn.Bus interface methods and\nsignals used for session-related functions.\n\n\norg.alljoyn.Bus interface methods\n\n\n\n\n\n\n\n\nMethod name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBusHello\n\n\nMethod used to exchange identifiers. This can be used between app and AllJoyn router, as well as between two AllJoyn router components.\n\n\n\n\n\n\nBindSessionPort\n\n\nMethod for an application to initiate binding a session port with the AllJoyn bus.\n\n\n\n\n\n\nUnbindSessionPort\n\n\nMethod for an application to unbind a session port with the AllJoyn bus.\n\n\n\n\n\n\nJoinSession\n\n\nMethod for an application to initiate joining a session.\n\n\n\n\n\n\nLeaveSession\n\n\nMethod for an application to initiate leaving an existing session.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.BusHello method parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nGUIDC\n\n\nin\n\n\nGUID of the client AllJoyn router.\n\n\n\n\n\n\nprotoVerC\n\n\nin\n\n\nAllJoyn protocol version of client AllJoyn router.\n\n\n\n\n\n\nGUIDS\n\n\nout\n\n\nGUID of the service side AllJoyn router.\n\n\n\n\n\n\nuniqueName\n\n\nout\n\n\nUnique name assigned to the bus-to-bus endpoint between two AllJoyn router components.\n\n\n\n\n\n\nprotoVerS\n\n\nout\n\n\nAllJoyn protocol version of service side of AllJoyn router.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.BindSessionPort method parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsessionPort\n\n\nin\n\n\nSpecified session port. Set to SESSION_PORT_ANY if app is asking AllJoyn router to assign a session port.\n\n\n\n\n\n\nopts\n\n\nin\n\n\nSpecified session options.\n\n\n\n\n\n\nresultCode\n\n\nout\n\n\nResult status\n\n\n\n\n\n\nsessionPort\n\n\nout\n\n\nSame as input sessionPort unless SESSION_PORT_ANY was specified. In the latter case, set to an AllJoyn router-assigned session port.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.UnbindSessionPort method parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsessionPort\n\n\nin\n\n\nSpecified session port.\n\n\n\n\n\n\nresultCode\n\n\nout\n\n\nResult status\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.JoinSession method parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsessionHost\n\n\nin\n\n\nWell-known name/unique name of the session creator.\n\n\n\n\n\n\nsessionPort\n\n\nin\n\n\nSpecified session port.\n\n\n\n\n\n\noptsIn\n\n\nin\n\n\nSession options requested by the joiner.\n\n\n\n\n\n\nresultCode\n\n\nout\n\n\nResult status\n\n\n\n\n\n\nsessionId\n\n\nout\n\n\nAssigned session ID.\n\n\n\n\n\n\nopts\n\n\nout\n\n\nFinal selected session options.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.LeaveSession method parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsessionId\n\n\nin\n\n\nSession ID of the session.\n\n\n\n\n\n\nresultCode\n\n\nout\n\n\nResult status\n\n\n\n\n\n\n\n\norg.alljoyn.Bus interface signals\n\n\n\n\n\n\n\n\nSignal name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSessionLost\n\n\nA signal that informs application when a session ends.\n\n\n\n\n\n\nMPSessionChanged\n\n\nA signal that informs application on changes to an existing session.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.SessionLost signal parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsessionId\n\n\nSession ID of the session that was just lost.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.MPSessionChanged signal parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsessionId\n\n\nSession ID that changed.\n\n\n\n\n\n\nname\n\n\nUnique name of the session member that changed.\n\n\n\n\n\n\nisAdd\n\n\nFlag indicating whether member was added. Set to true if the member has been added.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.Peer.Session\n\n\nThe org.alljoyn.Bus.Peer.Session interface is an AllJoyn\ninterface between application and the AllJoyn router. The\nfollowing tables summarize the org.alljoyn.Bus.Peer.Session\ninterface methods and signals used for session-related functions.\n\n\norg.alljoyn.Bus.Peer.Session interface methods\n\n\n\n\n\n\n\n\nMethod name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAcceptSession\n\n\nMethod for invoking accepting a session locally on the session host.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.Peer.Session.AcceptSession parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsessionPort\n\n\nin\n\n\nSession port that received the join request.\n\n\n\n\n\n\nsessionId\n\n\nin\n\n\nID for the new session (if accepted).\n\n\n\n\n\n\ncreatorName\n\n\nin\n\n\nSession creator unique name.\n\n\n\n\n\n\njoinerName\n\n\nin\n\n\nSession joiner unique name.\n\n\n\n\n\n\nopts\n\n\nin\n\n\nSession options requested by the joiner.\n\n\n\n\n\n\nisAccepted\n\n\nout\n\n\nSet to true if the creator accepts the session.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.Peer.Session interface signals\n\n\n\n\n\n\n\n\nSignal name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSessionJoined\n\n\nA signal sent locally on the session host to inform it that a session was successfully joined.\n\n\n\n\n\n\n\n\norg.alljoyn.Bus.Peer.SessionJoined signal parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsessionPort\n\n\nSession port of the session which was just lost.\n\n\n\n\n\n\nsessionId\n\n\nID for the new session.\n\n\n\n\n\n\ncreatorName\n\n\nSession creator unique name.\n\n\n\n\n\n\njoinerName\n\n\nSession joiner unique name.",
            "title": "Alljoyn session"
        },
        {
            "location": "/learn/core/system-description/alljoyn-session/#alljoyn-session",
            "text": "",
            "title": "AllJoyn&trade; Session"
        },
        {
            "location": "/learn/core/system-description/alljoyn-session/#overview",
            "text": "After an AllJoyn consumer has discovered some desired services\noffered by provider devices, the next step is to establish an\nAllJoyn session with the provider to consume those services.\nAn AllJoyn session is a logical connection between consumer\nand provider applications that allows these applications to\ncommunicate with each other and exchange data. A provider\napplication creates an AllJoyn session and waits for consumer\napplications to join the session. The application that creates\nthe session is the owner of the session (session host), and\nother applications are termed as joiners in that session.  On the provider side, the app binds a session port with the\nAllJoyn core library, specifying a list of session options\n(e.g., transports, session type, etc.) and then listens for\nconsumers to join the session. The session port is typically\nknown ahead of time to both the consumer and the provider app.\nAlternately, the session port can be discovered via the Announcement\nmessage received from that provider.  On the consumer side, the app requests the AllJoyn bus to join\nthe session with a given provider app by specifying the session\nport, well-known name/unique name for the service, and session\noptions (transport, session type, etc.). After this, the AllJoyn\nrouter initiates a session establishment flow between the consumer\nand the provider apps. A unique session ID gets assigned by the\nprovider to the AllJoyn session after the first client joins\nthe session. The session ID is sent back to the consumer app\nand should be used for subsequent communication with the provider.  The following figure shows the high-level architecture for the\nAllJoyn session establishment.   Figure:  AllJoyn session establishment architecture  The provider app binds a session port with the AllJoyn router\nfor a given service. The combination of (well-known name/unique\nname and session port) uniquely identifies the endpoint.\nThe consumer app starts a join session with the (well-known name/unique name +\nsession port number) of the provider app. The AllJoyn router\non the consumer side establishes a physical connection with\nthe provider AllJoyn router based on already discovered information\nas part of the discovery step. Currently, this involves establishing\na TCP connection or if a UDP Transport is used\nbetween the two routers for session setup, no physical channel\nneeds to be established.  After physical connection is established, the consumer AllJoyn router\nstarts the session establishment with the provider side. The provider\nAllJoyn router assigns a unique session ID for the session and also\ncreates a session map storing the relevant session information.\nOnce the session is established, a Session Joined callback is\nsent to the provider app with generated session ID. The consumer\napp receives a Status OK response for the join session call that\nincludes the session ID. A session map also gets created on the\nconsumer AllJoyn router side, storing session details.",
            "title": "Overview"
        },
        {
            "location": "/learn/core/system-description/alljoyn-session/#types-of-sessions",
            "text": "An AllJoyn session can be categorized into different types based\non the allowed number of participants in the session or the data\nencapsulation option used over the session.  The AllJoyn system supports the following types of session\nbased on allowed number of participants:   Point-to-point session: An AllJoyn session with a single\nconsumer (joiner) and single provider (session host) endpoints\nparticipates in the session. When either participant leaves\nthe session, the point-to-point session ends. A SessionLost\nindication is sent to the remaining participant.  Multi-Point Session: An AllJoyn session allows more than\ntwo participants. Such a session involves a provider app\n(session host app) and one or more consumer apps (joiner apps)\nparticipating in the same session. A multi-point session can\nbe joined multiple times to form a single session with multiple\n(greater than 2) endpoints. New consumers can join a multi-point\nsession after the session has been created, and existing consumers\ncan leave a multi-point session. All participants in a multi-point\nsession can communicate to each other.   In a multi-point session, all communications go through session host.\nSimilar to a point-to-point session, a multi-point session ends when two\nparticipants are left and one of them leaves the session.\nA SessionLost indication is sent to the remaining participant.  The following figure depicts point-to-point and multi-point\nAllJoyn sessions with the multi-point session showing four participants.   Figure:  AllJoyn point-to-point and multi-point session examples  Raw session  In the AllJoyn system, typical data exchange between peer nodes\noccurs in the form of enhanced D-Bus messages. However in some\nscenarios, the overhead associated with D-Bus messages may not\nbe desirable. In such cases, raw data can be exchanged between\nnodes using what is called an AllJoyn raw session.  An AllJoyn raw session is used to exchange raw data between\nendpoints using an underlying physical connection (e.g., TCP/UDP\nsocket-based communication). A raw session does not carry D-Bus\nencapsulated messages like a regular AllJoyn session.\nInstead, a raw session carries unencapsulated raw data directly\nsent over TCP/UDP sockets. A raw session can only be a\npoint-to-point session.  NOTE:  The raw session feature is only supported on the AllJoyn\nstandard client and is not supported on thin app. This feature\nis being deprecated and it is recommended that developers not\nto use the raw session feature.",
            "title": "Types of sessions"
        },
        {
            "location": "/learn/core/system-description/alljoyn-session/#point-to-point-session-establishment",
            "text": "The AllJoyn protocol version obtained from the BusHello message is used to\ndetermine which call flow is used.  Pre-15.04 Point to Point Session establishment  The following figure captures the AllJoyn session establishment\nmessage flow for a point-to-point session when either the producer or consumer\nis version 14.12 or earlier.   Figure:  AllJoyn point-to-point session establishment - 14.12 or earlier  This is the message flow when either the producer or consumer is version 14.12\nor earlier.   Both the provider and consumer apps connect with their\nrespective AllJoyn routers via the AllJoyn core library\nand get a unique name assigned.  The provider app registers service Bus Objects with the\nAllJoyn core library.  The provider app requests a well-known name with the\nAllJoyn router via the AllJoyn core library.  The provider app binds a session port with the AllJoyn router via the AllJoyn\nlibrary's  BindSessionPort  API. This call specifies a session port, session\noptions, and a SessionPortListener for the session.  The consumer app discovers the provider app using the AllJoyn Advertisement and Discovery mechanism.  The consumer app initiates joining the session with the\nprovider via the  JoinSession  API. This call specifies the unique name\nof session host, session port, desired session options, and a SessionListener.  The consumer side AllJoyn router establishes a physical\nchannel with the provider side AllJoyn router (as applicable). For\nTCP Transport, this involves setting up a TCP connection\nbetween the two AllJoyn routers. If a UDP Transport is used\nbetween the two routers for session setup, no physical channel\nneeds to be established.  Once a connection is set up between the two AllJoyn buses,\nthe consumer AllJoyn router initiates a  BusHello  message to\nsend its bus GUID and AllJoyn protocol version. The provider\nAllJoyn router responds with its GUID, AllJoyn protocol\nversion, and unique name. The protocol version received from the routing nodes\nduring the  BusHello  stage is used to determine if the pre-15.04 or post-15.04\ncall flow is used.  The consumer and provider AllJoyn routers send out  ExchangeNames \nsignals to exchange the set of known unique names and well-known names.  The consumer AllJoyn router invokes the  AttachSession \nmethod call at the provider AllJoyn router to join the session.\nThis call specifies the session port, session options, and unique\nname/well-known name of the session host among other parameters.  If the session opts are compatible, the provider AllJoyn router invokes an AcceptSession  method call with the provider app which returns 'true' if the\nsession gets accepted.\nRefer to section  Session options negotiation  for\ndetails of session opts compatibility.  In case of incompatible session opts or if the session is not accepted by\nthe provider app, an appropriate error code is sent back. If the session gets\naccepted, the provider AllJoyn router generates a unique sessionId for this\nsession and sends a successful response. It sends back an  AttachSession  response\n message to the consumer AllJoyn router providing the result and sessionId if\n applicable.  The provider AllJoyn router sends a SessionJoined signal\nto the provider app specifying the sessionId.  After receiving the  AttachSession  response, the consumer\nAllJoyn router sends a JoinSession response message to the\napp with an OK status and provides the session Id.   Post-15.04 Point to Point Session establishment  The following figure captures the AllJoyn session establishment\nmessage flow for a point-to-point session when both the producer and consumer\nare version 15.04 or later.   Figure:  AllJoyn point-to-point session establishment - 15.04 or later  This is the message flow when both the producer and consumer are version 15.04\nor later.   The call flow until the  BusHello  stage is the same as described in  Pre-15.04 Point to Point Session establishment .\nThe protocol version received from the routing nodes during the  BusHello  stage\nis used to determine if the pre-15.04 or post-15.04 call flow is used.  The consumer AllJoyn router invokes the  AttachSessionWithNames \nmethod call at the provider AllJoyn router to join the session. This call\nspecifies the session port, session options, and unique name/well-known name of\nthe session host among other parameters. As a part of this method call, the\n consumer AllJoyn router also sends out the names required for establishing the\n session. It may send out all names if it has been requested by the consumer or\n provider app.\n Refer to  Names sent as a part of AttachSessionWithNames  for more details.  If the session opts are compatible, the provider AllJoyn router invokes an AcceptSession  method\ncall with the provider app which returns 'true' if the session gets accepted.\nRefer to section  Session options negotiation  for\ndetails of session opts compatibility.  In case of incompatible session opts or if the session is not accepted by\nthe provider app, an appropriate error code is sent back. If the session gets\naccepted, the provider AllJoyn router generates a unique sessionId for this\nsession. It sends back an  AttachSessionWithNames  response message to the\nconsumer AllJoyn router providing the result and sessionId if applicable.\nThe provider AllJoyn router also sends out the names required for establishing\nthe session as a part of the response. It may send out all names if it has been\nrequested by the consumer or provider app.\n Refer to  Names sent as a part of AttachSessionWithNames  for more details.  The provider AllJoyn router sends a SessionJoined signal\nto the provider app specifying the sessionId.  After receiving the  AttachSessionWithNames  response, the consumer\nAllJoyn router sends a JoinSession response message to the\napp with an OK status and provides the session Id.",
            "title": "Point to Point Session establishment"
        },
        {
            "location": "/learn/core/system-description/alljoyn-session/#multipoint-session-establishment",
            "text": "The following use cases illustrate various AllJoyn session scenarios:   Establish a multi-point session  Consumer joins an existing multi-point session  Consumer leaves a point-to-point Session  Consumer leaves a multi-point session with more than 2 participants  Provider unbinds a session port   Establish a multi-point session  The following figure captures the session establishment\nmessage flow for a multi-point session between two participants.   Figure:  AllJoyn session - establishing a multi-point session  A multi-point session follows same message flow as the\npoint-to-point session with the additional step of sending\nout the  MPSessionChanged  signal from the AllJoyn router\nto the application indicating new participant. This signal\nspecifies the sessionId, the unique name/well-known name\nof the participant, and a flag to indicate whether the\nparticipant was added.  Consumer joins an existing multi-point session  The following figure captures the message flow for the\nscenario where a new consumer joins an existing multi-point session.  In a multi-point session, the new joiner is responsible\nfor notifying existing participants (other than session host)\nof the newly added member to the session. This is so that\nexisting members can update their session routing information\nto include the new joiner, and future session messages can be\nrouted appropriately. To achieve this, the new member invokes\nan  AttachSession  with all existing members. This results in\nexisting members adding the new joiner to their session-related tables.  Consumer joins an existing multi-point session - Pre-15.04 call flow   Figure:  AllJoyn session - consumer joins a multi-point session - 14.12 or earlier  The message flow steps are described below.   The provider and consumer app are set up and the consumer discovers the producer app\nby using the AllJoyn Advertisement and Discovery mechanism.  The AllJoyn session establishment steps occur between\njoiner 1 (consumer 1) and the session host (provider) to\nestablish a multi-point session as captured in  Establish a\nmulti-point session .  Consumer 2 (joiner 2) wants to join the existing multi-point\nsession, and initiates a JoinSession call with its AllJoyn router.  The joiner 2 AllJoyn router establishes a physical\nchannel with the provider side AllJoyn router (as applicable). For\nTCP Transport, this involves setting up a TCP connection\nbetween the two AllJoyn routers. If a UDP Transport is used\nbetween the two routers for session setup, no physical channel\nneeds to be established.  Once a connection is set up between the two AllJoyn buses,\nthe consumer AllJoyn router initiates a  BusHello  message to\nsend its bus GUID and AllJoyn protocol version. The provider\nAllJoyn router responds with its GUID, AllJoyn protocol\nversion, and unique name.  The joiner 2 and provider AllJoyn routers send out  ExchangeNames \nsignals to exchange the set of known unique names and well-known names. The provider AllJoyn router forwards this  ExchangeNames  to all other connected routers including the joiner 2 AllJoyn router.  The AllJoyn session establishment steps occur between\njoiner 2 and the session host to add this joiner to the\nexisting multi-point session.  An  MPSessionChanged  signal is sent out to the session\nhost app informing it of new joiner in the session.  Joiner 2 receives the set of existing members for the\nmulti-point session from the session host as part of the AttachSession  response.  Joiner 2 initiates an  AttachSession  with every received\nmember of the session (except the session host, which it\njust did using the  AttachSession ) and sends it to the session host.  The session host forwards this  AttachSession  to the existing session member.  Joiner 1 receives  AttachSession  from joiner 2 and updates\nits session-related tables to add joiner 2.  The AllJoyn router on joiner 1 sends out an  MPSessionChanged \nsignal to the app, indicating a newly added member to the\nmulti-point session.  Joiner 2 also sends out separate  MPSessionChanged  signal\nto the app for each existing member of the session.   Consumer joins an existing multi-point session - Post-15.04 call flow   Figure:  AllJoyn session - consumer joins a multi-point session - 15.04 or later  The message flow steps are described below.   The provider and consumer app are set up and the consumer discovers the producer app\nby using the AllJoyn Advertisement and Discovery mechanism.  The AllJoyn session establishment steps occur between\njoiner 1 (consumer 1) and the session host (provider) to\nestablish a multi-point session as captured in  Establish a\nmulti-point session .  Consumer 2 (joiner 2) wants to join the existing multi-point\nsession, and initiates a JoinSession call with its AllJoyn router.  The AllJoyn session establishment steps occur between\njoiner 2 and the session host to add this joiner to the\nexisting multi-point session and exchanges the necessary names.\nRefer to  Names sent as a part of AttachSessionWithNames  for more details.  An  MPSessionChanged  signal is sent out to the session\nhost app informing it of new joiner in the session.  Joiner 2 receives the set of existing members for the\nmulti-point session from the session host as part of the AttachSessionWithNames  response.  Joiner 2 initiates an  AttachSessionWithNames  with every received\nmember of the session (except the session host, which it\njust did using the  AttachSessionWithNames ) to the session host.  The session host forwards this  AttachSessionWithNames  to the existing\nsession member and sends the unique name and aliases of the joiner app and its\nrouting node.  Refer to  Names sent as a part of AttachSessionWithNames  for more details.  Joiner 1 receives  AttachSessionWithNames  from joiner 2 and updates\nits session-related tables to add joiner 2 and sends a response back to the\nsession host AllJoyn Router.  The session  host AllJoyn Router forwards this response back to the\nJoiner 2 routing node.  The AllJoyn router on joiner 1 sends out an  MPSessionChanged \nsignal to the app, indicating a newly added member to the\nmulti-point session.  Joiner 2 also sends out separate  MPSessionChanged  signal\nto the app for each existing member of the session.   Consumer leaves a point-to-point session  The following figure captures the message flow for the scenario\nwhere a consumer leaves an existing point-to-point session.\nThe same message flow is also applicable for the scenario when\na consumer leaves a multi-point session with only two participants.  When a participant leaves a point-to-point session or a multi-point\nsession with only two participants, the session ends and is removed\nfrom session tables of both the participants. A participant can\nleave a session by initiating a LeaveSession call with the AllJoyn\nrouter. This results in a DetachSession signal being delivered\nto the other member of the session. Receipt of this signal triggers\nclearing of sessionId and other session-related information\nfrom the session tables of that member. Whenever a session ends,\na SessionLost signal is sent to the application.    NOTE:  Either the joiner or the host of the session can leave\na session. A similar message flow is applicable when a session\nhost leaves the session.   Figure:  AllJoyn session - consumer leaves a point-to-point session  The message flow steps are described below.   The consumer app establishes a session with the session host.  The consumer app decides to leave the session. It invokes\na LeaveSession API with the AllJoyn router via the AllJoyn\ncore library. This call takes in the sessionId as input parameter.  The AllJoyn router generates a DetachSession signal specifying\nthe sessionId and the member that is leaving the session.\nThis signal is sent to the other member in the session.  After receiving the DetachSession signal, the AllJoyn router\non the session host determines that it is the only member\nleft in the session. As a result, it concludes that the session\nhas ended and clears sessionId details from its session tables.  The AllJoyn router on the consumer side clears sessionId\ndetails from its session tables and sends a successful\nLeaveSession response to the application.  The AllJoyn router on the session host sends a SessionLost\nsignal to the application indicating that the session has ended.   Consumer leaves a multi-point session  The following figure captures the message flow for the scenario\nwhere a consumer leaves a multi-point session with more\nthan two participants.\nIn this scenario, the session continues with remaining\nparticipants even after a member leaves the session.\nThe remaining participants update their session tables to\nremove the member that left the session.   Figure:  AllJoyn session - consumer leaves a multi-point session  The message flow steps are described below.   Two consumer apps (joiner 1 and joiner 2) have joined in\na single multi-point session with the provider.  Joiner 2 decides to leave the session. It invokes a\nLeaveSession API with the AllJoyn router, specifying the sessionId.  The AllJoyn router on joiner 2 generates a DetachSession\nsignal, specifying the sessionId and the member that is\nleaving the session. This signal is sent as a session broadcast\nsignal to all the other members in the session.  Upon receiving the DetachSession signal, the AllJoyn router\ninvolved in the multi-point session determines that there\nare two or more remaining participants in the session,\nmeaning the session will continue to exist. As a result,\nit updates its session tables to remove the member received\nin the DetachSession signal for that sessionId. The AllJoyn\nrouter then sends an  MPSessionChanged  signal to the app\nindicating member deletion for that session. This logic is\nexecuted by the AllJoyn router for every remaining participant\nin the session.  The AllJoyn router on the member leaving the session clears\nsessionId details from its session tables and sends a successful\nLeaveSession response to the application.   Provider leaves a multi-point session  The following figure captures the message flow for the scenario\nwhere a provider (session host) leaves a multi-point session\nwith more than two participants. In this case, the session\ncontinues to exist and the remaining participants can continue\nto communicate; however, no new participants can join the multi-point session.   Figure:  AllJoyn session - provider leaves a multi-point session  Provider unbinds a session port  The provider app can unbind a previously bound session port\nat any time. As a result, no new sessions can be established\non that session port. Any existing sessions on that session\nport will continue and are not impacted. If there was any multi-point\nsession on that session port, no new members can be added to\nthat multi-point session.",
            "title": "Multipoint Session Establishment"
        },
        {
            "location": "/learn/core/system-description/alljoyn-session/#session-options",
            "text": "The following tables capture the session options and values supported\nfor the AllJoyn session. Traffic, proximity, and transports\nfields in the session option are specified as bit masks with values.     Option  Description  Data type      traffic  Specifies type of traffic sent over the session  byte    isMultipoint  Specifies whether the session is multi-point or point-to-point.  bool    proximity  Specifies the proximity scope for this session  byte    transports  Specifies the allowed transports for this Session  short    nameTransfer  Name transfer type of session - Internal use only  byte     Traffic session allowed values     Name  Value  Description      TRAFFIC_MESSAGES  0x01  Use reliable message-based communication to move data between session endpoints.    TRAFFIC_RAW_UNRELIABLE  0x02  Use unreliable (e.g., UDP) socket-based communication to move data between session endpoints. This creates a raw session where MESSAGE encapsulation is not used.    TRAFFIC_RAW_RELIABLE  0x04  Use reliable (e.g., TCP) socket-based communication to move data between session endpoints. RAW. This creates a raw session where MESSAGE encapsulation is not used.     IsMultipoint session allowed values     Name  Value  Description      N/A  true  A multi-point capable session. A multi-point session can be joined multiple times to form a single session with multiple (  2) endpoints.    N/A  false  Session is not multi-point capable. Each join attempt will create a new point-to-point session.     Proximity session allowed values  NOTE:  The PROXIMITY_PHYSICAL and PROXIMITY_NETWORK options are\nnot supported semantically today, meaning no enforcement is\ndone for spatial scope. Only bit matching is done for these\noptions when looking to find a set of compatible set of\nsession options. AllJoyn system provides flexibility to\nsupport specific semantics for these options in future if needed.     Name  Value  Description      PROXIMITY_ANY  0xFF  Spatial scope of the session is not limited. Session can be joined by joiners located anywhere.    PROXIMITY_PHYSICAL  0x01  Spatial scope of session is limited to the local host. Interpreted as \"the same physical machine.\" Session can be joined by joiners located only on the same physical machine as the one hosting the session.    PROXIMITY_NETWORK  0x02  Spatial scope of session is limited to anywhere on the local logical network segment. Session can be joined by joiners located anywhere on the network.     Transports session allowed values     Name  Value  Description      TRANSPORT_NONE  0x0000  Use no transport to communicate with a given session.    TRANSPORT_LOCAL  0x0001  Use only the local transport to communicate with a given session.    TRANSPORT_TCP  0x0004  Use only the TCP transport to communicate with a given session.    TRANSPORT_UDP  0x0100  Use only the UDP/ARDP transport to communicate with a given session.    TRANSPORT_EXPERIMENTAL  0x8000  Use only the experimental transport that has not yet reached the performance, stability or testing requirements of a commercialized transport to communicate with a given session.    TRANSPORT_IP  TRANSPORT_TCP     TRANSPORT_UDP  Use any IP based transport to communicate with a given session    TRANSPORT_ANY  TRANSPORT_LOCAL     TRANSPORT_IP  Use any commercialized transport.     Names sent as a part of AttachSessionWithNames  AllJoyn routers only exchange names required for establishing a session unless\nspecifically requested by the consumer and/or producer app. The app can request\nfor the routers to exchange all names by invoking the  SetAllNames  API on the\nsessionOpts or by passing  exchangeAllNames=true  in the  SessionOpts  constructor.\nThe app may invoke the  SetSessionNames  API on the sessionOpts to reset to the\ndefault behavior of exchanging only the required names.  Behavior when Session Names option is used  Point to point session: The Consumer and Provider AllJoyn routing nodes exchange\nunique name and aliases of the routing node and session host/joiner app only as\na part of the  AttachSessionWithNames  method call/response.  Multipoint session: The Consumer AllJoyn routing node sends the unique name and\naliases of the routing node and session joiner app only. The Provider routing\nnode sends the unique names and aliases of the routing node, host and existing\nmembers and their routing nodes. When the provider forwards an AttachSessionWithNames  to an existing session member, it sends out the unique\nname and aliases of the joiner app and routing node.  Behavior when All Names option is used  Unique names of all locally and remotely connected router and leaf nodes are\nexchanged as a part of the  AttachSessionWithNames  and its response.\nIn this case the names exchanged are identical to the ones exchanged between pre-15.04 routing nodes except that the names are exchanged as a part of  AttachSessionWithNames  instead of a separate  ExchangeNames  signal.  Session options negotiation  A compatible set of session options must be agreed upon\nbetween two endpoints to establish a session. If a compatible\nset of session options cannot be established between two\nendpoints, session establishment fails.\nSession options negotiation occurs between session options\nprovided by the provider app at the time of invoking BindSessionPort(...)  and the session options requested\nby the consumer app when invoking the  JoinSession(...) .   For certain session options, e.g., traffic, an\nexact match must occur between the provider and consumer\nsession options for negotiation to be successful.  For certain session options, e.g. isMultipoint, the option provided by\nthe producer is used.  For other session options, the negotiation happens to the\nlowest common session option level. Exact details of session\noptions negotiation is outside the scope of this document.",
            "title": "Session options"
        },
        {
            "location": "/learn/core/system-description/alljoyn-session/#detecting-missing-or-slow-endpoints",
            "text": "The AllJoyn Router supports a probing mechanism to detect\nother missing routers and missing applications so that\nresources can be cleaned up for missing endpoints. Separate\nlogic is supported for detecting other missing routers and\napplications as described in  Probing mechanism for detecting missing routers \nand  Probing mechanism for detecting missing applications .  The AllJoyn router also supports logic to detect and disconnect\nany AllJoyn applications or other AllJoyn routers that are\nslower to read data than the minimum desired performance level.\nThis logic is captured in  Detecting a slow reader .  Once a remote endpoint (an application or anther router) is\ndisconnected based on probing mechanism or slow reader detection\nlogic, the AllJoyn router will clean up any connection slots,\nactive advertisements and sessions associated with the remote\nendpoint. The AllJoyn router will also send SessionLost, MPSessionChanged  and  DetachSession  signals to participants\nthat are in a session with the disconnected remote application\nor in a session with applications connected to the disconnected\nremote router.  Probing mechanism for detecting missing routers  The AllJoyn router provides a  SetLinkTimeout()  API which\ncan be invoked by the application to detect missing routers.\nThe application provides an idle timeout value as part of the\nAPI, which should be greater than or equal to the minimum value\n(40 sec) defined at the router. A single probe is sent to the\nother router after inactivity is detected for idle timeout period.\nIf no response is received in probe timeout period (10 sec), that\nrouter is disconnected and all associated connection slots,\nactive advertisements and sessions are cleaned up.  This functionality to detect missing routers is not enabled\nby default. An app needs to call the  SetLinkTimeout()  API\nto enable it.  Probing mechanism for detecting missing applications  The AllJoyn router provides a probing mechanism using DBus\npings to detect missing AllJoyn applications. The following\nparameters determine the transmission schedule of the DBus pings:  Number of probes(N): Total number of DBus pings sent.  Idle timeout(I): Time after which the first DBus ping will be sent.\n* Probe timeout(P): Time after which subsequent DBus ping\nwill be sent if a reply to the previous ping has not yet been received.  The values of the above parameters are specific to the AllJoyn TCP versus\nUDP Transport over which the AllJoyn application is connected\nto the AllJoyn router.  The following figure shows the transmission schedule of the DBus pings.   Figure:  Probe transmission schedule for detecting missing apps  Connected AllJoyn applications will be able to select values\nfor idle and probe timeouts within a transport specific range\nby invoking the  SetIdleTimeouts()  API. The call specifies\nthe requested idle and probe timeouts and returns the actual\nvalues for the idle and probe timeouts.  Detecting a slow reader  In order to maintain quality of service, the AllJoyn router\nwill disconnect any AllJoyn applications or AllJoyn routers\nthat are slower than the minimum desired performance level.  The AllJoyn router will disconnect a remote AllJoyn application/router\nin either of the following scenarios:  Once the network send buffer on the router and network\nreceive buffer on remote application/router are both full,\nthe remote application/router does not read data fast enough\nto be able to fit the pending AllJoyn message within the\nSend Timeout period.  More than (10 * Send timeout) control messages originating\nfrom the router are currently queued for the remote application/router.  The value of the Send timeout is specific to the TCP or UDP\ntransport over which the remote AllJoyn application/router is\nconnected to this AllJoyn router.",
            "title": "Detecting missing or slow endpoints"
        },
        {
            "location": "/learn/core/system-description/alljoyn-session/#methodssignals-used-for-an-alljoyn-session",
            "text": "The AllJoyn framework supports session-related functionality\nas part of the following AllJoyn interfaces:   org.alljoyn.Daemon  org.alljoyn.Bus  org.alljony.Bus.Peer.Session   This section provides a summary of methods and signals from\nthese interfaces used for AllJoyn session-related functionality.  org.alljoyn.Daemon  The org.alljoyn.Daemon interface is the main over-the-wire\ninterface used for communication between two AllJoyn router\ncomponents. The following tables summarize the org.alljoyn.Daemon\ninterface methods and signals used for session-related functions.  org.alljoyn.Daemon interface methods     Method name  Description      AttachSession  Method for a remote AllJoyn router to attach a session with this AllJoyn router.    GetSessionInfo  Method for a remote AllJoyn router to get session information from this AllJoyn router.     org.alljoyn.Daemon.AttachSession method parameters     Parameter name  Direction  Description      session port  in  AllJoyn session port    Joiner  in  Unique name of the joiner    creator  in  Unique name or well-known name of the session host    dest  in  Unique name of the destination for the AttachSession. For point-to-point session, this is same as creator. For multi-point session, this field can be different than the creator.    b2b  in  Unique name of the bus-to-bus end point on the joiner side. This is used to set up the message routing path for the session.    busAddr  in  A string indicating how to connect to the bus endpoint, for example, \"tcp:192.23.5.6, port=2345\"    optsIn  in  Session options requested by the joiner.    status  out  Session join status    sessionId  out  Assigned session ID    optsOut  out  Final selected session options    members  out  List of session members     org.alljoyn.Daemon.AttachSessionWithNames method parameters     Parameter name  Direction  Description      session port  in  AllJoyn session port    Joiner  in  Unique name of the joiner    creator  in  Unique name or well-known name of the session host    dest  in  Unique name of the destination for the AttachSession. For point-to-point session, this is same as creator. For multi-point session, this field can be different than the creator.    b2b  in  Unique name of the bus-to-bus end point on the joiner side. This is used to set up the message routing path for the session.    busAddr  in  A string indicating how to connect to the bus endpoint, for example, \"tcp:192.23.5.6, port=2345\"    optsIn  in  Session options requested by the joiner.    names  in  List of unique and well known names    status  out  Session join status    sessionId  out  Assigned session ID    optsOut  out  Final selected session options    members  out  List of session members    names  out  List of unique and well known names     org.alljoyn.Daemon.GetSessionInfo method parameters     Parameter name  Direction  Description      creator  in  Unique name for the app that bound the session port.    session port  in  Session port.    optsIn  in  Session options requested by the joiner.    busAddr  out  Returned bus address for the session to use when attempting to create a connection for joining the session, for example, \"tcp:192.23.5.6, port=2345\"     org.alljoyn.Daemon interface signals     Signal name  Description      ExchangeNames  A signal that informs remote AllJoyn router of names available on the local AllJoyn router.    DetachSession  A signal sent out to detach a joiner from an existing session     org.alljoyn.Daemon.ExchangeNames signal parameters     Parameter name  Description      uniqueName  List of one or more unique names available on the local AllJoyn router.    WKNs  List of one or more well-known names registered with each of the known unique name on the local AllJoyn router.     org.alljoyn.Daemon.DetachSession signal parameters     Parameter name  Description      sessionId  AllJoyn session ID    Joiner  Unique name of the joiner     org.alljoyn.Bus  The org.alljoyn.Bus interface is the main AllJoyn interface\nbetween the application and the AllJoyn router. The following\ntables summarize the org.alljoyn.Bus interface methods and\nsignals used for session-related functions.  org.alljoyn.Bus interface methods     Method name  Description      BusHello  Method used to exchange identifiers. This can be used between app and AllJoyn router, as well as between two AllJoyn router components.    BindSessionPort  Method for an application to initiate binding a session port with the AllJoyn bus.    UnbindSessionPort  Method for an application to unbind a session port with the AllJoyn bus.    JoinSession  Method for an application to initiate joining a session.    LeaveSession  Method for an application to initiate leaving an existing session.     org.alljoyn.Bus.BusHello method parameters     Parameter name  Direction  Description      GUIDC  in  GUID of the client AllJoyn router.    protoVerC  in  AllJoyn protocol version of client AllJoyn router.    GUIDS  out  GUID of the service side AllJoyn router.    uniqueName  out  Unique name assigned to the bus-to-bus endpoint between two AllJoyn router components.    protoVerS  out  AllJoyn protocol version of service side of AllJoyn router.     org.alljoyn.Bus.BindSessionPort method parameters     Parameter name  Direction  Description      sessionPort  in  Specified session port. Set to SESSION_PORT_ANY if app is asking AllJoyn router to assign a session port.    opts  in  Specified session options.    resultCode  out  Result status    sessionPort  out  Same as input sessionPort unless SESSION_PORT_ANY was specified. In the latter case, set to an AllJoyn router-assigned session port.     org.alljoyn.Bus.UnbindSessionPort method parameters     Parameter name  Direction  Description      sessionPort  in  Specified session port.    resultCode  out  Result status     org.alljoyn.Bus.JoinSession method parameters     Parameter name  Direction  Description      sessionHost  in  Well-known name/unique name of the session creator.    sessionPort  in  Specified session port.    optsIn  in  Session options requested by the joiner.    resultCode  out  Result status    sessionId  out  Assigned session ID.    opts  out  Final selected session options.     org.alljoyn.Bus.LeaveSession method parameters     Parameter name  Direction  Description      sessionId  in  Session ID of the session.    resultCode  out  Result status     org.alljoyn.Bus interface signals     Signal name  Description      SessionLost  A signal that informs application when a session ends.    MPSessionChanged  A signal that informs application on changes to an existing session.     org.alljoyn.Bus.SessionLost signal parameters     Parameter name  Description      sessionId  Session ID of the session that was just lost.     org.alljoyn.Bus.MPSessionChanged signal parameters     Parameter name  Description      sessionId  Session ID that changed.    name  Unique name of the session member that changed.    isAdd  Flag indicating whether member was added. Set to true if the member has been added.     org.alljoyn.Bus.Peer.Session  The org.alljoyn.Bus.Peer.Session interface is an AllJoyn\ninterface between application and the AllJoyn router. The\nfollowing tables summarize the org.alljoyn.Bus.Peer.Session\ninterface methods and signals used for session-related functions.  org.alljoyn.Bus.Peer.Session interface methods     Method name  Description      AcceptSession  Method for invoking accepting a session locally on the session host.     org.alljoyn.Bus.Peer.Session.AcceptSession parameters     Parameter name  Direction  Description      sessionPort  in  Session port that received the join request.    sessionId  in  ID for the new session (if accepted).    creatorName  in  Session creator unique name.    joinerName  in  Session joiner unique name.    opts  in  Session options requested by the joiner.    isAccepted  out  Set to true if the creator accepts the session.     org.alljoyn.Bus.Peer.Session interface signals     Signal name  Description      SessionJoined  A signal sent locally on the session host to inform it that a session was successfully joined.     org.alljoyn.Bus.Peer.SessionJoined signal parameters     Parameter name  Description      sessionPort  Session port of the session which was just lost.    sessionId  ID for the new session.    creatorName  Session creator unique name.    joinerName  Session joiner unique name.",
            "title": "Methods/signals used for an AllJoyn session"
        },
        {
            "location": "/learn/core/system-description/alljoyn-transport/",
            "text": "AllJoyn\n Transport\n\n\nOverview\n\n\nAllJoyn Transport is an abstraction for a concrete mechanism \nthat is used to move AllJoyn Messages (corresponding to a \nmethod call, method reply, a property get/set or a signal) \nbetween AllJoyn applications.\n\n\nThe AllJoyn Transport provides the following fundamental \npieces of functionality:\n\n The ability to create and destroy connections between \nAllJoyn applications (through AllJoyn routers) and between \nAllJoyn applications and routers.\n\n The ability to reliably send and receive AllJoyn Messages \nbetween AllJoyn applications and routers.\n\n* Optionally, to provide advertisement and discovery services \nappropriate to the underlying network technology.\n\n\nThe AllJoyn Transport supports connections establishment and \ndelivering messages over multiple underlying physical transport \nlayers including TCP, UDP and local UNIX transport. A complete \nlist of underlying transports supported by the AllJoyn Transport \nis captured in \nAllJoyn TransportMask definition\n.\nAn application can specify which underlying transport to be \nused for connection establishment and message delivery.\n\n\nBased on the type of connection endpoints, AllJoyn Transport functionality can be \ndivided into the following categories:\n\n \nLocal AllJoyn Transports\n: Local AllJoyn Transports are designed \nto essentially provide communication between Core Library \nand associated AllJoyn Router. This supports connection establishment \nand message routing between Application and the Router. Details \non Local Transports are captured in \nLocal AllJoyn Transports\n.\n\n \nBus-to-Bus AllJoyn Transports\n: These AllJoyn Transports enable \nconnection establishment and message routing between AllJoyn \nrouters. Details on Bus-to-Bus Transports are captured in \n\nBus-to-Bus AllJoyn Transports\n.\n\n\nEndpoints usage in AllJoyn Transports\n\n\nAs mentioned in \nAllJoyn endpoints\n, the \nAllJoyn Transport uses endpoints to establish connections \nand route messages across applications and routers. An AllJoyn \nEndpoint is analogous to a socket endpoint as used in socket \nprogramming. An AllJoyn Endpoint is one side of an AllJoyn communication \nlink. The AllJoyn communication link could be between an Application \nand an AllJoyn router, or it could be between two AllJoyn routers. \n\n\nThe broad classification of endpoints in the AllJoyn system are listed below:\n\n \nLocal Endpoint\n: A local endpoint represents a connection \nto self. It is used in the Core Library to provide a connection \nto the application itself and used in the AllJoyn Router to \nprovide connection to the router itself. A local endpoint \nrepresents a connection within the same process.\n\n \nRemote Endpoint\n: A remote endpoint represents a connection \nbetween the application and the AllJoyn router. Messages destined \nto an applications get routed to its remote endpoint. A specialized \ntype of remote endpoint called \"Bus-to-Bus\" endpoint represents \nconnection between two AllJoyn Routers. A remote endpoint represents \na connection between two processes.\n\n\nThe following figure shows the concepts of local and remote endpoints. \n\n\n\n\nFigure:\n Local and remote endpoints\n\n\nThe figure illustrates a hypothetical connection between an AllJoyn application \nand a preinstalled Router. The AllJoyn application talks to a Core Library \nthat provides the gateway to the larger AllJoyn distributed bus.\n\nThe Core Library has two main connections: the connection to the \napplication, which is provided through what is called the Local Endpoint, \nand the connection to the Router, which is represented by a Remote Endpoint.\n\n\nThe AllJoyn Router also has a corresponding Remote Endpoint to represent \nthe endpoint of the communication link with the Core Library for routing \nmessages. The Local endpoint within the AllJoyn Router represents a \nconnection to the router for routing control messages destined for the router. \n\n\nMultiple applications can connect to a single AllJoyn Router in a \ndistributed bus architecture. An AllJoyn router maintains a remote \nendpoint to each connected application as shown in the following\nfigure (AllJoyn router wiht multiple remote endpoints). \n\n\n\n\nFigure:\n AllJoyn router with multiple remote endpoints\n\n\nBoth the Core Library and the router maintain remote endpoints, \nhowever they differ in terms of message routing functionality - \nan AllJoyn Router can move (route) messages between Remote Endpoints, \nwhereas a Core Library only moves messages between exactly \none Local and exactly one Remote Endpoint. \n\n\nThe AllJoyn system supports a fully distributed bus configuration, \nwhere a router communicates with other routers to join bus segments \ninto a single distributed AllJoyn bus as shown in the following figure. \n\n\n\n\nFigure:\n AllJoyn distributed bus with bus-to-bus endpoints\n\n\nIn this figure, one bus segment comprising an AllJoyn Router and \ntwo Applications is shown in the top half. Another bus segment, \nalso with an AllJoyn Router and two Applications, is shown in the \nbottom half of the figure. \n\n\nThe two bus segments are connected together via remote endpoints \ncalled Bus-to-Bus Endpoints. Each router maintains a Bus-to-Bus Endpoint \nfor every other router it is connected to. In the figure, \nOne Bus-to-Bus Endpoint represents the connection to the upper \nRouting Node and another Bus-to-Bus Endpoint represents the \nconnection to the lower Routing Node. \n\n\nThe Remote Endpoints are paired with an underlying communication \nmechanism as part of the associated AllJoyn Transport. For example, \nthe Bus-to-Bus Endpoints in the Routing Nodes may be managed by \nthe TCP Transport or the UDP Transport, which also handles the \ndetails of moving Messages from one end (Endpoint) of the implied \nconnection to another.\n\n\nIn the case of the Remote Endpoints that connect the Core Library \nto the AllJoyn Router, the underlying communication mechanism \ncould be different based on host environments. For example, a \nUNIX domain sockets implementation is used on Linux systems, \nwhile a TCP implementation is used on Windows systems.\n\n\nThin Core Library Endpoints\n\n\nThe Thin Core Library (TCL) makes use of the TCP Transport, \nhowever its implementation is quite different than the regular \nTCP Transport connection between a Core Library and AllJoyn Router.  \n\n\nOn the TCL, there is no explicit breaking out of a Remote Endpoint \nand a Local Endpoint. The TCL provides minimal implementation of the \nfunctionality required to connect and communicate with the \nTCP Remote Endpoint at the Alljoyn Router hosted on another \nAllJoyn device. \n\n\nOn the Routing Node side, a Thin Library device connects as \nif it was any local Core Library connecting using a local \nTCP loopback connection. \n\n\nNOTE:\n This is how Bus Attachments connect to Routing Nodes in \nthe Windows environment. The TCP transport is used for the \nconnection, but the data does not actually travel across the \nnetwork; but rather is \"looped back\" and sent back up the \nnetworking stack before being sent out on a connected IP network.\n\n\nThe Thin Library Endpoint usage is captured in the following figure.\n\n\n\n\nFigure:\n Thin Core Library Endpoint\n\n\nAllJoyn Transport in Networking Model\n\n\nAlthough the primary task of an AllJoyn transport is to \ntransport, or move, AllJoyn Messages from one endpoint to another, \nit is important to distinguish the AllJoyn Transport from the \nconcept of transport layer (layer 4) in the International \nStandards Organization Open Systems Interconnection (ISO/OSI) \n7-layer model.\n\n\nThe following figure shows where AllJoyn Transports fit in the \n7-layer ISO/OSI model. \n\n\n\n\nFigure:\n AllJoyn transport in the ISO/OSI 7-layer model\n\n\nUnderneath the Application Logic, there exists an AllJoyn Message \nlayer which is responsible for marshaling and unmarshaling of \nAllJoyn messages (Signals and Method Calls). This layer can be \nthought of as residing in the presentation layer (layer 6) \nof the ISO/OSI model. \n\n\nThese AllJoyn messages are routed to their intended destination \nby the AllJoyn Transport layer. Since the AllJoyn Transport layer \nmanages connections across applications and AllJoyn routers in \nthe network, it can be thought of corresponding to the session \nlayer (layer 5) of the ISO/OSI model. AllJoyn Transports make \nuse of layer 4 transports like TCP or UDP in order to manage \nthe actual movement of AllJoyn messages between various network entities.\n\n\nSince an AllJoyn Transport encapsulates the functions of moving \ndata sequences, establishing connections, advertisement and discovery, \nthere are separate AllJoyn Transports for separate underlying \ntransport mechanisms.\n\n\n The AllJoyn TCP Transport uses TCP/IP as the mechanism for moving data.\n\n The AllJoyn UDP Transport uses UDP/IP as the mechanism for moving data. \n\n The AllJoyn Bluetooth (BT) Transport does the same for Bluetooth \nconnections.\n\n The AllJoyn Local Transport uses UNIX domain sockets. \n\n\nThe name given to an AllJoyn transport typically echoes the method \nused in the underlying OSI layer 4 mechanism.  \n\n\nAn AllJoyn applications may select the AllJoyn Transport that \nis actually used by choosing one or more TransportMask bits \nin the appropriate AllJoyn APIs. The currently available \nTransportMask bits are shown in the following table. \n\n\nAllJoyn TransportMask definition\n\n\n\n\n\n\n\n\nTransport name\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTRANSPORT_NONE\n\n\n0x0000\n\n\nNo transport.\n\n\n\n\n\n\nTRANSPORT_LOCAL\n\n\n0x0001\n\n\nThe local transport.\n\n\n\n\n\n\nTRANSPORT_TCP\n\n\n0x0004\n\n\nTransport using TCP as the underlying mechanism.\n\n\n\n\n\n\nTRANSPORT_UDP\n\n\n0x0100\n\n\nTransport using UDP as the underlying mechanism.\n\n\n\n\n\n\nTRANSPORT_EXPERIMENTAL\n\n\n0x8000\n\n\nSelect a release-specific experimental transport.\n\n\n\n\n\n\nTRANSPORT_IP\n\n\n0x0104\n\n\nAllow the system to decide between TCP or UDP.\n\n\n\n\n\n\nTRANSPORT_ANY\n\n\n0x0105\n\n\nAllow the system to choose any appropriate transport.\n\n\n\n\n\n\n\n\nIf an AllJoyn application desires to only use TCP as the \nunderlying layer 4 mechanism, it can do so by specifying \nTRANSPORT_TCP in advertisement, discovery and Session join \nand bind options. If an application desires only that an \nIP-based transport be used, it can specify TRANSPORT_IP and \nallow the AllJoyn system to select between TCP and UDP, for example.  \n\n\nEach transport establishes and maintains connectivity based \non the underlying physical transport it supports. Based on the \ntype of underlying physical transport, the actual connectivity \nbetween two nodes in an AllJoyn network can be either single-hop \nor multi-hop. An AllJoyn distributed bus is basically an overlay \nnetwork whose topology does not necessarily map directly to the \ntopology of the underlying network. If an application has no \npreference, it can provide TRANSPORT_ANY and allow the AllJoyn system \nto determine which transport to use.\n\n\nLocal AllJoyn Transports\n\n\nAllJoyn Local Transports is a broad grouping of AllJoyn Transports \nthat are designed to essentially provide communication between the\nCore Library and their associated AllJoyn Routers. The following \nLocal Transports are used in the AllJoyn system:\n\n Null Transport\n\n UNIX Domain Socket Transport\n* TCP Transport\n\n\nNull Transport\n\n\nThe simplest of the local transports is the Null Transport. \nThis transport is designed to provide a connection between a \nCore Library and a Bundled Router, both of which reside in \na common process. One endpoint of the Null Transport is directly \ntied to the other side via function calls. There is really \nno Transport in the communication path between the Core Library \nand router in this case, the link is \"jumpered\" together \nusing a direct function call interface.\n\n\nUNIX Domain Sockets Transport\n\n\nThe UNIX Domain Sockets Transport is used in Posix systems \nto provide an inter-process connection (IPC) between a Core Library \nand a preinstalled AllJoyn Router. Since this is a local transport, \nthere is no requirement to support multiple endpoints, or to \nadvertise and discover. The implementation of this local transport \nis split across the Core Library and the AllJoyn Router.\n\n\nTCP Transport\n\n\nThe TCP Transport is used in Windows systems to provide an \ninter-process connection between a Core Library and a \npreinstalled AllJoyn Router. Since there is no requirement \nto support multiple endpoints, nor to advertise and discover, \nthe implementation of the TCP Transport for the Core Library \nis considerably simplified when compared to the Bus-to-Bus \nversion of the TCP Transport. For a discussion on the details \nof the TCP Transport, see \nTCP Transport mechanism\n.\n\n\nBus-to-Bus AllJoyn Transports\n\n\nThe Bus-to-Bus AllJoyn Transports enable connection establishment \nand message routing between AllJoyn routers. The most commonly used \nBus-to-Bus transports in the AllJoyn system are based on the \nunderlying IP-based transport mechanisms. These include TCP Transport \nand UDP Transport.  \n\n\nAs mentioned earlier, an application can specify which \nAllJoyn Transport should be used for connection setup and \nmessage delivery. If not specified by the App, AllJoyn router \nmakes a selection for the transport to be used. Both TCP Transport \nand UDP Transport are effective AllJoyn Transports. There are many\ntrade-offs which can be considered when making a selection between \nthe two. In general the times at which one would prefer to use the \nAllJoyn TCP Transport or the AllJoyn UDP Transport can be loosely \nmodeled on when one might prefer TCP/IP over UDP/IP. \n\n\nThe following table summarizes the performance of AllJoyn TCP Transport \nand AllJoyn UDP Transport by comparing certain system criteria.\n\n\nPerformance of AllJoyn TCP Transport versus UDP Transport\n\n\n\n\n\n\n\n\nSystem Criteria\n\n\nTCP Transport\n\n\nUDP Transport\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNumber of Connections Supported\n\n\nLow to medium\n\n\nHigh\n\n\nDue to high file descriptor usage, TCP Transport cannot support a very large number of simultaneous connections. UDP Transport uses only a single file descriptor for multiple connections, so it can support large number of simultaneous connections without reaching file descriptors system limit.\n\n\n\n\n\n\nMemory Usage\n\n\nModerate\n\n\nHigh\n\n\nSince UDP Transport has to provide the reliability support, it requires much higher memory usage.\n\n\n\n\n\n\nTTL-based Message Expiration\n\n\nNot possible\n\n\nSupported\n\n\nUDP Transport uses the AllJoyn Reliable Datagram Protocol (ARDP), which supports TTL-based message expiration.\n\n\n\n\n\n\nTypes of Data Transfer\n\n\nPerforms best for bulk data transfer\n\n\nPerforms best for intermittent short data transfer\n\n\nDefault socket buffers for Layer 4 TCP connections are typically much larger than those for UDP connections. As a result, TCP performs much better for bulk data transfer.\n\n\n\n\n\n\n\n\nThe following table captures some of the use case scenarios with the \npreferred transport selection between TCP Transport and UDP Transport, \nbased on trade-offs outlined in \nPerformance of AllJoyn TCP Transport versus UDP Transport\n. \n\n\nAllJoyn use cases showing TCP vs UDP Transport selection\n\n\n\n\n\n\n\n\nUse Cases\n\n\nTCP Transport\n\n\nUDP Transport\n\n\n\n\n\n\n\n\n\n\nDominant traffic is method calls\n\n\nX\n\n\n\n\n\n\n\n\nDominant traffic is bulk data transfer\n\n\nX\n\n\n\n\n\n\n\n\nAllJoyn messages have TTL associated\n\n\n\n\nX\n\n\n\n\n\n\nLarge number of simultaneous sessions with intermittent RPC calls\n\n\n\n\nX\n\n\n\n\n\n\nVery dirty RF conditions\n\n\nX\n\n\n\n\n\n\n\n\n\n\nDetails on AllJoyn TCP Transport and UDP Transport are \ncaptured in the following sections.\n\n\nTCP Transport mechanism\n\n\nAs mentioned previously, the AllJoyn TCP Transport takes its name \nfrom the TCP/IP layer 4 transport mechanism it uses. Since TCP \nprovides a reliable data stream guarantee, the TCP Transport \nmust only provide enough mechanism to translate AllJoyn messages \nto and from byte streams.  \n\n\nTCP Transport data plane architecture\n\n\nEach connection that uses the TCP Transport has an associated TCP Endpoint, \nTCP Stream, and TCP socket as shown in the following figure. \n\n\n\n\nFigure:\n TCP transport data plane internal architecture\n\n\nThe routing functionality of a Routing Node connects to a TCP Endpoint, \nwhich represents a Remote Endpoint for a TCP Transport connection. \nThe TCP Endpoint translates AllJoyn messages to and from the \nbyte-stream representation using a TCP Stream component. \nTCP Stream delivers and received data over a TCP socket.\n\n\nTCP endpoint lifecycle\n\n\nA TCP Endpoint goes through multiple states in the overall \nlifecycle of the Endpoint. The states and transitions for the\nTCP Endpoint are shown in the following figure. \n\n\n\n\nFigure:\n TCP endpoint lifecycle states\n\n\nTCP Endpoints are created either as a result of an active \nconnection request or an incoming call for a passive connection. \nThe TCP Endpoint maintains information about whether the \nprecipitating event was an active or passive connection. \n\n\nA TCP Endpoint follows the basic lifetime of an AllJoyn Thread.\nIt is first created in the INITIALIZED state. Prior to being used \nin the AllJoyn system, a TCP Endpoint must be authenticated.\n\nThis is a done as a separate step and is discussed in\n\nTCP Endpoint authentication phase\n. \nIf the authentication succeeds, the TCP Endpoint thread is asked \nto start running, at which point it enters the STARTING state. \nIf the authentication fails, the TCP Endpoint transitions into the \nFAILED state and is then ready for cleanup.\n\n\nAs soon as the Thread(s) required to support a newly created \nand authenticated TCP Endpoint is actually running, the Endpoint \nenters the STARTED state. In this state, the TCP Endpoint is \nregistered with the Router and therefore data can be transferred \nthrough the Endpoint. Once the connection is no longer needed, \nthe Endpoint method \nStop()\n is called, and the Endpoint enters \nthe STOPPING state. Once all threads which may be running in \nthe Endpoint have exited, the Endpoint enters into a JOINING state, \nwhere any threads associated with the Endpoint are joined (in the\nsense of a Posix thread join operation). The Endpoint is then \nunregistered from the AllJoyn Router. When the threading-related \nresources in an endpoint are cleaned up, the endpoint enters the \nDONE state at which time it can be removed from the system and deleted.\n\n\nTCP Endpoint authentication phase\n\n\nAs mentioned above, TCP Endpoints must transition through an \nauthentication phase that is required to complete before Messages \nare allowed to be transferred though the endpoint.This \nauthentication phase is handled by a separate thread, and is shown\nin the following figure. The authentication process is begun when \nthe TCP Endpoint enters the INTIALIZED state.\n\n\n\n\nFigure:\n TCP endpoint authentication states\n\n\nTCP Endpoint authentication uses the Simple Authentication and \nSecurity Layer (SASL) framework \"ANONYMOUS\" mechanism. \nWhile in the actual AUTHENTICATING state, the TCP Stream \nruns in a string-transfer mode in order to transfer the \nSASL challenges and responses. If the SASL exchange fails, \nauthentication transitions to the FAILED state which, in turn, \ndrives the TCP Endpoint state to change to FAILED.\n\n\nIf the SASL exchange succeeds, authentication transitions to \nthe SUCCEEDED state and this, in turn, drives the TCP Endpoint \nto transition to the STARTING state. When the TCP Endpoint \ntransitions to STARTED state the associated TCP Stream will \nmake a mode switch and begin sending and receiving AllJoyn Messages \ninstead of text strings. \n\n\nAs soon as the FAILED or SUCCEEDED determination is made, \nand the appropriate Endpoint lifetime actions are taken, \nthe endpoint authentication thread exits and causes the \nauthentication machine transition to DONE.\n\n\nUDP Transport mechanism\n\n\nThe AllJoyn UDP Transport, as its name implies, uses the \nUDP/IP protocol to move AllJoyn Messages from one host to \nanother. Since UDP does not provide a reliability guarantee, \nthe UDP Transport must provide some mechanism to provide a \nreliable Message delivery guarantee.  The UDP Transport uses \nthe AllJoyn Reliable Datagram Protocol (ARDP) to provide \nreliable delivery of messages. ARDP is based loosely on \nthe Reliable Data Protocol (RDP) as appears in RFC 908 (version 1) \nand RFC 1151 (version 2).\n\n\nUDP Transport data plane architecture\n\n\nArchitecturally, the UDP Transport can be split into two \nlarge components: the routing functionality of a Router Node \nconnects to a so-called UDP Endpoint, and the networking functionality \nof the UDP Transport that is accessed through ARDP.\n\n\nThe UDP Endpoint is the primary data plane interface between \nthe Routing Node and the UDP Transport. From the Routing Node \npoint of view, each UDP Transport connection is represented by \na UDP Endpoint. Each UDP Endpoint has an associated ARDP stream \nthat converts AllJoyn messages to ARDP datagrams. The UDP Transport \ndata plane architecture is captured in the following figure.\n\n\n\n\nFigure:\n UDP transport data plane internal architecture\n\n\nThe ARDP Stream component converts from the notion of a \nMessage stream to a stream of datagrams and, in turn, talks \nto an ARDP Connection. The ARDP Connection provides the \nend-to-end state information required to establish the reliability \nguarantees, and talks to a single UDP socket that is shared \namong the various ARDP connections managed by the UDP Transport.\n\n\nUDP Endpoint lifecycle\n\n\nUDP Endpoints go through a well-defined lifecycle as shown in the following figure.\n\n\n\n\nFigure:\n UDP endpoint lifecycle\n\n\nEndpoints are constructed because of either an Active or a \nPassive connection request. Similar to the TCP concept, \nan Active connection is an outgoing connection that is actively \nstarted on the local side. A Passive connection is an incoming \nconnection that was actively started on the remote side. \nThe ARDP protocol has a three-way handshake similar to that\nprovided by RDP and TCP. The entity that issues the SYN request \nenters into ACTIVE state and the entity which responds with a \nSYN+ACK enters into PASSIVE state.\n\n\nUnlike TCP and RDP, ARDP provides additional information as \ndata in the SYN and SYN+ACK packets. During the SYN, SYN+ACK, \nACK exchange (happening in ACTIVE and PASSIVE states), the involved \nendpoints are authenticating and identifying themselves to their \nremote counterparts. Once this phase has completed, the endpoints \nenter the STARTED state when the endpoint is registered with the \nRouting Node as being ready. The STARTED state is one in which \nAllJoyn Messages may be sent and received.\n\n\nEventually, a connection may be stopped either as a result of a local \nor remote disconnect event. A disconnect is initiated by the Routing \nfunction making a \nStop()\n call into the UDP Endpoint. This causes \na state transition from STARTED to STOPPING. For a local disconnect \nevent, an immediate transition is made to the WAITING state. \nThis allows all queued and in-flight Messages to be sent to the \nremote side before an ARDP Disconnect is executed. \n\n\nNOTE:\n Unlike TCP, there is no four-way ending handshake in ARDP - \nthis is handled at the Session level in the UDP Transport state machine.  \n\n\nOnce all data is transferred and acknowledged, a transition is \nmade back to the STOPPING state. In STOPPING state, the various \nthreads are notified that the endpoint is closing down. Once the \nthreads are verified as having left, the endpoint transitions \ninto the JOINING state. This is where resources are freed and \nany threads that may have been associated to the endpoint are \njoined (in the sense of a Posix thread join operation). The last \npart of the resource management is to unregister the endpoint \nfrom the Routing Node. When this is complete, the endpoint enters the \nDONE state and becomes ready for deletion by the endpoint management function.\n\n\nARDP state machine\n\n\nThe ARDP is a close relative of RDP which is documented in RFC-908 (version 1)\nand RFC-1151 (version 2). At the heart of the ARDP is the ARDP \nconnection state machine. Although similar to the TCP state machine, \nthe ARDP machine is simpler, requiring only six states as shown \nin the following figure.\n\n\n\n\nFigure:\n ARDP state machine\n\n\nAs in TCP, connections may be started actively or passively.\n\nAn active, or outgoing connection begins by creating a UDP Endpoint \nand transitioning it to the ACTIVE state. The endpoint provides \nan \"introduction\" Message and passes it to ARDP, which responds \nby creating a connection, adding the \"introduction\" to a SYN \npacket and sending it. After sending the SYN packet, the local \nARDP connection enters the SYN-SENT state. The remote ARDP which \nis in the LISTEN state, receives the SYN and calls back into the \nUDP Transport, providing the \"introduction\" and notifying \nthat a connection request has been received. If the UDP Transport \ndetermines that a connection should not be undertaken, ARDP \nis notified and sends an RST pack to abort the connection.  \n\n\nIf the UDP Transport determines that the connection should be \nbrought up, it creates a new UDP Endpoint in PASSIVE state and \nresponds to the ARDP callback with its own \"introduction response\".\nThe passive side then enters the UDP Endpoint PASSIVE state \nand the ARDP sends the \"introduction response\" back to the \nactive side in a SYN+ACK packet. When the active side receives \nthe SYN-ACK packet, the ARDP state machine sends the final \nACK packet, transitions to OPEN state and notifies the UDP Endpoint \nwhich, in turn, transitions to STARTED state. The active side \nis then ready to send and receive data. When the passive side \nreceives the final ACK packet, its three-way handshake is complete.  \n\n\nIt transitions into the OPEN state and notifies the UDP Endpoint \nwhich transitions into the STARTED state. At this point, \nboth sides are ready to send and receive data.\n\n\nSince it is possible that a failure happens somewhere in the \nexchange between the local UDP Endpoint, the local ARDP, the \nremote ARDP and the remote UDP Endpoint, both sides have \nwatchdog timers that abort the process if it does not complete \nin a timely manner.\n\n\nAs described above, there is no orderly shutdown of connections \nin the ARDP. This is accomplished in the UDP Endpoint state machine.\nTransitions out of ARDP OPEN state are done by receiving or sending \nRST packets. To avoid problems with reuse of ARDP ports, a \nCLOSE_WAIT state is implemented similar to that of TCP.\n\n\nARDP packet format\n\n\nDetails of the ARDP packet formats are available in RFC 908 and RFC 1151.\nExtensions to support granularity of AllJoyn Message instead of \nUDP Datagrams and also dropping of in-flight Messages based on \nTTL expiration required changing SYN and DATA packet formats.\n\n\nThe following table shows the ARDP SYN packet format. \nA delayed ACK timeout was added to support functionality \nsimilar to delayed ACK as used in TCP. A variable length data \nand an associated Data Length field was also added. The \nSYN+ACK packet is returned in this format, but with the ACK bit set.\n\n\nARDP SYN Packet Format\n\n\n\n\n\n\n\n\nFields\n\n\n\n\n\n\n\n\n\n\nFLAGS (8 bits) / Header Length (8 bits)\n\n\n\n\n\n\nSource Port (16 bits)\n\n\n\n\n\n\nDestination Port (16 bits)\n\n\n\n\n\n\nData Length (16 bits)\n\n\n\n\n\n\nInitial Sequence (32 bits)\n\n\n\n\n\n\nAcknowledgement (32 bits)\n\n\n\n\n\n\nLocal Receive Window Size (16 bits)\n\n\n\n\n\n\nMaximum Size of Receivable Datagram (16 bits)\n\n\n\n\n\n\nDelayed ACK Timeout (32 bits)\n\n\n\n\n\n\nData (variable length)\n\n\n\n\n\n\n\n\nThe following table shows the ARDP DATA packet format. \nThe format is substantially similar to that described by \nRFC 908 and RFC 1151, but several fields were added to \nsupport new features. Since ARDP is designed to support \nsending and receiving AllJoyn Messages, which can span \nthree 65535-byte UDP datagrams, the concept of a Message \nfragment was added. This necessitated adding a fragment count \nfield and a start-of-message sequence number to identify \nthe sequence number corresponding to the first UDP datagram \nin an AllJoyn Message. A Time-to-Live field was also added \nto support expiring AllJoyn Messages with a finite time to live; \nand in order to coordinate expiration of Messages, which \nmay be in the process of being retransmitted, the Acknowledge-Next \nfield was added.\n\n\nARDP data packet format\n\n\n\n\n\n\n\n\nFields\n\n\n\n\n\n\n\n\n\n\nFLAGS (8 bits) / Header Length (8 bits)\n\n\n\n\n\n\nSource Port (16 bits)\n\n\n\n\n\n\nDestination Port (16 bits)\n\n\n\n\n\n\nData Length (16 bits)\n\n\n\n\n\n\nSequence Number of Current Segment (32 bits)\n\n\n\n\n\n\nAcknowledge Number of Last In-Sequence Segment (32 bits)\n\n\n\n\n\n\nTime to Live (32 bits)\n\n\n\n\n\n\nLast Consumed Sequence Number (32 bits)\n\n\n\n\n\n\nAcknowledge-Next (32 bits)\n\n\n\n\n\n\nStart-of-Message Sequence (32 bits)\n\n\n\n\n\n\nFragment Count (16 bits)\n\n\n\n\n\n\nExtended ACK Bitmask (variable length)\n\n\n\n\n\n\nData (variable length)\n\n\n\n\n\n\n\n\nUDP transport configuration\n\n\nARDP is a flexible protocol, and so there are a number of \nconfigurable parameters used. These parameters are settable via \nthe AllJoyn Router configuration file.\n\n\n\n\n\n\n\n\nParameter name\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nudp_connect_timeout\n\n\nWhen an initial ARDP connection is attempted, the precipitating SYN packet may be lost. If, after some time, the foreign host does not respond, the connection must be attempted again. This value is the time period that ARDP waits before attempting to resend the SYN packet.\n\n\n1000 msec\n\n\n\n\n\n\nudp_connect_retries\n\n\nWhen an initial ARDP connection is attempted, the precipitating SYN packet may be lost. If, after some time, the foreign host does not respond, the connection must be attempted again. This value is the number of times that ARDP will try to resent SYN packet before giving up.\n\n\n10\n\n\n\n\n\n\nudp_initial_data_timeout\n\n\nWhen a data ARDP segment is sent, an RTO timer is started that determines when to resend the segment if an acknowledgment is not received. ARDP performs adaptive SRTT and RTO estimation using the TCP algorithm from RFC 6298. This parameter defines an initial RTO value which is used for a data segment only when no RTT estimates are available.\n\n\n1000 msec\n\n\n\n\n\n\nudp_total_data_retry_timeout\n\n\nThe overall time period for which a data segment should be retried before giving up and disconnecting the associated ARDP connection.\n\n\n10000 msec\n\n\n\n\n\n\nudp_min_data_retries\n\n\nThe minimum number of times a given ARDP data segment will be retransmitted. A data segment might be transmitted for more number of times than this value over the udp_total_data_retry_period.\n\n\n5\n\n\n\n\n\n\nudp_persist_interval\n\n\nWhen the advertised window size on the foreign host goes to zero, it stops the (local) sender from transmitting data until the window becomes nonzero. Since ARDP does not reliably send ACK packets, it is possible to lose an ACK packet that reopens the window. In that case, the local and foreign sides could deadlock: the foreign side to receive data and the sender waiting for an ACK with a new window size. ARDP supports sending zero window probes (NUL packet) if it does not get update to the window after receiving a zero window ACK. The zero window probes are sent following an exponential backoff schedule. This parameter defines initial persist interval used as first timeout for the zero window schedule.\n\n\n1000 msec\n\n\n\n\n\n\nudp_total_app_timeout\n\n\nThe overall time period for which zero window probes should be sent before the associated ARDP connection is declared broken.\n\n\n30000 msec\n\n\n\n\n\n\nudp_link_timeout\n\n\nARDP is very interested in quickly determining when a link has gone down, idle or not. The idea is to guarantee that some data is present on the link at least once over a given interval. This may be data, ACK for that data, or a special NUL keep-alive packet.This parameter provides the default overall timeout period during which a broken link for a connection must be detected. A link timeout is used to compute the keep-alive interval for sending periodic keep-alive probes. This value is used only if the link timeout was not set by the app, otherwise the link timeout from the app is used.\n\n\n30000 msec\n\n\n\n\n\n\nudp_keepalive_retries\n\n\nProvides the total number of times keep-alive probes will be sent before declaring the link as broken and terminating the ARDP connection.\n\n\n5\n\n\n\n\n\n\nudp_fast_retransmit_ack_counter\n\n\nSimilar to TCP, ARDP supports fast retransmission of segments based on the out-or-order EACKs (Enhanced ACKs) received. This value defines how many out-of-order EACKs should be received before ARDP performs the retransmission. A segment is fast retransmitted only once.\n\n\n1\n\n\n\n\n\n\nudp_timewait_timer\n\n\nAmount of time that a connection should remain in the RDP Close_Wait state, to ensure that all outstanding packets that might be wandering around the network have died out for that connection. This behavior ensures that the port pair defining the ARDP connection cannot be reused for twice the expected lifetime of a datagram and therefore datagrams from an earlier incarnation of a connection cannot interfere with a current connection.\n\n\n1000 msec\n\n\n\n\n\n\nudp_segbmax\n\n\nMaximum size of an ARDP segment as negotiated during connection setup. Since ARDP runs on top of UDP, this is determined based on the max UDP packet size. Since the maximum datagram size in UDP is 65535 bytes, the most efficient / maximum ARDP message size is the maximum size of UDP packet. Larger-sized AllJoyn messages are fragmented into the multiple segments required to carry those messages.\n\n\n65507\n\n\n\n\n\n\nudp_segmax\n\n\nMaximum number of outstanding ARDP segments the receiver is willing to accept as negotiated during connection setup. This value governs how many segments can be in the flight and hence impacts the overall achieved throughput. The SEGMAX unit is ARDP segments. ARDP supports flow control through dynamic windowing in the message header. When data is received by ARDP and \"checked in\" to the ARDP receive queue, it is immediately acknowledged, but the receive window is decremented by 1. It is only when a datagram is delivered to the app, that the datagram is removed from the receive buffer and the receive window is incremented by 1.\n\n\n50\n\n\n\n\n\n\n\n\nName Service usage by the AllJoyn Transport\n\n\nBoth the TCP Transport and the UDP Transport provide the same \nadvertisement and discovery capabilities. Both of these transports \nuse the IP multicast-based Name Service as their advertisement \nand discovery mechanism. The Name Service uses the underlying \nIP (UDP) multicast to accomplish advertisement and discovery \nfunctions. The Name Service is implemented in the Routing Node \nas a singleton and is accessed by both the TCP Transport and \nthe UDP Transport through their respective control planes. \n[Advertisement and Discovery][advertisement-discovery] captures\nthe details on the legacy Name Service and Next-Generation Name Service\n(NGNS) used for adverisement and discovery in the AllJoyn system,\n\n\nTransport selection at the AllJoyn Router\n\n\nFor discovery, if an application selects a specific transport \n(TCP Transport or UDP Transport), then the \nFoundAdvertisedName()\n \ncallback is only sent for that transport. Also, as mentioned earlier, \nan app can indicate which specific transport to be used to \nestablish a session, and the AllJoyn router will attempt to \nperform session setup only over the specified AllJoyn transport.\n\n\nIf an app does not indicate a specific AllJoyn transport for \ndiscovery or session setup, the AllJoyn router behavior is to \ngive preference to UDP Transport. This behavior is mainly motivated \nby the fact that UDP Transport requires much smaller file descriptor \nresources which becomes an issue with TCP Transport as the number \nof connections grows. \n\n\nFor discovery, if an app does not indicate a specific AllJoyn transport \n(that is, TRANSPORT_ANY is specified), the \nFoundAdvertisedName()\n \ncallback is sent for both UDP Transport and TCP Transport, with the \ncallback for UDP Transport sent first. Similarly for session setup, \nif TRANSPORT_ANY was indicated by the app, the AllJoyn router \nwill establish session over UDP Transport if it is available \nat both endpoints of the connection. If the UDP Transport is not \navailable, then session setup will be done over TCP Transport.",
            "title": "Alljoyn transport"
        },
        {
            "location": "/learn/core/system-description/alljoyn-transport/#alljoyn-transport",
            "text": "",
            "title": "AllJoyn&trade; Transport"
        },
        {
            "location": "/learn/core/system-description/alljoyn-transport/#overview",
            "text": "AllJoyn Transport is an abstraction for a concrete mechanism \nthat is used to move AllJoyn Messages (corresponding to a \nmethod call, method reply, a property get/set or a signal) \nbetween AllJoyn applications.  The AllJoyn Transport provides the following fundamental \npieces of functionality:  The ability to create and destroy connections between \nAllJoyn applications (through AllJoyn routers) and between \nAllJoyn applications and routers.  The ability to reliably send and receive AllJoyn Messages \nbetween AllJoyn applications and routers. \n* Optionally, to provide advertisement and discovery services \nappropriate to the underlying network technology.  The AllJoyn Transport supports connections establishment and \ndelivering messages over multiple underlying physical transport \nlayers including TCP, UDP and local UNIX transport. A complete \nlist of underlying transports supported by the AllJoyn Transport \nis captured in  AllJoyn TransportMask definition .\nAn application can specify which underlying transport to be \nused for connection establishment and message delivery.  Based on the type of connection endpoints, AllJoyn Transport functionality can be \ndivided into the following categories:   Local AllJoyn Transports : Local AllJoyn Transports are designed \nto essentially provide communication between Core Library \nand associated AllJoyn Router. This supports connection establishment \nand message routing between Application and the Router. Details \non Local Transports are captured in  Local AllJoyn Transports .   Bus-to-Bus AllJoyn Transports : These AllJoyn Transports enable \nconnection establishment and message routing between AllJoyn \nrouters. Details on Bus-to-Bus Transports are captured in  Bus-to-Bus AllJoyn Transports .",
            "title": "Overview"
        },
        {
            "location": "/learn/core/system-description/alljoyn-transport/#endpoints-usage-in-alljoyn-transports",
            "text": "As mentioned in  AllJoyn endpoints , the \nAllJoyn Transport uses endpoints to establish connections \nand route messages across applications and routers. An AllJoyn \nEndpoint is analogous to a socket endpoint as used in socket \nprogramming. An AllJoyn Endpoint is one side of an AllJoyn communication \nlink. The AllJoyn communication link could be between an Application \nand an AllJoyn router, or it could be between two AllJoyn routers.   The broad classification of endpoints in the AllJoyn system are listed below:   Local Endpoint : A local endpoint represents a connection \nto self. It is used in the Core Library to provide a connection \nto the application itself and used in the AllJoyn Router to \nprovide connection to the router itself. A local endpoint \nrepresents a connection within the same process.   Remote Endpoint : A remote endpoint represents a connection \nbetween the application and the AllJoyn router. Messages destined \nto an applications get routed to its remote endpoint. A specialized \ntype of remote endpoint called \"Bus-to-Bus\" endpoint represents \nconnection between two AllJoyn Routers. A remote endpoint represents \na connection between two processes.  The following figure shows the concepts of local and remote endpoints.    Figure:  Local and remote endpoints  The figure illustrates a hypothetical connection between an AllJoyn application \nand a preinstalled Router. The AllJoyn application talks to a Core Library \nthat provides the gateway to the larger AllJoyn distributed bus. \nThe Core Library has two main connections: the connection to the \napplication, which is provided through what is called the Local Endpoint, \nand the connection to the Router, which is represented by a Remote Endpoint.  The AllJoyn Router also has a corresponding Remote Endpoint to represent \nthe endpoint of the communication link with the Core Library for routing \nmessages. The Local endpoint within the AllJoyn Router represents a \nconnection to the router for routing control messages destined for the router.   Multiple applications can connect to a single AllJoyn Router in a \ndistributed bus architecture. An AllJoyn router maintains a remote \nendpoint to each connected application as shown in the following\nfigure (AllJoyn router wiht multiple remote endpoints).    Figure:  AllJoyn router with multiple remote endpoints  Both the Core Library and the router maintain remote endpoints, \nhowever they differ in terms of message routing functionality - \nan AllJoyn Router can move (route) messages between Remote Endpoints, \nwhereas a Core Library only moves messages between exactly \none Local and exactly one Remote Endpoint.   The AllJoyn system supports a fully distributed bus configuration, \nwhere a router communicates with other routers to join bus segments \ninto a single distributed AllJoyn bus as shown in the following figure.    Figure:  AllJoyn distributed bus with bus-to-bus endpoints  In this figure, one bus segment comprising an AllJoyn Router and \ntwo Applications is shown in the top half. Another bus segment, \nalso with an AllJoyn Router and two Applications, is shown in the \nbottom half of the figure.   The two bus segments are connected together via remote endpoints \ncalled Bus-to-Bus Endpoints. Each router maintains a Bus-to-Bus Endpoint \nfor every other router it is connected to. In the figure, \nOne Bus-to-Bus Endpoint represents the connection to the upper \nRouting Node and another Bus-to-Bus Endpoint represents the \nconnection to the lower Routing Node.   The Remote Endpoints are paired with an underlying communication \nmechanism as part of the associated AllJoyn Transport. For example, \nthe Bus-to-Bus Endpoints in the Routing Nodes may be managed by \nthe TCP Transport or the UDP Transport, which also handles the \ndetails of moving Messages from one end (Endpoint) of the implied \nconnection to another.  In the case of the Remote Endpoints that connect the Core Library \nto the AllJoyn Router, the underlying communication mechanism \ncould be different based on host environments. For example, a \nUNIX domain sockets implementation is used on Linux systems, \nwhile a TCP implementation is used on Windows systems.  Thin Core Library Endpoints  The Thin Core Library (TCL) makes use of the TCP Transport, \nhowever its implementation is quite different than the regular \nTCP Transport connection between a Core Library and AllJoyn Router.    On the TCL, there is no explicit breaking out of a Remote Endpoint \nand a Local Endpoint. The TCL provides minimal implementation of the \nfunctionality required to connect and communicate with the \nTCP Remote Endpoint at the Alljoyn Router hosted on another \nAllJoyn device.   On the Routing Node side, a Thin Library device connects as \nif it was any local Core Library connecting using a local \nTCP loopback connection.   NOTE:  This is how Bus Attachments connect to Routing Nodes in \nthe Windows environment. The TCP transport is used for the \nconnection, but the data does not actually travel across the \nnetwork; but rather is \"looped back\" and sent back up the \nnetworking stack before being sent out on a connected IP network.  The Thin Library Endpoint usage is captured in the following figure.   Figure:  Thin Core Library Endpoint",
            "title": "Endpoints usage in AllJoyn Transports"
        },
        {
            "location": "/learn/core/system-description/alljoyn-transport/#alljoyn-transport-in-networking-model",
            "text": "Although the primary task of an AllJoyn transport is to \ntransport, or move, AllJoyn Messages from one endpoint to another, \nit is important to distinguish the AllJoyn Transport from the \nconcept of transport layer (layer 4) in the International \nStandards Organization Open Systems Interconnection (ISO/OSI) \n7-layer model.  The following figure shows where AllJoyn Transports fit in the \n7-layer ISO/OSI model.    Figure:  AllJoyn transport in the ISO/OSI 7-layer model  Underneath the Application Logic, there exists an AllJoyn Message \nlayer which is responsible for marshaling and unmarshaling of \nAllJoyn messages (Signals and Method Calls). This layer can be \nthought of as residing in the presentation layer (layer 6) \nof the ISO/OSI model.   These AllJoyn messages are routed to their intended destination \nby the AllJoyn Transport layer. Since the AllJoyn Transport layer \nmanages connections across applications and AllJoyn routers in \nthe network, it can be thought of corresponding to the session \nlayer (layer 5) of the ISO/OSI model. AllJoyn Transports make \nuse of layer 4 transports like TCP or UDP in order to manage \nthe actual movement of AllJoyn messages between various network entities.  Since an AllJoyn Transport encapsulates the functions of moving \ndata sequences, establishing connections, advertisement and discovery, \nthere are separate AllJoyn Transports for separate underlying \ntransport mechanisms.   The AllJoyn TCP Transport uses TCP/IP as the mechanism for moving data.  The AllJoyn UDP Transport uses UDP/IP as the mechanism for moving data.   The AllJoyn Bluetooth (BT) Transport does the same for Bluetooth \nconnections.  The AllJoyn Local Transport uses UNIX domain sockets.   The name given to an AllJoyn transport typically echoes the method \nused in the underlying OSI layer 4 mechanism.    An AllJoyn applications may select the AllJoyn Transport that \nis actually used by choosing one or more TransportMask bits \nin the appropriate AllJoyn APIs. The currently available \nTransportMask bits are shown in the following table.   AllJoyn TransportMask definition     Transport name  Value  Description      TRANSPORT_NONE  0x0000  No transport.    TRANSPORT_LOCAL  0x0001  The local transport.    TRANSPORT_TCP  0x0004  Transport using TCP as the underlying mechanism.    TRANSPORT_UDP  0x0100  Transport using UDP as the underlying mechanism.    TRANSPORT_EXPERIMENTAL  0x8000  Select a release-specific experimental transport.    TRANSPORT_IP  0x0104  Allow the system to decide between TCP or UDP.    TRANSPORT_ANY  0x0105  Allow the system to choose any appropriate transport.     If an AllJoyn application desires to only use TCP as the \nunderlying layer 4 mechanism, it can do so by specifying \nTRANSPORT_TCP in advertisement, discovery and Session join \nand bind options. If an application desires only that an \nIP-based transport be used, it can specify TRANSPORT_IP and \nallow the AllJoyn system to select between TCP and UDP, for example.    Each transport establishes and maintains connectivity based \non the underlying physical transport it supports. Based on the \ntype of underlying physical transport, the actual connectivity \nbetween two nodes in an AllJoyn network can be either single-hop \nor multi-hop. An AllJoyn distributed bus is basically an overlay \nnetwork whose topology does not necessarily map directly to the \ntopology of the underlying network. If an application has no \npreference, it can provide TRANSPORT_ANY and allow the AllJoyn system \nto determine which transport to use.",
            "title": "AllJoyn Transport in Networking Model"
        },
        {
            "location": "/learn/core/system-description/alljoyn-transport/#local-alljoyn-transports",
            "text": "AllJoyn Local Transports is a broad grouping of AllJoyn Transports \nthat are designed to essentially provide communication between the\nCore Library and their associated AllJoyn Routers. The following \nLocal Transports are used in the AllJoyn system:  Null Transport  UNIX Domain Socket Transport\n* TCP Transport  Null Transport  The simplest of the local transports is the Null Transport. \nThis transport is designed to provide a connection between a \nCore Library and a Bundled Router, both of which reside in \na common process. One endpoint of the Null Transport is directly \ntied to the other side via function calls. There is really \nno Transport in the communication path between the Core Library \nand router in this case, the link is \"jumpered\" together \nusing a direct function call interface.  UNIX Domain Sockets Transport  The UNIX Domain Sockets Transport is used in Posix systems \nto provide an inter-process connection (IPC) between a Core Library \nand a preinstalled AllJoyn Router. Since this is a local transport, \nthere is no requirement to support multiple endpoints, or to \nadvertise and discover. The implementation of this local transport \nis split across the Core Library and the AllJoyn Router.  TCP Transport  The TCP Transport is used in Windows systems to provide an \ninter-process connection between a Core Library and a \npreinstalled AllJoyn Router. Since there is no requirement \nto support multiple endpoints, nor to advertise and discover, \nthe implementation of the TCP Transport for the Core Library \nis considerably simplified when compared to the Bus-to-Bus \nversion of the TCP Transport. For a discussion on the details \nof the TCP Transport, see  TCP Transport mechanism .",
            "title": "Local AllJoyn Transports"
        },
        {
            "location": "/learn/core/system-description/alljoyn-transport/#bus-to-bus-alljoyn-transports",
            "text": "The Bus-to-Bus AllJoyn Transports enable connection establishment \nand message routing between AllJoyn routers. The most commonly used \nBus-to-Bus transports in the AllJoyn system are based on the \nunderlying IP-based transport mechanisms. These include TCP Transport \nand UDP Transport.    As mentioned earlier, an application can specify which \nAllJoyn Transport should be used for connection setup and \nmessage delivery. If not specified by the App, AllJoyn router \nmakes a selection for the transport to be used. Both TCP Transport \nand UDP Transport are effective AllJoyn Transports. There are many\ntrade-offs which can be considered when making a selection between \nthe two. In general the times at which one would prefer to use the \nAllJoyn TCP Transport or the AllJoyn UDP Transport can be loosely \nmodeled on when one might prefer TCP/IP over UDP/IP.   The following table summarizes the performance of AllJoyn TCP Transport \nand AllJoyn UDP Transport by comparing certain system criteria.  Performance of AllJoyn TCP Transport versus UDP Transport     System Criteria  TCP Transport  UDP Transport  Description      Number of Connections Supported  Low to medium  High  Due to high file descriptor usage, TCP Transport cannot support a very large number of simultaneous connections. UDP Transport uses only a single file descriptor for multiple connections, so it can support large number of simultaneous connections without reaching file descriptors system limit.    Memory Usage  Moderate  High  Since UDP Transport has to provide the reliability support, it requires much higher memory usage.    TTL-based Message Expiration  Not possible  Supported  UDP Transport uses the AllJoyn Reliable Datagram Protocol (ARDP), which supports TTL-based message expiration.    Types of Data Transfer  Performs best for bulk data transfer  Performs best for intermittent short data transfer  Default socket buffers for Layer 4 TCP connections are typically much larger than those for UDP connections. As a result, TCP performs much better for bulk data transfer.     The following table captures some of the use case scenarios with the \npreferred transport selection between TCP Transport and UDP Transport, \nbased on trade-offs outlined in  Performance of AllJoyn TCP Transport versus UDP Transport .   AllJoyn use cases showing TCP vs UDP Transport selection     Use Cases  TCP Transport  UDP Transport      Dominant traffic is method calls  X     Dominant traffic is bulk data transfer  X     AllJoyn messages have TTL associated   X    Large number of simultaneous sessions with intermittent RPC calls   X    Very dirty RF conditions  X      Details on AllJoyn TCP Transport and UDP Transport are \ncaptured in the following sections.  TCP Transport mechanism  As mentioned previously, the AllJoyn TCP Transport takes its name \nfrom the TCP/IP layer 4 transport mechanism it uses. Since TCP \nprovides a reliable data stream guarantee, the TCP Transport \nmust only provide enough mechanism to translate AllJoyn messages \nto and from byte streams.    TCP Transport data plane architecture  Each connection that uses the TCP Transport has an associated TCP Endpoint, \nTCP Stream, and TCP socket as shown in the following figure.    Figure:  TCP transport data plane internal architecture  The routing functionality of a Routing Node connects to a TCP Endpoint, \nwhich represents a Remote Endpoint for a TCP Transport connection. \nThe TCP Endpoint translates AllJoyn messages to and from the \nbyte-stream representation using a TCP Stream component. \nTCP Stream delivers and received data over a TCP socket.  TCP endpoint lifecycle  A TCP Endpoint goes through multiple states in the overall \nlifecycle of the Endpoint. The states and transitions for the\nTCP Endpoint are shown in the following figure.    Figure:  TCP endpoint lifecycle states  TCP Endpoints are created either as a result of an active \nconnection request or an incoming call for a passive connection. \nThe TCP Endpoint maintains information about whether the \nprecipitating event was an active or passive connection.   A TCP Endpoint follows the basic lifetime of an AllJoyn Thread.\nIt is first created in the INITIALIZED state. Prior to being used \nin the AllJoyn system, a TCP Endpoint must be authenticated. \nThis is a done as a separate step and is discussed in TCP Endpoint authentication phase . \nIf the authentication succeeds, the TCP Endpoint thread is asked \nto start running, at which point it enters the STARTING state. \nIf the authentication fails, the TCP Endpoint transitions into the \nFAILED state and is then ready for cleanup.  As soon as the Thread(s) required to support a newly created \nand authenticated TCP Endpoint is actually running, the Endpoint \nenters the STARTED state. In this state, the TCP Endpoint is \nregistered with the Router and therefore data can be transferred \nthrough the Endpoint. Once the connection is no longer needed, \nthe Endpoint method  Stop()  is called, and the Endpoint enters \nthe STOPPING state. Once all threads which may be running in \nthe Endpoint have exited, the Endpoint enters into a JOINING state, \nwhere any threads associated with the Endpoint are joined (in the\nsense of a Posix thread join operation). The Endpoint is then \nunregistered from the AllJoyn Router. When the threading-related \nresources in an endpoint are cleaned up, the endpoint enters the \nDONE state at which time it can be removed from the system and deleted.  TCP Endpoint authentication phase  As mentioned above, TCP Endpoints must transition through an \nauthentication phase that is required to complete before Messages \nare allowed to be transferred though the endpoint.This \nauthentication phase is handled by a separate thread, and is shown\nin the following figure. The authentication process is begun when \nthe TCP Endpoint enters the INTIALIZED state.   Figure:  TCP endpoint authentication states  TCP Endpoint authentication uses the Simple Authentication and \nSecurity Layer (SASL) framework \"ANONYMOUS\" mechanism. \nWhile in the actual AUTHENTICATING state, the TCP Stream \nruns in a string-transfer mode in order to transfer the \nSASL challenges and responses. If the SASL exchange fails, \nauthentication transitions to the FAILED state which, in turn, \ndrives the TCP Endpoint state to change to FAILED.  If the SASL exchange succeeds, authentication transitions to \nthe SUCCEEDED state and this, in turn, drives the TCP Endpoint \nto transition to the STARTING state. When the TCP Endpoint \ntransitions to STARTED state the associated TCP Stream will \nmake a mode switch and begin sending and receiving AllJoyn Messages \ninstead of text strings.   As soon as the FAILED or SUCCEEDED determination is made, \nand the appropriate Endpoint lifetime actions are taken, \nthe endpoint authentication thread exits and causes the \nauthentication machine transition to DONE.  UDP Transport mechanism  The AllJoyn UDP Transport, as its name implies, uses the \nUDP/IP protocol to move AllJoyn Messages from one host to \nanother. Since UDP does not provide a reliability guarantee, \nthe UDP Transport must provide some mechanism to provide a \nreliable Message delivery guarantee.  The UDP Transport uses \nthe AllJoyn Reliable Datagram Protocol (ARDP) to provide \nreliable delivery of messages. ARDP is based loosely on \nthe Reliable Data Protocol (RDP) as appears in RFC 908 (version 1) \nand RFC 1151 (version 2).  UDP Transport data plane architecture  Architecturally, the UDP Transport can be split into two \nlarge components: the routing functionality of a Router Node \nconnects to a so-called UDP Endpoint, and the networking functionality \nof the UDP Transport that is accessed through ARDP.  The UDP Endpoint is the primary data plane interface between \nthe Routing Node and the UDP Transport. From the Routing Node \npoint of view, each UDP Transport connection is represented by \na UDP Endpoint. Each UDP Endpoint has an associated ARDP stream \nthat converts AllJoyn messages to ARDP datagrams. The UDP Transport \ndata plane architecture is captured in the following figure.   Figure:  UDP transport data plane internal architecture  The ARDP Stream component converts from the notion of a \nMessage stream to a stream of datagrams and, in turn, talks \nto an ARDP Connection. The ARDP Connection provides the \nend-to-end state information required to establish the reliability \nguarantees, and talks to a single UDP socket that is shared \namong the various ARDP connections managed by the UDP Transport.  UDP Endpoint lifecycle  UDP Endpoints go through a well-defined lifecycle as shown in the following figure.   Figure:  UDP endpoint lifecycle  Endpoints are constructed because of either an Active or a \nPassive connection request. Similar to the TCP concept, \nan Active connection is an outgoing connection that is actively \nstarted on the local side. A Passive connection is an incoming \nconnection that was actively started on the remote side. \nThe ARDP protocol has a three-way handshake similar to that\nprovided by RDP and TCP. The entity that issues the SYN request \nenters into ACTIVE state and the entity which responds with a \nSYN+ACK enters into PASSIVE state.  Unlike TCP and RDP, ARDP provides additional information as \ndata in the SYN and SYN+ACK packets. During the SYN, SYN+ACK, \nACK exchange (happening in ACTIVE and PASSIVE states), the involved \nendpoints are authenticating and identifying themselves to their \nremote counterparts. Once this phase has completed, the endpoints \nenter the STARTED state when the endpoint is registered with the \nRouting Node as being ready. The STARTED state is one in which \nAllJoyn Messages may be sent and received.  Eventually, a connection may be stopped either as a result of a local \nor remote disconnect event. A disconnect is initiated by the Routing \nfunction making a  Stop()  call into the UDP Endpoint. This causes \na state transition from STARTED to STOPPING. For a local disconnect \nevent, an immediate transition is made to the WAITING state. \nThis allows all queued and in-flight Messages to be sent to the \nremote side before an ARDP Disconnect is executed.   NOTE:  Unlike TCP, there is no four-way ending handshake in ARDP - \nthis is handled at the Session level in the UDP Transport state machine.    Once all data is transferred and acknowledged, a transition is \nmade back to the STOPPING state. In STOPPING state, the various \nthreads are notified that the endpoint is closing down. Once the \nthreads are verified as having left, the endpoint transitions \ninto the JOINING state. This is where resources are freed and \nany threads that may have been associated to the endpoint are \njoined (in the sense of a Posix thread join operation). The last \npart of the resource management is to unregister the endpoint \nfrom the Routing Node. When this is complete, the endpoint enters the \nDONE state and becomes ready for deletion by the endpoint management function.  ARDP state machine  The ARDP is a close relative of RDP which is documented in RFC-908 (version 1)\nand RFC-1151 (version 2). At the heart of the ARDP is the ARDP \nconnection state machine. Although similar to the TCP state machine, \nthe ARDP machine is simpler, requiring only six states as shown \nin the following figure.   Figure:  ARDP state machine  As in TCP, connections may be started actively or passively. \nAn active, or outgoing connection begins by creating a UDP Endpoint \nand transitioning it to the ACTIVE state. The endpoint provides \nan \"introduction\" Message and passes it to ARDP, which responds \nby creating a connection, adding the \"introduction\" to a SYN \npacket and sending it. After sending the SYN packet, the local \nARDP connection enters the SYN-SENT state. The remote ARDP which \nis in the LISTEN state, receives the SYN and calls back into the \nUDP Transport, providing the \"introduction\" and notifying \nthat a connection request has been received. If the UDP Transport \ndetermines that a connection should not be undertaken, ARDP \nis notified and sends an RST pack to abort the connection.    If the UDP Transport determines that the connection should be \nbrought up, it creates a new UDP Endpoint in PASSIVE state and \nresponds to the ARDP callback with its own \"introduction response\".\nThe passive side then enters the UDP Endpoint PASSIVE state \nand the ARDP sends the \"introduction response\" back to the \nactive side in a SYN+ACK packet. When the active side receives \nthe SYN-ACK packet, the ARDP state machine sends the final \nACK packet, transitions to OPEN state and notifies the UDP Endpoint \nwhich, in turn, transitions to STARTED state. The active side \nis then ready to send and receive data. When the passive side \nreceives the final ACK packet, its three-way handshake is complete.    It transitions into the OPEN state and notifies the UDP Endpoint \nwhich transitions into the STARTED state. At this point, \nboth sides are ready to send and receive data.  Since it is possible that a failure happens somewhere in the \nexchange between the local UDP Endpoint, the local ARDP, the \nremote ARDP and the remote UDP Endpoint, both sides have \nwatchdog timers that abort the process if it does not complete \nin a timely manner.  As described above, there is no orderly shutdown of connections \nin the ARDP. This is accomplished in the UDP Endpoint state machine.\nTransitions out of ARDP OPEN state are done by receiving or sending \nRST packets. To avoid problems with reuse of ARDP ports, a \nCLOSE_WAIT state is implemented similar to that of TCP.  ARDP packet format  Details of the ARDP packet formats are available in RFC 908 and RFC 1151.\nExtensions to support granularity of AllJoyn Message instead of \nUDP Datagrams and also dropping of in-flight Messages based on \nTTL expiration required changing SYN and DATA packet formats.  The following table shows the ARDP SYN packet format. \nA delayed ACK timeout was added to support functionality \nsimilar to delayed ACK as used in TCP. A variable length data \nand an associated Data Length field was also added. The \nSYN+ACK packet is returned in this format, but with the ACK bit set.  ARDP SYN Packet Format     Fields      FLAGS (8 bits) / Header Length (8 bits)    Source Port (16 bits)    Destination Port (16 bits)    Data Length (16 bits)    Initial Sequence (32 bits)    Acknowledgement (32 bits)    Local Receive Window Size (16 bits)    Maximum Size of Receivable Datagram (16 bits)    Delayed ACK Timeout (32 bits)    Data (variable length)     The following table shows the ARDP DATA packet format. \nThe format is substantially similar to that described by \nRFC 908 and RFC 1151, but several fields were added to \nsupport new features. Since ARDP is designed to support \nsending and receiving AllJoyn Messages, which can span \nthree 65535-byte UDP datagrams, the concept of a Message \nfragment was added. This necessitated adding a fragment count \nfield and a start-of-message sequence number to identify \nthe sequence number corresponding to the first UDP datagram \nin an AllJoyn Message. A Time-to-Live field was also added \nto support expiring AllJoyn Messages with a finite time to live; \nand in order to coordinate expiration of Messages, which \nmay be in the process of being retransmitted, the Acknowledge-Next \nfield was added.  ARDP data packet format     Fields      FLAGS (8 bits) / Header Length (8 bits)    Source Port (16 bits)    Destination Port (16 bits)    Data Length (16 bits)    Sequence Number of Current Segment (32 bits)    Acknowledge Number of Last In-Sequence Segment (32 bits)    Time to Live (32 bits)    Last Consumed Sequence Number (32 bits)    Acknowledge-Next (32 bits)    Start-of-Message Sequence (32 bits)    Fragment Count (16 bits)    Extended ACK Bitmask (variable length)    Data (variable length)     UDP transport configuration  ARDP is a flexible protocol, and so there are a number of \nconfigurable parameters used. These parameters are settable via \nthe AllJoyn Router configuration file.     Parameter name  Description  Default value      udp_connect_timeout  When an initial ARDP connection is attempted, the precipitating SYN packet may be lost. If, after some time, the foreign host does not respond, the connection must be attempted again. This value is the time period that ARDP waits before attempting to resend the SYN packet.  1000 msec    udp_connect_retries  When an initial ARDP connection is attempted, the precipitating SYN packet may be lost. If, after some time, the foreign host does not respond, the connection must be attempted again. This value is the number of times that ARDP will try to resent SYN packet before giving up.  10    udp_initial_data_timeout  When a data ARDP segment is sent, an RTO timer is started that determines when to resend the segment if an acknowledgment is not received. ARDP performs adaptive SRTT and RTO estimation using the TCP algorithm from RFC 6298. This parameter defines an initial RTO value which is used for a data segment only when no RTT estimates are available.  1000 msec    udp_total_data_retry_timeout  The overall time period for which a data segment should be retried before giving up and disconnecting the associated ARDP connection.  10000 msec    udp_min_data_retries  The minimum number of times a given ARDP data segment will be retransmitted. A data segment might be transmitted for more number of times than this value over the udp_total_data_retry_period.  5    udp_persist_interval  When the advertised window size on the foreign host goes to zero, it stops the (local) sender from transmitting data until the window becomes nonzero. Since ARDP does not reliably send ACK packets, it is possible to lose an ACK packet that reopens the window. In that case, the local and foreign sides could deadlock: the foreign side to receive data and the sender waiting for an ACK with a new window size. ARDP supports sending zero window probes (NUL packet) if it does not get update to the window after receiving a zero window ACK. The zero window probes are sent following an exponential backoff schedule. This parameter defines initial persist interval used as first timeout for the zero window schedule.  1000 msec    udp_total_app_timeout  The overall time period for which zero window probes should be sent before the associated ARDP connection is declared broken.  30000 msec    udp_link_timeout  ARDP is very interested in quickly determining when a link has gone down, idle or not. The idea is to guarantee that some data is present on the link at least once over a given interval. This may be data, ACK for that data, or a special NUL keep-alive packet.This parameter provides the default overall timeout period during which a broken link for a connection must be detected. A link timeout is used to compute the keep-alive interval for sending periodic keep-alive probes. This value is used only if the link timeout was not set by the app, otherwise the link timeout from the app is used.  30000 msec    udp_keepalive_retries  Provides the total number of times keep-alive probes will be sent before declaring the link as broken and terminating the ARDP connection.  5    udp_fast_retransmit_ack_counter  Similar to TCP, ARDP supports fast retransmission of segments based on the out-or-order EACKs (Enhanced ACKs) received. This value defines how many out-of-order EACKs should be received before ARDP performs the retransmission. A segment is fast retransmitted only once.  1    udp_timewait_timer  Amount of time that a connection should remain in the RDP Close_Wait state, to ensure that all outstanding packets that might be wandering around the network have died out for that connection. This behavior ensures that the port pair defining the ARDP connection cannot be reused for twice the expected lifetime of a datagram and therefore datagrams from an earlier incarnation of a connection cannot interfere with a current connection.  1000 msec    udp_segbmax  Maximum size of an ARDP segment as negotiated during connection setup. Since ARDP runs on top of UDP, this is determined based on the max UDP packet size. Since the maximum datagram size in UDP is 65535 bytes, the most efficient / maximum ARDP message size is the maximum size of UDP packet. Larger-sized AllJoyn messages are fragmented into the multiple segments required to carry those messages.  65507    udp_segmax  Maximum number of outstanding ARDP segments the receiver is willing to accept as negotiated during connection setup. This value governs how many segments can be in the flight and hence impacts the overall achieved throughput. The SEGMAX unit is ARDP segments. ARDP supports flow control through dynamic windowing in the message header. When data is received by ARDP and \"checked in\" to the ARDP receive queue, it is immediately acknowledged, but the receive window is decremented by 1. It is only when a datagram is delivered to the app, that the datagram is removed from the receive buffer and the receive window is incremented by 1.  50     Name Service usage by the AllJoyn Transport  Both the TCP Transport and the UDP Transport provide the same \nadvertisement and discovery capabilities. Both of these transports \nuse the IP multicast-based Name Service as their advertisement \nand discovery mechanism. The Name Service uses the underlying \nIP (UDP) multicast to accomplish advertisement and discovery \nfunctions. The Name Service is implemented in the Routing Node \nas a singleton and is accessed by both the TCP Transport and \nthe UDP Transport through their respective control planes. \n[Advertisement and Discovery][advertisement-discovery] captures\nthe details on the legacy Name Service and Next-Generation Name Service\n(NGNS) used for adverisement and discovery in the AllJoyn system,  Transport selection at the AllJoyn Router  For discovery, if an application selects a specific transport \n(TCP Transport or UDP Transport), then the  FoundAdvertisedName()  \ncallback is only sent for that transport. Also, as mentioned earlier, \nan app can indicate which specific transport to be used to \nestablish a session, and the AllJoyn router will attempt to \nperform session setup only over the specified AllJoyn transport.  If an app does not indicate a specific AllJoyn transport for \ndiscovery or session setup, the AllJoyn router behavior is to \ngive preference to UDP Transport. This behavior is mainly motivated \nby the fact that UDP Transport requires much smaller file descriptor \nresources which becomes an issue with TCP Transport as the number \nof connections grows.   For discovery, if an app does not indicate a specific AllJoyn transport \n(that is, TRANSPORT_ANY is specified), the  FoundAdvertisedName()  \ncallback is sent for both UDP Transport and TCP Transport, with the \ncallback for UDP Transport sent first. Similarly for session setup, \nif TRANSPORT_ANY was indicated by the app, the AllJoyn router \nwill establish session over UDP Transport if it is available \nat both endpoints of the connection. If the UDP Transport is not \navailable, then session setup will be done over TCP Transport.",
            "title": "Bus-to-Bus AllJoyn Transports"
        },
        {
            "location": "/learn/core/system-description/data-exchange/",
            "text": "Data Exchange\n\n\nOverview\n\n\nThe AllJoyn\n provider application implements one or more service \nobjects that provide service functionality. These service objects \nimplement one or more Bus interfaces which support methods, signals, \nand/or properties as interface members. AllJoyn applications can \nexchange data using these interface members. An AllJoyn session \nmust be established to exchange data between provider and consumer \napplications except when sending sessionless signals \n(see \nSessionless Signal\n). \n\n\nNOTE:\n AllJoyn service objects are not tied to any specific \nAllJoyn session. Any service object can be accessed over any AllJoyn session.\n\n\nThe following figure shows the functional architecture for \nthe provider application. \n\n\n\n\nFigure:\n Provider functional architecture\n\n\nAspects about the architecture follow.\n\n\n\n\nEach service object has an associated object path which app \nmay decide to announce as part of About feature's announcement signal. \n\n\nA provider device can host one or more AllJoyn sessions. \n\n\nThe provider app maintains distinct session port and a \nsession Id for each hosted session among other parameters. \n\n\nThe provider application endpoint connected to the AllJoyn \nrouter has one associated unique name and one or more well-known \nnames advertised by the application. \n\n\nThe AllJoyn router maintains session related state information. \n\n\n\n\nThis information is used to perform sessionId-based routing \nfor AllJoyn messages. \n\n\nOnce a session is established, the provider application can \ncommunicate with consumer apps via interface methods and \nproperties when invoked by the consumer side. The provider \napp can also send signals specified in the bus interfaces \nto send data to consumer apps.\n\n\nAfter an AllJoyn session is established, the consumer application \nhas the connection established to exchange data with the provider \napp. The consumer app in a session can invoke methods and properties \non the remote service objects, or can opt to receive signals \nemitted by the provider app. A ProxyBusObject is needed to \nexchange data via methods and properties. A signal handler \nis needed to receive signal data from the provider app.\n\n\nThe following figure shows the functional architecture for \nthe consumer application. \n\n\n\n\nFigure:\n Consumer functional architecture\n\n\nAspects of this architecture follow.\n\n\n\n\nA consumer app can join one or more AllJoyn sessions which \ncan be with the same or different provider apps. \n\n\nThe consumer app creates one or more proxy objects, one \nfor each remote service object it wants to communicate with. \n\n\nA proxy object is a local representation of the desired \nremote service object on the provider app. \n\n\nThe service object path, unique name of the provider app \nand sessionId information are provided to create a proxy object. \n\n\nTo receive signals from the provider app, consumer app \nregisters specific signal handlers with the AllJoyn router \nfor signal names specified in the service object. \n\n\nWhen a particular signal is received, specified signal \nhandler gets invoked.\n\n\nThe consumer application endpoint connected to the AllJoyn \nrouter has one associated unique name. \n\n\nThe AllJoyn router maintains session-related state information \nfor the joined sessions. This information is used to perform \nsessionId based routing for AllJoyn messages.\n\n\n\n\nData exchange via methods\n\n\nThe following use cases illustrate data exchange via method calls:\n\n\n\n\nProvider app sending a reply\n\n\nProvider app not sending a reply\n\n\n\n\nProvider app sending a reply\n\n\nThe following figure captures the message flow for the scenario \nwhen a consumer app remotely invokes a method call on the \nprovider app to exchange data. A METHOD_RETURN reply message \nis sent back to the consumer app.\n\n\n\n\nFigure:\n Data exchange via method calls (reply sent)\n\n\nThe message flow steps are described below.\n\n\n\n\nBoth the provider and consumer apps connect to the AllJoyn \nrouter and perform advertisement and discovery steps to \ndiscover desired services.\n\n\nThe provider app registers its service objects with the \nAllJoyn core library. This step is needed to expose service \nobjects to remote nodes on the network. The AllJoyn core library \nadds a MethodHandler for all the methods associated with a \ngiven service object.\n\n\nThe provider app binds a session port with the AllJoyn \nrouter via the AllJoyn core library's BindSessionPort API. \nThis call specifies a session port, session options and a \nSessionPortListener for the session.\n\n\nThe provider and consumer apps perform AllJoyn service \nadvertisement and discovery to discover the service offered \nby the provider app.\n\n\nThe consumer app establishes an AllJoyn session with the \nprovider app over the bound session port. Now there is a \nsession connection established between provider and consumer \napp to exchange data.\n\n\nThe consumer app creates a proxyBusObect via the AllJoyn \ncore library's GetProxyBusObjcet API. The app specifies unique \nname of provider app, object path for the service object, \nsessionId, and list of BusInterfaces to which the proxy \nobject should respond.\n\n\nThe consumer app gets the BusInterface from the created \nproxy object and calls a method on this BusInterface. \nThe app provides input parameters for the method.\n\n\nThe ProxyBusObject:MethodCall method is called, which \ngenerates an AllJoyn METHOD_CALL message for the method call.\n\n\nThe proxy object sends the generated METHOD_CALL message \nto the AllJoyn router.\n\n\nThe AllJoyn router receives the message and determines \nwhere this message needs to be routed based on the \nsession ID/destination information included in the message. \nIn this case, the message needs to be routed to remote \nAllJoyn router endpoint at the provider.\n\n\nThe AllJoyn router sends the METHOD_CALL message to the \nremote AllJoyn router over the established session connection. \nThe METHOD_CALL message includes a serial number, service \nobjectPath, interfaceName in the service object, member name \n(method name) within the interfaceName, sessionId, and sender \nunique name as part of the header fields of the message. \nThe method input parameters are included as part of the message body.\n\n\nThe provider AllJoyn router receives the METHOD_CALL \nmessage. It determines where this message needs to be \nrouted based on the session ID/destination information. \nIn this case, the message needs to be routed to the AllJoyn \ncore library app endpoint. \n\n\nThe AllJoyn router sends the METHOD_CALL message to \nthe AllJoyn core library endpoint. \n\n\nThe AllJoyn core library invokes the registered MethodHandler \nfor the method call member specified in the received message. \nThe MethodHandler invokes the actual method call with the \nBusInterface of the service object and receives the method \nresponse. It generates a METHOD_RETURN message for the method \nreply and sends to the AllJoyn router. \n\n\nThe AllJoyn router receives the METHOD_RETURN message \nand determines where this message needs to be routed based \non session ID/destination information included in the message. \nIn this case, the message needs to be routed to the remote \nAllJoyn router endpoint at the consumer.\n\n\nThe provider AllJoyn router sends the METHOD_RETURN \n   message to the remote AllJoyn router over established \n   session connection. The METHOD_RETURN message includes a \n   reply serial number (serial number of the associated METHOD_CALL \n   message), sessionId, and sender's unique name as part of \n   message header fields.  Any output parameters for the \n   METHOD_RETURN message is specified as part of the message body.\n\n\nThe consumer AllJoyn router receives the METHOD_RETURN \n  message. It determines where this message needs to be routed \n  based on the session ID/destination information. In this case, \n  the message needs to be routed to the app endpoint.\n\n\nThe AllJoyn router sends the METHOD_RETURN message to the \n  application's endpoint with output parameters as the response \n  to the original METHOD_CALL message. If the METHOD_CALL message \n  was sent asynchronously, a ReplyHandler gets registered which \n  is invoked when the METHOD_RETURN message is received.\n\n\n\n\nProvider app not sending a reply\n\n\nWhen defining an interface definition, the provider can annotate \nsome methods that are not returning any output parameters as \nNO_REPLY_EXPECTED. For such methods, the provider app will not \nbe sending any METHOD_RETURN message back to the consumer. \nWhen invoking such a method, the consumer should set the NO_REPLY_EXPECTED \nflag to indicate to the AllJoyn core library that it does \nnot need to start a timer and wait for a reply from the provider.\n\n\nThe following figure shows the message flow for the scenario \nwhen a method is invoked with the NO_REPLY_EXPECTED flag set, \nand no reply is sent by the provider app.\n\n\n\n\nFigure:\n Data exchange via method calls (reply not sent)\n\n\nMost of the message flow steps are similar to the reply sent \nmessage flow returning a method reply. The following captures \nthe distinguishing steps with respect to that flow.\n\n\n\n\nWhen defining a service interface, provider app annotates \none or more methods in the interface as NO_REPLY_EXPECTED. \nThe service object implementing the service interface gets \nregistered with the AllJoyn core library.\n\n\nOn the consumer side, when that method call is invoked \nvia ProxyObject interfaces, the consumer sets the NO_REPLY_EXPECTED \nflag. This indicates to the AllJoyn core library that it does \nnot need to start a timer and wait for a reply from the provider.\n\n\nThe METHOD_CALL message reaches the provider app and the \nassociated method gets invoked. Since the method was annotated \nwith NO_REPLY_EXPECTED, the provider app does not generate any reply.\n\n\n\n\nData exchange via signals\n\n\nThe following figure captures the message flow for the scenario \nwhen consumer app registers to receive signals from the provider \napp to exchange data. \n\n\n\n\nFigure:\n Data exchange via signals\n\n\nA signal gets forwarded to all participants in a session if \nonly sessionId is specified in the header (no destination field). \n\n\nIf a specific destination is specified in the header field, \nthen the signal is only sent to that participant.\n\n\nThe message flow steps are described below.\n\n\n\n\nBoth the provider and consumer apps connect to the AllJoyn \nrouter and perform advertisement and discovery steps to \ndiscover desired services.\n\n\nThe provider app registers its service objects with the \nAllJoyn core library. This step is needed to expose service \nobjects to remote nodes on the network. The AllJoyn core \nlibrary adds a MethodHandler for all the methods associated \nwith a given service object.\n\n\nThe provider app binds a session port with the AllJoyn \nrouter via the AllJoyn core library's BindSessionPort API. \nThis call specifies a session port, session options, and a \nSessionPortListener for the session.\n\n\nThe provider and consumer apps perform AllJoyn service \nadvertisement and discovery to discover the service offered \nby the provider app.\n\n\nThe consumer app establishes an AllJoyn session with \nthe provider app over the bound session port. Now there \nis a session connection established between provider and \nconsumer app to exchange data.\n\n\nThe consumer app registers a signal handler for receiving \nspecific signal from the provider side service object by \ninvoking RegisterSignalHandler API with the AllJoyn core library. \nThe app specifies the interface name for the interface which \nincludes the signal, name of the signal, object path for \nthe object receiving the signal, signal handler method, \nand source object path for signal emitter.\n\n\nThe AllJoyn core library invokes an AddMatch call with \nthe AllJoyn router to register the rule to receive this signal. \nThis rule specifies type=signal, interface name, signal \nmember name, and source object path for the object generating the signal.\n\n\nWhen the provider app has the signal to send, it invokes \nthe BusObject Signal(...) call specifying all the signal \nparameters. This call generates an AllJoyn SIGNAL message. \n\n\nThe SIGNAL message gets sent to the AllJoyn router. \n\n\nThe AllJoyn router receives the SIGNAL message and \ndetermines where this message needs to be routed based \non the session ID/destination information included in the \nmessage. In this case, the message needs to be routed to \nremote AllJoyn router endpoint at the consumer.\n\n\nThe consumer AllJoyn router receives the signal and \nfilters it based on registered match rules. In this case, \nthe signal matches the registered rule. The AllJoyn router \nsends the received SIGNAL message to the AllJoyn core library app endpoint.\n\n\nThe AllJoyn core library calls the registered signal \nhandler for the signal passing the received signal message parameters. \n\n\n\n\nData exchange via property\n\n\nThe provider and consumer apps can exchange data via property \nmembers defined in the BusInterfaces of the service object. \nA property member has predefined get and set method calls \nto get the value of the property and to set a specific value \non the property. The consumer app can invoke these get and \nset method calls for the property to exchange data. \n\n\nTo invoke these property methods, the message flow detailed \nfor method calls in \nData exchange via methods\n applies.\n\n\nSignal versus (method call without reply)\n\n\nIt is good to understand the difference between a signal and \nmethod call without a reply. In both cases, a single message \nis sent from the source; however, these are quite different. \nOne of the main differences is that they are sent in different \ndirections. A SIGNAL message is emitted by the provider app, \nwhereas a METHOD_CALL message is sent by the consumer app. \nIn addition, a SIGNAL message can be sent to be received by \neither a single destination or by multiple destinations, \nwhereas the METHOD_CALL message is always sent to a single destination.\n\n\nMatch rules\n\n\nThe AllJoyn framework supports D-Bus match rules for the consumer \napplication to request and receive specific set of messages. \nMatch rules describe the messages that should be sent to a \nconsumer app based on the contents of the message. Match rules \nare typically used to receive a specific set of signal messages. \nConsumer apps can ask to receive specific set of signals from \nthe AllJoyn router by specifying filtering/matching rules for signals. \n\n\nSignals that are sent to a specific destination do not need \nto match the consumer's match rule. Instead, match rules are \napplied to signals which are not sent to a specific destination; \nthey are meant to be received by multiple endpoints. These \ninclude broadcast signals, sessionless signals and session-specific \nsignals sent to multiple participants in the session. \nSuch signals get forwarded to only those consumer applications \nthat have a suitable match rule. This avoids unnecessary waking \nup and processing for signals at the consumer applications.\n\n\nConsumer applications can add a match rule by using the AddMatch \nmethod exposed by the AllJoyn router. Match rules are specified \nas a string of comma-separated key/value pairs. Excluding a key \nfrom the rule indicates a wildcard match, e.g., excluding the \nmember key from a match rule but adding a sender lets all \nmessages from that sender through. \n\n\nFor example:\n\n\nMatch Rule = \n\ntype='signal',sender='org.freedesktop.DBus',interface='org.freedesktop.DBus',\nmember='Foo',path='/bar/foo',destination=':452345.34'\n\n\n\n\n\nThe AllJoyn framework supports a subset of D-Bus match rules \nas captured in \nMatch rule keys supported by the AllJoyn framework\n. \n\n\nNOTE:\n The AllJoyn does not support D-Bus specified arg[0,1...N], \narg[0,1,...N]path, arg0namespace and eavesdrop='true' in match rules.\n\n\nMatch rule keys supported by the AllJoyn framework\n\n\n\n\n\n\n\n\nMatch key\n\n\nPossible values\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nsignal\nmethod_call\nmethod_return\nerror\n\n\nMatch on the message type. An example of a type match is type='signal'.\n\n\n\n\n\n\nsender\n\n\nA well-known name or unique name\n\n\nMatch messages sent by a particular sender. An example of a sender match is sender='org.alljoyn.Refrigerator'.\n\n\n\n\n\n\ninterface\n\n\nAn interface name\n\n\nMatch messages sent over or to a particular interface. An example of an interface match is interface='org.alljoyn.Refrigerator'. If a message omits the interface header, it must not match any rule that specifies this key.\n\n\n\n\n\n\nmember\n\n\nAny valid method or signal name\n\n\nMatches messages which have the give method or signal name. An example of a member match is member='NameOwnerChanged'.\n\n\n\n\n\n\npath\n\n\nAn object path\n\n\nMatches messages which are sent from or to the given object. An example of a path match is path='/org/alljoyn/Refrigerator'.\n\n\n\n\n\n\npath_namespace\n\n\nAn object path\n\n\nMatches messages which are sent from or to an object for which the object path is either the given value, or that value followed by one or more path components.\nFor example, path_namespace='/com/example/foo' would match signals sent by /com/example/foo or by /com/example/foo/bar, but not by /com/example/foobar.\nUsing both path and path_namespace in the same match rule is not allowed.\n\n\n\n\n\n\ndestination\n\n\nA unique name\n\n\nMatches messages which are being sent to the given unique name. An example of a destination match is destination=':100.2'.\n\n\n\n\n\n\n\n\nAn application can add multiple match rules for signals with the \nAllJoyn router. In this case, the app is essentially requesting \nto get signal messages based on multiple filtering criteria, and \nall match rules are applicable. As a result, the signal messages \nget sent to the app if they matches any of the specified match rules. \n\n\nThe AllJoyn router sends a union of messages to the app that \nmatches with the specified rules. For example, if there is a \nmore restrictive rule that matches a small set of signals, \nand there is another less restrictive rule that matches a \nlarger superset of signals, the AllJoyn router always sends \nthe larger superset of signals to the app.\n\n\nType system\n\n\nThe AllJoyn framework uses the D-Bus protocol type system \nwhich allows values of various types to be serialized in a \nstandard way into a sequence of bytes referred to as the \nwire format. Converting values from some other representation \ninto the wire format is called marshaling, and converting it \nback from the wire format is called unmarshaling. \n\n\nThe AllJoyn framework uses D-Bus marshaling format.\n\n\nType signatures\n\n\nThe AllJoyn framework uses the same type signatures that \nare used by the D-Bus protocol. The type signature is made \nup of type codes. The type code is an ASCII character that \nrepresents a standard data type. \n\n\nData types supported by the AllJoyn framework\n\n\n\n\n\n\n\n\nConventional name\n\n\nCode\n\n\nASCII\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nINVALID\n\n\n0\n\n\nNUL\n\n\nNot a valid type code, used to terminate signatures.\n\n\n\n\n\n\nBYTE\n\n\n121\n\n\n'y'\n\n\n8-bit unsigned integer.\n\n\n\n\n\n\nBOOLEAN\n\n\n98\n\n\n'b'\n\n\nBoolean value, 0 is FALSE and 1 is TRUE. Everything else is invalid.\n\n\n\n\n\n\nINT16\n\n\n110\n\n\n'n'\n\n\n16-bit signed integer.\n\n\n\n\n\n\nUINT16\n\n\n113\n\n\n'q'\n\n\n16-bit unsigned integer.\n\n\n\n\n\n\nINT32\n\n\n105\n\n\n'i'\n\n\n32-bit signed integer.\n\n\n\n\n\n\nUINT32\n\n\n117\n\n\n'u'\n\n\n32-bit unsigned integer.\n\n\n\n\n\n\nUINT64\n\n\n120\n\n\n'x'\n\n\n64-bit signed integer.\n\n\n\n\n\n\nDOUBLE\n\n\n100\n\n\n'd'\n\n\nIEEE 754 double.\n\n\n\n\n\n\nSTRING\n\n\n115\n\n\n's'\n\n\nUTF-8 string (must be valid UTF-8). Must be null terminated and contain no other null bytes.\n\n\n\n\n\n\nOBJECT_PATH\n\n\n111\n\n\n'o'\n\n\nName of an object instance.\n\n\n\n\n\n\nSIGNATURE\n\n\n103\n\n\n'g'\n\n\nA type signature.\n\n\n\n\n\n\nARRAY\n\n\n97\n\n\n'a'\n\n\nArray\n\n\n\n\n\n\nSTRUCT\n\n\n114, 40, 41\n\n\n'r', '(', ')'\n\n\nStruct\n\n\n\n\n\n\nVARIANT\n\n\n118\n\n\n'v'\n\n\nVariant type (the type of the value is part of the value itself).\n\n\n\n\n\n\nDICT_ENTRY\n\n\n101, 123, 125\n\n\n'e','{','}'\n\n\nEntry in a dict or map (array of key-value pairs).\n\n\n\n\n\n\n\n\nFour of the types are container types: STRUCT, ARRAY, VARIANT, \nand DICT_ENTRY. All other types are common basic data types. \nWhen specifying a STRUCT or DICT_ENTRY, 'r' and 'e' should \nnot be used. Instead, ASCII characters '(', ')', '{', and '}' \nshould be used to mark the beginning and ending of a container.\n\n\nMessage format\n\n\nThe AllJoyn framework uses the D-Bus message format and \nextends it with additional header flags and header fields \nfor AllJoyn messages. The AllJoyn message format is used \nto send messages between AllJoyn routers as well as between \nthe application and the AllJoyn router.\n\n\nMethod calls, method replies and signal messages get encapsulated \nin AllJoyn message format. D-Bus defined METHOD_CALL, METHOD_RETURN \nand SIGNAL messages are used (with AllJoyn enhancements) for \ntransporting these messages respectively. In case of error \nscenarios, an ERROR message is returned in reply to a method \ncall (instead of METHOD_RETURN). \n\n\nAn AllJoyn message consists of a header and a body. \nThe following figure shows the AllJoyn message format. \nDefinitions for each message format field are provided in subsequent tables.\n\n\n\n\nFigure:\n AllJoyn message format\n\n\nMessage format fields supported by the AllJoyn framework\n\n\n\n\n\n\n\n\nField name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nEndianness Flag\n\n\nEndianness of the message. ASCII 'l' for little-endian or ASCII 'B' for big-endian. Both header and body are in this endianness.\n\n\n\n\n\n\nMessage Type\n\n\nType of message. This field is set per the definitions specified in \nMessage Type definitions\n.\n\n\n\n\n\n\nHeader Flags\n\n\nProvides any applicable flags for the message. This field is bitwise OR of flags. Unknown flags must be ignored.\nThis is set per the definitions specified in \nHeader Flag definitions\n.\n\n\n\n\n\n\nMajor Protocol Version\n\n\nAllJoyn major protocol version for the sending application of this message.\n\n\n\n\n\n\nMessage Body Length\n\n\nLength (in bytes) of the message body, starting from the end of the header.\n\n\n\n\n\n\nSerial Number\n\n\nSerial number of this message. This is assigned by the sender and used as a cookie by the sender to identify the reply corresponding to this request. This must not be zero.\n\n\n\n\n\n\nList of Header Fields\n\n\nThis specifies an array of zero or more header fields where each field is a 1-byte field code followed by a field value.  This is represented as ARRAY of STRUCT of (BYTE, VARIANT). A header must contain the required header fields for its message type, and zero or more of any optional header fields. Implementations must ignore fields they do not understand.\nThe AllJoyn framework has extended the list of D-Bus defined header fields. \nHeader Fields definitions\n lists all the header fields supported by AllJoyn and mandatory/optional requirement for these fields for different message types.\n\n\n\n\n\n\nMessage Body\n\n\nBody of the message. The content of message body is interpreted based on SIGNATURE header field.\n\n\n\n\n\n\n\n\nMessage Type definitions\n\n\n\n\n\n\n\n\nName\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nINVALID\n\n\n0\n\n\nAn invalid type\n\n\n\n\n\n\nMETHOD_CALL\n\n\n1\n\n\nMethod call\n\n\n\n\n\n\nMETHOD_RETURN\n\n\n2\n\n\nMethod reply with returned data\n\n\n\n\n\n\nERROR\n\n\n3\n\n\nError reply\n\n\n\n\n\n\nSIGNAL\n\n\n4\n\n\nSignal emission\n\n\n\n\n\n\n\n\nHeader Flag definitions\n\n\n\n\n\n\n\n\nName\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNO_REPLY_EXPECTED\n\n\n0x01\n\n\nIndicates that no reply (method_return or error) is expected for the Method Call. The reply can be omitted as an optimization.\nNOTE:\n The provider app can still send back a reply despite this flag.\n\n\n\n\n\n\nAUTO_START\n\n\n0x02\n\n\nIndicates a request to start the service if not running. It is up to the AllJoyn core to honor this or not.\nNOTE:\n This flag is currently not supported.\n\n\n\n\n\n\nALLOW_REMOTE_MSG\n\n\n0x04\n\n\nIndicates that messages from remote hosts should be allowed (valid only in Hello message sent from app to the AllJoyn core). If set by the app, the AllJoyn core allows messages from remote apps/hosts to be sent to the application.\n\n\n\n\n\n\n(Reserved)\n\n\n0x08\n\n\nReserved/Unused\n\n\n\n\n\n\nSESSIONLESS\n\n\n0x10\n\n\nIndicates a sessionless signal message\n\n\n\n\n\n\nGLOBAL_BROADCAST\n\n\n0x20\n\n\nIndicates a global (bus-to-bus) broadcast signal. Applicable for signal only when SESSION_ID=0. If set, the associated signal gets delivered to all the nodes connected over any session in the proximal network.\n\n\n\n\n\n\nCOMPRESSED\n\n\n0x40\n\n\nIndicates that the AllJoyn message header is compressed.\n\n\n\n\n\n\nENCRYPTED\n\n\n0x80\n\n\nIndicates that the AllJoyn message body is encrypted.\n\n\n\n\n\n\n\n\nHeader Fields definitions\n\n\n\n\n\n\n\n\nName\n\n\nField code\n\n\nType\n\n\nRequired in\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nINVALID\n\n\n0\n\n\nN/A\n\n\nNot allowed\n\n\nNot a valid field name (error if it appears in a message).\n\n\n\n\n\n\nPATH\n\n\n1\n\n\nOBJECT_PATH\n\n\nMETHOD_CALL\nSIGNAL\n\n\nPath of the object to send a method call to or path of the object a signal is emitted from.\n\n\n\n\n\n\nINTERFACE\n\n\n2\n\n\nSTRING\n\n\nMETHOD_CALL\nSIGNAL\n\n\nInterface to invoke a method call on, or the interface that a signal is emitted from.\n\n\n\n\n\n\nMEMBER\n\n\n3\n\n\nSTRING\n\n\nMETHOD_CALL\nSIGNAL\n\n\nThe member, either the method name or signal name.\n\n\n\n\n\n\nERROR_NAME\n\n\n4\n\n\nSTRING\n\n\nERROR\n\n\nName of the error that occurred, for error messages.\n\n\n\n\n\n\nREPLY_SERIAL\n\n\n5\n\n\nUINT32\n\n\nERROR\nMETHOD_RETURN\n\n\nSerial number of the message this message is a reply to.\n\n\n\n\n\n\nDESTINATION\n\n\n6\n\n\nSTRING\n\n\nOptional for SIGNAL\nRequired for all other messages\n\n\nThe unique name of the connection this message is intended for.\n\n\n\n\n\n\nSENDER\n\n\n7\n\n\nSTRING\n\n\nRequired in all messages\n\n\nThe unique name of the sending connection. The message bus fills in this field.\n\n\n\n\n\n\nSIGNATURE\n\n\n8\n\n\nSIGNATURE\n\n\noptional\n\n\nThe data type signature of the message body. This is specified using D-Bus data type system.\nIf omitted, it is assumed to be the empty signature implying that the body must be of 0-length.\n\n\n\n\n\n\nN/A\n\n\n9\n\n\nN/A\n\n\nN/A\n\n\nUnused\n\n\n\n\n\n\nTIMESTAMP\n\n\n10\n\n\nUINT32\n\n\noptional\n\n\nTimestamp when the message was packaged.\n\n\n\n\n\n\nTIME_TO_LIVE\n\n\n11\n\n\nUINT16\n\n\noptional\nIf not specified, TTL is assumed to be infinite.\n\n\nTTL associated with the message. A message gets discarded by the AllJoyn router when the TTL expires.\nFor sessionless signal, the TTL value is specified in seconds.\nFor other messages, the TTL value is specified in msec.\n\n\n\n\n\n\nCOMPRESSION_TOKEN\n\n\n12\n\n\nUINT32\n\n\noptional\n\n\nToken generated for the messages with header compression on.\n\n\n\n\n\n\nSESSION_ID\n\n\n13\n\n\nUINT32\n\n\noptional\n\n\nSession ID for the session over which this message is being sent.\nIf missing, it is assumed to be 0.\n\n\n\n\n\n\n\n\nMessage routing\n\n\nThe AllJoyn system supports routing logic to route the following \ncategories of messages:\n\n\n\n\nApp-specific messages: These are app-generated messages that \nget routed between app endpoints based on the session ID/destination \nbased routing logic described in section 6.9.1.\n\n\nControl messages: These messages are generated by the AllJoyn \nrouter (e.g., AttachSession) that get routed to the local endpoint \nof the AllJoyn router.\n\n\n\n\nSession ID/destination-based routing\n\n\nThe AllJoyn system supports message routing based on session ID \nand/or destination fields for app-specific messages. A session \nID-based routing table is formed and maintained at the AllJoyn \nrouter for routing messages. A single routing table is maintained \nfor all the active sessions. \n\n\nConceptually, for every session ID, the routing table maintains \na list of destination app endpoints for every app participating \nin the session and next hop bus-to-bus endpoint for those app \nendpoints which are remote. A remote endpoint is attached to \na different AllJoyn router; however, it can be on the same \ndevice or on a different device. For destination endpoints that \nare local to the AllJoyn router, no bus-to-bus endpoint is \nmaintained in the routing table.\n\n\nAllJoyn routing table = List (session Id, List (destination app endpoint, \nnext hop B2B endpoint))\n\n\n\n\nNOTE:\n A given destination endpoint can appear multiple times \nas part of different sessionId entries in an AllJoyn routing \ntable. In this case, if there are multiple possible paths to a \nremote destination, different bus-to-bus endpoints can be used \nfor the same destination as part of different sessionId entries. \n\n\nWhen selecting a route, sessionId is used first to find a \nmatching entry in the routing table. Destination field is used \nnext to select a bus-to-bus endpoint (for remote destinations). \n\n\nThe following figure shows a deployment with two devices having \nan AllJoyn session established between them. All four apps \nare part of the session.\n\n\n\n\nFigure:\n AllJoyn routing example\n\n\nThe AllJoyn router on each of the device maintains a routing \ntable. \nSample routing table on provider device\n and\n[Sample routing table on consumer device][sample-routing-table-on-consumer-device] show sample\nAllJoyn routing tables maintained on the provider and consumer \nAllJoyn routers, respectively.\n\n\nSample routing table on provider device\n\n\n\n\n\n\n\n\nSession ID\n\n\nDestination (app endpoint)\n\n\nNext hop (B2B endpoint)\n\n\n\n\n\n\n\n\n\n\n10\n\n\nApp1 Endpoint (:100.2)\n\n\nN/A\n\n\n\n\n\n\n\n\nApp 2 Endpoint (:100.3)\n\n\nN/A\n\n\n\n\n\n\n\n\nApp 3 Endpoint (:200.2)\n\n\nB2B Endpoint (:100.4)\n\n\n\n\n\n\n\n\nApp 4 Endpoint (:200.3)\n\n\nB2B Endpoint (:100.4)\n\n\n\n\n\n\n\n\nSample routing table on consumer device\n\n\n\n\n\n\n\n\nSession ID\n\n\nDestination (app endpoint)\n\n\nNext hop (B2B endpoint)\n\n\n\n\n\n\n\n\n\n\n10\n\n\nApp1 Endpoint (:100.2)\n\n\nB2B Endpoint (:100.4)\n\n\n\n\n\n\n\n\nApp 2 Endpoint (:100.3)\n\n\nB2B Endpoint (:100.4)\n\n\n\n\n\n\n\n\nApp 3 Endpoint (:200.2)\n\n\nN/A\n\n\n\n\n\n\n\n\nApp 4 Endpoint (:200.3)\n\n\nN/A\n\n\n\n\n\n\n\n\nRouting table formation\n\n\nRouting tables are formed based on the bus-to-bus endpoint \ninformation included in the AttachSession method call. When \nan AllJoyn router receives an AttachSession call, it can be \nfrom an app trying to form a new session or from a new member \nbeing added to an existing session. \n\n\n\n\nAttachSession for a new session: In this case, the AllJoyn \nrouter sends an Accept session to the app. (Currently, the \nsingle-hop use case is captured.)  If the session is accepted, \nit creates a new sessionId. It then adds an entry for that \nsessionId in the routing table with the two participants \nas destinations and bus-to-bus endpoint received in the AttachSession \nas next hop for the remote app endpoint.\n\n\nAttachSession from an added member: In this case, the session \nis a multi-point session and the AllJoyn router already has an \nentry for the associated sessionId in the routing table. \nThe member from where the AttachSession is received gets added \nas a new destination with the bus-to-bus endpoint in the \nAttachSession as next hop.\n\n\n\n\nRouting logic\n\n\nAs described above, the sessionId from the message (if present) \nis used first to find a matching sessionId entry in the routing \ntable. Next, the destination field (if present) is used to find \na matching destination entry to perform the routing. \n\n\nThe following sections capture the routing logic for different use cases.\n\n\nRouting based on sessionId and destination field\n\n\nIf an app-directed message has a non-zero sessionId as well \nas destination fields, the AllJoyn router first finds that \nsessionId entry in the routing table and then finds the \ndestination entry within that sessionId for the message destination. \n\n\n\n\nIf the destination was a remote endpoint, then the message gets \nsent to the bus-to-bus endpoint specified for that destination in \nthe routing table. \n\n\nIf the destination is locally attached to the AllJoyn router, \nthe message gets directly sent over the local bus connection to \nthat destination.\n\n\n\n\nRouting based on sessionId field only\n\n\nIf an app-directed message only has a sessionId but no destination \nfield, the message gets forwarded to all the destination endpoints \nin that session. The AllJoyn router finds the matching sessionId \nentry in the routing table and send the message to all the destinations \nlisted for that session, except the one which sent the message. \n\n For remote app endpoints in the session, the message gets \nforwarded to associated bus-to-bus endpoint from the routing table. \n\n For locally attached app endpoints in the session, the AllJoyn \nrouter directly forwards message to those app endpoints over \nthe local bus connection. \n\n\nRouting for sessionId=0\n\n\nAn app-directed message can specify a sessionId=0 or, if no \nsessionId field is included, the AllJoyn router assumes sessionId \nto be 0. The sessionId field value can be zero for any message type. \nFor METHOD_CALL, METHOD_RETURN and ERROR messages, the only \nrequirement is that the destination field must be specified.  \n\n\nFor messages with sessionId=0 (or no specified sessionId), \nif a destination field is specified, the AllJoyn router selects \nany available route from the routing table (from any of the \nsession entry containing that destination) and forwards the \nmessage over the bus-to-bus endpoint for that route.\n\n\nFor SIGNAL messages with sessionId=0 (or no specified sessionId), \nthe destination field does not need to be present. In this case, \nthe AllJoyn router looks at the GLOBAL_BROADCAST flag in the message \nto determine how that SIGNAL message should be routed per logic below: \n\n\n\n\nGLOBAL_BROADCAST Flag set: The SIGNAL message should be globally \nbroadcast to all connected endpoints over any session. The Destination \nfield is not looked at when routing such a signal message. The AllJoyn \nrouter sends this message to all destination endpoints from the \nrouting table across all sessionIds. \n\n\nFor remote destinations, the SIGNAL message gets forwarded to \nthe associated bus-to-bus endpoint. \n\n\nFor locally connected destination, the message gets forwarded \ndirectly to the app endpoint over local bus connection.\n\n\nGLOBAL_BROADCAST Flag not set: The SIGNAL message should be \nsent over all the locally attached app endpoints. The AllJoyn \nrouter forwards the message to all of the locally connected \napp endpoint over local bus connection.",
            "title": "Data exchange"
        },
        {
            "location": "/learn/core/system-description/data-exchange/#data-exchange",
            "text": "",
            "title": "Data Exchange"
        },
        {
            "location": "/learn/core/system-description/data-exchange/#overview",
            "text": "The AllJoyn  provider application implements one or more service \nobjects that provide service functionality. These service objects \nimplement one or more Bus interfaces which support methods, signals, \nand/or properties as interface members. AllJoyn applications can \nexchange data using these interface members. An AllJoyn session \nmust be established to exchange data between provider and consumer \napplications except when sending sessionless signals \n(see  Sessionless Signal ).   NOTE:  AllJoyn service objects are not tied to any specific \nAllJoyn session. Any service object can be accessed over any AllJoyn session.  The following figure shows the functional architecture for \nthe provider application.    Figure:  Provider functional architecture  Aspects about the architecture follow.   Each service object has an associated object path which app \nmay decide to announce as part of About feature's announcement signal.   A provider device can host one or more AllJoyn sessions.   The provider app maintains distinct session port and a \nsession Id for each hosted session among other parameters.   The provider application endpoint connected to the AllJoyn \nrouter has one associated unique name and one or more well-known \nnames advertised by the application.   The AllJoyn router maintains session related state information.    This information is used to perform sessionId-based routing \nfor AllJoyn messages.   Once a session is established, the provider application can \ncommunicate with consumer apps via interface methods and \nproperties when invoked by the consumer side. The provider \napp can also send signals specified in the bus interfaces \nto send data to consumer apps.  After an AllJoyn session is established, the consumer application \nhas the connection established to exchange data with the provider \napp. The consumer app in a session can invoke methods and properties \non the remote service objects, or can opt to receive signals \nemitted by the provider app. A ProxyBusObject is needed to \nexchange data via methods and properties. A signal handler \nis needed to receive signal data from the provider app.  The following figure shows the functional architecture for \nthe consumer application.    Figure:  Consumer functional architecture  Aspects of this architecture follow.   A consumer app can join one or more AllJoyn sessions which \ncan be with the same or different provider apps.   The consumer app creates one or more proxy objects, one \nfor each remote service object it wants to communicate with.   A proxy object is a local representation of the desired \nremote service object on the provider app.   The service object path, unique name of the provider app \nand sessionId information are provided to create a proxy object.   To receive signals from the provider app, consumer app \nregisters specific signal handlers with the AllJoyn router \nfor signal names specified in the service object.   When a particular signal is received, specified signal \nhandler gets invoked.  The consumer application endpoint connected to the AllJoyn \nrouter has one associated unique name.   The AllJoyn router maintains session-related state information \nfor the joined sessions. This information is used to perform \nsessionId based routing for AllJoyn messages.",
            "title": "Overview"
        },
        {
            "location": "/learn/core/system-description/data-exchange/#data-exchange-via-methods",
            "text": "The following use cases illustrate data exchange via method calls:   Provider app sending a reply  Provider app not sending a reply   Provider app sending a reply  The following figure captures the message flow for the scenario \nwhen a consumer app remotely invokes a method call on the \nprovider app to exchange data. A METHOD_RETURN reply message \nis sent back to the consumer app.   Figure:  Data exchange via method calls (reply sent)  The message flow steps are described below.   Both the provider and consumer apps connect to the AllJoyn \nrouter and perform advertisement and discovery steps to \ndiscover desired services.  The provider app registers its service objects with the \nAllJoyn core library. This step is needed to expose service \nobjects to remote nodes on the network. The AllJoyn core library \nadds a MethodHandler for all the methods associated with a \ngiven service object.  The provider app binds a session port with the AllJoyn \nrouter via the AllJoyn core library's BindSessionPort API. \nThis call specifies a session port, session options and a \nSessionPortListener for the session.  The provider and consumer apps perform AllJoyn service \nadvertisement and discovery to discover the service offered \nby the provider app.  The consumer app establishes an AllJoyn session with the \nprovider app over the bound session port. Now there is a \nsession connection established between provider and consumer \napp to exchange data.  The consumer app creates a proxyBusObect via the AllJoyn \ncore library's GetProxyBusObjcet API. The app specifies unique \nname of provider app, object path for the service object, \nsessionId, and list of BusInterfaces to which the proxy \nobject should respond.  The consumer app gets the BusInterface from the created \nproxy object and calls a method on this BusInterface. \nThe app provides input parameters for the method.  The ProxyBusObject:MethodCall method is called, which \ngenerates an AllJoyn METHOD_CALL message for the method call.  The proxy object sends the generated METHOD_CALL message \nto the AllJoyn router.  The AllJoyn router receives the message and determines \nwhere this message needs to be routed based on the \nsession ID/destination information included in the message. \nIn this case, the message needs to be routed to remote \nAllJoyn router endpoint at the provider.  The AllJoyn router sends the METHOD_CALL message to the \nremote AllJoyn router over the established session connection. \nThe METHOD_CALL message includes a serial number, service \nobjectPath, interfaceName in the service object, member name \n(method name) within the interfaceName, sessionId, and sender \nunique name as part of the header fields of the message. \nThe method input parameters are included as part of the message body.  The provider AllJoyn router receives the METHOD_CALL \nmessage. It determines where this message needs to be \nrouted based on the session ID/destination information. \nIn this case, the message needs to be routed to the AllJoyn \ncore library app endpoint.   The AllJoyn router sends the METHOD_CALL message to \nthe AllJoyn core library endpoint.   The AllJoyn core library invokes the registered MethodHandler \nfor the method call member specified in the received message. \nThe MethodHandler invokes the actual method call with the \nBusInterface of the service object and receives the method \nresponse. It generates a METHOD_RETURN message for the method \nreply and sends to the AllJoyn router.   The AllJoyn router receives the METHOD_RETURN message \nand determines where this message needs to be routed based \non session ID/destination information included in the message. \nIn this case, the message needs to be routed to the remote \nAllJoyn router endpoint at the consumer.  The provider AllJoyn router sends the METHOD_RETURN \n   message to the remote AllJoyn router over established \n   session connection. The METHOD_RETURN message includes a \n   reply serial number (serial number of the associated METHOD_CALL \n   message), sessionId, and sender's unique name as part of \n   message header fields.  Any output parameters for the \n   METHOD_RETURN message is specified as part of the message body.  The consumer AllJoyn router receives the METHOD_RETURN \n  message. It determines where this message needs to be routed \n  based on the session ID/destination information. In this case, \n  the message needs to be routed to the app endpoint.  The AllJoyn router sends the METHOD_RETURN message to the \n  application's endpoint with output parameters as the response \n  to the original METHOD_CALL message. If the METHOD_CALL message \n  was sent asynchronously, a ReplyHandler gets registered which \n  is invoked when the METHOD_RETURN message is received.   Provider app not sending a reply  When defining an interface definition, the provider can annotate \nsome methods that are not returning any output parameters as \nNO_REPLY_EXPECTED. For such methods, the provider app will not \nbe sending any METHOD_RETURN message back to the consumer. \nWhen invoking such a method, the consumer should set the NO_REPLY_EXPECTED \nflag to indicate to the AllJoyn core library that it does \nnot need to start a timer and wait for a reply from the provider.  The following figure shows the message flow for the scenario \nwhen a method is invoked with the NO_REPLY_EXPECTED flag set, \nand no reply is sent by the provider app.   Figure:  Data exchange via method calls (reply not sent)  Most of the message flow steps are similar to the reply sent \nmessage flow returning a method reply. The following captures \nthe distinguishing steps with respect to that flow.   When defining a service interface, provider app annotates \none or more methods in the interface as NO_REPLY_EXPECTED. \nThe service object implementing the service interface gets \nregistered with the AllJoyn core library.  On the consumer side, when that method call is invoked \nvia ProxyObject interfaces, the consumer sets the NO_REPLY_EXPECTED \nflag. This indicates to the AllJoyn core library that it does \nnot need to start a timer and wait for a reply from the provider.  The METHOD_CALL message reaches the provider app and the \nassociated method gets invoked. Since the method was annotated \nwith NO_REPLY_EXPECTED, the provider app does not generate any reply.",
            "title": "Data exchange via methods"
        },
        {
            "location": "/learn/core/system-description/data-exchange/#data-exchange-via-signals",
            "text": "The following figure captures the message flow for the scenario \nwhen consumer app registers to receive signals from the provider \napp to exchange data.    Figure:  Data exchange via signals  A signal gets forwarded to all participants in a session if \nonly sessionId is specified in the header (no destination field).   If a specific destination is specified in the header field, \nthen the signal is only sent to that participant.  The message flow steps are described below.   Both the provider and consumer apps connect to the AllJoyn \nrouter and perform advertisement and discovery steps to \ndiscover desired services.  The provider app registers its service objects with the \nAllJoyn core library. This step is needed to expose service \nobjects to remote nodes on the network. The AllJoyn core \nlibrary adds a MethodHandler for all the methods associated \nwith a given service object.  The provider app binds a session port with the AllJoyn \nrouter via the AllJoyn core library's BindSessionPort API. \nThis call specifies a session port, session options, and a \nSessionPortListener for the session.  The provider and consumer apps perform AllJoyn service \nadvertisement and discovery to discover the service offered \nby the provider app.  The consumer app establishes an AllJoyn session with \nthe provider app over the bound session port. Now there \nis a session connection established between provider and \nconsumer app to exchange data.  The consumer app registers a signal handler for receiving \nspecific signal from the provider side service object by \ninvoking RegisterSignalHandler API with the AllJoyn core library. \nThe app specifies the interface name for the interface which \nincludes the signal, name of the signal, object path for \nthe object receiving the signal, signal handler method, \nand source object path for signal emitter.  The AllJoyn core library invokes an AddMatch call with \nthe AllJoyn router to register the rule to receive this signal. \nThis rule specifies type=signal, interface name, signal \nmember name, and source object path for the object generating the signal.  When the provider app has the signal to send, it invokes \nthe BusObject Signal(...) call specifying all the signal \nparameters. This call generates an AllJoyn SIGNAL message.   The SIGNAL message gets sent to the AllJoyn router.   The AllJoyn router receives the SIGNAL message and \ndetermines where this message needs to be routed based \non the session ID/destination information included in the \nmessage. In this case, the message needs to be routed to \nremote AllJoyn router endpoint at the consumer.  The consumer AllJoyn router receives the signal and \nfilters it based on registered match rules. In this case, \nthe signal matches the registered rule. The AllJoyn router \nsends the received SIGNAL message to the AllJoyn core library app endpoint.  The AllJoyn core library calls the registered signal \nhandler for the signal passing the received signal message parameters.",
            "title": "Data exchange via signals"
        },
        {
            "location": "/learn/core/system-description/data-exchange/#data-exchange-via-property",
            "text": "The provider and consumer apps can exchange data via property \nmembers defined in the BusInterfaces of the service object. \nA property member has predefined get and set method calls \nto get the value of the property and to set a specific value \non the property. The consumer app can invoke these get and \nset method calls for the property to exchange data.   To invoke these property methods, the message flow detailed \nfor method calls in  Data exchange via methods  applies.",
            "title": "Data exchange via property"
        },
        {
            "location": "/learn/core/system-description/data-exchange/#signal-versus-method-call-without-reply",
            "text": "It is good to understand the difference between a signal and \nmethod call without a reply. In both cases, a single message \nis sent from the source; however, these are quite different. \nOne of the main differences is that they are sent in different \ndirections. A SIGNAL message is emitted by the provider app, \nwhereas a METHOD_CALL message is sent by the consumer app. \nIn addition, a SIGNAL message can be sent to be received by \neither a single destination or by multiple destinations, \nwhereas the METHOD_CALL message is always sent to a single destination.",
            "title": "Signal versus (method call without reply)"
        },
        {
            "location": "/learn/core/system-description/data-exchange/#match-rules",
            "text": "The AllJoyn framework supports D-Bus match rules for the consumer \napplication to request and receive specific set of messages. \nMatch rules describe the messages that should be sent to a \nconsumer app based on the contents of the message. Match rules \nare typically used to receive a specific set of signal messages. \nConsumer apps can ask to receive specific set of signals from \nthe AllJoyn router by specifying filtering/matching rules for signals.   Signals that are sent to a specific destination do not need \nto match the consumer's match rule. Instead, match rules are \napplied to signals which are not sent to a specific destination; \nthey are meant to be received by multiple endpoints. These \ninclude broadcast signals, sessionless signals and session-specific \nsignals sent to multiple participants in the session. \nSuch signals get forwarded to only those consumer applications \nthat have a suitable match rule. This avoids unnecessary waking \nup and processing for signals at the consumer applications.  Consumer applications can add a match rule by using the AddMatch \nmethod exposed by the AllJoyn router. Match rules are specified \nas a string of comma-separated key/value pairs. Excluding a key \nfrom the rule indicates a wildcard match, e.g., excluding the \nmember key from a match rule but adding a sender lets all \nmessages from that sender through.   For example:  Match Rule =  type='signal',sender='org.freedesktop.DBus',interface='org.freedesktop.DBus',\nmember='Foo',path='/bar/foo',destination=':452345.34'   The AllJoyn framework supports a subset of D-Bus match rules \nas captured in  Match rule keys supported by the AllJoyn framework .   NOTE:  The AllJoyn does not support D-Bus specified arg[0,1...N], \narg[0,1,...N]path, arg0namespace and eavesdrop='true' in match rules.  Match rule keys supported by the AllJoyn framework     Match key  Possible values  Description      type  signal method_call method_return error  Match on the message type. An example of a type match is type='signal'.    sender  A well-known name or unique name  Match messages sent by a particular sender. An example of a sender match is sender='org.alljoyn.Refrigerator'.    interface  An interface name  Match messages sent over or to a particular interface. An example of an interface match is interface='org.alljoyn.Refrigerator'. If a message omits the interface header, it must not match any rule that specifies this key.    member  Any valid method or signal name  Matches messages which have the give method or signal name. An example of a member match is member='NameOwnerChanged'.    path  An object path  Matches messages which are sent from or to the given object. An example of a path match is path='/org/alljoyn/Refrigerator'.    path_namespace  An object path  Matches messages which are sent from or to an object for which the object path is either the given value, or that value followed by one or more path components. For example, path_namespace='/com/example/foo' would match signals sent by /com/example/foo or by /com/example/foo/bar, but not by /com/example/foobar. Using both path and path_namespace in the same match rule is not allowed.    destination  A unique name  Matches messages which are being sent to the given unique name. An example of a destination match is destination=':100.2'.     An application can add multiple match rules for signals with the \nAllJoyn router. In this case, the app is essentially requesting \nto get signal messages based on multiple filtering criteria, and \nall match rules are applicable. As a result, the signal messages \nget sent to the app if they matches any of the specified match rules.   The AllJoyn router sends a union of messages to the app that \nmatches with the specified rules. For example, if there is a \nmore restrictive rule that matches a small set of signals, \nand there is another less restrictive rule that matches a \nlarger superset of signals, the AllJoyn router always sends \nthe larger superset of signals to the app.",
            "title": "Match rules"
        },
        {
            "location": "/learn/core/system-description/data-exchange/#type-system",
            "text": "The AllJoyn framework uses the D-Bus protocol type system \nwhich allows values of various types to be serialized in a \nstandard way into a sequence of bytes referred to as the \nwire format. Converting values from some other representation \ninto the wire format is called marshaling, and converting it \nback from the wire format is called unmarshaling.   The AllJoyn framework uses D-Bus marshaling format.  Type signatures  The AllJoyn framework uses the same type signatures that \nare used by the D-Bus protocol. The type signature is made \nup of type codes. The type code is an ASCII character that \nrepresents a standard data type.   Data types supported by the AllJoyn framework     Conventional name  Code  ASCII  Description      INVALID  0  NUL  Not a valid type code, used to terminate signatures.    BYTE  121  'y'  8-bit unsigned integer.    BOOLEAN  98  'b'  Boolean value, 0 is FALSE and 1 is TRUE. Everything else is invalid.    INT16  110  'n'  16-bit signed integer.    UINT16  113  'q'  16-bit unsigned integer.    INT32  105  'i'  32-bit signed integer.    UINT32  117  'u'  32-bit unsigned integer.    UINT64  120  'x'  64-bit signed integer.    DOUBLE  100  'd'  IEEE 754 double.    STRING  115  's'  UTF-8 string (must be valid UTF-8). Must be null terminated and contain no other null bytes.    OBJECT_PATH  111  'o'  Name of an object instance.    SIGNATURE  103  'g'  A type signature.    ARRAY  97  'a'  Array    STRUCT  114, 40, 41  'r', '(', ')'  Struct    VARIANT  118  'v'  Variant type (the type of the value is part of the value itself).    DICT_ENTRY  101, 123, 125  'e','{','}'  Entry in a dict or map (array of key-value pairs).     Four of the types are container types: STRUCT, ARRAY, VARIANT, \nand DICT_ENTRY. All other types are common basic data types. \nWhen specifying a STRUCT or DICT_ENTRY, 'r' and 'e' should \nnot be used. Instead, ASCII characters '(', ')', '{', and '}' \nshould be used to mark the beginning and ending of a container.",
            "title": "Type system"
        },
        {
            "location": "/learn/core/system-description/data-exchange/#message-format",
            "text": "The AllJoyn framework uses the D-Bus message format and \nextends it with additional header flags and header fields \nfor AllJoyn messages. The AllJoyn message format is used \nto send messages between AllJoyn routers as well as between \nthe application and the AllJoyn router.  Method calls, method replies and signal messages get encapsulated \nin AllJoyn message format. D-Bus defined METHOD_CALL, METHOD_RETURN \nand SIGNAL messages are used (with AllJoyn enhancements) for \ntransporting these messages respectively. In case of error \nscenarios, an ERROR message is returned in reply to a method \ncall (instead of METHOD_RETURN).   An AllJoyn message consists of a header and a body. \nThe following figure shows the AllJoyn message format. \nDefinitions for each message format field are provided in subsequent tables.   Figure:  AllJoyn message format  Message format fields supported by the AllJoyn framework     Field name  Description      Endianness Flag  Endianness of the message. ASCII 'l' for little-endian or ASCII 'B' for big-endian. Both header and body are in this endianness.    Message Type  Type of message. This field is set per the definitions specified in  Message Type definitions .    Header Flags  Provides any applicable flags for the message. This field is bitwise OR of flags. Unknown flags must be ignored. This is set per the definitions specified in  Header Flag definitions .    Major Protocol Version  AllJoyn major protocol version for the sending application of this message.    Message Body Length  Length (in bytes) of the message body, starting from the end of the header.    Serial Number  Serial number of this message. This is assigned by the sender and used as a cookie by the sender to identify the reply corresponding to this request. This must not be zero.    List of Header Fields  This specifies an array of zero or more header fields where each field is a 1-byte field code followed by a field value.  This is represented as ARRAY of STRUCT of (BYTE, VARIANT). A header must contain the required header fields for its message type, and zero or more of any optional header fields. Implementations must ignore fields they do not understand. The AllJoyn framework has extended the list of D-Bus defined header fields.  Header Fields definitions  lists all the header fields supported by AllJoyn and mandatory/optional requirement for these fields for different message types.    Message Body  Body of the message. The content of message body is interpreted based on SIGNATURE header field.     Message Type definitions     Name  Value  Description      INVALID  0  An invalid type    METHOD_CALL  1  Method call    METHOD_RETURN  2  Method reply with returned data    ERROR  3  Error reply    SIGNAL  4  Signal emission     Header Flag definitions     Name  Value  Description      NO_REPLY_EXPECTED  0x01  Indicates that no reply (method_return or error) is expected for the Method Call. The reply can be omitted as an optimization. NOTE:  The provider app can still send back a reply despite this flag.    AUTO_START  0x02  Indicates a request to start the service if not running. It is up to the AllJoyn core to honor this or not. NOTE:  This flag is currently not supported.    ALLOW_REMOTE_MSG  0x04  Indicates that messages from remote hosts should be allowed (valid only in Hello message sent from app to the AllJoyn core). If set by the app, the AllJoyn core allows messages from remote apps/hosts to be sent to the application.    (Reserved)  0x08  Reserved/Unused    SESSIONLESS  0x10  Indicates a sessionless signal message    GLOBAL_BROADCAST  0x20  Indicates a global (bus-to-bus) broadcast signal. Applicable for signal only when SESSION_ID=0. If set, the associated signal gets delivered to all the nodes connected over any session in the proximal network.    COMPRESSED  0x40  Indicates that the AllJoyn message header is compressed.    ENCRYPTED  0x80  Indicates that the AllJoyn message body is encrypted.     Header Fields definitions     Name  Field code  Type  Required in  Description      INVALID  0  N/A  Not allowed  Not a valid field name (error if it appears in a message).    PATH  1  OBJECT_PATH  METHOD_CALL SIGNAL  Path of the object to send a method call to or path of the object a signal is emitted from.    INTERFACE  2  STRING  METHOD_CALL SIGNAL  Interface to invoke a method call on, or the interface that a signal is emitted from.    MEMBER  3  STRING  METHOD_CALL SIGNAL  The member, either the method name or signal name.    ERROR_NAME  4  STRING  ERROR  Name of the error that occurred, for error messages.    REPLY_SERIAL  5  UINT32  ERROR METHOD_RETURN  Serial number of the message this message is a reply to.    DESTINATION  6  STRING  Optional for SIGNAL Required for all other messages  The unique name of the connection this message is intended for.    SENDER  7  STRING  Required in all messages  The unique name of the sending connection. The message bus fills in this field.    SIGNATURE  8  SIGNATURE  optional  The data type signature of the message body. This is specified using D-Bus data type system. If omitted, it is assumed to be the empty signature implying that the body must be of 0-length.    N/A  9  N/A  N/A  Unused    TIMESTAMP  10  UINT32  optional  Timestamp when the message was packaged.    TIME_TO_LIVE  11  UINT16  optional If not specified, TTL is assumed to be infinite.  TTL associated with the message. A message gets discarded by the AllJoyn router when the TTL expires. For sessionless signal, the TTL value is specified in seconds. For other messages, the TTL value is specified in msec.    COMPRESSION_TOKEN  12  UINT32  optional  Token generated for the messages with header compression on.    SESSION_ID  13  UINT32  optional  Session ID for the session over which this message is being sent. If missing, it is assumed to be 0.",
            "title": "Message format"
        },
        {
            "location": "/learn/core/system-description/data-exchange/#message-routing",
            "text": "The AllJoyn system supports routing logic to route the following \ncategories of messages:   App-specific messages: These are app-generated messages that \nget routed between app endpoints based on the session ID/destination \nbased routing logic described in section 6.9.1.  Control messages: These messages are generated by the AllJoyn \nrouter (e.g., AttachSession) that get routed to the local endpoint \nof the AllJoyn router.   Session ID/destination-based routing  The AllJoyn system supports message routing based on session ID \nand/or destination fields for app-specific messages. A session \nID-based routing table is formed and maintained at the AllJoyn \nrouter for routing messages. A single routing table is maintained \nfor all the active sessions.   Conceptually, for every session ID, the routing table maintains \na list of destination app endpoints for every app participating \nin the session and next hop bus-to-bus endpoint for those app \nendpoints which are remote. A remote endpoint is attached to \na different AllJoyn router; however, it can be on the same \ndevice or on a different device. For destination endpoints that \nare local to the AllJoyn router, no bus-to-bus endpoint is \nmaintained in the routing table.  AllJoyn routing table = List (session Id, List (destination app endpoint, \nnext hop B2B endpoint))  NOTE:  A given destination endpoint can appear multiple times \nas part of different sessionId entries in an AllJoyn routing \ntable. In this case, if there are multiple possible paths to a \nremote destination, different bus-to-bus endpoints can be used \nfor the same destination as part of different sessionId entries.   When selecting a route, sessionId is used first to find a \nmatching entry in the routing table. Destination field is used \nnext to select a bus-to-bus endpoint (for remote destinations).   The following figure shows a deployment with two devices having \nan AllJoyn session established between them. All four apps \nare part of the session.   Figure:  AllJoyn routing example  The AllJoyn router on each of the device maintains a routing \ntable.  Sample routing table on provider device  and\n[Sample routing table on consumer device][sample-routing-table-on-consumer-device] show sample\nAllJoyn routing tables maintained on the provider and consumer \nAllJoyn routers, respectively.  Sample routing table on provider device     Session ID  Destination (app endpoint)  Next hop (B2B endpoint)      10  App1 Endpoint (:100.2)  N/A     App 2 Endpoint (:100.3)  N/A     App 3 Endpoint (:200.2)  B2B Endpoint (:100.4)     App 4 Endpoint (:200.3)  B2B Endpoint (:100.4)     Sample routing table on consumer device     Session ID  Destination (app endpoint)  Next hop (B2B endpoint)      10  App1 Endpoint (:100.2)  B2B Endpoint (:100.4)     App 2 Endpoint (:100.3)  B2B Endpoint (:100.4)     App 3 Endpoint (:200.2)  N/A     App 4 Endpoint (:200.3)  N/A     Routing table formation  Routing tables are formed based on the bus-to-bus endpoint \ninformation included in the AttachSession method call. When \nan AllJoyn router receives an AttachSession call, it can be \nfrom an app trying to form a new session or from a new member \nbeing added to an existing session.    AttachSession for a new session: In this case, the AllJoyn \nrouter sends an Accept session to the app. (Currently, the \nsingle-hop use case is captured.)  If the session is accepted, \nit creates a new sessionId. It then adds an entry for that \nsessionId in the routing table with the two participants \nas destinations and bus-to-bus endpoint received in the AttachSession \nas next hop for the remote app endpoint.  AttachSession from an added member: In this case, the session \nis a multi-point session and the AllJoyn router already has an \nentry for the associated sessionId in the routing table. \nThe member from where the AttachSession is received gets added \nas a new destination with the bus-to-bus endpoint in the \nAttachSession as next hop.   Routing logic  As described above, the sessionId from the message (if present) \nis used first to find a matching sessionId entry in the routing \ntable. Next, the destination field (if present) is used to find \na matching destination entry to perform the routing.   The following sections capture the routing logic for different use cases.  Routing based on sessionId and destination field  If an app-directed message has a non-zero sessionId as well \nas destination fields, the AllJoyn router first finds that \nsessionId entry in the routing table and then finds the \ndestination entry within that sessionId for the message destination.    If the destination was a remote endpoint, then the message gets \nsent to the bus-to-bus endpoint specified for that destination in \nthe routing table.   If the destination is locally attached to the AllJoyn router, \nthe message gets directly sent over the local bus connection to \nthat destination.   Routing based on sessionId field only  If an app-directed message only has a sessionId but no destination \nfield, the message gets forwarded to all the destination endpoints \nin that session. The AllJoyn router finds the matching sessionId \nentry in the routing table and send the message to all the destinations \nlisted for that session, except the one which sent the message.   For remote app endpoints in the session, the message gets \nforwarded to associated bus-to-bus endpoint from the routing table.   For locally attached app endpoints in the session, the AllJoyn \nrouter directly forwards message to those app endpoints over \nthe local bus connection.   Routing for sessionId=0  An app-directed message can specify a sessionId=0 or, if no \nsessionId field is included, the AllJoyn router assumes sessionId \nto be 0. The sessionId field value can be zero for any message type. \nFor METHOD_CALL, METHOD_RETURN and ERROR messages, the only \nrequirement is that the destination field must be specified.    For messages with sessionId=0 (or no specified sessionId), \nif a destination field is specified, the AllJoyn router selects \nany available route from the routing table (from any of the \nsession entry containing that destination) and forwards the \nmessage over the bus-to-bus endpoint for that route.  For SIGNAL messages with sessionId=0 (or no specified sessionId), \nthe destination field does not need to be present. In this case, \nthe AllJoyn router looks at the GLOBAL_BROADCAST flag in the message \nto determine how that SIGNAL message should be routed per logic below:    GLOBAL_BROADCAST Flag set: The SIGNAL message should be globally \nbroadcast to all connected endpoints over any session. The Destination \nfield is not looked at when routing such a signal message. The AllJoyn \nrouter sends this message to all destination endpoints from the \nrouting table across all sessionIds.   For remote destinations, the SIGNAL message gets forwarded to \nthe associated bus-to-bus endpoint.   For locally connected destination, the message gets forwarded \ndirectly to the app endpoint over local bus connection.  GLOBAL_BROADCAST Flag not set: The SIGNAL message should be \nsent over all the locally attached app endpoints. The AllJoyn \nrouter forwards the message to all of the locally connected \napp endpoint over local bus connection.",
            "title": "Message routing"
        },
        {
            "location": "/learn/core/system-description/events-actions/",
            "text": "Events and Actions\n\n\nOverview\n\n\nThe Events and Actions feature is part of the AllJoyn\ntrade Core,\ndesigned to enable creating If-This-Then-That (IFTTT)-based\nrules logic in the AllJoyn network.\n\n\n\n\nEvents are used by AllJoyn devices/apps to notify other\nAllJoyn devices/apps when something of significance occurs in the network.\n\n\nActions enable specific responses to AllJoyn events detected\nin the AllJoyn network. In this regard, Events and actions\ngo hand-in-hand. An action is a way for making an application\nor device do something.\n\n\n\n\nFor example, an AllJoyn application can broadcast an event\nsignifying that something has happened, such as movement\nthat was detected by a motion detector. An AllJoyn application\ncan receive this event and respond to it by taking a specific\naction, such as turning on the security camera.\n\n\nEvents are realized using AllJoyn sessionless signals,\nwhile actions are realized using AllJoyn methods. A description\nelement is added to the AllJoyn introspect XML format to\nprovide human readable text for the Events and Actions feature.\n\n\nThe following figure illustrates the context architecture\nfor the Events and Actions feature.\n\n\n\n\nFigure:\n Events and Actions context architecture\n\n\nEvents and actions are advertised in the Announcement signal\nusing the org.allseen.Inrospectable interface. Any advertised\nobject supporting an event-emitting interface or action-receiving\ninterface will include this new interface in the Announcement\nsignal. The Authoring app is an AllJoyn-enabled app that provides\na UI for creating IFTTT based rules for automation in the\nIoE network The Authoring app receives announcement signals\nfrom AllJoyn devices that emit events and/or can receive actions.\nThe app introspects those devices to retrieve a human-readable\ndescription for events and actions as part of the enhanced\nintrospection XML data.  \n\n\nThese human readable text description details can be presented\nto a user allowing the user to create IFTTT based rules for\nautomation in the IoE network. These IFTTT rules get configured\non a Rule Engine which could be on the same device or a different\ndevice than the Authoring app.\n\n\nNOTE:\n The Rules Engine is beyond the scope of current design\nand its implementation is left to the ecosystem). The Rules Engine\napp detects when the event is emitted. Based on the configured\nIFTTT rules, it executes actions (method call) on the action-receiving devices.\n\n\nEnhanced introspection XML\n\n\nThe AllJoyn system supports introspection XML format as\ndefined by the D-Bus specification via org.freedesktop.DBus.Introspectable\ninterface. To make events and actions discoverable, an enhanced AllJoyn\nintrospection XML is made available to provide human readable description\nelements. This XML provides description elements as applicable under Objects,\nInterfaces, Methods (including parameters), Signals (including parameters) and Properties.\n\n\nThe description element may appear inside the enhanced introspection\nXML under the elements captured in \nElements carrying description element\n.\n\n\nElements carrying description element\n\n\n\n\n\n\n\n\nXML element\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnode\n\n\nObjects and sub-objects within the tree of objects.\n\n\n\n\n\n\ninterface\n\n\nInterface element.\n\n\n\n\n\n\nmethod\n\n\nMethod element.\n\n\n\n\n\n\nproperty\n\n\nProperty element.\n\n\n\n\n\n\nsignal\n\n\nSignal element.\n\n\n\n\n\n\narg\n\n\nArguments to signals and methods.\n\n\n\n\n\n\n\n\nIn addition, the enhanced Introspection XML also includes\nsessionless=\"true|false\" attribute for the signal element\nto indicate whether or not it is sessionless signal.\n\n\nThe following is an example of enhanced introspection XML format.\n\n\nnode name=\n/com/example/LightBulb\n\n    \ndescription\nYour lightbulb\n/description\n\n    \ninterface name=\ncom.example.LightBulb\n\n        \ndescription\nProvides basic lighting functionality\n/description\n\n        \nmethod name=\nToggleSwitch\n\n            \ndescription\nInvoke this to toggle whether the light is on or off\n/description\n\n            \narg name=\nbrightness\n type=\ni\n direction=\nin\n\n                \ndescription\nA value to specify how bright the bulb should shine\n/description\n\n            \n/arg\n\n        \n/method\n\n        \nsignal name=\nLightOn\n sessless=\ntrue\n\n            \ndescription\nEmitted when the light turns on\n/description\n\n        \n/signal\n\n        \nproperty name=\nLightState\n type=\ny\n access=\nread\n\n            \ndescription\nThe current state of this light bulb\n/description\n\n        \n/property\n\n    \n/interface\n\n    \nnode name=\nchild\n\n        \ndescription\nSome relevant description\n/description\n\n    \n/node\n\n\n/node\n\n\n\n\n\nIntrospectable interface\n\n\nThe org.allseen.introspectable interface is designed to\nprovide access to the enhanced introspection XML containing\nthe description elements. The following table provides the definition\nfor the org.allseen.introspectable interface which is\nimplemented by all AllJoyn objects.\n\n\nIntrospectable interface methods\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAttachSession\n\n\nReturn the aggregate of the languages for which this object has descriptions. For example, if an object implements two interfaces, X and Y - X has all of its members described in English (en) and French (fr) and Y has some descriptions in English (en) and Chinese (cn), this method will return [\"en\", \"fr\", \"cn\"]. The language tags will comply with IETF language tag standards.\n\n\n\n\n\n\nIntrospectWithDescription\n\n\nReturns the XML defined above with descriptions in the specified language (exact match only - no best match). If an element, e.g., method, does not have a description in that language, no description attribute is placed within the element.\n\n\n\n\n\n\n\n\nIntrospectable.AttachSession method parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlanguageTags\n\n\nout\n\n\nList of the languages in which this object has descriptions.\n\n\n\n\n\n\n\n\nIntrospectable.IntrospectWithDescription method parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlanguageTag\n\n\nin\n\n\nRequested Language.\n\n\n\n\n\n\ndata\n\n\nout\n\n\nReturned introspection XML.",
            "title": "Events actions"
        },
        {
            "location": "/learn/core/system-description/events-actions/#events-and-actions",
            "text": "",
            "title": "Events and Actions"
        },
        {
            "location": "/learn/core/system-description/events-actions/#overview",
            "text": "The Events and Actions feature is part of the AllJoyn trade Core,\ndesigned to enable creating If-This-Then-That (IFTTT)-based\nrules logic in the AllJoyn network.   Events are used by AllJoyn devices/apps to notify other\nAllJoyn devices/apps when something of significance occurs in the network.  Actions enable specific responses to AllJoyn events detected\nin the AllJoyn network. In this regard, Events and actions\ngo hand-in-hand. An action is a way for making an application\nor device do something.   For example, an AllJoyn application can broadcast an event\nsignifying that something has happened, such as movement\nthat was detected by a motion detector. An AllJoyn application\ncan receive this event and respond to it by taking a specific\naction, such as turning on the security camera.  Events are realized using AllJoyn sessionless signals,\nwhile actions are realized using AllJoyn methods. A description\nelement is added to the AllJoyn introspect XML format to\nprovide human readable text for the Events and Actions feature.  The following figure illustrates the context architecture\nfor the Events and Actions feature.   Figure:  Events and Actions context architecture  Events and actions are advertised in the Announcement signal\nusing the org.allseen.Inrospectable interface. Any advertised\nobject supporting an event-emitting interface or action-receiving\ninterface will include this new interface in the Announcement\nsignal. The Authoring app is an AllJoyn-enabled app that provides\na UI for creating IFTTT based rules for automation in the\nIoE network The Authoring app receives announcement signals\nfrom AllJoyn devices that emit events and/or can receive actions.\nThe app introspects those devices to retrieve a human-readable\ndescription for events and actions as part of the enhanced\nintrospection XML data.    These human readable text description details can be presented\nto a user allowing the user to create IFTTT based rules for\nautomation in the IoE network. These IFTTT rules get configured\non a Rule Engine which could be on the same device or a different\ndevice than the Authoring app.  NOTE:  The Rules Engine is beyond the scope of current design\nand its implementation is left to the ecosystem). The Rules Engine\napp detects when the event is emitted. Based on the configured\nIFTTT rules, it executes actions (method call) on the action-receiving devices.",
            "title": "Overview"
        },
        {
            "location": "/learn/core/system-description/events-actions/#enhanced-introspection-xml",
            "text": "The AllJoyn system supports introspection XML format as\ndefined by the D-Bus specification via org.freedesktop.DBus.Introspectable\ninterface. To make events and actions discoverable, an enhanced AllJoyn\nintrospection XML is made available to provide human readable description\nelements. This XML provides description elements as applicable under Objects,\nInterfaces, Methods (including parameters), Signals (including parameters) and Properties.  The description element may appear inside the enhanced introspection\nXML under the elements captured in  Elements carrying description element .  Elements carrying description element     XML element  Description      node  Objects and sub-objects within the tree of objects.    interface  Interface element.    method  Method element.    property  Property element.    signal  Signal element.    arg  Arguments to signals and methods.     In addition, the enhanced Introspection XML also includes\nsessionless=\"true|false\" attribute for the signal element\nto indicate whether or not it is sessionless signal.  The following is an example of enhanced introspection XML format.  node name= /com/example/LightBulb \n     description Your lightbulb /description \n     interface name= com.example.LightBulb \n         description Provides basic lighting functionality /description \n         method name= ToggleSwitch \n             description Invoke this to toggle whether the light is on or off /description \n             arg name= brightness  type= i  direction= in \n                 description A value to specify how bright the bulb should shine /description \n             /arg \n         /method \n         signal name= LightOn  sessless= true \n             description Emitted when the light turns on /description \n         /signal \n         property name= LightState  type= y  access= read \n             description The current state of this light bulb /description \n         /property \n     /interface \n     node name= child \n         description Some relevant description /description \n     /node  /node",
            "title": "Enhanced introspection XML"
        },
        {
            "location": "/learn/core/system-description/events-actions/#introspectable-interface",
            "text": "The org.allseen.introspectable interface is designed to\nprovide access to the enhanced introspection XML containing\nthe description elements. The following table provides the definition\nfor the org.allseen.introspectable interface which is\nimplemented by all AllJoyn objects.  Introspectable interface methods     Method  Description      AttachSession  Return the aggregate of the languages for which this object has descriptions. For example, if an object implements two interfaces, X and Y - X has all of its members described in English (en) and French (fr) and Y has some descriptions in English (en) and Chinese (cn), this method will return [\"en\", \"fr\", \"cn\"]. The language tags will comply with IETF language tag standards.    IntrospectWithDescription  Returns the XML defined above with descriptions in the specified language (exact match only - no best match). If an element, e.g., method, does not have a description in that language, no description attribute is placed within the element.     Introspectable.AttachSession method parameters     Parameter name  Direction  Description      languageTags  out  List of the languages in which this object has descriptions.     Introspectable.IntrospectWithDescription method parameters     Parameter name  Direction  Description      languageTag  in  Requested Language.    data  out  Returned introspection XML.",
            "title": "Introspectable interface"
        },
        {
            "location": "/learn/core/system-description/",
            "text": "AllJoyn\n \u7cfb\u7edf\u63cf\u8ff0\n\n\n\u53d1\u5e03\u5386\u53f2\n\n\n\n\n\n\n\n\n\u53d1\u5e03\u7248\u672c\n\n\n\u65e5\u671f\n\n\n\u6539\u53d8\u5185\u5bb9\n\n\n\n\n\n\n\n\n\n\n14.06\n\n\n9/26/2014\n\n\n\u521d\u7248\n\n\n\n\n\n\n14.12\n\n\n12/17/2014\n\n\n14.12\u4e2d\u52a0\u5165\u7684\u65b0\u529f\u80fd:\nUDP \u4f20\u8f93\u8bbe\u8ba1\n\u8def\u7531\u7aef\u7684 TCP vs UDP \u9009\u62e9\u903b\u8f91\n\u57fa\u4e8e mDNS \u7684 TCL \u8def\u7531\u53d1\u73b0\u673a\u5236 TCL\n\u66f4\u65b0\u4e86 SLS fetch backoff \u8bbe\u8ba1\u4ee5\u652f\u6301\u7ebf\u6027+\u6307\u6570\u6027 backoff\n\u52a0\u5165\u8def\u7531\u63a2\u6d4b\u673a\u5236\u4ee5\u63a2\u6d4b\u5931\u8e2a\u7684\u5e94\u7528\u7a0b\u5e8f\n\u52a0\u5165\u53ef\u4ee5\u68c0\u6d4b\u5e76\u65ad\u5f00\u8bfb\u53d6\u901f\u5ea6\u6162\u7684\u8282\u70b9\u7684\u8def\u6709\u903b\u8f91\n\u5176\u4ed6\u66f4\u65b0:\nEndpoints \u5bf9 AllJoyn \u7684\u4f20\u8f93\u53ef\u7528\nTCP \u4f20\u8f93\u7684\u6570\u636e\u5e73\u9762\u6a21\u578b\u4ee5\u53ca\u72b6\u6001\u673a\nAllJoyn \u534f\u8bae\u7248\u672c\u4e0e\u4e0d\u540c\u53d1\u5e03\u7684\u5bf9\u5e94 \n\u8def\u7531\u95f4\u7684\u8fde\u63a5\u8d85\u65f6\u673a\u5236\u4ee5\u68c0\u6d4b\u5931\u8e2a\u8def\u7531\n\n\n\n\n\n\n15.04\n\n\n4/29/2015\n\n\n\u5728 Thin Apps \u90e8\u5206\u4e2d\u6709\u5173\u4e8e\u5982\u4e0b\u529f\u80fd\u7684\u66f4\u65b0:\n\u5b89\u5168\u6027\u4ee5\u53ca\u5bf9\u8def\u7531\u9009\u62e9\u6dfb\u52a0\u63cf\u8ff0\n\u4fee\u590d\u9519\u5b57\u589e\u5f3a\u53ef\u8bfb\u6027\u548c\u4e00\u81f4\u6027\u7684\u5e38\u89c4\u6e05\u7406\n\u5176\u4ed6\u66f4\u65b0:\n\u5e38\u89c4\u6e05\u7406\n\u53bb\u6389\u4e86\u5bf9 RSA \u548c PIN\u8ba4\u8bc1\u673a\u5236\u7684\u5f15\u7528\u7531\u4e8e\u4ed6\u4eec\u5c06\u4e0d\u88ab\u652f\u6301\n\n\n\n\n\n\n\n\n\u6b64\u90e8\u5206\u8be6\u7ec6\u63cf\u8ff0\u4e86 AllJoyn \u5728\u7cfb\u7edf\u5c42\u4e2d\u7684\u5de5\u4f5c\u65b9\u5f0f\n\n\n\u7cfb\u7edf\u6982\u89c8\n\n\n\u6982\u89c8\n\n\n\u7269\u8054\u7f51\uff08IoE\uff09\u662f\u4e00\u4e2a\u4ee4\u4eba\u5174\u594b\u7684\u613f\u666f\uff0c\u4ed6\u627f\u8bfa\u5c06\u4eba\u4e0e\u7269\u6216\u7269\u4e0e\u7269\u4ee5\u5404\u79cd\u65b9\u5f0f\u8fde\u63a5\u5728\u4e00\u8d77\uff1b\u8fd9\u5c06\u4f1a\u521b\u9020\u65b0\u7684\u5bb9\u91cf\u548c\u4e30\u5bcc\u7684\u4f53\u9a8c\uff0c\u5e76\u5c06\u4f7f\u6211\u4eec\u7684\u751f\u6d3b\u66f4\u7b80\u5355\u3002 IoE \u627f\u8bfa\u5c06\u628a\u4eba\uff0c\u8fdb\u7a0b\uff0c\u6570\u636e\u4ee5\u53ca\u7269\u54c1\u6c47\u805a\u5230\u4e00\u8d77\uff0c\u7ed9\u7f51\u7edc\u5316\u7684\u8fde\u63a5\u5e26\u6765\u524d\u6240\u672a\u6709\u7684\u76f8\u5173\u6027\u53ca\u4ef7\u503c\uff0c\u5c06\u4fe1\u606f\u8f6c\u5316\u6210\u884c\u52a8\uff0c\u5e76\u5e26\u6765\u4e4b\u524d\u4ece\u672a\u5b9e\u73b0\u8fc7\u7684\u80fd\u529b\u3002\n\n\nIoE \u5c06\u4f1a\u4e3a\u4f4f\u5b85\uff0c\u529e\u516c\u5ba4\uff0c\u6c7d\u8f66\uff0c\u8857\u9053\uff0c\u673a\u573a\u4ee5\u53ca\u8d2d\u7269\u4e2d\u5fc3\u7b49\u7b49\u5e26\u6765\u667a\u80fd\u7269\u54c1\u548c\u667a\u80fd\u8bbe\u5907\u3002\u8fd9\u4e9b\u8bbe\u5907\u5c06\u4e3a\u7528\u6237\u63d0\u4f9b\u5b9e\u65f6\u7684\u60c5\u666f\u4f53\u9a8c\u3002\u8ddd\u79bb\u76f8\u8fd1\u7684 IoE \u8bbe\u5907\u5c06\u7ec4\n\u5efa\u8fd1\u7aef IoE \u7f51\u7edc\uff0c\u4f8b\u5982\uff0c\u5728\u4f4f\u5b85\u5185\uff0c\u5728\u8f66\u91cc\u6216\u8005\u5728\u529e\u516c\u5ba4\u91cc\u3002IoE \u7684\u613f\u666f\u662f\u5b9e\u73b0\u591a\u4e2a IoE \u8fd1\u7aef\u7f51\u7edc\u7684\u4e92\u8fde\u4e92\u901a\u3002\n\n\n\u5bf9\u6bd4\u73b0\u4eca\u5b58\u5728\u7684\u56e0\u7279\u7f51\u4ee5\u53ca\u7269\u8054\u7f51\u53ef\u4ee5\u53d1\u73b0\u5f88\u591a\u6709\u8da3\u7684\u4e8b\u3002\u73b0\u4eca\u7684\u56e0\u7279\u7f51\u7531\u53d7\u56e0\u7279\u7f51\u7f16\u53f7\u7ba1\u7406\u5c40 (IANA) \u96c6\u4e2d\u7ba1\u7406\u7684\u6570\u767e\u4e07\u5df2\u6ce8\u518c\u7684\u9ad8\u5c42\u57df\u540d\u6784\u6210\u3002\u57df\u540d\u7684\u53d1\n\u73b0\u53ef\u7531\u901a\u8fc7\u57df\u540d\u7cfb\u7edf\uff08DNS\uff09\u8fdb\u884c\u6309\u5c42\u6b21\u67e5\u627e\u5b8c\u6210\u3002\u5728 IoE \u7f51\u7edc\u4e2d\uff0c\u4f1a\u5b58\u5728\u6f5c\u5728\u7684\u6570\u767e\u4ebf IoE \u8bbe\u5907\u3002\u7531\u53ef\u6d4b\u91cf\u6027\u7684\u89d2\u5ea6\u770b\uff0c\u60f3\u8981\u8bd5\u56fe\u901a\u8fc7\u4e00\u4e2a\u4e2d\u592e\u5b9e\u4f53\u5bf9 IoE\n\u8bbe\u5907\u6ce8\u518c\u8fdb\u884c\u7ba1\u7406\u662f\u4e0d\u592a\u53ef\u80fd\u7684\u3002\u5e76\u4e14\u5728 IoE \u7f51\u7edc\u4e2d\uff0c\u57fa\u4e8e\u90bb\u8fd1\u57df\u7684\u8bbe\u5907\u95f4\u4ea4\u4e92\u51cf\u5c11\u4e86\u5ef6\u8fdf\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u5c06\u6bcf\u4e2a\u8bbe\u5907\u90fd\u76f4\u8fde\u5230\u56e0\u7279\u7f51\u3002\u56e0\u6b64\uff0c\u7269\u8054\u7f51\u7684\u53d1\u73b0\u673a\n\u5236\u5e94\u8be5\u662f\u57fa\u4e8e\u90bb\u57df\u6807\u51c6\u81ea\u52a8\u89e6\u53d1\u7684\u3002\u7531\u4e8e\u8d8a\u6765\u8d8a\u591a\u7684\u4e2a\u4eba\u53ca\u5bb6\u5ead\u8bbe\u5907\u4f1a\u5c06\u63a5\u53e3\u66b4\u9732\u7ed9\u7269\u8054\u7f51\u7528\u4e8e\u8fde\u63a5\u53ca\u63a7\u5236\uff0c\u5b89\u5168\u6027\u548c\u9690\u79c1\u6027\u53d8\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\n\n\n\u4e0b\u56fe\u5c55\u793a\u4e86\u591a\u4e2a\u901a\u8fc7\u56e0\u7279\u7f51\u4e92\u76f8\u8fde\u63a5\u7684\u90bb\u57df IoE \u7f51\u7edc\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\n\n\n\n\nFigure:\n IoE \u7f51\u7edc\u5b9e\u4f8b\n\n\n\u901a\u8fc7\u76f4\u63a5\u7684\u70b9\u5bf9\u70b9\u8fde\u63a5\uff0cIoE \u90bb\u57df\u7f51\u7edc\u4e2d\u7684\u667a\u80fd\u8bbe\u5907\u53ef\u4ee5\u505a\u5230\u5bf9\u5176\u4ed6\u8bbe\u5907\u7684\u52a8\u6001\u53d1\u73b0\u548c\u901a\u4fe1\u3002\u5bf9\u4e8e\u67d0\u4e9b\u4f7f\u7528\u7f51\u7edc\u5730\u5740\u8f6c\u6362\u7684\u8bbe\u5907\uff0c\u4ed6\u4eec\u53ef\u4ee5\u901a\u8fc7\u57fa\u4e8e\u4e91\u7684\u53d1\u73b0\u670d\u52a1\u6765\u53d1\u73b0\u5bf9\u65b9\u3002\u57fa\u4e8e\u4e91\u7684\u53d1\u73b0\u670d\u52a1\u4e5f\u53ef\u4ee5\u88ab\u7528\u4e8e\u4e0d\u540c\u7684 IoE \u90bb\u57df\u7f51\u7edc\u5185 IoE \u8bbe\u5907\u7684\u53d1\u73b0\u548c\u8fde\u63a5\u3002\u7efc\u5408 IoE \u7f51\u7edc\u53ef\u80fd\u4f1a\u6709\u9644\u52a0\u7684\u7528\u6765\u63d0\u4f9b\u7279\u6b8a\u529f\u80fd\u7684\u57fa\u4e8e\u4e91\n\u7684\u670d\u52a1\uff0c\u4f8b\u5982\uff0c\u8fdc\u7a0b\u4f4f\u5b85\u81ea\u52a8\u5316\uff0c\u8fdc\u7a0b\u8bca\u65ad/\u4fdd\u517b\uff0c\u6570\u636e\u6536\u96c6/\u62a5\u544a\u7b49\u7b49\u3002IoE \u7f51\u7edc\u8fd8\u53ef\u4ee5\u5c06\u4e00\u4e9b\u73b0\u5b58\u7684\u57fa\u4e8e\u4e91\u7684\u670d\u52a1\u96c6\u6210\u8fdb\u6765\uff0c\u4f8b\u5982\u5c06 Facebook \u6216 Twitter \u96c6\u6210\u5230\u8bbe\u5907\u72b6\u6001\u66f4\u65b0\u4e2d\u3002\n\n\n\u5728\u4efb\u4f55 IoE \u7f51\u7edc\u4e2d\uff0c\u5185\u5728\u6216\u5938 IoE \u90bb\u57df\u7f51\u4e2d\u8bbe\u5907\u7684\u534f\u540c\u4e92\u7528\u6027\u5bf9\u63d0\u4f9b\u4e30\u5bcc\u7684\uff0c\u53ef\u6269\u5c55\u7684\uff0c\u4e3a\u8bbe\u5907\u63d0\u4f9b\u670d\u52a1\u53ca\u5e94\u7528\u7a0b\u5e8f\u7684 IoE \u751f\u6001\u7cfb\u7edf\u81f3\u5173\u91cd\u8981\u3002\u5728\u8bbe\u8ba1 IoE\n\u7cfb\u7edf\u65f6\uff0c\u4e00\u5b9a\u8981\u8003\u8651\u4e00\u4e9b\u7279\u5b9a\u7684\u5173\u952e\u8bbe\u8ba1\u5c42\u9762\uff0c\u5305\u62ec\u8bbe\u5907\u7684\u5e7f\u64ad\u53ca\u53d1\u73b0\uff0c\u79fb\u52a8\u6027\u548c\u52a8\u6001 IoE \u7f51\u7edc\u7ba1\u7406\uff0c\u5b89\u5168\u6027\u548c\u9690\u79c1\u6027\uff0c\u8de8\u8f7d\u4f53/\u64cd\u4f5c\u7cfb\u7edf\u7684\u534f\u540c\u4e92\u7528\n\u6027\uff0c\u7528\u4ee5\u652f\u6301\u7626\u7ec8\u7aef/\u54d1\u7ec8\u7aef\u7684\u8f7b\u91cf\u5316\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u5ef6\u5c55\u6027\u4ee5\u53ca\u603b\u4f53\u53ef\u6d4b\u91cf\u6027\u3002\u4e00\u4e2a\u6210\u529f\u7684 IoE \u7cfb\u7edf\u5fc5\u987b\u662f\u5f00\u653e\u7684\uff0c\u5e76\u63d0\u4f9b\u53ef\u7528\u4e8e\u8de8\u8d8a\u4e0d\u540c\u5782\u76f4\u7528\u4f8b\u7684\u6c34\u5e73\u5316\n\u89e3\u51b3\u65b9\u6848\u3002\n\n\nAllJoyn \u7cfb\u7edf\u4e13\u6ce8\u4e8e\u8fd9\u4e9b\u6838\u5fc3\u8bbe\u8ba1\u5c42\u9762\u3002\u6b64\u7cfb\u7edf\u63d0\u4f9b\u5f00\u6e90\u7684\u8f6f\u4ef6\u6846\u67b6\uff0c\u53ef\u5b9e\u73b0\u57fa\u4e8e\u90bb\u8fd1\u57df\u7684\uff0c\u70b9\u5bf9\u70b9\u7684\uff0c\u627f\u8f7d\u65e0\u5173\u7684 IoE \u8bbe\u5907\u7f51\u7edc\u5316\u3002AllJoyn \u7cfb\u7edf\u4e3a\u8bbe\u5907\u53ca\n\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u70b9\u5bf9\u70b9\u534f\u8bae\u5728\u90bb\u8fd1\u57df\u7f51\u7edc\u5185\u5e7f\u64ad\u5e76\u53d1\u73b0\u5bf9\u65b9\u7684\u65b9\u5f0f\u3002\n\n\nAllJoyn \u5f00\u6e90\u8f6f\u4ef6\u7cfb\u7edf\u63d0\u4f9b\u4e86\u53ef\u4ee5\u5b8c\u6210\u5938\u5f02\u6784\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684 IoE \u8bbe\u5907\u95f4\u901a\u4fe1\u7684\u6846\u67b6\u3002AllJoyn \u662f\u4e00\u4e2a\u57fa\u4e8e\u90bb\u8fd1\u57df\u7684\u70b9\u5bf9\u70b9\u901a\u4fe1\u5e73\u53f0\uff0c\u9762\u5411\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u8bbe\n\u5907\u3002\u4ed6\u4e0d\u9700\u8981\u4f7f\u7528\u96c6\u4e2d\u5f0f\u7684\u670d\u52a1\u5668\u6765\u5b8c\u6210\u901a\u4fe1\u3002\u652f\u6301 AllJoyn \u7684\u8bbe\u5907\u8fd0\u884c\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5f62\u6210\u70b9\u5bf9\u70b9\u7684 AllJoyn \u7f51\u7edc\u3002AllJoyn \u7cfb\u7edf\u662f\u5206\n\u5e03\u5f0f\u7684\u8f6f\u4ef6\u5e73\u53f0\uff0c\u652f\u6301\u8fd0\u884c\u5728 IoE \u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u63a8\u5e7f\uff0c\u53d1\u73b0\u670d\u52a1\uff0c\u4ee5\u53ca\u8fde\u63a5\u5230\u5176\u4ed6\u8bbe\u5907\u4ee5\u4f7f\u7528\u5176\u4ed6\u8bbe\u5907\u63d0\u4f9b\u7684\u670d\u52a1\u3002AllJoyn \u6846\u67b6\u4f7f\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\n\u8fc7\u53ef\u88ab\u53d1\u73b0\u7684 API \u6765\u66b4\u9732\u81ea\u5df1\u7684\u529f\u80fd\uff0c\u8fd9\u4e9b API \u662f\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u6240\u63d0\u4f9b\u7684\u529f\u80fd\u7684\u5951\u7ea6\u3002\n\n\n\u5728\u90bb\u8fd1\u57df AllJoyn \u7f51\u7edc\u4e2d\uff0c \u5b89\u88c5\u5728 IoE \u8bbe\u5907\u4e0a\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u4eec\u4e92\u4e3a peers. \u4e00\u4e2a\u652f\u6301 AllJoyn \u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u4f9b\u5e94\u65b9\uff0c\u6d88\u8d39\u65b9\uff0c\u6216\u8005\u65e2\u662f\n\u4f9b\u5e94\u65b9\u4e5f\u662f\u6d88\u8d39\u65b9\uff0c\u8fd9\u53d6\u51b3\u4e8e\u670d\u52a1\u6a21\u578b\u3002\u4f9b\u5e94\u65b9\u7684\u5e94\u7528\u7a0b\u5e8f\u5b9e\u73b0\u670d\u52a1\uff0c\u5e76\u5c06\u5b83\u4eec\u901a\u8fc7 AllJoyn \u7f51\u7edc\u63a8\u5e7f\u3002\u5bf9\u8fd9\u4e9b\u670d\u52a1\u6709\u5174\u8da3\u7684\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u8fde\u63a5\u5230\u4f9b\n\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u5e76\u6839\u636e\u81ea\u5df1\u7684\u559c\u597d\u4f7f\u7528\u670d\u52a1\u3002\u4e00\u4e2a AllJoyn \u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u626e\u6f14\u4f9b\u5e94\u65b9\u548c\u6d88\u8d39\u65b9\u7684\u89d2\u8272\u3002\u8fd9\u610f\u5473\u7740\u8be5\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5e7f\u64ad\u67d0\u4e00\u5957\u4ed6\u6240\u652f\u6301\u7684\u670d\n\u52a1\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u5e76\u5229\u7528\u5176\u5b83\u5728\u90bb\u8fd1\u57df\u4e2d\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u63d0\u4f9b\u7684\u5404\u79cd\u670d\u52a1\u3002\n\n\n\u4e0b\u56fe\u5c55\u793a\u4e86\u67094\u53f0\u8bbe\u5907\u7684 AllJoyn \u7f51\u7edc\n\n\n\n\nFigure:\n AllJoyn \u7f51\u7edc\n\n\n\u8bbe\u59071\u548c\u8bbe\u59072\u53ea\u6709\u63d0\u4f9b AllJoyn \u670d\u52a1\u7684\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u3002\u8bbe\u59073\u53ea\u6709\u4f7f\u7528\u5176\u5b83\u8bbe\u5907\u670d\u52a1\u7684\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u3002\u8bbe\u59074\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u5145\u5f53\u4f9b\u5e94\u65b9\u548c\u6d88\u8d39\u65b9\u3002\u8bbe\u59074\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u8bbe\u59072\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u63d0\u4f9b\u7684\u670d\u52a1\u3002\u540c\u65f6\u4ed6\u63d0\u4f9b\u7684\u670d\u52a1\u8fd8\u88ab\u8bbe\u59073\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u4f7f\u7528\u3002\u7bad\u5934\u7684\u65b9\u5411\u4ece\u4f9b\u5e94\u65b9\u6307\u5411\u6d88\u8d39\u65b9\uff0c\u6307\u793a\u7740\u670d\u52a1\u7684\u6d88\u8d39\u3002\n\n\nAllJoyn \u6846\u67b6\u4e3a IoE \u8bbe\u5907\u4e4b\u95f4\u7684\u901a\u4fe1\u5efa\u7acb\u4e86\u4e00\u4e2a\u5e95\u5c42\u603b\u7ebf\u7ed3\u6784\u3002\u5728 IoE \u8bbe\u5907\u4e0a\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f \u901a\u8fc7 AllJoyn \u603b\u7ebf\u4e0e\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u8fde\u63a5\u5e76\u901a\u4fe1\u3002\nAllJoyn \u603b\u7ebf\u4e3a\u5728 IoE \u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u53ef\u4ee5\u53d1\u9001\u901a\u77e5\u6216\u8005\u4ea4\u6362\u6570\u636e\u7684\u5e73\u53f0\u4ee5\u53ca\u65e0\u7ebf\u94fe\u8def\u65e0\u5173\u7684\u4f20\u8f93\u673a\u5236\u3002AllJoyn \u603b\u7ebf\u8d1f\u8d23\u5904\u7406\u4e0e\u5e95\u5c42\u7269\u7406\u7684\u7279\u5b9a\u7f51\n\u7edc\u4f20\u8f93\u76f8\u914d\u9970\u7684\u5de5\u4f5c\u3002\n\n\n\u6bcf\u4e00\u4e2a AllJoyn \u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u8fde\u63a5\u5230\u672c\u5730\u7684 AllJoyn \u603b\u7ebf\u3002\u4e00\u4e2a\u7ed9\u5b9a\u7684\u672c\u5730 AllJoyn \u603b\u7ebf\u53ef\u4ee5\u8fde\u63a5\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002AllJoyn \u603b\u7ebf\u4f7f\u9644\u7740\u5728\u5b83\u4e0a\u9762\u7684\n\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5b8c\u6210\u5e7f\u64ad\u670d\u52a1\uff0c\u53d1\u73b0\u670d\u52a1\u4ee5\u53ca\u4e92\u76f8\u901a\u4fe1\u7684\u529f\u80fd\u3002\u5728\u591a\u4e2a\u8bbe\u5907\u4e0a\u7684 AllJoyn \u603b\u7ebf\u7528\u7c7b\u4f3c Wi-Fi \u7684\u5e95\u5c42\u7f51\u7edc\u6280\u672f\u6765\u4e92\u76f8\u901a\u4fe1\u3002\n\n\nAllJoyn \u5e73\u53f0\u7684\u5f00\u6e90\u5b9e\u73b0\u65b9\u5f0f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u751f\u6001\u7cfb\u7edf\uff0c\u8bf8\u591a\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u65b0\u529f\u80fd\u53ca\u589e\u5f3a\u529f\u80fd\u6765\u4e3a AllJoyn \u751f\u6001\u7cfb\u7edf\u505a\u8d21\u732e\u3002\u6b64\u7cfb\u7edf\u652f\u6301\u901a\u8fc7 OS \u62bd\u8c61\u5c42\u5b9e\u73b0\n\u7684\u64cd\u4f5c\u7cfb\u7edf\u65e0\u5173\u6027\uff0c\u4f7f\u5f97 AllJoyn \u6846\u67b6\u4ee5\u53ca\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5728\u591a\u79cd\u64cd\u4f5c\u5e73\u53f0\u4e0a\u8fd0\u884c\u3002AllJoyn\u6846\u67b6\u652f\u6301\u5927\u591a\u6570\u7684\u6807\u51c6 Linux \u53d1\u884c\u7248\uff0cAndroid2.3 \u53ca\u540e\u7eed\u7248\u672c\uff0c\n\u5e38\u89c1\u7684 Microsoft Windows \u64cd\u4f5c\u7cfb\u7edf\uff0cApple iOS, Mac OS X, \u5d4c\u5165\u5f0f\u7684\u8bf8\u5982 OpenWRT \u7684\u64cd\u4f5c\u7cfb\u7edf\u4ee5\u53ca\u7c7b\u4f3c ThreadX \u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u3002\n\n\nAllJoyn \u6846\u67b6\u540c\u65f6\u4e5f\u652f\u6301\u591a\u79cd\u7528\u4e8e\u4e3a IoE\u8bbe\u5907\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u53ca\u670d\u52a1\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8fd9\u4e30\u5bcc\u4e86\u5f00\u53d1 AllJoyn \u5e94\u7528\u53ca\u670d\u52a1\u7684\u751f\u6001\u7cfb\u7edf\u3002 AllJoyn \u6846\u67b6\u76ee\u524d\u652f\u6301C, C++, Java, C#, JavaScript, \u4ee5\u53ca Objective-C.\n\n\nAllJoyn \u7cfb\u7edf\u4ee5\u53ca D-bus \u89c4\u8303\n\n\nAllJoyn\u7cfb\u7edf\n\n\nAllJoyn \u5b9e\u73b0\u4e86\u4e00\u4e2a\u5e7f\u6cdb\u517c\u5bb9\u7684 D-Bus over-the-wire \u534f\u8bae\uff0c\u5e76\u9075\u5b88\u5728 D-Bus \u89c4\u8303\u4e2d\u7684\u4f17\u591a\u547d\u540d\u4e60\u4fd7\u548c\u6307\u5bfc\u539f\u5219\u3002AllJoyn \u5ef6\u5c55\u5e76\u663e\u8457\u5f3a\u5316\u4e86 D-Bus \u6d88\u606f\n\u603b\u7ebf\uff0c\u4ee5\u652f\u6301\u5206\u5e03\u5f0f\u603b\u7ebf\u7684\u573a\u666f\u3002AllJoyn \u7cfb\u7edf\u4f7f\u7528\u6309\u7167\u4e0b\u6587\u63cf\u8ff0\u7684 D-Bus \u89c4\u8303\uff1a\n\n\n\n\n\u4f7f\u7528 D-Bus \u7684\u6570\u636e\u7c7b\u578b\u7cfb\u7edf\u4ee5\u53ca\u5e8f\u5217\u5316\u683c\u5f0f\n\n\n\u901a\u8fc7\u6dfb\u52a0 flags \u4ee5\u53ca headers\uff08\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u9605\nMessage format\n\uff09\u5b9e\u73b0\u589e\u5f3a\u7248\u7684 D-Bus over-the-wire \u534f\u8bae\u3002\n\n\n\u5bf9 well-known names \uff08\u670d\u52a1\u5668\uff09\uff0c\u63a5\u53e3\uff0c\u63a5\u53e3\u6210\u5458\uff08\u65b9\u6cd5\uff0c\u4fe1\u53f7\u4ee5\u53ca\u5c5e\u6027\uff09\u4ee5\u53ca\u5bf9\u8c61\u8def\u5f84\u7684\u547d\u540d\u4f7f\u7528 D-Bus \u7684\u547d\u540d\u539f\u5219\u3002\n\n\n\u4f7f\u7528 D-Bus \u5b9a\u4e49\u7684\u7b80\u5355\u8ba4\u8bc1\u4e0e\u5b89\u5168\u5c42\uff08SASL\uff09\u6846\u67b6\u5b8c\u6210\u5e94\u7528\u7a0b\u5e8f\u5c42\u4e2d\u652f\u6301 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u95f4\u7684\u8ba4\u8bc1\u3002\u5e76\u652f\u6301\u4e0d\u9650\u4e8e\u7531 D-Bus \u89c4\u8303\u5b9a\u4e49\u7684\u591a\u79cd\u8ba4\u8bc1\u673a\u5236\u3002\n\n\n\n\nD-Bus \u89c4\u8303\u8bf7\u53c2\u9605\u4ee5\u4e0b\u7f51\u5740\uff1a (http://dbus.freedesktop.org/doc/dbus-specification.html).\n\n\nAllJoyn \u7cfb\u7edf\u7684\u5173\u952e\u6982\u5ff5\n\n\n\u5982\u4e4b\u524d\u6240\u8ff0\uff0cAllJoyn \u6846\u67b6\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u53ef\u4ee5\u63a8\u5e7f\u548c\u53d1\u73b0\u670d\u52a1\uff0c\u4ee5\u53ca\u4f7f\u7528\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7684\u529f\u80fd\u7684\u5e95\u5c42\u603b\u7ebf\u7ed3\u6784\u3002\u4e3a\u4e86\u5b9e\u73b0\u6b64\u7ed3\u6784\uff0cAllJoyn \u6846\u67b6\u63d0\u4f9b\u4e86\n\u4e00\u4e2a\u53ef\u4f9b\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4e92\u7684\u9762\u5411\u5bf9\u8c61\u7684\u8f6f\u4ef6\u6846\u67b6\u3002\n\n\nAllJoyn \u8def\u7531\n\n\nAllJoyn \u8def\u7531\u7ec4\u4ef6\u4e3a AllJoyn \u7cfb\u7edf\u63d0\u4f9b\u6838\u5fc3\u529f\u80fd\uff0c\u5305\u62ec\u70b9\u5bf9\u70b9\u63a8\u5e7f/\u53d1\u73b0\uff0c\u5efa\u7acb\u8fde\u63a5\uff0c\u5e7f\u64ad\u4fe1\u53f7\u4ee5\u53ca\u63a7\u5236/\u6295\u9012\u6570\u636e\u6d88\u606f\u3002AllJoyn \u8def\u7531\u901a\u8fc7\u5b9e\u73b0\u8f6f\u4ef6\u603b\u7ebf\u529f\u80fd\n\u4ee5\u53ca\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u8fde\u63a5\u4f7f AllJoyn \u6846\u67b6\u7684\u6838\u5fc3\u529f\u80fd\u53d7\u76ca\u3002\u6bcf\u4e00\u4e2a AllJoyn \u8def\u7531\u7684\u5b9e\u4f8b\u90fd\u6709\u4e00\u4e2a\u81ea\u884c\u5206\u914d\u7684\u5168\u7403\u552f\u4e00\u6807\u8bc6\u7b26\uff08GUID\uff09\u3002\u6b64 GUID \u5e76\u4e0d\u662f\u6301\u4e45\u6709\n\u6548\u7684\uff0c\u6bcf\u5f53 AllJoyn \u8def\u7531\u542f\u52a8\u65f6\u90fd\u4f1a\u88ab\u5206\u914d\u4e00\u4e2a\u65b0\u7684 GUID. AllJoyn \u8def\u7531\u53ef\u4ee5\u662f\u6346\u7ed1\u5728\u6bcf\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e0a\u7684\uff08\u6346\u7ed1\u6a21\u5f0f\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u88ab\u4f17\u591a\u5e94\u7528\u7a0b\u5e8f\u6240\u5206\u4eab\n\u7684\uff08\u72ec\u7acb\u6a21\u578b\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n\n\n\nFigure:\n AllJoyn \u6346\u7ed1\u5f0f\u4ee5\u53ca\u72ec\u7acb\u5f0f router \u4e3e\u4f8b\n\n\nAllJoyn \u8def\u7531\u6709\u5b9a\u4e49\u4e86\u88ab\u652f\u6301\u529f\u80fd\u96c6\u5408\u7684\u76f8\u5173 AllJoyn \u534f\u8bae\u8bd1\u672c\u3002\u5728\u8fde\u63a5\u5efa\u7acb\u540e\uff0c\u6b64\u534f\u8bae\u4f1a\u5728 AllJoyn \u7f51\u7edc\u4e0a\u7684 AllJoyn \u8def\u7531\u4e4b\u95f4\u4ea4\u6362\uff0c\u4f5c\u4e3a\u5efa\u7acb AllJoyn\n\u4f1a\u8bdd\u7684\u4e00\u90e8\u5206\u3002\n\n\nAllJoyn \u603b\u7ebf\n\n\nAllJoyn \u8def\u7531\u63d0\u4f9b\u4e86\u8f6f\u4ef6\u603b\u7ebf\u529f\u80fd\uff0c\u501f\u52a9\u6b64\u529f\u80fd\u4e00\u4e2a\u6216\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4e0e\u603b\u7ebf\u5efa\u7acb\u8fde\u63a5\u5e76\u4ea4\u6362\u6d88\u606f\u3002\u5728\u8bbe\u5907\u4e0a\u7684 AllJoyn \u8def\u7531\u5b9e\u4f8b\u5efa\u7acb\u672c\u5730\u7684 AllJoyn \u903b \u8f91\u603b\u7ebf\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n\n\n\nFigure:\n AllJoyn \u8def\u7531\u5230 AllJoyn \u603b\u7ebf\u7684\u6620\u5c04\u8f6c\u6362\n\n\nAllJoyn \u903b\u8f91\u603b\u7ebf\u6620\u5c04\u5230\u4e00\u4e2a\u5355\u72ec\u7684 AllJoyn \u8def\u7531\u6709\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a\n\n\n\n\n\u8bbe\u5907\u4e0a\u53ea\u6709\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6346\u7ed1\u90e8\u7f72\u6a21\u578b\uff0c\u5982 UC2 \u6240\u793a\u3002\n\n\n\u8bbe\u5907\u4e0a\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u72ec\u7acb\u90e8\u7f72\u6a21\u578b\uff0c\u5982 UC3 \u6240\u793a\u3002\n\n\n\n\n\u5728\u8bbe\u5907\u4e0a\u6709\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6346\u7ed1\u90e8\u7f72\u6a21\u578b\u4e2d\uff0cAllJoyn \u903b\u8f91\u603b\u7ebf\u6620\u5c04\u5230\u591a\u4e2a AllJoyn \u8def\u7531\u5b9e\u4f8b\u7684\u60c5\u51b5\u8bf7\u53c2\u9605 UC1.\n\n\n*\nNOTE:\n8 \u5728\u6b64\u6587\u6863\u4e2d\uff0cAllJoyn \u8def\u7531\u4e0e AllJoyn \u603b\u7ebf\u8fd9\u4e24\u4e2a\u672f\u8bed\u662f\u53ef\u4ee5\u76f8\u4e92\u66ff\u6362\u7684\uff0c\u4ed6\u4eec\u6307\u4ee3\u7740\u4e00\u4e2a\u7531 AllJoyn \u7cfb\u7edf\u63d0\u4f9b\u7684\u76f8\u540c\u96c6\u5408\u7684\u603b\u7ebf\u529f\u80fd\u3002\n\n\n\u4e0b\u56fe\u662f\u5728\u6709\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u8fde\u63a5\u5230\u603b\u7ebf\u7684\u4e24\u4e2a\u4e0d\u540c\u8bbe\u5907\u4e0a\u7684 AllJoyn \u672c\u5730\u603b\u7ebf\u7684\u7b80\u5316\u89c6\u56fe\u3002\n\n\n\n\nFigure:\n AllJoyn \u603b\u7ebf\n\n\nAllJoyn \u603b\u7ebf\u4e3a\u8fde\u63a5\u5230\u603b\u7ebf\u7684\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u901a\u4fe1\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5a92\u4ecb\u3002\u5728\u591a\u4e2a\u8bbe\u5907\u4e0a\u7684 AllJoyn \u603b\u7ebf\u901a\u8fc7\u7c7b\u4f3c Wi-Fi \u7684\u5e95\u5c42\u7f51\u7edc\u6280\u672f\u5b9e\u73b0\u901a\u4fe1\u3002\n\n\n\u4e0b\u56fe\u5c55\u793a\u4e86\u7531\u8de8\u8d8a\u591a\u4e2a\u8bbe\u5907\u7684\u591a\u4e2a AllJoyn \u603b\u7ebf\u5b9e\u4f8b\u6240\u6784\u6210\u7684\u903b\u8f91\u5206\u5e03\u5f0f AllJoyn \u8f6f\u4ef6\u603b\u7ebf:\n\n\n\n\nFigure:\n \u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\n\n\n\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u9690\u85cf\u4e86\u6240\u6709\u8fd0\u884c\u5728\u591a\u4e2a\u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u901a\u4fe1\u94fe\u8def\u7ec6\u8282\u3002\u5bf9\u4e8e\u8fde\u63a5\u5230 AllJoyn \u603b\u7ebf\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\uff0c\u8fd0\u884c\u5728\u53e6\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684\u8fdc\n\u7aef\u5e94\u7528\u7a0b\u5e8f\u770b\u8d77\u6765\u5c31\u50cf\u5728\u8fd9\u4e2a\u8bbe\u5907\u672c\u5730\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u3002AllJoyn \u5206\u5e03\u5f0f\u603b\u7ebf\u4e3a\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e0a\u4f20\u9001\u6d88\u606f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5feb\u901f\u4e14\u8f7b\u91cf\u5316\u7684\u65b9\u5f0f\u3002\n\n\nAllJoyn \u670d\u52a1\n\n\n\u5982\u524d\u6240\u8ff0\uff0c\u5728 AllJoyn \u7f51\u7edc\u4e2d\uff0c\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u53ef\u88ab AllJoyn \u7f51\u7edc\u4e2d\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u670d\u52a1\u3002\u4f8b\u5982\uff0c\u4e00\u53f0\u7535\u89c6\u53ef\u4ee5\u63d0\u4f9b\u56fe\u50cf\u6e32\u67d3\u529f\u80fd\uff0c\u4ece\u800c\u663e\u793a\u53e6\n\u4e00\u4e2a\u8bbe\u5907\uff08\u4f8b\u5982\u667a\u80fd\u624b\u673a\uff09\u4e0a\u7684\u56fe\u7247\u3002AllJoyn \u670d\u52a1\u662f\u4e00\u4e2a\u7406\u8bba\u7684/\u903b\u8f91\u7684\u6982\u5ff5\uff0c\u7531\u5411\u6d88\u8d39\u65b9\u66b4\u9732\u670d\u52a1\u529f\u80fd\u7684\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u63a5\u53e3\uff08\u8be6\u7ec6\u63cf\u8ff0\u8bf7\u53c2\u9605\n\nAllJoyn interfaces\n\uff09\u5b9a\u4e49\u3002\n\n\nAllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u63d0\u4f9b\u5e76\u6d88\u8d39 AllJoyn \u670d\u52a1\uff0c\u4e5f\u5c31\u662f\u8bf4 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u626e\u6f14\u4f9b\u5e94\u65b9\u548c\u6d88\u8d39\u65b9\u3002\n\n\n\u552f\u4e00\u6807\u8bc6\n\n\n\u6bcf\u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u90fd\u8fde\u63a5\u5230\u4e00\u4e2a\u5355\u4e00\u7684 AllJoyn \u8def\u7531\u3002\u4e3a\u4e86\u5b9e\u73b0\u5bf9\u6bcf\u4e00\u4e2a\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\u7684\u5bfb\u5740\uff0cAllJoyn \u8def\u7531\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u8fde\u63a5\u5728\u5176\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u5206\u914d\n\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u7b26\u3002\u6b64\u552f\u4e00\u6807\u793a\u7b26\u4f7f\u7528 AllJoyn \u8def\u7531\u7684 GUID \u4f5c\u524d\u7f00\uff0c\u5e76\u9075\u5faa\u5982\u4e0b\u683c\u5f0f\uff1a\n\n\nUnique Name = \n:\nAJ router GUID\n.\nSeq #\n\n\n\n\n\nNOTE:\n \":\n.1\" \u6807\u8bc6\u7b26\u4f1a\u4e00\u76f4\u88ab\u5206\u914d\u7ed9 AllJoyn \u8def\u7531\u7684\u672c\u5730\u7ec8\u70b9\u3002\n\n\n\u4e0b\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a GUID=100\u7684\u5355\u4e00 AllJoyn \u8def\u7531\u4e3a\u4e09\u4e2a\u8fde\u63a5\u5230 AllJoyn \u603b\u7ebf\u7684\u5e94\u7528\u7a0b\u5e8f\u5206\u914d\u552f\u4e00\u6807\u8bc6\u7b26\u7684\u8fc7\u7a0b\uff1a\n\n\n\n\nFigure:\n AllJoyn \u552f\u4e00\u6807\u8bc6\u7b26\u5206\u914d1 (\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u8fde\u63a5\u5230\u5355\u4e00 AllJoyn \u8def\u7531)\n\n\n\u6b64\u573a\u666f\u63cf\u8ff0\u4e86\u6709\u591a\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u7684\u8bbe\u5907\u8fde\u63a5\u5230\u4e00\u4e2a\u5355\u4e00 AllJoyn \u8def\u7531\u7684\u60c5\u51b5\u3002\n\n\n\u6211\u4eec\u671f\u671b\u5927\u591a\u6570\u652f\u6301 AllJoyn \u7684\u8bbe\u5907\u90fd\u662f\u5355\u4e00\u76ee\u7684\u8bbe\u5907\uff08\u4f8b\u5982\uff0c\u51b0\u7bb1\uff0c\u70e4\u7bb1\uff0c\u7167\u660e\u706f\u6ce1\u7b49\u7b49\uff09\uff0c\u5e76\u53ea\u6709\u4e00\u4e2a\u8fde\u63a5\u5230 AllJoyn \u603b\u7ebf\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u5176\u4e0a\u3002\u4f46\u662f\u4e5f\n\u4f1a\u6709 AllJoyn \u8def\u7531\u5355\u4e00\u5b9e\u4f8b\u652f\u6301\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u8bbe\u5907\uff0c\u6bd4\u5982\u7535\u89c6\u3002\n\n\n\u4e0b\u56fe\u5c55\u793a\u4e86\u7ec4\u6210 AllJoyn \u603b\u7ebf\u5e76\u5728 AllJoyn \u8def\u7531\u4e0a\u6709\u591a\u4e2a\u5b9e\u4f8b\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u7684\u72ec\u7acb\u6807\u8bc6\u5206\u914d\u8fc7\u7a0b\uff1a\n\n\n\n\nFigure:\n AllJoyn \u552f\u4e00\u6807\u8bc6\u7b26\u5206\u914d2 (\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u6709 AllJoyn \u8def\u7531\u7684\u5b9e\u4f8b\uff09\u3002\n\n\nNOTE:\n \u6bcf\u4e2a\u552f\u4e00\u6807\u8bc6\u7684 GUID \u90e8\u5206\u90fd\u662f\u4e0d\u540c\u7684\uff0c\u4ed6\u4eec\u4e0e\u76f8\u5173\u8054\u7684 AllJoyn \u8def\u7531\u4e0a\u7684 GUID \u76f8\u540c\n\n\n\u4e0b\u56fe\u5c55\u793a\u4e86\u901a\u8fc7\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u8fde\u63a5\u7684\u4e24\u4e2a\u4e0d\u540c\u8bbe\u5907\u4e0a\u5e94\u7528\u7a0b\u5e8f\u7684\u72ec\u7acb\u6807\u8bc6\u5206\u914d\u8fc7\u7a0b\uff1a\n\n\n\n\nFigure:\n AllJoyn \u552f\u4e00\u6807\u8bc6\u7b26\u5206\u914d3 (\u901a\u8fc7\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u8fde\u63a5\u7684\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f)\u3002\n\n\nWell-known name\n\n\nAllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u51b3\u5b9a\u4e3a\u4ed6\u7684\u670d\u52a1\u4f7f\u7528 well-known names.  well-known names \u662f\u7531 AllJoyn \u603b\u7ebf\u63d0\u4f9b\u7684\u53ef\u4ee5\u6301\u7eed\u5730\u67e5\u9605\u5230\u670d\u52a1\uff08\u6216\u4e00\u7cfb\u5217\u670d\u52a1\uff09\u7684\u65b9\n\u6cd5\u3002\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5bf9\u5176\u6240\u63d0\u4f9b\u7684\u6240\u6709\u670d\u52a1\u4f7f\u7528\u5355\u4e00\u7684 well-known name\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u670d\u52a1\u4f7f\u7528\u591a\u4e2a well-known names.\n\n\n\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4e3a\u4ed6\u7684\u670d\u52a1\u5411 AllJoyn \u603b\u7ebf\u7533\u8bf7\u4e00\u4e2a\u6216\u591a\u4e2a well-known names. \u5982\u679c\u88ab\u7533\u8bf7\u7684 well-known names \u5c1a\u672a\u88ab\u4f7f\u7528\uff0c\u7533\u8bf7\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u4f1a\u88ab\u6388\n\u4e88\u72ec\u5bb6\u4f7f\u7528\u6743\u3002\u8be5\u64cd\u4f5c\u786e\u4fdd\u4e86 well-known names \u5728\u4efb\u4f55\u65f6\u5019\u90fd\u53ef\u4ee5\u4ee3\u8868\u552f\u4e00\u7684\u5730\u5740\u3002\u6b64\u552f\u4e00\u6027\u4ec5\u5728\u672c\u5730\u7684 AllJoyn \u603b\u7ebf\u5185\u5b58\u5728\u3002\u82e5\u8981\u5b9e\u73b0 well-known names \u7684\u5168\u5c40\u552f\u4e00\u6027\uff0c\u9700\u4f7f\u7528\u7279\u5b9a\u7684\u547d\u540d\u89c4\u8303\u53ca\u683c\u5f0f\u3002\n\n\nAllJoyn \u7684 well-known name \u4f7f\u7528\u7ffb\u8f6c\u7684\u57df\u540d\u4f5c\u4e3a\u6807\u51c6\u683c\u5f0f\u3002\u5728\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u4e0a\u7684\u7ed9\u5b9a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u7528\u591a\u4e2a\u5b9e\u4f8b\uff0c\u4f8b\u5982\uff0c\u5728\u90bb\u57df\u7f51\u4e2d\uff08\u4e00\u4e2a\u5728\u53a8\u623f\uff0c \u53e6\u4e00\u4e2a\u5728\u5730\u4e0b\u5ba4\uff09\uff0c\u7531\u540c\u4e00\u4e2a\u4f9b\u8d27\u5546\u63d0\u4f9b\u7684\u4e24\u4e2a\u4e0d\u540c\u51b0\u7bb1\u4e0a\u9762\u8fd0\u884c\u7684\u76f8\u540c\u7684\u51b0\u7bb1\u5e94\u7528\u7a0b\u5e8f\u3002\u4e3a\u4e86\u5206\u8fa8\u5728 AllJoyn \u603b\u7ebf\u4e0a\u4e00\u4e2a\u7ed9\u5b9a\u5e94\u7528\u7a0b\u5e8f\u7684\u591a\u4e2a\u5b9e\u4f8b\uff0c\u9700\u8981\u7ed9\nwell-known name \u52a0\u4e0a\u58f0\u660e\u5e94\u7528\u7a0b\u5e8f\u7684\u6807\u7b7e\u4f5c\u540e\u7f00\uff0c\u4f8b\u5982\uff0c\u533a\u522b\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u7684 GUID.\n\n\nAllJoyn \u7684 well-known name \u9075\u5b88 D-Bus \u89c4\u8303\u4e2d\u7684\u547d\u540d\u539f\u5219\uff0c\u5176\u683c\u5f0f\u5982\u4e0b\u6240\u793a\uff1a\n\n\nWKN = \nreverse domain style name for service/app\n.\napp instance GUID\n\n\n\n\n\n\u4f8b\u5982\uff0c\u4e00\u4e2a\u51b0\u7bb1\u670d\u52a1\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684 well-known name:\n\n\ncom.alljoyn.Refrigerator.12345678\n\n\n\n\nAllJoyn \u5bf9\u8c61\n\n\n\u4e3a\u4e86\u652f\u6301 AllJoyn \u7684\u670d\u52a1\u529f\u80fd\uff0cAllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u5bf9\u8c61\u3002\u8fd9\u4e9b AllJoyn \u5bf9\u8c61\u88ab\u79f0\u4e3a\u670d\u52a1\u5bf9\u8c61\uff0c\u5e76\u901a\u8fc7 AllJoyn \u603b\u7ebf\u88ab\u63a8\u5e7f\u3002\n\u5176\u4ed6\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 AllJoyn \u603b\u7ebf\u53d1\u73b0\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u5e76\u5bf9\u4ed6\u4eec\u8fdb\u884c\u8fdc\u7a0b\u8bbf\u95ee\uff0c\u6d88\u8d39\u4ed6\u4eec\u63d0\u4f9b\u7684\u670d\u52a1\u3002\n\n\n\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\u6765\u8bbf\u95ee AllJoyn \u7684\u670d\u52a1\u5bf9\u8c61\u3002\u4ee3\u7406\u5bf9\u8c61\u662f\u8fdc\u7aef\u670d\u52a1\u5bf9\u8c61\u7684\u672c\u5730\u4ee3\u8868\uff0c\u901a\u8fc7 AllJoyn \u603b\u7ebf\u88ab\u8bbf\u95ee\u3002\n\n\n\u4e0b\u56fe\u5c55\u793a\u4e86 AllJoyn \u670d\u52a1\u5bf9\u8c61\u4e0e\u4ee3\u7406\u5bf9\u8c61\u4e4b\u95f4\u7684\u533a\u522b\u3002\n\n\n\n\nFigure:\n AllJoyn \u670d\u52a1\u5bf9\u8c61\u548c\u4ee3\u7406\u5bf9\u8c61\n\n\n\u6bcf\u4e00\u4e2a\u670d\u52a1\u5bf9\u8c61\u5b9e\u4f8b\u90fd\u6709\u5bf9\u5e94\u7684\u53ef\u4ee5\u552f\u4e00\u6307\u8ba4\u51fa\u6b64\u5b9e\u4f8b\u7684\u5bf9\u8c61\u8def\u5f84\u3002\u5728\u4f9b\u5e94\u65b9\u521b\u5efa\u670d\u52a1\u5bf9\u8c61\u65f6\uff0c\u5bf9\u8c61\u8def\u5f84\u5373\u88ab\u5206\u914d\u3002\u4ee3\u7406\u5bf9\u8c61\u9700\u8981\u5bf9\u8c61\u8def\u5f84\u6765\u5efa\u7acb\u4e0e\u8fdc\u7aef\u670d\u52a1\n\u5bf9\u8c61\u7684\u901a\u4fe1\u3002\u5bf9\u8c61\u8def\u5f84\u4ec5\u5728\u7ed9\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u5185\u6709\u6548\uff0c\u56e0\u6b64\u53ea\u6709\u5728\u5b9e\u73b0\u5bf9\u8c61\u7684\u5e94\u7528\u7a0b\u5e8f\u5185\uff0c\u5bf9\u8c61\u8def\u5f84\u624d\u6709\u552f\u4e00\u6027\u3002\u6240\u4ee5\u5bf9\u8c61\u8def\u5f84\u7684\u547d\u540d\u4e0d\u9700\u8981\u9075\u5b88\u7ffb\u8f6c\u57df\u540d\u547d\u540d\u8f6c\u6362\u89c4\u5219\uff0c\u800c\u53ef\u4ee5\u7531\u5e94\u7528\u7a0b\u5e8f\u968f\u610f\u9009\u62e9\u3002\n\n\n\u5bf9\u8c61\u8def\u5f84\u7684\u547d\u540d\u4ecd\u7136\u9075\u5faa D-Bus \u89c4\u8303\u7684\u547d\u540d\u539f\u5219\u3002\u4e00\u4e2a\u7531\u51b0\u7bb1\u5b9e\u73b0\u7684\u670d\u52a1\u5bf9\u8c61\u7684\u5bf9\u8c61\u8def\u5f84\u53ef\u4ee5\u662f\u5982\u4e0b\u8868\u8fbe\uff1a\n\n\n/MyApp/Refrigerator\n\n\n\n\nAllJoyn \u63a5\u53e3\n\n\n\u6bcf\u4e00\u4e2a AllJoyn \u5bf9\u8c61\u7ecf\u8fc7\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u63a5\u53e3\u5411 AllJoyn \u603b\u7ebf\u663e\u793a\u4ed6\u7684\u529f\u80fd\u3002AllJoyn \u63a5\u53e3\u5b9a\u4e49\u4e86\u5b9e\u73b0\u63a5\u53e3\u89c4\u8303\u7684\u5b9e\u4f53\u4e0e\u5176\u4ed6\u5bf9\u6b64\u63a5\u53e3\u63d0\u4f9b\u7684\u670d\u52a1\u6709\u5174\n\u8da3\u7684\u5176\u4ed6\u5b9e\u4f53\u4e4b\u95f4\u7684\u901a\u4fe1\u534f\u8bae\u3002AllJoyn \u63a5\u53e3\u4f5c\u4e3a\u6807\u51c6\u5316\u7684\u5019\u9009\u4eba\uff0c\u4f7f\u652f\u6301 AllJoyn \u7684 IoE\u8bbe\u5907\u95f4\u80fd\u591f\u4e92\u7528\u3002\n\n\nAllJoyn \u63a5\u53e3\u53ef\u4ee5\u5305\u542b\u4ee5\u4e0b\u4e00\u79cd\u6216\u8005\u51e0\u79cd\u7c7b\u578b\u7684\u6210\u5458\uff1a\n\n\n\n\n\n\n\u65b9\u6cd5: \u65b9\u6cd5\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u4f34\u968f\u4e00\u7cfb\u5217\u7684\u8f93\u5165\uff0c\u5e76\u5bf9\u8f93\u5165\u8fdb\u884c\u5904\u7406\uff0c\u901a\u5e38\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a\u53cd\u5e94\u5904\u7406\u7ed3\u679c\u7684\u8f93\u51fa\u3002\u8bf7\u6ce8\u610f\uff0c\u65b9\u6cd5\u5e76\u4e0d\u662f\u5f3a\u5236\u5305\u542b\u8f93\u5165\u548c\uff08\u6216\uff09\u8f93\u51fa\u7684\uff0c\u65b9\u6cd5\u4e5f\u4e0d\u88ab\u5f3a\u5236\u7ed9\u4e88\u56de\u5e94\u3002\n\n\n\n\n\n\n\u4fe1\u53f7: \u4fe1\u53f7\u662f\u7531\u670d\u52a1\u751f\u6210\u7684\u4e00\u4e2a\u5f02\u6b65\u63d0\u9192\uff0c\u7528\u6765\u5411\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdc\u7aef peers \u544a\u77e5\u4e8b\u4ef6\u6216\u72b6\u6001\u7684\u53d8\u5316\u3002 \u4fe1\u53f7\u53ef\u4ee5\u7531\u5df2\u5efa\u7acb\u5b8c\u6210\u7684\u5bf9\u7b49\u7f51\u7edc AllJoyn \u8fde\u63a5\uff08 AllJoyn \u4f1a\u8bdd\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u88ab\u5e7f\u64ad\u5230\u5168\u5c40\u6240\u6709\u7684 AllJoyn peers. \u4fe1\u53f7\u6709\u4e09\u79cd\u7c7b\u578b\uff1a\n\n\n\n\n\n\n\u6307\u5b9a\u4f1a\u8bdd\u7684\u4fe1\u53f7\uff1a\u8fd9\u4e9b\u4fe1\u53f7\u88ab\u4f20\u8f93\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u8fde\u63a5\u5230\u90bb\u57df\u7f51\u4e2d\u7ed9\u5b9a\u7684 AllJoyn \u4f1a\u8bdd\u7684 peers. \u5982\u679c\u76ee\u7684\u5730\u5df2\u5199\u660e\uff0c\u4fe1\u53f7\u5c06\u53ea\u4f1a\u88ab\u4f20\u8f93\u5230\u90a3\u4e2a\u901a\u8fc7 AllJoyn \u4f1a\u8bdd\u8fde\u63a5\u7684\u76ee\u7684\u5730\u8282\u70b9\u3002\u5982\u679c\u6ca1\u6709\u58f0\u660e\u76ee\u7684\u5730\uff0c\u4fe1\u53f7\u4f1a\u88ab\u4f20\u8f93\u5230\u9664\u751f\u6210\u8be5\u4fe1\u53f7\u7684\u8282\u70b9\u4e4b\u5916\u7684\u901a\u8fc7\u7ed9\u5b9a\u4f1a\u8bdd\u8fde\u63a5\u7684\u6240\u6709\u8282\u70b9\u3002\u5982\u679c\u4f1a\u8bdd\u662f\u591a\u7aef\u7684\uff0c\u8fd9\u79cd\u4fe1\u53f7\u5219\u4f1a\u901a\u8fc7\u591a\u64ad\u4f20\u9001\u5230\u5176\u4ed6\u6240\u6709\u7684\u53c2\u4e0e\u8005\u3002\n\n\n\n\n\n\n\u4f1a\u8bdd\u5e7f\u64ad\u4fe1\u53f7\uff1a\u8fd9\u4e9b\u4fe1\u53f7\u88ab\u9001\u5f80\u6240\u6709\u901a\u8fc7\u4efb\u610f AllJoyn \u4f1a\u8bdd\u8fde\u63a5\u7684\u7684\u8282\u70b9\n\n\n\n\n\n\n\u975e\u4f1a\u8bdd\u4fe1\u53f7: \u8fd9\u4e9b\u4fe1\u53f7\u88ab\u9001\u5f80\u5728\u90bb\u57df\u7f51\u4e2d\u6240\u6709\u5bf9\u63a5\u6536\u975e\u4f1a\u8bdd\u4fe1\u53f7\u8868\u793a\u51fa\u5174\u8da3\u7684\u8282\u70b9\u3002\u5728\u63a5\u6536\u8fd9\u79cd\u4fe1\u53f7\u65f6\uff0c\u8282\u70b9\u4e0d\u9700\u8981\u901a\u8fc7 AllJoyn \u4f1a\u8bdd\u5efa\u7acb\u8fde\u63a5\u3002\u975e\u4f1a\u8bdd\n  \u4fe1\u53f7\u672c\u8d28\u4e0a\u5c31\u662f\u72ec\u7acb\u4e8e\u4f1a\u8bdd\u8fde\u63a5\u7684\u5e7f\u64ad\u4fe1\u53f7\u3002\n\n\n\n\n\n\n\u5c5e\u6027: \u5c5e\u6027\u662f\u4e00\u4e2a\u6709\u503c\u7684\u53d8\u91cf\uff0c\u4ed6\u53ef\u4ee5\u662f\u53ea\u8bfb\u7684\uff0c\u53ef\u8bfb\u5199\u7684\uff0c\u6216\u8005\u53ea\u5199\u7684\u3002\n\u6bcf\u4e00\u4e2a AllJoyn \u63a5\u53e3\u90fd\u6709\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684\u63a5\u53e3\u540d\uff0c\u7528\u4e8e\u8bc6\u522b\u7531\u6b64\u63a5\u53e3\u63d0\u4f9b\u7684\u65b9\u6cd5\uff0c\u4fe1\u53f7\u4ee5\u53ca\u5c5e\u6027\u7fa4\u3002AllJoyn \u63a5\u53e3\u540d\u7684\u5b9a\u4e49\u662f\u63a5\u53e3\u6807\u51c6\u5316\u7684\u4e00\u90e8\u5206\u3002\u4e0e well-known name \u7c7b\u4f3c\uff0cAllJoyn \u63a5\u53e3\u540d\u4e5f\u9075\u5faa\u57df\u540d\u53cd\u8f6c\u89c4\u5219\u4ee5\u53ca D-Bus \u89c4\u8303\u7684\u547d\u540d\u539f\u5219\u3002\n\n\n\n\n\n\n\u4f8b\u5982\uff0c\u4e00\u53f0\u51b0\u7bb1\u53ef\u80fd\u652f\u6301\u4e00\u4e0b\u6807\u51c6\u7684 AllJoyn \u51b0\u7bb1\u63a5\u53e3\uff1a\n\n\norg.alljoyn.Refrigerator\n\n\n\n\nAllJoyn \u6838\u5fc3\u5e93\n\n\nAllJoyn \u6838\u5fc3\u5e93\u5c06 AllJoyn \u603b\u7ebf\u529f\u80fd\u5c55\u793a\u7ed9 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002 \u6bcf\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u5173\u8054\u5230\u4e00\u4e2a\u5355\u4e00\u7684 AllJoyn \u6838\u5fc3\u5e93\u5b9e\u4f8b\u4e0a\uff0c\u4ee5\u4fbf\u4e0e AllJoyn \u603b\u7ebf\u5efa\u7acb\u8fde\n\u63a5\u3002AllJoyn \u6838\u5fc3\u5e93\u5728\u5e94\u7528\u7a0b\u5e8f\u4e0e\u8fdc\u7aef AllJoyn \u5e94\u7528\u7a0b\u5e8f\u70b9\u5bf9\u70b9\u901a\u4fe1\u65f6\u626e\u6f14\u4e86\u7f51\u5173\u7684\u89d2\u8272\u3002\u4ed6\u53ef\u88ab\u7528\u4e8e\u8fde\u63a5\u5230\u603b\u7ebf\uff0c\u63a8\u5e7f\u5e76\u53d1\u73b0\u670d\u52a1\uff0c\u5efa\u7acb\u5230\u8fdc\u7aef peer \u7684\u8fde\n\u63a5\uff0c\u6d88\u8d39\u670d\u52a1\uff0c\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u7684 AllJoyn \u529f\u80fd\u3002\u5e94\u7528\u7a0b\u5e8f\u5411 AllJoyn \u6838\u5fc3\u5e93\u6ce8\u518c\u5b83\u7684\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5c06\u5176\u63a8\u5e7f\u5230 AllJoyn \u603b\u7ebf\u3002\n\n\n\u4e0b\u56fe\u5c55\u793a\u4e86\u4e09\u4e2a\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 AllJoyn \u6838\u5fc3\u5e93\u8fde\u63a5\u5230\u4e00\u4e2a\u7ed9\u5b9a AllJoyn \u603b\u7ebf\u7684\u8fc7\u7a0b\uff1a\n\n\n\n\nFigure:\n AllJoyn \u6838\u5fc3\u5e93\n\n\nAllJoyn \u6838\u5fc3\u5e93\u53ef\u4ee5\u662f\u4e3a\u6807\u51c6 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u6807\u51c6\u6838\u5fc3\u5e93\uff08SCL\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e3a\u7cbe\u7b80 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u7cbe\u7b80\u6838\u5fc3\u5e93\uff08TCL\uff09\u3002\u5728\u672c\u6587\u6863\u4e2d\uff0c\u5927\n\u591a\u6570\u7684\u7cfb\u7edf\u8bbe\u8ba1\u90fd\u662f\u53c8\u6807\u51c6\u6838\u5fc3\u5e93\u63cf\u8ff0\u7684\u3002\u66f4\u591a\u5173\u4e8e\u7cbe\u7b80\u6838\u5fc3\u5e93\u7684\u8bbe\u8ba1\u7ec6\u8282\uff0c\u8bf7\u67e5\u9605 \nThin Apps\n.\n\n\n\u201cAbout\u201d \u529f\u80fd\n\n\n\u201cAbout\u201d \u529f\u80fd\u5728 AllJoyn \u6846\u67b6\u4e2d\u4f5c\u4e3a\u6838\u5fc3\u5e93\u7684\u4e00\u90e8\u5206\u88ab\u652f\u6301\u3002\u201cAbout\u201d\u529f\u80fd\u4f7f\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5c55\u793a\u5173\u4e8e\u81ea\u8eab\u7684\u5173\u952e\u4fe1\u606f\uff0c\u5305\u62ec\u5e94\u7528\u7a0b\u5e8f\u540d\uff0c\u5e94\u7528\u7a0b\u5e8f\u8bc6\u522b\u7b26\uff0c\u8bbe\u5907\u540d\uff0c\u8bbe\u5907\u8bc6\u522b\u7b26\uff0c\u88ab\u652f\u6301\u7684 AllJoyn \u63a5\u53e3\u5217\u8868\u4ee5\u53ca\u5176\u4ed6\u4fe1\u606f\u3002\u6b64\u529f\u80fd\u7531\u88ab org.alljoyn.About object \u5bf9\u8c61\u5b9e\u73b0\u7684 org.alljoyn.About \u63a5\u53e3\u652f\u6301\u3002\n\n\n\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u4e00\u4e2a\u7531\u201c About \u201d\u63a5\u53e3\u5b9a\u4e49\u7684 Announce \u4fe1\u53f7\u6765\u5c55\u793a\u81ea\u5df1\u7684\u5173\u952e\u4fe1\u606f\u3002\u6b64\u4fe1\u53f7\u5728\u90bb\u57df AllJoyn \u7f51\u7edc\u4e2d\u88ab\u5f53\u4f5c\u975e\u4f1a\u8bdd\u4fe1\u53f7\u53d1\u9001\u3002\u4efb\u4f55\u5bf9\u53d1\u73b0\u670d\u52a1\u6709\n\u5174\u8da3\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f7f\u7528 Announce \u4fe1\u53f7\u7528\u4e8e\u53d1\u73b0\u3002\u201cAbout\u201d \u529f\u80fd\u540c\u65f6\u4e5f\u63d0\u4f9b\u901a\u8fc7\u76f4\u63a5\u8c03\u7528\u65b9\u6cd5\u6765\u83b7\u53d6\u5e94\u7528\u7a0b\u5e8f\u4fe1\u606f\u7684\u673a\u5236\u3002\u5173\u4e8e \u201cAbout\u201d \u529f\u80fd\u7684\u6280\u672f\u7ec6\u8282\n\u8bf7\u53c2\u9605[About HLD]\n\n\nAllJoyn \u7aef\u70b9\n\n\nAllJoyn \u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528 D-Bus \u683c\u5f0f\u7684\u6d88\u606f\u6765\u4ea4\u6362\u4fe1\u606f\u3002\u8fd9\u4e9b\u6d88\u606f\u4f1a\u6307\u660e\u539f\u5730\u5740\u548c\u76ee\u7684\u5730\u5f53\u4f5c\u7aef\u70b9\u3002\u4e00\u4e2a AllJoyn \u7aef\u70b9\u4ee3\u8868\u7740\u4e00\u6761 AllJoyn \u901a\u4fe1\u94fe\u8def\u7684\u4e00\u8fb9\u3002\n\u7aef\u70b9\u88ab\u7528\u4e8e\u5c06\u6d88\u606f\u8def\u7531\u5230\u6b63\u786e\u7684\u76ee\u7684\u5730\u3002\n\n\n\u7aef\u70b9\u7531\u6838\u5fc3\u5e93\u4ee5\u53ca AllJoyn \u8def\u7531\u7ef4\u62a4\uff0c\u4ee5\u5b9e\u73b0\u6d88\u606f\u8def\u7531\u3002\u4ee5\u4e0b\u7aef\u70b9\u7531\u6838\u5fc3\u5e93\u7ef4\u62a4\uff1a\n\n\n\n\n\n\nLocal Endpoint\n: \u5728\u6838\u5fc3\u5e93\u5185\u90e8\u7684\u672c\u5730\u7aef\u70b9\u4ee3\u8868\u7740\u5230\u9644\u5c5e\u5e94\u7528\u7a0b\u5e8f\u7684\u8fde\u63a5\u3002\n\n\n\n\n\n\nRemote Endpoint\n: \u5728\u6838\u5fc3\u5e93\u5185\u7684\u8fdc\u7a0b\u7aef\u70b9\u4ee3\u8868\u7740\u5230 AllJoyn \u8def\u7531\u7684\u8fde\u63a5\u3002\u4ec5\u5f53 AllJoyn \u8def\u7531\u4e3a\u975e\u6346\u7ed1\u5f0f\u65f6\u6b64\u7aef\u70b9\u624d\u6709\u6548\u3002\n\n\n\n\n\n\n\u7531 AllJoyn \u8def\u7531\u7ef4\u62a4\u7684\u7aef\u70b9\u88ab\u5206\u914d\u7ed9\u4ed6\u7684\u552f\u4e00\u6807\u8bc6\u6240\u552f\u4e00\u786e\u5b9a\u3002\u4ee5\u4e0b\u7aef\u70b9\u88ab AllJoyn \u8def\u7531\u7ef4\u62a4\uff1a\n\n\n\n\n\n\nLocal Endpoint\n: \u672c\u5730\u7aef\u70b9\u662f\u5728 AllJoyn \u8def\u7531\u5185\u90e8\u7684\u7aef\u70b9\u3002\u4ed6\u5b9a\u4e49\u4e86\u5230\u8def\u7531\u672c\u8eab\u7684\u8fde\u63a5\uff0c\u88ab\u7528\u4e8e\u5728 AllJoyn \u8def\u7531\u95f4\u4ea4\u6362 AllJoyn \u63a7\u5236\u4fe1\u606f\u3002\u7b2c\u4e00\u4e2a\u7aef\n\u70b9\u5e38\u5e38\u88ab\u5206\u914d\":\n.1\"\u8fd9\u4e2a\u6807\u8bc6\u7b26\n\n\n\n\n\n\nRemote Endpoint\n: \u8fdc\u7a0b\u7aef\u70b9\u5b9a\u4e49\u4e86\u5728\u5e94\u7528\u7a0b\u5e8f\u4e0e AllJoyn \u8def\u7531\u5668\u4e4b\u95f4\u7684\u8fde\u63a5\u3002\u4ee5\u5e94\u7528\u7a0b\u5e8f\u4e3a\u76ee\u7684\u5730\u7684\u6d88\u606f\u4f1a\u88ab\u8def\u7531\u5230\u5e94\u7528\u7a0b\u5e8f\u7aef\u70b9\u3002\n\n\n\n\n\n\nBus-to-Bus Endpoint\n: \u603b\u7ebf\u5230\u603b\u7ebf (B2B) \u7aef\u70b9\u662f\u5b9a\u4e49\u4e86\u4e24\u4e2a AllJoyn \u8def\u7531\u4e4b\u95f4\u8fde\u63a5\u7684\u4e00\u7c7b\u7279\u6b8a\u7684\u8fdc\u7a0b\u7aef\u70b9\u3002\u5728 AllJoyn \u8def\u7531\u5668\u4ea4\u6362\u6d88\u606f\u65f6\uff0c\u6b64\u7aef\u70b9\n\u88ab\u5f53\u4f5c\u8def\u7531\u6d88\u606f\u7684\u4e0b\u4e00\u8df3\u3002 \n\n\n\n\n\n\nAllJoyn \u8def\u7531\u4f1a\u4fdd\u7559\u4e00\u5f20\u8def\u7531\u8868\uff0c\u4ee5\u4fbf\u5c06\u6d88\u606f\u8def\u7531\u5230\u4e0d\u540c\u7c7b\u578b\u7684\u7aef\u70b9\u3002\u4e24\u4e2a AllJoyn \u8def\u7531\u4e4b\u95f4\u7684\u63a7\u5236\u6d88\u606f\uff08\u5982 AttachSession \u6d88\u606f\uff09\u4f1a\u88ab\u8def\u7531\u5230\u672c\u5730\u7aef\u70b9\u3002\n\u4e24\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684 AllJoyn \u6d88\u606f\u4f1a\u88ab\u8def\u7531\u5230\u5e94\u7528\u7a0b\u5e8f\u7aef\u70b9\u3002\u8fd9\u4e9b\u6d88\u606f\u5c06\u4f1a\u628a\u5e94\u7528\u7a0b\u5e8f\u7aef\u70b9\u5f53\u4f5c\u539f\u5730\u5740\u548c\u76ee\u7684\u5730\u3002B2B \u7aef\u70b9\u5728\u4e24 AllJoyn \u8def\u7531\u4ea4\u6362\u6d88\u606f\uff08app-\ndirected \u6216\u8005\u63a7\u5236\u6d88\u606f\uff09\u65f6\u4f1a\u4f5c\u4e3a\u4e0b\u4e00\u8df3\u3002\n\n\n\u4e0b\u56fe\u5c55\u793a\u4e86 AllJoyn \u7cfb\u7edf\u4e2d\u4e0d\u540c\u7c7b\u578b\u7684\u7aef\u70b9\u3002\n\n\nThe following figure shows different endpoints in the AllJoyn system.\n\n\n\n\nFigure:\n AllJoyn \u7aef\u70b9\n\n\n\u81ea\u7701\u6027\n\n\nAllJoyn \u7cfb\u7edf\u652f\u6301\u7531 D-Bus \u5b9a\u4e49\u7684\u81ea\u7701\u529f\u80fd\uff0c\u4f7f AllJoyn \u5bf9\u8c61\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u81ea\u7701\uff0c\u8fd4\u56de\u63cf\u8ff0\u8be5\u5bf9\u8c61\u7684\u81ea\u7701 XML.\u8be5\u5bf9\u8c61\u5e94\u5b9e\u73b0 org.freedesktop.DBus.Introspectable \u63a5\u53e3\u3002\u6b64\u63a5\u53e3\u4e2d\u542b\u6709\u53ef\u4ee5\u53d6\u56de\u8be5\u5bf9\u8c61\u81ea\u7701 XML \u7684\u65b9\u6cd5\u3002\n\n\nAllJoyn \u5b9e\u4f53\u5173\u7cfb\n\n\n\u77e5\u6653\u9ad8\u5c42 AllJoyn \u5b9e\u4f53\u4e4b\u95f4\u7684\u8054\u7cfb\u662f\u5f88\u91cd\u8981\uff0c\u5f88\u6709\u5e2e\u52a9\u7684\u3002\n\n\n\u4e0b\u56fe\u6355\u83b7\u4e86\u4f17\u591a\u9ad8\u5c42 AllJoyn \u5b9e\u4f53\uff0c\u5305\u62ec\u8bbe\u5907\uff0c\u5e94\u7528\u7a0b\u5e8f\uff0c\u5bf9\u8c61\uff0c\u63a5\u53e3\u4ee5\u53ca\u63a5\u53e3\u6210\u5458\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\n\n\n\n\nFigure:\n AllJoyn \u5b9e\u4f53\u5173\u7cfb\n\n\n\u652f\u6301 AllJoyn \u7684\u8bbe\u5907\u53ef\u4ee5\u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002\u6bcf\u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2a\u5b9e\u73b0\u6240\u9700\u5e94\u7528\u7a0b\u5e8f\u529f\u80fd\u7684 AllJoyn \u5bf9\u8c61\u3002\u5e94\u7528\u7a0b\u5e8f\n\u529f\u80fd\u53ef\u4ee5\u5305\u62ec\u63d0\u4f9b\u6216\u6d88\u8d39 AllJoyn \u670d\u52a1\uff0c\u6216\u5373\u63d0\u4f9b\u4e5f\u6d88\u8d39\u3002\u76f8\u5e94\u7684\uff0c\u88ab AllJoyn \u5e94\u7528\u7a0b\u5e8f\u6240\u652f\u6301\u7684\u5bf9\u8c61\u53ef\u4ee5\u662f\u670d\u52a1\u5bf9\u8c61\uff0c\u4ee3\u7406\u5bf9\u8c61\uff0c\u6216\u4e8c\u8005\u7684\u7ed3\u5408\u4f53\u3002\u670d\u52a1\n\u5bf9\u8c61\u5c06\u81ea\u5df1\u7684\u529f\u80fd\u901a\u8fc7\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u63a5\u53e3\u5c55\u793a\u3002\u6bcf\u4e00\u4e2a AllJoyn \u63a5\u53e3\u53ef\u4ee5\u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2a\u65b9\u6cd5\uff0c\u4fe1\u53f7\uff0c\u4ee5\u53ca\u5c5e\u6027\u3002\n\n\nAllJoyn \u670d\u52a1\u7531\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u670d\u52a1\u5bf9\u8c61\u5b9e\u73b0\u3002AllJoyn \u670d\u52a1\u5bf9\u8c61\u53ef\u4ee5\u4e3a\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u670d\u52a1\u5b9e\u73b0\u529f\u80fd\u3002\u56e0\u6b64\uff0cAllJoyn \u670d\u52a1\u4e0e AllJoyn \u670d\u52a1\u5bf9\u8c61\n\u6709\u5982\u4e0b\u56fe\u6240\u793a\u7684 n:n \u5173\u7cfb\uff1a\n\n\n\n\nFigure:\n AllJoyn \u670d\u52a1\u4e0e AllJoyn \u670d\u52a1\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\n\n\nAllJoyn \u670d\u52a1\n\n\n\u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u6846\u67b6\u4ee5\u53ca\u4e00\u4e9b\u5e94\u7528\u5c42\u7684\u670d\u52a1\u3002\n\n\nAllJoyn \u670d\u52a1\u6846\u67b6\n\n\nAllJoyn \u670d\u52a1\u6846\u67b6\u4e3a\u9ad8\u5c42\u7684\u5e94\u7528\u7a0b\u5e8f\u670d\u52a1\u63d0\u4f9b\u4e00\u4e9b\u4f5c\u4e3a enablers \u88ab\u5f00\u53d1\u7684\uff0c\u6838\u5fc3\u7684\uff0c\u57fa\u7840\u7684\u529f\u80fd\u3002\u670d\u52a1\u6846\u67b6\u4f4d\u4e8e AllJoyn \u8def\u7531\u7684\u4e0a\u9762\uff0c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u63d0\n\u4f9b\u53ef\u4ee5\u8c03\u7528\u5176\u529f\u80fd\u7684 APIs. \u6700\u521d\u7684 AllJoyn \u670d\u52a1\u6846\u67b6\u5305\u62ec Configuration \u670d\u52a1\u6846\u67b6\uff0cOnboarding \u670d\u52a1\u6846\u67b6\uff0cNotification \u670d\u52a1\u6846\u67b6\u4ee5\u53ca Control Panel \u670d\u52a1\u6846\u67b6\u3002\n. \n\nNOTE:\n \u670d\u52a1\u6846\u67b6\u4e5f\u4f1a\u88ab\u79f0\u4f5c\u57fa\u7840\u670d\u52a1\u3002\n\n\n\u4f8b\u5982: \u4e00\u4e2a\u51b0\u7bb1\u53ef\u4ee5\u4f7f\u7528 OnBoarding \u670d\u52a1\u6846\u67b6\u6765\u5c06\u51b0\u7bb1\u767b\u5165\u5230\u5bb6\u5ead\u7f51\u7edc\u4e2d\uff0c\u5e76\u901a\u8fc7 Notification \u670d\u52a1\u6846\u67b6\u5bf9\u7528\u6237\u8bbe\u5907\u53d1\u9001\u63d0\u9192\u3002\n\n\n\u5e94\u7528\u5c42\u670d\u52a1\n\n\n\u5e94\u7528\u5c42\u670d\u52a1\u662f\u7531 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7684\u9488\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u670d\u52a1\uff0c\u7528\u6765\u5b8c\u6210\u6240\u671f\u671b\u7684\u5e94\u7528\u5c42\u529f\u80fd\u3002\u8fd9\u4e9b\u5e94\u7528\u5c42\u670d\u52a1\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u670d\u52a1\u6846\u67b6\u6765\u5b9e\u73b0\u4ed6\u4eec\u7684\u529f\u80fd\u3002\n\n\n\u4f8b\u5982\uff1a\u4e00\u4e2a\u51b0\u7bb1\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u8c03\u8282\u51b7\u85cf\u53ca\u51b7\u51bb\u6e29\u5ea6\u7684\u5e94\u7528\u5c42\u670d\u52a1\u3002\u6b64\u670d\u52a1\u53ef\u4ee5\u5728\u6e29\u5ea6\u8bbe\u7f6e\u8d85\u51fa\u7ed9\u5b9a\u8303\u56f4\u7684\u65f6\u5019\u4f7f\u7528 Notification \u670d\u52a1\u6846\u67b6\u5411\u7528\u6237\u53d1\n\u677e\u901a\u77e5\u3002\n\n\nAllJoyn \u4f20\u8f93\n\n\nAllJoyn \u4f20\u8f93\u662f\u4e00\u4e2a\u865a\u62df\u6982\u5ff5\uff0c\u4ed6\u5b9e\u73b0\u4e86\u901a\u8fc7 AllJoyn \u8def\u7531\uff0c\u5728 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u4e2d\u5efa\u7acb\u901a\u4fe1\u4ee5\u53ca\u4f20\u9001\u6d88\u606f\u7684\u529f\u80fd\u3002AllJoyn \u4f20\u8f93\u903b\u8f91\u56e0\u6b64\u4f1a\u652f\u6301\u5728\u591a\u4e2a\u5e95\n\u5c42\u7269\u7406\u4f20\u8f93\uff0c\u5305\u62ec TCP \u4f20\u8f93\uff0cUDP \u4f20\u8f93\u4ee5\u53ca\u672c\u5730\u4f20\u8f93\uff08\u4f8b\u5982 UNIX \u57df\u5957\u63a5\u5b57 \uff09\u4e4b\u95f4\u7684\u6d88\u606f\u4f20\u9001\u3002\n\n\nAllJoyn \u7684\u4f20\u8f93\u903b\u8f91\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u6240\u6307\u5b9a\u7684\u4f20\u8f93\u5217\u8868\u6295\u9012\u5e7f\u64ad\u4e0e\u53d1\u73b0\u6d88\u606f\u3002\u7c7b\u4f3c\u7684\uff0cAllJoyn \u4f20\u8f93\u540c\u6837\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u4f20\u8f93\u9009\u62e9\u6765\u5efa\u7acb\u4f1a\u8bdd\uff0c\u4ee5\u53ca\u591a\u5e95\u5c42\u5e73\u53f0\n\u4f20\u8f93\u7684\u6d88\u606f\u8def\u7531\u3002\u7531 AllJoyn \u4f20\u8f93\u6240\u652f\u6301\u7684\u5e95\u5c42\u4f20\u8f93\u5728 TransportMask \u4e2d\u5b9a\u4e49\uff0c\u5177\u4f53\u8bf7\u53c2\u89c1 \nAllJoyn Transport in Networking  Model\n.\n\n\n\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5e76\u6ca1\u6709\u6307\u5b9a\u4efb\u4f55\u7684\u4f20\u8f93\u65b9\u5f0f\uff0c AllJoyn \u4f20\u8f93\u503c\u9ed8\u8ba4\u4e3a TRANSPORT_ANY.\n\n\n\u5177\u4f53\u4fe1\u606f\u53c2\u89c1 \nAllJoyn Transport\n.\n\n\n\u63a8\u5e7f\u4e0e\u53d1\u73b0\n\n\nAllJoyn \u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u53ef\u4ee5\u63a8\u5e7f\u53d1\u73b0 AllJoyn \u670d\u52a1\u7684\u65b9\u6cd5\u3002AllJoyn \u53d1\u73b0\u534f\u8bae\u8d1f\u8d23\u7ba1\u7406\u8fdb\u5165\u5e76\u79bb\u5f00 AllJoyn \u90bb\u57df\u7f51\u7edc\u670d\u52a1\u7684\u52a8\u529b\u6027\uff0c\u5e76\u5bf9 AllJoyn \u5e94\u7528\n\u7a0b\u5e8f\u53d1\u51fa\u54cd\u5e94\u7684\u63d0\u9192\u3002AllJoyn \u6846\u67b6\u4f7f\u7528\u4e86\u6307\u5b9a\u5e95\u5c42\u4f20\u8f93\u673a\u5236\u4ee5\u4f18\u5316\u53d1\u73b0\u670d\u52a1\u7684\u8fdb\u7a0b\u3002AllJoyn \u6846\u67b6\u4f7f\u7528\u4e86 IP \u591a\u64ad\uff0c\u901a\u8fc7 Wi-Fi \u5b9e\u73b0\u4e86\u670d\u52a1\u63a8\u5e7f\u4e0e\u53d1\u73b0\u3002\u5173\n\u4e8e\u5e95\u5c42\u673a\u5236\u7684\u7ec6\u8282\u5bf9 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u9690\u85cf\u3002\n\n\n\u4ee5\u4e0b\u7ae0\u8282\u53d9\u8ff0\u4e86\u5e94\u7528\u7a0b\u5e8f\u5728 AllJoyn \u6846\u67b6\u4e0a\u4f7f\u7528\u63a8\u5e7f\u53ca\u53d1\u73b0\u670d\u52a1\u7684\u5177\u4f53\u65b9\u6cd5\u3002\n\n\n\u57fa\u4e8e\u540d\u5b57\u7684\u53d1\u73b0\n\n\n\u5728\u57fa\u4e8e\u540d\u5b57\u7684\u53d1\u73b0\u4e2d\uff0c\u63a8\u5e7f\u53ca\u53d1\u73b0\u901a\u5e38\u4f1a\u4f7f\u7528 well-known name. \u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u7684\u81ea\u4e3b\u9009\u62e9\uff08\u4f8b\u5982\uff0cwell-known name \u6ca1\u6709\u88ab\u5206\u914d\uff09\uff0c\u552f\u4e00\u6807 \u8bc6\u7b26\u4e5f\u53ef\u4ee5\u88ab\u7528\u4f5c\u53d1\u73b0\u670d\u52a1\u3002\n\n\n\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u5c06\u4ed6\u6240\u652f\u6301\u7684 wel-known names \u901a\u8fc7\u90bb\u57df AllJoyn \u7f51\u7edc\u5bf9\u7279\u5b9a\u5e95\u5c42\u4f20\u8f93\u673a\u5236\u7684\u5f71\u54cd\uff08\u901a\u8fc7 Wi-Fi \u7684 IP \u591a\u64ad\uff09\u8fdb\u884c\u63a8\u5e7f\u3002\u8fd9\u4e9b well-known names \u4f5c\u4e3a\u7531 AllJoyn \u8def\u7531\u751f\u6210\u7684\u63a8\u5e7f\u6d88\u606f\u7684\u4e00\u90e8\u5206\u88ab\u63a8\u5e7f\u51fa\u53bb\u3002\n\n\n\u5bf9\u7ed9\u5b9a well-known name \u6709\u5174\u8da3\u7684\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8bf7\u6c42 AllJoyn \u8def\u7531\u5f00\u59cb\u5bfb\u627e\u53d1\u73b0\u8be5\u670d\u52a1\u540d\u3002\u5f53\u8be5\u540d\u5b57\u88ab\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u5e7f\u64ad\u5165\u90bb\u57df\u7f51\uff0cAllJoyn \u8def\u7531\n\u4f1a\u53d7\u5230\u5bf9\u5e94\u7684\u63a8\u5e7f\u3002AllJoyn \u8def\u7531\u4e8e\u662f\u5411\u4e4b\u524d\u6307\u5b9a well-known name \u7684\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u4e00\u4e2a\u670d\u52a1\u53d1\u73b0\u901a\u77e5\u3002\n\n\n\u63a8\u5e7f\u4fe1\u606f\u643a\u5e26\u7740\u8fde\u901a\u6027\u4fe1\u606f\u8fd4\u56de\u5230\u63d0\u4f9b\u65b9\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u53d1\u73b0\u8fc7\u7a0b\u4e4b\u540e\uff0c\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5411 AllJoyn \u8def\u7531\u7533\u8bf7\u4e0e\u88ab\u53d1\u73b0\u7684\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u5efa\u7acb\u8fde\u63a5\uff0c\u4ee5\u4fbf\n\n\n\u57fa\u4e8e\u901a\u544a\u7684\u53d1\u73b0\n\n\n\u6240\u6709\u7684 AllJoyn \u670d\u52a1\u6700\u7ec8\u90fd\u662f\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u63a5\u53e3\u5b9e\u73b0\u7684\uff0c\u57fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u53d1\u73b0\u670d\u52a1\u53ef\u4ee5\u7531\u53d1\u73b0\u76f8\u5173\u7684 AllJoyn \u63a5\u53e3\u6765\u5b8c\u6210\u3002\u5728\u57fa\u4e8e\u901a\u544a\u7684\u53d1\u73b0\u4e2d\uff0c\u63a8\u5e7f\u4e0e\u53d1\n\u73b0\u8fc7\u7a0b\u90fd\u4f7f\u7528\u63a5\u53e3\u540d\u3002\u8be5\u673a\u5236\u6253\u7b97\u88ab\u7528\u4e8e\u8bbe\u5907\u5bf9\u81ea\u5df1\u80fd\u529b\u7684\u63a8\u5e7f\u3002\n\n\n\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u516c\u544a\u6d88\u606f\uff0c\u6b64\u6d88\u606f\u4f1a\u5217\u51fa\u88ab\u8be5\u5e94\u7528\u6240\u652f\u6301\u7684 AllJoyn \u63a5\u53e3\u3002\u670d\u52a1\u901a\u544a\u7531\u5e7f\u64ad\u4fe1\u53f7\u7684\u65b9\u5f0f\u88ab\u53d1\u51fa\uff0c\u4f7f\u7528\u975e\u4f1a\u8bdd\u4fe1\u53f7\u673a\u5236\uff08\u53c2\u89c1 \nSessionless Signal\n\uff09\u3002 \n\n\n\u5bf9\u4f7f\u7528 AllJoyn \u670d\u52a1\u6709\u5174\u8da3\u7684\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u5728\u63a5\u6536\u6765\u81ea AllJoyn \u8def\u7531\u7684\u901a\u544a\u6d88\u606f\u65f6\u58f0\u660e\u4ed6\u7684\u5174\u8da3\u6765\u67e5\u627e\u8fd9\u4e9b\u88ab\u5e7f\u64ad\u7684\u670d\u52a1\u3002\u5f53\u6d88\u8d39\u65b9\u7684\u8bbe\u5907\u5904\u4e8e\n\u4f9b\u5e94\u65b9\u8bbe\u5907\u7684\u90bb\u57df\u5185\u65f6\uff0c\u4ed6\u4f1a\u63a5\u6536\u5305\u542b\u6709\u53d7\u4f9b\u5e94\u65b9\u652f\u6301\u7684 AllJoyn \u63a5\u53e3\u4fe1\u606f\u7684\u670d\u52a1\u516c\u544a\u3002\n\n\nAllJoyn \u8def\u7531\u4fdd\u6709\u8fde\u63a5\u4fe1\u606f\uff0c\u4ee5\u4fbf\u8fde\u63a5\u56de\u53d1\u9001\u670d\u52a1\u901a\u544a\u4fe1\u606f\u7684\u4f9b\u5e94\u65b9\u3002\u5728\u53d1\u73b0\u8fc7\u7a0b\u540e\uff0c\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5411 AllJoyn \u8def\u7531\u7533\u8bf7\u5efa\u7acb\u652f\u6301\u5230\u6240\u9700\u63a5\u53e3\u7684\u4f9b\u5e94\u65b9\n\u5e94\u7528\u7a0b\u5e8f\u7684\u8fde\u63a5\uff0c\u4ee5\u4fbf\u4f7f\u7528\u670d\u52a1\u3002AllJoyn \u8def\u7531\u4f7f\u7528\u8fde\u63a5\u6027\u4fe1\u606f\u4ee5\u4fbf\u8fde\u63a5\u56de\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n14.06\u7248\u672c\u4e2d\u589e\u5f3a\u7684\u53d1\u73b0\u673a\u5236\n\n\n\u572814.06\u7248\u672c\u4e2d\uff0cAllJoyn \u53d1\u73b0\u673a\u5236\u88ab\u589e\u5f3a\uff0c\u4ee5\u4fbf\u4f7f\u5bf9\u652f\u6301\u4e00\u7cfb\u5217\u63a5\u53e3\u7684\u8bbe\u5907/\u5e94\u7528\u7a0b\u5e8f\u7684\u53d1\u73b0\u66f4\u52a0\u6709\u6548\u7387\u3002\u6b64\u589e\u5f3a\u7684\u53d1\u73b0\u673a\u5236\u88ab\u79f0\u4e3a Next-Generation Name \nService (NGNS). NGNS \u652f\u6301\u57fa\u4e8e DNS \u591a\u64ad \uff08mDNS\uff09\u7684\u53d1\u73b0\u534f\u8bae\uff0c\u652f\u6301\u5728\u4e00\u4e2a over-the-wire \u53d1\u73b0\u6d88\u606f\u4e2d\u6307\u5b9a AllJoyn \u63a5\u53e3\u3002\u6b64\u5916\uff0c\u57fa\u4e8e mDNS \u7684\u534f\u8bae\u8fd8\u53ef\n\u63d0\u4f9b\u901a\u8fc7\u5355\u64ad\u7684\u53d1\u73b0\u54cd\u5e94\u529f\u80fd\uff0c\u4ee5\u63d0\u5347\u53d1\u73b0\u534f\u8bae\u7684\u6027\u80fd\uff0c\u5e76\u5c06\u5728 AllJoyn \u53d1\u73b0\u8fc7\u7a0b\u4e2d\u603b\u4f53\u7684\u591a\u64ad\u901a\u4fe1\u6d41\u91cf\u964d\u5230\u6700\u5c0f\u3002\n\n\nAllJoyn \u8bbe\u5907/\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u5b58\u5728\u68c0\u6d4b\u673a\u5236\u5df2\u7ecf\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u660e\u786e\u7684\u57fa\u4e8e mDNS \u7684 ping() \u6d88\u606f, \u6b64 ping \u6d88\u606f\u901a\u8fc7\u5355\u64ad\u88ab\u53d1\u9001\uff0c\u7528\u4e8e\u63a2\u6d4b\u8fdc\u7a0b\u7aef\u70b9\u662f\u5426\u53ef\u7528\u3002\nping() \u673a\u5236\u7531\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u9a71\u52a8\u3002\n\n\nAllJoyn \u4f1a\u8bdd\n\n\n\u4e00\u65e6\u7528\u6237\u53d1\u73b0\u611f\u5174\u8da3\u7684 AllJoyn \u670d\u52a1\uff0c\u4ed6\u5fc5\u987b\u4e0e\u6b64\u670d\u52a1\u5efa\u7acb\u8fde\u63a5\u624d\u80fd\u4f7f\u7528\u8be5\u670d\u52a1\uff08\u5b8c\u5168\u4f9d\u8d56\u4e8e\u975e\u4f1a\u8bdd\u7684\u4fe1\u53f7\u7684 Notification \u670d\u52a1\u9664\u5916\uff09\u3002\u8fde\u63a5\u5230\u670d\u52a1\u5305\u62ec\n\u4e0e\u8be5\u670d\u52a1\u5efa\u7acb\u4e00\u4e2a AllJoyn \u4f1a\u8bdd\u3002\u4f1a\u8bdd\u662f\u4e00\u4e2a\u5efa\u7acb\u5728\u4f7f\u7528\u8005\u548c\u63d0\u4f9b\u8005\u4e4b\u95f4\u7684\u6d41\u91cf\u53d7\u63a7\u7684\u6570\u636e\u8fde\u63a5\uff0c\u5e76\u56e0\u6b64\u4f7f\u5f97\u4f7f\u7528\u8005\u53ef\u4ee5\u4e0e\u670d\u52a1\u5668\u901a\u4fe1\u3002\n\n\n\u63a8\u5e7f\u670d\u52a1\u7684\u63d0\u4f9b\u65b9\u5e94\u7528\u7a0b\u5e8f\u5c06 AllJoyn \u603b\u7ebf\u4e0e\u4f1a\u8bdd\u7aef\u53e3\u7ed1\u5b9a\uff0c\u5e76\u76d1\u542c\u7528\u6237\u662f\u5426\u8fdb\u5165\u4f1a\u8bdd\u3002\u7ed1\u5b9a\u4e0e\u76d1\u542c\u7684\u52a8\u4f5c\u4f7f\u5f97\u4f9b\u5e94\u65b9\u6210\u4e3a\u4e86\u4f1a\u8bdd\u7684\u4e3b\u673a\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u63d0\u4f9b\u65b9\u548c\u4f7f\u7528\u65b9\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u4f1a\u63d0\u524d\u77e5\u9053\u7aef\u53e3\u53f7\u3002\u5728 announcement-based \u53d1\u73b0\u4e2d\uff0c\u7aef\u53e3\u53f7\u662f\u7531\u901a\u544a\u6d88\u606f( Announcement message )\u88ab\u53d1\u73b0\u7684\u3002\u5728\u53d1\u73b0\u7279\u5b9a\u7684\u670d\u52a1\u4e4b\n\u540e\uff0c\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u4f1a\u901a\u8fc7\u6307\u5b9a\u4f1a\u8bdd\u7aef\u53e3\u4ee5\u53ca\u670d\u52a1\u7684\u552f\u4e00\u8bc6\u522b\u7b26/well-known name \u6765\u8bf7\u6c42 AllJoyn \u8def\u7531\u8fdb\u5165\u4e0e\u8fdc\u7aef\u670d\u52a1\u7684\u4f1a\u8bdd\uff08\u628a\u4ed6\u53d8\u6210\u4e00\u4e2a session joiner\uff09\u3002\u5728\u8fd9\u4e4b\u540e\uff0cAllJoyn \u8def\u7531\u8d1f\u8d23\u7167\u770b\u4f7f\u7528\u65b9\u4e0e\u63d0\u4f9b\u65b9\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u4f1a\u8bdd\u3002\n\n\n\u6bcf\u4e2a\u4f1a\u8bdd\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u4f1a\u8bdd\u8bc6\u522b\u7b26\uff0c\u7531\u63d0\u4f9b\u65b9\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u4f1a\u8bdd\u4e3b\u673a\uff09\u6240\u5206\u914d\u3002\u4e00\u4e2a AllJoyn \u4f1a\u8bdd\u53ef\u4ee5\u662f\u4e00\u4e0b\u7684\u4e00\u79cd\uff1a\n\n\n\n\n\u70b9\u5bf9\u70b9\u7684\u4f1a\u8bdd\uff1a\u53ea\u6709\u4e24\u4e2a\u53c2\u4e0e\u8005\u7684\u4f1a\u8bdd-\u4f1a\u8bdd\u4e3b\u673a\u4ee5\u53ca\u4f1a\u8bdd\u53c2\u4e0e\u8005\u3002\n\n\n\u591a\u653e\u5bf9\u8bdd\uff1a\u6709\u591a\u4e2a\u53c2\u4e0e\u8005\u7684\u4f1a\u8bdd-\u4e00\u4e2a\u5355\u4e00\u7684\u4f1a\u8bdd\u4e3b\u673a\u4ee5\u53ca\u591a\u4e2a\u4f1a\u8bdd\u53c2\u4e0e\u8005\u3002\n\n\n\n\n\u4f1a\u8bdd\u5efa\u7acb\u5b8c\u6210\u540e\uff0c\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\u4e0e\u63d0\u4f9b\u65b9\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4e92\u3002\u6b64\u4ee3\u7406\u5bf9\u8c61\u9700\u8981\u4e00\u4e2a\u4f1a\u8bdd ID \u548c\u8fdc\u7aef\u670d\u52a1\u7684\u5bf9\u8c61\u8def\u5f84\u6765\u521d\u59cb\u5316\u3002\u4e00\u65e6\u5b8c\u6210\uff0c\n\u4f7f\u7528\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u4ee3\u7406\u5bf9\u8c61\u6765\u4e0e\u8fdc\u7aef\u670d\u52a1\u5bf9\u8c61\u5efa\u7acb\u8054\u7cfb\u3002\n\n\n\u975e\u4f1a\u8bdd\u4fe1\u53f7\n\n\nAllJoyn \u6846\u67b6\u63d0\u4f9b\u4e86\u53ef\u4ee5\u5c06\u4fe1\u53f7\u5e7f\u64ad\u5728\u90bb\u8fd1\u57df\u7f51\u7edc\u4e0a\u3002\u5e7f\u64ad\u4fe1\u53f7\u7684\u5efa\u7acb\u4e0d\u9700\u8981\u4efb\u4f55\u5e94\u7528\u5c42\u4f1a\u8bdd\u3002\u8fd9\u7c7b\u4fe1\u53f7\u88ab\u79f0\u4e3a\u975e\u4f1a\u8bdd\u4fe1\u53f7\uff0c\u7531\u88ab AllJoyn \u8def\u7531\u652f\u6301\u7684\u975e\u4f1a\u8bdd \u7684\u4fe1\u53f7\u673a\u5236\u6240\u5e7f\u64ad\u3002\n\n\n\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7684\u6295\u9012\u6709\u4ee5\u4e0b\u4e24\u4e2a\u8fc7\u7a0b\nThe delivery of sessionless signals is done as a two-step process. \n\n\n\n\n\u4f9b\u5e94\u65b9\u8bbe\u5907\uff08\u975e\u4f1a\u8bdd\u4fe1\u53f7\u53d1\u5c04\u7aef\uff09\u53d1\u51fa\u5b58\u5728\u7b49\u5f85\u63a5\u6536\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7684\u63a8\u5e7f\u3002\n\n\n\u4efb\u4f55\u5e0c\u671b\u63a5\u6536\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7684\u8bbe\u5907\u5c06\u4e0e\u4f9b\u5e94\u65b9\u8fde\u63a5\uff0c\u5e76\u63a5\u6536\u65b0\u4fe1\u53f7\u3002\n\n\n\n\n\u4f7f\u7528\u975e\u4f1a\u8bdd\u4fe1\u53f7\u673a\u5236\uff0c\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5411 AllJoyn \u8def\u7531\u53d1\u9001\u5e7f\u64ad\u4fe1\u53f7\u3002AllJoyn \u8def\u7531\u5c06\u8fd9\u4e9b\u4fe1\u53f7\u7f13\u5b58\u3002\u8fd9\u4e9b\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7684\u5185\u5bb9\u5c06\u88ab\u5206\u6210\u5404\u4e2a\u7248\u672c\u3002 AllJoyn \u8def\u7531\u53d1\u51fa\u4e00\u4e2a\u63d0\u9192\u5176\u4ed6\u8bbe\u5907\u5728\u4f9b\u5e94\u65b9\u6709\u65b0\u6d88\u606f\u7684\u4fe1\u53f7\u63a8\u5e7f\u6d88\u606f\u3002\u6b64\u975e\u4f1a\u8bdd\u4fe1\u53f7\u63a8\u5e7f\u6d88\u606f\u5305\u62ec\u4e00\u4e2a\u975e\u4f1a\u8bdd\u7684\u6307\u5b9a\u4fe1\u53f7\u7684 well-known name, \u58f0\u660e\u8be5\u975e\n\u4f1a\u8bdd\u4fe1\u53f7\u7f13\u5b58\u7684\u7248\u672c\u3002\n\n\n\u5bf9\u63a5\u6536\u975e\u4f1a\u8bdd\u4fe1\u53f7\u6709\u5174\u8da3\u7684\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u9488\u5bf9\u975e\u4f1a\u8bdd\u4fe1\u53f7\u6307\u5b9a\u4fe1\u53f7\u7684 well-known name \u6267\u884c\u53d1\u73b0\u884c\u4e3a\u3002\u5728\u4f7f\u7528\u7aef\u7684 AllJoyn \u603b\u7ebf\u4f1a\u4fdd\u6301\u5df2\u7ecf\u4ece\u6bcf\u4e00\u4e2a\u4f9b\u5e94\n\u65b9 AllJoyn \u8def\u7531\u63a5\u6536\u5230\u7684\u6700\u65b0\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u3002\u5982\u679c\u4ed6\u63a2\u6d4b\u5230\u4f34\u968f\u7740\u66f4\u65b0\u8fc7\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7248\u672c\u5230\u6765\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u63a8\u5e7f\uff0c\u4ed6\u5c06\u63a5\u6536\u65b0\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u5e76\u5c06\u5b83\u4eec\u9001\u5230\u611f\n\u5174\u8da3\u7684\u4f7f\u7528\u65b9\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n14.06\u7248\u672c\u4e2d\u5bf9\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7684\u589e\u5f3a\n\n\n\u975e\u4f1a\u8bdd\u4fe1\u53f7\u529f\u80fd\u572814.06\u7248\u672c\u4e2d\u88ab\u589e\u5f3a\uff0c\u4ee5\u4fbf\u4f7f\u4f7f\u7528\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5411\u652f\u6301\u6240\u9700\u7684 AllJoyn \u63a5\u53e3\u7684\u4f9b\u5e94\u65b9\u8bf7\u6c42\u975e\u4f1a\u8bdd\u4fe1\u53f7\u3002\u5bf9\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7684\u589e\u5f3a\u5982\u4e0b\uff1a\n\n\n\n\n\n\n\u975e\u4f1a\u8bdd\u4fe1\u53f7\u88ab\u63a8\u5e7f\u65f6\u7684\u540d\u5b57\u88ab\u589e\u5f3a\uff0c\u53ef\u4ee5\u5728\u975e\u4f1a\u8bdd\u6d88\u606f\u7684\u5934\u90e8\u589e\u52a0 \n \u4fe1\u606f\u3002\u4f7f\u7528\u8005\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u611f\u5174\u8da3\u7684 \n \u540d\u6765\u9009\u62e9\u6536\u53d6\u76f8\u5e94\u7684\n\u63d0\u4f9b\u8005\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u3002\u6bcf\u4e00\u4e2a\u5728\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7f13\u5b58\u4e2d\u7684\u63a5\u53e3\u90fd\u4f1a\u88ab\u63a8\u5e7f\u4e00\u4e2a\u5355\u72ec\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u540d\u3002\n\n\n\n\n\n\n\u52a0\u5165\u4e86\u65b0\u673a\u5236\uff1a\u4f7f\u7528\u8005\u7aef\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u6307\u660e\u53ea\u63a5\u6536\u5b9e\u73b0\u4e86\u4e00\u5b9a\u79cd\u7c7b\u7684 AllJoyn \u63a5\u53e3\u53d1\u51fa\u7684 Announce \u975e\u4f1a\u8bdd\u4fe1\u53f7\u3002\n\n\n\n\n\n\n\u4ec5\u5f53\u975e\u4f1a\u8bdd\u4fe1\u53f7\u662f\u7531\u652f\u6301\u6240\u9700\u8981\u63a5\u53e3\u7684\u4f9b\u5e94\u65b9\u53d1\u51fa\u65f6\uff0c\u624d\u4f1a\u88ab\u6536\u53d6\u3002\n\n\n\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\n\n\nAllJoyn \u7684\u5c31\u53ca\u5e94\u7528\u7a0b\u5e8f\u88ab\u7528\u4e8e\u5d4c\u5165\u5f0f\u8bbe\u5907\u4e2d\uff0c\u4f8b\u5982\u4f20\u611f\u5668\u3002\u9488\u5bf9\u4e00\u4e9b\u7279\u5b9a\u7684\u529f\u80fd\uff0c\u8fd9\u4e9b\u5d4c\u5165\u5f0f\u8bbe\u5907\u88ab\u4f18\u5316\uff0c\u5e76\u88ab\u9650\u5236\u4e86\u529f\u7387\uff0c\u5185\u5b58\u4ee5\u53ca\u8fd0\u7b97\u80fd\u529b\u3002AllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7684\u8bbe\u8ba1\u5b97\u65e8\u662f\u5c06 AllJoyn \u6846\u67b6\u7684\u4f18\u52bf\u5e26\u5165\u5230\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\u3002\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u5360\u6709\u666e\u904d\u5f88\u5c0f\u3002\n\n\nAllJoyn \u7cbe\u7b80\u8bbe\u5907\u7684\u4f7f\u7528\n\u7cbe\u7b80\u8bbe\u5907\u4f7f\u7528\u8f7b\u91cf\u5316\u7684\u7cbe\u7b80\u5e94\u7528\u4ee3\u7801\u4ee5\u53ca AllJoyn \u7cbe\u7b80\u5185\u6838\u5e93 \uff08AJTCL\uff09.\u8fd9\u4e9b\u8bbe\u5907\u4e0a\u6ca1\u6709 AllJoyn \u8def\u7531\u3002\u56e0\u6b64\uff0c\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u4f7f\u7528\u8fd0\u884c\u5728\u5176\u4ed6\u652f\u6301 AllJoyn \u8bbe\u5907\u4e0a\u7684 AllJoyn \u8def\u7531\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u501f\u7528\u5176\u4ed6\u8bbe\u5907\u7684 AllJoyn \u8def\u7531\u529f\u80fd\u3002\n\n\n\u5728\u542f\u52a8\u65f6\uff0c\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\u5e76\u8fde\u63a5\u5230\u8fd0\u884c\u5728\u53e6\u4e00\u4e2a\u652f\u6301 AllJoyn \u8bbe\u5907\u4e0a\u7684 AllJoyn \u8def\u7531\u3002\u4ece\u6b64\u523b\u5f00\u59cb\uff0c\u6b64\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5c31\u4f7f\u7528\u8be5 AllJoyn \u8def\u7531\u5b8c\u6210 AllJoyn \u7684\u6838\u5fc3\u529f\u80fd\uff0c\u5305\u62ec\u670d\u52a1\u7684\u63a8\u5e7f/\u53d1\u73b0\uff0c\u5efa\u7acb\u4f1a\u8bdd\uff0c\u4f20\u9012\u4fe1\u53f7\u7b49\u7b49\u3002\u5982\u679c\u4e00\u4e2a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u8fde\u63a5\u5230\u4e4b\u524d\u53d1\u73b0\u7684 AllJoyn \u8def\u7531\uff0c\u4ed6\u8bb2\u5c1d\u8bd5\u53d1\u73b0\u53e6\u4e00\u4e2a\n\u53ef\u8fde\u63a5\u7684 AllJoyn \u8def\u7531\u3002\n\n\nAllJoyn \u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u548c AllJoyn \u7684\u6807\u51c6\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u517c\u5bb9\u3002\u4ed6\u4eec\u4f7f\u7528\u76f8\u540c\u7684 over-the-wire \u534f\u8bae\u3002\u8fd9\u4fdd\u969c\u4e86\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6807\u51c6\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u517c\n\u5bb9\u6027\u3002AllJoyn \u7684\u6807\u51c6\u5e94\u7528\u7a0b\u5e8f\u5728\u4e0e AllJoyn \u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u901a\u8bdd\u65f6\uff0c\u5e76\u4e0d\u4f1a\u77e5\u9053\u5bf9\u65b9\u662f\u7cbe\u7b80\u7684\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u4f46\u662f\u5bf9\u4e8e\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4f1a\u6709\u9488\u5bf9\u6d88\u606f\u5927\u5c0f\u7684\u4e00\u4e9b\n\u9650\u5236\uff0c\u8fd9\u53d6\u51b3\u4e8e\u53ef\u4f7f\u7528\u7684 RAM \u5bb9\u91cf\u3002\n\n\nAllJoyn \u534f\u8bae\u7248\u672c\n\n\n\u901a\u8fc7 AllJoyn \u8def\u7531\u5b9e\u73b0\u7684\u529f\u80fd\u4f1a\u901a\u8fc7\u4e00\u4e2a AllJoyn \u534f\u8bae\u7248\u672c\u5b57\u6bb5\uff08AJPV\uff09\u8fdb\u884c\u7248\u672c\u5206\u7c7b\u3002\u4e0b\u8868\u771f\u5b9e\u4e86\u4e0d\u540c AllJoyn \u53d1\u5e03\u7248\u672c\u7684 AJPV\uff1b\u9664\u975e\u53e6\u884c\u901a\u77e5\uff0c\u4e3b\u53d1\n\u884c\u7248\u672c\u7684 AJPV \u4e5f\u88ab\u4f7f\u7528\u5230\u6240\u6709\u8865\u4e01\u7248\u672c\u3002AJPV \u4f5c\u4e3a BusHello \u6d88\u606f\u7684\u4e00\u90e8\u5206\uff0c\u5728 AllJoyn \u4f1a\u8bdd\u5efa\u7acb\u65f6\u7684\u8def\u7531\u4e4b\u95f4\u548c\u5728\u53f6\u8282\u70b9\u8fde\u63a5\u5230\u8def\u7531\u65f6\u7684\u53f6\u8282\u70b9\u548c\u8def\u7531\n\u8282\u70b9\u4e4b\u95f4\u88ab\u4ea4\u6362\u3002\u8fd9\u4e2a\u5b57\u6bb5\u88ab\u6838\u5fc3\u5e93\u7528\u4e8e\u8bc6\u522b\u5bf9\u5176\u4ed6\u8def\u7531\u7684\u517c\u5bb9\u6027\uff0c\u5e76\u7279\u5b9a\u7684\u88ab\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7528\u6765\u51b3\u5b9a\u662f\u5426\u8fde\u63a5\u5230\u4e00\u4e2a\u7279\u5b9a\u8def\u7531\uff0c\u6216\u7ee7\u7eed\u641c\u7d22\u3002\u5b83\u540c\u6837\u88ab\u5176\u4ed6\n\u8def\u7531\u7528\u4e8e\u51b3\u5b9a\u53f6\u8282\u70b9\u7684\u529f\u80fd\u662f\u5426\u53ef\u7528\uff08\u4f8b\u5982\u81ea\u6211\u52a0\u5165\uff0cSessionLostWithReason \u7b49\u7b49\uff09\n\n\n Table: \n AllJoyn \u7248\u672c\u5bf9\u534f\u8bae\u6620\u5c04\u8868\n\n\n\n\n\n\n\n\n \u53d1\u5e03\u7248\u672c \n\n\n AJPV \n\n\n\n\n\n\n\n\n\n\nlegacy 03.04.06\n\n\n9\n\n\n\n\n\n\nv14.02\n\n\n9\n\n\n\n\n\n\nv14.06\n\n\n10\n\n\n\n\n\n\nv14.12\n\n\n11\n\n\n\n\n\n\nv15.04\n\n\n12",
            "title": "Home"
        },
        {
            "location": "/learn/core/system-description/#alljoyn",
            "text": "",
            "title": "AllJoyn&trade; \u7cfb\u7edf\u63cf\u8ff0"
        },
        {
            "location": "/learn/core/system-description/#_1",
            "text": "\u53d1\u5e03\u7248\u672c  \u65e5\u671f  \u6539\u53d8\u5185\u5bb9      14.06  9/26/2014  \u521d\u7248    14.12  12/17/2014  14.12\u4e2d\u52a0\u5165\u7684\u65b0\u529f\u80fd: UDP \u4f20\u8f93\u8bbe\u8ba1 \u8def\u7531\u7aef\u7684 TCP vs UDP \u9009\u62e9\u903b\u8f91 \u57fa\u4e8e mDNS \u7684 TCL \u8def\u7531\u53d1\u73b0\u673a\u5236 TCL \u66f4\u65b0\u4e86 SLS fetch backoff \u8bbe\u8ba1\u4ee5\u652f\u6301\u7ebf\u6027+\u6307\u6570\u6027 backoff \u52a0\u5165\u8def\u7531\u63a2\u6d4b\u673a\u5236\u4ee5\u63a2\u6d4b\u5931\u8e2a\u7684\u5e94\u7528\u7a0b\u5e8f \u52a0\u5165\u53ef\u4ee5\u68c0\u6d4b\u5e76\u65ad\u5f00\u8bfb\u53d6\u901f\u5ea6\u6162\u7684\u8282\u70b9\u7684\u8def\u6709\u903b\u8f91 \u5176\u4ed6\u66f4\u65b0: Endpoints \u5bf9 AllJoyn \u7684\u4f20\u8f93\u53ef\u7528 TCP \u4f20\u8f93\u7684\u6570\u636e\u5e73\u9762\u6a21\u578b\u4ee5\u53ca\u72b6\u6001\u673a AllJoyn \u534f\u8bae\u7248\u672c\u4e0e\u4e0d\u540c\u53d1\u5e03\u7684\u5bf9\u5e94  \u8def\u7531\u95f4\u7684\u8fde\u63a5\u8d85\u65f6\u673a\u5236\u4ee5\u68c0\u6d4b\u5931\u8e2a\u8def\u7531    15.04  4/29/2015  \u5728 Thin Apps \u90e8\u5206\u4e2d\u6709\u5173\u4e8e\u5982\u4e0b\u529f\u80fd\u7684\u66f4\u65b0: \u5b89\u5168\u6027\u4ee5\u53ca\u5bf9\u8def\u7531\u9009\u62e9\u6dfb\u52a0\u63cf\u8ff0 \u4fee\u590d\u9519\u5b57\u589e\u5f3a\u53ef\u8bfb\u6027\u548c\u4e00\u81f4\u6027\u7684\u5e38\u89c4\u6e05\u7406 \u5176\u4ed6\u66f4\u65b0: \u5e38\u89c4\u6e05\u7406 \u53bb\u6389\u4e86\u5bf9 RSA \u548c PIN\u8ba4\u8bc1\u673a\u5236\u7684\u5f15\u7528\u7531\u4e8e\u4ed6\u4eec\u5c06\u4e0d\u88ab\u652f\u6301     \u6b64\u90e8\u5206\u8be6\u7ec6\u63cf\u8ff0\u4e86 AllJoyn \u5728\u7cfb\u7edf\u5c42\u4e2d\u7684\u5de5\u4f5c\u65b9\u5f0f",
            "title": "\u53d1\u5e03\u5386\u53f2"
        },
        {
            "location": "/learn/core/system-description/#_2",
            "text": "\u6982\u89c8  \u7269\u8054\u7f51\uff08IoE\uff09\u662f\u4e00\u4e2a\u4ee4\u4eba\u5174\u594b\u7684\u613f\u666f\uff0c\u4ed6\u627f\u8bfa\u5c06\u4eba\u4e0e\u7269\u6216\u7269\u4e0e\u7269\u4ee5\u5404\u79cd\u65b9\u5f0f\u8fde\u63a5\u5728\u4e00\u8d77\uff1b\u8fd9\u5c06\u4f1a\u521b\u9020\u65b0\u7684\u5bb9\u91cf\u548c\u4e30\u5bcc\u7684\u4f53\u9a8c\uff0c\u5e76\u5c06\u4f7f\u6211\u4eec\u7684\u751f\u6d3b\u66f4\u7b80\u5355\u3002 IoE \u627f\u8bfa\u5c06\u628a\u4eba\uff0c\u8fdb\u7a0b\uff0c\u6570\u636e\u4ee5\u53ca\u7269\u54c1\u6c47\u805a\u5230\u4e00\u8d77\uff0c\u7ed9\u7f51\u7edc\u5316\u7684\u8fde\u63a5\u5e26\u6765\u524d\u6240\u672a\u6709\u7684\u76f8\u5173\u6027\u53ca\u4ef7\u503c\uff0c\u5c06\u4fe1\u606f\u8f6c\u5316\u6210\u884c\u52a8\uff0c\u5e76\u5e26\u6765\u4e4b\u524d\u4ece\u672a\u5b9e\u73b0\u8fc7\u7684\u80fd\u529b\u3002  IoE \u5c06\u4f1a\u4e3a\u4f4f\u5b85\uff0c\u529e\u516c\u5ba4\uff0c\u6c7d\u8f66\uff0c\u8857\u9053\uff0c\u673a\u573a\u4ee5\u53ca\u8d2d\u7269\u4e2d\u5fc3\u7b49\u7b49\u5e26\u6765\u667a\u80fd\u7269\u54c1\u548c\u667a\u80fd\u8bbe\u5907\u3002\u8fd9\u4e9b\u8bbe\u5907\u5c06\u4e3a\u7528\u6237\u63d0\u4f9b\u5b9e\u65f6\u7684\u60c5\u666f\u4f53\u9a8c\u3002\u8ddd\u79bb\u76f8\u8fd1\u7684 IoE \u8bbe\u5907\u5c06\u7ec4\n\u5efa\u8fd1\u7aef IoE \u7f51\u7edc\uff0c\u4f8b\u5982\uff0c\u5728\u4f4f\u5b85\u5185\uff0c\u5728\u8f66\u91cc\u6216\u8005\u5728\u529e\u516c\u5ba4\u91cc\u3002IoE \u7684\u613f\u666f\u662f\u5b9e\u73b0\u591a\u4e2a IoE \u8fd1\u7aef\u7f51\u7edc\u7684\u4e92\u8fde\u4e92\u901a\u3002  \u5bf9\u6bd4\u73b0\u4eca\u5b58\u5728\u7684\u56e0\u7279\u7f51\u4ee5\u53ca\u7269\u8054\u7f51\u53ef\u4ee5\u53d1\u73b0\u5f88\u591a\u6709\u8da3\u7684\u4e8b\u3002\u73b0\u4eca\u7684\u56e0\u7279\u7f51\u7531\u53d7\u56e0\u7279\u7f51\u7f16\u53f7\u7ba1\u7406\u5c40 (IANA) \u96c6\u4e2d\u7ba1\u7406\u7684\u6570\u767e\u4e07\u5df2\u6ce8\u518c\u7684\u9ad8\u5c42\u57df\u540d\u6784\u6210\u3002\u57df\u540d\u7684\u53d1\n\u73b0\u53ef\u7531\u901a\u8fc7\u57df\u540d\u7cfb\u7edf\uff08DNS\uff09\u8fdb\u884c\u6309\u5c42\u6b21\u67e5\u627e\u5b8c\u6210\u3002\u5728 IoE \u7f51\u7edc\u4e2d\uff0c\u4f1a\u5b58\u5728\u6f5c\u5728\u7684\u6570\u767e\u4ebf IoE \u8bbe\u5907\u3002\u7531\u53ef\u6d4b\u91cf\u6027\u7684\u89d2\u5ea6\u770b\uff0c\u60f3\u8981\u8bd5\u56fe\u901a\u8fc7\u4e00\u4e2a\u4e2d\u592e\u5b9e\u4f53\u5bf9 IoE\n\u8bbe\u5907\u6ce8\u518c\u8fdb\u884c\u7ba1\u7406\u662f\u4e0d\u592a\u53ef\u80fd\u7684\u3002\u5e76\u4e14\u5728 IoE \u7f51\u7edc\u4e2d\uff0c\u57fa\u4e8e\u90bb\u8fd1\u57df\u7684\u8bbe\u5907\u95f4\u4ea4\u4e92\u51cf\u5c11\u4e86\u5ef6\u8fdf\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u5c06\u6bcf\u4e2a\u8bbe\u5907\u90fd\u76f4\u8fde\u5230\u56e0\u7279\u7f51\u3002\u56e0\u6b64\uff0c\u7269\u8054\u7f51\u7684\u53d1\u73b0\u673a\n\u5236\u5e94\u8be5\u662f\u57fa\u4e8e\u90bb\u57df\u6807\u51c6\u81ea\u52a8\u89e6\u53d1\u7684\u3002\u7531\u4e8e\u8d8a\u6765\u8d8a\u591a\u7684\u4e2a\u4eba\u53ca\u5bb6\u5ead\u8bbe\u5907\u4f1a\u5c06\u63a5\u53e3\u66b4\u9732\u7ed9\u7269\u8054\u7f51\u7528\u4e8e\u8fde\u63a5\u53ca\u63a7\u5236\uff0c\u5b89\u5168\u6027\u548c\u9690\u79c1\u6027\u53d8\u5f97\u5c24\u4e3a\u91cd\u8981\u3002  \u4e0b\u56fe\u5c55\u793a\u4e86\u591a\u4e2a\u901a\u8fc7\u56e0\u7279\u7f51\u4e92\u76f8\u8fde\u63a5\u7684\u90bb\u57df IoE \u7f51\u7edc\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002   Figure:  IoE \u7f51\u7edc\u5b9e\u4f8b  \u901a\u8fc7\u76f4\u63a5\u7684\u70b9\u5bf9\u70b9\u8fde\u63a5\uff0cIoE \u90bb\u57df\u7f51\u7edc\u4e2d\u7684\u667a\u80fd\u8bbe\u5907\u53ef\u4ee5\u505a\u5230\u5bf9\u5176\u4ed6\u8bbe\u5907\u7684\u52a8\u6001\u53d1\u73b0\u548c\u901a\u4fe1\u3002\u5bf9\u4e8e\u67d0\u4e9b\u4f7f\u7528\u7f51\u7edc\u5730\u5740\u8f6c\u6362\u7684\u8bbe\u5907\uff0c\u4ed6\u4eec\u53ef\u4ee5\u901a\u8fc7\u57fa\u4e8e\u4e91\u7684\u53d1\u73b0\u670d\u52a1\u6765\u53d1\u73b0\u5bf9\u65b9\u3002\u57fa\u4e8e\u4e91\u7684\u53d1\u73b0\u670d\u52a1\u4e5f\u53ef\u4ee5\u88ab\u7528\u4e8e\u4e0d\u540c\u7684 IoE \u90bb\u57df\u7f51\u7edc\u5185 IoE \u8bbe\u5907\u7684\u53d1\u73b0\u548c\u8fde\u63a5\u3002\u7efc\u5408 IoE \u7f51\u7edc\u53ef\u80fd\u4f1a\u6709\u9644\u52a0\u7684\u7528\u6765\u63d0\u4f9b\u7279\u6b8a\u529f\u80fd\u7684\u57fa\u4e8e\u4e91\n\u7684\u670d\u52a1\uff0c\u4f8b\u5982\uff0c\u8fdc\u7a0b\u4f4f\u5b85\u81ea\u52a8\u5316\uff0c\u8fdc\u7a0b\u8bca\u65ad/\u4fdd\u517b\uff0c\u6570\u636e\u6536\u96c6/\u62a5\u544a\u7b49\u7b49\u3002IoE \u7f51\u7edc\u8fd8\u53ef\u4ee5\u5c06\u4e00\u4e9b\u73b0\u5b58\u7684\u57fa\u4e8e\u4e91\u7684\u670d\u52a1\u96c6\u6210\u8fdb\u6765\uff0c\u4f8b\u5982\u5c06 Facebook \u6216 Twitter \u96c6\u6210\u5230\u8bbe\u5907\u72b6\u6001\u66f4\u65b0\u4e2d\u3002  \u5728\u4efb\u4f55 IoE \u7f51\u7edc\u4e2d\uff0c\u5185\u5728\u6216\u5938 IoE \u90bb\u57df\u7f51\u4e2d\u8bbe\u5907\u7684\u534f\u540c\u4e92\u7528\u6027\u5bf9\u63d0\u4f9b\u4e30\u5bcc\u7684\uff0c\u53ef\u6269\u5c55\u7684\uff0c\u4e3a\u8bbe\u5907\u63d0\u4f9b\u670d\u52a1\u53ca\u5e94\u7528\u7a0b\u5e8f\u7684 IoE \u751f\u6001\u7cfb\u7edf\u81f3\u5173\u91cd\u8981\u3002\u5728\u8bbe\u8ba1 IoE\n\u7cfb\u7edf\u65f6\uff0c\u4e00\u5b9a\u8981\u8003\u8651\u4e00\u4e9b\u7279\u5b9a\u7684\u5173\u952e\u8bbe\u8ba1\u5c42\u9762\uff0c\u5305\u62ec\u8bbe\u5907\u7684\u5e7f\u64ad\u53ca\u53d1\u73b0\uff0c\u79fb\u52a8\u6027\u548c\u52a8\u6001 IoE \u7f51\u7edc\u7ba1\u7406\uff0c\u5b89\u5168\u6027\u548c\u9690\u79c1\u6027\uff0c\u8de8\u8f7d\u4f53/\u64cd\u4f5c\u7cfb\u7edf\u7684\u534f\u540c\u4e92\u7528\n\u6027\uff0c\u7528\u4ee5\u652f\u6301\u7626\u7ec8\u7aef/\u54d1\u7ec8\u7aef\u7684\u8f7b\u91cf\u5316\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u5ef6\u5c55\u6027\u4ee5\u53ca\u603b\u4f53\u53ef\u6d4b\u91cf\u6027\u3002\u4e00\u4e2a\u6210\u529f\u7684 IoE \u7cfb\u7edf\u5fc5\u987b\u662f\u5f00\u653e\u7684\uff0c\u5e76\u63d0\u4f9b\u53ef\u7528\u4e8e\u8de8\u8d8a\u4e0d\u540c\u5782\u76f4\u7528\u4f8b\u7684\u6c34\u5e73\u5316\n\u89e3\u51b3\u65b9\u6848\u3002  AllJoyn \u7cfb\u7edf\u4e13\u6ce8\u4e8e\u8fd9\u4e9b\u6838\u5fc3\u8bbe\u8ba1\u5c42\u9762\u3002\u6b64\u7cfb\u7edf\u63d0\u4f9b\u5f00\u6e90\u7684\u8f6f\u4ef6\u6846\u67b6\uff0c\u53ef\u5b9e\u73b0\u57fa\u4e8e\u90bb\u8fd1\u57df\u7684\uff0c\u70b9\u5bf9\u70b9\u7684\uff0c\u627f\u8f7d\u65e0\u5173\u7684 IoE \u8bbe\u5907\u7f51\u7edc\u5316\u3002AllJoyn \u7cfb\u7edf\u4e3a\u8bbe\u5907\u53ca\n\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u70b9\u5bf9\u70b9\u534f\u8bae\u5728\u90bb\u8fd1\u57df\u7f51\u7edc\u5185\u5e7f\u64ad\u5e76\u53d1\u73b0\u5bf9\u65b9\u7684\u65b9\u5f0f\u3002  AllJoyn \u5f00\u6e90\u8f6f\u4ef6\u7cfb\u7edf\u63d0\u4f9b\u4e86\u53ef\u4ee5\u5b8c\u6210\u5938\u5f02\u6784\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684 IoE \u8bbe\u5907\u95f4\u901a\u4fe1\u7684\u6846\u67b6\u3002AllJoyn \u662f\u4e00\u4e2a\u57fa\u4e8e\u90bb\u8fd1\u57df\u7684\u70b9\u5bf9\u70b9\u901a\u4fe1\u5e73\u53f0\uff0c\u9762\u5411\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u8bbe\n\u5907\u3002\u4ed6\u4e0d\u9700\u8981\u4f7f\u7528\u96c6\u4e2d\u5f0f\u7684\u670d\u52a1\u5668\u6765\u5b8c\u6210\u901a\u4fe1\u3002\u652f\u6301 AllJoyn \u7684\u8bbe\u5907\u8fd0\u884c\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5f62\u6210\u70b9\u5bf9\u70b9\u7684 AllJoyn \u7f51\u7edc\u3002AllJoyn \u7cfb\u7edf\u662f\u5206\n\u5e03\u5f0f\u7684\u8f6f\u4ef6\u5e73\u53f0\uff0c\u652f\u6301\u8fd0\u884c\u5728 IoE \u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u63a8\u5e7f\uff0c\u53d1\u73b0\u670d\u52a1\uff0c\u4ee5\u53ca\u8fde\u63a5\u5230\u5176\u4ed6\u8bbe\u5907\u4ee5\u4f7f\u7528\u5176\u4ed6\u8bbe\u5907\u63d0\u4f9b\u7684\u670d\u52a1\u3002AllJoyn \u6846\u67b6\u4f7f\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\n\u8fc7\u53ef\u88ab\u53d1\u73b0\u7684 API \u6765\u66b4\u9732\u81ea\u5df1\u7684\u529f\u80fd\uff0c\u8fd9\u4e9b API \u662f\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u6240\u63d0\u4f9b\u7684\u529f\u80fd\u7684\u5951\u7ea6\u3002  \u5728\u90bb\u8fd1\u57df AllJoyn \u7f51\u7edc\u4e2d\uff0c \u5b89\u88c5\u5728 IoE \u8bbe\u5907\u4e0a\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u4eec\u4e92\u4e3a peers. \u4e00\u4e2a\u652f\u6301 AllJoyn \u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u4f9b\u5e94\u65b9\uff0c\u6d88\u8d39\u65b9\uff0c\u6216\u8005\u65e2\u662f\n\u4f9b\u5e94\u65b9\u4e5f\u662f\u6d88\u8d39\u65b9\uff0c\u8fd9\u53d6\u51b3\u4e8e\u670d\u52a1\u6a21\u578b\u3002\u4f9b\u5e94\u65b9\u7684\u5e94\u7528\u7a0b\u5e8f\u5b9e\u73b0\u670d\u52a1\uff0c\u5e76\u5c06\u5b83\u4eec\u901a\u8fc7 AllJoyn \u7f51\u7edc\u63a8\u5e7f\u3002\u5bf9\u8fd9\u4e9b\u670d\u52a1\u6709\u5174\u8da3\u7684\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u8fde\u63a5\u5230\u4f9b\n\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u5e76\u6839\u636e\u81ea\u5df1\u7684\u559c\u597d\u4f7f\u7528\u670d\u52a1\u3002\u4e00\u4e2a AllJoyn \u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u626e\u6f14\u4f9b\u5e94\u65b9\u548c\u6d88\u8d39\u65b9\u7684\u89d2\u8272\u3002\u8fd9\u610f\u5473\u7740\u8be5\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5e7f\u64ad\u67d0\u4e00\u5957\u4ed6\u6240\u652f\u6301\u7684\u670d\n\u52a1\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u5e76\u5229\u7528\u5176\u5b83\u5728\u90bb\u8fd1\u57df\u4e2d\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u63d0\u4f9b\u7684\u5404\u79cd\u670d\u52a1\u3002  \u4e0b\u56fe\u5c55\u793a\u4e86\u67094\u53f0\u8bbe\u5907\u7684 AllJoyn \u7f51\u7edc   Figure:  AllJoyn \u7f51\u7edc  \u8bbe\u59071\u548c\u8bbe\u59072\u53ea\u6709\u63d0\u4f9b AllJoyn \u670d\u52a1\u7684\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u3002\u8bbe\u59073\u53ea\u6709\u4f7f\u7528\u5176\u5b83\u8bbe\u5907\u670d\u52a1\u7684\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u3002\u8bbe\u59074\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u5145\u5f53\u4f9b\u5e94\u65b9\u548c\u6d88\u8d39\u65b9\u3002\u8bbe\u59074\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u8bbe\u59072\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u63d0\u4f9b\u7684\u670d\u52a1\u3002\u540c\u65f6\u4ed6\u63d0\u4f9b\u7684\u670d\u52a1\u8fd8\u88ab\u8bbe\u59073\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u4f7f\u7528\u3002\u7bad\u5934\u7684\u65b9\u5411\u4ece\u4f9b\u5e94\u65b9\u6307\u5411\u6d88\u8d39\u65b9\uff0c\u6307\u793a\u7740\u670d\u52a1\u7684\u6d88\u8d39\u3002  AllJoyn \u6846\u67b6\u4e3a IoE \u8bbe\u5907\u4e4b\u95f4\u7684\u901a\u4fe1\u5efa\u7acb\u4e86\u4e00\u4e2a\u5e95\u5c42\u603b\u7ebf\u7ed3\u6784\u3002\u5728 IoE \u8bbe\u5907\u4e0a\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f \u901a\u8fc7 AllJoyn \u603b\u7ebf\u4e0e\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u8fde\u63a5\u5e76\u901a\u4fe1\u3002\nAllJoyn \u603b\u7ebf\u4e3a\u5728 IoE \u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u53ef\u4ee5\u53d1\u9001\u901a\u77e5\u6216\u8005\u4ea4\u6362\u6570\u636e\u7684\u5e73\u53f0\u4ee5\u53ca\u65e0\u7ebf\u94fe\u8def\u65e0\u5173\u7684\u4f20\u8f93\u673a\u5236\u3002AllJoyn \u603b\u7ebf\u8d1f\u8d23\u5904\u7406\u4e0e\u5e95\u5c42\u7269\u7406\u7684\u7279\u5b9a\u7f51\n\u7edc\u4f20\u8f93\u76f8\u914d\u9970\u7684\u5de5\u4f5c\u3002  \u6bcf\u4e00\u4e2a AllJoyn \u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u8fde\u63a5\u5230\u672c\u5730\u7684 AllJoyn \u603b\u7ebf\u3002\u4e00\u4e2a\u7ed9\u5b9a\u7684\u672c\u5730 AllJoyn \u603b\u7ebf\u53ef\u4ee5\u8fde\u63a5\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002AllJoyn \u603b\u7ebf\u4f7f\u9644\u7740\u5728\u5b83\u4e0a\u9762\u7684\n\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5b8c\u6210\u5e7f\u64ad\u670d\u52a1\uff0c\u53d1\u73b0\u670d\u52a1\u4ee5\u53ca\u4e92\u76f8\u901a\u4fe1\u7684\u529f\u80fd\u3002\u5728\u591a\u4e2a\u8bbe\u5907\u4e0a\u7684 AllJoyn \u603b\u7ebf\u7528\u7c7b\u4f3c Wi-Fi \u7684\u5e95\u5c42\u7f51\u7edc\u6280\u672f\u6765\u4e92\u76f8\u901a\u4fe1\u3002  AllJoyn \u5e73\u53f0\u7684\u5f00\u6e90\u5b9e\u73b0\u65b9\u5f0f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u751f\u6001\u7cfb\u7edf\uff0c\u8bf8\u591a\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u65b0\u529f\u80fd\u53ca\u589e\u5f3a\u529f\u80fd\u6765\u4e3a AllJoyn \u751f\u6001\u7cfb\u7edf\u505a\u8d21\u732e\u3002\u6b64\u7cfb\u7edf\u652f\u6301\u901a\u8fc7 OS \u62bd\u8c61\u5c42\u5b9e\u73b0\n\u7684\u64cd\u4f5c\u7cfb\u7edf\u65e0\u5173\u6027\uff0c\u4f7f\u5f97 AllJoyn \u6846\u67b6\u4ee5\u53ca\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5728\u591a\u79cd\u64cd\u4f5c\u5e73\u53f0\u4e0a\u8fd0\u884c\u3002AllJoyn\u6846\u67b6\u652f\u6301\u5927\u591a\u6570\u7684\u6807\u51c6 Linux \u53d1\u884c\u7248\uff0cAndroid2.3 \u53ca\u540e\u7eed\u7248\u672c\uff0c\n\u5e38\u89c1\u7684 Microsoft Windows \u64cd\u4f5c\u7cfb\u7edf\uff0cApple iOS, Mac OS X, \u5d4c\u5165\u5f0f\u7684\u8bf8\u5982 OpenWRT \u7684\u64cd\u4f5c\u7cfb\u7edf\u4ee5\u53ca\u7c7b\u4f3c ThreadX \u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u3002  AllJoyn \u6846\u67b6\u540c\u65f6\u4e5f\u652f\u6301\u591a\u79cd\u7528\u4e8e\u4e3a IoE\u8bbe\u5907\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u53ca\u670d\u52a1\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8fd9\u4e30\u5bcc\u4e86\u5f00\u53d1 AllJoyn \u5e94\u7528\u53ca\u670d\u52a1\u7684\u751f\u6001\u7cfb\u7edf\u3002 AllJoyn \u6846\u67b6\u76ee\u524d\u652f\u6301C, C++, Java, C#, JavaScript, \u4ee5\u53ca Objective-C.  AllJoyn \u7cfb\u7edf\u4ee5\u53ca D-bus \u89c4\u8303  AllJoyn\u7cfb\u7edf  AllJoyn \u5b9e\u73b0\u4e86\u4e00\u4e2a\u5e7f\u6cdb\u517c\u5bb9\u7684 D-Bus over-the-wire \u534f\u8bae\uff0c\u5e76\u9075\u5b88\u5728 D-Bus \u89c4\u8303\u4e2d\u7684\u4f17\u591a\u547d\u540d\u4e60\u4fd7\u548c\u6307\u5bfc\u539f\u5219\u3002AllJoyn \u5ef6\u5c55\u5e76\u663e\u8457\u5f3a\u5316\u4e86 D-Bus \u6d88\u606f\n\u603b\u7ebf\uff0c\u4ee5\u652f\u6301\u5206\u5e03\u5f0f\u603b\u7ebf\u7684\u573a\u666f\u3002AllJoyn \u7cfb\u7edf\u4f7f\u7528\u6309\u7167\u4e0b\u6587\u63cf\u8ff0\u7684 D-Bus \u89c4\u8303\uff1a   \u4f7f\u7528 D-Bus \u7684\u6570\u636e\u7c7b\u578b\u7cfb\u7edf\u4ee5\u53ca\u5e8f\u5217\u5316\u683c\u5f0f  \u901a\u8fc7\u6dfb\u52a0 flags \u4ee5\u53ca headers\uff08\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u9605 Message format \uff09\u5b9e\u73b0\u589e\u5f3a\u7248\u7684 D-Bus over-the-wire \u534f\u8bae\u3002  \u5bf9 well-known names \uff08\u670d\u52a1\u5668\uff09\uff0c\u63a5\u53e3\uff0c\u63a5\u53e3\u6210\u5458\uff08\u65b9\u6cd5\uff0c\u4fe1\u53f7\u4ee5\u53ca\u5c5e\u6027\uff09\u4ee5\u53ca\u5bf9\u8c61\u8def\u5f84\u7684\u547d\u540d\u4f7f\u7528 D-Bus \u7684\u547d\u540d\u539f\u5219\u3002  \u4f7f\u7528 D-Bus \u5b9a\u4e49\u7684\u7b80\u5355\u8ba4\u8bc1\u4e0e\u5b89\u5168\u5c42\uff08SASL\uff09\u6846\u67b6\u5b8c\u6210\u5e94\u7528\u7a0b\u5e8f\u5c42\u4e2d\u652f\u6301 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u95f4\u7684\u8ba4\u8bc1\u3002\u5e76\u652f\u6301\u4e0d\u9650\u4e8e\u7531 D-Bus \u89c4\u8303\u5b9a\u4e49\u7684\u591a\u79cd\u8ba4\u8bc1\u673a\u5236\u3002   D-Bus \u89c4\u8303\u8bf7\u53c2\u9605\u4ee5\u4e0b\u7f51\u5740\uff1a (http://dbus.freedesktop.org/doc/dbus-specification.html).  AllJoyn \u7cfb\u7edf\u7684\u5173\u952e\u6982\u5ff5  \u5982\u4e4b\u524d\u6240\u8ff0\uff0cAllJoyn \u6846\u67b6\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u53ef\u4ee5\u63a8\u5e7f\u548c\u53d1\u73b0\u670d\u52a1\uff0c\u4ee5\u53ca\u4f7f\u7528\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7684\u529f\u80fd\u7684\u5e95\u5c42\u603b\u7ebf\u7ed3\u6784\u3002\u4e3a\u4e86\u5b9e\u73b0\u6b64\u7ed3\u6784\uff0cAllJoyn \u6846\u67b6\u63d0\u4f9b\u4e86\n\u4e00\u4e2a\u53ef\u4f9b\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4e92\u7684\u9762\u5411\u5bf9\u8c61\u7684\u8f6f\u4ef6\u6846\u67b6\u3002  AllJoyn \u8def\u7531  AllJoyn \u8def\u7531\u7ec4\u4ef6\u4e3a AllJoyn \u7cfb\u7edf\u63d0\u4f9b\u6838\u5fc3\u529f\u80fd\uff0c\u5305\u62ec\u70b9\u5bf9\u70b9\u63a8\u5e7f/\u53d1\u73b0\uff0c\u5efa\u7acb\u8fde\u63a5\uff0c\u5e7f\u64ad\u4fe1\u53f7\u4ee5\u53ca\u63a7\u5236/\u6295\u9012\u6570\u636e\u6d88\u606f\u3002AllJoyn \u8def\u7531\u901a\u8fc7\u5b9e\u73b0\u8f6f\u4ef6\u603b\u7ebf\u529f\u80fd\n\u4ee5\u53ca\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u8fde\u63a5\u4f7f AllJoyn \u6846\u67b6\u7684\u6838\u5fc3\u529f\u80fd\u53d7\u76ca\u3002\u6bcf\u4e00\u4e2a AllJoyn \u8def\u7531\u7684\u5b9e\u4f8b\u90fd\u6709\u4e00\u4e2a\u81ea\u884c\u5206\u914d\u7684\u5168\u7403\u552f\u4e00\u6807\u8bc6\u7b26\uff08GUID\uff09\u3002\u6b64 GUID \u5e76\u4e0d\u662f\u6301\u4e45\u6709\n\u6548\u7684\uff0c\u6bcf\u5f53 AllJoyn \u8def\u7531\u542f\u52a8\u65f6\u90fd\u4f1a\u88ab\u5206\u914d\u4e00\u4e2a\u65b0\u7684 GUID. AllJoyn \u8def\u7531\u53ef\u4ee5\u662f\u6346\u7ed1\u5728\u6bcf\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e0a\u7684\uff08\u6346\u7ed1\u6a21\u5f0f\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u88ab\u4f17\u591a\u5e94\u7528\u7a0b\u5e8f\u6240\u5206\u4eab\n\u7684\uff08\u72ec\u7acb\u6a21\u578b\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002   Figure:  AllJoyn \u6346\u7ed1\u5f0f\u4ee5\u53ca\u72ec\u7acb\u5f0f router \u4e3e\u4f8b  AllJoyn \u8def\u7531\u6709\u5b9a\u4e49\u4e86\u88ab\u652f\u6301\u529f\u80fd\u96c6\u5408\u7684\u76f8\u5173 AllJoyn \u534f\u8bae\u8bd1\u672c\u3002\u5728\u8fde\u63a5\u5efa\u7acb\u540e\uff0c\u6b64\u534f\u8bae\u4f1a\u5728 AllJoyn \u7f51\u7edc\u4e0a\u7684 AllJoyn \u8def\u7531\u4e4b\u95f4\u4ea4\u6362\uff0c\u4f5c\u4e3a\u5efa\u7acb AllJoyn\n\u4f1a\u8bdd\u7684\u4e00\u90e8\u5206\u3002  AllJoyn \u603b\u7ebf  AllJoyn \u8def\u7531\u63d0\u4f9b\u4e86\u8f6f\u4ef6\u603b\u7ebf\u529f\u80fd\uff0c\u501f\u52a9\u6b64\u529f\u80fd\u4e00\u4e2a\u6216\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4e0e\u603b\u7ebf\u5efa\u7acb\u8fde\u63a5\u5e76\u4ea4\u6362\u6d88\u606f\u3002\u5728\u8bbe\u5907\u4e0a\u7684 AllJoyn \u8def\u7531\u5b9e\u4f8b\u5efa\u7acb\u672c\u5730\u7684 AllJoyn \u903b \u8f91\u603b\u7ebf\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002   Figure:  AllJoyn \u8def\u7531\u5230 AllJoyn \u603b\u7ebf\u7684\u6620\u5c04\u8f6c\u6362  AllJoyn \u903b\u8f91\u603b\u7ebf\u6620\u5c04\u5230\u4e00\u4e2a\u5355\u72ec\u7684 AllJoyn \u8def\u7531\u6709\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a   \u8bbe\u5907\u4e0a\u53ea\u6709\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6346\u7ed1\u90e8\u7f72\u6a21\u578b\uff0c\u5982 UC2 \u6240\u793a\u3002  \u8bbe\u5907\u4e0a\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u72ec\u7acb\u90e8\u7f72\u6a21\u578b\uff0c\u5982 UC3 \u6240\u793a\u3002   \u5728\u8bbe\u5907\u4e0a\u6709\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6346\u7ed1\u90e8\u7f72\u6a21\u578b\u4e2d\uff0cAllJoyn \u903b\u8f91\u603b\u7ebf\u6620\u5c04\u5230\u591a\u4e2a AllJoyn \u8def\u7531\u5b9e\u4f8b\u7684\u60c5\u51b5\u8bf7\u53c2\u9605 UC1.  * NOTE: 8 \u5728\u6b64\u6587\u6863\u4e2d\uff0cAllJoyn \u8def\u7531\u4e0e AllJoyn \u603b\u7ebf\u8fd9\u4e24\u4e2a\u672f\u8bed\u662f\u53ef\u4ee5\u76f8\u4e92\u66ff\u6362\u7684\uff0c\u4ed6\u4eec\u6307\u4ee3\u7740\u4e00\u4e2a\u7531 AllJoyn \u7cfb\u7edf\u63d0\u4f9b\u7684\u76f8\u540c\u96c6\u5408\u7684\u603b\u7ebf\u529f\u80fd\u3002  \u4e0b\u56fe\u662f\u5728\u6709\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u8fde\u63a5\u5230\u603b\u7ebf\u7684\u4e24\u4e2a\u4e0d\u540c\u8bbe\u5907\u4e0a\u7684 AllJoyn \u672c\u5730\u603b\u7ebf\u7684\u7b80\u5316\u89c6\u56fe\u3002   Figure:  AllJoyn \u603b\u7ebf  AllJoyn \u603b\u7ebf\u4e3a\u8fde\u63a5\u5230\u603b\u7ebf\u7684\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u901a\u4fe1\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5a92\u4ecb\u3002\u5728\u591a\u4e2a\u8bbe\u5907\u4e0a\u7684 AllJoyn \u603b\u7ebf\u901a\u8fc7\u7c7b\u4f3c Wi-Fi \u7684\u5e95\u5c42\u7f51\u7edc\u6280\u672f\u5b9e\u73b0\u901a\u4fe1\u3002  \u4e0b\u56fe\u5c55\u793a\u4e86\u7531\u8de8\u8d8a\u591a\u4e2a\u8bbe\u5907\u7684\u591a\u4e2a AllJoyn \u603b\u7ebf\u5b9e\u4f8b\u6240\u6784\u6210\u7684\u903b\u8f91\u5206\u5e03\u5f0f AllJoyn \u8f6f\u4ef6\u603b\u7ebf:   Figure:  \u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf  \u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u9690\u85cf\u4e86\u6240\u6709\u8fd0\u884c\u5728\u591a\u4e2a\u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u901a\u4fe1\u94fe\u8def\u7ec6\u8282\u3002\u5bf9\u4e8e\u8fde\u63a5\u5230 AllJoyn \u603b\u7ebf\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\uff0c\u8fd0\u884c\u5728\u53e6\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684\u8fdc\n\u7aef\u5e94\u7528\u7a0b\u5e8f\u770b\u8d77\u6765\u5c31\u50cf\u5728\u8fd9\u4e2a\u8bbe\u5907\u672c\u5730\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u3002AllJoyn \u5206\u5e03\u5f0f\u603b\u7ebf\u4e3a\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e0a\u4f20\u9001\u6d88\u606f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5feb\u901f\u4e14\u8f7b\u91cf\u5316\u7684\u65b9\u5f0f\u3002  AllJoyn \u670d\u52a1  \u5982\u524d\u6240\u8ff0\uff0c\u5728 AllJoyn \u7f51\u7edc\u4e2d\uff0c\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u53ef\u88ab AllJoyn \u7f51\u7edc\u4e2d\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u670d\u52a1\u3002\u4f8b\u5982\uff0c\u4e00\u53f0\u7535\u89c6\u53ef\u4ee5\u63d0\u4f9b\u56fe\u50cf\u6e32\u67d3\u529f\u80fd\uff0c\u4ece\u800c\u663e\u793a\u53e6\n\u4e00\u4e2a\u8bbe\u5907\uff08\u4f8b\u5982\u667a\u80fd\u624b\u673a\uff09\u4e0a\u7684\u56fe\u7247\u3002AllJoyn \u670d\u52a1\u662f\u4e00\u4e2a\u7406\u8bba\u7684/\u903b\u8f91\u7684\u6982\u5ff5\uff0c\u7531\u5411\u6d88\u8d39\u65b9\u66b4\u9732\u670d\u52a1\u529f\u80fd\u7684\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u63a5\u53e3\uff08\u8be6\u7ec6\u63cf\u8ff0\u8bf7\u53c2\u9605 AllJoyn interfaces \uff09\u5b9a\u4e49\u3002  AllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u63d0\u4f9b\u5e76\u6d88\u8d39 AllJoyn \u670d\u52a1\uff0c\u4e5f\u5c31\u662f\u8bf4 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u626e\u6f14\u4f9b\u5e94\u65b9\u548c\u6d88\u8d39\u65b9\u3002  \u552f\u4e00\u6807\u8bc6  \u6bcf\u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u90fd\u8fde\u63a5\u5230\u4e00\u4e2a\u5355\u4e00\u7684 AllJoyn \u8def\u7531\u3002\u4e3a\u4e86\u5b9e\u73b0\u5bf9\u6bcf\u4e00\u4e2a\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\u7684\u5bfb\u5740\uff0cAllJoyn \u8def\u7531\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u8fde\u63a5\u5728\u5176\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u5206\u914d\n\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u7b26\u3002\u6b64\u552f\u4e00\u6807\u793a\u7b26\u4f7f\u7528 AllJoyn \u8def\u7531\u7684 GUID \u4f5c\u524d\u7f00\uff0c\u5e76\u9075\u5faa\u5982\u4e0b\u683c\u5f0f\uff1a  Unique Name =  : AJ router GUID . Seq #   NOTE:  \": .1\" \u6807\u8bc6\u7b26\u4f1a\u4e00\u76f4\u88ab\u5206\u914d\u7ed9 AllJoyn \u8def\u7531\u7684\u672c\u5730\u7ec8\u70b9\u3002  \u4e0b\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a GUID=100\u7684\u5355\u4e00 AllJoyn \u8def\u7531\u4e3a\u4e09\u4e2a\u8fde\u63a5\u5230 AllJoyn \u603b\u7ebf\u7684\u5e94\u7528\u7a0b\u5e8f\u5206\u914d\u552f\u4e00\u6807\u8bc6\u7b26\u7684\u8fc7\u7a0b\uff1a   Figure:  AllJoyn \u552f\u4e00\u6807\u8bc6\u7b26\u5206\u914d1 (\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u8fde\u63a5\u5230\u5355\u4e00 AllJoyn \u8def\u7531)  \u6b64\u573a\u666f\u63cf\u8ff0\u4e86\u6709\u591a\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u7684\u8bbe\u5907\u8fde\u63a5\u5230\u4e00\u4e2a\u5355\u4e00 AllJoyn \u8def\u7531\u7684\u60c5\u51b5\u3002  \u6211\u4eec\u671f\u671b\u5927\u591a\u6570\u652f\u6301 AllJoyn \u7684\u8bbe\u5907\u90fd\u662f\u5355\u4e00\u76ee\u7684\u8bbe\u5907\uff08\u4f8b\u5982\uff0c\u51b0\u7bb1\uff0c\u70e4\u7bb1\uff0c\u7167\u660e\u706f\u6ce1\u7b49\u7b49\uff09\uff0c\u5e76\u53ea\u6709\u4e00\u4e2a\u8fde\u63a5\u5230 AllJoyn \u603b\u7ebf\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u5176\u4e0a\u3002\u4f46\u662f\u4e5f\n\u4f1a\u6709 AllJoyn \u8def\u7531\u5355\u4e00\u5b9e\u4f8b\u652f\u6301\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u8bbe\u5907\uff0c\u6bd4\u5982\u7535\u89c6\u3002  \u4e0b\u56fe\u5c55\u793a\u4e86\u7ec4\u6210 AllJoyn \u603b\u7ebf\u5e76\u5728 AllJoyn \u8def\u7531\u4e0a\u6709\u591a\u4e2a\u5b9e\u4f8b\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u7684\u72ec\u7acb\u6807\u8bc6\u5206\u914d\u8fc7\u7a0b\uff1a   Figure:  AllJoyn \u552f\u4e00\u6807\u8bc6\u7b26\u5206\u914d2 (\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u6709 AllJoyn \u8def\u7531\u7684\u5b9e\u4f8b\uff09\u3002  NOTE:  \u6bcf\u4e2a\u552f\u4e00\u6807\u8bc6\u7684 GUID \u90e8\u5206\u90fd\u662f\u4e0d\u540c\u7684\uff0c\u4ed6\u4eec\u4e0e\u76f8\u5173\u8054\u7684 AllJoyn \u8def\u7531\u4e0a\u7684 GUID \u76f8\u540c  \u4e0b\u56fe\u5c55\u793a\u4e86\u901a\u8fc7\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u8fde\u63a5\u7684\u4e24\u4e2a\u4e0d\u540c\u8bbe\u5907\u4e0a\u5e94\u7528\u7a0b\u5e8f\u7684\u72ec\u7acb\u6807\u8bc6\u5206\u914d\u8fc7\u7a0b\uff1a   Figure:  AllJoyn \u552f\u4e00\u6807\u8bc6\u7b26\u5206\u914d3 (\u901a\u8fc7\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u8fde\u63a5\u7684\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f)\u3002  Well-known name  AllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u51b3\u5b9a\u4e3a\u4ed6\u7684\u670d\u52a1\u4f7f\u7528 well-known names.  well-known names \u662f\u7531 AllJoyn \u603b\u7ebf\u63d0\u4f9b\u7684\u53ef\u4ee5\u6301\u7eed\u5730\u67e5\u9605\u5230\u670d\u52a1\uff08\u6216\u4e00\u7cfb\u5217\u670d\u52a1\uff09\u7684\u65b9\n\u6cd5\u3002\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5bf9\u5176\u6240\u63d0\u4f9b\u7684\u6240\u6709\u670d\u52a1\u4f7f\u7528\u5355\u4e00\u7684 well-known name\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u670d\u52a1\u4f7f\u7528\u591a\u4e2a well-known names.  \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4e3a\u4ed6\u7684\u670d\u52a1\u5411 AllJoyn \u603b\u7ebf\u7533\u8bf7\u4e00\u4e2a\u6216\u591a\u4e2a well-known names. \u5982\u679c\u88ab\u7533\u8bf7\u7684 well-known names \u5c1a\u672a\u88ab\u4f7f\u7528\uff0c\u7533\u8bf7\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u4f1a\u88ab\u6388\n\u4e88\u72ec\u5bb6\u4f7f\u7528\u6743\u3002\u8be5\u64cd\u4f5c\u786e\u4fdd\u4e86 well-known names \u5728\u4efb\u4f55\u65f6\u5019\u90fd\u53ef\u4ee5\u4ee3\u8868\u552f\u4e00\u7684\u5730\u5740\u3002\u6b64\u552f\u4e00\u6027\u4ec5\u5728\u672c\u5730\u7684 AllJoyn \u603b\u7ebf\u5185\u5b58\u5728\u3002\u82e5\u8981\u5b9e\u73b0 well-known names \u7684\u5168\u5c40\u552f\u4e00\u6027\uff0c\u9700\u4f7f\u7528\u7279\u5b9a\u7684\u547d\u540d\u89c4\u8303\u53ca\u683c\u5f0f\u3002  AllJoyn \u7684 well-known name \u4f7f\u7528\u7ffb\u8f6c\u7684\u57df\u540d\u4f5c\u4e3a\u6807\u51c6\u683c\u5f0f\u3002\u5728\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u4e0a\u7684\u7ed9\u5b9a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u7528\u591a\u4e2a\u5b9e\u4f8b\uff0c\u4f8b\u5982\uff0c\u5728\u90bb\u57df\u7f51\u4e2d\uff08\u4e00\u4e2a\u5728\u53a8\u623f\uff0c \u53e6\u4e00\u4e2a\u5728\u5730\u4e0b\u5ba4\uff09\uff0c\u7531\u540c\u4e00\u4e2a\u4f9b\u8d27\u5546\u63d0\u4f9b\u7684\u4e24\u4e2a\u4e0d\u540c\u51b0\u7bb1\u4e0a\u9762\u8fd0\u884c\u7684\u76f8\u540c\u7684\u51b0\u7bb1\u5e94\u7528\u7a0b\u5e8f\u3002\u4e3a\u4e86\u5206\u8fa8\u5728 AllJoyn \u603b\u7ebf\u4e0a\u4e00\u4e2a\u7ed9\u5b9a\u5e94\u7528\u7a0b\u5e8f\u7684\u591a\u4e2a\u5b9e\u4f8b\uff0c\u9700\u8981\u7ed9\nwell-known name \u52a0\u4e0a\u58f0\u660e\u5e94\u7528\u7a0b\u5e8f\u7684\u6807\u7b7e\u4f5c\u540e\u7f00\uff0c\u4f8b\u5982\uff0c\u533a\u522b\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u7684 GUID.  AllJoyn \u7684 well-known name \u9075\u5b88 D-Bus \u89c4\u8303\u4e2d\u7684\u547d\u540d\u539f\u5219\uff0c\u5176\u683c\u5f0f\u5982\u4e0b\u6240\u793a\uff1a  WKN =  reverse domain style name for service/app . app instance GUID   \u4f8b\u5982\uff0c\u4e00\u4e2a\u51b0\u7bb1\u670d\u52a1\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684 well-known name:  com.alljoyn.Refrigerator.12345678  AllJoyn \u5bf9\u8c61  \u4e3a\u4e86\u652f\u6301 AllJoyn \u7684\u670d\u52a1\u529f\u80fd\uff0cAllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u5bf9\u8c61\u3002\u8fd9\u4e9b AllJoyn \u5bf9\u8c61\u88ab\u79f0\u4e3a\u670d\u52a1\u5bf9\u8c61\uff0c\u5e76\u901a\u8fc7 AllJoyn \u603b\u7ebf\u88ab\u63a8\u5e7f\u3002\n\u5176\u4ed6\u7684 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 AllJoyn \u603b\u7ebf\u53d1\u73b0\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u5e76\u5bf9\u4ed6\u4eec\u8fdb\u884c\u8fdc\u7a0b\u8bbf\u95ee\uff0c\u6d88\u8d39\u4ed6\u4eec\u63d0\u4f9b\u7684\u670d\u52a1\u3002  \u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\u6765\u8bbf\u95ee AllJoyn \u7684\u670d\u52a1\u5bf9\u8c61\u3002\u4ee3\u7406\u5bf9\u8c61\u662f\u8fdc\u7aef\u670d\u52a1\u5bf9\u8c61\u7684\u672c\u5730\u4ee3\u8868\uff0c\u901a\u8fc7 AllJoyn \u603b\u7ebf\u88ab\u8bbf\u95ee\u3002  \u4e0b\u56fe\u5c55\u793a\u4e86 AllJoyn \u670d\u52a1\u5bf9\u8c61\u4e0e\u4ee3\u7406\u5bf9\u8c61\u4e4b\u95f4\u7684\u533a\u522b\u3002   Figure:  AllJoyn \u670d\u52a1\u5bf9\u8c61\u548c\u4ee3\u7406\u5bf9\u8c61  \u6bcf\u4e00\u4e2a\u670d\u52a1\u5bf9\u8c61\u5b9e\u4f8b\u90fd\u6709\u5bf9\u5e94\u7684\u53ef\u4ee5\u552f\u4e00\u6307\u8ba4\u51fa\u6b64\u5b9e\u4f8b\u7684\u5bf9\u8c61\u8def\u5f84\u3002\u5728\u4f9b\u5e94\u65b9\u521b\u5efa\u670d\u52a1\u5bf9\u8c61\u65f6\uff0c\u5bf9\u8c61\u8def\u5f84\u5373\u88ab\u5206\u914d\u3002\u4ee3\u7406\u5bf9\u8c61\u9700\u8981\u5bf9\u8c61\u8def\u5f84\u6765\u5efa\u7acb\u4e0e\u8fdc\u7aef\u670d\u52a1\n\u5bf9\u8c61\u7684\u901a\u4fe1\u3002\u5bf9\u8c61\u8def\u5f84\u4ec5\u5728\u7ed9\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u5185\u6709\u6548\uff0c\u56e0\u6b64\u53ea\u6709\u5728\u5b9e\u73b0\u5bf9\u8c61\u7684\u5e94\u7528\u7a0b\u5e8f\u5185\uff0c\u5bf9\u8c61\u8def\u5f84\u624d\u6709\u552f\u4e00\u6027\u3002\u6240\u4ee5\u5bf9\u8c61\u8def\u5f84\u7684\u547d\u540d\u4e0d\u9700\u8981\u9075\u5b88\u7ffb\u8f6c\u57df\u540d\u547d\u540d\u8f6c\u6362\u89c4\u5219\uff0c\u800c\u53ef\u4ee5\u7531\u5e94\u7528\u7a0b\u5e8f\u968f\u610f\u9009\u62e9\u3002  \u5bf9\u8c61\u8def\u5f84\u7684\u547d\u540d\u4ecd\u7136\u9075\u5faa D-Bus \u89c4\u8303\u7684\u547d\u540d\u539f\u5219\u3002\u4e00\u4e2a\u7531\u51b0\u7bb1\u5b9e\u73b0\u7684\u670d\u52a1\u5bf9\u8c61\u7684\u5bf9\u8c61\u8def\u5f84\u53ef\u4ee5\u662f\u5982\u4e0b\u8868\u8fbe\uff1a  /MyApp/Refrigerator  AllJoyn \u63a5\u53e3  \u6bcf\u4e00\u4e2a AllJoyn \u5bf9\u8c61\u7ecf\u8fc7\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u63a5\u53e3\u5411 AllJoyn \u603b\u7ebf\u663e\u793a\u4ed6\u7684\u529f\u80fd\u3002AllJoyn \u63a5\u53e3\u5b9a\u4e49\u4e86\u5b9e\u73b0\u63a5\u53e3\u89c4\u8303\u7684\u5b9e\u4f53\u4e0e\u5176\u4ed6\u5bf9\u6b64\u63a5\u53e3\u63d0\u4f9b\u7684\u670d\u52a1\u6709\u5174\n\u8da3\u7684\u5176\u4ed6\u5b9e\u4f53\u4e4b\u95f4\u7684\u901a\u4fe1\u534f\u8bae\u3002AllJoyn \u63a5\u53e3\u4f5c\u4e3a\u6807\u51c6\u5316\u7684\u5019\u9009\u4eba\uff0c\u4f7f\u652f\u6301 AllJoyn \u7684 IoE\u8bbe\u5907\u95f4\u80fd\u591f\u4e92\u7528\u3002  AllJoyn \u63a5\u53e3\u53ef\u4ee5\u5305\u542b\u4ee5\u4e0b\u4e00\u79cd\u6216\u8005\u51e0\u79cd\u7c7b\u578b\u7684\u6210\u5458\uff1a    \u65b9\u6cd5: \u65b9\u6cd5\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u4f34\u968f\u4e00\u7cfb\u5217\u7684\u8f93\u5165\uff0c\u5e76\u5bf9\u8f93\u5165\u8fdb\u884c\u5904\u7406\uff0c\u901a\u5e38\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a\u53cd\u5e94\u5904\u7406\u7ed3\u679c\u7684\u8f93\u51fa\u3002\u8bf7\u6ce8\u610f\uff0c\u65b9\u6cd5\u5e76\u4e0d\u662f\u5f3a\u5236\u5305\u542b\u8f93\u5165\u548c\uff08\u6216\uff09\u8f93\u51fa\u7684\uff0c\u65b9\u6cd5\u4e5f\u4e0d\u88ab\u5f3a\u5236\u7ed9\u4e88\u56de\u5e94\u3002    \u4fe1\u53f7: \u4fe1\u53f7\u662f\u7531\u670d\u52a1\u751f\u6210\u7684\u4e00\u4e2a\u5f02\u6b65\u63d0\u9192\uff0c\u7528\u6765\u5411\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdc\u7aef peers \u544a\u77e5\u4e8b\u4ef6\u6216\u72b6\u6001\u7684\u53d8\u5316\u3002 \u4fe1\u53f7\u53ef\u4ee5\u7531\u5df2\u5efa\u7acb\u5b8c\u6210\u7684\u5bf9\u7b49\u7f51\u7edc AllJoyn \u8fde\u63a5\uff08 AllJoyn \u4f1a\u8bdd\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u88ab\u5e7f\u64ad\u5230\u5168\u5c40\u6240\u6709\u7684 AllJoyn peers. \u4fe1\u53f7\u6709\u4e09\u79cd\u7c7b\u578b\uff1a    \u6307\u5b9a\u4f1a\u8bdd\u7684\u4fe1\u53f7\uff1a\u8fd9\u4e9b\u4fe1\u53f7\u88ab\u4f20\u8f93\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u8fde\u63a5\u5230\u90bb\u57df\u7f51\u4e2d\u7ed9\u5b9a\u7684 AllJoyn \u4f1a\u8bdd\u7684 peers. \u5982\u679c\u76ee\u7684\u5730\u5df2\u5199\u660e\uff0c\u4fe1\u53f7\u5c06\u53ea\u4f1a\u88ab\u4f20\u8f93\u5230\u90a3\u4e2a\u901a\u8fc7 AllJoyn \u4f1a\u8bdd\u8fde\u63a5\u7684\u76ee\u7684\u5730\u8282\u70b9\u3002\u5982\u679c\u6ca1\u6709\u58f0\u660e\u76ee\u7684\u5730\uff0c\u4fe1\u53f7\u4f1a\u88ab\u4f20\u8f93\u5230\u9664\u751f\u6210\u8be5\u4fe1\u53f7\u7684\u8282\u70b9\u4e4b\u5916\u7684\u901a\u8fc7\u7ed9\u5b9a\u4f1a\u8bdd\u8fde\u63a5\u7684\u6240\u6709\u8282\u70b9\u3002\u5982\u679c\u4f1a\u8bdd\u662f\u591a\u7aef\u7684\uff0c\u8fd9\u79cd\u4fe1\u53f7\u5219\u4f1a\u901a\u8fc7\u591a\u64ad\u4f20\u9001\u5230\u5176\u4ed6\u6240\u6709\u7684\u53c2\u4e0e\u8005\u3002    \u4f1a\u8bdd\u5e7f\u64ad\u4fe1\u53f7\uff1a\u8fd9\u4e9b\u4fe1\u53f7\u88ab\u9001\u5f80\u6240\u6709\u901a\u8fc7\u4efb\u610f AllJoyn \u4f1a\u8bdd\u8fde\u63a5\u7684\u7684\u8282\u70b9    \u975e\u4f1a\u8bdd\u4fe1\u53f7: \u8fd9\u4e9b\u4fe1\u53f7\u88ab\u9001\u5f80\u5728\u90bb\u57df\u7f51\u4e2d\u6240\u6709\u5bf9\u63a5\u6536\u975e\u4f1a\u8bdd\u4fe1\u53f7\u8868\u793a\u51fa\u5174\u8da3\u7684\u8282\u70b9\u3002\u5728\u63a5\u6536\u8fd9\u79cd\u4fe1\u53f7\u65f6\uff0c\u8282\u70b9\u4e0d\u9700\u8981\u901a\u8fc7 AllJoyn \u4f1a\u8bdd\u5efa\u7acb\u8fde\u63a5\u3002\u975e\u4f1a\u8bdd\n  \u4fe1\u53f7\u672c\u8d28\u4e0a\u5c31\u662f\u72ec\u7acb\u4e8e\u4f1a\u8bdd\u8fde\u63a5\u7684\u5e7f\u64ad\u4fe1\u53f7\u3002    \u5c5e\u6027: \u5c5e\u6027\u662f\u4e00\u4e2a\u6709\u503c\u7684\u53d8\u91cf\uff0c\u4ed6\u53ef\u4ee5\u662f\u53ea\u8bfb\u7684\uff0c\u53ef\u8bfb\u5199\u7684\uff0c\u6216\u8005\u53ea\u5199\u7684\u3002\n\u6bcf\u4e00\u4e2a AllJoyn \u63a5\u53e3\u90fd\u6709\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684\u63a5\u53e3\u540d\uff0c\u7528\u4e8e\u8bc6\u522b\u7531\u6b64\u63a5\u53e3\u63d0\u4f9b\u7684\u65b9\u6cd5\uff0c\u4fe1\u53f7\u4ee5\u53ca\u5c5e\u6027\u7fa4\u3002AllJoyn \u63a5\u53e3\u540d\u7684\u5b9a\u4e49\u662f\u63a5\u53e3\u6807\u51c6\u5316\u7684\u4e00\u90e8\u5206\u3002\u4e0e well-known name \u7c7b\u4f3c\uff0cAllJoyn \u63a5\u53e3\u540d\u4e5f\u9075\u5faa\u57df\u540d\u53cd\u8f6c\u89c4\u5219\u4ee5\u53ca D-Bus \u89c4\u8303\u7684\u547d\u540d\u539f\u5219\u3002    \u4f8b\u5982\uff0c\u4e00\u53f0\u51b0\u7bb1\u53ef\u80fd\u652f\u6301\u4e00\u4e0b\u6807\u51c6\u7684 AllJoyn \u51b0\u7bb1\u63a5\u53e3\uff1a  org.alljoyn.Refrigerator  AllJoyn \u6838\u5fc3\u5e93  AllJoyn \u6838\u5fc3\u5e93\u5c06 AllJoyn \u603b\u7ebf\u529f\u80fd\u5c55\u793a\u7ed9 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002 \u6bcf\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u5173\u8054\u5230\u4e00\u4e2a\u5355\u4e00\u7684 AllJoyn \u6838\u5fc3\u5e93\u5b9e\u4f8b\u4e0a\uff0c\u4ee5\u4fbf\u4e0e AllJoyn \u603b\u7ebf\u5efa\u7acb\u8fde\n\u63a5\u3002AllJoyn \u6838\u5fc3\u5e93\u5728\u5e94\u7528\u7a0b\u5e8f\u4e0e\u8fdc\u7aef AllJoyn \u5e94\u7528\u7a0b\u5e8f\u70b9\u5bf9\u70b9\u901a\u4fe1\u65f6\u626e\u6f14\u4e86\u7f51\u5173\u7684\u89d2\u8272\u3002\u4ed6\u53ef\u88ab\u7528\u4e8e\u8fde\u63a5\u5230\u603b\u7ebf\uff0c\u63a8\u5e7f\u5e76\u53d1\u73b0\u670d\u52a1\uff0c\u5efa\u7acb\u5230\u8fdc\u7aef peer \u7684\u8fde\n\u63a5\uff0c\u6d88\u8d39\u670d\u52a1\uff0c\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u7684 AllJoyn \u529f\u80fd\u3002\u5e94\u7528\u7a0b\u5e8f\u5411 AllJoyn \u6838\u5fc3\u5e93\u6ce8\u518c\u5b83\u7684\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5c06\u5176\u63a8\u5e7f\u5230 AllJoyn \u603b\u7ebf\u3002  \u4e0b\u56fe\u5c55\u793a\u4e86\u4e09\u4e2a\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 AllJoyn \u6838\u5fc3\u5e93\u8fde\u63a5\u5230\u4e00\u4e2a\u7ed9\u5b9a AllJoyn \u603b\u7ebf\u7684\u8fc7\u7a0b\uff1a   Figure:  AllJoyn \u6838\u5fc3\u5e93  AllJoyn \u6838\u5fc3\u5e93\u53ef\u4ee5\u662f\u4e3a\u6807\u51c6 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u6807\u51c6\u6838\u5fc3\u5e93\uff08SCL\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e3a\u7cbe\u7b80 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u7cbe\u7b80\u6838\u5fc3\u5e93\uff08TCL\uff09\u3002\u5728\u672c\u6587\u6863\u4e2d\uff0c\u5927\n\u591a\u6570\u7684\u7cfb\u7edf\u8bbe\u8ba1\u90fd\u662f\u53c8\u6807\u51c6\u6838\u5fc3\u5e93\u63cf\u8ff0\u7684\u3002\u66f4\u591a\u5173\u4e8e\u7cbe\u7b80\u6838\u5fc3\u5e93\u7684\u8bbe\u8ba1\u7ec6\u8282\uff0c\u8bf7\u67e5\u9605  Thin Apps .  \u201cAbout\u201d \u529f\u80fd  \u201cAbout\u201d \u529f\u80fd\u5728 AllJoyn \u6846\u67b6\u4e2d\u4f5c\u4e3a\u6838\u5fc3\u5e93\u7684\u4e00\u90e8\u5206\u88ab\u652f\u6301\u3002\u201cAbout\u201d\u529f\u80fd\u4f7f\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5c55\u793a\u5173\u4e8e\u81ea\u8eab\u7684\u5173\u952e\u4fe1\u606f\uff0c\u5305\u62ec\u5e94\u7528\u7a0b\u5e8f\u540d\uff0c\u5e94\u7528\u7a0b\u5e8f\u8bc6\u522b\u7b26\uff0c\u8bbe\u5907\u540d\uff0c\u8bbe\u5907\u8bc6\u522b\u7b26\uff0c\u88ab\u652f\u6301\u7684 AllJoyn \u63a5\u53e3\u5217\u8868\u4ee5\u53ca\u5176\u4ed6\u4fe1\u606f\u3002\u6b64\u529f\u80fd\u7531\u88ab org.alljoyn.About object \u5bf9\u8c61\u5b9e\u73b0\u7684 org.alljoyn.About \u63a5\u53e3\u652f\u6301\u3002  \u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u4e00\u4e2a\u7531\u201c About \u201d\u63a5\u53e3\u5b9a\u4e49\u7684 Announce \u4fe1\u53f7\u6765\u5c55\u793a\u81ea\u5df1\u7684\u5173\u952e\u4fe1\u606f\u3002\u6b64\u4fe1\u53f7\u5728\u90bb\u57df AllJoyn \u7f51\u7edc\u4e2d\u88ab\u5f53\u4f5c\u975e\u4f1a\u8bdd\u4fe1\u53f7\u53d1\u9001\u3002\u4efb\u4f55\u5bf9\u53d1\u73b0\u670d\u52a1\u6709\n\u5174\u8da3\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f7f\u7528 Announce \u4fe1\u53f7\u7528\u4e8e\u53d1\u73b0\u3002\u201cAbout\u201d \u529f\u80fd\u540c\u65f6\u4e5f\u63d0\u4f9b\u901a\u8fc7\u76f4\u63a5\u8c03\u7528\u65b9\u6cd5\u6765\u83b7\u53d6\u5e94\u7528\u7a0b\u5e8f\u4fe1\u606f\u7684\u673a\u5236\u3002\u5173\u4e8e \u201cAbout\u201d \u529f\u80fd\u7684\u6280\u672f\u7ec6\u8282\n\u8bf7\u53c2\u9605[About HLD]  AllJoyn \u7aef\u70b9  AllJoyn \u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528 D-Bus \u683c\u5f0f\u7684\u6d88\u606f\u6765\u4ea4\u6362\u4fe1\u606f\u3002\u8fd9\u4e9b\u6d88\u606f\u4f1a\u6307\u660e\u539f\u5730\u5740\u548c\u76ee\u7684\u5730\u5f53\u4f5c\u7aef\u70b9\u3002\u4e00\u4e2a AllJoyn \u7aef\u70b9\u4ee3\u8868\u7740\u4e00\u6761 AllJoyn \u901a\u4fe1\u94fe\u8def\u7684\u4e00\u8fb9\u3002\n\u7aef\u70b9\u88ab\u7528\u4e8e\u5c06\u6d88\u606f\u8def\u7531\u5230\u6b63\u786e\u7684\u76ee\u7684\u5730\u3002  \u7aef\u70b9\u7531\u6838\u5fc3\u5e93\u4ee5\u53ca AllJoyn \u8def\u7531\u7ef4\u62a4\uff0c\u4ee5\u5b9e\u73b0\u6d88\u606f\u8def\u7531\u3002\u4ee5\u4e0b\u7aef\u70b9\u7531\u6838\u5fc3\u5e93\u7ef4\u62a4\uff1a    Local Endpoint : \u5728\u6838\u5fc3\u5e93\u5185\u90e8\u7684\u672c\u5730\u7aef\u70b9\u4ee3\u8868\u7740\u5230\u9644\u5c5e\u5e94\u7528\u7a0b\u5e8f\u7684\u8fde\u63a5\u3002    Remote Endpoint : \u5728\u6838\u5fc3\u5e93\u5185\u7684\u8fdc\u7a0b\u7aef\u70b9\u4ee3\u8868\u7740\u5230 AllJoyn \u8def\u7531\u7684\u8fde\u63a5\u3002\u4ec5\u5f53 AllJoyn \u8def\u7531\u4e3a\u975e\u6346\u7ed1\u5f0f\u65f6\u6b64\u7aef\u70b9\u624d\u6709\u6548\u3002    \u7531 AllJoyn \u8def\u7531\u7ef4\u62a4\u7684\u7aef\u70b9\u88ab\u5206\u914d\u7ed9\u4ed6\u7684\u552f\u4e00\u6807\u8bc6\u6240\u552f\u4e00\u786e\u5b9a\u3002\u4ee5\u4e0b\u7aef\u70b9\u88ab AllJoyn \u8def\u7531\u7ef4\u62a4\uff1a    Local Endpoint : \u672c\u5730\u7aef\u70b9\u662f\u5728 AllJoyn \u8def\u7531\u5185\u90e8\u7684\u7aef\u70b9\u3002\u4ed6\u5b9a\u4e49\u4e86\u5230\u8def\u7531\u672c\u8eab\u7684\u8fde\u63a5\uff0c\u88ab\u7528\u4e8e\u5728 AllJoyn \u8def\u7531\u95f4\u4ea4\u6362 AllJoyn \u63a7\u5236\u4fe1\u606f\u3002\u7b2c\u4e00\u4e2a\u7aef\n\u70b9\u5e38\u5e38\u88ab\u5206\u914d\": .1\"\u8fd9\u4e2a\u6807\u8bc6\u7b26    Remote Endpoint : \u8fdc\u7a0b\u7aef\u70b9\u5b9a\u4e49\u4e86\u5728\u5e94\u7528\u7a0b\u5e8f\u4e0e AllJoyn \u8def\u7531\u5668\u4e4b\u95f4\u7684\u8fde\u63a5\u3002\u4ee5\u5e94\u7528\u7a0b\u5e8f\u4e3a\u76ee\u7684\u5730\u7684\u6d88\u606f\u4f1a\u88ab\u8def\u7531\u5230\u5e94\u7528\u7a0b\u5e8f\u7aef\u70b9\u3002    Bus-to-Bus Endpoint : \u603b\u7ebf\u5230\u603b\u7ebf (B2B) \u7aef\u70b9\u662f\u5b9a\u4e49\u4e86\u4e24\u4e2a AllJoyn \u8def\u7531\u4e4b\u95f4\u8fde\u63a5\u7684\u4e00\u7c7b\u7279\u6b8a\u7684\u8fdc\u7a0b\u7aef\u70b9\u3002\u5728 AllJoyn \u8def\u7531\u5668\u4ea4\u6362\u6d88\u606f\u65f6\uff0c\u6b64\u7aef\u70b9\n\u88ab\u5f53\u4f5c\u8def\u7531\u6d88\u606f\u7684\u4e0b\u4e00\u8df3\u3002     AllJoyn \u8def\u7531\u4f1a\u4fdd\u7559\u4e00\u5f20\u8def\u7531\u8868\uff0c\u4ee5\u4fbf\u5c06\u6d88\u606f\u8def\u7531\u5230\u4e0d\u540c\u7c7b\u578b\u7684\u7aef\u70b9\u3002\u4e24\u4e2a AllJoyn \u8def\u7531\u4e4b\u95f4\u7684\u63a7\u5236\u6d88\u606f\uff08\u5982 AttachSession \u6d88\u606f\uff09\u4f1a\u88ab\u8def\u7531\u5230\u672c\u5730\u7aef\u70b9\u3002\n\u4e24\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684 AllJoyn \u6d88\u606f\u4f1a\u88ab\u8def\u7531\u5230\u5e94\u7528\u7a0b\u5e8f\u7aef\u70b9\u3002\u8fd9\u4e9b\u6d88\u606f\u5c06\u4f1a\u628a\u5e94\u7528\u7a0b\u5e8f\u7aef\u70b9\u5f53\u4f5c\u539f\u5730\u5740\u548c\u76ee\u7684\u5730\u3002B2B \u7aef\u70b9\u5728\u4e24 AllJoyn \u8def\u7531\u4ea4\u6362\u6d88\u606f\uff08app-\ndirected \u6216\u8005\u63a7\u5236\u6d88\u606f\uff09\u65f6\u4f1a\u4f5c\u4e3a\u4e0b\u4e00\u8df3\u3002  \u4e0b\u56fe\u5c55\u793a\u4e86 AllJoyn \u7cfb\u7edf\u4e2d\u4e0d\u540c\u7c7b\u578b\u7684\u7aef\u70b9\u3002  The following figure shows different endpoints in the AllJoyn system.   Figure:  AllJoyn \u7aef\u70b9  \u81ea\u7701\u6027  AllJoyn \u7cfb\u7edf\u652f\u6301\u7531 D-Bus \u5b9a\u4e49\u7684\u81ea\u7701\u529f\u80fd\uff0c\u4f7f AllJoyn \u5bf9\u8c61\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u81ea\u7701\uff0c\u8fd4\u56de\u63cf\u8ff0\u8be5\u5bf9\u8c61\u7684\u81ea\u7701 XML.\u8be5\u5bf9\u8c61\u5e94\u5b9e\u73b0 org.freedesktop.DBus.Introspectable \u63a5\u53e3\u3002\u6b64\u63a5\u53e3\u4e2d\u542b\u6709\u53ef\u4ee5\u53d6\u56de\u8be5\u5bf9\u8c61\u81ea\u7701 XML \u7684\u65b9\u6cd5\u3002  AllJoyn \u5b9e\u4f53\u5173\u7cfb  \u77e5\u6653\u9ad8\u5c42 AllJoyn \u5b9e\u4f53\u4e4b\u95f4\u7684\u8054\u7cfb\u662f\u5f88\u91cd\u8981\uff0c\u5f88\u6709\u5e2e\u52a9\u7684\u3002  \u4e0b\u56fe\u6355\u83b7\u4e86\u4f17\u591a\u9ad8\u5c42 AllJoyn \u5b9e\u4f53\uff0c\u5305\u62ec\u8bbe\u5907\uff0c\u5e94\u7528\u7a0b\u5e8f\uff0c\u5bf9\u8c61\uff0c\u63a5\u53e3\u4ee5\u53ca\u63a5\u53e3\u6210\u5458\u4e4b\u95f4\u7684\u5173\u7cfb\u3002   Figure:  AllJoyn \u5b9e\u4f53\u5173\u7cfb  \u652f\u6301 AllJoyn \u7684\u8bbe\u5907\u53ef\u4ee5\u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002\u6bcf\u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2a\u5b9e\u73b0\u6240\u9700\u5e94\u7528\u7a0b\u5e8f\u529f\u80fd\u7684 AllJoyn \u5bf9\u8c61\u3002\u5e94\u7528\u7a0b\u5e8f\n\u529f\u80fd\u53ef\u4ee5\u5305\u62ec\u63d0\u4f9b\u6216\u6d88\u8d39 AllJoyn \u670d\u52a1\uff0c\u6216\u5373\u63d0\u4f9b\u4e5f\u6d88\u8d39\u3002\u76f8\u5e94\u7684\uff0c\u88ab AllJoyn \u5e94\u7528\u7a0b\u5e8f\u6240\u652f\u6301\u7684\u5bf9\u8c61\u53ef\u4ee5\u662f\u670d\u52a1\u5bf9\u8c61\uff0c\u4ee3\u7406\u5bf9\u8c61\uff0c\u6216\u4e8c\u8005\u7684\u7ed3\u5408\u4f53\u3002\u670d\u52a1\n\u5bf9\u8c61\u5c06\u81ea\u5df1\u7684\u529f\u80fd\u901a\u8fc7\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u63a5\u53e3\u5c55\u793a\u3002\u6bcf\u4e00\u4e2a AllJoyn \u63a5\u53e3\u53ef\u4ee5\u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2a\u65b9\u6cd5\uff0c\u4fe1\u53f7\uff0c\u4ee5\u53ca\u5c5e\u6027\u3002  AllJoyn \u670d\u52a1\u7531\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u670d\u52a1\u5bf9\u8c61\u5b9e\u73b0\u3002AllJoyn \u670d\u52a1\u5bf9\u8c61\u53ef\u4ee5\u4e3a\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u670d\u52a1\u5b9e\u73b0\u529f\u80fd\u3002\u56e0\u6b64\uff0cAllJoyn \u670d\u52a1\u4e0e AllJoyn \u670d\u52a1\u5bf9\u8c61\n\u6709\u5982\u4e0b\u56fe\u6240\u793a\u7684 n:n \u5173\u7cfb\uff1a   Figure:  AllJoyn \u670d\u52a1\u4e0e AllJoyn \u670d\u52a1\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb  AllJoyn \u670d\u52a1  \u4e00\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u6846\u67b6\u4ee5\u53ca\u4e00\u4e9b\u5e94\u7528\u5c42\u7684\u670d\u52a1\u3002  AllJoyn \u670d\u52a1\u6846\u67b6  AllJoyn \u670d\u52a1\u6846\u67b6\u4e3a\u9ad8\u5c42\u7684\u5e94\u7528\u7a0b\u5e8f\u670d\u52a1\u63d0\u4f9b\u4e00\u4e9b\u4f5c\u4e3a enablers \u88ab\u5f00\u53d1\u7684\uff0c\u6838\u5fc3\u7684\uff0c\u57fa\u7840\u7684\u529f\u80fd\u3002\u670d\u52a1\u6846\u67b6\u4f4d\u4e8e AllJoyn \u8def\u7531\u7684\u4e0a\u9762\uff0c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u63d0\n\u4f9b\u53ef\u4ee5\u8c03\u7528\u5176\u529f\u80fd\u7684 APIs. \u6700\u521d\u7684 AllJoyn \u670d\u52a1\u6846\u67b6\u5305\u62ec Configuration \u670d\u52a1\u6846\u67b6\uff0cOnboarding \u670d\u52a1\u6846\u67b6\uff0cNotification \u670d\u52a1\u6846\u67b6\u4ee5\u53ca Control Panel \u670d\u52a1\u6846\u67b6\u3002\n.  NOTE:  \u670d\u52a1\u6846\u67b6\u4e5f\u4f1a\u88ab\u79f0\u4f5c\u57fa\u7840\u670d\u52a1\u3002  \u4f8b\u5982: \u4e00\u4e2a\u51b0\u7bb1\u53ef\u4ee5\u4f7f\u7528 OnBoarding \u670d\u52a1\u6846\u67b6\u6765\u5c06\u51b0\u7bb1\u767b\u5165\u5230\u5bb6\u5ead\u7f51\u7edc\u4e2d\uff0c\u5e76\u901a\u8fc7 Notification \u670d\u52a1\u6846\u67b6\u5bf9\u7528\u6237\u8bbe\u5907\u53d1\u9001\u63d0\u9192\u3002  \u5e94\u7528\u5c42\u670d\u52a1  \u5e94\u7528\u5c42\u670d\u52a1\u662f\u7531 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7684\u9488\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u670d\u52a1\uff0c\u7528\u6765\u5b8c\u6210\u6240\u671f\u671b\u7684\u5e94\u7528\u5c42\u529f\u80fd\u3002\u8fd9\u4e9b\u5e94\u7528\u5c42\u670d\u52a1\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u670d\u52a1\u6846\u67b6\u6765\u5b9e\u73b0\u4ed6\u4eec\u7684\u529f\u80fd\u3002  \u4f8b\u5982\uff1a\u4e00\u4e2a\u51b0\u7bb1\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u8c03\u8282\u51b7\u85cf\u53ca\u51b7\u51bb\u6e29\u5ea6\u7684\u5e94\u7528\u5c42\u670d\u52a1\u3002\u6b64\u670d\u52a1\u53ef\u4ee5\u5728\u6e29\u5ea6\u8bbe\u7f6e\u8d85\u51fa\u7ed9\u5b9a\u8303\u56f4\u7684\u65f6\u5019\u4f7f\u7528 Notification \u670d\u52a1\u6846\u67b6\u5411\u7528\u6237\u53d1\n\u677e\u901a\u77e5\u3002  AllJoyn \u4f20\u8f93  AllJoyn \u4f20\u8f93\u662f\u4e00\u4e2a\u865a\u62df\u6982\u5ff5\uff0c\u4ed6\u5b9e\u73b0\u4e86\u901a\u8fc7 AllJoyn \u8def\u7531\uff0c\u5728 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u4e2d\u5efa\u7acb\u901a\u4fe1\u4ee5\u53ca\u4f20\u9001\u6d88\u606f\u7684\u529f\u80fd\u3002AllJoyn \u4f20\u8f93\u903b\u8f91\u56e0\u6b64\u4f1a\u652f\u6301\u5728\u591a\u4e2a\u5e95\n\u5c42\u7269\u7406\u4f20\u8f93\uff0c\u5305\u62ec TCP \u4f20\u8f93\uff0cUDP \u4f20\u8f93\u4ee5\u53ca\u672c\u5730\u4f20\u8f93\uff08\u4f8b\u5982 UNIX \u57df\u5957\u63a5\u5b57 \uff09\u4e4b\u95f4\u7684\u6d88\u606f\u4f20\u9001\u3002  AllJoyn \u7684\u4f20\u8f93\u903b\u8f91\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u6240\u6307\u5b9a\u7684\u4f20\u8f93\u5217\u8868\u6295\u9012\u5e7f\u64ad\u4e0e\u53d1\u73b0\u6d88\u606f\u3002\u7c7b\u4f3c\u7684\uff0cAllJoyn \u4f20\u8f93\u540c\u6837\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u4f20\u8f93\u9009\u62e9\u6765\u5efa\u7acb\u4f1a\u8bdd\uff0c\u4ee5\u53ca\u591a\u5e95\u5c42\u5e73\u53f0\n\u4f20\u8f93\u7684\u6d88\u606f\u8def\u7531\u3002\u7531 AllJoyn \u4f20\u8f93\u6240\u652f\u6301\u7684\u5e95\u5c42\u4f20\u8f93\u5728 TransportMask \u4e2d\u5b9a\u4e49\uff0c\u5177\u4f53\u8bf7\u53c2\u89c1  AllJoyn Transport in Networking  Model .  \u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5e76\u6ca1\u6709\u6307\u5b9a\u4efb\u4f55\u7684\u4f20\u8f93\u65b9\u5f0f\uff0c AllJoyn \u4f20\u8f93\u503c\u9ed8\u8ba4\u4e3a TRANSPORT_ANY.  \u5177\u4f53\u4fe1\u606f\u53c2\u89c1  AllJoyn Transport .  \u63a8\u5e7f\u4e0e\u53d1\u73b0  AllJoyn \u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u53ef\u4ee5\u63a8\u5e7f\u53d1\u73b0 AllJoyn \u670d\u52a1\u7684\u65b9\u6cd5\u3002AllJoyn \u53d1\u73b0\u534f\u8bae\u8d1f\u8d23\u7ba1\u7406\u8fdb\u5165\u5e76\u79bb\u5f00 AllJoyn \u90bb\u57df\u7f51\u7edc\u670d\u52a1\u7684\u52a8\u529b\u6027\uff0c\u5e76\u5bf9 AllJoyn \u5e94\u7528\n\u7a0b\u5e8f\u53d1\u51fa\u54cd\u5e94\u7684\u63d0\u9192\u3002AllJoyn \u6846\u67b6\u4f7f\u7528\u4e86\u6307\u5b9a\u5e95\u5c42\u4f20\u8f93\u673a\u5236\u4ee5\u4f18\u5316\u53d1\u73b0\u670d\u52a1\u7684\u8fdb\u7a0b\u3002AllJoyn \u6846\u67b6\u4f7f\u7528\u4e86 IP \u591a\u64ad\uff0c\u901a\u8fc7 Wi-Fi \u5b9e\u73b0\u4e86\u670d\u52a1\u63a8\u5e7f\u4e0e\u53d1\u73b0\u3002\u5173\n\u4e8e\u5e95\u5c42\u673a\u5236\u7684\u7ec6\u8282\u5bf9 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u9690\u85cf\u3002  \u4ee5\u4e0b\u7ae0\u8282\u53d9\u8ff0\u4e86\u5e94\u7528\u7a0b\u5e8f\u5728 AllJoyn \u6846\u67b6\u4e0a\u4f7f\u7528\u63a8\u5e7f\u53ca\u53d1\u73b0\u670d\u52a1\u7684\u5177\u4f53\u65b9\u6cd5\u3002  \u57fa\u4e8e\u540d\u5b57\u7684\u53d1\u73b0  \u5728\u57fa\u4e8e\u540d\u5b57\u7684\u53d1\u73b0\u4e2d\uff0c\u63a8\u5e7f\u53ca\u53d1\u73b0\u901a\u5e38\u4f1a\u4f7f\u7528 well-known name. \u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u7684\u81ea\u4e3b\u9009\u62e9\uff08\u4f8b\u5982\uff0cwell-known name \u6ca1\u6709\u88ab\u5206\u914d\uff09\uff0c\u552f\u4e00\u6807 \u8bc6\u7b26\u4e5f\u53ef\u4ee5\u88ab\u7528\u4f5c\u53d1\u73b0\u670d\u52a1\u3002  \u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u5c06\u4ed6\u6240\u652f\u6301\u7684 wel-known names \u901a\u8fc7\u90bb\u57df AllJoyn \u7f51\u7edc\u5bf9\u7279\u5b9a\u5e95\u5c42\u4f20\u8f93\u673a\u5236\u7684\u5f71\u54cd\uff08\u901a\u8fc7 Wi-Fi \u7684 IP \u591a\u64ad\uff09\u8fdb\u884c\u63a8\u5e7f\u3002\u8fd9\u4e9b well-known names \u4f5c\u4e3a\u7531 AllJoyn \u8def\u7531\u751f\u6210\u7684\u63a8\u5e7f\u6d88\u606f\u7684\u4e00\u90e8\u5206\u88ab\u63a8\u5e7f\u51fa\u53bb\u3002  \u5bf9\u7ed9\u5b9a well-known name \u6709\u5174\u8da3\u7684\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8bf7\u6c42 AllJoyn \u8def\u7531\u5f00\u59cb\u5bfb\u627e\u53d1\u73b0\u8be5\u670d\u52a1\u540d\u3002\u5f53\u8be5\u540d\u5b57\u88ab\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u5e7f\u64ad\u5165\u90bb\u57df\u7f51\uff0cAllJoyn \u8def\u7531\n\u4f1a\u53d7\u5230\u5bf9\u5e94\u7684\u63a8\u5e7f\u3002AllJoyn \u8def\u7531\u4e8e\u662f\u5411\u4e4b\u524d\u6307\u5b9a well-known name \u7684\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u4e00\u4e2a\u670d\u52a1\u53d1\u73b0\u901a\u77e5\u3002  \u63a8\u5e7f\u4fe1\u606f\u643a\u5e26\u7740\u8fde\u901a\u6027\u4fe1\u606f\u8fd4\u56de\u5230\u63d0\u4f9b\u65b9\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u53d1\u73b0\u8fc7\u7a0b\u4e4b\u540e\uff0c\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5411 AllJoyn \u8def\u7531\u7533\u8bf7\u4e0e\u88ab\u53d1\u73b0\u7684\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u5efa\u7acb\u8fde\u63a5\uff0c\u4ee5\u4fbf  \u57fa\u4e8e\u901a\u544a\u7684\u53d1\u73b0  \u6240\u6709\u7684 AllJoyn \u670d\u52a1\u6700\u7ec8\u90fd\u662f\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u63a5\u53e3\u5b9e\u73b0\u7684\uff0c\u57fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u53d1\u73b0\u670d\u52a1\u53ef\u4ee5\u7531\u53d1\u73b0\u76f8\u5173\u7684 AllJoyn \u63a5\u53e3\u6765\u5b8c\u6210\u3002\u5728\u57fa\u4e8e\u901a\u544a\u7684\u53d1\u73b0\u4e2d\uff0c\u63a8\u5e7f\u4e0e\u53d1\n\u73b0\u8fc7\u7a0b\u90fd\u4f7f\u7528\u63a5\u53e3\u540d\u3002\u8be5\u673a\u5236\u6253\u7b97\u88ab\u7528\u4e8e\u8bbe\u5907\u5bf9\u81ea\u5df1\u80fd\u529b\u7684\u63a8\u5e7f\u3002  \u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u516c\u544a\u6d88\u606f\uff0c\u6b64\u6d88\u606f\u4f1a\u5217\u51fa\u88ab\u8be5\u5e94\u7528\u6240\u652f\u6301\u7684 AllJoyn \u63a5\u53e3\u3002\u670d\u52a1\u901a\u544a\u7531\u5e7f\u64ad\u4fe1\u53f7\u7684\u65b9\u5f0f\u88ab\u53d1\u51fa\uff0c\u4f7f\u7528\u975e\u4f1a\u8bdd\u4fe1\u53f7\u673a\u5236\uff08\u53c2\u89c1  Sessionless Signal \uff09\u3002   \u5bf9\u4f7f\u7528 AllJoyn \u670d\u52a1\u6709\u5174\u8da3\u7684\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u5728\u63a5\u6536\u6765\u81ea AllJoyn \u8def\u7531\u7684\u901a\u544a\u6d88\u606f\u65f6\u58f0\u660e\u4ed6\u7684\u5174\u8da3\u6765\u67e5\u627e\u8fd9\u4e9b\u88ab\u5e7f\u64ad\u7684\u670d\u52a1\u3002\u5f53\u6d88\u8d39\u65b9\u7684\u8bbe\u5907\u5904\u4e8e\n\u4f9b\u5e94\u65b9\u8bbe\u5907\u7684\u90bb\u57df\u5185\u65f6\uff0c\u4ed6\u4f1a\u63a5\u6536\u5305\u542b\u6709\u53d7\u4f9b\u5e94\u65b9\u652f\u6301\u7684 AllJoyn \u63a5\u53e3\u4fe1\u606f\u7684\u670d\u52a1\u516c\u544a\u3002  AllJoyn \u8def\u7531\u4fdd\u6709\u8fde\u63a5\u4fe1\u606f\uff0c\u4ee5\u4fbf\u8fde\u63a5\u56de\u53d1\u9001\u670d\u52a1\u901a\u544a\u4fe1\u606f\u7684\u4f9b\u5e94\u65b9\u3002\u5728\u53d1\u73b0\u8fc7\u7a0b\u540e\uff0c\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5411 AllJoyn \u8def\u7531\u7533\u8bf7\u5efa\u7acb\u652f\u6301\u5230\u6240\u9700\u63a5\u53e3\u7684\u4f9b\u5e94\u65b9\n\u5e94\u7528\u7a0b\u5e8f\u7684\u8fde\u63a5\uff0c\u4ee5\u4fbf\u4f7f\u7528\u670d\u52a1\u3002AllJoyn \u8def\u7531\u4f7f\u7528\u8fde\u63a5\u6027\u4fe1\u606f\u4ee5\u4fbf\u8fde\u63a5\u56de\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u3002  14.06\u7248\u672c\u4e2d\u589e\u5f3a\u7684\u53d1\u73b0\u673a\u5236  \u572814.06\u7248\u672c\u4e2d\uff0cAllJoyn \u53d1\u73b0\u673a\u5236\u88ab\u589e\u5f3a\uff0c\u4ee5\u4fbf\u4f7f\u5bf9\u652f\u6301\u4e00\u7cfb\u5217\u63a5\u53e3\u7684\u8bbe\u5907/\u5e94\u7528\u7a0b\u5e8f\u7684\u53d1\u73b0\u66f4\u52a0\u6709\u6548\u7387\u3002\u6b64\u589e\u5f3a\u7684\u53d1\u73b0\u673a\u5236\u88ab\u79f0\u4e3a Next-Generation Name \nService (NGNS). NGNS \u652f\u6301\u57fa\u4e8e DNS \u591a\u64ad \uff08mDNS\uff09\u7684\u53d1\u73b0\u534f\u8bae\uff0c\u652f\u6301\u5728\u4e00\u4e2a over-the-wire \u53d1\u73b0\u6d88\u606f\u4e2d\u6307\u5b9a AllJoyn \u63a5\u53e3\u3002\u6b64\u5916\uff0c\u57fa\u4e8e mDNS \u7684\u534f\u8bae\u8fd8\u53ef\n\u63d0\u4f9b\u901a\u8fc7\u5355\u64ad\u7684\u53d1\u73b0\u54cd\u5e94\u529f\u80fd\uff0c\u4ee5\u63d0\u5347\u53d1\u73b0\u534f\u8bae\u7684\u6027\u80fd\uff0c\u5e76\u5c06\u5728 AllJoyn \u53d1\u73b0\u8fc7\u7a0b\u4e2d\u603b\u4f53\u7684\u591a\u64ad\u901a\u4fe1\u6d41\u91cf\u964d\u5230\u6700\u5c0f\u3002  AllJoyn \u8bbe\u5907/\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u5b58\u5728\u68c0\u6d4b\u673a\u5236\u5df2\u7ecf\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u660e\u786e\u7684\u57fa\u4e8e mDNS \u7684 ping() \u6d88\u606f, \u6b64 ping \u6d88\u606f\u901a\u8fc7\u5355\u64ad\u88ab\u53d1\u9001\uff0c\u7528\u4e8e\u63a2\u6d4b\u8fdc\u7a0b\u7aef\u70b9\u662f\u5426\u53ef\u7528\u3002\nping() \u673a\u5236\u7531\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u9a71\u52a8\u3002  AllJoyn \u4f1a\u8bdd  \u4e00\u65e6\u7528\u6237\u53d1\u73b0\u611f\u5174\u8da3\u7684 AllJoyn \u670d\u52a1\uff0c\u4ed6\u5fc5\u987b\u4e0e\u6b64\u670d\u52a1\u5efa\u7acb\u8fde\u63a5\u624d\u80fd\u4f7f\u7528\u8be5\u670d\u52a1\uff08\u5b8c\u5168\u4f9d\u8d56\u4e8e\u975e\u4f1a\u8bdd\u7684\u4fe1\u53f7\u7684 Notification \u670d\u52a1\u9664\u5916\uff09\u3002\u8fde\u63a5\u5230\u670d\u52a1\u5305\u62ec\n\u4e0e\u8be5\u670d\u52a1\u5efa\u7acb\u4e00\u4e2a AllJoyn \u4f1a\u8bdd\u3002\u4f1a\u8bdd\u662f\u4e00\u4e2a\u5efa\u7acb\u5728\u4f7f\u7528\u8005\u548c\u63d0\u4f9b\u8005\u4e4b\u95f4\u7684\u6d41\u91cf\u53d7\u63a7\u7684\u6570\u636e\u8fde\u63a5\uff0c\u5e76\u56e0\u6b64\u4f7f\u5f97\u4f7f\u7528\u8005\u53ef\u4ee5\u4e0e\u670d\u52a1\u5668\u901a\u4fe1\u3002  \u63a8\u5e7f\u670d\u52a1\u7684\u63d0\u4f9b\u65b9\u5e94\u7528\u7a0b\u5e8f\u5c06 AllJoyn \u603b\u7ebf\u4e0e\u4f1a\u8bdd\u7aef\u53e3\u7ed1\u5b9a\uff0c\u5e76\u76d1\u542c\u7528\u6237\u662f\u5426\u8fdb\u5165\u4f1a\u8bdd\u3002\u7ed1\u5b9a\u4e0e\u76d1\u542c\u7684\u52a8\u4f5c\u4f7f\u5f97\u4f9b\u5e94\u65b9\u6210\u4e3a\u4e86\u4f1a\u8bdd\u7684\u4e3b\u673a\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u63d0\u4f9b\u65b9\u548c\u4f7f\u7528\u65b9\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u4f1a\u63d0\u524d\u77e5\u9053\u7aef\u53e3\u53f7\u3002\u5728 announcement-based \u53d1\u73b0\u4e2d\uff0c\u7aef\u53e3\u53f7\u662f\u7531\u901a\u544a\u6d88\u606f( Announcement message )\u88ab\u53d1\u73b0\u7684\u3002\u5728\u53d1\u73b0\u7279\u5b9a\u7684\u670d\u52a1\u4e4b\n\u540e\uff0c\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u4f1a\u901a\u8fc7\u6307\u5b9a\u4f1a\u8bdd\u7aef\u53e3\u4ee5\u53ca\u670d\u52a1\u7684\u552f\u4e00\u8bc6\u522b\u7b26/well-known name \u6765\u8bf7\u6c42 AllJoyn \u8def\u7531\u8fdb\u5165\u4e0e\u8fdc\u7aef\u670d\u52a1\u7684\u4f1a\u8bdd\uff08\u628a\u4ed6\u53d8\u6210\u4e00\u4e2a session joiner\uff09\u3002\u5728\u8fd9\u4e4b\u540e\uff0cAllJoyn \u8def\u7531\u8d1f\u8d23\u7167\u770b\u4f7f\u7528\u65b9\u4e0e\u63d0\u4f9b\u65b9\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u4f1a\u8bdd\u3002  \u6bcf\u4e2a\u4f1a\u8bdd\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u4f1a\u8bdd\u8bc6\u522b\u7b26\uff0c\u7531\u63d0\u4f9b\u65b9\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u4f1a\u8bdd\u4e3b\u673a\uff09\u6240\u5206\u914d\u3002\u4e00\u4e2a AllJoyn \u4f1a\u8bdd\u53ef\u4ee5\u662f\u4e00\u4e0b\u7684\u4e00\u79cd\uff1a   \u70b9\u5bf9\u70b9\u7684\u4f1a\u8bdd\uff1a\u53ea\u6709\u4e24\u4e2a\u53c2\u4e0e\u8005\u7684\u4f1a\u8bdd-\u4f1a\u8bdd\u4e3b\u673a\u4ee5\u53ca\u4f1a\u8bdd\u53c2\u4e0e\u8005\u3002  \u591a\u653e\u5bf9\u8bdd\uff1a\u6709\u591a\u4e2a\u53c2\u4e0e\u8005\u7684\u4f1a\u8bdd-\u4e00\u4e2a\u5355\u4e00\u7684\u4f1a\u8bdd\u4e3b\u673a\u4ee5\u53ca\u591a\u4e2a\u4f1a\u8bdd\u53c2\u4e0e\u8005\u3002   \u4f1a\u8bdd\u5efa\u7acb\u5b8c\u6210\u540e\uff0c\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\u4e0e\u63d0\u4f9b\u65b9\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4e92\u3002\u6b64\u4ee3\u7406\u5bf9\u8c61\u9700\u8981\u4e00\u4e2a\u4f1a\u8bdd ID \u548c\u8fdc\u7aef\u670d\u52a1\u7684\u5bf9\u8c61\u8def\u5f84\u6765\u521d\u59cb\u5316\u3002\u4e00\u65e6\u5b8c\u6210\uff0c\n\u4f7f\u7528\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u4ee3\u7406\u5bf9\u8c61\u6765\u4e0e\u8fdc\u7aef\u670d\u52a1\u5bf9\u8c61\u5efa\u7acb\u8054\u7cfb\u3002  \u975e\u4f1a\u8bdd\u4fe1\u53f7  AllJoyn \u6846\u67b6\u63d0\u4f9b\u4e86\u53ef\u4ee5\u5c06\u4fe1\u53f7\u5e7f\u64ad\u5728\u90bb\u8fd1\u57df\u7f51\u7edc\u4e0a\u3002\u5e7f\u64ad\u4fe1\u53f7\u7684\u5efa\u7acb\u4e0d\u9700\u8981\u4efb\u4f55\u5e94\u7528\u5c42\u4f1a\u8bdd\u3002\u8fd9\u7c7b\u4fe1\u53f7\u88ab\u79f0\u4e3a\u975e\u4f1a\u8bdd\u4fe1\u53f7\uff0c\u7531\u88ab AllJoyn \u8def\u7531\u652f\u6301\u7684\u975e\u4f1a\u8bdd \u7684\u4fe1\u53f7\u673a\u5236\u6240\u5e7f\u64ad\u3002  \u975e\u4f1a\u8bdd\u4fe1\u53f7\u7684\u6295\u9012\u6709\u4ee5\u4e0b\u4e24\u4e2a\u8fc7\u7a0b\nThe delivery of sessionless signals is done as a two-step process.    \u4f9b\u5e94\u65b9\u8bbe\u5907\uff08\u975e\u4f1a\u8bdd\u4fe1\u53f7\u53d1\u5c04\u7aef\uff09\u53d1\u51fa\u5b58\u5728\u7b49\u5f85\u63a5\u6536\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7684\u63a8\u5e7f\u3002  \u4efb\u4f55\u5e0c\u671b\u63a5\u6536\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7684\u8bbe\u5907\u5c06\u4e0e\u4f9b\u5e94\u65b9\u8fde\u63a5\uff0c\u5e76\u63a5\u6536\u65b0\u4fe1\u53f7\u3002   \u4f7f\u7528\u975e\u4f1a\u8bdd\u4fe1\u53f7\u673a\u5236\uff0c\u4f9b\u5e94\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5411 AllJoyn \u8def\u7531\u53d1\u9001\u5e7f\u64ad\u4fe1\u53f7\u3002AllJoyn \u8def\u7531\u5c06\u8fd9\u4e9b\u4fe1\u53f7\u7f13\u5b58\u3002\u8fd9\u4e9b\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7684\u5185\u5bb9\u5c06\u88ab\u5206\u6210\u5404\u4e2a\u7248\u672c\u3002 AllJoyn \u8def\u7531\u53d1\u51fa\u4e00\u4e2a\u63d0\u9192\u5176\u4ed6\u8bbe\u5907\u5728\u4f9b\u5e94\u65b9\u6709\u65b0\u6d88\u606f\u7684\u4fe1\u53f7\u63a8\u5e7f\u6d88\u606f\u3002\u6b64\u975e\u4f1a\u8bdd\u4fe1\u53f7\u63a8\u5e7f\u6d88\u606f\u5305\u62ec\u4e00\u4e2a\u975e\u4f1a\u8bdd\u7684\u6307\u5b9a\u4fe1\u53f7\u7684 well-known name, \u58f0\u660e\u8be5\u975e\n\u4f1a\u8bdd\u4fe1\u53f7\u7f13\u5b58\u7684\u7248\u672c\u3002  \u5bf9\u63a5\u6536\u975e\u4f1a\u8bdd\u4fe1\u53f7\u6709\u5174\u8da3\u7684\u6d88\u8d39\u65b9\u5e94\u7528\u7a0b\u5e8f\u9488\u5bf9\u975e\u4f1a\u8bdd\u4fe1\u53f7\u6307\u5b9a\u4fe1\u53f7\u7684 well-known name \u6267\u884c\u53d1\u73b0\u884c\u4e3a\u3002\u5728\u4f7f\u7528\u7aef\u7684 AllJoyn \u603b\u7ebf\u4f1a\u4fdd\u6301\u5df2\u7ecf\u4ece\u6bcf\u4e00\u4e2a\u4f9b\u5e94\n\u65b9 AllJoyn \u8def\u7531\u63a5\u6536\u5230\u7684\u6700\u65b0\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u3002\u5982\u679c\u4ed6\u63a2\u6d4b\u5230\u4f34\u968f\u7740\u66f4\u65b0\u8fc7\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7248\u672c\u5230\u6765\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u63a8\u5e7f\uff0c\u4ed6\u5c06\u63a5\u6536\u65b0\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u5e76\u5c06\u5b83\u4eec\u9001\u5230\u611f\n\u5174\u8da3\u7684\u4f7f\u7528\u65b9\u5e94\u7528\u7a0b\u5e8f\u3002  14.06\u7248\u672c\u4e2d\u5bf9\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7684\u589e\u5f3a  \u975e\u4f1a\u8bdd\u4fe1\u53f7\u529f\u80fd\u572814.06\u7248\u672c\u4e2d\u88ab\u589e\u5f3a\uff0c\u4ee5\u4fbf\u4f7f\u4f7f\u7528\u65b9\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5411\u652f\u6301\u6240\u9700\u7684 AllJoyn \u63a5\u53e3\u7684\u4f9b\u5e94\u65b9\u8bf7\u6c42\u975e\u4f1a\u8bdd\u4fe1\u53f7\u3002\u5bf9\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7684\u589e\u5f3a\u5982\u4e0b\uff1a    \u975e\u4f1a\u8bdd\u4fe1\u53f7\u88ab\u63a8\u5e7f\u65f6\u7684\u540d\u5b57\u88ab\u589e\u5f3a\uff0c\u53ef\u4ee5\u5728\u975e\u4f1a\u8bdd\u6d88\u606f\u7684\u5934\u90e8\u589e\u52a0   \u4fe1\u606f\u3002\u4f7f\u7528\u8005\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u611f\u5174\u8da3\u7684   \u540d\u6765\u9009\u62e9\u6536\u53d6\u76f8\u5e94\u7684\n\u63d0\u4f9b\u8005\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u3002\u6bcf\u4e00\u4e2a\u5728\u975e\u4f1a\u8bdd\u4fe1\u53f7\u7f13\u5b58\u4e2d\u7684\u63a5\u53e3\u90fd\u4f1a\u88ab\u63a8\u5e7f\u4e00\u4e2a\u5355\u72ec\u7684\u975e\u4f1a\u8bdd\u4fe1\u53f7\u540d\u3002    \u52a0\u5165\u4e86\u65b0\u673a\u5236\uff1a\u4f7f\u7528\u8005\u7aef\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u6307\u660e\u53ea\u63a5\u6536\u5b9e\u73b0\u4e86\u4e00\u5b9a\u79cd\u7c7b\u7684 AllJoyn \u63a5\u53e3\u53d1\u51fa\u7684 Announce \u975e\u4f1a\u8bdd\u4fe1\u53f7\u3002    \u4ec5\u5f53\u975e\u4f1a\u8bdd\u4fe1\u53f7\u662f\u7531\u652f\u6301\u6240\u9700\u8981\u63a5\u53e3\u7684\u4f9b\u5e94\u65b9\u53d1\u51fa\u65f6\uff0c\u624d\u4f1a\u88ab\u6536\u53d6\u3002  \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f  AllJoyn \u7684\u5c31\u53ca\u5e94\u7528\u7a0b\u5e8f\u88ab\u7528\u4e8e\u5d4c\u5165\u5f0f\u8bbe\u5907\u4e2d\uff0c\u4f8b\u5982\u4f20\u611f\u5668\u3002\u9488\u5bf9\u4e00\u4e9b\u7279\u5b9a\u7684\u529f\u80fd\uff0c\u8fd9\u4e9b\u5d4c\u5165\u5f0f\u8bbe\u5907\u88ab\u4f18\u5316\uff0c\u5e76\u88ab\u9650\u5236\u4e86\u529f\u7387\uff0c\u5185\u5b58\u4ee5\u53ca\u8fd0\u7b97\u80fd\u529b\u3002AllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7684\u8bbe\u8ba1\u5b97\u65e8\u662f\u5c06 AllJoyn \u6846\u67b6\u7684\u4f18\u52bf\u5e26\u5165\u5230\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\u3002\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u5360\u6709\u666e\u904d\u5f88\u5c0f\u3002  AllJoyn \u7cbe\u7b80\u8bbe\u5907\u7684\u4f7f\u7528\n\u7cbe\u7b80\u8bbe\u5907\u4f7f\u7528\u8f7b\u91cf\u5316\u7684\u7cbe\u7b80\u5e94\u7528\u4ee3\u7801\u4ee5\u53ca AllJoyn \u7cbe\u7b80\u5185\u6838\u5e93 \uff08AJTCL\uff09.\u8fd9\u4e9b\u8bbe\u5907\u4e0a\u6ca1\u6709 AllJoyn \u8def\u7531\u3002\u56e0\u6b64\uff0c\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u4f7f\u7528\u8fd0\u884c\u5728\u5176\u4ed6\u652f\u6301 AllJoyn \u8bbe\u5907\u4e0a\u7684 AllJoyn \u8def\u7531\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u501f\u7528\u5176\u4ed6\u8bbe\u5907\u7684 AllJoyn \u8def\u7531\u529f\u80fd\u3002  \u5728\u542f\u52a8\u65f6\uff0c\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\u5e76\u8fde\u63a5\u5230\u8fd0\u884c\u5728\u53e6\u4e00\u4e2a\u652f\u6301 AllJoyn \u8bbe\u5907\u4e0a\u7684 AllJoyn \u8def\u7531\u3002\u4ece\u6b64\u523b\u5f00\u59cb\uff0c\u6b64\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5c31\u4f7f\u7528\u8be5 AllJoyn \u8def\u7531\u5b8c\u6210 AllJoyn \u7684\u6838\u5fc3\u529f\u80fd\uff0c\u5305\u62ec\u670d\u52a1\u7684\u63a8\u5e7f/\u53d1\u73b0\uff0c\u5efa\u7acb\u4f1a\u8bdd\uff0c\u4f20\u9012\u4fe1\u53f7\u7b49\u7b49\u3002\u5982\u679c\u4e00\u4e2a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u8fde\u63a5\u5230\u4e4b\u524d\u53d1\u73b0\u7684 AllJoyn \u8def\u7531\uff0c\u4ed6\u8bb2\u5c1d\u8bd5\u53d1\u73b0\u53e6\u4e00\u4e2a\n\u53ef\u8fde\u63a5\u7684 AllJoyn \u8def\u7531\u3002  AllJoyn \u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u548c AllJoyn \u7684\u6807\u51c6\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u517c\u5bb9\u3002\u4ed6\u4eec\u4f7f\u7528\u76f8\u540c\u7684 over-the-wire \u534f\u8bae\u3002\u8fd9\u4fdd\u969c\u4e86\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6807\u51c6\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u517c\n\u5bb9\u6027\u3002AllJoyn \u7684\u6807\u51c6\u5e94\u7528\u7a0b\u5e8f\u5728\u4e0e AllJoyn \u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u901a\u8bdd\u65f6\uff0c\u5e76\u4e0d\u4f1a\u77e5\u9053\u5bf9\u65b9\u662f\u7cbe\u7b80\u7684\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u4f46\u662f\u5bf9\u4e8e\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4f1a\u6709\u9488\u5bf9\u6d88\u606f\u5927\u5c0f\u7684\u4e00\u4e9b\n\u9650\u5236\uff0c\u8fd9\u53d6\u51b3\u4e8e\u53ef\u4f7f\u7528\u7684 RAM \u5bb9\u91cf\u3002  AllJoyn \u534f\u8bae\u7248\u672c  \u901a\u8fc7 AllJoyn \u8def\u7531\u5b9e\u73b0\u7684\u529f\u80fd\u4f1a\u901a\u8fc7\u4e00\u4e2a AllJoyn \u534f\u8bae\u7248\u672c\u5b57\u6bb5\uff08AJPV\uff09\u8fdb\u884c\u7248\u672c\u5206\u7c7b\u3002\u4e0b\u8868\u771f\u5b9e\u4e86\u4e0d\u540c AllJoyn \u53d1\u5e03\u7248\u672c\u7684 AJPV\uff1b\u9664\u975e\u53e6\u884c\u901a\u77e5\uff0c\u4e3b\u53d1\n\u884c\u7248\u672c\u7684 AJPV \u4e5f\u88ab\u4f7f\u7528\u5230\u6240\u6709\u8865\u4e01\u7248\u672c\u3002AJPV \u4f5c\u4e3a BusHello \u6d88\u606f\u7684\u4e00\u90e8\u5206\uff0c\u5728 AllJoyn \u4f1a\u8bdd\u5efa\u7acb\u65f6\u7684\u8def\u7531\u4e4b\u95f4\u548c\u5728\u53f6\u8282\u70b9\u8fde\u63a5\u5230\u8def\u7531\u65f6\u7684\u53f6\u8282\u70b9\u548c\u8def\u7531\n\u8282\u70b9\u4e4b\u95f4\u88ab\u4ea4\u6362\u3002\u8fd9\u4e2a\u5b57\u6bb5\u88ab\u6838\u5fc3\u5e93\u7528\u4e8e\u8bc6\u522b\u5bf9\u5176\u4ed6\u8def\u7531\u7684\u517c\u5bb9\u6027\uff0c\u5e76\u7279\u5b9a\u7684\u88ab\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7528\u6765\u51b3\u5b9a\u662f\u5426\u8fde\u63a5\u5230\u4e00\u4e2a\u7279\u5b9a\u8def\u7531\uff0c\u6216\u7ee7\u7eed\u641c\u7d22\u3002\u5b83\u540c\u6837\u88ab\u5176\u4ed6\n\u8def\u7531\u7528\u4e8e\u51b3\u5b9a\u53f6\u8282\u70b9\u7684\u529f\u80fd\u662f\u5426\u53ef\u7528\uff08\u4f8b\u5982\u81ea\u6211\u52a0\u5165\uff0cSessionLostWithReason \u7b49\u7b49\uff09   Table:   AllJoyn \u7248\u672c\u5bf9\u534f\u8bae\u6620\u5c04\u8868      \u53d1\u5e03\u7248\u672c    AJPV       legacy 03.04.06  9    v14.02  9    v14.06  10    v14.12  11    v15.04  12",
            "title": "\u7cfb\u7edf\u6982\u89c8"
        },
        {
            "location": "/learn/core/system-description/sessionless-signal/",
            "text": "Sessionless Signal\n\n\nOverview\n\n\nThe sessionless signal is an AllJoyn\n feature that enables \nbroadcasting of signals to all reachable nodes in the AllJoyn \nproximal network. This is different than the session-based signals \ndescribed in \nData Exchange\n, where signals are sent \nonly to participants connected over a given session or \nmultiple sessions (for session broadcast signals) based on \nsessionId/destination based routing. \n\n\nSessionless signals are logically broadcast signals and any \napp on the AllJoyn proximal network interested in receiving \nsessionless signals will receive all sessionless signals sent \nby any other app on that network. The AllJoyn system design \nrefers to sessionless signals as logically broadcast because \nsignals themselves are not broadcast/multicast, only an indication \nfor signals is sent over multicast to all the nodes on the network. \nApplications do not have to be connected over sessions to receive \nsessionless signals, however, the AllJoyn router underneath \nmust establish a session to fetch these signals based on the \nindication received. Applications can specify match rules \n(via AddMatch) to receive a specific set of sessionless \nsignals and the AllJoyn router filters out signals based \non those match rules. \n\n\nThe following figure captures the high-level architecture \nfor the sessionless signal on the provider and consumer sides. \nThe AllJoyn router supports a logical SLS module that implements \nsessionless signal logic. The SLS module makes use of the \nName Service to advertise and discover sessionless signals \nusing a sessionless signal-specific well-known name.\n\n\n\n\nFigure:\n Sessionless signal architecture\n\n\nAfter AllJoyn router startup, the SLS module executes the \nfollowing steps to prepare itself for sending and/or receiving \nsessionless signals. \n\n\n\n\nCreate an object implementing \"org.alljoyn.sl\" interface \nwhich is the interface used between two AllJoyn routers to \nexchange sessionless signals.\n\n\nRegister signal handlers to receive signals from \"org.alljoyn.sl\" interface.\n\n\nBind a well-known sessionless signal session port 100 \nto support incoming requests to fetch sessionless signals. \n\n\n\n\nThe consumer app interested in receiving sessionless signals \nregisters a match rule with the AllJoyn router to receive \nsessionless signals. As a result, the SLS module initiates \ndiscovery for sessionless providers via the Name Service \n(either the legacy Name Service or NGNS based on the router version). \n\n\nOn the provider side, the app sends a sessionless signal to \nthe AllJoyn router. The SLS module stores the signal in a \nlocal message cache. The provider side sessionless signal \ngenerates a sessionless signal-specific well-known name \nand advertises that over AllJoyn network. \n\n\nUpon discovering the sessionless signal provider, the consumer \nAllJoyn router establishes a session with the provider side \nAllJoyn router over the well-known session port for sessionless \nsignals. Once the session is established, the consumer SLS module \nfetches sessionless signals via the org.alljoyn.sl interface. \n\n\nThe following sections detail the provider and consumer \nsessionless signal-related behavior.\n\n\nSessionless signal enhancement in the 14.06 release\n\n\nPrior to the 14.06 release, the consumer side SLS module \nprovides the functionality of requesting sessionless signals \nby matching certain filtering criteria specified by the AddMatch \nrule. The consumer fetches sessionless signals from all the \nproviders and applies the AddMatch rules to filter received \nsessionless signals before passing these to interested applications.\n\n\nThe sessionless signal design in the 14.06 release was \nenhanced to enable a consumer application to request sessionless \nsignals from provider applications supporting certain AllJoyn \ninterfaces. For example, a Lighting Controller app can request \nAnnouncement sessionless signals only from those provider apps \nthat implement the org.alljoyn.LightBulb interface. \n\n\nThe following key sessionless signal enhancements made to \nachieve this functionality:\n\n\n\n\nThe sessionless signal advertised name was enhanced to add \n\n information from the header of the sessionless signal. \nConsumers use this to fetch sessionless signals only from those \nproviders that are emitting signals from \n specified \nin the consumer side match rules. Multiple sessionless signal \nnames are advertised, one for each unique interface in the \nsessionless signal cache.\n\n\nThe match rule definition for AddMatch has been extended to \nadd a new 'implements' key that can be used to indicate the \ndesire to receive the Announcement sessionless signal only \nfrom applications implementing certain AllJoyn interfaces as \nspecified in the application's Announcement signal.\n\n\n\n\nSessionless signals are only fetched from those providers \nthat support interface details specified in the match rules. \nThe AddMatch match rules are passed to the providers to \nfilter signals based on those match rules. \n\n\nSessionless signal end-to-end logic\n\n\nThe sessionless signal end-to-end logic consists of the \nfollowing aspects, which are detailed in the sections below.\n\n\n\n\nThe provider caches signals and advertises the availability of signals.\n\n\nThe consumer discovers sessionless signal providers.\n\n\nThe consumer fetches sessionless signals from a provider.\n\n\n\n\nProvider caches signals and advertises availability\n\n\nOn the provider side, the app sends a signal to the AllJoyn \nrouter with the SESSIONLESS flag set. The SLS module in the \nprovider inserts the signal into its sessionless signal cache. \nThe cache entry uses the combination of (SENDER, INTERFACE, MEMBER, \nand PATH) header fields of the signal as the key.  \n\n\nSubsequent sessionless signals sent to the AllJoyn router \nwith the same (SENDER, INTERFACE, MEMBER, and PATH) header \nfields overwrite the already cached sessionless signal.\n\n\nThe provider AllJoyn router assigns a change_id for sessionless \nsignals. The change_id is used to indicate updates to sessionless \nsignals to consumers on the AllJoyn network. Each sessionless \nsignal cache entry includes (SLS signal, change_id) tuple. \nThe change_id is incremented by the provider only after a new \nsignal is inserted into its cache and a consumer has requested \nsignals from the provider since the last time the change_id was incremented.\n\n\nThe app may remove an entry from the provider's cache by calling \nthe CancelSessionlessMessage method of the org.alljoyn.Bus \ninterface of the /org/alljoyn/Bus object. The entry being \nremoved is specified by the serial number of the signal. \nThe change_id is not incremented when the provider removes \na signal from its cache. The contents of the cache, including \nthe associated change_ids, determine what the provider will advertise.  \n\n\nPrior to the AllJoyn 14.06 release, the SLS module requests \nand advertises the following sessionless signal well-known name: \n\n\n\n\n\"org.alljoyn.sl.x\n.x\n\"\n\n\n\n\nwhere:\n\n\n\n\nGUID is the GUID of the AllJoyn router\n\n\nchange_id is the maximum change_id in the sessionless signal cache.\n\n\n\n\nStarting with the AllJoyn 14.06 release, the SLS module \nrequests and advertises the following sessionless signal well-known names:\n\n\n\n\n\"org.alljoyn.sl.y\n.x\n\"\n\n\n\n\nwhere:\n\n\n\n\nGUID is the GUID of the AllJoyn router\n\n\n\n\nchange_id is the maximum change_id in the SLS cache.\n\n\n\n\n\n\n\"\n.sl.y\n.x\n\"\n\n\n\n\n\n\nwhere:\n\n\n\n\nINTERFACE is the value of the INTERFACE header field of the signal\n\n\nGUID is the GUID of the AllJoyn router\n\n\nchange_id is the maximum change_id for signals in the \n    sessionless signal cache having the same value of the \n    INTERFACE header field.  \n\n\n\n\nAt most, one well-known name is requested and advertised \n  for each unique INTERFACE header field value in the sessionless signal cache.\n\n\nThe following figure shows the provider side SLS module logic \nprior to the AllJoyn 14.06 release.\n\n\n\n\nFigure:\n Provider SLS module logic (prior to the AllJoyn 14.06 release)\n\n\nThe following figure shows the provider side SLS module logic \nintroduced in the AllJoyn 14.06 release.\n\n\n\n\nFigure:\n Provider SLS module logic (introduced in the AllJoyn 14.06 release)\n\n\nConsumer discovers sessionless signal providers\n\n\nOn the consumer side, the app registers an interest in a \nsessionless signal by calling the D-Bus AddMatch method.\n\n\nNOTE:\n The D-Bus AddMatch method is part of the org.freedesktop. \nThe D-Bus interface and is implemented by the /org/freedesktop/DBus object.\n\n\nThe match rule includes \"sessionless='t'\" to indicate registration \nfor a sessionless signal, along with any other key/value pairs for \nfiltering signals.  \n\n\nPrior to the AllJoyn 14.06 release, the SLS module starts the \nname-based discovery process to discover the SLS WKN prefix \n\"org.alljoyn.sl.\" after receiving the first sessionless \nmatch rule. When the last match rule is removed by an app \nconnected to the AllJoyn router, the SLS module cancels \ndiscovering the SLS WKN prefix.\n\n\nStarting with the AllJoyn 14.06 release, the sessionless \nsignal logic on the consumer side was enhanced to enable \nan application requesting sessionless signals from providers \nimplementing certain AllJoyn interfaces. A new 'implements' \nkey was added to the AddMatch method to achieve this. \nThe 'implements' key specifies an AllJoyn interface that \nshould be implemented by the sessionless signal provider. \nMultiple 'implements' key/value pairs may be specified in \na single match rule. These are treated as a logical AND \nwhen discovering sessionless signal providers. In the current \nimplementation, the 'implements' key is only applicable for \nreceiving the Announcement sessionless signal. An AddMatch \nthat includes the 'implements' key should always include \n\"interface= org.alljoyn.About\".\n\n\nThe following figure shows the consumer logic for discovering \nsessionless signal providers implemented in the 14.06 release.\n\n\n\n\nFigure:\n Consumer logic for discovering sessionless providers (introduced in the AllJoyn 14.06 release)\n\n\nIf the AddMatch includes the 'interface' key but no 'implements' \nkey, the SLS module performs name-based discovery to discover \nthe name prefix \"\n.sl.\" for the specified interface \nin the match rule.\n\n\nIf the AddMatch includes one or more 'implements' keys, the \nSLS module performs interface name discovery via the NGNS \nto discover providers implementing interfaces specified by \nthe 'implements' key. The SLS module also performs a name-based \ndiscovery for name prefix \"org.alljoyn.sl.\" both via mDNS \nand using the WHO-HAS message. The latter is intended to \ndiscover any sessionless signal providers prior to the 14.06 \nrelease. Name-based discovery over mDNS is performed to catch \nunsolicited mDNS responses from providers for new/updated \nsessionless signals.\n\n\nThe app unregisters interest in a sessionless signal by \ncalling the RemoveMatch method with a previously added \nmatch rule. When the last sessionless signal match rule is \nremoved, the SLS module stops sessionless signal-related \ndiscovery, including both name-based and interface name discovery. \n\n\nConsumer fetches sessionless signals from a provider\n\n\nAfter discovering a provider, the consumer SLS module \ndetermines if it needs to fetch sessionless signals from \nthe provider based on the consumer's match rules and the \nchange_id of the provider in the advertisement. The consumer \nSLS module keeps track of last acquired change_id for every \nprovider GUID it has discovered via the sessionless signal \nadvertised name. The sessionless signal fetch logic and the \nstate maintained by the consumer for each provider was modified \nin the 14.06 release. The fetch logic functionality differences \nare described below.\n\n\n\n\nPrior to the 14.06 release, the consumer SLS module maintains \nthe List\n information \nfor discovered providers. The consumer SLS module fetch sessionless \nsignals if an updated change_id is received from the provider \nas part of the sessionless signal advertised name.\n\n\nStarting with the 14.06 release, multiple sessionless signal \nadvertised names can be received from a given provider. \nIn addition, the associated change_id can be different for \neach of those sessionless signal advertised names. The consumer \nSLS module maintains the List\n \nfor discovered providers. It also keeps track of the match rules \nthat have been applied for a given provider. \n\n\n\n\nThe following figure captures the consumer sessionless signal \nfetch logic implemented in the 14.06 release.\n\n\n\n\nFigure:\n Consumer logic to determine sessionless signal fetch (introduced in the 14.06 release)\n\n\nThe consumer SLS module receives the sessionless signal \nadvertised name from a provider. The sessionless signal \nname can be received via multiple means:\n\n\n\n\nSolicited mDNS response over unicast as a result of an mDNS query\n\n\nUnsolicited mDNS response over multicast\n\n\nIS-AT multicast message (solicited or unsolicited). \n\n\n\n\nThe consumer checks if any new match rules have been added \nafter the last fetch from the provider or the received change_id \nin the sessionless signal name is greater than what was fetched \npreviously from that provider.  \n\n\nIf either condition is true, the consumer initiates a sessionless \nsignal fetch from a legacy provider (prior to the 14.06 release) \nwithout further checks. This is determined by examining the GUID \nsegment of the sessionless signal advertised name received from the provider: \n\n\n\n\nPrior to the 14.06 release, the GUID is prefixed with an \"x\".\n\n\nStarting with the 14.06 release, GUID is prefixed with a \"y\". \n\n\n\n\nIf the sessionless signal name is from a 14.06 release or \nlater provider, the consumer performs further checks to determine \nif the sessionless signal fetch should be done with the provider. \n\n\nStarting with the 14.06 release, the sessionless signal name \nalso includes the interface value from the sessionless signal \nheader. In this case, the consumer SLS module checks whether \nthe interface specified (if any) in the match rule is the same \nas the interface received in the sessionless signal name. \n\n\n\n\nIf yes, the consumer initiates a sessionless signal fetch \nwith the provider. \n\n\nIf no interface was specified in the match rule, the consumer \ninitiates a sessionless signal fetch anyway because this \nconstitutes a wildcard match. \n\n\n\n\nIn the 14.06 release, a new RequestRangeMatch() signal is \ndefined as part of the org.alljoyn.sl interface. This signal \nis used to fetch a set of sessionless signals that matches \nany of the match rules specified in the RequestRangeMatch()\nsignal. The consumer SLS module uses this signal to fetch \nsessionless signals from the 14.06 providers. \n\n\nNOTE:\n The current implementation does a catchup fetch for \nnew match rules before fetching new signals for updated \nchange_id. This results in two fetches upon receiving the \nsessionless signal advertised name, however, this would be \na rare occurrence because adding a new match rule and \nreceiving a sessionless signal advertised name typically \ndoes not occur at the same time.\n\n\nWhenever a new AddMatch rule is added for sessionless signals, \nthe consumer SLS module triggers a catchup fetch with already \nknown providers for the new match rule per the logic captured \nin \nConsumer fetches sessionless signals from a provider\n. For a catchup fetch, the \nRequestRangeMatch signal only includes the new match rule. \nIf the new AddMatch includes an 'implements' key, the consumer \nSLS module performs discovery for providers implementing those interfaces.\n\n\nThe consumer schedules a sessionless signal fetch immediately \nfor sessionless signal advertised names received in the \nsolicited mDNS or IS-AT response messages. For sessionless signal \nadvertised names received as part of the unsolicited mDNS or IS-AT \nresponse messages, the sessionless signal fetch is scheduled \nfollowing a backoff algorithm as described in \n\nSessionless signal fetch backoff algorithm\n. \n\n\nThe steps to fetch sessionless signals follow.\n\n\n\n\nThe consumer SLS module joins a session with the sessionless \nsignal advertised name and known SLS port (port=100). \n\n\nThe consumer sends one of the signals defined in the \norg.alljoyn.sl (\nRequestSignals()\n, \nRequestRange()\n, or \nRequestRangeMatch()\n)\n\nto the provider over established session to fetch sessionless signals. \n\n\nThe provider receives the request signal, sends the requested \nsessionless signals and leaves the session.  \n\n\n\n\nFor details of which signals the provider sends from its cache \nto the consumer, see the definition of these signals in \n\norg.alljoyn.sl interface\n. \n\n\nThe consumer receives the sessionless signals, and filters and \nroutes them according to its match rules. The consumer SLS module \nmaintains the information about the match rules applied and change_id \nfetched from the provider for future sessionless signal fetches.\n\n\nSessionless signal fetch backoff algorithm\n\n\nAfter determining that it needs to fetch sessionless signals \nfrom a given provider as per the logic described above, the \nconsumer SLS module attempts a join session with the producer \nto fetch sessionless signals. If the consumer's first join session \nattempt fails, it follows a backoff based retry logic to do \nthe join session for the sessionless signal fetch from the \nprovider. The SLS fetch logic adds random delays at different \nconsumers to ensure that consumer requests for sessionless \nsignals fetch are distributed over time for a given provider. \n\n\nThe Consumer SLS module follows a mix of linear plus exponential \nbackoff retries for sessionless signals fetch. It supports a \nhybrid of first few linear backoff retries followed by some \nexponential backoff retries. The transition point between the\nlinear and exponential backoff is configurable. The backoff \ninterval is capped off to a maximum configurable value. \nRetries are performed for a total retry period R. Once the \nmax backoff interval is reached, retries continue with the \nconstant retry period (set to max backoff interval) until the\ntotal retry period R is elapsed.\n\n\nThe following configuration parameters have been added in \nthe router config file:\n\n Linear to Exponential Transition Point (k) - Specifies the \nretry attempt after which backoff should become exponential.\n\n Max Backoff Interval Factor (c) - Specifies the multiplication \nfactor for T (initial backoff time) to generate the max backoff interval.\n* Total Retry Period (R) - Specifies the total time period (in seconds) \nfor which SLS fetch retry must be attempted.\n\n\nThe following figure shows an example SLS retry schedule with \nSLS retries happening at T, 2T, 3T, 4T, 8T, 16T, 32T, 32T, 32T,....\n\n\n\n\nFigure:\n SLS fetch backoff schedule example\n\n\nFor every SLS retry attempt, the join session with the producer \nis delayed randomly between [0, retry interval] to make sure \nConsumer requests are distributed over time. For example in \nthe figure above:\n\n The Consumer join session for 4th SLS fetch retry \nwill be randomly delayed between [0, 4T] interval. \n\n The Consumer join session for nth SLS fetch retry will \nbe randomly delayed between [0,16T] interval.\n\n\nFor the SLS fetch triggered as a result of solicited mDNS \ndiscovery responses, the join session request is not delayed \nrandomly. In this case, the join session for SLS fetch is \ndone immediately. The AllJoyn router will serialize such an SLS \nfetch if the max connections limit on the Consumer is reached.\n\n\nSessionless signal message sequences (prior to the 14.06 release)\n\n\nSince the sessionless logic has changed quite a bit in the \n14.06 release, separate SLS message sequences are captured \nprior to the 14.06 release and starting from the 14.06 release.  \n\n\nThe following use cases detail sessionless signal logic \nscenarios prior to the 14.06 release:\n\n\n\n\nFirst sessionless signal delivery\n\n\nAnother AddMatch done by the same app\n\n\nAnother app requests sessionless signals\n\n\n\n\nFirst sessionless signal delivery\n\n\nThe following figure shows the message flow for the use \ncase for sending and receiving the first sessionless signal \non the provider and consumer, respectively.\n\n\nNOTE:\n The sessionless signal change_id is not carried in any \nof the sessionless signal messages. However, the provider \nAllJoyn router logic ensures that it only sends sessionless \nsignal messages up to the change_id that was discovered by \nthe consumer. When the JoinSession is done by the consumer, \nit uses the sessionless signal well-known name discovered \nfrom the IS-AT message. The change_id included in that well-known \nname provides the upper limit for the change_id for sending \nsessionless signals to the consumer. \n\n\nA similar message flow is applicable for the use case when a \nsubsequent sessionless signal is delivered. The main difference \nis that the provider updates the change_id, if applicable, as\nper the change_id update logic described above.\n\n\n\n\nFigure:\n First sessionless signal delivery\n\n\nThe message flow steps are described below.\n\n\n\n\nBoth provider and consumer apps connect to the AllJoyn \nrouter, and a unique name is assigned to the app endpoint \nby the AllJoyn router.\n\n\nThe provider app registers its service object implementing \nan interface containing signal member with the AllJoyn core library. \n\n\nThe consumer app registers a signal handler for the \nsessionless signal by invoking the AllJoyn core library's \n\nRegisterSignalHandler\n API.\n\n\nThe consumer app invokes AllJoyn core library's \nAddMatch\n \nAPI to add a rule for receiving sessionless signals. The API \nspecifies a signal match rule with type='signal', sessionless='t' \nand other applicable parameters. \n\n\nThe AllJoyn core library invokes the AllJoyn router's AddMatch \nmethod to add the sessionless signal filtering rule at the AllJoyn router.\n\n\nThe consumer AllJoyn router invokes \nFindAdvertisedName()\n \nwith the sessionless SLS WKN prefix \"org.alljoyn.sl\" to discover \nproviders offering sessionless signals.\n\n\nThe consumer AllJoyn router sends a WHO-HAS message for \n\"org.alljoyn.sl\" prefix.\n\n\nThe provider app has a sessionless signal to send. \nIt invokes the BusObject Signal(...) call which generates an \nAllJoyn SIGNAL message with the sessionless flag set to true.\n\n\nThe SIGNAL message is sent from the app to the AllJoyn router. \n\n\nThe provider AllJoyn router stores the signal in the sessionless \nsignal cache and assigns a new sessionless signal change_id number.\n\n\nThe provider AllJoyn router generates a well-known name \nfor the sessionless signal with the latest change_id using \nthe format org.alljoyn.sl.x\n.x\n.\n\n\nThe provider AllJoyn router does a RequestName for this \nwell-known name to reserve this name. It then calls the \n\nAdvertiseName\n method to advertise this name on the AllJoyn network. \n\n\nThe provider AllJoyn router sends out an IS-AT message \nwith the generated sessionless signal well-known name.\n\n\nThe consumer AllJoyn router receives the IS-AT message \nthat passes the prefix matching for \"org.alljoyn.sl\". \nA FoundAdvertisedName signal gets generated for the the \nsessionless signal prefix.\n\n\nThe consumer AllJoyn router compares its current change_id \nfor the AllJoyn router GUID in the IS-AT message with the \nchange_id received in the IS-AT message. It determines that \nthe received change_id is different than the current change_id \nand it needs to get the new set of sessionless signals from \nthe provider AllJoyn router.\n\n\nThe consumer AllJoyn router invokes the \nJoinSessionAsync\n \nmethod to start a session with the provider AllJoyn router. \nIt specifies the sessionless signal wel-known name and the \nsessionless session port among other parameters.\n  This initiates a session attachment flow at the AllJoyn router \n  level between the consumer and provider. \n\n\nOnce the session is established, the consumer AllJoyn router \nsends a RequestSignals signal to request the latest set of \nsessionless signals from the provider app. This signal includes \nthe last acquired change_id for the GUID of provider AllJoyn router.\n\n\nThe provider AllJoyn router sends SIGNAL messages for all \nsessionless signals added after the change_id provided in the \nRequestSignals message. The SIGNAL messages have destination \nas local endpoint of the consumer AllJoyn router. \n\n\nOnce all SIGNAL messages have been sent, the provider \nAllJoyn router initiates a LeaveSession method for the connected \nsession. This triggers sending a DetachSession SIGNAL message \nto the consumer AllJoyn router. \n\n\nAfter receiving the DetachSession signal, the consumer \nAllJoyn router knows that it has received all new sessionless \nsignals from the provider AllJoyn router. It then updates \nits change_id for that GUID to the latest received change_id \nfrom the IS_AT message. \n\n\nThe consumer AllJoyn router filters the received sessionless \nsignal messages based on the registered AddMatch rules for \nthe sessionless signals.\n\n\nThe consumer AllJoyn router sends SIGNAL messages to the \nAllJoyn core library via callback. The AllJoyn core library \nin turn calls the registered signal handler for the sessionless signal. \n\n\n\n\nAnother AddMatch done by the app\n\n\nA consumer app might invoke a subsequent AddMatch call for \nsessionless signals. Prior to the 14.06 release, this is \ninterpreted as adding another rule for filtering future received \nsessionless signals. \n\n\n\n\nAt the AllJoyn router, any future received SLS messages \nwill be filtered based on the combined set of match rules. \n\n\nIf there is a more restrictive rule which matches a small \nset of sessionless signals and there is another less restrictive \nrule which matches a larger superset of signals, AllJoyn router \nwill always send larger superset of signals to the app. \n\n\n\n\nNOTE:\n The AllJoyn router does not re-fetch sessionless signal \nmessages associated with the existing change_id when a new match \nrule is added. The new match rule is applied to any future \nreceived messages. Starting with the 14.06 release, this behavior \nwas modified and the SLS module initiates the sessionless signal \nfetch whenever any new match rule is added.\n\n\nThe following figure shows the message flow for the scenario \nwhere another AddMatch is done by the same app. Most of the steps \nare same as the first sessionless signal delivery. The main difference \nis that no FindAdvertisedName needs to be done for \"org.alljoyn.sl\" \nbecause discovery for the SLS WKN prefix was already initiated \nat the time of receiving first AddMatch for the sessionless \nsignal and is already in progress.\n\n\n\n\nFigure:\n Another add match done by the app\n\n\nAnother app requesting for sessionless signal\n\n\nFor the use case where multiple apps are connected to a \ngiven AllJoyn router, each application can invoke the \nAddMatch\n \ncall to add match rules for sessionless signals with the AllJoyn \nrouter. These AddMatch calls can be received at different times. \nWhen the first AddMatch call is received from an app, the AllJoyn \nrouter re-fetches the currently valid sessionless signals \nfrom the already discovered providers for sending to that app. \nThe AllJoyn router uses the RequestRange signal to fetch the \ncurrent set of sessionless signals.\n\n\nThe following figure shows the message flow for the scenario \nwhen a subsequent app performs the first AddMatch for sessionless signals.\n\n\n\n\nFigure:\n Another app requesting for sessionless signals\n\n\nSessionless signal message sequences (14.06 release)\n\n\nIn the 14.06 release, the sessionless signal logic was enhanced \nas described earlier. This section captures the sessionless \nsignal message sequences with the enhanced logic. The following \nuse cases are detailed:\n\n\n\n\nFirst sessionless signal delivery\n\n\nSessionless signal delivery between a new consumer and a legacy provider \n\n\nSessionless signal delivery between a legacy consumer and a new provider \n\n\nSubsequent AddMatch done by an app\n\n\n\n\nFirst sessionless signal delivery\n\n\nThis use case defines when the first AddMatch is done by a \nconsumer app to receive sessionless signals. The match rules \nspecified in the AddMatch may or may not include the new 'implements' \nkey. Both use cases are captured accordingly:\n\n\n\n\nAddMatch does not include 'implements' key\n\n\nAddMatch includes 'implements' key\n\n\n\n\nAddMatch does not include 'implements' key\n\n\nThe following figure shows the message flow for sending and \nreceiving the first sessionless signal for the use case when \nAddMatch does not include an 'implements' key/value pair.\n\n\n\n\nFigure:\n First sessionless signal delivery (no 'implements' key in AddMatch)\n\n\nThe message flow steps are described below.\n1. Both the provider and consumer apps connect to the AllJoyn router.\n2. The provider app registers its service object implementing \nan interface containing signal member with the AllJoyn core library. \n3. The consumer app registers a signal handler for the sessionless \nsignal by invoking the AllJoyn core library's RegisterSignalHandler API.\n4. The consumer app invokes the AllJoyn core library's \nAddMatch API to add a rule for receiving sessionless signals. \nThe API specifies a signal match rule with type='signal', \ninterface='\n', sessionless='t' and other applicable parameters. \n5. The AllJoyn core library invokes the AllJoyn router's \nAddMatch method to add the sessionless signal filtering \nrule at the AllJoyn router.\n6. The consumer AllJoyn router invokes the \nFindAdvertisedName\n \nmethod with the SLS WKN prefix \"org.alljoyn.sl.\" to discover \nproviders prior to the 14.06 release and SLS WKN \"\nsl.\" \nto discover new providers starting in the 14.06 release. \n7. The consumer AllJoyn router sends out name-based \nquery messages using the NGNS.\n8. The provider app has a sessionless signal to send. \nIt invokes the \nBusObject Signal(...)\n call which generates \nan AllJoyn SIGNAL message with SESSIONLESS flag set to true.\n9. The SIGNAL message is sent from app to the AllJoyn router. \n10. The provider AllJoyn router stores the signal in the sessionless signal cache.\n11. The provider AllJoyn router generates the following:\n   * A well-known name for the sessionless signal of the format \n   \"org.alljoyn.sl.y\n.x\n\" with the latest change_id. \n   * A second well-known name for the sessionless signal of \n   the format \"\n.y\n.x\n\" with the \n   latest change_id associated with signals generated \n   by the given \n.\n12. The provider AllJoyn router invokes the RequestName \nand AdvertiseName method calls to request and advertise these names. \n13. The provider AllJoyn router sends out a Name Service \nresponse messages to advertise these sessionless signal \nwell-known names using NGNS.\n14. The consumer AllJoyn router receives the Name Service \nresponse messages which pass the prefix matching for \"org.alljoyn.sl.\" \nor \"\n.y\n.x\n\". A FoundAdvertisedName \nsignal gets generated for the advertisements.\n15. The consumer determines that it needs to fetch sessionless \nsignals from the provider, based on the received sessionless \nsignal advertised name, change_id comparison, and current \nset of match rules as per logic described in \nConsumer fetches \nsessionless signals from a provider\n. \n16. The consumer AllJoyn router invokes JoinSessionAsync \nmethod call to start a session with the provider AllJoyn router. \nIt specifies the sessionless signal well-known name and \nsessionless session port among other parameters.\n   This initiates a session attachment flow at the AllJoyn \n   router level between the consumer and provider. \n17. Once the session is established, the consumer AllJoyn \nrouter sends the RequestRangeMatch signal to request the \nlatest set of sessionless signals from the provider device. \nThis signal includes last acquired change_id for the GUID \nof provider AllJoyn router, and the match rules that have \nnot yet been applied to the provider GUID.\n18. The provider AllJoyn router sends the AllJoyn SIGNAL \nmessages for all sessionless signals added that pass the \nmatch rules in the range provided in the RequestRangeMatch signal.\n19. Once all SIGNAL messages have been sent, the provider \nAllJoyn router initiates LeaveSession for the connected session. \nThis triggers sending a DetachSession SIGNAL message to the \nconsumer AllJoyn router. \n20. After receiving the DetachSession signal, the consumer \nAllJoyn router knows that it has received all new sessionless \nsignals from the provider AllJoyn router. It then updates its \nchange_id for that GUID to the latest received change_id \nfrom the advertisement and also updates status for match \nrules which have been applied to that provider. \n21. The consumer AllJoyn router sends SIGNAL messages to the \nAllJoyn core library via callback. The AllJoyn core library \nin turn calls the registered signal handler for the sessionless signal. \n\n\nAddMatch includes the 'implements' key\n\n\nThe following figure shows the message flow for sending and \nreceiving of the first sessionless signal for the use case \nwhen AddMatch includes one or more 'implements' key/value pair. \n\n\nNOTE:\n Currently, the 'implements' key only applies to the \nAnnouncement sessionless signal. As a result, the AddMatch \nin this case must include \"interface=org.alljoyn.About\", \nwhich is the interface that emits the Announcement signal.\n\n\nThe AllJoyn router initiates interface name discovery via \nNGNS to find providers which implements the specified interfaces. \nOnce those providers are discovered, the consumer AllJoyn router \nfetches the Announcement signals from those providers.\n\n\n\n\nFigure:\n First sessionless signal delivery (with implements' key in AddMatch)\n\n\nSessionless signal delivery between a new consumer and a legacy provider\n\n\nThe following figure shows the message flow when a new consumer \n(14.06 release or later) received sessionless signals from a \nlegacy provider (prior to the 14.06 release).\n\n\n\n\nFigure:\n Sessionless signal logic between new consumer and legacy provider\n\n\nSessionless signal delivery between a legacy consumer and a new provider\n\n\nThe following figure shows the message flow when a legacy consumer \n(prior to the 14.06 release) is receiving sessionless signals \nfrom a new provider (14.06 release or later).\n\n\n\n\nFigure:\n Sessionless signal logic between legacy consumer and new provider\n\n\nSubsequent AddMatch done by an app\n\n\nAfter the first AddMatch call to the AllJoyn router, applications \ncan subsequently invoke other AddMatch calls to add more \nmatch rules for sessionless signals. \n\n\nStarting from the 14.06 release, whenever an AddMatch call \nis invoked by any app, the SLS module takes steps to trigger \nfetch for sessionless signal messages. The logic is quite \nsimilar to the first sessionless signal delivery use case \nin \nFirst sessionless signal delivery\n. \nThe additional step is to fetch sessionless signal messages \nfrom existing providers that match the specified filtering \ncriteria for sessionless signals.\n\n\nThe consumer SLS module remembers the sessionless signal \nadvertised name it has received from each provider. For the \nnew AddMatch rule that doesn't include implements key, the \nconsumer uses the match rule to find matching providers among \nexisting providers and fetches sessionless signals from those providers.\n\n\nThe consumer SLS module performs the following steps.\n\n\n\n\nPerform interface name discovery for providers for \nany new 'implements' key/value pair specified in AddMatch. \nFetch the sessionless signals from the discovered providers.\n\n\nPerform name-based discovery for \"\n.sl\" for any \nnew interface value specified in AddMatch, for which discovery \nwas not already done. Fetch the sessionless signals from \nthe discovered providers.\n\n\nFetch the sessionless signals from the already known providers \nif the sessionless signal name received from these providers \nmatch the filtering criteria specified in match rule.\n\n\n\n\norg.alljoyn.sl interface\n\n\nThe org.alljoyn.sl interface is the AllJoyn interface between \ntwo AllJoyn routers used to enable the exchange of sessionless \nsignals. \norg.alljoyn.sl interface signals\n \nlists the org.alljoyn.sl interface signals.\n\n\norg.alljoyn.sl interface signals\n\n\n\n\n\n\n\n\nSignal name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRequestSignals\n\n\nRequests sessionless signals associated with change_ids in the range [fromId, currentChangeId], where currentChangeId is the most recently advertised change_id of the provider.\n\n\n\n\n\n\nRequestRange\n\n\nA signal for requesting sessionless signals associated with change_ids in the range [fromId, toId).\nNOTE:\n The \"toId\" is exclusive so a consumer should set toId=\n+1 if it wants to get SLS up to the change_id_value.\nThis signal appeared in version 6 of the AllJoyn protocol.\n\n\n\n\n\n\nRequestRangeMatch\n\n\nA signal for requesting sessionless signals associated with change_ids in the range [fromId, toId) that match any of the provided match rules.\nThe \"toId\" is exclusive in this signal too.\nThis signal appeared in version 10 of the AllJoyn protocol (associated with the 14.06 release).\n\n\n\n\n\n\n\n\norg.alljoyn.sl.RequestSignals parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUINT32 fromId\n\n\nStart of change_id range.\n\n\n\n\n\n\n\n\norg.alljoyn.sl.RequestRange parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUINT32 fromId\n\n\nStart of change_id range.\n\n\n\n\n\n\nUINT32 toId\n\n\nEnd of change_id range.\n\n\n\n\n\n\n\n\norg.alljoyn.sl.RequestRangeMatch parameters\n\n\n\n\n\n\n\n\nParameter name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUINT32 fromId\n\n\nStart of change_id range\n\n\n\n\n\n\nUINT32 toId\n\n\nEnd of change_id range\n\n\n\n\n\n\nARRAY of STRING matchRules\n\n\nMatch rules to apply to the range.",
            "title": "Sessionless signal"
        },
        {
            "location": "/learn/core/system-description/sessionless-signal/#sessionless-signal",
            "text": "",
            "title": "Sessionless Signal"
        },
        {
            "location": "/learn/core/system-description/sessionless-signal/#overview",
            "text": "The sessionless signal is an AllJoyn  feature that enables \nbroadcasting of signals to all reachable nodes in the AllJoyn \nproximal network. This is different than the session-based signals \ndescribed in  Data Exchange , where signals are sent \nonly to participants connected over a given session or \nmultiple sessions (for session broadcast signals) based on \nsessionId/destination based routing.   Sessionless signals are logically broadcast signals and any \napp on the AllJoyn proximal network interested in receiving \nsessionless signals will receive all sessionless signals sent \nby any other app on that network. The AllJoyn system design \nrefers to sessionless signals as logically broadcast because \nsignals themselves are not broadcast/multicast, only an indication \nfor signals is sent over multicast to all the nodes on the network. \nApplications do not have to be connected over sessions to receive \nsessionless signals, however, the AllJoyn router underneath \nmust establish a session to fetch these signals based on the \nindication received. Applications can specify match rules \n(via AddMatch) to receive a specific set of sessionless \nsignals and the AllJoyn router filters out signals based \non those match rules.   The following figure captures the high-level architecture \nfor the sessionless signal on the provider and consumer sides. \nThe AllJoyn router supports a logical SLS module that implements \nsessionless signal logic. The SLS module makes use of the \nName Service to advertise and discover sessionless signals \nusing a sessionless signal-specific well-known name.   Figure:  Sessionless signal architecture  After AllJoyn router startup, the SLS module executes the \nfollowing steps to prepare itself for sending and/or receiving \nsessionless signals.    Create an object implementing \"org.alljoyn.sl\" interface \nwhich is the interface used between two AllJoyn routers to \nexchange sessionless signals.  Register signal handlers to receive signals from \"org.alljoyn.sl\" interface.  Bind a well-known sessionless signal session port 100 \nto support incoming requests to fetch sessionless signals.    The consumer app interested in receiving sessionless signals \nregisters a match rule with the AllJoyn router to receive \nsessionless signals. As a result, the SLS module initiates \ndiscovery for sessionless providers via the Name Service \n(either the legacy Name Service or NGNS based on the router version).   On the provider side, the app sends a sessionless signal to \nthe AllJoyn router. The SLS module stores the signal in a \nlocal message cache. The provider side sessionless signal \ngenerates a sessionless signal-specific well-known name \nand advertises that over AllJoyn network.   Upon discovering the sessionless signal provider, the consumer \nAllJoyn router establishes a session with the provider side \nAllJoyn router over the well-known session port for sessionless \nsignals. Once the session is established, the consumer SLS module \nfetches sessionless signals via the org.alljoyn.sl interface.   The following sections detail the provider and consumer \nsessionless signal-related behavior.  Sessionless signal enhancement in the 14.06 release  Prior to the 14.06 release, the consumer side SLS module \nprovides the functionality of requesting sessionless signals \nby matching certain filtering criteria specified by the AddMatch \nrule. The consumer fetches sessionless signals from all the \nproviders and applies the AddMatch rules to filter received \nsessionless signals before passing these to interested applications.  The sessionless signal design in the 14.06 release was \nenhanced to enable a consumer application to request sessionless \nsignals from provider applications supporting certain AllJoyn \ninterfaces. For example, a Lighting Controller app can request \nAnnouncement sessionless signals only from those provider apps \nthat implement the org.alljoyn.LightBulb interface.   The following key sessionless signal enhancements made to \nachieve this functionality:   The sessionless signal advertised name was enhanced to add   information from the header of the sessionless signal. \nConsumers use this to fetch sessionless signals only from those \nproviders that are emitting signals from   specified \nin the consumer side match rules. Multiple sessionless signal \nnames are advertised, one for each unique interface in the \nsessionless signal cache.  The match rule definition for AddMatch has been extended to \nadd a new 'implements' key that can be used to indicate the \ndesire to receive the Announcement sessionless signal only \nfrom applications implementing certain AllJoyn interfaces as \nspecified in the application's Announcement signal.   Sessionless signals are only fetched from those providers \nthat support interface details specified in the match rules. \nThe AddMatch match rules are passed to the providers to \nfilter signals based on those match rules.",
            "title": "Overview"
        },
        {
            "location": "/learn/core/system-description/sessionless-signal/#sessionless-signal-end-to-end-logic",
            "text": "The sessionless signal end-to-end logic consists of the \nfollowing aspects, which are detailed in the sections below.   The provider caches signals and advertises the availability of signals.  The consumer discovers sessionless signal providers.  The consumer fetches sessionless signals from a provider.   Provider caches signals and advertises availability  On the provider side, the app sends a signal to the AllJoyn \nrouter with the SESSIONLESS flag set. The SLS module in the \nprovider inserts the signal into its sessionless signal cache. \nThe cache entry uses the combination of (SENDER, INTERFACE, MEMBER, \nand PATH) header fields of the signal as the key.    Subsequent sessionless signals sent to the AllJoyn router \nwith the same (SENDER, INTERFACE, MEMBER, and PATH) header \nfields overwrite the already cached sessionless signal.  The provider AllJoyn router assigns a change_id for sessionless \nsignals. The change_id is used to indicate updates to sessionless \nsignals to consumers on the AllJoyn network. Each sessionless \nsignal cache entry includes (SLS signal, change_id) tuple. \nThe change_id is incremented by the provider only after a new \nsignal is inserted into its cache and a consumer has requested \nsignals from the provider since the last time the change_id was incremented.  The app may remove an entry from the provider's cache by calling \nthe CancelSessionlessMessage method of the org.alljoyn.Bus \ninterface of the /org/alljoyn/Bus object. The entry being \nremoved is specified by the serial number of the signal. \nThe change_id is not incremented when the provider removes \na signal from its cache. The contents of the cache, including \nthe associated change_ids, determine what the provider will advertise.    Prior to the AllJoyn 14.06 release, the SLS module requests \nand advertises the following sessionless signal well-known name:    \"org.alljoyn.sl.x .x \"   where:   GUID is the GUID of the AllJoyn router  change_id is the maximum change_id in the sessionless signal cache.   Starting with the AllJoyn 14.06 release, the SLS module \nrequests and advertises the following sessionless signal well-known names:   \"org.alljoyn.sl.y .x \"   where:   GUID is the GUID of the AllJoyn router   change_id is the maximum change_id in the SLS cache.    \" .sl.y .x \"    where:   INTERFACE is the value of the INTERFACE header field of the signal  GUID is the GUID of the AllJoyn router  change_id is the maximum change_id for signals in the \n    sessionless signal cache having the same value of the \n    INTERFACE header field.     At most, one well-known name is requested and advertised \n  for each unique INTERFACE header field value in the sessionless signal cache.  The following figure shows the provider side SLS module logic \nprior to the AllJoyn 14.06 release.   Figure:  Provider SLS module logic (prior to the AllJoyn 14.06 release)  The following figure shows the provider side SLS module logic \nintroduced in the AllJoyn 14.06 release.   Figure:  Provider SLS module logic (introduced in the AllJoyn 14.06 release)  Consumer discovers sessionless signal providers  On the consumer side, the app registers an interest in a \nsessionless signal by calling the D-Bus AddMatch method.  NOTE:  The D-Bus AddMatch method is part of the org.freedesktop. \nThe D-Bus interface and is implemented by the /org/freedesktop/DBus object.  The match rule includes \"sessionless='t'\" to indicate registration \nfor a sessionless signal, along with any other key/value pairs for \nfiltering signals.    Prior to the AllJoyn 14.06 release, the SLS module starts the \nname-based discovery process to discover the SLS WKN prefix \n\"org.alljoyn.sl.\" after receiving the first sessionless \nmatch rule. When the last match rule is removed by an app \nconnected to the AllJoyn router, the SLS module cancels \ndiscovering the SLS WKN prefix.  Starting with the AllJoyn 14.06 release, the sessionless \nsignal logic on the consumer side was enhanced to enable \nan application requesting sessionless signals from providers \nimplementing certain AllJoyn interfaces. A new 'implements' \nkey was added to the AddMatch method to achieve this. \nThe 'implements' key specifies an AllJoyn interface that \nshould be implemented by the sessionless signal provider. \nMultiple 'implements' key/value pairs may be specified in \na single match rule. These are treated as a logical AND \nwhen discovering sessionless signal providers. In the current \nimplementation, the 'implements' key is only applicable for \nreceiving the Announcement sessionless signal. An AddMatch \nthat includes the 'implements' key should always include \n\"interface= org.alljoyn.About\".  The following figure shows the consumer logic for discovering \nsessionless signal providers implemented in the 14.06 release.   Figure:  Consumer logic for discovering sessionless providers (introduced in the AllJoyn 14.06 release)  If the AddMatch includes the 'interface' key but no 'implements' \nkey, the SLS module performs name-based discovery to discover \nthe name prefix \" .sl.\" for the specified interface \nin the match rule.  If the AddMatch includes one or more 'implements' keys, the \nSLS module performs interface name discovery via the NGNS \nto discover providers implementing interfaces specified by \nthe 'implements' key. The SLS module also performs a name-based \ndiscovery for name prefix \"org.alljoyn.sl.\" both via mDNS \nand using the WHO-HAS message. The latter is intended to \ndiscover any sessionless signal providers prior to the 14.06 \nrelease. Name-based discovery over mDNS is performed to catch \nunsolicited mDNS responses from providers for new/updated \nsessionless signals.  The app unregisters interest in a sessionless signal by \ncalling the RemoveMatch method with a previously added \nmatch rule. When the last sessionless signal match rule is \nremoved, the SLS module stops sessionless signal-related \ndiscovery, including both name-based and interface name discovery.   Consumer fetches sessionless signals from a provider  After discovering a provider, the consumer SLS module \ndetermines if it needs to fetch sessionless signals from \nthe provider based on the consumer's match rules and the \nchange_id of the provider in the advertisement. The consumer \nSLS module keeps track of last acquired change_id for every \nprovider GUID it has discovered via the sessionless signal \nadvertised name. The sessionless signal fetch logic and the \nstate maintained by the consumer for each provider was modified \nin the 14.06 release. The fetch logic functionality differences \nare described below.   Prior to the 14.06 release, the consumer SLS module maintains \nthe List  information \nfor discovered providers. The consumer SLS module fetch sessionless \nsignals if an updated change_id is received from the provider \nas part of the sessionless signal advertised name.  Starting with the 14.06 release, multiple sessionless signal \nadvertised names can be received from a given provider. \nIn addition, the associated change_id can be different for \neach of those sessionless signal advertised names. The consumer \nSLS module maintains the List  \nfor discovered providers. It also keeps track of the match rules \nthat have been applied for a given provider.    The following figure captures the consumer sessionless signal \nfetch logic implemented in the 14.06 release.   Figure:  Consumer logic to determine sessionless signal fetch (introduced in the 14.06 release)  The consumer SLS module receives the sessionless signal \nadvertised name from a provider. The sessionless signal \nname can be received via multiple means:   Solicited mDNS response over unicast as a result of an mDNS query  Unsolicited mDNS response over multicast  IS-AT multicast message (solicited or unsolicited).    The consumer checks if any new match rules have been added \nafter the last fetch from the provider or the received change_id \nin the sessionless signal name is greater than what was fetched \npreviously from that provider.    If either condition is true, the consumer initiates a sessionless \nsignal fetch from a legacy provider (prior to the 14.06 release) \nwithout further checks. This is determined by examining the GUID \nsegment of the sessionless signal advertised name received from the provider:    Prior to the 14.06 release, the GUID is prefixed with an \"x\".  Starting with the 14.06 release, GUID is prefixed with a \"y\".    If the sessionless signal name is from a 14.06 release or \nlater provider, the consumer performs further checks to determine \nif the sessionless signal fetch should be done with the provider.   Starting with the 14.06 release, the sessionless signal name \nalso includes the interface value from the sessionless signal \nheader. In this case, the consumer SLS module checks whether \nthe interface specified (if any) in the match rule is the same \nas the interface received in the sessionless signal name.    If yes, the consumer initiates a sessionless signal fetch \nwith the provider.   If no interface was specified in the match rule, the consumer \ninitiates a sessionless signal fetch anyway because this \nconstitutes a wildcard match.    In the 14.06 release, a new RequestRangeMatch() signal is \ndefined as part of the org.alljoyn.sl interface. This signal \nis used to fetch a set of sessionless signals that matches \nany of the match rules specified in the RequestRangeMatch()\nsignal. The consumer SLS module uses this signal to fetch \nsessionless signals from the 14.06 providers.   NOTE:  The current implementation does a catchup fetch for \nnew match rules before fetching new signals for updated \nchange_id. This results in two fetches upon receiving the \nsessionless signal advertised name, however, this would be \na rare occurrence because adding a new match rule and \nreceiving a sessionless signal advertised name typically \ndoes not occur at the same time.  Whenever a new AddMatch rule is added for sessionless signals, \nthe consumer SLS module triggers a catchup fetch with already \nknown providers for the new match rule per the logic captured \nin  Consumer fetches sessionless signals from a provider . For a catchup fetch, the \nRequestRangeMatch signal only includes the new match rule. \nIf the new AddMatch includes an 'implements' key, the consumer \nSLS module performs discovery for providers implementing those interfaces.  The consumer schedules a sessionless signal fetch immediately \nfor sessionless signal advertised names received in the \nsolicited mDNS or IS-AT response messages. For sessionless signal \nadvertised names received as part of the unsolicited mDNS or IS-AT \nresponse messages, the sessionless signal fetch is scheduled \nfollowing a backoff algorithm as described in  Sessionless signal fetch backoff algorithm .   The steps to fetch sessionless signals follow.   The consumer SLS module joins a session with the sessionless \nsignal advertised name and known SLS port (port=100).   The consumer sends one of the signals defined in the \norg.alljoyn.sl ( RequestSignals() ,  RequestRange() , or  RequestRangeMatch() ) \nto the provider over established session to fetch sessionless signals.   The provider receives the request signal, sends the requested \nsessionless signals and leaves the session.     For details of which signals the provider sends from its cache \nto the consumer, see the definition of these signals in  org.alljoyn.sl interface .   The consumer receives the sessionless signals, and filters and \nroutes them according to its match rules. The consumer SLS module \nmaintains the information about the match rules applied and change_id \nfetched from the provider for future sessionless signal fetches.  Sessionless signal fetch backoff algorithm  After determining that it needs to fetch sessionless signals \nfrom a given provider as per the logic described above, the \nconsumer SLS module attempts a join session with the producer \nto fetch sessionless signals. If the consumer's first join session \nattempt fails, it follows a backoff based retry logic to do \nthe join session for the sessionless signal fetch from the \nprovider. The SLS fetch logic adds random delays at different \nconsumers to ensure that consumer requests for sessionless \nsignals fetch are distributed over time for a given provider.   The Consumer SLS module follows a mix of linear plus exponential \nbackoff retries for sessionless signals fetch. It supports a \nhybrid of first few linear backoff retries followed by some \nexponential backoff retries. The transition point between the\nlinear and exponential backoff is configurable. The backoff \ninterval is capped off to a maximum configurable value. \nRetries are performed for a total retry period R. Once the \nmax backoff interval is reached, retries continue with the \nconstant retry period (set to max backoff interval) until the\ntotal retry period R is elapsed.  The following configuration parameters have been added in \nthe router config file:  Linear to Exponential Transition Point (k) - Specifies the \nretry attempt after which backoff should become exponential.  Max Backoff Interval Factor (c) - Specifies the multiplication \nfactor for T (initial backoff time) to generate the max backoff interval.\n* Total Retry Period (R) - Specifies the total time period (in seconds) \nfor which SLS fetch retry must be attempted.  The following figure shows an example SLS retry schedule with \nSLS retries happening at T, 2T, 3T, 4T, 8T, 16T, 32T, 32T, 32T,....   Figure:  SLS fetch backoff schedule example  For every SLS retry attempt, the join session with the producer \nis delayed randomly between [0, retry interval] to make sure \nConsumer requests are distributed over time. For example in \nthe figure above:  The Consumer join session for 4th SLS fetch retry \nwill be randomly delayed between [0, 4T] interval.   The Consumer join session for nth SLS fetch retry will \nbe randomly delayed between [0,16T] interval.  For the SLS fetch triggered as a result of solicited mDNS \ndiscovery responses, the join session request is not delayed \nrandomly. In this case, the join session for SLS fetch is \ndone immediately. The AllJoyn router will serialize such an SLS \nfetch if the max connections limit on the Consumer is reached.",
            "title": "Sessionless signal end-to-end logic"
        },
        {
            "location": "/learn/core/system-description/sessionless-signal/#sessionless-signal-message-sequences-prior-to-the-1406-release",
            "text": "Since the sessionless logic has changed quite a bit in the \n14.06 release, separate SLS message sequences are captured \nprior to the 14.06 release and starting from the 14.06 release.    The following use cases detail sessionless signal logic \nscenarios prior to the 14.06 release:   First sessionless signal delivery  Another AddMatch done by the same app  Another app requests sessionless signals   First sessionless signal delivery  The following figure shows the message flow for the use \ncase for sending and receiving the first sessionless signal \non the provider and consumer, respectively.  NOTE:  The sessionless signal change_id is not carried in any \nof the sessionless signal messages. However, the provider \nAllJoyn router logic ensures that it only sends sessionless \nsignal messages up to the change_id that was discovered by \nthe consumer. When the JoinSession is done by the consumer, \nit uses the sessionless signal well-known name discovered \nfrom the IS-AT message. The change_id included in that well-known \nname provides the upper limit for the change_id for sending \nsessionless signals to the consumer.   A similar message flow is applicable for the use case when a \nsubsequent sessionless signal is delivered. The main difference \nis that the provider updates the change_id, if applicable, as\nper the change_id update logic described above.   Figure:  First sessionless signal delivery  The message flow steps are described below.   Both provider and consumer apps connect to the AllJoyn \nrouter, and a unique name is assigned to the app endpoint \nby the AllJoyn router.  The provider app registers its service object implementing \nan interface containing signal member with the AllJoyn core library.   The consumer app registers a signal handler for the \nsessionless signal by invoking the AllJoyn core library's  RegisterSignalHandler  API.  The consumer app invokes AllJoyn core library's  AddMatch  \nAPI to add a rule for receiving sessionless signals. The API \nspecifies a signal match rule with type='signal', sessionless='t' \nand other applicable parameters.   The AllJoyn core library invokes the AllJoyn router's AddMatch \nmethod to add the sessionless signal filtering rule at the AllJoyn router.  The consumer AllJoyn router invokes  FindAdvertisedName()  \nwith the sessionless SLS WKN prefix \"org.alljoyn.sl\" to discover \nproviders offering sessionless signals.  The consumer AllJoyn router sends a WHO-HAS message for \n\"org.alljoyn.sl\" prefix.  The provider app has a sessionless signal to send. \nIt invokes the BusObject Signal(...) call which generates an \nAllJoyn SIGNAL message with the sessionless flag set to true.  The SIGNAL message is sent from the app to the AllJoyn router.   The provider AllJoyn router stores the signal in the sessionless \nsignal cache and assigns a new sessionless signal change_id number.  The provider AllJoyn router generates a well-known name \nfor the sessionless signal with the latest change_id using \nthe format org.alljoyn.sl.x .x .  The provider AllJoyn router does a RequestName for this \nwell-known name to reserve this name. It then calls the  AdvertiseName  method to advertise this name on the AllJoyn network.   The provider AllJoyn router sends out an IS-AT message \nwith the generated sessionless signal well-known name.  The consumer AllJoyn router receives the IS-AT message \nthat passes the prefix matching for \"org.alljoyn.sl\". \nA FoundAdvertisedName signal gets generated for the the \nsessionless signal prefix.  The consumer AllJoyn router compares its current change_id \nfor the AllJoyn router GUID in the IS-AT message with the \nchange_id received in the IS-AT message. It determines that \nthe received change_id is different than the current change_id \nand it needs to get the new set of sessionless signals from \nthe provider AllJoyn router.  The consumer AllJoyn router invokes the  JoinSessionAsync  \nmethod to start a session with the provider AllJoyn router. \nIt specifies the sessionless signal wel-known name and the \nsessionless session port among other parameters.\n  This initiates a session attachment flow at the AllJoyn router \n  level between the consumer and provider.   Once the session is established, the consumer AllJoyn router \nsends a RequestSignals signal to request the latest set of \nsessionless signals from the provider app. This signal includes \nthe last acquired change_id for the GUID of provider AllJoyn router.  The provider AllJoyn router sends SIGNAL messages for all \nsessionless signals added after the change_id provided in the \nRequestSignals message. The SIGNAL messages have destination \nas local endpoint of the consumer AllJoyn router.   Once all SIGNAL messages have been sent, the provider \nAllJoyn router initiates a LeaveSession method for the connected \nsession. This triggers sending a DetachSession SIGNAL message \nto the consumer AllJoyn router.   After receiving the DetachSession signal, the consumer \nAllJoyn router knows that it has received all new sessionless \nsignals from the provider AllJoyn router. It then updates \nits change_id for that GUID to the latest received change_id \nfrom the IS_AT message.   The consumer AllJoyn router filters the received sessionless \nsignal messages based on the registered AddMatch rules for \nthe sessionless signals.  The consumer AllJoyn router sends SIGNAL messages to the \nAllJoyn core library via callback. The AllJoyn core library \nin turn calls the registered signal handler for the sessionless signal.    Another AddMatch done by the app  A consumer app might invoke a subsequent AddMatch call for \nsessionless signals. Prior to the 14.06 release, this is \ninterpreted as adding another rule for filtering future received \nsessionless signals.    At the AllJoyn router, any future received SLS messages \nwill be filtered based on the combined set of match rules.   If there is a more restrictive rule which matches a small \nset of sessionless signals and there is another less restrictive \nrule which matches a larger superset of signals, AllJoyn router \nwill always send larger superset of signals to the app.    NOTE:  The AllJoyn router does not re-fetch sessionless signal \nmessages associated with the existing change_id when a new match \nrule is added. The new match rule is applied to any future \nreceived messages. Starting with the 14.06 release, this behavior \nwas modified and the SLS module initiates the sessionless signal \nfetch whenever any new match rule is added.  The following figure shows the message flow for the scenario \nwhere another AddMatch is done by the same app. Most of the steps \nare same as the first sessionless signal delivery. The main difference \nis that no FindAdvertisedName needs to be done for \"org.alljoyn.sl\" \nbecause discovery for the SLS WKN prefix was already initiated \nat the time of receiving first AddMatch for the sessionless \nsignal and is already in progress.   Figure:  Another add match done by the app  Another app requesting for sessionless signal  For the use case where multiple apps are connected to a \ngiven AllJoyn router, each application can invoke the  AddMatch  \ncall to add match rules for sessionless signals with the AllJoyn \nrouter. These AddMatch calls can be received at different times. \nWhen the first AddMatch call is received from an app, the AllJoyn \nrouter re-fetches the currently valid sessionless signals \nfrom the already discovered providers for sending to that app. \nThe AllJoyn router uses the RequestRange signal to fetch the \ncurrent set of sessionless signals.  The following figure shows the message flow for the scenario \nwhen a subsequent app performs the first AddMatch for sessionless signals.   Figure:  Another app requesting for sessionless signals",
            "title": "Sessionless signal message sequences (prior to the 14.06 release)"
        },
        {
            "location": "/learn/core/system-description/sessionless-signal/#sessionless-signal-message-sequences-1406-release",
            "text": "In the 14.06 release, the sessionless signal logic was enhanced \nas described earlier. This section captures the sessionless \nsignal message sequences with the enhanced logic. The following \nuse cases are detailed:   First sessionless signal delivery  Sessionless signal delivery between a new consumer and a legacy provider   Sessionless signal delivery between a legacy consumer and a new provider   Subsequent AddMatch done by an app   First sessionless signal delivery  This use case defines when the first AddMatch is done by a \nconsumer app to receive sessionless signals. The match rules \nspecified in the AddMatch may or may not include the new 'implements' \nkey. Both use cases are captured accordingly:   AddMatch does not include 'implements' key  AddMatch includes 'implements' key   AddMatch does not include 'implements' key  The following figure shows the message flow for sending and \nreceiving the first sessionless signal for the use case when \nAddMatch does not include an 'implements' key/value pair.   Figure:  First sessionless signal delivery (no 'implements' key in AddMatch)  The message flow steps are described below.\n1. Both the provider and consumer apps connect to the AllJoyn router.\n2. The provider app registers its service object implementing \nan interface containing signal member with the AllJoyn core library. \n3. The consumer app registers a signal handler for the sessionless \nsignal by invoking the AllJoyn core library's RegisterSignalHandler API.\n4. The consumer app invokes the AllJoyn core library's \nAddMatch API to add a rule for receiving sessionless signals. \nThe API specifies a signal match rule with type='signal', \ninterface=' ', sessionless='t' and other applicable parameters. \n5. The AllJoyn core library invokes the AllJoyn router's \nAddMatch method to add the sessionless signal filtering \nrule at the AllJoyn router.\n6. The consumer AllJoyn router invokes the  FindAdvertisedName  \nmethod with the SLS WKN prefix \"org.alljoyn.sl.\" to discover \nproviders prior to the 14.06 release and SLS WKN \" sl.\" \nto discover new providers starting in the 14.06 release. \n7. The consumer AllJoyn router sends out name-based \nquery messages using the NGNS.\n8. The provider app has a sessionless signal to send. \nIt invokes the  BusObject Signal(...)  call which generates \nan AllJoyn SIGNAL message with SESSIONLESS flag set to true.\n9. The SIGNAL message is sent from app to the AllJoyn router. \n10. The provider AllJoyn router stores the signal in the sessionless signal cache.\n11. The provider AllJoyn router generates the following:\n   * A well-known name for the sessionless signal of the format \n   \"org.alljoyn.sl.y .x \" with the latest change_id. \n   * A second well-known name for the sessionless signal of \n   the format \" .y .x \" with the \n   latest change_id associated with signals generated \n   by the given  .\n12. The provider AllJoyn router invokes the RequestName \nand AdvertiseName method calls to request and advertise these names. \n13. The provider AllJoyn router sends out a Name Service \nresponse messages to advertise these sessionless signal \nwell-known names using NGNS.\n14. The consumer AllJoyn router receives the Name Service \nresponse messages which pass the prefix matching for \"org.alljoyn.sl.\" \nor \" .y .x \". A FoundAdvertisedName \nsignal gets generated for the advertisements.\n15. The consumer determines that it needs to fetch sessionless \nsignals from the provider, based on the received sessionless \nsignal advertised name, change_id comparison, and current \nset of match rules as per logic described in  Consumer fetches \nsessionless signals from a provider . \n16. The consumer AllJoyn router invokes JoinSessionAsync \nmethod call to start a session with the provider AllJoyn router. \nIt specifies the sessionless signal well-known name and \nsessionless session port among other parameters.\n   This initiates a session attachment flow at the AllJoyn \n   router level between the consumer and provider. \n17. Once the session is established, the consumer AllJoyn \nrouter sends the RequestRangeMatch signal to request the \nlatest set of sessionless signals from the provider device. \nThis signal includes last acquired change_id for the GUID \nof provider AllJoyn router, and the match rules that have \nnot yet been applied to the provider GUID.\n18. The provider AllJoyn router sends the AllJoyn SIGNAL \nmessages for all sessionless signals added that pass the \nmatch rules in the range provided in the RequestRangeMatch signal.\n19. Once all SIGNAL messages have been sent, the provider \nAllJoyn router initiates LeaveSession for the connected session. \nThis triggers sending a DetachSession SIGNAL message to the \nconsumer AllJoyn router. \n20. After receiving the DetachSession signal, the consumer \nAllJoyn router knows that it has received all new sessionless \nsignals from the provider AllJoyn router. It then updates its \nchange_id for that GUID to the latest received change_id \nfrom the advertisement and also updates status for match \nrules which have been applied to that provider. \n21. The consumer AllJoyn router sends SIGNAL messages to the \nAllJoyn core library via callback. The AllJoyn core library \nin turn calls the registered signal handler for the sessionless signal.   AddMatch includes the 'implements' key  The following figure shows the message flow for sending and \nreceiving of the first sessionless signal for the use case \nwhen AddMatch includes one or more 'implements' key/value pair.   NOTE:  Currently, the 'implements' key only applies to the \nAnnouncement sessionless signal. As a result, the AddMatch \nin this case must include \"interface=org.alljoyn.About\", \nwhich is the interface that emits the Announcement signal.  The AllJoyn router initiates interface name discovery via \nNGNS to find providers which implements the specified interfaces. \nOnce those providers are discovered, the consumer AllJoyn router \nfetches the Announcement signals from those providers.   Figure:  First sessionless signal delivery (with implements' key in AddMatch)  Sessionless signal delivery between a new consumer and a legacy provider  The following figure shows the message flow when a new consumer \n(14.06 release or later) received sessionless signals from a \nlegacy provider (prior to the 14.06 release).   Figure:  Sessionless signal logic between new consumer and legacy provider  Sessionless signal delivery between a legacy consumer and a new provider  The following figure shows the message flow when a legacy consumer \n(prior to the 14.06 release) is receiving sessionless signals \nfrom a new provider (14.06 release or later).   Figure:  Sessionless signal logic between legacy consumer and new provider  Subsequent AddMatch done by an app  After the first AddMatch call to the AllJoyn router, applications \ncan subsequently invoke other AddMatch calls to add more \nmatch rules for sessionless signals.   Starting from the 14.06 release, whenever an AddMatch call \nis invoked by any app, the SLS module takes steps to trigger \nfetch for sessionless signal messages. The logic is quite \nsimilar to the first sessionless signal delivery use case \nin  First sessionless signal delivery . \nThe additional step is to fetch sessionless signal messages \nfrom existing providers that match the specified filtering \ncriteria for sessionless signals.  The consumer SLS module remembers the sessionless signal \nadvertised name it has received from each provider. For the \nnew AddMatch rule that doesn't include implements key, the \nconsumer uses the match rule to find matching providers among \nexisting providers and fetches sessionless signals from those providers.  The consumer SLS module performs the following steps.   Perform interface name discovery for providers for \nany new 'implements' key/value pair specified in AddMatch. \nFetch the sessionless signals from the discovered providers.  Perform name-based discovery for \" .sl\" for any \nnew interface value specified in AddMatch, for which discovery \nwas not already done. Fetch the sessionless signals from \nthe discovered providers.  Fetch the sessionless signals from the already known providers \nif the sessionless signal name received from these providers \nmatch the filtering criteria specified in match rule.",
            "title": "Sessionless signal message sequences (14.06 release)"
        },
        {
            "location": "/learn/core/system-description/sessionless-signal/#orgalljoynsl-interface",
            "text": "The org.alljoyn.sl interface is the AllJoyn interface between \ntwo AllJoyn routers used to enable the exchange of sessionless \nsignals.  org.alljoyn.sl interface signals  \nlists the org.alljoyn.sl interface signals.  org.alljoyn.sl interface signals     Signal name  Description      RequestSignals  Requests sessionless signals associated with change_ids in the range [fromId, currentChangeId], where currentChangeId is the most recently advertised change_id of the provider.    RequestRange  A signal for requesting sessionless signals associated with change_ids in the range [fromId, toId). NOTE:  The \"toId\" is exclusive so a consumer should set toId= +1 if it wants to get SLS up to the change_id_value. This signal appeared in version 6 of the AllJoyn protocol.    RequestRangeMatch  A signal for requesting sessionless signals associated with change_ids in the range [fromId, toId) that match any of the provided match rules. The \"toId\" is exclusive in this signal too. This signal appeared in version 10 of the AllJoyn protocol (associated with the 14.06 release).     org.alljoyn.sl.RequestSignals parameters     Parameter name  Description      UINT32 fromId  Start of change_id range.     org.alljoyn.sl.RequestRange parameters     Parameter name  Description      UINT32 fromId  Start of change_id range.    UINT32 toId  End of change_id range.     org.alljoyn.sl.RequestRangeMatch parameters     Parameter name  Description      UINT32 fromId  Start of change_id range    UINT32 toId  End of change_id range    ARRAY of STRING matchRules  Match rules to apply to the range.",
            "title": "org.alljoyn.sl interface"
        },
        {
            "location": "/learn/core/system-description/system-architecture/",
            "text": "System Architecture \u7cfb\u7edf\u7ed3\u6784\n\n\nNetwork architecture \u7f51\u7edc\u7ed3\u6784\n\n\nThe AllJoyn\n network architecture is dependent upon the network \ndeployment scenario. This section captures the following deployment scenarios:\n AllJoyn\n \u7f51\u7edc\u7ed3\u6784\u7531\u7f51\u7edc\u7684\u90e8\u7f72\u65b9\u6848\u51b3\u5b9a\u3002\u8fd9\u90e8\u5206\u5305\u542b\u4e86\u4ee5\u4e0b\u51e0\u79cd\u90e8\u7f72\u65b9\u6848\uff1a\n\n\n\n\nStandalone AllJoyn network: A proximal network with a set \nof peer devices which could be connected over the same or \ndifferent access mediums.\n\n\n\n\n\u72ec\u7acb AllJoyn \u7f51\u7edc\uff1a\u4e00\u4e2a\u62e5\u6709\u4e00\u7cfb\u5217\u5bf9\u7b49\u8bbe\u5907\u7684\u4e34\u57df\u7f51\u7edc\u3002\u8bbe\u5907\u4e4b\u95f4\u53ef\u4ee5\u901a\u8fc7\u76f8\u540c\u6216\u4e0d\u540c\u7684\u4ecb\u8d28\u76f8\u4e92\u8fde\u63a5\u3002\n\n\n\n\n\n\nRemote accessible AllJoyn network: A proximal network \nwhere services provided by devices are accessible and controllable \nfrom outside the proximal network.\n\n\n\n\n\u8fdc\u7a0b\u8bbf\u95ee\u7684 AllJoyn \u7f51\u7edc\uff1a\u4e00\u4e9b\u8bbe\u5907\u4e3a\u4e34\u57df\u7f51\u7edc\u63d0\u4f9b\u4e86\u88ab\u4e34\u57df\u7f51\u7edc\u4e4b\u5916\u7684\u7684\u7f51\u7edc\u8bbf\u95ee\u548c\u63a7\u5236\u7684\u529f\u80fd\u3002\n\n\n\n\nStandalone AllJoyn network \u72ec\u7acb AllJoyn \u7f51\u7edc\n\n\nA standalone AllJoyn network architecture is fairly simple \nwith two or more peer nodes coming together to dynamically \nform an AllJoyn network.  Peers can be connected over different \naccess networks such as Wi-Fi. The AllJoyn advertisement and \ndiscovery mechanism takes care of seamlessly discovering \nthese peers independent of the underlying transport being used. \n\n\n\u72ec\u7acb AllJoyn \u7f51\u7edc\u7ed3\u6784\u662f\u76f8\u5f53\u7b80\u5355\u7684\u3002\u5b83\u7531\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u8282\u70b9\u52a8\u6001\u5f62\u6210\u3002\u8282\u70b9\u4e4b\u95f4\u53ef\u901a\u8fc7\u4e0d\u540c\u7684\u63a5\u5165\u65b9\u5f0f\uff08\u5982 WI-FI\uff09\u8fdb\u884c\u8fde\u63a5\u3002Alljoyn \u7684 advertisement \u548c discovery \u673a\u5236\u53ef\u4ee5\u65e0\u89c6\u57fa\u7840\u7f51\u7edc\u4f20\u8f93\u65b9\u5f0f\uff0c\u65e0\u7f1d\u5730\u53d1\u73b0\u8fd9\u4e9b\u8282\u70b9\u3002\nThe following figure captures the network architecture for a \ntypical standalone AllJoyn network.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u72ec\u7acb ALlJoyn \u7f51\u7edc\u7684\u7ed3\u6784\u3002\n\n\n\n\n\u56fe:\n Standalone \u72ec\u7acb AllJoyn \u7f51\u7edc\u7ed3\u6784\n\n\nNOTE:\n In a Wi-Fi deployment, the AllJoyn framework requires \nwireless isolation to be turned off at the access points to \nenable peer-to-peer communication.\n\n\u6ce8\u610f:\n \u5728 Wi-Fi \u90e8\u7f72\u4e2d\uff0c\u9700\u8981\u5173\u95ed\u63a5\u5165\u70b9\u7684\u65e0\u9650\u72ec\u7acb\u529f\u80fd\u4ee5\u5141\u8bb8\u7aef\u5bf9\u7aef\u7684\u8fde\u63a5\u3002\n\n\nBridging multiple transports \u6865\u63a5\u591a\u79cd\u4f20\u8f93\u65b9\u5f0f\n\n\nA standalone AllJoyn network can involve nodes connected \nover both wireless and wired transport, e.g., nodes connected \nover Wi-Fi, PLC, and Ethernet. Nodes in such a network can \ncommunicate with each other as long as wireless isolation \nis not enabled on the Wi-Fi Access Point (AP).\n\u72ec\u7acb AllJoyn \u7f51\u7edc\u80fd\u591f\u5305\u542b\u901a\u8fc7\u6709\u7ebf\u548c\u65e0\u7ebf\u65b9\u5f0f\u8fde\u63a5\u7684\u8282\u70b9\uff0c\u5982\u901a\u8fc7 Wi-Fi\u3001PLC\u3001Ethernet \u8fde\u63a5\u7684\u8282\u70b9\u3002\u53ea\u8981 Wi-Fi Access Point\uff08AP\uff09\u4e0a\u7684 wireless isolation \u88ab\u5173\u95ed\uff0c\u7f51\u7edc\u4e2d\u7684\u5404\u4e2a\u8282\u70b9\u4e4b\u95f4\u5c31\u53ef\u4ee5\u76f8\u4e92\u901a\u4fe1\u3002\n\n\nThe following figure captures the high-level network architecture \nfor an AllJoyn network with devices connected over Wi-Fi, PLC, \nand Ethernet transports.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u4f7f\u7528 Wi-Fi\u3001PLC\u3001Ethernet \u63a5\u5165\u65b9\u5f0f\u7684\u8bbe\u5907\u6784\u6210\u7684\u9ad8\u89c4\u683c\u7684 AllJoyn \u7f51\u7edc\u7ed3\u6784\u3002\n\n\n\n\nFigure:\n Bridging multiple transports \u6865\u63a5\u591a\u79cd\u4f20\u8f93\u65b9\u5f0f\n\n\nRemote accessible AllJoyn network \u53ef\u8fdc\u7a0b\u64cd\u4f5c\u7684 AllJoyn \u7f51\u7edc\n\n\nA remote accessible AllJoyn network is a proximal IoE network \nwhere services provided by devices are accessible and/or controllable \nfrom outside the proximal IoE network. The remote accessibility is \nachieved by having a Gateway node in the system. The Gateway node \nexposes device functionality and control to an existing cloud-based \nservice either via standard Internet style APIs (e.g. REST). A mobile \ndevice outside the proximal IoE network can communicate with devices \nin the proximal IoE network via the cloud-based service and via the \nGateway node.\n\n\u53ef\u8fdc\u7a0b\u64cd\u4f5c\u7684 AllJoyn \u7f51\u7edc\u662f\u4e00\u79cd proximal IoE network\u3002\u8be5\u7f51\u7edc\u4e2d\u7684\u8bbe\u5907\u63d0\u4f9b\u4e86\u88ab\u8fdc\u7a0b\uff08\u5728 proximal IoE network \u4e4b\u5916\uff09\u8bbf\u95ee\uff0f\u63a7\u5236\u7684\u670d\u52a1\u3002\u8fdc\u7a0b\u63a5\u5165\u7684\u670d\u52a1\u662f\u7531\u7cfb\u7edf\u4e2d\u7684 Gateway \u8282\u70b9\u5b9e\u73b0\u7684\u3002Gateway \u8282\u70b9\u901a\u8fc7\u6807\u51c6 Internet \u6846\u67b6 API\uff08\u5982 REST\uff09\u5c06\u8bbe\u5907\u7684\u529f\u80fd\u548c\u63a7\u5236\u6743\u9650\u653e\u7f6e\u5728\u73b0\u6709\u7684\u57fa\u4e8e\u4e91\u7684\u670d\u52a1\u4e0a\u3002\n\n\nThe following figure captures the high-level network architecture \nfor a remote accessible AllJoyn network.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u53ef\u8fdc\u7a0b\u8bbf\u95ee AllJoyn \u7f51\u7edc\u7684\u9ad8\u89c4\u683c\u7684 AllJoyn \u7f51\u7edc\u7ed3\u6784\u3002\n\n\n\n\n\u56fe:\n \u53ef\u8fdc\u7a0b\u8bbf\u95ee AllJoyn \u7f51\u7edc\u7684\u9ad8\u89c4\u683c\u7684 AllJoyn \u7f51\u7edc\u7ed3\u6784\n\n\nDevice architecture \u8bbe\u5907\u7ed3\u6784\n\n\nAn AllJoyn-enabled device can support one or more AllJoyn \napplications. The AllJoyn router can be bundled with each of \nthese applications on devices such as mobile phone and tablets. \nAlternately, the AllJoyn router can be installed separately as \na standalone router on the device and multiple applications can \nmake use of it; examples of devices include TVs and set-top boxes \n(STBs). There can also be hybrid deployment cases where a single \ndevice has both a bundled AllJoyn router for certain apps and a \nstandalone AllJoyn router for other apps on the device.\n\n\u4e00\u4e2a AllJoyn \u8bbe\u5907\u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002AllJoyn \u8def\u7531\u53ef\u4ee5\u4e0e\u8bbe\u5907\uff08\u5982\u624b\u673a\u548c\u5e73\u677f\u7535\u8111\uff09\u4e0a\u7684\u4efb\u4e00\u5e94\u7528\u7a0b\u5e8f\u6346\u7ed1\u3002\u6216\u8005\uff0cAllJoyn \u8def\u7531\u88ab\u4ee5\u72ec\u7acb\u8def\u7531\u7684\u8eab\u4efd\u5b89\u88c5\u5728\u8bbe\u5907\u4e0a\uff0c\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u8def\u7531\uff0c\u5982\u7535\u89c6\u548c\u673a\u9876\u76d2\uff08STB\uff09\u3002\u53e6\u5916\uff0c\u6346\u7ed1\u8def\u7531\uff08\u4e3a\u7279\u5b9a\u5e94\u7528\u7a0b\u5e8f\uff09\u548c\u72ec\u7acb\u8def\u7531\uff08\u4e3a\u8bbe\u5907\u4e0a\u7684\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\uff09\u53ef\u4ee5\u540c\u65f6\u5b58\u5728\u5728\u4e00\u4e2a\u8bbe\u5907\u4e0a\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6df7\u5408\u90e8\u7f72\u65b9\u5f0f\u3002\n\n\nNOTE;\n An app always looks for a preinstalled AllJoyn core, so \nthis will only happen if the preinstalled AllJoyn core was a \nlower version than the bundled AllJoyn core.\n\n\u6ce8\u610f:\n \u5982\u679c\u67d0\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u59cb\u7ec8\u5728\u641c\u7d22 preinstalled AllJoyn core\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u6b64 preinstalled AllJoyn core \u6bd4 bundled AllJoyn core \u7684\u7248\u672c\u4f4e\u6240\u5bfc\u81f4\u7684\u3002\n\n\nThe following deployment scenarios are captured for the AllJoyn device:\n\u901a\u5e38\u6709\u4ee5\u4e0b\u51e0\u79cd\u90e8\u7f72 AllJoyn \u8bbe\u5907\u7684\u65b9\u6848\uff1a\n\n\n\n\nSingle app with bundled AllJoyn router\n\n\nMultiple apps with bundled AllJoyn router\n\n\nMultiple apps with standalone AllJoyn router\n\n\n\u5355\u4e00\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1\u7684 AllJoyn \u8def\u7531\n\n\n\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1\u7684 AllJoyn \u8def\u7531\n\n\n\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u72ec\u7acb\u7684 AllJoyn \u8def\u7531\n\n\n\n\nSingle app with bundled AllJoyn router \u5355\u4e00\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1\u7684 AllJoyn \u8def\u7531\n\n\nIn this deployment, the AllJoyn application package includes \nan app and an AllJoyn router. The app can support application-specific \nservices as well as one or more service frameworks. The application \nconnects to the AllJoyn router via the AllJoyn standard core library. \nIn case of the bundled AllJoyn router, the communication between \nthe app and AllJoyn router is local (within the same process) \nand can be done using function/API calls.\n\u6b64\u90e8\u7f72\u65b9\u5f0f\u4e2d\uff0cAllJoyn \u5e94\u7528\u7a0b\u5e8f\u5305\u5305\u542b\u4e86\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u548c\u4e00\u4e2a AllJoyn \u8def\u7531\u3002\u6b64\u5e94\u7528\u7a0b\u5e8f\u652f\u6301\u5e94\u7528\u4e13\u5c5e\u670d\u52a1\u548c\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u67b6\u6784\u3002\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 AllJoyn \u6807\u51c6\u5185\u6838\u8d44\u6e90\u5e93\u8fde\u63a5 AllJoyn \u8def\u7531\u3002\u5728\u6346\u7ed1\u8def\u7531\u7684\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u548c AllJoyn \u8def\u7531\u4e4b\u95f4\u7684\u901a\u4fe1\u662f\u4ec5\u5728\u672c\u5730\u7684\uff08\u901a\u8fc7\u540c\u4e00\u8fdb\u7a0b\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 function\uff0fAPI \u6765\u5b9e\u73b0\u3002\n\n\nThe following figure captures the AllJoyn device architecture \nfor a single app with bundled AllJoyn router deployment scenario.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u5355\u4e00\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1 AllJoyn \u8def\u7531\u90e8\u7f72\u65b9\u5f0f\u7684 AllJoyn \u8bbe\u5907\u7ed3\u6784\u3002\n\n\n\n\n\u56fe:\n AllJoyn \u8bbe\u5907\u7ed3\u6784 (\u5355\u4e00\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1 AllJoyn \u8def\u7531)\n\n\nMultiple apps with bundled AllJoyn router \u591a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1 AllJoyn \u8def\u7531\n\n\nIn this deployment, the AllJoyn-enabled device supports multiple \napplications. Each of these applications has a separate instance \nof an AllJoyn router bundled with that application package. \n\u6b64\u90e8\u7f72\u65b9\u5f0f\u4e2d\uff0cAllJoyn \u8bbe\u5907\u652f\u6301\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u6bcf\u4e00\u4e2a\u7a0b\u5e8f\u5305\u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u90fd\u6709\u4e00\u4e2a\u4e0e\u81ea\u5df1\u76f8\u6346\u7ed1\u7684 AllJoyn \u8def\u7531\u3002\n\n\nThe following figure captures the AllJoyn device architecture \nfor multiple apps with a bundled AllJoyn router deployment scenario.\n\n\n\u4e0b\u56fe\u5c55\u793a\u4e86\u591a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1 AllJoyn \u8def\u7531\u90e8\u7f72\u65b9\u5f0f\u7684 AllJoyn \u8bbe\u5907\u7ed3\u6784\u3002\n\n\n\n\n\u56fe:\n AllJoyn \u8bbe\u5907\u7ed3\u6784 \uff08\u591a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1 AllJoyn \u8def\u7531)\n\n\nMultiple apps with standalone AllJoyn router \u591a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u72ec\u7acb AllJoyn \u8def\u7531\n\n\nIn this deployment, the AllJoyn-enabled device supports a \nstandalone AllJoyn router. The multiple applications on the \ndevice connect using the same standalone AllJoyn router. \nThe communication between an application and the standalone \nAllJoyn router happens across process boundaries and can \nhappen over transports like UNIX domains sockets or TCP\u3002\n\n\n\u6b64\u90e8\u7f72\u65b9\u5f0f\u4e2d\uff0cAllJoyn \u8bbe\u5907\u63d0\u4f9b\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684 AllJoyn \u8def\u7531\u3002\u540c\u4e00\u8bbe\u5907\u4e0a\u7684\u4e0d\u540c\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u540c\u4e00\u4e2a\u72ec\u7acb AllJoyn \u8def\u7531\u8fde\u63a5\u7f51\u7edc\u3002\u5e94\u7528\u7a0b\u5e8f\u548c\u72ec\u7acb AllJoyn \u8def\u7531\u4e4b\u95f4\u7684\u901a\u4fe1\u8de8\u8d8a\u8fdb\u7a0b\u8fb9\u754c\uff0c\u80fd\u591f\u5728\u5982 UNIX domains sockets \u548c TCP \u7684\u4f20\u8f93\u65b9\u5f0f\u4e0b\u5b9e\u73b0\u3002\n\n\nThe following figure captures the AllJoyn device architecture \nfor multiple apps with a standalone AllJoyn router deployment scenario.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u591a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u72ec\u7acb AllJoyn \u8def\u7531\u90e8\u7f72\u65b9\u5f0f\u7684 AllJoyn \u8bbe\u5907\u7ed3\u6784\u3002\n\n\n\n\n\u56fe:\n AllJoyn \u8bbe\u5907\u7ed3\u6784 \uff08\u591a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u72ec\u7acb AllJoyn \u8def\u7531)\n\n\nAllJoyn router architecture AllJoyn \u8def\u7531\u7ed3\u6784\n\n\nThe AllJoyn router provides a number of functionalities to \nenable key features of the AllJoyn framework. The following \nfigure captures the functional architecture for the AllJoyn router.\nAllJoyn \u8def\u7531\u4e3a AllJoyn \u67b6\u6784\u7684\u5173\u952e\u6027\u529f\u80fd\u63d0\u4f9b\u4e86\u8bb8\u591a\u529f\u80fd\u4e0a\u7684\u652f\u6301\u3002\u4e0b\u56fe\u5c55\u793a\u4e86 AllJoyn \u8def\u7531\u7684\u529f\u80fd\u7ed3\u6784\u3002\n\n\n\n\n\u56fe:\n AllJoyn \u8def\u7531\u7684\u529f\u80fd\u7ed3\u6784\n\n\nThe AllJoyn router supports key features over multiple \nunderlying transports. The Advertisement and Discovery \nmodule provides transport agnostic advertisement and discovery \nfunctionality. Similarly, modules shown for other features \nincluding Session, Data Exchange, and Sessionless Signal \nmodules offer transport-agnostic functionality for those \nfeatures. All these AllJoyn features work over various \ntransports including Wi-Fi, wired transports, Bluetooth, \nand any local transport.\nAllJoyn \u8def\u7531\u63d0\u4f9b\u4e86\u5938\u591a\u79cd\u4f20\u8f93\u65b9\u5f0f\u7684\u91cd\u8981\u529f\u80fd\u3002Advertisement \u548c Discovery \u6a21\u5757\u63d0\u4f9b\u4e86\u4e0e\u4f20\u8f93\u534f\u8bae\u65e0\u5173\u7684 advertisement \u548c discovery \u7684\u529f\u80fd\u3002\u76f8\u4f3c\u5730\uff0c\u4f1a\u8bdd\u3001\u6570\u636e\u4ea4\u6362\u3001Sessionless Signal \u6a21\u5757\u63d0\u4f9b\u4e86\u4e0e\u4f20\u8f93\u534f\u8bae\u65e0\u5173\u7684\u76f8\u5e94\u529f\u80fd\u3002\u6240\u6709\u8fd9\u4e9b AllJoyn \u529f\u80fd\u53ef\u4ee5\u5728\u591a\u79cd\u4f20\u8f93\u65b9\u5f0f\u4e0b\u8fd0\u884c\uff0c\u5305\u62ec Wi-Fi\u3001\u6709\u7ebf\u4f20\u8f93\u3001\u84dd\u7259\u548c\u4efb\u4f55\u672c\u5730\u7f51\u7edc\u3002\n\n\nThe AllJoyn bus management and control functions are provided \nby the Bus Management module. The Security module provides \nAllJoyn security functionality including SASL-based authentication.\nAllJoyn \u603b\u7ebf\u7ba1\u7406\u548c\u63a7\u5236\u529f\u80fd\u7531 Bus Management \u6a21\u5757\u63d0\u4f9b\u3002Security \u6a21\u5757\u63d0\u4f9b\u4e86\u5305\u62ec\u57fa\u4e8e SASL \u7684\u8eab\u4efd\u9a8c\u8bc1\u5728\u5185\u7684 AllJoyn \u5b89\u5168\u529f\u80fd\u3002\n\n\nThe Message and Signal Transport layer provides functionality \nto encapsulate application layer signaling and data into D-Bus \nformat message encapsulation. The Transport Abstraction Layer \nprovides abstraction for various underlying transports for core \nAllJoyn features. The various transport-related modules provide \nthat transport-specific functionality to accomplish core AllJoyn \nfunctions. The AllJoyn router supports an OS Abstraction Layer \nto interact with different underlying OS platforms.\nMessage and Signal \u4f20\u8f93\u5c42\u63d0\u4f9b\u4e86\u5c06\u5e94\u7528\u5c42\u4fe1\u53f7\u548c\u6570\u636e\u5c01\u88c5\u6210 D-Bus \u683c\u5f0f\u4fe1\u4ee4\u7684\u7684\u529f\u80fd\u3002Transport Abstraction Layer \u4e3a\u6838\u5fc3 AllJoyn \u529f\u80fd\u63d0\u4f9b\u4e86\u4e0d\u540c\u5e95\u5c42\u4f20\u8f93\u65b9\u5f0f\u7684\u62bd\u8c61\u6982\u5ff5\u3002\u4e0d\u540c\u7684\u4f20\u8f93\u76f8\u5173\u6a21\u5757\u63d0\u4f9b\u7279\u5b9a\u7684\u4f20\u8f93\u529f\u80fd\uff0c\u5171\u540c\u5b9e\u73b0\u6838\u5fc3 AllJoyn \u529f\u80fd\u3002AllJoyn \u8def\u7531\u652f\u6301\u4e0e\u4e0d\u540c\u5e95\u5c42 OS \u5e73\u53f0\u8fdb\u884c\u4ea4\u4e92\u7684\u64cd\u4f5c\u7cfb\u7edf\u62bd\u8c61\u5c42\u3002\n\n\nThin app architecture \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7ed3\u6784\n\n\nAn AllJoyn thin app is designed for energy-, memory-, and \nCPU-constrained devices. The thin app is designed to have a \nvery small memory footprint and is typically single-threaded. \nThe thin app includes the application code and AllJoyn thin \ncore library (AJTCL); it does not include an AllJoyn router. \nAllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u662f\u4e3a\u529f\u8017\u3001\u5185\u5b58\u548c CPU \u53d7\u9650\u7684\u8bbe\u5907\u6240\u8bbe\u8ba1\u3002\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5360\u7528\u5f88\u5c11\u7684\u5185\u5b58\u5e76\u4e14\u901a\u5e38\u662f\u5355\u7ebf\u7a0b\u7684\u3002\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5305\u542b\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u548c AllJoyn \u7cbe\u7b80\u5185\u6838\u8d44\u6e90\u5e93 \uff08AJTCL\uff09\uff0c\u4e0d\u5305\u542b AllJoyn \u8def\u7531\u3002\n\n\nA thin AllJoyn device only has a lightweight thin app running \non the device that makes use of an AllJoyn router running on a \nstandard AllJoyn device to advertise, discover, and connect with \nAllJoyn peers. Communication between the thin app and the AllJoyn \nrouter occurs across device boundaries over TCP transport.\n\u7cbe\u7b80 AllJoyn \u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u4e00\u4e2a\u8fd0\u884c\u5728\u6807\u51c6 AllJoyn \u8bbe\u5907\u4e0a\u7684 AllJoyn \u8def\u7531\u6240\u63d0\u4f9b\u7684 advertise\u3001discover \u529f\u80fd\u4e0e\u5176\u4ed6\u7684 AllJoyn \u8bbe\u5907\u76f8\u8fde\u63a5\u3002\u901a\u8fc7TCP\u4f20\u8f93\u534f\u8bae\uff0c\u53ef\u4ee5\u5b9e\u73b0\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4e0e AllJoyn \u8def\u7531\u4e4b\u95f4\u7684\u8de8\u8bbe\u5907\u901a\u4fe1\u3002\n\n\nThe following figure captures the AllJoyn thin app architecture.\n\u4e0b\u56fe\u5c55\u793a\u4e86 AllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7ed3\u6784\n\n\n\n\n\u56fe:\n AllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7ed3\u6784\n\n\nAllJoyn \u67b6\u6784\u534f\u8bae\u6808\n\n\nThe following figure captures the high-level protocol stack \nfor the AllJoyn framework.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u9ad8\u89c4\u683c\u7684 AllJoyn \u67b6\u6784\u534f\u8bae\u6808\u3002\n\n\n\n\n\u56fe:\n AllJoyn \u534f\u8bae\u6808\n\n\nAt the top level, the AllJoyn framework protocol stack \nconsists of an application providing a number of application \nlayer services and supporting some service frameworks. These \napp layer services are defined by AllJoyn interfaces supported \nby the app. The app sits on top of the AllJoyn core library, \nwhich enables an app to invoke core AllJoyn functionality.\n\u5728\u9876\u5c42\uff0cAllJoyn \u67b6\u6784\u534f\u8bae\u6808\u5305\u542b\u4e86\u4e00\u4e2a\u63d0\u4f9b\u591a\u79cd\u5e94\u7528\u5c42\u670d\u52a1\u548c\u652f\u6301\u591a\u79cd\u670d\u52a1\u67b6\u6784\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e9b\u5e94\u7528\u5c42\u670d\u52a1\u7531\u5e94\u7528\u7a0b\u5e8f\u652f\u6301\u7684 AllJoyn \u63a5\u53e3\u5b9a\u4e49\u3002\u5e94\u7528\u7a0b\u5e8f\u5904\u5728 AllJoyn \u6838\u5fc3\u8d44\u6e90\u5e93\u7684\u9876\u5c42\uff0c\u4f7f\u5f97\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u8c03\u7528\u6838\u5fc3 AllJoyn \u529f\u80fd\u3002\nBelow the AllJoyn core library sits the AllJoyn router that \nimplements core AllJoyn features including advertisement/discovery, \nsession establishment, sessionless signals, authentication, etc. \nThe AllJoyn router supports multiple underlying transports for \ndiscovery and communication and provides an abstraction layer \nfor each of the supported transport. The AllJoyn router belongs \nto the application layer in the standard OSI layering model. \n\u5728 AllJoyn \u6838\u5fc3\u8d44\u6e90\u88e4\u4e4b\u4e0b\u7684\u662f AllJoyn \u8def\u7531\uff0c\u5b83\u63d0\u4f9b\u4e86\u5305\u542b advertisement/discovery\u3001\u4f1a\u8bdd\u5efa\u7acb\u3001sessionless signals\u3001\u8ba4\u8bc1\u7b49\u4e00\u7cfb\u5217\u7684\u6838\u5fc3 AllJoyn \u529f\u80fd\u3002AllJoyn \u8def\u7531\u652f\u6301\u591a\u79cd\u7528\u4e8e\u53d1\u73b0\u548c\u901a\u4fe1\u7684\u5e95\u5c42\u4f20\u8f93\u65b9\u5f0f\uff0c\u5e76\u4e3a\u6bcf\u4e00\u4e2a\u652f\u6301\u7684\u4f20\u8f93\u65b9\u5f0f\u63d0\u4f9b\u4e00\u4e2a\u62bd\u8c61\u5c42\u3002\u5728\u6807\u51c6 OSI \u5206\u5c42\u6a21\u578b\u4e2d\uff0cAllJoyn \u8def\u7531\u5c5e\u4e8e\u5e94\u7528\u5c42\u3002\n\n\nUnder the AllJoyn router reside the standard OSI layers: \ntransport, network, layer 2 and physical layer.\n\u5728 AllJoyn \u8def\u7531\u4e4b\u4e0b\u662f\u6807\u51c6 OSI \u5206\u5c42\uff1a\n\u4f20\u8f93\u5c42\u3001\u7f51\u7edc\u5c42\u3001layer 2 \u548c\u7269\u7406\u5c42\u3002",
            "title": "System architecture"
        },
        {
            "location": "/learn/core/system-description/system-architecture/#system-architecture",
            "text": "",
            "title": "System Architecture \u7cfb\u7edf\u7ed3\u6784"
        },
        {
            "location": "/learn/core/system-description/system-architecture/#network-architecture",
            "text": "The AllJoyn  network architecture is dependent upon the network \ndeployment scenario. This section captures the following deployment scenarios:\n AllJoyn  \u7f51\u7edc\u7ed3\u6784\u7531\u7f51\u7edc\u7684\u90e8\u7f72\u65b9\u6848\u51b3\u5b9a\u3002\u8fd9\u90e8\u5206\u5305\u542b\u4e86\u4ee5\u4e0b\u51e0\u79cd\u90e8\u7f72\u65b9\u6848\uff1a   Standalone AllJoyn network: A proximal network with a set \nof peer devices which could be connected over the same or \ndifferent access mediums.   \u72ec\u7acb AllJoyn \u7f51\u7edc\uff1a\u4e00\u4e2a\u62e5\u6709\u4e00\u7cfb\u5217\u5bf9\u7b49\u8bbe\u5907\u7684\u4e34\u57df\u7f51\u7edc\u3002\u8bbe\u5907\u4e4b\u95f4\u53ef\u4ee5\u901a\u8fc7\u76f8\u540c\u6216\u4e0d\u540c\u7684\u4ecb\u8d28\u76f8\u4e92\u8fde\u63a5\u3002    Remote accessible AllJoyn network: A proximal network \nwhere services provided by devices are accessible and controllable \nfrom outside the proximal network.   \u8fdc\u7a0b\u8bbf\u95ee\u7684 AllJoyn \u7f51\u7edc\uff1a\u4e00\u4e9b\u8bbe\u5907\u4e3a\u4e34\u57df\u7f51\u7edc\u63d0\u4f9b\u4e86\u88ab\u4e34\u57df\u7f51\u7edc\u4e4b\u5916\u7684\u7684\u7f51\u7edc\u8bbf\u95ee\u548c\u63a7\u5236\u7684\u529f\u80fd\u3002   Standalone AllJoyn network \u72ec\u7acb AllJoyn \u7f51\u7edc  A standalone AllJoyn network architecture is fairly simple \nwith two or more peer nodes coming together to dynamically \nform an AllJoyn network.  Peers can be connected over different \naccess networks such as Wi-Fi. The AllJoyn advertisement and \ndiscovery mechanism takes care of seamlessly discovering \nthese peers independent of the underlying transport being used.   \u72ec\u7acb AllJoyn \u7f51\u7edc\u7ed3\u6784\u662f\u76f8\u5f53\u7b80\u5355\u7684\u3002\u5b83\u7531\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u8282\u70b9\u52a8\u6001\u5f62\u6210\u3002\u8282\u70b9\u4e4b\u95f4\u53ef\u901a\u8fc7\u4e0d\u540c\u7684\u63a5\u5165\u65b9\u5f0f\uff08\u5982 WI-FI\uff09\u8fdb\u884c\u8fde\u63a5\u3002Alljoyn \u7684 advertisement \u548c discovery \u673a\u5236\u53ef\u4ee5\u65e0\u89c6\u57fa\u7840\u7f51\u7edc\u4f20\u8f93\u65b9\u5f0f\uff0c\u65e0\u7f1d\u5730\u53d1\u73b0\u8fd9\u4e9b\u8282\u70b9\u3002\nThe following figure captures the network architecture for a \ntypical standalone AllJoyn network.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u72ec\u7acb ALlJoyn \u7f51\u7edc\u7684\u7ed3\u6784\u3002   \u56fe:  Standalone \u72ec\u7acb AllJoyn \u7f51\u7edc\u7ed3\u6784  NOTE:  In a Wi-Fi deployment, the AllJoyn framework requires \nwireless isolation to be turned off at the access points to \nenable peer-to-peer communication. \u6ce8\u610f:  \u5728 Wi-Fi \u90e8\u7f72\u4e2d\uff0c\u9700\u8981\u5173\u95ed\u63a5\u5165\u70b9\u7684\u65e0\u9650\u72ec\u7acb\u529f\u80fd\u4ee5\u5141\u8bb8\u7aef\u5bf9\u7aef\u7684\u8fde\u63a5\u3002  Bridging multiple transports \u6865\u63a5\u591a\u79cd\u4f20\u8f93\u65b9\u5f0f  A standalone AllJoyn network can involve nodes connected \nover both wireless and wired transport, e.g., nodes connected \nover Wi-Fi, PLC, and Ethernet. Nodes in such a network can \ncommunicate with each other as long as wireless isolation \nis not enabled on the Wi-Fi Access Point (AP).\n\u72ec\u7acb AllJoyn \u7f51\u7edc\u80fd\u591f\u5305\u542b\u901a\u8fc7\u6709\u7ebf\u548c\u65e0\u7ebf\u65b9\u5f0f\u8fde\u63a5\u7684\u8282\u70b9\uff0c\u5982\u901a\u8fc7 Wi-Fi\u3001PLC\u3001Ethernet \u8fde\u63a5\u7684\u8282\u70b9\u3002\u53ea\u8981 Wi-Fi Access Point\uff08AP\uff09\u4e0a\u7684 wireless isolation \u88ab\u5173\u95ed\uff0c\u7f51\u7edc\u4e2d\u7684\u5404\u4e2a\u8282\u70b9\u4e4b\u95f4\u5c31\u53ef\u4ee5\u76f8\u4e92\u901a\u4fe1\u3002  The following figure captures the high-level network architecture \nfor an AllJoyn network with devices connected over Wi-Fi, PLC, \nand Ethernet transports.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u4f7f\u7528 Wi-Fi\u3001PLC\u3001Ethernet \u63a5\u5165\u65b9\u5f0f\u7684\u8bbe\u5907\u6784\u6210\u7684\u9ad8\u89c4\u683c\u7684 AllJoyn \u7f51\u7edc\u7ed3\u6784\u3002   Figure:  Bridging multiple transports \u6865\u63a5\u591a\u79cd\u4f20\u8f93\u65b9\u5f0f  Remote accessible AllJoyn network \u53ef\u8fdc\u7a0b\u64cd\u4f5c\u7684 AllJoyn \u7f51\u7edc  A remote accessible AllJoyn network is a proximal IoE network \nwhere services provided by devices are accessible and/or controllable \nfrom outside the proximal IoE network. The remote accessibility is \nachieved by having a Gateway node in the system. The Gateway node \nexposes device functionality and control to an existing cloud-based \nservice either via standard Internet style APIs (e.g. REST). A mobile \ndevice outside the proximal IoE network can communicate with devices \nin the proximal IoE network via the cloud-based service and via the \nGateway node. \n\u53ef\u8fdc\u7a0b\u64cd\u4f5c\u7684 AllJoyn \u7f51\u7edc\u662f\u4e00\u79cd proximal IoE network\u3002\u8be5\u7f51\u7edc\u4e2d\u7684\u8bbe\u5907\u63d0\u4f9b\u4e86\u88ab\u8fdc\u7a0b\uff08\u5728 proximal IoE network \u4e4b\u5916\uff09\u8bbf\u95ee\uff0f\u63a7\u5236\u7684\u670d\u52a1\u3002\u8fdc\u7a0b\u63a5\u5165\u7684\u670d\u52a1\u662f\u7531\u7cfb\u7edf\u4e2d\u7684 Gateway \u8282\u70b9\u5b9e\u73b0\u7684\u3002Gateway \u8282\u70b9\u901a\u8fc7\u6807\u51c6 Internet \u6846\u67b6 API\uff08\u5982 REST\uff09\u5c06\u8bbe\u5907\u7684\u529f\u80fd\u548c\u63a7\u5236\u6743\u9650\u653e\u7f6e\u5728\u73b0\u6709\u7684\u57fa\u4e8e\u4e91\u7684\u670d\u52a1\u4e0a\u3002  The following figure captures the high-level network architecture \nfor a remote accessible AllJoyn network.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u53ef\u8fdc\u7a0b\u8bbf\u95ee AllJoyn \u7f51\u7edc\u7684\u9ad8\u89c4\u683c\u7684 AllJoyn \u7f51\u7edc\u7ed3\u6784\u3002   \u56fe:  \u53ef\u8fdc\u7a0b\u8bbf\u95ee AllJoyn \u7f51\u7edc\u7684\u9ad8\u89c4\u683c\u7684 AllJoyn \u7f51\u7edc\u7ed3\u6784",
            "title": "Network architecture \u7f51\u7edc\u7ed3\u6784"
        },
        {
            "location": "/learn/core/system-description/system-architecture/#device-architecture",
            "text": "An AllJoyn-enabled device can support one or more AllJoyn \napplications. The AllJoyn router can be bundled with each of \nthese applications on devices such as mobile phone and tablets. \nAlternately, the AllJoyn router can be installed separately as \na standalone router on the device and multiple applications can \nmake use of it; examples of devices include TVs and set-top boxes \n(STBs). There can also be hybrid deployment cases where a single \ndevice has both a bundled AllJoyn router for certain apps and a \nstandalone AllJoyn router for other apps on the device. \n\u4e00\u4e2a AllJoyn \u8bbe\u5907\u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002AllJoyn \u8def\u7531\u53ef\u4ee5\u4e0e\u8bbe\u5907\uff08\u5982\u624b\u673a\u548c\u5e73\u677f\u7535\u8111\uff09\u4e0a\u7684\u4efb\u4e00\u5e94\u7528\u7a0b\u5e8f\u6346\u7ed1\u3002\u6216\u8005\uff0cAllJoyn \u8def\u7531\u88ab\u4ee5\u72ec\u7acb\u8def\u7531\u7684\u8eab\u4efd\u5b89\u88c5\u5728\u8bbe\u5907\u4e0a\uff0c\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u8def\u7531\uff0c\u5982\u7535\u89c6\u548c\u673a\u9876\u76d2\uff08STB\uff09\u3002\u53e6\u5916\uff0c\u6346\u7ed1\u8def\u7531\uff08\u4e3a\u7279\u5b9a\u5e94\u7528\u7a0b\u5e8f\uff09\u548c\u72ec\u7acb\u8def\u7531\uff08\u4e3a\u8bbe\u5907\u4e0a\u7684\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\uff09\u53ef\u4ee5\u540c\u65f6\u5b58\u5728\u5728\u4e00\u4e2a\u8bbe\u5907\u4e0a\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6df7\u5408\u90e8\u7f72\u65b9\u5f0f\u3002  NOTE;  An app always looks for a preinstalled AllJoyn core, so \nthis will only happen if the preinstalled AllJoyn core was a \nlower version than the bundled AllJoyn core. \u6ce8\u610f:  \u5982\u679c\u67d0\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u59cb\u7ec8\u5728\u641c\u7d22 preinstalled AllJoyn core\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u6b64 preinstalled AllJoyn core \u6bd4 bundled AllJoyn core \u7684\u7248\u672c\u4f4e\u6240\u5bfc\u81f4\u7684\u3002  The following deployment scenarios are captured for the AllJoyn device:\n\u901a\u5e38\u6709\u4ee5\u4e0b\u51e0\u79cd\u90e8\u7f72 AllJoyn \u8bbe\u5907\u7684\u65b9\u6848\uff1a   Single app with bundled AllJoyn router  Multiple apps with bundled AllJoyn router  Multiple apps with standalone AllJoyn router  \u5355\u4e00\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1\u7684 AllJoyn \u8def\u7531  \u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1\u7684 AllJoyn \u8def\u7531  \u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u72ec\u7acb\u7684 AllJoyn \u8def\u7531   Single app with bundled AllJoyn router \u5355\u4e00\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1\u7684 AllJoyn \u8def\u7531  In this deployment, the AllJoyn application package includes \nan app and an AllJoyn router. The app can support application-specific \nservices as well as one or more service frameworks. The application \nconnects to the AllJoyn router via the AllJoyn standard core library. \nIn case of the bundled AllJoyn router, the communication between \nthe app and AllJoyn router is local (within the same process) \nand can be done using function/API calls.\n\u6b64\u90e8\u7f72\u65b9\u5f0f\u4e2d\uff0cAllJoyn \u5e94\u7528\u7a0b\u5e8f\u5305\u5305\u542b\u4e86\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u548c\u4e00\u4e2a AllJoyn \u8def\u7531\u3002\u6b64\u5e94\u7528\u7a0b\u5e8f\u652f\u6301\u5e94\u7528\u4e13\u5c5e\u670d\u52a1\u548c\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u67b6\u6784\u3002\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 AllJoyn \u6807\u51c6\u5185\u6838\u8d44\u6e90\u5e93\u8fde\u63a5 AllJoyn \u8def\u7531\u3002\u5728\u6346\u7ed1\u8def\u7531\u7684\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u548c AllJoyn \u8def\u7531\u4e4b\u95f4\u7684\u901a\u4fe1\u662f\u4ec5\u5728\u672c\u5730\u7684\uff08\u901a\u8fc7\u540c\u4e00\u8fdb\u7a0b\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 function\uff0fAPI \u6765\u5b9e\u73b0\u3002  The following figure captures the AllJoyn device architecture \nfor a single app with bundled AllJoyn router deployment scenario.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u5355\u4e00\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1 AllJoyn \u8def\u7531\u90e8\u7f72\u65b9\u5f0f\u7684 AllJoyn \u8bbe\u5907\u7ed3\u6784\u3002   \u56fe:  AllJoyn \u8bbe\u5907\u7ed3\u6784 (\u5355\u4e00\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1 AllJoyn \u8def\u7531)  Multiple apps with bundled AllJoyn router \u591a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1 AllJoyn \u8def\u7531  In this deployment, the AllJoyn-enabled device supports multiple \napplications. Each of these applications has a separate instance \nof an AllJoyn router bundled with that application package. \n\u6b64\u90e8\u7f72\u65b9\u5f0f\u4e2d\uff0cAllJoyn \u8bbe\u5907\u652f\u6301\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u6bcf\u4e00\u4e2a\u7a0b\u5e8f\u5305\u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u90fd\u6709\u4e00\u4e2a\u4e0e\u81ea\u5df1\u76f8\u6346\u7ed1\u7684 AllJoyn \u8def\u7531\u3002  The following figure captures the AllJoyn device architecture \nfor multiple apps with a bundled AllJoyn router deployment scenario.  \u4e0b\u56fe\u5c55\u793a\u4e86\u591a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1 AllJoyn \u8def\u7531\u90e8\u7f72\u65b9\u5f0f\u7684 AllJoyn \u8bbe\u5907\u7ed3\u6784\u3002   \u56fe:  AllJoyn \u8bbe\u5907\u7ed3\u6784 \uff08\u591a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u6346\u7ed1 AllJoyn \u8def\u7531)  Multiple apps with standalone AllJoyn router \u591a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u72ec\u7acb AllJoyn \u8def\u7531  In this deployment, the AllJoyn-enabled device supports a \nstandalone AllJoyn router. The multiple applications on the \ndevice connect using the same standalone AllJoyn router. \nThe communication between an application and the standalone \nAllJoyn router happens across process boundaries and can \nhappen over transports like UNIX domains sockets or TCP\u3002  \u6b64\u90e8\u7f72\u65b9\u5f0f\u4e2d\uff0cAllJoyn \u8bbe\u5907\u63d0\u4f9b\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684 AllJoyn \u8def\u7531\u3002\u540c\u4e00\u8bbe\u5907\u4e0a\u7684\u4e0d\u540c\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u540c\u4e00\u4e2a\u72ec\u7acb AllJoyn \u8def\u7531\u8fde\u63a5\u7f51\u7edc\u3002\u5e94\u7528\u7a0b\u5e8f\u548c\u72ec\u7acb AllJoyn \u8def\u7531\u4e4b\u95f4\u7684\u901a\u4fe1\u8de8\u8d8a\u8fdb\u7a0b\u8fb9\u754c\uff0c\u80fd\u591f\u5728\u5982 UNIX domains sockets \u548c TCP \u7684\u4f20\u8f93\u65b9\u5f0f\u4e0b\u5b9e\u73b0\u3002  The following figure captures the AllJoyn device architecture \nfor multiple apps with a standalone AllJoyn router deployment scenario.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u591a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u72ec\u7acb AllJoyn \u8def\u7531\u90e8\u7f72\u65b9\u5f0f\u7684 AllJoyn \u8bbe\u5907\u7ed3\u6784\u3002   \u56fe:  AllJoyn \u8bbe\u5907\u7ed3\u6784 \uff08\u591a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u72ec\u7acb AllJoyn \u8def\u7531)",
            "title": "Device architecture \u8bbe\u5907\u7ed3\u6784"
        },
        {
            "location": "/learn/core/system-description/system-architecture/#alljoyn-router-architecture-alljoyn",
            "text": "The AllJoyn router provides a number of functionalities to \nenable key features of the AllJoyn framework. The following \nfigure captures the functional architecture for the AllJoyn router.\nAllJoyn \u8def\u7531\u4e3a AllJoyn \u67b6\u6784\u7684\u5173\u952e\u6027\u529f\u80fd\u63d0\u4f9b\u4e86\u8bb8\u591a\u529f\u80fd\u4e0a\u7684\u652f\u6301\u3002\u4e0b\u56fe\u5c55\u793a\u4e86 AllJoyn \u8def\u7531\u7684\u529f\u80fd\u7ed3\u6784\u3002   \u56fe:  AllJoyn \u8def\u7531\u7684\u529f\u80fd\u7ed3\u6784  The AllJoyn router supports key features over multiple \nunderlying transports. The Advertisement and Discovery \nmodule provides transport agnostic advertisement and discovery \nfunctionality. Similarly, modules shown for other features \nincluding Session, Data Exchange, and Sessionless Signal \nmodules offer transport-agnostic functionality for those \nfeatures. All these AllJoyn features work over various \ntransports including Wi-Fi, wired transports, Bluetooth, \nand any local transport.\nAllJoyn \u8def\u7531\u63d0\u4f9b\u4e86\u5938\u591a\u79cd\u4f20\u8f93\u65b9\u5f0f\u7684\u91cd\u8981\u529f\u80fd\u3002Advertisement \u548c Discovery \u6a21\u5757\u63d0\u4f9b\u4e86\u4e0e\u4f20\u8f93\u534f\u8bae\u65e0\u5173\u7684 advertisement \u548c discovery \u7684\u529f\u80fd\u3002\u76f8\u4f3c\u5730\uff0c\u4f1a\u8bdd\u3001\u6570\u636e\u4ea4\u6362\u3001Sessionless Signal \u6a21\u5757\u63d0\u4f9b\u4e86\u4e0e\u4f20\u8f93\u534f\u8bae\u65e0\u5173\u7684\u76f8\u5e94\u529f\u80fd\u3002\u6240\u6709\u8fd9\u4e9b AllJoyn \u529f\u80fd\u53ef\u4ee5\u5728\u591a\u79cd\u4f20\u8f93\u65b9\u5f0f\u4e0b\u8fd0\u884c\uff0c\u5305\u62ec Wi-Fi\u3001\u6709\u7ebf\u4f20\u8f93\u3001\u84dd\u7259\u548c\u4efb\u4f55\u672c\u5730\u7f51\u7edc\u3002  The AllJoyn bus management and control functions are provided \nby the Bus Management module. The Security module provides \nAllJoyn security functionality including SASL-based authentication.\nAllJoyn \u603b\u7ebf\u7ba1\u7406\u548c\u63a7\u5236\u529f\u80fd\u7531 Bus Management \u6a21\u5757\u63d0\u4f9b\u3002Security \u6a21\u5757\u63d0\u4f9b\u4e86\u5305\u62ec\u57fa\u4e8e SASL \u7684\u8eab\u4efd\u9a8c\u8bc1\u5728\u5185\u7684 AllJoyn \u5b89\u5168\u529f\u80fd\u3002  The Message and Signal Transport layer provides functionality \nto encapsulate application layer signaling and data into D-Bus \nformat message encapsulation. The Transport Abstraction Layer \nprovides abstraction for various underlying transports for core \nAllJoyn features. The various transport-related modules provide \nthat transport-specific functionality to accomplish core AllJoyn \nfunctions. The AllJoyn router supports an OS Abstraction Layer \nto interact with different underlying OS platforms.\nMessage and Signal \u4f20\u8f93\u5c42\u63d0\u4f9b\u4e86\u5c06\u5e94\u7528\u5c42\u4fe1\u53f7\u548c\u6570\u636e\u5c01\u88c5\u6210 D-Bus \u683c\u5f0f\u4fe1\u4ee4\u7684\u7684\u529f\u80fd\u3002Transport Abstraction Layer \u4e3a\u6838\u5fc3 AllJoyn \u529f\u80fd\u63d0\u4f9b\u4e86\u4e0d\u540c\u5e95\u5c42\u4f20\u8f93\u65b9\u5f0f\u7684\u62bd\u8c61\u6982\u5ff5\u3002\u4e0d\u540c\u7684\u4f20\u8f93\u76f8\u5173\u6a21\u5757\u63d0\u4f9b\u7279\u5b9a\u7684\u4f20\u8f93\u529f\u80fd\uff0c\u5171\u540c\u5b9e\u73b0\u6838\u5fc3 AllJoyn \u529f\u80fd\u3002AllJoyn \u8def\u7531\u652f\u6301\u4e0e\u4e0d\u540c\u5e95\u5c42 OS \u5e73\u53f0\u8fdb\u884c\u4ea4\u4e92\u7684\u64cd\u4f5c\u7cfb\u7edf\u62bd\u8c61\u5c42\u3002",
            "title": "AllJoyn router architecture AllJoyn \u8def\u7531\u7ed3\u6784"
        },
        {
            "location": "/learn/core/system-description/system-architecture/#thin-app-architecture",
            "text": "An AllJoyn thin app is designed for energy-, memory-, and \nCPU-constrained devices. The thin app is designed to have a \nvery small memory footprint and is typically single-threaded. \nThe thin app includes the application code and AllJoyn thin \ncore library (AJTCL); it does not include an AllJoyn router. \nAllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u662f\u4e3a\u529f\u8017\u3001\u5185\u5b58\u548c CPU \u53d7\u9650\u7684\u8bbe\u5907\u6240\u8bbe\u8ba1\u3002\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5360\u7528\u5f88\u5c11\u7684\u5185\u5b58\u5e76\u4e14\u901a\u5e38\u662f\u5355\u7ebf\u7a0b\u7684\u3002\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5305\u542b\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u548c AllJoyn \u7cbe\u7b80\u5185\u6838\u8d44\u6e90\u5e93 \uff08AJTCL\uff09\uff0c\u4e0d\u5305\u542b AllJoyn \u8def\u7531\u3002  A thin AllJoyn device only has a lightweight thin app running \non the device that makes use of an AllJoyn router running on a \nstandard AllJoyn device to advertise, discover, and connect with \nAllJoyn peers. Communication between the thin app and the AllJoyn \nrouter occurs across device boundaries over TCP transport.\n\u7cbe\u7b80 AllJoyn \u8bbe\u5907\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u4e00\u4e2a\u8fd0\u884c\u5728\u6807\u51c6 AllJoyn \u8bbe\u5907\u4e0a\u7684 AllJoyn \u8def\u7531\u6240\u63d0\u4f9b\u7684 advertise\u3001discover \u529f\u80fd\u4e0e\u5176\u4ed6\u7684 AllJoyn \u8bbe\u5907\u76f8\u8fde\u63a5\u3002\u901a\u8fc7TCP\u4f20\u8f93\u534f\u8bae\uff0c\u53ef\u4ee5\u5b9e\u73b0\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4e0e AllJoyn \u8def\u7531\u4e4b\u95f4\u7684\u8de8\u8bbe\u5907\u901a\u4fe1\u3002  The following figure captures the AllJoyn thin app architecture.\n\u4e0b\u56fe\u5c55\u793a\u4e86 AllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7ed3\u6784   \u56fe:  AllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7ed3\u6784",
            "title": "Thin app architecture \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7ed3\u6784"
        },
        {
            "location": "/learn/core/system-description/system-architecture/#alljoyn",
            "text": "The following figure captures the high-level protocol stack \nfor the AllJoyn framework.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u9ad8\u89c4\u683c\u7684 AllJoyn \u67b6\u6784\u534f\u8bae\u6808\u3002   \u56fe:  AllJoyn \u534f\u8bae\u6808  At the top level, the AllJoyn framework protocol stack \nconsists of an application providing a number of application \nlayer services and supporting some service frameworks. These \napp layer services are defined by AllJoyn interfaces supported \nby the app. The app sits on top of the AllJoyn core library, \nwhich enables an app to invoke core AllJoyn functionality.\n\u5728\u9876\u5c42\uff0cAllJoyn \u67b6\u6784\u534f\u8bae\u6808\u5305\u542b\u4e86\u4e00\u4e2a\u63d0\u4f9b\u591a\u79cd\u5e94\u7528\u5c42\u670d\u52a1\u548c\u652f\u6301\u591a\u79cd\u670d\u52a1\u67b6\u6784\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e9b\u5e94\u7528\u5c42\u670d\u52a1\u7531\u5e94\u7528\u7a0b\u5e8f\u652f\u6301\u7684 AllJoyn \u63a5\u53e3\u5b9a\u4e49\u3002\u5e94\u7528\u7a0b\u5e8f\u5904\u5728 AllJoyn \u6838\u5fc3\u8d44\u6e90\u5e93\u7684\u9876\u5c42\uff0c\u4f7f\u5f97\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u8c03\u7528\u6838\u5fc3 AllJoyn \u529f\u80fd\u3002\nBelow the AllJoyn core library sits the AllJoyn router that \nimplements core AllJoyn features including advertisement/discovery, \nsession establishment, sessionless signals, authentication, etc. \nThe AllJoyn router supports multiple underlying transports for \ndiscovery and communication and provides an abstraction layer \nfor each of the supported transport. The AllJoyn router belongs \nto the application layer in the standard OSI layering model. \n\u5728 AllJoyn \u6838\u5fc3\u8d44\u6e90\u88e4\u4e4b\u4e0b\u7684\u662f AllJoyn \u8def\u7531\uff0c\u5b83\u63d0\u4f9b\u4e86\u5305\u542b advertisement/discovery\u3001\u4f1a\u8bdd\u5efa\u7acb\u3001sessionless signals\u3001\u8ba4\u8bc1\u7b49\u4e00\u7cfb\u5217\u7684\u6838\u5fc3 AllJoyn \u529f\u80fd\u3002AllJoyn \u8def\u7531\u652f\u6301\u591a\u79cd\u7528\u4e8e\u53d1\u73b0\u548c\u901a\u4fe1\u7684\u5e95\u5c42\u4f20\u8f93\u65b9\u5f0f\uff0c\u5e76\u4e3a\u6bcf\u4e00\u4e2a\u652f\u6301\u7684\u4f20\u8f93\u65b9\u5f0f\u63d0\u4f9b\u4e00\u4e2a\u62bd\u8c61\u5c42\u3002\u5728\u6807\u51c6 OSI \u5206\u5c42\u6a21\u578b\u4e2d\uff0cAllJoyn \u8def\u7531\u5c5e\u4e8e\u5e94\u7528\u5c42\u3002  Under the AllJoyn router reside the standard OSI layers: \ntransport, network, layer 2 and physical layer.\n\u5728 AllJoyn \u8def\u7531\u4e4b\u4e0b\u662f\u6807\u51c6 OSI \u5206\u5c42\uff1a\n\u4f20\u8f93\u5c42\u3001\u7f51\u7edc\u5c42\u3001layer 2 \u548c\u7269\u7406\u5c42\u3002",
            "title": "AllJoyn \u67b6\u6784\u534f\u8bae\u6808"
        },
        {
            "location": "/learn/core/system-description/thin-apps/",
            "text": "Thin Apps \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\n\n\nOverview \u6982\u89c8\n\n\nThe AllJoyn\n system is designed to operate across AllJoyn-enabled\ndevices with different capabilities. The AllJoyn Standard Core Library (AJSCL)\nis designed to run on devices that usually have significant\namounts of memory, available energy, and computing power,\nalong with operating systems that support multiple processes/threads\nwith multiple standard language environments. The AJSCL is designed\nfor general purpose computer devices and supports application\nrunning on HLOS including Microsoft Windows, Linux, Android, iOS, and OpenWRT.\nAllJoyn \u7cfb\u7edf\u65e8\u5728\u5b9e\u73b0\u5938 AllJoyn \u8bbe\u5907\u7684\u529f\u80fd\u63a7\u5236\u3002AllJoyn \u6807\u51c6\u5185\u6838\u8d44\u6e90\u5e93\u901a\u5e38\u5e94\u7528\u4e8e\u62e5\u6709\u8f83\u5927\u5185\u5b58\u3001\u8f83\u5927\u7535\u6e90\u3001\u8f83\u5f3a\u5904\u7406\u80fd\u529b\u548c\u62e5\u6709\u591a\u7ebf\u7a0b\u64cd\u4f5c\u548c\u591a\u79cd\u6807\u51c6\u8bed\u8a00\u73af\u5883\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u3002AJSCL \u4e3a\u901a\u7528\u8ba1\u7b97\u673a\u8bbe\u8ba1\uff0c\u652f\u6301\u8fd0\u884c\u5728 HLOS\uff08\u5305\u62ecMicrosoft Windows\u3001Linux\u3001Android\u3001iOS \u548c OpenWRT\uff09\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nOn the other hand, single-purpose AllJoyn-enabled devices\nusually have an embedded system running on a microcontroller\ndesigned to provide specific functionality. Such embedded\nsystems are optimized to reduce the size and cost of the product,\noften by limiting memory size, processor speed, available power,\nperipherals, user interfaces, or all of the above.\nThe AllJoyn Thin Core Library (AJTCL) is designed to bring\nthe benefits of the AllJoyn distributed programming environment\nto embedded system-based devices.\n\u53e6\u4e00\u65b9\u6848\uff0c\u5355\u4e00\u76ee\u7684\u7684 AllJoyn \u8bbe\u5907\u901a\u5e38\u62e5\u6709\u4e00\u5957\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3002\u8be5\u7cfb\u7edf\u8fd0\u884c\u5728\u63d0\u4f9b\u67d0\u79cd\u7279\u5b9a\u529f\u80fd\u7684\u5fae\u63a7\u5236\u5668\u4e0a\u3002\u8fd9\u4e9b\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e3a\u4e86\u964d\u4f4e\u8bbe\u5907\u7684\u6210\u672c\u548c\u7f29\u51cf\u8bbe\u5907\u7684\u4f53\u79ef\uff0c\u901a\u5e38\u91c7\u7528\u524a\u51cf\u5185\u5b58\uff0c\u964d\u4f4e\u5904\u7406\u901f\u5ea6\uff0c\u9650\u5236\u7535\u6e90\u529f\u7387\uff0c\u5220\u9664\u5468\u8fb9\u8bbe\u5907\u548c\u7528\u6237\u63a5\u53e3\u7b49\u65b9\u6cd5\u3002AllJoyn \u7cbe\u7b80\u5185\u6838\u4e3a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u8bbe\u5907\u63d0\u4f9b\u4e86\u826f\u597d\u7684 AllJoyn \u5206\u5e03\u5f0f\u7f16\u7a0b\u73af\u5883\u3002\n\n\nThe AJTCL provides a lightweight implementation of core AllJoyn\nfunctionality for embedded microcontroller applications. An embedded\nsystem-based AllJoyn device (thin AllJoyn device) only includes an\nAllJoyn thin application utilizing the AJTCL and does not include\nan AllJoyn router component because of its resource-constrained\nenvironment. It borrows an AllJoyn router from another standard\nAllJoyn-enabled device in the AllJoyn proximal network, and\nuses it for core AllJoyn functions including advertisement and\nmessage routing. An AllJoyn thin application is fully compatible\nand inter-operable with standard AllJoyn applications on the\nAllJoyn proximal network. In fact, a remote application will\nnot even know that it is talking with an AllJoyn thin application\non the other side.\nAJTCL \u4e3a\u5d4c\u5165\u5f0f\u5fae\u63a7\u5236\u5668\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u6838\u5fc3 AllJoyn \u529f\u80fd\u7684\u5b9e\u73b0\u65b9\u6848\u3002\u5d4c\u5165\u5f0f AllJoyn \u8bbe\u5907\uff08\u7cbe\u7b80 AllJoyn \u8bbe\u5907\uff09\u53ea\u5305\u542b\u4e00\u4e2a\u91c7\u7528 AJTCL \u7684\u7cbe\u7b80 AllJoyn \u7a0b\u5e8f\uff0c\u9274\u4e8e\u6709\u9650\u7684\u8d44\u6e90\u73af\u5883\uff0c\u5e76\u4e0d\u5305\u542b AllJoyn \u8def\u7531\u7ec4\u4ef6\u3002\u5b83\u5411 AllJoyn \u4e34\u57df\u7f51\u7edc\u5185\u7684\u67d0\u4e00\u6807\u51c6 AllJoyn \u8bbe\u5907\u501f\u7528\u5176 AllJoyn \u8def\u7531\uff0c\u5e76\u5229\u7528\u5b83\u5b9e\u73b0 AllJoyn \u6838\u5fc3\u529f\u80fd\uff0c\u5982 advertisement \u548c\u4fe1\u606f\u8f6c\u53d1\u3002AllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u517c\u5bb9\u4e0e\u4e34\u57df\u7f51\u7edc\u5185\u7684\u6807\u51c6 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u4e92\u64cd\u4f5c\u3002\u5b9e\u9645\u4e0a\uff0c\u8fdc\u7a0b\u63a7\u5236\u7a0b\u5e8f\u751a\u81f3\u4e0d\u77e5\u9053\u53e6\u4e00\u4fa7\u4e0e\u6b63\u81ea\u5df1\u8fdb\u884c\u4f1a\u8bdd\u7684\u662f\u4e00\u4e2a\u7cbe\u7b80 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nThe following figure shows a context architecture depicting\nhow AllJoyn thin applications fit in the overall AllJoyn distributed system.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u9002\u914d\u6574\u4e2a AllJoyn \u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u8054\u7cfb\u7ed3\u6784\u3002\n\n\n\n\n\u56fe:\n Thin app context architecture \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u8054\u7cfb\u7ed3\u6784\n\n\nIt shows two thin AllJoyn-enabled devices (device 3 and device 4)\nwith a single AllJoyn thin application installed on each of them.\nA thin app is built on top of AJTCL and it connects with the\ndistributed AllJoyn bus by establishing a connection with an\nAllJoyn router on a standard AllJoyn-enabled device (e.g., AllJoyn router\ninstalled on the Wi-Fi Access Point). The AJTCL uses the AllJoyn\nservice advertisement and discovery process to discover the\nAllJoyn router via a BusNode well-known name. After the\ndiscovery phase, the AJTCL establishes a connection with\nthe discovered AllJoyn router over TCP. Once connected with\nthe AllJoyn router, the thin app is just like any other\napplication endpoint on the AllJoyn distributed bus.\n\u8be5\u56fe\u5c55\u793a\u4e86\u4e24\u4e2a AllJoyn \u8bbe\u5907\uff08device 3 \u548c device 4\uff09\uff0c\u5b83\u4eec\u5404\u81ea\u5b89\u88c5\u4e86\u4e00\u4e2a AllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u3002\u57fa\u4e8e AJTCL \u5efa\u7acb\u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u4e0e\u4e00\u4e2a\u6807\u51c6 AllJoyn \u8bbe\u5907\u4e0a\u7684\u8def\u7531\uff08\u5982\u5b89\u88c5\u5728 Wi-Fi Access Point \u4e0a\u7684 AllJoyn \u8def\u7531\uff09\u4e0e\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u5efa\u7acb\u8fde\u63a5\u3002AJTCL \u4f7f\u7528 AllJoyn \u7684 advertisement \u548c discovery \u670d\u52a1\uff0c\u901a\u8fc7 BusNode well-known name \u53d1\u73b0 AllJoyn \u8def\u7531\u3002\n\n\n\u6ce8\u610f:\n More than one thin application can connect to a given AllJoyn router. \u591a\u4e2a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53ef\u8fde\u63a5\u5230\u5355\u4e2a\u6307\u5b9a AllJoyn \u8def\u7531\u3002\n\n\nA thin app can act as an AllJoyn service provider, an AllJoyn\nservice consumer or both. It follows the same session establishment\nprocedures as AllJoyn standard apps to accept sessions from and/or\nconnect to sessions with other remote apps, which can be another\nAllJoyn thin app or AllJoyn standard app.\n\u4e00\u4e2a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53ef\u540c\u65f6\u4f5c\u4e3a AllJoyn \u670d\u52a1\u7684\u63d0\u4f9b\u8005\u548c\u4f7f\u7528\u8005\uff0c\u6216\u5176\u4e2d\u7684\u4efb\u4e00\u8eab\u4efd\u3002\u4f1a\u8bdd\u7684\u5efa\u7acb\u65b9\u5f0f\u4e0e\u6807\u51c6 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u63a5\u53d7\u3001\u5efa\u7acb\u4e0e\u53e6\u4e00\u4e2a\u8fdc\u7a0b\u5e94\u7528\u7a0b\u5e8f\uff08\u6807\u51c6\u5e94\u7528\u7a0b\u5e8f\u6216\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\uff09\u4f1a\u8bdd\u7684\u8fc7\u7a0b\u76f8\u540c\u3002\n\n\nFunctional architecture \u529f\u80fd\u7ed3\u6784\n\n\nThe following figure shows the detailed functional architecture\nfor an AllJoyn thin application. A thin app includes app-specific\ncode (app code) and the AJTCL. As part of the app code, a thin\napp can include one or more AllJoyn service frameworks which\ninclude Onboarding, Configuration, and Notification service\nframeworks. App Code also includes app-specific AllJoyn services\nif the thin app is acting as an AllJoyn service provider.\n\u4e0b\u56fe\u5c55\u793a\u4e86 AllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7684\u8be6\u7ec6\u529f\u80fd\u7ed3\u6784\u3002\u4e00\u4e2a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5305\u542b\u4e86\u5e94\u7528\u6307\u5b9a\u4ee3\u7801\uff08\u5e94\u7528\u4ee3\u7801\uff09\u548c AJTCL\u3002\u4f5c\u4e3a\u5e94\u7528\u4ee3\u7801\u7684\u4e00\u90e8\u5206\uff0c\u4e00\u4e2a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5305\u542b\u4e86\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u670d\u52a1\u67b6\u6784\u3002\u8fd9\u4e9b\u670d\u52a1\u67b6\u6784\u5305\u542b\u4e86 Onboarding\u3001Configuration \u548c Notification \u670d\u52a1\u67b6\u6784\u3002\u5982\u679c\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4ee5 AllJoyn \u670d\u52a1\u63d0\u4f9b\u8005\u7684\u8eab\u4efd\u8fd0\u884c\uff0c\u90a3\u4e48\u5176\u5e94\u7528\u4ee3\u7801\u4e5f\u4f1a\u5305\u542b\u5e94\u7528\u6307\u5b9a AllJoyn \u670d\u52a1\u3002\n\n\n\n\n\u56fe:\n Thin app functional architecture \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u529f\u80fd\u7ed3\u6784\n\n\nThe AJTCL consists of some key functional modules as shown in\nthe previous figure, among other supported functions. These include\nBus Connection Manager, About, Messaging and App Authentication modules.\nAJTCL \u5305\u542b\u4e86\u4e0a\u56fe\u4e2d\u6240\u793a\u652f\u6301\u7684\u529f\u80fd\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u529f\u80fd\u6a21\u5757\u3002\u8fd9\u4e9b\u6a21\u5757\u5305\u542b\u4e86 Bus Connection Manager\u3001About\u3001Messaging \u548c App Authentication \u6a21\u5757\u3002\n\n\n\n\nThe Bus Connection Manger module provides discovery and\nconnection establishment with a nearby AllJoyn router (BusNode).\n\n\nBus Connection Manager \u6a21\u5757\u63d0\u4f9b\u4e86\u53d1\u73b0\u5468\u8fb9 AllJoyn \u8def\u7531\uff08BusNode\uff09\u5e76\u4e0e\u4e4b\u5efa\u7acb\u8fde\u63a5\u7684\u529f\u80fd\u3002\n\n\nThe About module provides advertisement and discovery\nfunctions for thin app. It supports sending out the Announcement\nsessionless signal for the thin app over distributed AllJoyn bus.\n\n\nAbout \u6a21\u5757\u4e3a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b advertisement \u548c discovery \u529f\u80fd\u3002\u8be5\u6a21\u5757\u652f\u6301\u5728\u5206\u5e03\u5f0f  AllJoyn \u603b\u7ebf\u4e0a\u53d1\u51fa\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7684 Annoucement sessionless signal\u3002\n\n\nThe  marshaling module provides marshaling/unmarshaling for AllJoyn\nmessages and routing these to the connected AllJoyn router.\n\n\nMarshaling \u6a21\u5757\u4e3a AllJoyn \u4fe1\u606f\u63d0\u4f9b\u4e86\u5c01\u9001\u548c\u9006\u5c01\u9001\u529f\u80fd\uff0c\u5e76\u628a\u8fd9\u4e9b\u4fe1\u606f\u8f6c\u53d1\u5230\u8fde\u63a5\u7684 AllJoyn \u8def\u7531\u4e0a\u3002\n\n\nThe App Authentication module provides application-level authentication\nand security between thin app and remote AllJoyn apps. The ALLJOYN_PIN_KEYX\nauth mechanism is supported in the AJTCL for releases before the 14.06 release.\nThis auth mechanism is removed from AJTCL in the 14.06 release.\nStarting from the 14.06 release, the AJTCL supports a new set of\nElliptic Curve Diffie-Hellman Ephemeral (ECDHE)-based auth mechanisms\nas described in \nApp layer authentication\n.\n\n\nApp Authentication \u6a21\u5757\u4e3a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4e0e\u8fdc\u7a0b AllJoyn \u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u63d0\u4f9b\u4e86\u5e94\u7528\u7ea7\u522b\u7684\u8eab\u4efd\u9a8c\u8bc1\u548c\u5b89\u5168\u4fdd\u62a4\u3002\u5728 14.06 \u7248\u672c\u4e4b\u524d\uff0cAJTCL \u91c7\u7528\u7684\u662f ALLJOYN_PIN_KEYX \u9a8c\u8bc1\u673a\u5236\u300214.06 \u7248\u672c\u4ee5\u53ca\u5176\u540e\u7eed\u7248\u672c\uff0c\u90fd\u91c7\u7528\u4e86\u4e00\u5957\u5168\u65b0\u7684\u5982 \nApp layer authentication\n \u6240\u8ff0\u7684\u57fa\u4e8eElliptic Curve Diffie-Hellman Ephemeral (ECDHE)\u7684\u9a8c\u8bc1\u673a\u5236\u3002\n\n\n\n\nAJTCL-to-AllJoyn router connection AJTCL \u4e0e AllJoyn \u8def\u7531\u7684\u8fde\u63a5\n\n\nUpon startup, the thin application initiates the process of\ndiscovery and connection establishment with an AllJoyn router\non another standard AllJoyn-enabled device. This is done using\nthe name-based discovery mechanism.\n\u5728\u542f\u52a8\u65f6\uff0c\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8 discovery \u8fdb\u7a0b\uff0c\u4e0e\u53e6\u4e00\u4e2a\u6807\u51c6 AllJoyn \u8bbe\u5907\u4e0a\u7684 AllJoyn \u8def\u7531\u5efa\u7acb\u8fde\u63a5\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u901a\u8fc7 name-based discovery \u673a\u5236\u5b9e\u73b0\u3002\n\n\nAn AllJoyn router that supports hosting connections for thin apps\nadvertises a BusNode well-known name. The advertised well-known\nname can be one or both of the following:\nAllJoyn \u8def\u7531\u652f\u6301\u5e7f\u544a BusNode well-known name \u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u3002\u88ab\u5e7f\u544a\u7684 well-known name \u62e5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u4e0b\u5217\u5c5e\u6027\u3002\n\n\n\n\nGeneric BusNode well-known name \"org.alljoyn.BusNode\"\ndriven by the AllJoyn router configuration\n\n\n\u7531 AllJoyn \u8def\u7531\u914d\u7f6e\u7684\u901a\u7528 Generic BusNode well-known name \"org.alljoyn.BusNode\"\n\n\nSpecific BusNode well-known name advertised by an application\nattached to the AllJoyn router, meant for discovery only by\nrelated thin applications.\n\n\n\u7531\u8fde\u63a5\u5230 AllJoyn \u8def\u7531\u7684\u5e94\u7528\u7a0b\u5e8f\u5e7f\u64ad\u7684\u7279\u5b9a BusNode well-known name\uff0c\u65e8\u5728\u53d1\u73b0\u76f8\u5173\u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n\n\nThe AllJoyn router advertises the BusNode well-known name quietly,\nthat is, the advertisement messages are not sent out\ngratuitously by the AllJoyn router. Instead, the AllJoyn router\nonly sends out the BusNode well-known name advertisement in\nresponse to a query from a thin app. Also, the advertisement\nmessage is sent out quietly via unicast back to the requester\n(instead of being sent over multicast). This logic is meant\nto minimize the network traffic generated as a result of\nthin app-related discovery of an AllJoyn router.\nAllJoyn \u8def\u7531\u4ee5\u88ab\u52a8\u65b9\u5f0f\u5e7f\u544a BusNode well-known name\uff0c\u5e7f\u544a\u4fe1\u606f\u4e0d\u4f1a\u88ab\u5e73\u767d\u65e0\u6545\u5730\u53d1\u9001\u3002\u5f53\u6536\u5230\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7684\u7684\u67e5\u8be2\u9700\u6c42\u65f6\uff0c\u624d\u4f1a\u53d1\u9001 BusNode well-known name advertisement\u3002\u6b64\u5916\uff0c\u5e7f\u544a\u4fe1\u606f\u901a\u8fc7\u5355\u64ad\u65b9\u5f0f\uff08\u800c\u4e0d\u662f\u591a\u64ad\u65b9\u5f0f\uff09\u56de\u5e94\u7ed9\u8bf7\u6c42\u8005\u3002\u8fd9\u6837\u7684\u65b9\u5f0f\u65e8\u5728\u51cf\u5c11\u7531\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\u670d\u52a1\u76f8\u5173\u7684 AllJoyn \u8def\u7531\u4ea7\u751f\u7684\u7f51\u7edc\u6d41\u91cf\u3002\n\n\nThe AllJoyn router limits the number of simultaneous connections\nwith thin applications in the AllJoyn network. This limit is\nconfigurable as '\nmax_remote_clients_tcp\n' via the router\nconfig file. The AllJoyn router stops advertising all BusNode\nnames when the '\nmax_remote_clients_tcp\n' limit is reached and resumes when the\ncurrent number of thin app connections drop down below the limit.\nAllJoyn \u8def\u7531\u9650\u5236\u4e86 AllJoyn \u7f51\u7edc\u4e2d\u540c\u65f6\u5b58\u5728\u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u8fde\u63a5\u6570\u91cf\u3002\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539\u8def\u7531\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 '\nmax_remote_clients_tcp\n' \u503c\u5bf9\u9650\u5236\u503c\u8fdb\u884c\u8c03\u6574\u3002\n\n\nThe connection process between the AJTCL and the AllJoyn router\nis split into the following phases:\nAJTCL \u4e0e AllJoyn \u8def\u7531\u4e4b\u95f4\u7684\u8fde\u63a5\u8fc7\u7a0b\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u9636\u6bb5\uff1a\n\n\n\n\nDiscovery phase: The AJTCL discovers an AllJoyn router on\nthe AllJoyn proximal network via the BusNode name-based\ndiscovery mechanism. The overall discovery timeout is specified\nby the thin app in the \nFindBusAndConnect()\n API call.\nStarting from the 14.12 release, the AJTCL supports mDNS-based\ndiscovery along with legacy discovery for discovering AllJoyn\nrouters. Logic for this phase is captured below for pre-14.12 TCL\nand 14.12 TCL.\n  The AJTCL sends out a WHO-HAS message for the BusNode\n  well-known name following a backoff schedule. The IS-AT\n  message is sent over unicast to the AJTCL by the\n  AllJoyn router advertising that BusNode name.\n\n\n\u53d1\u73b0\u9636\u6bb5\uff1aAJTCL \u901a\u8fc7 BusNode name-based discovery \u673a\u5236\u53d1\u73b0 AllJoyn \u4e34\u57df\u7f51\u7edc\u5185\u7684\u7684 AllJoyn \u8def\u7531\u3002\u53d1\u73b0\u7684\u8d85\u65f6\u65f6\u5e38\u901a\u8fc7\u8c03\u7528 \nFindBusAndConnect()\n API \u8fdb\u884c\u8bbe\u5b9a\u3002\u81ea 14.12 \u7248\u672c\u5f00\u59cb\uff0cAJTCL \u52a0\u5165\u4e86 mDNS-based discovery \u65b9\u5f0f\u8fdb\u884c AllJoyn \u8def\u7531\u53d1\u73b0\u3002\u4e0b\u6587\u4f7f\u7528 pre-14.12 TCL \u548c 14.12 TCL \u8868\u8ff0\u8fd9\u4e24\u4e2a\u9636\u6bb5\u3002AJTCl \u4e3a BusNode well-known name \u53d1\u9001\u4e00\u4e2a WHO-HAS \u6d88\u606f\uff0c\u5176\u540e\u8ddf\u968f\u4e00\u4e2a\u9000\u907f\u5217\u8868\u3002IS-AT \u6d88\u606f\u7531\u5e7f\u544a BusNode Name \u7684 AllJoyn \u8def\u7531\u901a\u8fc7\u5355\u64ad\u65b9\u5f0f\u53d1\u9001\u5230 AJTCL\u3002\n\n\nConnection phase: The AJTCL establishes a TCP connection\nwith the AllJoyn router based on the connection details\nreceived in the discovery response.\n\n\n\u8fde\u63a5\u9636\u6bb5\uff1aAJTCL \u901a\u8fc7\u4ece discovery response \u4e2d\u83b7\u5f97\u7684\u8be6\u7ec6\u4fe1\u606f\u5efa\u7acb\u4e0e AllJoyn \u8def\u7531\u4e4b\u95f4\u7684 TCP \u8fde\u63a5\u3002\n\n\nAuthentication phase: SASL anonymous authentication is used\nby the AJTCL to authenticate and start using services of the\nAllJoyn router.\n\n\n\u8eab\u4efd\u8ba4\u8bc1\u9636\u6bb5\uff1aAJTCL \u901a\u8fc7 SASL \u533f\u540d\u8eab\u4efd\u8ba4\u8bc1\u5f00\u59cb\u4f7f\u7528 AllJoyn \u8def\u7531\u7684\u670d\u52a1\u3002\n\n\n\n\nAs part of the connection establishment, the AJTCL also exchanges\nthe AllJoyn protocol version (AJPV) with the AllJoyn router.\nIf the AllJoyn router supports a lower AllJoyn protocol version\nthan the minimum AJPV the thin app requires, the connection\nprocess fails. This failure or an authentication failure will\nresult in the routing node being added to the blacklist, described\nin \nRouter blacklisting\n.\nFor the first-time connecting with any AllJoyn router, this\nconnection establishment process also generates a local GUID\nfor the AJTCL and sends it to the AllJoyn router.\n\u4f5c\u4e3a\u8fde\u63a5\u5f62\u6210\u7684\u4e00\u90e8\u5206\uff0cAJTCL \u540c\u6837\u4e0e AllJoyn \u8def\u7531\u4e4b\u95f4\u4ea4\u6362 AllJoyn \u534f\u8bae\u7248\u672c\uff08AJPV\uff09\u3002\u5982\u679c AllJoyn \u8def\u7531\u652f\u6301\u7684\u534f\u8bae\u7248\u672c\u6bd4\u5e94\u7528\u7a0b\u5e8f\u8981\u6c42\u7684\u6700\u4f4e\uff08AJPV\uff09\u7248\u672c\u8fd8\u4f4e\uff0c\u90a3\u4e48\u8fde\u63a5\u8fdb\u7a0b\u5c06\u5931\u8d25\u3002\u8fd9\u79cd\u5931\u8d25\u65b9\u5f0f\u6216\u8005\u5176\u5b83\u7c7b\u578b\u7684\u9a8c\u8bc1\u5931\u8d25\u5c06\u4f1a\u5bfc\u81f4\u8be5\u8282\u70b9\u88ab\u52a0\u5165\u9ed1\u540d\u5355\uff0c\u5728\uff3bRouter blacklisting]\nRN blacklisting\n \u4e2d\u5177\u4f53\u8bf4\u660e\u3002\n\n\nPre-14.12 router discovery\n\n\nThe following figure shows the message flow for the pre-14.12\nrelease for the AJTCL discovering and connecting with the\nAllJoyn router.\n\u4e0b\u56fe\u5c55\u793a\u4e86 pre-14.12 \u7248\u672c AJTCL \u53d1\u73b0\u548c\u8fde\u63a5 AllJoyn \u8def\u7531\u7684\u4fe1\u606f\u6d41\u3002\n\n\n\n\n\u56fe:\n Pre-14.12 router discovery and connection\n\n\nThe AJTCL sends out a WHO-HAS message for the BusNode well-known\nname following the message schedule as described in\n\nWHO-HAS message schedule\n.\nThe response IS-AT message is sent over unicast to the AJTCL\nby the AllJoyn router advertising that BusNode name. Any\nresponses received from the AllJoyn routers on the blacklist\nare ignored.\n\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u3002\u56de\u5e94\u7684 IS-AT \u6d88\u606f\u901a\u8fc7 AllJoyn \u8def\u7531\u5e7f\u64ad\u8be5 BusNode Name \u88ab\u5355\u64ad\u4f20\u64ad\u81f3 AJTCL\u3002\u6240\u6709\u4ece AllJoyn \u8def\u7531\u9ed1\u540d\u5355\u4e2d\u53d1\u51fa\u7684\u56de\u5e94\u4fe1\u606f\u90fd\u4f1a\u88ab\u5ffd\u7565\u3002\n\n\nAfter router discovery, the rest of the AJTCL logic is same as\ndescribed above in \nAJTCL-to-AllJoyn router connection\n.\n\u5728\u8def\u7531\u53d1\u73b0\u5b8c\u6210\u4e4b\u540e\uff0c\u5176\u4f59\u7684 AJTCL \u903b\u8f91\u4e0e\u4e0a\u8ff0 \nAJTCL-to-AllJoyn router connection\n \u90e8\u5206\u5b8c\u5168\u4e00\u81f4\u3002\n\n\nWHO-HAS message schedule WHO-HAS \u6d88\u606f\u6807\u51c6\n\n\nPrior to the 14.12 release, the AJTCL supports the following\nretry schedule for sending WHO-HAS discovery messages:\n\u572814.12\u7248\u672c\u4e4b\u524d\uff0cAJTCL \u652f\u6301\u4ee5\u4e0b\u65b9\u5f0f\u91cd\u53d1 WHO-HAS \u53d1\u73b0\u6d88\u606f\u3002\n\n\n\n\nSend the WHO-HAS message once a second for 10 seconds. \u6bcf 1 \u79d2\u53d1\u9001\u4e00\u6761 WHO-HAS \u6d88\u606f\uff0c\u6301\u7eed 10 \u79d2\u3002\n\n\nWait 10 seconds, then send another WHO-HAS message. \u7b49\u5f8510\u79d2\u540e\uff0c\u518d\u53d1\u9001\u4e00\u6761 WHO-HAS \u6d88\u606f\u3002\n\n\nWait 20 seconds, then send another WHO-HAS message. \u7b49\u5f8520\u79d2\u540e\uff0c\u518d\u53d1\u9001\u4e00\u6761 WHO-HAS \u6d88\u606f\u3002\n\n\nWait 40 seconds, then send another; repeat until the overall discovery\ntimeout expires. \u7b49\u5f8540\u79d2\u540e\uff0c\u518d\u53d1\u9001\u4e00\u6761 WHO-HAS \u6d88\u606f\u3002\u4e0d\u65ad\u91cd\u590d\u76f4\u5230\u53d1\u73b0\u670d\u52a1\u8d85\u65f6\u3002\n\n\n\n\n14.12 router discovery\n\n\nThe following figure shows the message flow for the 14.12 release\nfor the AJTCL discovering and connecting with the AllJoyn router.\n\u4e0b\u56fe\u5c55\u793a\u4e86 14.12 \u7248\u672c AJTCL \u53d1\u73b0\u548c\u8fde\u63a5 AllJoyn \u8def\u7531\u7684\u4fe1\u606f\u6d41\u3002\n\n\n\n\n\u56fe:\n 14.12 router discovery and connection 14.12 \u8def\u7531\u53d1\u73b0\u548c\u8fde\u63a5\n\n\nThe AJTCL supports both mDNS and legacy discovery mechanism. If the\nAJTCL minimum AJPV is lower than \"10\", the AJTCL can connect\nto routers prior to the 14.06 release. In this case, the TCL\ngenerates and sends out both WHO-HAS and mDNS query messages\nfor the BusName prefix. The schedule for sending these messages\nis described in \nDiscovery message schedule\n.\nAJTCL \u540c\u65f6\u652f\u6301 mDNS \u548c\u4ee5\u5f80\u7684\u53d1\u73b0\u673a\u5236\u3002\u5982\u679c AJTCL \u7684\u6700\u4f4e AJPV \u5c0f\u4e8e 10\uff0c\u90a3\u4e48\u8be5 AJTCL \u53ea\u80fd\u4e0e 14.06 \u6216\u66f4\u65e9\u7684\u7248\u672c\u7684\u8def\u7531\u5efa\u7acb\u8fde\u63a5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cTCL \u4f1a\u751f\u6210\u548c\u53d1\u9001 WHO-HAS \u4fe1\u53f7\uff0c\u540c\u65f6\u4e5f\u4f1a\u53d1\u9001 mDNS \u4fe1\u53f7\u67e5\u8be2 BusName \u524d\u7f00\u3002\u53d1\u9001\u6b64\u7c7b\u6d88\u606f\u7684\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605 \nDiscovery message schedule\n\u3002\n\n\nThe discovery response (either an mDNS response or IS-AT message)\nis sent over unicast to the AJTCL by the AllJoyn router advertising\nthat BusNode name. The mDNS responses may include a key-value pair\nindicating the protocol version (the key is 'ajpv') of the\ntransmitting AllJoyn router (this was added in 14.12 release).\nThe value of ajpv is used to ignore the discovery response if\nthe version is less than the minimum required by the thin app.\nIf both IS-AT and mDNS responses are received by AJTCL at the\nsame time, the mDNS response is processed first. Responses received\nfrom the AllJoyn routers on the blacklist are ignored.\nDiscovery response\uff08\u65e0\u8bba mDNS response \u6216\u662f IS-AT message\uff09\u901a\u8fc7\u5e7f\u544a BusNode Name \u7684 AllJoyn \u8def\u7531\u901a\u8fc7\u5355\u64ad\u7684\u65b9\u5f0f\u4f20\u9001\u5230 AJTCL\u3002mDNS response \u53ef\u80fd\u4f1a\u5305\u542b\u4e00\u7ec4\u952e\uff0d\u503c\u5bf9\uff0c\u8bf4\u660e\u4e86\u53d1\u4fe1 AllJoyn \u8def\u7531\u7684\u534f\u8bae\u7248\u672c\uff08\u5728 14.12 \u7248\u672c\u4e2d\u88ab\u52a0\u5165\uff09\uff0c\u534f\u8bae\u7248\u672c\u7684\u952e\u4e3a 'ajpv'\u3002ajpv \u7684\u503c\u7528\u4e8e\u5224\u65ad\u7248\u672c\u662f\u5426\u4f4e\u4e8e\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u8981\u6c42\u7684\u6700\u4f4e\u7248\u672c\uff0c\u5982\u679c\u4f4e\u4e8e\u6700\u4f4e\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u4f1a\u5ffd\u7565 discovery response\u3002\u5982\u679c AJTCL \u540c\u65f6\u6536\u5230 IS-AT \u548c mDNS response\uff0c mDNS response \u5c06\u88ab\u4f18\u5148\u5904\u7406\u3002\u901a\u8fc7 AllJoyn \u8def\u7531\u6536\u5230\u7684\u5728\u9ed1\u540d\u5355\u4e0a\u7684 response \u5c06\u88ab\u5ffd\u7565\u3002\n\n\n\u5728\u8def\u7531\u53d1\u73b0\u5b8c\u6210\u4e4b\u540e\uff0c\u5176\u4f59\u7684 AJTCL \u903b\u8f91\u4e0e\u4e0a\u8ff0 \nAJTCL-to-AllJoyn router connection\n \u90e8\u5206\u5b8c\u5168\u4e00\u81f4\u3002\n\n\nDiscovery message schedule Discovery \u4fe1\u606f\u7b56\u7565\n\n\nThe AJTCL supports a retry schedule for sending discovery messages.\nIt will also selectively send WHO-HAS messages depending on the\nminimum protocol version the thin app requests; if the minimum\nversion is less than 10 it will send both an mDNS query and a\nWHO-HAS message. The retry schedule applies to both types of\ndiscovery messages and is as follows:\n\u5728\u53d1\u9001 discovery \u4fe1\u606f\u65f6\uff0cAJTCL \u63d0\u4f9b\u4e86\u91cd\u8bd5\u7b56\u7565\u3002\u540c\u65f6 AJTCL \u4e5f\u4f1a\u6839\u636e\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u8981\u6c42\u7684\u6700\u4f4e\u534f\u8bae\u7248\u672c\uff0c\u9009\u62e9\u6027\u5730\u53d1\u9001 WHO-HAS \u4fe1\u606f\uff1b\u5f53\u6700\u4f4e\u7248\u672c\u4f4e\u4e8e10\uff0c\u5c06\u4f1a\u540c\u65f6\u53d1\u9001 mDNS \u67e5\u8be2\u548c WHO-HAS \u4fe1\u606f\uff0c\u5e76\u4e14\u91cd\u8bd5\u7b56\u7565\u540c\u65f6\u652f\u6301\u8fd9\u4e24\u8005\u3002\u5177\u4f53\u7b56\u7565\u5982\u4e0b\uff1a\n\n\n\n\nSend a burst of three discovery message(s) and pause 1.1 seconds. Repeat 10\ntimes. \u53d1\u9001\u4e00\u6bb5\u4e09\u8fde discovery \u4fe1\u606f\uff0c\u968f\u540e\u95f4\u9694 1.1 \u79d2\u3002\u91cd\u590d\u5341\u6b21\u3002 \n\n\nWait 10.1 seconds, then send another burst of three messages. \u7b49\u5f8510.1\u79d2\uff0c\u518d\u53d1\u9001\u4e00\u6bb5\u4e09\u8fde\u4fe1\u606f\u3002\n\n\nWait 20.1 seconds, then send another burst of three messages. \u7b49\u5f8520.1\u79d2\uff0c\u518d\u53d1\u9001\u4e00\u6bb5\u4e09\u8fde\u4fe1\u606f\u3002\n\n\nWait 40.1 seconds, then send another burst of three messages. \u7b49\u5f8540.1\u79d2\uff0c\u518d\u53d1\u9001\u4e00\u6bb5\u4e09\u8fde\u4fe1\u606f\u3002\nRepeat until the overall discovery timeout expires. \u4e0d\u65ad\u91cd\u590d\u76f4\u5230\u53d1\u73b0\u670d\u52a1\u8d85\u65f6\u3002\n\n\n\n\nThe addition of the 100 msec on the wait intervals ensures that\nall possible 100ms slots are covered as quickly as possible. \nThis increases the likelihood of successful receipt of multicast\npackets over Wi-Fi.\n\u7b49\u5f85\u95f4\u9694\u65f6\u95f4\u591a\u4f59\u7684 100 \u6beb\u79d2\u4fdd\u8bc1\u4e86\u6240\u6709\u53ef\u80fd\u7684 100 \u6beb\u79d2\u95f4\u9699\u90fd\u88ab\u4ee5\u5c3d\u53ef\u80fd\u5feb\u7684\u901f\u5ea6\u8986\u76d6\u5230\u3002\u8fd9\u589e\u52a0\u4e86\u901a\u8fc7\u4e86 WI-FI \u63a5\u53d7\u591a\u64ad\u6570\u636e\u5305\u56de\u5e94\u7684\u6210\u529f\u7387\u3002\n\n\nRouter Selection \u8def\u7531\u9009\u62e9\n\n\nStarting in the in the 15.04 release a feature called Router Selection was\nintroduced. This feature enables an AJTCL to select the most desirable AllJoyn\nrouter. The detailed \ndesign description\n is available for download\non the Core Working Group \nWikipage\n.\n\u81ea 15.04 \u7248\u672c\u4ee5\u6765\uff0cAllJoyn \u5f15\u5165\u4e86\u8def\u7531\u9009\u62e9\u529f\u80fd\u3002\u5b83\u4e3a AJTCL \u63d0\u4f9b\u4e86\u9009\u62e9\u6700\u7406\u60f3 AllJoyn \u8def\u7531\u7684\u529f\u80fd\u3002\n\u8be6\u7ec6\u63cf\u8ff0\n \uff0c\u8bf7\u8bbf\u95ee\u6838\u5fc3\u5de5\u4f5c\u7ec4 \nWikipage\n \u7684\u9875\u9762\u8fdb\u884c\u4e0b\u8f7d\u3002\n\n\nThe following figure shows the message flow for a 15.04 AJTCL discovering and\nconnecting with a 15.04 AllJoyn router using router selection.\n\u4e0b\u56fe\u5c55\u793a\u4e86 AJTCL \u5229\u7528\u8def\u7531\u9009\u62e9\uff0c\u53d1\u73b0\u5e76\u8fde\u63a5 15.04 \u7248\u672c AllJoyn \u8def\u7531\u7684\u4fe1\u606f\u6d41\u3002\n\n\n\n\n\u56fe:\n Router discovery using Router Selection \u4f7f\u7528\u8def\u7531\u9009\u62e9\u7684\u8def\u7531\u53d1\u73b0\n\n\nAt a high level the feature is implemented in two parts: \u5728\u9ad8\u89c4\u683c\u5e94\u7528\u65f6\uff0c\u8be5\u529f\u80fd\u5c06\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\n\n\n\n\nThe router uses a number of both static and dynamic parameters, including\npower source, mobility, as well as connection availability and capacity, to\ncalculate a \nrank\n, which is communicated via the Priority field of the mDNS\nresponse packet described above in \n14.12 router discovery\n.\nDetails of the algorithm to calculate the rank, and how that is converted into\nthe a DNS Priority value are in the \ndesign description\n.\n\n\n\n\n\u8def\u7531\u4f7f\u7528\u5305\u62ec\u7535\u6e90\u3001\u901f\u7387\u3001\u8fde\u63a5\u53ef\u7528\u6027\u548c\u8fde\u63a5\u5bb9\u91cf\u7b49\u4e00\u7cfb\u5217\u7684\u9759\u6001\u548c\u52a8\u6001\u53c2\u6570\u8fdb\u884c \nrank\n \u7684\u8ba1\u7b97\u3002\nrank\n \u901a\u8fc7\u4e0a\u8ff0 mDNS \u8fd4\u56de\u5305 \n14.12 \u8def\u7531\u53d1\u73b0\n \u4e2d\u7684 Priority \u5b57\u6bb5\u4f53\u73b0\u3002\n\n\n\n\n\n\nAJTCL will wait a minimum of 5 seconds collecting discovery responses. For\neach response received the processing  related to the 'ajpv' key-value pair and\nblacklisting takes place. Once the wait time is complete AJTCL will connect to\nthe router with the highest rank it has received to that point.  If there is a\ntie, or none of the discovery responses it receives contain a rank, it will\nrandomly select among the equivalent routers and connect. After router\ndiscovery, the rest of the AJTCL logic is same as described above in\n\nAJTCL-to-AllJoyn router connection\n.\n\n\n\n\nAJTCL \u81f3\u5c11\u82b1\u8d39 5 \u79d2\u7684\u65f6\u95f4\u63a5\u53d7 discovery \u56de\u5e94\u3002\u6bcf\u4e00\u4e2a\u63a5\u53d7\u7684\u56de\u5e94\u7684\u8fc7\u7a0b\uff0c\u90fd\u4e0e\u4e0a\u8ff0 \u2018ajpv\u2019 \u952e\uff0d\u503c\u5bf9\u76f8\u5173\uff0c\u540c\u65f6\u9ed1\u540d\u5355\u4e5f\u5bf9\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u6548\u3002\u5f53\u7b49\u5f85\u65f6\u95f4\u7ed3\u675f\uff0cAJTCL \u5c06\u9009\u62e9\u671f\u95f4\u63a5\u6536\u7684\u8def\u7531 rank \u6700\u9ad8\u7684\u4e00\u4e2a\u8fdb\u884c\u8fde\u63a5\u3002\u5982\u679c rank \u503c\u76f8\u540c\uff0c\u6216\u8005 discovery \u56de\u5e94\u4e2d\u4e0d\u5305\u542b rank\uff0c AJTCL \u5c06\u5728\u8def\u7531\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5e76\u8fde\u63a5\u3002\n\n\n\n\nRouter blacklisting \u8def\u7531\u9ed1\u540d\u5355\n\n\nStarting in the in the 15.04 release a feature called router blacklisting was\nadded. This feature enables an AJTCL to track routers that are incompatible and\navoid attempting to connect to them again. In order to track incompatible\nrouters (as determined during connection establishment), a blacklist has been\nimplemented. The blacklist ensures discovery responses for routers on the\nblacklist are ignored.\n\u81ea 15.04 \u7248\u672c\u4ee5\u6765\uff0cAllJoyn \u5f15\u5165\u4e86\u8def\u7531\u9ed1\u540d\u5355\u529f\u80fd\u3002\u6b64\u529f\u80fd\u4f7f\u5f97 AJTCL \u80fd\u591f\u8ffd\u8e2a\u4e0d\u517c\u5bb9\u7684\u8def\u7531\uff0c\u5e76\u907f\u514d\u518d\u6b21\u8fde\u63a5\u5b83\u4eec\u3002\u4e3a\u4e86\u8ffd\u8e2a\u4e0d\u517c\u5bb9\u8def\u7531\uff08\u6839\u636e\u5efa\u7acb\u60c5\u51b5\u51b3\u5b9a\uff09\uff0c\u5efa\u7acb\u4e86\u9ed1\u540d\u5355\u3002\u9ed1\u540d\u5355\u786e\u4fdd\u5728\u540d\u5355\u5185\u7684 discovery \u56de\u5e94\u88ab\u5ffd\u7565\u3002\n\n\nThe explicit criteria for adding a router to the blacklist\nis a connection failure either because authentication does\nnot complete successfully, or because the protocol version\nof the router does not meet the minimum required by the thin app.\nThe default size of the blacklist is 16 entries; the addition of\na 17th router will over-write the first in the list (i.e.,\nthe list is actually a circular buffer). The blacklist only\npersists until the thin app is restarted.\n\u5c06\u8def\u7531\u52a0\u5165\u9ed1\u540d\u5355\u7684\u660e\u786e\u6807\u51c6\u6709\u4e24\u70b9\u3002\u4e00\u662f\u8eab\u4efd\u8ba4\u8bc1\u5931\u8d25\u5bfc\u81f4\u7684\u4e0d\u6210\u529f\u8fde\u63a5\uff1b\u4e8c\u662f\u534f\u8bae\u7248\u672c\u4f4e\u4e8e\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u8981\u6c42\u7684\u6700\u4f4e\u6807\u51c6\u3002\u9ed1\u540d\u5355\u7684\u9ed8\u8ba4\u5bb9\u91cf\u662f 16\uff1b\u7b2c 17 \u4e2a\u8def\u7531\u5c06\u8986\u76d6\u7b2c 1 \u4e2a(\u5373\u9ed1\u540d\u5355\u5217\u8868\u662f\u4e00\u4e2a\u5faa\u73af\u7f13\u51b2\u533a)\u3002\u9ed1\u540d\u5355\u4f1a\u5728\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u91cd\u542f\u65f6\u91cd\u7f6e\u3002\n\n\nAJTCL and AllJoyn router compatibility AJTCL \u548c AllJoyn \u8def\u7531\u517c\u5bb9\u6027\n\n\nThe following table captures the compatibility matrix between\nthe AJTCL and AllJoyn router across the AllJoyn 14.02 and 14.06\nreleases. The AJTCL using the 14.06 release is only compatible\nwith a 14.02 AllJoyn router if the router does not require AJTCL\nauthentication. The AJTCL default minimum protocol version\nin the 14.12 AJTCL is set to 11 (the version of the 14.12\nAllJoyn router), but can be changed by the thin application\nif it does not need to use the NGNS feature.\n\u4e0b\u8868\u5c55\u793a\u4e86 14.02 \u548c 14.06 \u7248\u672c\u4e2d AJTCL \u548c AllJoyn \u8def\u7531\u4e4b\u95f4\u7684\u517c\u5bb9\u6027\n\n\nAJTCL and AllJoyn router compatibility\n\n\n\n\n\n\n\n\nAJTCL / Router\n\n\n14.02 (AJTCL auth enabled)\n\n\n14.06 (AJTCL auth disabled)\n\n\n14.06\n\n\n\n\n\n\n\n\n\n\n14.02\n\n\nCompatible\n\n\nCompatible\n\n\nCompatible\n\n\n\n\n\n\n14.06 (thin app not using NGNS)\n\n\nIncompatible\n\n\nCompatible\n\n\nCompatible\n\n\n\n\n\n\n14.06 (thin app using NGNS)\n\n\nIncompatible\n\n\nIncompatible\n\n\nCompatible\n\n\n\n\n\n\n\n\nDetecting a router link failure \u53d1\u73b0\u8def\u7531\u94fe\u63a5\u5931\u8d25\n\n\nThe AJTCL provides a mechanism for the thin application to\nimplement a probing mechanism to detect connectivity failures\nwith the AllJoyn router. This can be achieved by invoking the\n\nSetBusLinkTimeout()\n API provided by the AJTCL. The thin app\nspecifies a timeout value (with minimum timeout of 40 seconds)\nas part of this API. If no link activity is detected during\nthis time period, the AJTCL sends probe packets every 5 seconds\nover the router link. If no acknowledgment is received for three\nconsecutive probe packets, an error is returned to the thin application.\nAJTCL \u4e3a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u79cd\u68c0\u6d4b\u4e0e AllJoyn \u8def\u7531\u4e4b\u95f4\u5931\u8d25\u8fde\u63a5\u7684\u673a\u5236\u3002\u901a\u8fc7\u8c03\u7528 AJTCL \u63d0\u4f9b\u7684 \nSetBusLinkTimeout()\n API \u5b9e\u73b0\u3002\u5728 API \u4e2d\uff0c\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u8d85\u65f6\u503c\uff08\u81f3\u5c11 40 \u79d2\uff09\u3002\u5982\u679c\u5728\u8fd9\u671f\u95f4\u6ca1\u6709\u53d1\u73b0\u6d3b\u52a8\u8fde\u63a5\uff0cAJTCL \u5c06\u5728\u8def\u7531\u94fe\u63a5\u4e2d\u6bcf\u9694 5 \u79d2\u53d1\u9001\u4e00\u4e2a\u63a2\u6d4b\u5305\uff0c\u5e76\u628a\u9519\u8bef\u8fd4\u56de\u7ed9\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nAt this point, the thin app should re-initiate discovery for the AllJoyn router.\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u518d\u6b21\u542f\u52a8\u5bfb\u627e ALlJoyn \u8def\u7531\u7684 discovery\u3002\n\n\nThin app functionality \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u529f\u80fd\n\n\nAs mentioned previously, the AJTCL supports all of the key\nAllJoyn core functionality as a standard core library. APIs\nare provided as part of the AJTCL for the thin app to invoke\ncore functionality. The AJTCL in turn generates appropriate\nAllJoyn format messages (for method_call/reply, signals etc.)\nto invoke related APIs on the AllJoyn router. The AJTCL sends\nthe generated AllJoyn messages to the AllJoyn router to accomplish\nthe given functionality. The thin app message flow for core\nfunctionality is similar to the standard app with the key difference\nthat the thin app is connected remotely with the AllJoyn router.\n\u5982\u4e0a\u6587\u6240\u8ff0\uff0cAJTCL \u652f\u6301\u6807\u51c6\u5185\u6838\u7684\u4e3b\u8981\u529f\u80fd\u3002AJTCL \u63d0\u4f9b\u4e86\u4e00\u4e9b API\uff0c\u4f7f\u5f97\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u8c03\u7528\u6838\u5fc3\u529f\u80fd\u3002AJTCL \u8f6e\u6d41\u751f\u6210\u5408\u9002\u7684 AllJoyn \u683c\u5f0f\u4fe1\u606f\uff08\u4e3a\u65b9\u6cd5\u8c03\u7528\uff0f\u56de\u5e94\uff0c\u4fe1\u53f7\u7b49\uff09\u8c03\u7528 AllJoyn \u8def\u7531\u4e0a\u7684\u76f8\u5173 API\u3002AJTCL \u5411 AllJoyn \u8def\u7531\u53d1\u9001\u751f\u6210\u7684 AllJoyn \u4fe1\u606f\u4ee5\u5b8c\u6210\u6307\u5b9a\u529f\u80fd\u3002\n\n\nThe following figure shows an example message flow for a thin\napp discovering a well-known name prefix.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0 well-known name \u524d\u7f00\u7684\u4fe1\u606f\u6d41\u3002\n\n\n\u6ce8\u610f:\n The AJTCL and AllJoyn router exchange data using AllJoyn\nmessages (method_call/reply and signals). AJTCL \u4e0e AllJoyn \u8def\u7531\u4e4b\u95f4\u901a\u8fc7 AllJoyn \u4fe1\u606f\uff08\u65b9\u6cd5\u8c03\u7528\uff0f\u56de\u5e94\u548c\u4fe1\u53f7\uff09\u4ea4\u6362\u6570\u636e\u3002\n\n\n\n\n\u56fe:\n Thin app discovering a well-known-name prefix \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0 well-known-name \u524d\u7f00\n\n\nThe AJTCL provides support for following core AJ functionality: AJTCL \u4e3a\u4ee5\u4e0b\u6838\u5fc3 AJ \u529f\u80fd\u63d0\u4f9b\u652f\u6301\uff1a\n\n\n\n\nService Discovery and Advertisement:  Both legacy Name Service\nand Next-Gen Name Service functions are supported. \u670d\u52a1\u7684\u53d1\u73b0\u548c\u5e7f\u544a\uff1a\u652f\u6301\u8001\u7248\u672c\u548c\u65b0\u7248\u672c\u7684 Name Service\u3002\n\n\nAbout advertisement About \u5e7f\u544a\n\n\nSession establishment \u4f1a\u8bdd\u5efa\u7acb\n\n\nSessionless signals \n\n\nApp layer authentication \u5e94\u7528\u5c42\u8ba4\u8bc1\n\n\nThe AJTCL provides app layer authentication so that thin app\ncan implement secure interfaces and also access secure\ninterfaces on other AllJoyn providers.AJTCl \u63d0\u4f9b\u5e94\u7528\u5c42\u8ba4\u8bc1\u3002\u4f7f\u5f97\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5b9e\u73b0\u5b89\u5168\u63a5\u53e3\uff0c\u5e76\u8bbf\u95ee\u5176\u5b83 AllJoyn \u63d0\u4f9b\u8005\u7684\u5b89\u5168\u63a5\u53e3\u3002\n\n\nNew authentication schemes are supported in the 14.06 release\n(see \nApp layer authentication\n). 14.06 \u7248\u672c(\u67e5\u9605 \nApp layer authentication\n)\u4e2d\u652f\u6301\u65b0\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\n\n\n\n\nThin apps can also include existing AllJoyn service framework\nfunctionality by bundling thin app-specific libraries provided\nfor these service frameworks.\n\u901a\u8fc7\u7ed1\u5b9a\u5e94\u7528\u7a0b\u5e8f\u6307\u5b9a\u7684\u8d44\u6e90\u5e93\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e5f\u80fd\u591f\u5305\u542b\u5df2\u6709 AllJoyn \u670d\u52a1\u67b6\u6784\u7684\u529f\u80fd\u3002\n\n\nApp layer authentication \u5e94\u7528\u5c42\u8ba4\u8bc1\n\n\nThe AJTCL provides support for app layer authentication for\nthe thin app to implement and access secure AllJoyn services.\nApp layer authentication schemes supported are different in\nrelease prior to the 14.06 release and starting from the 14.06\nrelease as described below.\nAJTCL \u4e3a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u5e94\u7528\u5c42\u8ba4\u8bc1\uff0c\u4f7f\u5176\u53ef\u4ee5\u90e8\u7f72\u548c\u8bbf\u95ee\u5b89\u5168 AllJoyn \u670d\u52a1\u300214.06\u7248\u672c\u4e4b\u524d\u7684\u5e94\u7528\u5c42\u8ba4\u8bc1\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4e0b\u6587\u91cd\u70b9\u4ecb\u7ecd 14.06 \u7248\u672c\u548c\u4ee5\u540e\u7248\u672c\u7684\u8ba4\u8bc1\u65b9\u5f0f\u3002\n\n\nPrior to the 14.06 release, the AJTCL supports ALLJOYN _PIN_KEYX\nauth mechanism for app layer authentication. Also, SASL protocol\nis used for authentication.\n\u5728 14.06 \u7248\u672c\u4e4b\u524d\uff0cAJTCL \u652f\u6301\u5e94\u7528\u5c42\u8ba4\u8bc1\u7684 ALLJOYN _PIN_KEYX \u9a8c\u8bc1\u673a\u5236\u3002\u540c\u65f6\uff0c\u4e5f\u652f\u6301 SASL \u534f\u8bae\u8ba4\u8bc1\u3002\n\n\nStarting from the 14.06 release, ALLJOYN _PIN_KEYX auth mechanism\nis removed from AJTCL. New Elliptic Curve Diffie-Hellman Ephemeral\n(ECDHE)-based auth mechanism were added to the AJTCL:\n\u81ea 14.06 \u7248\u672c\u8d77\uff0cAJTCL \u79fb\u9664\u4e86 ALLJOYN _PIN_KEYX \u9a8c\u8bc1\u673a\u5236\u3002\u52a0\u5165\u4e86 New Elliptic Curve Diffie-Hellman Ephemeral\n(ECDHE)-based \u9a8c\u8bc1\u673a\u5236\u3002\n\n\n\n\nECDHE_NULL is an anonymous key agreement. There is no PIN or pass-phrase\nrequired.ECDHE_NULL \u662f\u533f\u540d\u7684\u5bc6\u94a5\u534f\u5546\u534f\u8bae\u3002\u4e0d\u9700\u8981 PIN \u6216\u8005\u5bc6\u7801\u77ed\u8bed\u3002\n\n\nECDHE_PSK is a key agreement authenticated with a pre-shared\nkey like a PIN, pass-phrase, or symmetric key. ECDHE_PSK \u662f\u901a\u8fc7\u9884\u5171\u4eab\u5bc6\u94a5\uff0c\u5982 PIN\u3001\u5bc6\u7801\u77ed\u8bed\u6216\u5bf9\u79f0\u5bc6\u94a5\u9a8c\u8bc1\u7684\u533f\u540d\u7684\u5bc6\u94a5\u534f\u5546\u534f\u8bae\u3002\n\n\nECDHE_ECDSA is a key agreement authenticated with an asymmetric\nkey validated with an ECDSA signature. ECDHE_ECDSA \u662f\u901a\u8fc7 ECDSA \u7b7e\u540d\u751f\u6210\u7684\u975e\u5bf9\u79f0\u5bc6\u94a5\u8fdb\u884c\u8ba4\u8bc1\u7684\u7684\u5bc6\u94a5\u534f\u5546\u534f\u8bae\u3002\n\n\n\n\nThe use of SASL protocol for authentication is removed from the\nAJTCL in the 14.06 release. Instead, an AllJoyn-based protocol\nis used for app layer authentication.\n14.06 \u7248\u672c\u79fb\u9664\u4e86 SASL \u534f\u8bae\u7684\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u52a0\u5165\u4e86\u4e00\u79cd\u57fa\u4e8e AllJoyn \u7684\u534f\u8bae\u8fdb\u884c\u5e94\u7528\u5c42\u8ba4\u8bc1\u3002\n\n\nAuth compatibility \u8ba4\u8bc1\u517c\u5bb9\u6027\n\n\nA 14.06 thin app cannot interact with a 14.02 thin app over secure\ninterfaces and vice versa because these apps support different types\nof auth mechanisms. These apps can still talk to each other over non-secure\ninterfaces.\n14.06 \u7248\u672c\u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u4e0e 14.02 \u7248\u672c\u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5b89\u5168\u63a5\u53e3\u8fdb\u884c\u4e92\u52a8\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u56e0\u4e3a\u5b83\u4eec\u5206\u522b\u91c7\u7528\u4e86\u4e0d\u540c\u7684\u8ba4\u8bc1\u65b9\u5f0f\u3002\u4f46\u5b83\u4eec\u53ef\u4ee5\u901a\u8fc7\u975e\u5b89\u5168\u63a5\u53e3\u8fdb\u884c\u4e92\u52a8\u3002\n\n\nThe following table shows the thin app compatibility matrix across the 14.02 and\n14.06 releases.\n\u4e0b\u8868\u5c55\u793a\u4e86 14.02 \u548c 14.06 \u7248\u672c\u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u517c\u5bb9\u6027\n\n\n\n\n\n\n\n\n14.02 provider thin app\n\n\n14.06 consumer thin app\n\n\n\n\n\n\n\n\n\n\nWith secure interfaces\n\n\nIncompatible\n\n\n\n\n\n\nWith non-secure interfaces\n\n\nCompatible\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n14.06 provider thin app\n\n\n14.02 consumer thin app\n\n\n\n\n\n\n\n\n\n\nWith secure interfaces\n\n\nIncompatible\n\n\n\n\n\n\nWith non-secure interfaces\n\n\nCompatible",
            "title": "Thin apps"
        },
        {
            "location": "/learn/core/system-description/thin-apps/#thin-apps",
            "text": "",
            "title": "Thin Apps \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f"
        },
        {
            "location": "/learn/core/system-description/thin-apps/#overview",
            "text": "The AllJoyn  system is designed to operate across AllJoyn-enabled\ndevices with different capabilities. The AllJoyn Standard Core Library (AJSCL)\nis designed to run on devices that usually have significant\namounts of memory, available energy, and computing power,\nalong with operating systems that support multiple processes/threads\nwith multiple standard language environments. The AJSCL is designed\nfor general purpose computer devices and supports application\nrunning on HLOS including Microsoft Windows, Linux, Android, iOS, and OpenWRT.\nAllJoyn \u7cfb\u7edf\u65e8\u5728\u5b9e\u73b0\u5938 AllJoyn \u8bbe\u5907\u7684\u529f\u80fd\u63a7\u5236\u3002AllJoyn \u6807\u51c6\u5185\u6838\u8d44\u6e90\u5e93\u901a\u5e38\u5e94\u7528\u4e8e\u62e5\u6709\u8f83\u5927\u5185\u5b58\u3001\u8f83\u5927\u7535\u6e90\u3001\u8f83\u5f3a\u5904\u7406\u80fd\u529b\u548c\u62e5\u6709\u591a\u7ebf\u7a0b\u64cd\u4f5c\u548c\u591a\u79cd\u6807\u51c6\u8bed\u8a00\u73af\u5883\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u3002AJSCL \u4e3a\u901a\u7528\u8ba1\u7b97\u673a\u8bbe\u8ba1\uff0c\u652f\u6301\u8fd0\u884c\u5728 HLOS\uff08\u5305\u62ecMicrosoft Windows\u3001Linux\u3001Android\u3001iOS \u548c OpenWRT\uff09\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u3002  On the other hand, single-purpose AllJoyn-enabled devices\nusually have an embedded system running on a microcontroller\ndesigned to provide specific functionality. Such embedded\nsystems are optimized to reduce the size and cost of the product,\noften by limiting memory size, processor speed, available power,\nperipherals, user interfaces, or all of the above.\nThe AllJoyn Thin Core Library (AJTCL) is designed to bring\nthe benefits of the AllJoyn distributed programming environment\nto embedded system-based devices.\n\u53e6\u4e00\u65b9\u6848\uff0c\u5355\u4e00\u76ee\u7684\u7684 AllJoyn \u8bbe\u5907\u901a\u5e38\u62e5\u6709\u4e00\u5957\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3002\u8be5\u7cfb\u7edf\u8fd0\u884c\u5728\u63d0\u4f9b\u67d0\u79cd\u7279\u5b9a\u529f\u80fd\u7684\u5fae\u63a7\u5236\u5668\u4e0a\u3002\u8fd9\u4e9b\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e3a\u4e86\u964d\u4f4e\u8bbe\u5907\u7684\u6210\u672c\u548c\u7f29\u51cf\u8bbe\u5907\u7684\u4f53\u79ef\uff0c\u901a\u5e38\u91c7\u7528\u524a\u51cf\u5185\u5b58\uff0c\u964d\u4f4e\u5904\u7406\u901f\u5ea6\uff0c\u9650\u5236\u7535\u6e90\u529f\u7387\uff0c\u5220\u9664\u5468\u8fb9\u8bbe\u5907\u548c\u7528\u6237\u63a5\u53e3\u7b49\u65b9\u6cd5\u3002AllJoyn \u7cbe\u7b80\u5185\u6838\u4e3a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u8bbe\u5907\u63d0\u4f9b\u4e86\u826f\u597d\u7684 AllJoyn \u5206\u5e03\u5f0f\u7f16\u7a0b\u73af\u5883\u3002  The AJTCL provides a lightweight implementation of core AllJoyn\nfunctionality for embedded microcontroller applications. An embedded\nsystem-based AllJoyn device (thin AllJoyn device) only includes an\nAllJoyn thin application utilizing the AJTCL and does not include\nan AllJoyn router component because of its resource-constrained\nenvironment. It borrows an AllJoyn router from another standard\nAllJoyn-enabled device in the AllJoyn proximal network, and\nuses it for core AllJoyn functions including advertisement and\nmessage routing. An AllJoyn thin application is fully compatible\nand inter-operable with standard AllJoyn applications on the\nAllJoyn proximal network. In fact, a remote application will\nnot even know that it is talking with an AllJoyn thin application\non the other side.\nAJTCL \u4e3a\u5d4c\u5165\u5f0f\u5fae\u63a7\u5236\u5668\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u6838\u5fc3 AllJoyn \u529f\u80fd\u7684\u5b9e\u73b0\u65b9\u6848\u3002\u5d4c\u5165\u5f0f AllJoyn \u8bbe\u5907\uff08\u7cbe\u7b80 AllJoyn \u8bbe\u5907\uff09\u53ea\u5305\u542b\u4e00\u4e2a\u91c7\u7528 AJTCL \u7684\u7cbe\u7b80 AllJoyn \u7a0b\u5e8f\uff0c\u9274\u4e8e\u6709\u9650\u7684\u8d44\u6e90\u73af\u5883\uff0c\u5e76\u4e0d\u5305\u542b AllJoyn \u8def\u7531\u7ec4\u4ef6\u3002\u5b83\u5411 AllJoyn \u4e34\u57df\u7f51\u7edc\u5185\u7684\u67d0\u4e00\u6807\u51c6 AllJoyn \u8bbe\u5907\u501f\u7528\u5176 AllJoyn \u8def\u7531\uff0c\u5e76\u5229\u7528\u5b83\u5b9e\u73b0 AllJoyn \u6838\u5fc3\u529f\u80fd\uff0c\u5982 advertisement \u548c\u4fe1\u606f\u8f6c\u53d1\u3002AllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u517c\u5bb9\u4e0e\u4e34\u57df\u7f51\u7edc\u5185\u7684\u6807\u51c6 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u4e92\u64cd\u4f5c\u3002\u5b9e\u9645\u4e0a\uff0c\u8fdc\u7a0b\u63a7\u5236\u7a0b\u5e8f\u751a\u81f3\u4e0d\u77e5\u9053\u53e6\u4e00\u4fa7\u4e0e\u6b63\u81ea\u5df1\u8fdb\u884c\u4f1a\u8bdd\u7684\u662f\u4e00\u4e2a\u7cbe\u7b80 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u3002  The following figure shows a context architecture depicting\nhow AllJoyn thin applications fit in the overall AllJoyn distributed system.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u9002\u914d\u6574\u4e2a AllJoyn \u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u8054\u7cfb\u7ed3\u6784\u3002   \u56fe:  Thin app context architecture \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u8054\u7cfb\u7ed3\u6784  It shows two thin AllJoyn-enabled devices (device 3 and device 4)\nwith a single AllJoyn thin application installed on each of them.\nA thin app is built on top of AJTCL and it connects with the\ndistributed AllJoyn bus by establishing a connection with an\nAllJoyn router on a standard AllJoyn-enabled device (e.g., AllJoyn router\ninstalled on the Wi-Fi Access Point). The AJTCL uses the AllJoyn\nservice advertisement and discovery process to discover the\nAllJoyn router via a BusNode well-known name. After the\ndiscovery phase, the AJTCL establishes a connection with\nthe discovered AllJoyn router over TCP. Once connected with\nthe AllJoyn router, the thin app is just like any other\napplication endpoint on the AllJoyn distributed bus.\n\u8be5\u56fe\u5c55\u793a\u4e86\u4e24\u4e2a AllJoyn \u8bbe\u5907\uff08device 3 \u548c device 4\uff09\uff0c\u5b83\u4eec\u5404\u81ea\u5b89\u88c5\u4e86\u4e00\u4e2a AllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u3002\u57fa\u4e8e AJTCL \u5efa\u7acb\u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u4e0e\u4e00\u4e2a\u6807\u51c6 AllJoyn \u8bbe\u5907\u4e0a\u7684\u8def\u7531\uff08\u5982\u5b89\u88c5\u5728 Wi-Fi Access Point \u4e0a\u7684 AllJoyn \u8def\u7531\uff09\u4e0e\u5206\u5e03\u5f0f AllJoyn \u603b\u7ebf\u5efa\u7acb\u8fde\u63a5\u3002AJTCL \u4f7f\u7528 AllJoyn \u7684 advertisement \u548c discovery \u670d\u52a1\uff0c\u901a\u8fc7 BusNode well-known name \u53d1\u73b0 AllJoyn \u8def\u7531\u3002  \u6ce8\u610f:  More than one thin application can connect to a given AllJoyn router. \u591a\u4e2a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53ef\u8fde\u63a5\u5230\u5355\u4e2a\u6307\u5b9a AllJoyn \u8def\u7531\u3002  A thin app can act as an AllJoyn service provider, an AllJoyn\nservice consumer or both. It follows the same session establishment\nprocedures as AllJoyn standard apps to accept sessions from and/or\nconnect to sessions with other remote apps, which can be another\nAllJoyn thin app or AllJoyn standard app.\n\u4e00\u4e2a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53ef\u540c\u65f6\u4f5c\u4e3a AllJoyn \u670d\u52a1\u7684\u63d0\u4f9b\u8005\u548c\u4f7f\u7528\u8005\uff0c\u6216\u5176\u4e2d\u7684\u4efb\u4e00\u8eab\u4efd\u3002\u4f1a\u8bdd\u7684\u5efa\u7acb\u65b9\u5f0f\u4e0e\u6807\u51c6 AllJoyn \u5e94\u7528\u7a0b\u5e8f\u63a5\u53d7\u3001\u5efa\u7acb\u4e0e\u53e6\u4e00\u4e2a\u8fdc\u7a0b\u5e94\u7528\u7a0b\u5e8f\uff08\u6807\u51c6\u5e94\u7528\u7a0b\u5e8f\u6216\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\uff09\u4f1a\u8bdd\u7684\u8fc7\u7a0b\u76f8\u540c\u3002",
            "title": "Overview \u6982\u89c8"
        },
        {
            "location": "/learn/core/system-description/thin-apps/#functional-architecture",
            "text": "The following figure shows the detailed functional architecture\nfor an AllJoyn thin application. A thin app includes app-specific\ncode (app code) and the AJTCL. As part of the app code, a thin\napp can include one or more AllJoyn service frameworks which\ninclude Onboarding, Configuration, and Notification service\nframeworks. App Code also includes app-specific AllJoyn services\nif the thin app is acting as an AllJoyn service provider.\n\u4e0b\u56fe\u5c55\u793a\u4e86 AllJoyn \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7684\u8be6\u7ec6\u529f\u80fd\u7ed3\u6784\u3002\u4e00\u4e2a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5305\u542b\u4e86\u5e94\u7528\u6307\u5b9a\u4ee3\u7801\uff08\u5e94\u7528\u4ee3\u7801\uff09\u548c AJTCL\u3002\u4f5c\u4e3a\u5e94\u7528\u4ee3\u7801\u7684\u4e00\u90e8\u5206\uff0c\u4e00\u4e2a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5305\u542b\u4e86\u4e00\u4e2a\u6216\u591a\u4e2a AllJoyn \u670d\u52a1\u67b6\u6784\u3002\u8fd9\u4e9b\u670d\u52a1\u67b6\u6784\u5305\u542b\u4e86 Onboarding\u3001Configuration \u548c Notification \u670d\u52a1\u67b6\u6784\u3002\u5982\u679c\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4ee5 AllJoyn \u670d\u52a1\u63d0\u4f9b\u8005\u7684\u8eab\u4efd\u8fd0\u884c\uff0c\u90a3\u4e48\u5176\u5e94\u7528\u4ee3\u7801\u4e5f\u4f1a\u5305\u542b\u5e94\u7528\u6307\u5b9a AllJoyn \u670d\u52a1\u3002   \u56fe:  Thin app functional architecture \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u529f\u80fd\u7ed3\u6784  The AJTCL consists of some key functional modules as shown in\nthe previous figure, among other supported functions. These include\nBus Connection Manager, About, Messaging and App Authentication modules.\nAJTCL \u5305\u542b\u4e86\u4e0a\u56fe\u4e2d\u6240\u793a\u652f\u6301\u7684\u529f\u80fd\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u529f\u80fd\u6a21\u5757\u3002\u8fd9\u4e9b\u6a21\u5757\u5305\u542b\u4e86 Bus Connection Manager\u3001About\u3001Messaging \u548c App Authentication \u6a21\u5757\u3002   The Bus Connection Manger module provides discovery and\nconnection establishment with a nearby AllJoyn router (BusNode).  Bus Connection Manager \u6a21\u5757\u63d0\u4f9b\u4e86\u53d1\u73b0\u5468\u8fb9 AllJoyn \u8def\u7531\uff08BusNode\uff09\u5e76\u4e0e\u4e4b\u5efa\u7acb\u8fde\u63a5\u7684\u529f\u80fd\u3002  The About module provides advertisement and discovery\nfunctions for thin app. It supports sending out the Announcement\nsessionless signal for the thin app over distributed AllJoyn bus.  About \u6a21\u5757\u4e3a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b advertisement \u548c discovery \u529f\u80fd\u3002\u8be5\u6a21\u5757\u652f\u6301\u5728\u5206\u5e03\u5f0f  AllJoyn \u603b\u7ebf\u4e0a\u53d1\u51fa\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7684 Annoucement sessionless signal\u3002  The  marshaling module provides marshaling/unmarshaling for AllJoyn\nmessages and routing these to the connected AllJoyn router.  Marshaling \u6a21\u5757\u4e3a AllJoyn \u4fe1\u606f\u63d0\u4f9b\u4e86\u5c01\u9001\u548c\u9006\u5c01\u9001\u529f\u80fd\uff0c\u5e76\u628a\u8fd9\u4e9b\u4fe1\u606f\u8f6c\u53d1\u5230\u8fde\u63a5\u7684 AllJoyn \u8def\u7531\u4e0a\u3002  The App Authentication module provides application-level authentication\nand security between thin app and remote AllJoyn apps. The ALLJOYN_PIN_KEYX\nauth mechanism is supported in the AJTCL for releases before the 14.06 release.\nThis auth mechanism is removed from AJTCL in the 14.06 release.\nStarting from the 14.06 release, the AJTCL supports a new set of\nElliptic Curve Diffie-Hellman Ephemeral (ECDHE)-based auth mechanisms\nas described in  App layer authentication .  App Authentication \u6a21\u5757\u4e3a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4e0e\u8fdc\u7a0b AllJoyn \u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u63d0\u4f9b\u4e86\u5e94\u7528\u7ea7\u522b\u7684\u8eab\u4efd\u9a8c\u8bc1\u548c\u5b89\u5168\u4fdd\u62a4\u3002\u5728 14.06 \u7248\u672c\u4e4b\u524d\uff0cAJTCL \u91c7\u7528\u7684\u662f ALLJOYN_PIN_KEYX \u9a8c\u8bc1\u673a\u5236\u300214.06 \u7248\u672c\u4ee5\u53ca\u5176\u540e\u7eed\u7248\u672c\uff0c\u90fd\u91c7\u7528\u4e86\u4e00\u5957\u5168\u65b0\u7684\u5982  App layer authentication  \u6240\u8ff0\u7684\u57fa\u4e8eElliptic Curve Diffie-Hellman Ephemeral (ECDHE)\u7684\u9a8c\u8bc1\u673a\u5236\u3002",
            "title": "Functional architecture \u529f\u80fd\u7ed3\u6784"
        },
        {
            "location": "/learn/core/system-description/thin-apps/#ajtcl-to-alljoyn-router-connection-ajtcl-alljoyn",
            "text": "Upon startup, the thin application initiates the process of\ndiscovery and connection establishment with an AllJoyn router\non another standard AllJoyn-enabled device. This is done using\nthe name-based discovery mechanism.\n\u5728\u542f\u52a8\u65f6\uff0c\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8 discovery \u8fdb\u7a0b\uff0c\u4e0e\u53e6\u4e00\u4e2a\u6807\u51c6 AllJoyn \u8bbe\u5907\u4e0a\u7684 AllJoyn \u8def\u7531\u5efa\u7acb\u8fde\u63a5\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u901a\u8fc7 name-based discovery \u673a\u5236\u5b9e\u73b0\u3002  An AllJoyn router that supports hosting connections for thin apps\nadvertises a BusNode well-known name. The advertised well-known\nname can be one or both of the following:\nAllJoyn \u8def\u7531\u652f\u6301\u5e7f\u544a BusNode well-known name \u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u3002\u88ab\u5e7f\u544a\u7684 well-known name \u62e5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u4e0b\u5217\u5c5e\u6027\u3002   Generic BusNode well-known name \"org.alljoyn.BusNode\"\ndriven by the AllJoyn router configuration  \u7531 AllJoyn \u8def\u7531\u914d\u7f6e\u7684\u901a\u7528 Generic BusNode well-known name \"org.alljoyn.BusNode\"  Specific BusNode well-known name advertised by an application\nattached to the AllJoyn router, meant for discovery only by\nrelated thin applications.  \u7531\u8fde\u63a5\u5230 AllJoyn \u8def\u7531\u7684\u5e94\u7528\u7a0b\u5e8f\u5e7f\u64ad\u7684\u7279\u5b9a BusNode well-known name\uff0c\u65e8\u5728\u53d1\u73b0\u76f8\u5173\u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u3002   The AllJoyn router advertises the BusNode well-known name quietly,\nthat is, the advertisement messages are not sent out\ngratuitously by the AllJoyn router. Instead, the AllJoyn router\nonly sends out the BusNode well-known name advertisement in\nresponse to a query from a thin app. Also, the advertisement\nmessage is sent out quietly via unicast back to the requester\n(instead of being sent over multicast). This logic is meant\nto minimize the network traffic generated as a result of\nthin app-related discovery of an AllJoyn router.\nAllJoyn \u8def\u7531\u4ee5\u88ab\u52a8\u65b9\u5f0f\u5e7f\u544a BusNode well-known name\uff0c\u5e7f\u544a\u4fe1\u606f\u4e0d\u4f1a\u88ab\u5e73\u767d\u65e0\u6545\u5730\u53d1\u9001\u3002\u5f53\u6536\u5230\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u7684\u7684\u67e5\u8be2\u9700\u6c42\u65f6\uff0c\u624d\u4f1a\u53d1\u9001 BusNode well-known name advertisement\u3002\u6b64\u5916\uff0c\u5e7f\u544a\u4fe1\u606f\u901a\u8fc7\u5355\u64ad\u65b9\u5f0f\uff08\u800c\u4e0d\u662f\u591a\u64ad\u65b9\u5f0f\uff09\u56de\u5e94\u7ed9\u8bf7\u6c42\u8005\u3002\u8fd9\u6837\u7684\u65b9\u5f0f\u65e8\u5728\u51cf\u5c11\u7531\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\u670d\u52a1\u76f8\u5173\u7684 AllJoyn \u8def\u7531\u4ea7\u751f\u7684\u7f51\u7edc\u6d41\u91cf\u3002  The AllJoyn router limits the number of simultaneous connections\nwith thin applications in the AllJoyn network. This limit is\nconfigurable as ' max_remote_clients_tcp ' via the router\nconfig file. The AllJoyn router stops advertising all BusNode\nnames when the ' max_remote_clients_tcp ' limit is reached and resumes when the\ncurrent number of thin app connections drop down below the limit.\nAllJoyn \u8def\u7531\u9650\u5236\u4e86 AllJoyn \u7f51\u7edc\u4e2d\u540c\u65f6\u5b58\u5728\u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u8fde\u63a5\u6570\u91cf\u3002\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539\u8def\u7531\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 ' max_remote_clients_tcp ' \u503c\u5bf9\u9650\u5236\u503c\u8fdb\u884c\u8c03\u6574\u3002  The connection process between the AJTCL and the AllJoyn router\nis split into the following phases:\nAJTCL \u4e0e AllJoyn \u8def\u7531\u4e4b\u95f4\u7684\u8fde\u63a5\u8fc7\u7a0b\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u9636\u6bb5\uff1a   Discovery phase: The AJTCL discovers an AllJoyn router on\nthe AllJoyn proximal network via the BusNode name-based\ndiscovery mechanism. The overall discovery timeout is specified\nby the thin app in the  FindBusAndConnect()  API call.\nStarting from the 14.12 release, the AJTCL supports mDNS-based\ndiscovery along with legacy discovery for discovering AllJoyn\nrouters. Logic for this phase is captured below for pre-14.12 TCL\nand 14.12 TCL.\n  The AJTCL sends out a WHO-HAS message for the BusNode\n  well-known name following a backoff schedule. The IS-AT\n  message is sent over unicast to the AJTCL by the\n  AllJoyn router advertising that BusNode name.  \u53d1\u73b0\u9636\u6bb5\uff1aAJTCL \u901a\u8fc7 BusNode name-based discovery \u673a\u5236\u53d1\u73b0 AllJoyn \u4e34\u57df\u7f51\u7edc\u5185\u7684\u7684 AllJoyn \u8def\u7531\u3002\u53d1\u73b0\u7684\u8d85\u65f6\u65f6\u5e38\u901a\u8fc7\u8c03\u7528  FindBusAndConnect()  API \u8fdb\u884c\u8bbe\u5b9a\u3002\u81ea 14.12 \u7248\u672c\u5f00\u59cb\uff0cAJTCL \u52a0\u5165\u4e86 mDNS-based discovery \u65b9\u5f0f\u8fdb\u884c AllJoyn \u8def\u7531\u53d1\u73b0\u3002\u4e0b\u6587\u4f7f\u7528 pre-14.12 TCL \u548c 14.12 TCL \u8868\u8ff0\u8fd9\u4e24\u4e2a\u9636\u6bb5\u3002AJTCl \u4e3a BusNode well-known name \u53d1\u9001\u4e00\u4e2a WHO-HAS \u6d88\u606f\uff0c\u5176\u540e\u8ddf\u968f\u4e00\u4e2a\u9000\u907f\u5217\u8868\u3002IS-AT \u6d88\u606f\u7531\u5e7f\u544a BusNode Name \u7684 AllJoyn \u8def\u7531\u901a\u8fc7\u5355\u64ad\u65b9\u5f0f\u53d1\u9001\u5230 AJTCL\u3002  Connection phase: The AJTCL establishes a TCP connection\nwith the AllJoyn router based on the connection details\nreceived in the discovery response.  \u8fde\u63a5\u9636\u6bb5\uff1aAJTCL \u901a\u8fc7\u4ece discovery response \u4e2d\u83b7\u5f97\u7684\u8be6\u7ec6\u4fe1\u606f\u5efa\u7acb\u4e0e AllJoyn \u8def\u7531\u4e4b\u95f4\u7684 TCP \u8fde\u63a5\u3002  Authentication phase: SASL anonymous authentication is used\nby the AJTCL to authenticate and start using services of the\nAllJoyn router.  \u8eab\u4efd\u8ba4\u8bc1\u9636\u6bb5\uff1aAJTCL \u901a\u8fc7 SASL \u533f\u540d\u8eab\u4efd\u8ba4\u8bc1\u5f00\u59cb\u4f7f\u7528 AllJoyn \u8def\u7531\u7684\u670d\u52a1\u3002   As part of the connection establishment, the AJTCL also exchanges\nthe AllJoyn protocol version (AJPV) with the AllJoyn router.\nIf the AllJoyn router supports a lower AllJoyn protocol version\nthan the minimum AJPV the thin app requires, the connection\nprocess fails. This failure or an authentication failure will\nresult in the routing node being added to the blacklist, described\nin  Router blacklisting .\nFor the first-time connecting with any AllJoyn router, this\nconnection establishment process also generates a local GUID\nfor the AJTCL and sends it to the AllJoyn router.\n\u4f5c\u4e3a\u8fde\u63a5\u5f62\u6210\u7684\u4e00\u90e8\u5206\uff0cAJTCL \u540c\u6837\u4e0e AllJoyn \u8def\u7531\u4e4b\u95f4\u4ea4\u6362 AllJoyn \u534f\u8bae\u7248\u672c\uff08AJPV\uff09\u3002\u5982\u679c AllJoyn \u8def\u7531\u652f\u6301\u7684\u534f\u8bae\u7248\u672c\u6bd4\u5e94\u7528\u7a0b\u5e8f\u8981\u6c42\u7684\u6700\u4f4e\uff08AJPV\uff09\u7248\u672c\u8fd8\u4f4e\uff0c\u90a3\u4e48\u8fde\u63a5\u8fdb\u7a0b\u5c06\u5931\u8d25\u3002\u8fd9\u79cd\u5931\u8d25\u65b9\u5f0f\u6216\u8005\u5176\u5b83\u7c7b\u578b\u7684\u9a8c\u8bc1\u5931\u8d25\u5c06\u4f1a\u5bfc\u81f4\u8be5\u8282\u70b9\u88ab\u52a0\u5165\u9ed1\u540d\u5355\uff0c\u5728\uff3bRouter blacklisting] RN blacklisting  \u4e2d\u5177\u4f53\u8bf4\u660e\u3002  Pre-14.12 router discovery  The following figure shows the message flow for the pre-14.12\nrelease for the AJTCL discovering and connecting with the\nAllJoyn router.\n\u4e0b\u56fe\u5c55\u793a\u4e86 pre-14.12 \u7248\u672c AJTCL \u53d1\u73b0\u548c\u8fde\u63a5 AllJoyn \u8def\u7531\u7684\u4fe1\u606f\u6d41\u3002   \u56fe:  Pre-14.12 router discovery and connection  The AJTCL sends out a WHO-HAS message for the BusNode well-known\nname following the message schedule as described in WHO-HAS message schedule .\nThe response IS-AT message is sent over unicast to the AJTCL\nby the AllJoyn router advertising that BusNode name. Any\nresponses received from the AllJoyn routers on the blacklist\nare ignored.\n\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u00a5\u3002\u56de\u5e94\u7684 IS-AT \u6d88\u606f\u901a\u8fc7 AllJoyn \u8def\u7531\u5e7f\u64ad\u8be5 BusNode Name \u88ab\u5355\u64ad\u4f20\u64ad\u81f3 AJTCL\u3002\u6240\u6709\u4ece AllJoyn \u8def\u7531\u9ed1\u540d\u5355\u4e2d\u53d1\u51fa\u7684\u56de\u5e94\u4fe1\u606f\u90fd\u4f1a\u88ab\u5ffd\u7565\u3002  After router discovery, the rest of the AJTCL logic is same as\ndescribed above in  AJTCL-to-AllJoyn router connection .\n\u5728\u8def\u7531\u53d1\u73b0\u5b8c\u6210\u4e4b\u540e\uff0c\u5176\u4f59\u7684 AJTCL \u903b\u8f91\u4e0e\u4e0a\u8ff0  AJTCL-to-AllJoyn router connection  \u90e8\u5206\u5b8c\u5168\u4e00\u81f4\u3002  WHO-HAS message schedule WHO-HAS \u6d88\u606f\u6807\u51c6  Prior to the 14.12 release, the AJTCL supports the following\nretry schedule for sending WHO-HAS discovery messages:\n\u572814.12\u7248\u672c\u4e4b\u524d\uff0cAJTCL \u652f\u6301\u4ee5\u4e0b\u65b9\u5f0f\u91cd\u53d1 WHO-HAS \u53d1\u73b0\u6d88\u606f\u3002   Send the WHO-HAS message once a second for 10 seconds. \u6bcf 1 \u79d2\u53d1\u9001\u4e00\u6761 WHO-HAS \u6d88\u606f\uff0c\u6301\u7eed 10 \u79d2\u3002  Wait 10 seconds, then send another WHO-HAS message. \u7b49\u5f8510\u79d2\u540e\uff0c\u518d\u53d1\u9001\u4e00\u6761 WHO-HAS \u6d88\u606f\u3002  Wait 20 seconds, then send another WHO-HAS message. \u7b49\u5f8520\u79d2\u540e\uff0c\u518d\u53d1\u9001\u4e00\u6761 WHO-HAS \u6d88\u606f\u3002  Wait 40 seconds, then send another; repeat until the overall discovery\ntimeout expires. \u7b49\u5f8540\u79d2\u540e\uff0c\u518d\u53d1\u9001\u4e00\u6761 WHO-HAS \u6d88\u606f\u3002\u4e0d\u65ad\u91cd\u590d\u76f4\u5230\u53d1\u73b0\u670d\u52a1\u8d85\u65f6\u3002   14.12 router discovery  The following figure shows the message flow for the 14.12 release\nfor the AJTCL discovering and connecting with the AllJoyn router.\n\u4e0b\u56fe\u5c55\u793a\u4e86 14.12 \u7248\u672c AJTCL \u53d1\u73b0\u548c\u8fde\u63a5 AllJoyn \u8def\u7531\u7684\u4fe1\u606f\u6d41\u3002   \u56fe:  14.12 router discovery and connection 14.12 \u8def\u7531\u53d1\u73b0\u548c\u8fde\u63a5  The AJTCL supports both mDNS and legacy discovery mechanism. If the\nAJTCL minimum AJPV is lower than \"10\", the AJTCL can connect\nto routers prior to the 14.06 release. In this case, the TCL\ngenerates and sends out both WHO-HAS and mDNS query messages\nfor the BusName prefix. The schedule for sending these messages\nis described in  Discovery message schedule .\nAJTCL \u540c\u65f6\u652f\u6301 mDNS \u548c\u4ee5\u5f80\u7684\u53d1\u73b0\u673a\u5236\u3002\u5982\u679c AJTCL \u7684\u6700\u4f4e AJPV \u5c0f\u4e8e 10\uff0c\u90a3\u4e48\u8be5 AJTCL \u53ea\u80fd\u4e0e 14.06 \u6216\u66f4\u65e9\u7684\u7248\u672c\u7684\u8def\u7531\u5efa\u7acb\u8fde\u63a5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cTCL \u4f1a\u751f\u6210\u548c\u53d1\u9001 WHO-HAS \u4fe1\u53f7\uff0c\u540c\u65f6\u4e5f\u4f1a\u53d1\u9001 mDNS \u4fe1\u53f7\u67e5\u8be2 BusName \u524d\u7f00\u3002\u53d1\u9001\u6b64\u7c7b\u6d88\u606f\u7684\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605  Discovery message schedule \u3002  The discovery response (either an mDNS response or IS-AT message)\nis sent over unicast to the AJTCL by the AllJoyn router advertising\nthat BusNode name. The mDNS responses may include a key-value pair\nindicating the protocol version (the key is 'ajpv') of the\ntransmitting AllJoyn router (this was added in 14.12 release).\nThe value of ajpv is used to ignore the discovery response if\nthe version is less than the minimum required by the thin app.\nIf both IS-AT and mDNS responses are received by AJTCL at the\nsame time, the mDNS response is processed first. Responses received\nfrom the AllJoyn routers on the blacklist are ignored.\nDiscovery response\uff08\u65e0\u8bba mDNS response \u6216\u662f IS-AT message\uff09\u901a\u8fc7\u5e7f\u544a BusNode Name \u7684 AllJoyn \u8def\u7531\u901a\u8fc7\u5355\u64ad\u7684\u65b9\u5f0f\u4f20\u9001\u5230 AJTCL\u3002mDNS response \u53ef\u80fd\u4f1a\u5305\u542b\u4e00\u7ec4\u952e\uff0d\u503c\u5bf9\uff0c\u8bf4\u660e\u4e86\u53d1\u4fe1 AllJoyn \u8def\u7531\u7684\u534f\u8bae\u7248\u672c\uff08\u5728 14.12 \u7248\u672c\u4e2d\u88ab\u52a0\u5165\uff09\uff0c\u534f\u8bae\u7248\u672c\u7684\u952e\u4e3a 'ajpv'\u3002ajpv \u7684\u503c\u7528\u4e8e\u5224\u65ad\u7248\u672c\u662f\u5426\u4f4e\u4e8e\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u8981\u6c42\u7684\u6700\u4f4e\u7248\u672c\uff0c\u5982\u679c\u4f4e\u4e8e\u6700\u4f4e\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u4f1a\u5ffd\u7565 discovery response\u3002\u5982\u679c AJTCL \u540c\u65f6\u6536\u5230 IS-AT \u548c mDNS response\uff0c mDNS response \u5c06\u88ab\u4f18\u5148\u5904\u7406\u3002\u901a\u8fc7 AllJoyn \u8def\u7531\u6536\u5230\u7684\u5728\u9ed1\u540d\u5355\u4e0a\u7684 response \u5c06\u88ab\u5ffd\u7565\u3002  \u5728\u8def\u7531\u53d1\u73b0\u5b8c\u6210\u4e4b\u540e\uff0c\u5176\u4f59\u7684 AJTCL \u903b\u8f91\u4e0e\u4e0a\u8ff0  AJTCL-to-AllJoyn router connection  \u90e8\u5206\u5b8c\u5168\u4e00\u81f4\u3002  Discovery message schedule Discovery \u4fe1\u606f\u7b56\u7565  The AJTCL supports a retry schedule for sending discovery messages.\nIt will also selectively send WHO-HAS messages depending on the\nminimum protocol version the thin app requests; if the minimum\nversion is less than 10 it will send both an mDNS query and a\nWHO-HAS message. The retry schedule applies to both types of\ndiscovery messages and is as follows:\n\u5728\u53d1\u9001 discovery \u4fe1\u606f\u65f6\uff0cAJTCL \u63d0\u4f9b\u4e86\u91cd\u8bd5\u7b56\u7565\u3002\u540c\u65f6 AJTCL \u4e5f\u4f1a\u6839\u636e\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u8981\u6c42\u7684\u6700\u4f4e\u534f\u8bae\u7248\u672c\uff0c\u9009\u62e9\u6027\u5730\u53d1\u9001 WHO-HAS \u4fe1\u606f\uff1b\u5f53\u6700\u4f4e\u7248\u672c\u4f4e\u4e8e10\uff0c\u5c06\u4f1a\u540c\u65f6\u53d1\u9001 mDNS \u67e5\u8be2\u548c WHO-HAS \u4fe1\u606f\uff0c\u5e76\u4e14\u91cd\u8bd5\u7b56\u7565\u540c\u65f6\u652f\u6301\u8fd9\u4e24\u8005\u3002\u5177\u4f53\u7b56\u7565\u5982\u4e0b\uff1a   Send a burst of three discovery message(s) and pause 1.1 seconds. Repeat 10\ntimes. \u53d1\u9001\u4e00\u6bb5\u4e09\u8fde discovery \u4fe1\u606f\uff0c\u968f\u540e\u95f4\u9694 1.1 \u79d2\u3002\u91cd\u590d\u5341\u6b21\u3002   Wait 10.1 seconds, then send another burst of three messages. \u7b49\u5f8510.1\u79d2\uff0c\u518d\u53d1\u9001\u4e00\u6bb5\u4e09\u8fde\u4fe1\u606f\u3002  Wait 20.1 seconds, then send another burst of three messages. \u7b49\u5f8520.1\u79d2\uff0c\u518d\u53d1\u9001\u4e00\u6bb5\u4e09\u8fde\u4fe1\u606f\u3002  Wait 40.1 seconds, then send another burst of three messages. \u7b49\u5f8540.1\u79d2\uff0c\u518d\u53d1\u9001\u4e00\u6bb5\u4e09\u8fde\u4fe1\u606f\u3002\nRepeat until the overall discovery timeout expires. \u4e0d\u65ad\u91cd\u590d\u76f4\u5230\u53d1\u73b0\u670d\u52a1\u8d85\u65f6\u3002   The addition of the 100 msec on the wait intervals ensures that\nall possible 100ms slots are covered as quickly as possible. \nThis increases the likelihood of successful receipt of multicast\npackets over Wi-Fi.\n\u7b49\u5f85\u95f4\u9694\u65f6\u95f4\u591a\u4f59\u7684 100 \u6beb\u79d2\u4fdd\u8bc1\u4e86\u6240\u6709\u53ef\u80fd\u7684 100 \u6beb\u79d2\u95f4\u9699\u90fd\u88ab\u4ee5\u5c3d\u53ef\u80fd\u5feb\u7684\u901f\u5ea6\u8986\u76d6\u5230\u3002\u8fd9\u589e\u52a0\u4e86\u901a\u8fc7\u4e86 WI-FI \u63a5\u53d7\u591a\u64ad\u6570\u636e\u5305\u56de\u5e94\u7684\u6210\u529f\u7387\u3002  Router Selection \u8def\u7531\u9009\u62e9  Starting in the in the 15.04 release a feature called Router Selection was\nintroduced. This feature enables an AJTCL to select the most desirable AllJoyn\nrouter. The detailed  design description  is available for download\non the Core Working Group  Wikipage .\n\u81ea 15.04 \u7248\u672c\u4ee5\u6765\uff0cAllJoyn \u5f15\u5165\u4e86\u8def\u7531\u9009\u62e9\u529f\u80fd\u3002\u5b83\u4e3a AJTCL \u63d0\u4f9b\u4e86\u9009\u62e9\u6700\u7406\u60f3 AllJoyn \u8def\u7531\u7684\u529f\u80fd\u3002 \u8be6\u7ec6\u63cf\u8ff0  \uff0c\u8bf7\u8bbf\u95ee\u6838\u5fc3\u5de5\u4f5c\u7ec4  Wikipage  \u7684\u9875\u9762\u8fdb\u884c\u4e0b\u8f7d\u3002  The following figure shows the message flow for a 15.04 AJTCL discovering and\nconnecting with a 15.04 AllJoyn router using router selection.\n\u4e0b\u56fe\u5c55\u793a\u4e86 AJTCL \u5229\u7528\u8def\u7531\u9009\u62e9\uff0c\u53d1\u73b0\u5e76\u8fde\u63a5 15.04 \u7248\u672c AllJoyn \u8def\u7531\u7684\u4fe1\u606f\u6d41\u3002   \u56fe:  Router discovery using Router Selection \u4f7f\u7528\u8def\u7531\u9009\u62e9\u7684\u8def\u7531\u53d1\u73b0  At a high level the feature is implemented in two parts: \u5728\u9ad8\u89c4\u683c\u5e94\u7528\u65f6\uff0c\u8be5\u529f\u80fd\u5c06\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a   The router uses a number of both static and dynamic parameters, including\npower source, mobility, as well as connection availability and capacity, to\ncalculate a  rank , which is communicated via the Priority field of the mDNS\nresponse packet described above in  14.12 router discovery .\nDetails of the algorithm to calculate the rank, and how that is converted into\nthe a DNS Priority value are in the  design description .   \u8def\u7531\u4f7f\u7528\u5305\u62ec\u7535\u6e90\u3001\u901f\u7387\u3001\u8fde\u63a5\u53ef\u7528\u6027\u548c\u8fde\u63a5\u5bb9\u91cf\u7b49\u4e00\u7cfb\u5217\u7684\u9759\u6001\u548c\u52a8\u6001\u53c2\u6570\u8fdb\u884c  rank  \u7684\u8ba1\u7b97\u3002 rank  \u901a\u8fc7\u4e0a\u8ff0 mDNS \u8fd4\u56de\u5305  14.12 \u8def\u7531\u53d1\u73b0  \u4e2d\u7684 Priority \u5b57\u6bb5\u4f53\u73b0\u3002    AJTCL will wait a minimum of 5 seconds collecting discovery responses. For\neach response received the processing  related to the 'ajpv' key-value pair and\nblacklisting takes place. Once the wait time is complete AJTCL will connect to\nthe router with the highest rank it has received to that point.  If there is a\ntie, or none of the discovery responses it receives contain a rank, it will\nrandomly select among the equivalent routers and connect. After router\ndiscovery, the rest of the AJTCL logic is same as described above in AJTCL-to-AllJoyn router connection .   AJTCL \u81f3\u5c11\u82b1\u8d39 5 \u79d2\u7684\u65f6\u95f4\u63a5\u53d7 discovery \u56de\u5e94\u3002\u6bcf\u4e00\u4e2a\u63a5\u53d7\u7684\u56de\u5e94\u7684\u8fc7\u7a0b\uff0c\u90fd\u4e0e\u4e0a\u8ff0 \u2018ajpv\u2019 \u952e\uff0d\u503c\u5bf9\u76f8\u5173\uff0c\u540c\u65f6\u9ed1\u540d\u5355\u4e5f\u5bf9\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u6548\u3002\u5f53\u7b49\u5f85\u65f6\u95f4\u7ed3\u675f\uff0cAJTCL \u5c06\u9009\u62e9\u671f\u95f4\u63a5\u6536\u7684\u8def\u7531 rank \u6700\u9ad8\u7684\u4e00\u4e2a\u8fdb\u884c\u8fde\u63a5\u3002\u5982\u679c rank \u503c\u76f8\u540c\uff0c\u6216\u8005 discovery \u56de\u5e94\u4e2d\u4e0d\u5305\u542b rank\uff0c AJTCL \u5c06\u5728\u8def\u7531\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5e76\u8fde\u63a5\u3002   Router blacklisting \u8def\u7531\u9ed1\u540d\u5355  Starting in the in the 15.04 release a feature called router blacklisting was\nadded. This feature enables an AJTCL to track routers that are incompatible and\navoid attempting to connect to them again. In order to track incompatible\nrouters (as determined during connection establishment), a blacklist has been\nimplemented. The blacklist ensures discovery responses for routers on the\nblacklist are ignored.\n\u81ea 15.04 \u7248\u672c\u4ee5\u6765\uff0cAllJoyn \u5f15\u5165\u4e86\u8def\u7531\u9ed1\u540d\u5355\u529f\u80fd\u3002\u6b64\u529f\u80fd\u4f7f\u5f97 AJTCL \u80fd\u591f\u8ffd\u8e2a\u4e0d\u517c\u5bb9\u7684\u8def\u7531\uff0c\u5e76\u907f\u514d\u518d\u6b21\u8fde\u63a5\u5b83\u4eec\u3002\u4e3a\u4e86\u8ffd\u8e2a\u4e0d\u517c\u5bb9\u8def\u7531\uff08\u6839\u636e\u5efa\u7acb\u60c5\u51b5\u51b3\u5b9a\uff09\uff0c\u5efa\u7acb\u4e86\u9ed1\u540d\u5355\u3002\u9ed1\u540d\u5355\u786e\u4fdd\u5728\u540d\u5355\u5185\u7684 discovery \u56de\u5e94\u88ab\u5ffd\u7565\u3002  The explicit criteria for adding a router to the blacklist\nis a connection failure either because authentication does\nnot complete successfully, or because the protocol version\nof the router does not meet the minimum required by the thin app.\nThe default size of the blacklist is 16 entries; the addition of\na 17th router will over-write the first in the list (i.e.,\nthe list is actually a circular buffer). The blacklist only\npersists until the thin app is restarted.\n\u5c06\u8def\u7531\u52a0\u5165\u9ed1\u540d\u5355\u7684\u660e\u786e\u6807\u51c6\u6709\u4e24\u70b9\u3002\u4e00\u662f\u8eab\u4efd\u8ba4\u8bc1\u5931\u8d25\u5bfc\u81f4\u7684\u4e0d\u6210\u529f\u8fde\u63a5\uff1b\u4e8c\u662f\u534f\u8bae\u7248\u672c\u4f4e\u4e8e\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u8981\u6c42\u7684\u6700\u4f4e\u6807\u51c6\u3002\u9ed1\u540d\u5355\u7684\u9ed8\u8ba4\u5bb9\u91cf\u662f 16\uff1b\u7b2c 17 \u4e2a\u8def\u7531\u5c06\u8986\u76d6\u7b2c 1 \u4e2a(\u5373\u9ed1\u540d\u5355\u5217\u8868\u662f\u4e00\u4e2a\u5faa\u73af\u7f13\u51b2\u533a)\u3002\u9ed1\u540d\u5355\u4f1a\u5728\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u91cd\u542f\u65f6\u91cd\u7f6e\u3002  AJTCL and AllJoyn router compatibility AJTCL \u548c AllJoyn \u8def\u7531\u517c\u5bb9\u6027  The following table captures the compatibility matrix between\nthe AJTCL and AllJoyn router across the AllJoyn 14.02 and 14.06\nreleases. The AJTCL using the 14.06 release is only compatible\nwith a 14.02 AllJoyn router if the router does not require AJTCL\nauthentication. The AJTCL default minimum protocol version\nin the 14.12 AJTCL is set to 11 (the version of the 14.12\nAllJoyn router), but can be changed by the thin application\nif it does not need to use the NGNS feature.\n\u4e0b\u8868\u5c55\u793a\u4e86 14.02 \u548c 14.06 \u7248\u672c\u4e2d AJTCL \u548c AllJoyn \u8def\u7531\u4e4b\u95f4\u7684\u517c\u5bb9\u6027  AJTCL and AllJoyn router compatibility     AJTCL / Router  14.02 (AJTCL auth enabled)  14.06 (AJTCL auth disabled)  14.06      14.02  Compatible  Compatible  Compatible    14.06 (thin app not using NGNS)  Incompatible  Compatible  Compatible    14.06 (thin app using NGNS)  Incompatible  Incompatible  Compatible     Detecting a router link failure \u53d1\u73b0\u8def\u7531\u94fe\u63a5\u5931\u8d25  The AJTCL provides a mechanism for the thin application to\nimplement a probing mechanism to detect connectivity failures\nwith the AllJoyn router. This can be achieved by invoking the SetBusLinkTimeout()  API provided by the AJTCL. The thin app\nspecifies a timeout value (with minimum timeout of 40 seconds)\nas part of this API. If no link activity is detected during\nthis time period, the AJTCL sends probe packets every 5 seconds\nover the router link. If no acknowledgment is received for three\nconsecutive probe packets, an error is returned to the thin application.\nAJTCL \u4e3a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u79cd\u68c0\u6d4b\u4e0e AllJoyn \u8def\u7531\u4e4b\u95f4\u5931\u8d25\u8fde\u63a5\u7684\u673a\u5236\u3002\u901a\u8fc7\u8c03\u7528 AJTCL \u63d0\u4f9b\u7684  SetBusLinkTimeout()  API \u5b9e\u73b0\u3002\u5728 API \u4e2d\uff0c\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u8d85\u65f6\u503c\uff08\u81f3\u5c11 40 \u79d2\uff09\u3002\u5982\u679c\u5728\u8fd9\u671f\u95f4\u6ca1\u6709\u53d1\u73b0\u6d3b\u52a8\u8fde\u63a5\uff0cAJTCL \u5c06\u5728\u8def\u7531\u94fe\u63a5\u4e2d\u6bcf\u9694 5 \u79d2\u53d1\u9001\u4e00\u4e2a\u63a2\u6d4b\u5305\uff0c\u5e76\u628a\u9519\u8bef\u8fd4\u56de\u7ed9\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u3002  At this point, the thin app should re-initiate discovery for the AllJoyn router.\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u518d\u6b21\u542f\u52a8\u5bfb\u627e ALlJoyn \u8def\u7531\u7684 discovery\u3002",
            "title": "AJTCL-to-AllJoyn router connection AJTCL \u4e0e AllJoyn \u8def\u7531\u7684\u8fde\u63a5"
        },
        {
            "location": "/learn/core/system-description/thin-apps/#thin-app-functionality",
            "text": "As mentioned previously, the AJTCL supports all of the key\nAllJoyn core functionality as a standard core library. APIs\nare provided as part of the AJTCL for the thin app to invoke\ncore functionality. The AJTCL in turn generates appropriate\nAllJoyn format messages (for method_call/reply, signals etc.)\nto invoke related APIs on the AllJoyn router. The AJTCL sends\nthe generated AllJoyn messages to the AllJoyn router to accomplish\nthe given functionality. The thin app message flow for core\nfunctionality is similar to the standard app with the key difference\nthat the thin app is connected remotely with the AllJoyn router.\n\u5982\u4e0a\u6587\u6240\u8ff0\uff0cAJTCL \u652f\u6301\u6807\u51c6\u5185\u6838\u7684\u4e3b\u8981\u529f\u80fd\u3002AJTCL \u63d0\u4f9b\u4e86\u4e00\u4e9b API\uff0c\u4f7f\u5f97\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u8c03\u7528\u6838\u5fc3\u529f\u80fd\u3002AJTCL \u8f6e\u6d41\u751f\u6210\u5408\u9002\u7684 AllJoyn \u683c\u5f0f\u4fe1\u606f\uff08\u4e3a\u65b9\u6cd5\u8c03\u7528\uff0f\u56de\u5e94\uff0c\u4fe1\u53f7\u7b49\uff09\u8c03\u7528 AllJoyn \u8def\u7531\u4e0a\u7684\u76f8\u5173 API\u3002AJTCL \u5411 AllJoyn \u8def\u7531\u53d1\u9001\u751f\u6210\u7684 AllJoyn \u4fe1\u606f\u4ee5\u5b8c\u6210\u6307\u5b9a\u529f\u80fd\u3002  The following figure shows an example message flow for a thin\napp discovering a well-known name prefix.\n\u4e0b\u56fe\u5c55\u793a\u4e86\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0 well-known name \u524d\u7f00\u7684\u4fe1\u606f\u6d41\u3002  \u6ce8\u610f:  The AJTCL and AllJoyn router exchange data using AllJoyn\nmessages (method_call/reply and signals). AJTCL \u4e0e AllJoyn \u8def\u7531\u4e4b\u95f4\u901a\u8fc7 AllJoyn \u4fe1\u606f\uff08\u65b9\u6cd5\u8c03\u7528\uff0f\u56de\u5e94\u548c\u4fe1\u53f7\uff09\u4ea4\u6362\u6570\u636e\u3002   \u56fe:  Thin app discovering a well-known-name prefix \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0 well-known-name \u524d\u7f00  The AJTCL provides support for following core AJ functionality: AJTCL \u4e3a\u4ee5\u4e0b\u6838\u5fc3 AJ \u529f\u80fd\u63d0\u4f9b\u652f\u6301\uff1a   Service Discovery and Advertisement:  Both legacy Name Service\nand Next-Gen Name Service functions are supported. \u670d\u52a1\u7684\u53d1\u73b0\u548c\u5e7f\u544a\uff1a\u652f\u6301\u8001\u7248\u672c\u548c\u65b0\u7248\u672c\u7684 Name Service\u3002  About advertisement About \u5e7f\u544a  Session establishment \u4f1a\u8bdd\u5efa\u7acb  Sessionless signals   App layer authentication \u5e94\u7528\u5c42\u8ba4\u8bc1  The AJTCL provides app layer authentication so that thin app\ncan implement secure interfaces and also access secure\ninterfaces on other AllJoyn providers.AJTCl \u63d0\u4f9b\u5e94\u7528\u5c42\u8ba4\u8bc1\u3002\u4f7f\u5f97\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u5b9e\u73b0\u5b89\u5168\u63a5\u53e3\uff0c\u5e76\u8bbf\u95ee\u5176\u5b83 AllJoyn \u63d0\u4f9b\u8005\u7684\u5b89\u5168\u63a5\u53e3\u3002  New authentication schemes are supported in the 14.06 release\n(see  App layer authentication ). 14.06 \u7248\u672c(\u67e5\u9605  App layer authentication )\u4e2d\u652f\u6301\u65b0\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848   Thin apps can also include existing AllJoyn service framework\nfunctionality by bundling thin app-specific libraries provided\nfor these service frameworks.\n\u901a\u8fc7\u7ed1\u5b9a\u5e94\u7528\u7a0b\u5e8f\u6307\u5b9a\u7684\u8d44\u6e90\u5e93\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e5f\u80fd\u591f\u5305\u542b\u5df2\u6709 AllJoyn \u670d\u52a1\u67b6\u6784\u7684\u529f\u80fd\u3002",
            "title": "Thin app functionality \u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u529f\u80fd"
        },
        {
            "location": "/learn/core/system-description/thin-apps/#app-layer-authentication",
            "text": "The AJTCL provides support for app layer authentication for\nthe thin app to implement and access secure AllJoyn services.\nApp layer authentication schemes supported are different in\nrelease prior to the 14.06 release and starting from the 14.06\nrelease as described below.\nAJTCL \u4e3a\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u5e94\u7528\u5c42\u8ba4\u8bc1\uff0c\u4f7f\u5176\u53ef\u4ee5\u90e8\u7f72\u548c\u8bbf\u95ee\u5b89\u5168 AllJoyn \u670d\u52a1\u300214.06\u7248\u672c\u4e4b\u524d\u7684\u5e94\u7528\u5c42\u8ba4\u8bc1\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4e0b\u6587\u91cd\u70b9\u4ecb\u7ecd 14.06 \u7248\u672c\u548c\u4ee5\u540e\u7248\u672c\u7684\u8ba4\u8bc1\u65b9\u5f0f\u3002  Prior to the 14.06 release, the AJTCL supports ALLJOYN _PIN_KEYX\nauth mechanism for app layer authentication. Also, SASL protocol\nis used for authentication.\n\u5728 14.06 \u7248\u672c\u4e4b\u524d\uff0cAJTCL \u652f\u6301\u5e94\u7528\u5c42\u8ba4\u8bc1\u7684 ALLJOYN _PIN_KEYX \u9a8c\u8bc1\u673a\u5236\u3002\u540c\u65f6\uff0c\u4e5f\u652f\u6301 SASL \u534f\u8bae\u8ba4\u8bc1\u3002  Starting from the 14.06 release, ALLJOYN _PIN_KEYX auth mechanism\nis removed from AJTCL. New Elliptic Curve Diffie-Hellman Ephemeral\n(ECDHE)-based auth mechanism were added to the AJTCL:\n\u81ea 14.06 \u7248\u672c\u8d77\uff0cAJTCL \u79fb\u9664\u4e86 ALLJOYN _PIN_KEYX \u9a8c\u8bc1\u673a\u5236\u3002\u52a0\u5165\u4e86 New Elliptic Curve Diffie-Hellman Ephemeral\n(ECDHE)-based \u9a8c\u8bc1\u673a\u5236\u3002   ECDHE_NULL is an anonymous key agreement. There is no PIN or pass-phrase\nrequired.ECDHE_NULL \u662f\u533f\u540d\u7684\u5bc6\u94a5\u534f\u5546\u534f\u8bae\u3002\u4e0d\u9700\u8981 PIN \u6216\u8005\u5bc6\u7801\u77ed\u8bed\u3002  ECDHE_PSK is a key agreement authenticated with a pre-shared\nkey like a PIN, pass-phrase, or symmetric key. ECDHE_PSK \u662f\u901a\u8fc7\u9884\u5171\u4eab\u5bc6\u94a5\uff0c\u5982 PIN\u3001\u5bc6\u7801\u77ed\u8bed\u6216\u5bf9\u79f0\u5bc6\u94a5\u9a8c\u8bc1\u7684\u533f\u540d\u7684\u5bc6\u94a5\u534f\u5546\u534f\u8bae\u3002  ECDHE_ECDSA is a key agreement authenticated with an asymmetric\nkey validated with an ECDSA signature. ECDHE_ECDSA \u662f\u901a\u8fc7 ECDSA \u7b7e\u540d\u751f\u6210\u7684\u975e\u5bf9\u79f0\u5bc6\u94a5\u8fdb\u884c\u8ba4\u8bc1\u7684\u7684\u5bc6\u94a5\u534f\u5546\u534f\u8bae\u3002   The use of SASL protocol for authentication is removed from the\nAJTCL in the 14.06 release. Instead, an AllJoyn-based protocol\nis used for app layer authentication.\n14.06 \u7248\u672c\u79fb\u9664\u4e86 SASL \u534f\u8bae\u7684\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u52a0\u5165\u4e86\u4e00\u79cd\u57fa\u4e8e AllJoyn \u7684\u534f\u8bae\u8fdb\u884c\u5e94\u7528\u5c42\u8ba4\u8bc1\u3002  Auth compatibility \u8ba4\u8bc1\u517c\u5bb9\u6027  A 14.06 thin app cannot interact with a 14.02 thin app over secure\ninterfaces and vice versa because these apps support different types\nof auth mechanisms. These apps can still talk to each other over non-secure\ninterfaces.\n14.06 \u7248\u672c\u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u4e0e 14.02 \u7248\u672c\u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5b89\u5168\u63a5\u53e3\u8fdb\u884c\u4e92\u52a8\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u56e0\u4e3a\u5b83\u4eec\u5206\u522b\u91c7\u7528\u4e86\u4e0d\u540c\u7684\u8ba4\u8bc1\u65b9\u5f0f\u3002\u4f46\u5b83\u4eec\u53ef\u4ee5\u901a\u8fc7\u975e\u5b89\u5168\u63a5\u53e3\u8fdb\u884c\u4e92\u52a8\u3002  The following table shows the thin app compatibility matrix across the 14.02 and\n14.06 releases.\n\u4e0b\u8868\u5c55\u793a\u4e86 14.02 \u548c 14.06 \u7248\u672c\u7684\u7cbe\u7b80\u5e94\u7528\u7a0b\u5e8f\u517c\u5bb9\u6027     14.02 provider thin app  14.06 consumer thin app      With secure interfaces  Incompatible    With non-secure interfaces  Compatible        14.06 provider thin app  14.02 consumer thin app      With secure interfaces  Incompatible    With non-secure interfaces  Compatible",
            "title": "App layer authentication \u5e94\u7528\u5c42\u8ba4\u8bc1"
        },
        {
            "location": "/project-lifecycle/",
            "text": "Project and Working Group Lifecycle\n\n\nIntroduction\n\n\nThe lifecycle defined here allows for:\n\n\n\n\nSimple Project incubation\n\n\nClear guidance for Projects to graduate to a healthy Mature \n     state\n\n\nA clear process for assigning Projects to new or existing\n     Working Groups\n\n\nA straightforward lifecycle that ensures inactive Projects \n     can be retired when necessary.\n\n\n\n\nThe release cycle proposed for mature Working Groups\n\n\n\n\nIs simple and lightweight\n\n\nProvides sufficient visibility to allow Working Groups \n     to coordinate with one another and avoid unnecessary \n     duplication of effort.\n\n\n\n\nThe simultaneous release process proposed lays out a simple\nprocess for Working Groups to formally coordinate toward a \nsingle unified, integrated, mutually interoperating release.\n\n\nDefinitions\n\n\nService\n\n\nA Service is a body of code that extends the capabilities \nof the Core. Examples of Services include support for \ndevice-specific features (such as the power setting on a \nmicrowave or the input source on a TV), or bridges that \nprovide backwards and lateral compatibility support for \nprotocols like DLNA.\n\n\nProject\n\n\nA Project is the organizational unit that produces one or \nmore Services that perform a specific function within the \ncontext of the AllSeen Alliance. Its use cases should be narrowly \nscoped, and it should do those things well. Projects operate \nwithin the open source model as defined by the Alliance, and \nare overseen by one or more Committers. Each Project must \nbelong to only one Working Group.\n\n\nWorking Group\n\n\nA Working Group is logical grouping of one or more Projects. \nThe Working Group is a meritocratic organization that follows \nopen source best practices to produce code within the scope of \nthe policy as set by the Technical Steering Committee and the \nBoard. Project Committers make decisions within the Working \nGroup, and elect the Working Group Chair as a leader and to \nrepresent the Working Group on the Technical Steering Committee.\n\n\nOverview\n\n\nProjects are the most fundamental units of organization within \nthe AllSeen Alliance. They are code-driven, meritocratic open source\nprojects that produce features and functionality within the \nscope of the policy as set by the Technical Steering Committee\nand the board.\n\n\nEach Project should be as narrowly scoped as is reasonable, to \nallow contributors to focus upon doing a few things very well.\nThere should be at least one Committer per Project, to ensure \nthat the person or persons responsible for applying code into \nthe mainline repository is familiar with the codebase.\n\n\nWorking Groups are logical groupings of Projects that have \nachieved Mature status. In the simplest situation, a newly \ncreated Project would be its own Working Group. In the case \nthat multiple related Projects are created, they may be grouped \ninto the same Working Group. If a Working Group no longer \ncontains any Mature Projects, it will be removed.\n\n\nEach Working Group is comprised of the Contributors and Committers \nof its Projects. The Committers in the Working Group will, from \ntime to time, elect a single leader called the Working Group \nChair. The Working Group Chair is responsible for overseeing \nthe activities of the Working Group, and represents the Working \nGroup and its Projects on the Technical Steering Committee.\n\n\nProject Types and Lifecycle\n\n\nProject States\n\n\nThe valid states of Projects are:\n\n\n\n\n\n\n\n\nProject Stages\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nProposal\n\n\nDoesn't really exist yet, has no real\n\n\n\n\n\n\n\n\nresources, but is expected to be created\n\n\n\n\n\n\n\n\ndue to a specific need.\n\n\n\n\n\n\nIncubation\n\n\nProject has resources, but is recognized\n\n\n\n\n\n\n\n\nto be in the early stages and is not yet\n\n\n\n\n\n\n\n\ncontributing product-ready code.\n\n\n\n\n\n\nMature\n\n\nProject is a fully functioning, successful\n\n\n\n\n\n\n\n\nopen source project that has been assigned\n\n\n\n\n\n\n\n\nto a Working Group\n\n\n\n\n\n\nArchived\n\n\nProject has been recognized as dead, and\n\n\n\n\n\n\n\n\nhas been archived as it's no longer a going\n\n\n\n\n\n\n\n\nconcern.\n\n\n\n\n\n\n\n\nProject State Transitions\n\n\nThe valid transitions (and their associated reviews) are:\n\n\n\n\n\n\n\n\nFrom State\n\n\nTo State\n\n\nReview\n\n\n\n\n\n\n\n\n\n\nnull\n\n\nProposal\n\n\n\n\n\n\n\n\nProposal\n\n\nIncubation\n\n\nCreation Review\n\n\n\n\n\n\nIncubation\n\n\nMature\n\n\nGraduation Review\n\n\n\n\n\n\n{Proposal, Incubation, Mature}\n\n\nArchived\n\n\nTermination Review\n\n\n\n\n\n\n\n\nReview processes\n\n\nFor each review, there will be a publicly visible wiki/web \ntemplate filled out containing the relevant review information, \nas outlined in the sections below.\n\n\nThe review document must be posted and announced for public \nomment for at least 2 weeks prior to the date the review is\nscheduled, to give participants sufficient time to decide.\n\n\nReviews ideally should be conducted in a manner that is sensitive \nto the global nature of the community (i.e., the geography and \ntime zone dispersion).\n\n\nReviews may in some circumstances be combined (for example a \ncreation and graduation review for a Project seeking to come \ninto the Alliance that is already mature in its previous venue).\nIf reviews are combined, the review document need only be posted \nfor a single 2 week review period.\n\n\nCreation review process and criteria\n\n\n\n\nProposal posted for 2 weeks of review. \n     \nProposal template\n \n     a. Name (trademark) is OK\n     b. Description is complete \n     c. Scope is well defined\n     d. Resources are committed (developers committed to working)\n     e. Committers are identified\n     f. Meets board policy (including IPR)\n     g. Proposed initial Working Group\n     h. Proposal emailed to TSC mailing list allowing for \n        2 weeks of review: allseen-tsc@lists.allseenalliance.org\n\n\nReview by TSC and approval\n\n\n\n\nGraduation review process and criteria\n\n\n\n\nGraduation Proposal posted for 2 weeks:\n     a. Can demonstrate a working code base ready for \n        commercial products\n     b. Has an active community\n     c. Demonstrates a history of Releases (using the Mature \n        Release Process)\n     d. Justifies desired Working Group (new or existing)\n     e. Accepts any conditions of joining proposed Working Group\n\n\nCommitters of the Project vote on seeking graduation\n\n\n\n\nAccepted by vote of Working Group, if it already exists.\n     Otherwise, accepted by vote of TSC to create a new Working \n     Group using the \nCreation Review process and criteria\n\n\n\n\n\n\nReview by TSC and Approval\n\n\n\n\n\n\nTermination Review process and criteria\n\n\n\n\nTermination Proposal Posted for 2 weeks:\n     a. States reason for Project termination being sought\n     b. Estimates impact on other Projects, users, and \n        communities, and how those will be mitigated\n     c. Indicates where the Project would be archived\n\n\nCan be initiated by vote of committers within the Project\n\n\nCan be initiated by TSC or Working Group if there are \n     either no remaining committers for the Project or there \n     have been no commits to the SCM in 18 months\n\n\n\n\nTransitioning between Working Groups\n\n\nFrom time to time Projects may have reason to change Working Group membership.  Examples include:\n\n\n\n\nScope of a Working Group has evolved over time and certain\n    Projects no longer have obvious synergies with the rest\n\n\nScopes of two Working Groups have evolved over time and are\n    similar enough to merit consolidation\n\n\n\n\nProcess for changing Working Group membership\n\n\n\n\nWorking Group Change Proposal posted for 2 weeks\n     a. Desired Working Group\n     b. Reason for leaving existing Working Group\n     c. Reason for joining new Working Group\n\n\nReview and approval by Committers in new Working Group\n\n\nReview by TSC and approval\n\n\n\n\nOnce a Project has been approved to move, they can participate \nimmediately in Working Group activities.\n\n\nWorking Groups\n\n\nEach Project must be a member of a single Working Group.\n\nThe creation of Working Groups and placement of Projects within \nthem should be carefully considered to reduce the risk of\nfragmentation.  New Working Groups should be created only when \nit is clear that a Project does not logically fit within the scope \nof an existing Working Group.\n\n\nWorking Group States\n\n\n\n\n\n\n\n\nWorking Groups\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nProposed\n\n\nA Project has been accepted into the Mature\n\n\n\n\n\n\n\n\nstate, does not fit within the scope of any\n\n\n\n\n\n\n\n\nother Working Group, and requires a new\n\n\n\n\n\n\n\n\nWorking Group to be created.\n\n\n\n\n\n\nActive\n\n\nWorking Group contains one or more Projects\n\n\n\n\n\n\n\n\nin the Mature state, and a Working Group Chair\n\n\n\n\n\n\n\n\nis actively participating in the Technical\n\n\n\n\n\n\n\n\nSteering Committee.\n\n\n\n\n\n\nArchived\n\n\nWorking Group has no remaining Projects in\n\n\n\n\n\n\n\n\nthe Mature state, and has been pruned from the\n\n\n\n\n\n\n\n\nproject.\n\n\n\n\n\n\n\n\nWorking Group State Transitions\n\n\nThe valid transitions (and their associated reviews) are:\n\n\n\n\n\n\n\n\nFrom State\n\n\nTo State\n\n\nReview\n\n\n\n\n\n\n\n\n\n\nnull\n\n\nActive\n\n\nCreation Review\n\n\n\n\n\n\nActive\n\n\nArchived\n\n\nTermination Review\n\n\n\n\n\n\n\n\nReview Processes\n\n\nFor each review, there will be a publicly visible wiki/web \ntemplate filled out containing the relevant review information, \nas outlined in the sections below.\n\n\nThe review document must be posted and announced for public \ncomment for at least 2 weeks prior to the date the review \nis scheduled, to give participants sufficient time to decide.\n\n\nReviews ideally should be conducted in a manner that is sensitive \nto the global nature of the community (i.e., the geography and \ntime zone dispersion).\n\n\nCreation Review process and criteria\n\n\n\n\nProject makes request for a new Working Group during \n     \nGraduation Review\n\n     a. Justifies need for a new Working Group instead of \n        joining an existing one\n     b. Nominates the Working Group Chair\n\n\nReview by TSC and approval\n\n\n\n\nTermination\n\n\nWorking Group termination is initiated automatically and \nimmediately when the last Mature Project has been removed.\nSituations in which this may occur include:\n\n\n\n\nNo Projects remain in the Mature state\n\n\nProjects have been consolidated and transferred \n    to another Working Group\n\n\n\n\nWorking Groups with at least one Mature Project cannot be terminated. \n\n\nBootstrap Process\n\n\nAt the time of the formation of the Alliance, there are expected\nto be several initial Projects contributed. These initial \nProjects will come in at various levels of maturity. In order \nto sort these Projects into the most appropriate Lifecycle state \nand Working Groups in a way that is clear, consistent, and fair:\n\n\n\n\nPrior to a date to be decided by the TSC in its first \n     meeting not less than 1 month and not more than 6 months \n     after the Alliance launches, a Project may decide to either\n     a. Seek entry in \u2018bootstrap\u2019 state (explained more below)\n     b. Seek entry via the steady state Project Lifecycle (ie,\n        propose for Incubation)\n\n\nIf a Project enters is in \u2018bootstrap\u2019 state, at the first\n     meeting of the official (post-formation) TSC after it \n     petitions to exit bootstrap state, the TSC will decide \n     the proper Project Lifecycle state and Working Group for \n     the Project based on criteria rooted in the steady state \n     Project Lifecycle.\n\n\nOnce in a non-bootstrap state, a Project follows the \n    steady state Project Lifecycle.",
            "title": "Home"
        },
        {
            "location": "/project-lifecycle/#project-and-working-group-lifecycle",
            "text": "",
            "title": "Project and Working Group Lifecycle"
        },
        {
            "location": "/project-lifecycle/#introduction",
            "text": "The lifecycle defined here allows for:   Simple Project incubation  Clear guidance for Projects to graduate to a healthy Mature \n     state  A clear process for assigning Projects to new or existing\n     Working Groups  A straightforward lifecycle that ensures inactive Projects \n     can be retired when necessary.   The release cycle proposed for mature Working Groups   Is simple and lightweight  Provides sufficient visibility to allow Working Groups \n     to coordinate with one another and avoid unnecessary \n     duplication of effort.   The simultaneous release process proposed lays out a simple\nprocess for Working Groups to formally coordinate toward a \nsingle unified, integrated, mutually interoperating release.",
            "title": "Introduction"
        },
        {
            "location": "/project-lifecycle/#definitions",
            "text": "Service  A Service is a body of code that extends the capabilities \nof the Core. Examples of Services include support for \ndevice-specific features (such as the power setting on a \nmicrowave or the input source on a TV), or bridges that \nprovide backwards and lateral compatibility support for \nprotocols like DLNA.  Project  A Project is the organizational unit that produces one or \nmore Services that perform a specific function within the \ncontext of the AllSeen Alliance. Its use cases should be narrowly \nscoped, and it should do those things well. Projects operate \nwithin the open source model as defined by the Alliance, and \nare overseen by one or more Committers. Each Project must \nbelong to only one Working Group.  Working Group  A Working Group is logical grouping of one or more Projects. \nThe Working Group is a meritocratic organization that follows \nopen source best practices to produce code within the scope of \nthe policy as set by the Technical Steering Committee and the \nBoard. Project Committers make decisions within the Working \nGroup, and elect the Working Group Chair as a leader and to \nrepresent the Working Group on the Technical Steering Committee.",
            "title": "Definitions"
        },
        {
            "location": "/project-lifecycle/#overview",
            "text": "Projects are the most fundamental units of organization within \nthe AllSeen Alliance. They are code-driven, meritocratic open source\nprojects that produce features and functionality within the \nscope of the policy as set by the Technical Steering Committee\nand the board.  Each Project should be as narrowly scoped as is reasonable, to \nallow contributors to focus upon doing a few things very well.\nThere should be at least one Committer per Project, to ensure \nthat the person or persons responsible for applying code into \nthe mainline repository is familiar with the codebase.  Working Groups are logical groupings of Projects that have \nachieved Mature status. In the simplest situation, a newly \ncreated Project would be its own Working Group. In the case \nthat multiple related Projects are created, they may be grouped \ninto the same Working Group. If a Working Group no longer \ncontains any Mature Projects, it will be removed.  Each Working Group is comprised of the Contributors and Committers \nof its Projects. The Committers in the Working Group will, from \ntime to time, elect a single leader called the Working Group \nChair. The Working Group Chair is responsible for overseeing \nthe activities of the Working Group, and represents the Working \nGroup and its Projects on the Technical Steering Committee.",
            "title": "Overview"
        },
        {
            "location": "/project-lifecycle/#project-types-and-lifecycle",
            "text": "Project States  The valid states of Projects are:     Project Stages  Description      Proposal  Doesn't really exist yet, has no real     resources, but is expected to be created     due to a specific need.    Incubation  Project has resources, but is recognized     to be in the early stages and is not yet     contributing product-ready code.    Mature  Project is a fully functioning, successful     open source project that has been assigned     to a Working Group    Archived  Project has been recognized as dead, and     has been archived as it's no longer a going     concern.     Project State Transitions  The valid transitions (and their associated reviews) are:     From State  To State  Review      null  Proposal     Proposal  Incubation  Creation Review    Incubation  Mature  Graduation Review    {Proposal, Incubation, Mature}  Archived  Termination Review     Review processes  For each review, there will be a publicly visible wiki/web \ntemplate filled out containing the relevant review information, \nas outlined in the sections below.  The review document must be posted and announced for public \nomment for at least 2 weeks prior to the date the review is\nscheduled, to give participants sufficient time to decide.  Reviews ideally should be conducted in a manner that is sensitive \nto the global nature of the community (i.e., the geography and \ntime zone dispersion).  Reviews may in some circumstances be combined (for example a \ncreation and graduation review for a Project seeking to come \ninto the Alliance that is already mature in its previous venue).\nIf reviews are combined, the review document need only be posted \nfor a single 2 week review period.  Creation review process and criteria   Proposal posted for 2 weeks of review. \n      Proposal template  \n     a. Name (trademark) is OK\n     b. Description is complete \n     c. Scope is well defined\n     d. Resources are committed (developers committed to working)\n     e. Committers are identified\n     f. Meets board policy (including IPR)\n     g. Proposed initial Working Group\n     h. Proposal emailed to TSC mailing list allowing for \n        2 weeks of review: allseen-tsc@lists.allseenalliance.org  Review by TSC and approval   Graduation review process and criteria   Graduation Proposal posted for 2 weeks:\n     a. Can demonstrate a working code base ready for \n        commercial products\n     b. Has an active community\n     c. Demonstrates a history of Releases (using the Mature \n        Release Process)\n     d. Justifies desired Working Group (new or existing)\n     e. Accepts any conditions of joining proposed Working Group  Committers of the Project vote on seeking graduation   Accepted by vote of Working Group, if it already exists.\n     Otherwise, accepted by vote of TSC to create a new Working \n     Group using the  Creation Review process and criteria    Review by TSC and Approval    Termination Review process and criteria   Termination Proposal Posted for 2 weeks:\n     a. States reason for Project termination being sought\n     b. Estimates impact on other Projects, users, and \n        communities, and how those will be mitigated\n     c. Indicates where the Project would be archived  Can be initiated by vote of committers within the Project  Can be initiated by TSC or Working Group if there are \n     either no remaining committers for the Project or there \n     have been no commits to the SCM in 18 months   Transitioning between Working Groups  From time to time Projects may have reason to change Working Group membership.  Examples include:   Scope of a Working Group has evolved over time and certain\n    Projects no longer have obvious synergies with the rest  Scopes of two Working Groups have evolved over time and are\n    similar enough to merit consolidation   Process for changing Working Group membership   Working Group Change Proposal posted for 2 weeks\n     a. Desired Working Group\n     b. Reason for leaving existing Working Group\n     c. Reason for joining new Working Group  Review and approval by Committers in new Working Group  Review by TSC and approval   Once a Project has been approved to move, they can participate \nimmediately in Working Group activities.",
            "title": "Project Types and Lifecycle"
        },
        {
            "location": "/project-lifecycle/#working-groups",
            "text": "Each Project must be a member of a single Working Group. \nThe creation of Working Groups and placement of Projects within \nthem should be carefully considered to reduce the risk of\nfragmentation.  New Working Groups should be created only when \nit is clear that a Project does not logically fit within the scope \nof an existing Working Group.  Working Group States     Working Groups  Description      Proposed  A Project has been accepted into the Mature     state, does not fit within the scope of any     other Working Group, and requires a new     Working Group to be created.    Active  Working Group contains one or more Projects     in the Mature state, and a Working Group Chair     is actively participating in the Technical     Steering Committee.    Archived  Working Group has no remaining Projects in     the Mature state, and has been pruned from the     project.     Working Group State Transitions  The valid transitions (and their associated reviews) are:     From State  To State  Review      null  Active  Creation Review    Active  Archived  Termination Review     Review Processes  For each review, there will be a publicly visible wiki/web \ntemplate filled out containing the relevant review information, \nas outlined in the sections below.  The review document must be posted and announced for public \ncomment for at least 2 weeks prior to the date the review \nis scheduled, to give participants sufficient time to decide.  Reviews ideally should be conducted in a manner that is sensitive \nto the global nature of the community (i.e., the geography and \ntime zone dispersion).  Creation Review process and criteria   Project makes request for a new Working Group during \n      Graduation Review \n     a. Justifies need for a new Working Group instead of \n        joining an existing one\n     b. Nominates the Working Group Chair  Review by TSC and approval   Termination  Working Group termination is initiated automatically and \nimmediately when the last Mature Project has been removed.\nSituations in which this may occur include:   No Projects remain in the Mature state  Projects have been consolidated and transferred \n    to another Working Group   Working Groups with at least one Mature Project cannot be terminated.",
            "title": "Working Groups"
        },
        {
            "location": "/project-lifecycle/#bootstrap-process",
            "text": "At the time of the formation of the Alliance, there are expected\nto be several initial Projects contributed. These initial \nProjects will come in at various levels of maturity. In order \nto sort these Projects into the most appropriate Lifecycle state \nand Working Groups in a way that is clear, consistent, and fair:   Prior to a date to be decided by the TSC in its first \n     meeting not less than 1 month and not more than 6 months \n     after the Alliance launches, a Project may decide to either\n     a. Seek entry in \u2018bootstrap\u2019 state (explained more below)\n     b. Seek entry via the steady state Project Lifecycle (ie,\n        propose for Incubation)  If a Project enters is in \u2018bootstrap\u2019 state, at the first\n     meeting of the official (post-formation) TSC after it \n     petitions to exit bootstrap state, the TSC will decide \n     the proper Project Lifecycle state and Working Group for \n     the Project based on criteria rooted in the steady state \n     Project Lifecycle.  Once in a non-bootstrap state, a Project follows the \n    steady state Project Lifecycle.",
            "title": "Bootstrap Process"
        },
        {
            "location": "/supported-platforms/",
            "text": "Supported Platforms\n\n\nThe AllJoyn standard core builds and runs on the following platforms. The depth\nand type of testing for each platform varies, so consult the linked release\ninformation for detailed test information.\n\n\n15.09 release\n\n\nPlatforms\n\n\n\n\n\n\n\n\nPlatform\n\n\nCore\n\n\nBase Services (planned)\n\n\nPlatform Versions\n\n\nToolchain/IDE\n\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nX\n\n\nX\n\n\nJB, KK, LP\n\n\nAndroid SDK, NDK r10e\n\n\n\n\n\n\n\n\nLanguage Bindings\n\n\nThe table below lists which language bindings are supported on which platforms\nfor Core and Base Services\n\n\n\n\n\n\n\n\nPlatform\n\n\nC++\n\n\nC\n\n\nJava\n\n\nObjective-C\n\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nCore\n\n\nCore\n\n\nCore\n\n\n\n\n\n\n\n\n\n\n15.09 Notes:\n\n See the \nCore 15.09 Release Review\n for details about the depth of testing on various platforms.\n\n Sun Java 7 is required for Java bindings.\n\n\n\n\n15.04 release\n\n\nPlatforms\n\n\n\n\n\n\n\n\nPlatform\n\n\nCore\n\n\nBase Services (planned)\n\n\nPlatform Versions\n\n\nToolchain/IDE\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\nX\n\n\nX\n\n\nWindows 7 to 10\n\n\nVS 2012, VS 2013\n\n\n\n\n\n\nAndroid\n\n\nX\n\n\nX\n\n\nJB, KK, LP\n\n\nAndroid SDK, NDK r9d\n\n\n\n\n\n\niOS\n\n\nX\n\n\nX\n\n\niOS 8.1\n\n\nXCode 6.1\n\n\n\n\n\n\nOS X\n\n\nX\n\n\n\n\nOS X 10.9\n\n\nXCode 6.1\n\n\n\n\n\n\nLinux Ubuntu\n\n\nX\n\n\nX\n\n\nUbuntu 14.04\n\n\n\n\n\n\n\n\nOpen WRT\n\n\nX\n\n\nX\n\n\nBB, CC\n\n\n\n\n\n\n\n\n\n\nLanguage Bindings\n\n\nThe table below lists which language bindings are supported on which platforms\nfor Core and Base Services\n\n\n\n\n\n\n\n\nPlatform\n\n\nC++\n\n\nC\n\n\nJava\n\n\nObjective-C\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\nCore, Base\n\n\nCore\n\n\nCore\n\n\n\n\n\n\n\n\nAndroid\n\n\nCore, Base\n\n\nCore\n\n\nCore, Base\n\n\n\n\n\n\n\n\niOS\n\n\nCore\n\n\n\n\n\n\nCore, Base\n\n\n\n\n\n\nOS X\n\n\nCore\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Ubuntu\n\n\nCore, Base\n\n\nCore\n\n\nCore, Base\n\n\n\n\n\n\n\n\nOpen WRT\n\n\nCore, Base\n\n\nCore\n\n\n\n\n\n\n\n\n\n\n\n\n15.04 Notes:\n\n See the \nCore 15.04 Release Review\n for details about the depth of testing on various platforms.\n\n Sun Java 7 is required for Java bindings.\n\n\n\n\n14.12 release\n\n\nPlatforms\n\n\n\n\n\n\n\n\nPlatform\n\n\nCore\n\n\nBase Services\n\n\nPlatform Versions\n\n\nToolchain/IDE\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\nX\n\n\nX\n\n\nWin7, Win8\n\n\nVS 2013\n\n\n\n\n\n\nAndroid\n\n\nX\n\n\nX\n\n\nICS, JB, KK\n\n\nAndroid SDK, NDK r9d\n\n\n\n\n\n\niOS\n\n\nX\n\n\nX\n\n\niOS 7, iOS 7.1\n\n\nXCode 6.1\n\n\n\n\n\n\nOS X\n\n\nX\n\n\n\n\nOS X 10.9\n\n\nXCode 6.1\n\n\n\n\n\n\nLinux Ubuntu\n\n\nX\n\n\nX\n\n\nUbuntu 14.04\n\n\n\n\n\n\n\n\nOpen WRT\n\n\nX\n\n\nX\n\n\nBB, CC\n\n\n\n\n\n\n\n\n\n\nLanguage Bindings\n\n\nThe table below lists which language bindings are supported on which platforms\nfor Core and Base Services.\n\n\n\n\n\n\n\n\nPlatform\n\n\nC++\n\n\nC\n\n\nJava\n\n\nObjective-C\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\nCore, Base\n\n\nCore\n\n\nCore\n\n\n\n\n\n\n\n\nAndroid\n\n\nCore, Base\n\n\nCore\n\n\nCore, Base\n\n\n\n\n\n\n\n\niOS\n\n\nCore\n\n\n\n\n\n\nCore, Base\n\n\n\n\n\n\nOS X\n\n\nCore\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Ubuntu\n\n\nCore, Base\n\n\nCore\n\n\nCore, Base\n\n\n\n\n\n\n\n\nOpen WRT\n\n\nCore, Base\n\n\nCore\n\n\n\n\n\n\n\n\n\n\n\n\n14.12 Notes:\n\n See the \nCore 14.12 Release Review\n and \nBase Services 14.12 Release Review\n for details about the depth of testing on various platforms.\n\n Sun Java 7 is required for Java bindings.\n\n\n\n\n14.06 release\n\n\nPlatforms\n\n\n\n\n\n\n\n\nPlatform\n\n\nCore\n\n\nBase Services\n\n\nPlatform Versions\n\n\nToolchain/IDE\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\nX\n\n\n\n\nWin7, Win8\n\n\nVS 2012\n\n\n\n\n\n\nAndroid\n\n\nX\n\n\nX\n\n\nGB, ICS, JB, KK\n\n\nAndroid SDK, NDK r9\n\n\n\n\n\n\niOS\n\n\nX\n\n\nX\n\n\niOS 7, iOS 7.1\n\n\nXCode 5.1\n\n\n\n\n\n\nOS X\n\n\nX\n\n\n\n\nOS X 10.9\n\n\nXCode 5.1\n\n\n\n\n\n\nLinux Ubuntu\n\n\nX\n\n\nX\n\n\nUbuntu 12.04\n\n\n\n\n\n\n\n\nOpen WRT\n\n\nX\n\n\nX\n\n\nAA, BB\n\n\n\n\n\n\n\n\n\n\nLanguage Bindings\n\n\nThe table below lists which language bindings are supported on which platforms\nfor Core and Base Services.\n\n\n\n\n\n\n\n\nPlatform\n\n\nC++\n\n\nC\n\n\nC# Unity\n\n\nJava\n\n\nObjective-C\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\nCore\n\n\nCore\n\n\nCore\n\n\nCore\n\n\n\n\n\n\n\n\nAndroid\n\n\nCore, Base\n\n\nCore\n\n\nCore\n\n\nCore, Base\n\n\n\n\n\n\n\n\niOS\n\n\nCore\n\n\n\n\n\n\n\n\nCore, Base\n\n\n\n\n\n\nOS X\n\n\nCore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Ubuntu\n\n\nCore, Base\n\n\nCore\n\n\n\n\nCore, Base\n\n\n\n\n\n\n\n\nOpen WRT\n\n\nCore, Base\n\n\nCore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n14.06 Notes:\n\n See the \nCore 14.06 Release Review\n and \nBase Services 14.06 Release Review\n for details about the depth of testing on various platforms.\n\n Sun Java 7 is required for Java bindings.\n* Unity 4.x is required for Unity bindings.",
            "title": "Home"
        },
        {
            "location": "/supported-platforms/#supported-platforms",
            "text": "The AllJoyn standard core builds and runs on the following platforms. The depth\nand type of testing for each platform varies, so consult the linked release\ninformation for detailed test information.",
            "title": "Supported Platforms"
        },
        {
            "location": "/supported-platforms/#1509-release",
            "text": "Platforms     Platform  Core  Base Services (planned)  Platform Versions  Toolchain/IDE      Android  X  X  JB, KK, LP  Android SDK, NDK r10e     Language Bindings  The table below lists which language bindings are supported on which platforms\nfor Core and Base Services     Platform  C++  C  Java  Objective-C      Android  Core  Core  Core      15.09 Notes:  See the  Core 15.09 Release Review  for details about the depth of testing on various platforms.  Sun Java 7 is required for Java bindings.",
            "title": "15.09 release"
        },
        {
            "location": "/supported-platforms/#1504-release",
            "text": "Platforms     Platform  Core  Base Services (planned)  Platform Versions  Toolchain/IDE      Windows  X  X  Windows 7 to 10  VS 2012, VS 2013    Android  X  X  JB, KK, LP  Android SDK, NDK r9d    iOS  X  X  iOS 8.1  XCode 6.1    OS X  X   OS X 10.9  XCode 6.1    Linux Ubuntu  X  X  Ubuntu 14.04     Open WRT  X  X  BB, CC      Language Bindings  The table below lists which language bindings are supported on which platforms\nfor Core and Base Services     Platform  C++  C  Java  Objective-C      Windows  Core, Base  Core  Core     Android  Core, Base  Core  Core, Base     iOS  Core    Core, Base    OS X  Core       Linux Ubuntu  Core, Base  Core  Core, Base     Open WRT  Core, Base  Core       15.04 Notes:  See the  Core 15.04 Release Review  for details about the depth of testing on various platforms.  Sun Java 7 is required for Java bindings.",
            "title": "15.04 release"
        },
        {
            "location": "/supported-platforms/#1412-release",
            "text": "Platforms     Platform  Core  Base Services  Platform Versions  Toolchain/IDE      Windows  X  X  Win7, Win8  VS 2013    Android  X  X  ICS, JB, KK  Android SDK, NDK r9d    iOS  X  X  iOS 7, iOS 7.1  XCode 6.1    OS X  X   OS X 10.9  XCode 6.1    Linux Ubuntu  X  X  Ubuntu 14.04     Open WRT  X  X  BB, CC      Language Bindings  The table below lists which language bindings are supported on which platforms\nfor Core and Base Services.     Platform  C++  C  Java  Objective-C      Windows  Core, Base  Core  Core     Android  Core, Base  Core  Core, Base     iOS  Core    Core, Base    OS X  Core       Linux Ubuntu  Core, Base  Core  Core, Base     Open WRT  Core, Base  Core       14.12 Notes:  See the  Core 14.12 Release Review  and  Base Services 14.12 Release Review  for details about the depth of testing on various platforms.  Sun Java 7 is required for Java bindings.",
            "title": "14.12 release"
        },
        {
            "location": "/supported-platforms/#1406-release",
            "text": "Platforms     Platform  Core  Base Services  Platform Versions  Toolchain/IDE      Windows  X   Win7, Win8  VS 2012    Android  X  X  GB, ICS, JB, KK  Android SDK, NDK r9    iOS  X  X  iOS 7, iOS 7.1  XCode 5.1    OS X  X   OS X 10.9  XCode 5.1    Linux Ubuntu  X  X  Ubuntu 12.04     Open WRT  X  X  AA, BB      Language Bindings  The table below lists which language bindings are supported on which platforms\nfor Core and Base Services.     Platform  C++  C  C# Unity  Java  Objective-C      Windows  Core  Core  Core  Core     Android  Core, Base  Core  Core  Core, Base     iOS  Core     Core, Base    OS X  Core        Linux Ubuntu  Core, Base  Core   Core, Base     Open WRT  Core, Base  Core        14.06 Notes:  See the  Core 14.06 Release Review  and  Base Services 14.06 Release Review  for details about the depth of testing on various platforms.  Sun Java 7 is required for Java bindings.\n* Unity 4.x is required for Unity bindings.",
            "title": "14.06 release"
        },
        {
            "location": "/user-groups/",
            "text": "User Groups",
            "title": "Home"
        },
        {
            "location": "/user-groups/#user-groups",
            "text": "",
            "title": "User Groups"
        }
    ]
}